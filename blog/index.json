{
    "version": "https://jsonfeed.org/version/1.1",
    "title": "Blog on Ramblings of a cloud engineer",
    "description": "Recent content in Blog on Ramblings of a cloud engineer",
    "home_page_url": "https://skarlso.github.io",
    "feed_url": "https://skarlso.github.io/blog/index.json",
    "language": "en-GB",
    "icon": "https://skarlso.github.io/apple-touch-icon.png",
    "favicon": "https://skarlso.github.io/apple-touch-icon.png",
    "authors": [
        {
            "name": "Gergely Brautigam",
            "url": "https://gergelybrautigam.com"
        }
    ],
    "items": [
        {
            "title": "Blog refactor",
            "date_published": "2021-05-25T01:01:00+01:00",
            "date_modified": "2021-05-25T01:01:00+01:00",
            "id": "https://skarlso.github.io/2021/05/25/blog-refactor/",
            "url": "https://skarlso.github.io/2021/05/25/blog-refactor/",
            "authors": [
                {
                  "name": "hannibal"
                }
            ],
            "content_html": "\u003ch1 id=\"blog-refactor\"\u003eBlog Refactor\u003c/h1\u003e\n\u003cp\u003eFinally, I went back and fixed a lot of old posts and old code entries. I tried to fix and repair links and images, but some are lost forever on some obscure WordPress blog which I used to use.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m glad though that the code is intact and I could re-read a lot of my old stuff. It\u0026rsquo;s interesting to see how much I evolved, how much my writing evolved. I used to write a lot of groovy and python and java and bash and ruby.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;ve been writing this blog for a long time now and I would like to write even more! For example, I\u0026rsquo;m planning on a new series called, Things for People in a hurry, where I\u0026rsquo;ll explain concepts and technologies in as less detail as possible, but still relevant and understandable. For people who just want to be in loop, but don\u0026rsquo;t care / have time for an in-depth read ATM.\u003c/p\u003e\n\u003cp\u003eHopefully I learn a lot of things while writing those sections and I hope that people will enjoy them and give me stuff they are interested about but don\u0026rsquo;t have time to look up.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m interested in all technology and concepts, such as Quantum computing too!\u003c/p\u003e\n\u003cp\u003eIn any case,\nThanks for staying with me all these years, and here\u0026rsquo;s to much much more!\nGergely.\u003c/p\u003e\n"
        },
        {
            "title": "Reader's Digest 2021-04",
            "date_published": "2021-04-21T01:01:00+01:00",
            "date_modified": "2021-04-21T01:01:00+01:00",
            "id": "https://skarlso.github.io/2021/04/21/readers-digest/",
            "url": "https://skarlso.github.io/2021/04/21/readers-digest/",
            "authors": [
                {
                  "name": "hannibal"
                }
            ],
            "content_html": "\u003ch1 id=\"readers-digest\"\u003eReader\u0026rsquo;s Digest\u003c/h1\u003e\n\u003cp\u003eI thought it would a cool idea if I kept a summary of the things I\u0026rsquo;ve read or listened to on a monthly\nbasis. Here is April of 2021 so far. Enjoy.\u003c/p\u003e\n\u003ch2 id=\"invincible\"\u003eInvincible\u003c/h2\u003e\n\u003cp\u003eAfter seeing it air on Amazon Prime, I had to go and read the comic. It\u0026rsquo;s quite a lot, but I assure you it\u0026rsquo;s worth it.\nSome spoiler alerts\u0026hellip;\u003c/p\u003e\n\u003cp\u003eOkay, so we follow this guy, Mark Grayson. He\u0026rsquo;s Invincible. He is also and alien, called a Viltrumite. I can hardly\nsummaries over 3000 pages of comic books so I\u0026rsquo;ll try to be brief.\u003c/p\u003e\n\u003cp\u003eThe Viltrumites are a race of warrior people who wants to conquer the whole galaxy. They also have the power to do so.\nThey are virtually immortal, live for thousands of years and are very durable. They can fly, have super strength and\na bunch of other things. The stories are insane. We follow all kinds of people across multiverses, a lot of villains and\nheroes. There is gore, sex, violance and immature jokes all around. It\u0026rsquo;s fantastic.\u003c/p\u003e\n\u003cp\u003eThere are better episodes and there are boring episodes as it goes with these things. The one thing that bothered me a lot\nis that the Viltrumites, of course, have a weak spot. You have to remember that these are people who want to be eliminated\nby a lot of other people in the whole galaxy. There is a literal coalition of planets who want to kill them.\u003c/p\u003e\n\u003cp\u003eAnd there are two main things which can kill / incapacitate them. The first one is a virus, which was developed by a\ntraiter Viltrumite which killed like 99.9% of them. And the other is the same weakness as the things have in the movie\ncalled The quiet place. It\u0026rsquo;s specific frequency sound. Granted, some very specific frequency, but it\u0026rsquo;s sound. Because Viltrumites have a\ndelicate equilibrium because of their flying ability, if there is a specific frequency sound being emitted in close proximity\nit can incapacitate or even kill a Viltrumite.\u003c/p\u003e\n\u003cp\u003eWhich makes me wonder that for thousands of years in multiple, parallel universes and with thousands of alien races,\nnobody even thought of doing that? It had to be Earth and Humans ( and a Dinosaur ) who came up with it? That\u0026rsquo;s just\nimplausible really. And after being used only a couple of times, they don\u0026rsquo;t use it again on a global scale!\u003c/p\u003e\n\u003cp\u003eAnyways. The story is still incredible and it has a lot of amazing content so I encourage comic lovers to read it all!\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eThat\u0026rsquo;s it for this month. Some lengthy blog posts and Invincible pretty much took up my reading time.\u003c/p\u003e\n\u003cp\u003eAnd as always,\nThanks for reading,\nGergely.\u003c/p\u003e\n"
        },
        {
            "title": "Reader's Digest 2021-03",
            "date_published": "2021-03-23T01:01:00+01:00",
            "date_modified": "2021-03-23T01:01:00+01:00",
            "id": "https://skarlso.github.io/2021/03/23/readers-digest/",
            "url": "https://skarlso.github.io/2021/03/23/readers-digest/",
            "authors": [
                {
                  "name": "hannibal"
                }
            ],
            "content_html": "\u003ch1 id=\"readers-digest\"\u003eReader\u0026rsquo;s Digest\u003c/h1\u003e\n\u003cp\u003eI thought it would a cool idea if I kept a summary of the things I\u0026rsquo;ve read or listened to on a monthly\nbasis. Here is March of 2021 so far. Enjoy.\u003c/p\u003e\n\u003ch2 id=\"the-aurora-database-paper\"\u003eThe Aurora Database paper\u003c/h2\u003e\n\u003cp\u003eThe paper about Aurora database from AWS can be found here: \u003ca href=\"http://nil.csail.mit.edu/6.824/2020/papers/aurora.pdf\"\u003ePaper\u003c/a\u003e.\nIt details the design decision taken to support a highly available, fault tolerant, fast replicating\ndatabase. They take the following approach\u0026hellip; They modified mysql database such as that they only send\naround the redo log and the redo log is enough to recover / replicate in order to achieve write and\nread consistency. They separate the data into Protected Groups and speed up terabytes of recovery by\ndoing 10 Gigabyte segments in parallel. The database IS the logs. By only replicating the log instead\nof the data and the data page, they save millions in networks costs. The main gain however, is that\nthe storage was modified to understand the application. Instead of using General store they use a storage\nwhich understand the data. In this case, decoupling storage from the database, as so many do, was actually\na drawback.\u003c/p\u003e\n\u003ch2 id=\"gcatch-paper\"\u003eGCatch paper\u003c/h2\u003e\n\u003cp\u003eThis paper is a static concurrency bug analyser for Go found here \u003ca href=\"https://songlh.github.io/paper/gcatch.pdf\"\u003ePaper\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s ingenious! It\u0026rsquo;s a static analyser which finds mostly blocking bugs using channels in Go. In Go, it\u0026rsquo;s\nreally easy to write concurrent software using something called \u003ca href=\"https://tour.golang.org/concurrency/2\"\u003eChannels\u003c/a\u003e.\nThey are basically coroutines multiplexed onto kernel threads and thus you can have a million of them\nrunning around doing stuff. Go effectively made IO operators CPU bound with them. Coroutines aren\u0026rsquo;t new,\nhowever, it\u0026rsquo;s really easy to mess up code with channels in subtle ways. Analyzers exist, however, GCatch\nargues that they can\u0026rsquo;t find the most subtle of bugs, only some surface bugs really.\u003c/p\u003e\n\u003cp\u003eThis paper proposes a tool which does inter-procedural, path-sensitive analysis and uses Z3 to find paths\nwhich can lead to deadlocks in code that uses locking primitives and channels. It also contains five other\nprominent tools. It converts mutexes into channels internally with buffer size zero and sends on it on\nLock and reads from it on Unlock, then performs a bunch of path combinations and goes through those\nsuspicious paths and performs its analysis.\u003c/p\u003e\n\u003cp\u003eThey found a hundred and something bugs in Docker and Kubernetes. Things like, sending on a channel in\n\u003ccode\u003eselect\u003c/code\u003e when in fact, a timeout already returned, thus that Go routine is not indefinitely stuck. Since\nit can\u0026rsquo;t send its output on the channel, the program didn\u0026rsquo;t quit so it\u0026rsquo;s not GC-d. A simple fix is to\nmake the channel of size 1 so even if there is a chance that the scope quit it can still send and quit.\nLike Exec.\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s an interesting read and the tool is awesome, however\u0026hellip;. It was written with Go 14 and it\u0026rsquo;s proving to\nbe difficult to port to current version using modules. I would hate to see this tool getting left behind\nbecause it can\u0026rsquo;t be turned into a linter.\u003c/p\u003e\n\u003ch2 id=\"rhythm-of-war---brandon-sanderson\"\u003eRhythm of War - Brandon Sanderson\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://www.amazon.com/Rhythm-War-Stormlight-Archive-Book-ebook/dp/B0826NKZHR\"\u003eAmazon\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAn epic continuation of this saga with over a 1000 pages long and 54 hours of listening time on Audible.\nThis story has been ongoing for a while now. Brandon Sanderson came out with the first book back in 2010.\nThis is the continuation of the Stormlight Archive series. These are massive master pieces. I first came\nalong Brandon Sanderson when I read the Mistborn series. That was another epic novel. I love reading\nSanderson because he comes up with some unique ways of magic or magic like abilities which have some\ndivine sense in the end, or have some interesting explanation. And their abilities are almost always\nused in interesting ways.\u003c/p\u003e\n\u003cp\u003eFor example, a simple ability to pull or push metal. Turns out that results in things like, shooting\ncoins, or literally flying as the person tosses a coin to the ground and pushes on it, pushing themselves\nupwards in the end.\u003c/p\u003e\n\u003cp\u003eI could write many many pages about each and every fantastic novel, but I\u0026rsquo;m going to stick to this one\nexpecting that people know about the series.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;ve listened to this one as I\u0026rsquo;m insane busy, I couldn\u0026rsquo;t have read a 1000 something pages book.\nThe fantastic work of Micheal Kramer and Kate Reading is always a treat to listen too. They are both\nexcellent readers always making the characters live through their words.\u003c/p\u003e\n\u003cp\u003eSPOILERS:\u003c/p\u003e\n\u003cp\u003eThis time we mostly follow Eshonai\u0026rsquo;s and Venli\u0026rsquo;s but we finally also get what we wanted all these years.\nFinally, Kaladin and Shallan face their inner demons. And even though they aren\u0026rsquo;t fully okay, Kaladin\nspeaks his fourth oat and Shallan remembers her past. As much as I love this story, I don\u0026rsquo;t believe I\nwould have been able to listen or read another 1000 pages without these two resolving their problems.\nYou root for them so hard, it\u0026rsquo;s exhausting.\u003c/p\u003e\n\u003cp\u003eI won\u0026rsquo;t spoil everything but the twist at the end left me dumbstruck! It was such an amazing finish.\u003c/p\u003e\n\u003cp\u003eThe story follows the fused as they invade Urithiru. There is a side story for Navani and Jasna\ndoing their own thing and we do root for Navani and her fantastic discoveries regarding light and powers,\nbut Jasna is a side character in this story. Another main character is Witt. We finally get to know\nwho he is and where he comes from. We also understand now that the Fused are actually from another planet\nin the same system and Odium just wants to get off this system and fight a holy war with some ancient Gods\nsomewhere. A lot of things which made no sense are revealed finally. I recommend it if you have the time\nto listen or read it.\u003c/p\u003e\n\u003ch2 id=\"how-to-take-smart-notes\"\u003eHow to take smart notes\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://www.amazon.com/How-Take-Smart-Notes-Nonfiction-ebook/dp/B06WVYW33Y\"\u003eAmazon\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis one\u0026rsquo;s review will be condensed because it would be rather lengthy otherwise. It\u0026rsquo;s basically talking about\nhow to use the \u003ca href=\"https://zettelkasten.de/\"\u003eZettelkasten\u003c/a\u003e system. But it does so much more then that. It challenges\nthe way you think, the way you learn the way things are taught in school and the way you process and store\ninformation. Condensed I would say these are the main points:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eConnect new information to existing information. Information without connection isn\u0026rsquo;t worth much and will be\nremembered poorly or not at all.\u003c/li\u003e\n\u003cli\u003eAlways read with a pen in your hand and take notes about what you are reading.\u003c/li\u003e\n\u003cli\u003eAlways use your own words and never just copy blindly; by doing this, you will better understand what you just\nread. The same goes to things like, writing a blog in which you explain something you think you know. It reveals\nthe black holes in your knowledge which you didn\u0026rsquo;t even know exist.\u003c/li\u003e\n\u003cli\u003eDon\u0026rsquo;t try to group based on topics. That will result in forced connections and will leave you confined within\nthat topic. Topics should emerge from your notes and then gathered into indexes which contain links to related\nnotes and information.\u003c/li\u003e\n\u003cli\u003eTags are useful but don\u0026rsquo;t over do them. If you have a 1000 tags your information will be lost and hard to find\nbecause things that are unrelated will show up in the searches. So go easy on the tags\u003c/li\u003e\n\u003cli\u003eNote taking is a chore. It\u0026rsquo;s not something that you just do and it just works. Good note taking requires effort.\nYou take notes while you read then transcribe them into Zettelkasten and throw away the rest. Those are transient\nnotes. Zettelkasten notes focus on the gist of things. On the meat!\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eAnd that\u0026rsquo;s all for this months. Rhythm of War, the papers and the note taking book pretty much took all my\ntime away, so not much else got done since January. But I still think this is a nice finish. Especially\nconsidering Rhythm of War was such a huge epic.\u003c/p\u003e\n\u003cp\u003eAnd as always,\nThanks for reading,\nGergely.\u003c/p\u003e\n"
        },
        {
            "title": "Reader's Digest 2021-01",
            "date_published": "2021-02-01T01:01:00+01:00",
            "date_modified": "2021-02-01T01:01:00+01:00",
            "id": "https://skarlso.github.io/2021/02/01/readers-digest/",
            "url": "https://skarlso.github.io/2021/02/01/readers-digest/",
            "authors": [
                {
                  "name": "hannibal"
                }
            ],
            "content_html": "\u003ch1 id=\"readers-digest\"\u003eReader\u0026rsquo;s Digest\u003c/h1\u003e\n\u003cp\u003eI thought it would a cool idea if I kept a summary of the things I\u0026rsquo;ve read or listened to on a monthly\nbasis. Here is January of 2021 so far. Enjoy.\u003c/p\u003e\n\u003ch2 id=\"all-systems-red---murderbot\"\u003eAll systems red - Murderbot\u003c/h2\u003e\n\u003cp\u003eThis book is SHORT. It\u0026rsquo;s little over 3 hours of listening time. I\u0026rsquo;m listening at 1.30 so it\u0026rsquo;s just short of 2 hours.\nBut it\u0026rsquo;s entertaining. The murderbot series is following a rouge security bot which hacked its own governor module\nand is self aware and free. But\u0026hellip; it kind of hates humans and interacting with them. It just calls itself murderbot\nbut has no intention of killing all humans. Instead, all its wants to do is basically\u0026hellip; watch movies and various series on something called a Feed. In the first book of the series, this one, we follow Murderbot protect a few humans\nthat it gets to short of like after an attempt on their lives.\u003c/p\u003e\n\u003cp\u003eThe narrator, Kevin R. Free, is doing a great job of impersonating the robot and you can feel the anxiety from his words when inevitably, the robot has to interact with humans. Whether it likes it or not\u0026hellip;\u003c/p\u003e\n\u003ch2 id=\"artificial-condition---murderbot\"\u003eArtificial Condition - Murderbot\u003c/h2\u003e\n\u003cp\u003eAnother short story following our Murderbot. This time, it wants to get to the bottom of a mystery involving its past.\nIn his past, the Murderbot, when it hacked its governor module, it went berserk and killed 80 people in the process. The company who owned it, covered it all up. Or so it thought. During its journey to find out what happened it met a new friend, Art. Art is a huge vessel capable of massive computing capacity, and happens to also love watching series.\nThey team up and help a rag-tag group of researchers while trying to find out what happened to Murderbot and those 80 people.\u003c/p\u003e\n\u003ch2 id=\"rogue-protocol\"\u003eRogue Protocol\u003c/h2\u003e\n\u003cp\u003eAnother fantastic episode of Murderbot. You can sense that the bot is slowly evolving into a more caring bot. Even though it\u0026rsquo;s saying repeatedly that it doesn\u0026rsquo;t case, it starts to care. This book was an action packed one. Lot\u0026rsquo;s of tension and fear inducing moments. Silence then all out war! We also meet Micky, who is a \u0026ldquo;pet bot\u0026rdquo; for some humans. Their relationship starts off as rocky but after a while, Murderbot comes to appreciate Micky for another free soul. There are some open question in there once the story finishes.\u003c/p\u003e\n\u003ch2 id=\"the-vexed-generation---magician-20\"\u003eThe vexed generation - Magician 2.0\u003c/h2\u003e\n\u003cp\u003eBeing a programmer, I followed Magician 2.0 with an interest. I listen to all of the books in the series. It was fun at first, but then started to get a bit low in quality and repetitive. I don\u0026rsquo;t really care about the people in it, and I don\u0026rsquo;t really care about what\u0026rsquo;s happening to them. And since they are effectively immortal there is no real danger to them at all. In this episode however, there was real danger at the end. And while the protagonist kids were kind of annoying, and it could have been narrated better and I felt like some of the characters weren\u0026rsquo;t fully utilized, the story kind of still was fun to read. Definitely better than the previous one about dragons.\u003c/p\u003e\n\u003ch2 id=\"heavens-river---bobiverse\"\u003eHeaven\u0026rsquo;s River - Bobiverse\u003c/h2\u003e\n\u003cp\u003eThe latest addition to the Bobiverse universe. This time there is civil war amongst the Bobs and, of course, there is a new species to explore. The species was interesting, and the talk about mega-structures was also interesting, but I found that the lack of coding, and fighting and technical stuff ( what caught me on the first couple of Bob adventures ) left me wanting for more and left me with an empty feeling at the end. I really missed the proves of Bob and couldn\u0026rsquo;t care less about Starfleet.\u003c/p\u003e\n\u003ch2 id=\"armada\"\u003eArmada\u003c/h2\u003e\n\u003cp\u003eThis one was interesting. It talks about the same premise as The Last Starfighter ( there is a reference to that in there ) which I found fascinating as a child. It is about the fact that an alien race uses video games to find the best soldier for a mission to save the universe. This time though the Earth is doing the recruiting and it is against an alien invasion. And much like Ender\u0026rsquo;s Game, it turns out that the threat is real and that all fighting on the video game that our protagonist did was preparing him for this situation. The twist was pretty good too.\u003c/p\u003e\n\u003ch2 id=\"prometheus-up-and-running\"\u003ePrometheus Up And Running\u003c/h2\u003e\n\u003cp\u003eThis one has a larger post incoming.\u003c/p\u003e\n\u003cp\u003eThat\u0026rsquo;s all for this month.\nThanks for reading,\nGergely.\u003c/p\u003e\n"
        },
        {
            "title": "How to deploy a Go (Golang) backend with a React frontend separately on Kubernetes - Part One",
            "date_published": "2020-07-23T21:01:00+01:00",
            "date_modified": "2020-07-23T21:01:00+01:00",
            "id": "https://skarlso.github.io/2020/07/23/kubernetes-deploy-golang-react-apps-separately-part1/",
            "url": "https://skarlso.github.io/2020/07/23/kubernetes-deploy-golang-react-apps-separately-part1/",
            "authors": [
                {
                  "name": "hannibal"
                }
            ],
            "content_html": "\u003ch1 id=\"intro\"\u003eIntro\u003c/h1\u003e\n\u003cp\u003eWelcome. This is a longer post about how to deploy a Go backend with a React frontend\non Kubernetes as separate entities. Instead of the usual compiled together single binary Go\napplication, we are going to separate the two. Why? Because usually a React frontend is just a \u0026ldquo;static\u0026rdquo;\nSPA app with very little requirements in terms of resources, while the Go backend does most of the\nleg work, requiring a lot more resources.\u003c/p\u003e\n\u003cp\u003ePart two of this will contain scaling, utilization configuration, health probes, readiness probes,\nand how to make sure our application can run multiple instances without stepping on each other\u0026rsquo;s toes.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eNote\u003c/em\u003e: This isn\u0026rsquo;t going to be a Kubernetes guide. Some knowledge is assumed.\u003c/p\u003e\n\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"/img/kube/short-version.png\" alt=\"Give me the short version\"\u003e\u003c/p\u003e\n\u003cp\u003eThis post details a complex setup of an infrastructure with a second part coming on scaling and how to make\nyour application scalable in the first place by doing idempotent transactions or dealing with locking and\nseveral instances of the same application not stepping on each other\u0026rsquo;s foot.\u003c/p\u003e\n\u003cp\u003eThis, part one, details how to deploy traditional REST + Frontend based application in Go + React, but not bundled\ntogether as a single binary, instead having the backend separate from the frontend. They key in doing so is explained\nat the \u003ca href=\"#ingress\"\u003eIngress\u003c/a\u003e section when talking about routing specific URIs to the backend and frontend services.\u003c/p\u003e\n\u003cp\u003eIf you are familiar with Kubernetes and infrastructure setup, feel free to skip ahead to that section. Otherwise, enjoy\nthe drawings or the writing or both.\u003c/p\u003e\n\u003ch2 id=\"technology\"\u003eTechnology\u003c/h2\u003e\n\u003cp\u003eThe SPA app will be handled by \u003ca href=\"https://www.npmjs.com/package/serve\"\u003eServe\u003c/a\u003e while the Go backend\nwill use \u003ca href=\"https://echo.labstack.com/\"\u003eEcho\u003c/a\u003e. The database will be Postgres.\u003c/p\u003e\n\u003cp\u003eWe are going to apply some best practices using Network Policies to cordon off traffic that we don\u0026rsquo;t\nwant to go outside.\u003c/p\u003e\n\u003cp\u003eWe will set up HTTPS using cert-manager and let\u0026rsquo;s encrypt. We\u0026rsquo;ll be using nginx as ingress\nprovider.\u003c/p\u003e\n\u003ch2 id=\"code\"\u003eCode\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"/img/kube/architect.png\" alt=\"Let me show you the code\"\u003e\u003c/p\u003e\n\u003cp\u003eAll, or most of the code, including the application can be found here:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/staple-org\"\u003eStaple\u003c/a\u003e. The application is a simple reading list manager with\nuser handling, email sending and lots of database access.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s get to it then!\u003c/p\u003e\n\u003ch2 id=\"kubernetes-provider\"\u003eKubernetes Provider\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"/img/kube/audition.png\" alt=\"Difficult Choice\"\u003e\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s start with the obvious one. Where do you would like to create your Kubernetes cluster?\u003c/p\u003e\n\u003cp\u003eThere are four major providers now-a-days. AWS \u003ca href=\"https://aws.amazon.com/eks/\"\u003eEKS\u003c/a\u003e, GCP \u003ca href=\"https://cloud.google.com/kubernetes-engine\"\u003eGKE\u003c/a\u003e,\nAzure \u003ca href=\"https://azure.microsoft.com/en-us/services/kubernetes-service/\"\u003eAKS\u003c/a\u003e and DigitalOcean \u003ca href=\"https://www.digitalocean.com/products/kubernetes/\"\u003eDKE\u003c/a\u003e.\nPersonally, I prefer DO because, it\u0026rsquo;s a lot cheaper than the others. The downside is that DO only\nprovides ReadWriteOnce persistent volumes. This gets to be a problem when we are trying to update\nand the new Pod can\u0026rsquo;t mount the volume because it\u0026rsquo;s already taken by the existing one. This can be\nsolved by a good ol NFS instance. But that\u0026rsquo;s another story.\u003c/p\u003e\n\u003cp\u003eAWS' was late to the party and their solution is quite fragile and the API is terrible. GCP is best in terms\nof technicalities, api, handling, and updates. Azure is surprisingly good, however, the documentation is\nmost of the times out of date or even plain incorrect at some places.\u003c/p\u003e\n\u003ch2 id=\"setup-basics\"\u003eSetup Basics\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"/img/kube/owl.jpg\" alt=\"Owl\"\u003e\u003c/p\u003e\n\u003cp\u003eTo setup your Kubernetes instance, follow DigitalOcean\u0026rsquo;s Kubernetes Getting Started guide. It\u0026rsquo;s really simple.\nWhen you have access to the cluster via kubectl I highly recommend using this tool: \u003ca href=\"https://github.com/derailed/k9s\"\u003ek9s\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s a flexible and quite handy tool for quick observations, logs, shells to pods, edits and generally following what\u0026rsquo;s\nhappening to your cluster.\u003c/p\u003e\n\u003cp\u003eNow that we are all set with our own little cluster, it\u0026rsquo;s time to have some people move in. First, we are going to\ninstall cert-manager.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eNote\u003c/em\u003e: I\u0026rsquo;m not going to use Helm because I think it\u0026rsquo;s unnecessary in this setting. We aren\u0026rsquo;t going to install\nthese things in a highly configurable way and updating with helm is a pain in the butt. For example, for cert-manager\nthe update with helm takes several steps, whilst updating with a plain yaml file is just applying the next version\nof the yaml file.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m not going to explain how to install cert-manager or nginx. I\u0026rsquo;ll link to their respective guides because frankly, they\nare simple to follow and work out of the box.\u003c/p\u003e\n\u003cp\u003eTo install nginx, simply apply the yaml file located here: \u003ca href=\"https://kubernetes.github.io/ingress-nginx/deploy/#digital-ocean\"\u003eDigitalOcean Nginx\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eTo install cert-manager follow this guide: \u003ca href=\"https://cert-manager.io/docs/installation/kubernetes/\"\u003ecert-manager\u003c/a\u003e.\nFollow the regular manifest install part, then ignore the Helm part and proceed with verification and then install\nyour issuer. I used a simple ACME/http01 issuer from here: \u003ca href=\"https://cert-manager.io/docs/configuration/acme/http01/\"\u003eacme/http01\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eNote\u003c/em\u003e: That acme configuration contains the \u003cstrong\u003estaging\u003c/strong\u003e url. This is to test that things are working. Once you are\nsure that everything is wired up correctly, switch that url to this one:\n\u003ccode\u003ehttps://acme-v02.api.letsencrypt.org/directory\u003c/code\u003e -\u0026gt; prod url. For example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ecert-manager.io/v1alpha2\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eClusterIssuer\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eletsencrypt-prod\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eacme\u003c/span\u003e:\n    \u003cspan style=\"color:#75715e\"\u003e# The ACME server URL\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eserver\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ehttps://acme-v02.api.letsencrypt.org/directory\u003c/span\u003e\n    \u003cspan style=\"color:#75715e\"\u003e# Email address used for ACME registration\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eemail\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eyour@email.com\u003c/span\u003e\n    \u003cspan style=\"color:#75715e\"\u003e# Name of a secret used to store the ACME account private key\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eprivateKeySecretRef\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eletsencrypt-prod\u003c/span\u003e\n    \u003cspan style=\"color:#75715e\"\u003e# Enable the HTTP-01 challenge provider\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003esolvers\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003ehttp01\u003c/span\u003e:\n          \u003cspan style=\"color:#f92672\"\u003eingress\u003c/span\u003e:\n            \u003cspan style=\"color:#f92672\"\u003eclass\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cem\u003eNote\u003c/em\u003e: I\u0026rsquo;m using a ClusterIssuer because I have multiple domains and multiple namespaces.\u003c/p\u003e\n\u003cp\u003eThat\u0026rsquo;s it. Cert-manager and nginx should be up and running. Later on, we will create our own\ningress rules.\u003c/p\u003e\n\u003ch2 id=\"domain\"\u003eDomain\u003c/h2\u003e\n\u003cp\u003eNext, you\u0026rsquo;ll need a domain to bind too. There are a gazillion domain providers out there like\nno-ip, GoDaddy, HostGator, Shopify and so on. Choose one which is available to you or has the best\nprices.\u003c/p\u003e\n\u003cp\u003eThere are some good guides on how to choose a domain and where to create it.\nFor example: \u003ca href=\"https://domains.google/learning-center/5-things-to-watch-out-for-when-buying-a-domain/\"\u003e5 things to watch out for when buying a domain\u003c/a\u003e.\u003c/p\u003e\n\u003ch1 id=\"the-application\"\u003eThe application\u003c/h1\u003e\n\u003cp\u003eAlright, let\u0026rsquo;s put together the application.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/kube/assemble.png\" alt=\"Assemble\"\u003e\u003c/p\u003e\n\u003ch2 id=\"structure\"\u003eStructure\u003c/h2\u003e\n\u003cp\u003eEvery piece of our infrastructure will be laid out in yaml files. I believe in infrastructure as code.\nIf you run a command you will most likely forget about it, unless it\u0026rsquo;s logged and / or is replayable.\u003c/p\u003e\n\u003cp\u003eThis is the structure I\u0026rsquo;m using:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e.\n├── LICENSE\n├── README.md\n├── certificate_request\n│   └── certificate_request.yml\n├── configmaps\n│   └── staple_initdb_script.yaml\n├── database\n│   ├── staple_db_deployment.yaml\n│   ├── staple_db_network_policy.yaml\n│   ├── staple_db_pvc.yaml\n│   └── staple_db_service.yaml\n├── namespace\n│   └── staple_namespace.yaml\n├── primer.sql\n├── rbac\n├── secrets\n│   ├── staple_db_password.yaml\n│   └── staple_mg_creds.yaml\n├── staple-backend\n│   ├── staple_deployment.yaml\n│   └── staple_service.yaml\n└── staple-frontend\n    ├── staple_deployment.yaml\n    └── staple_service.yaml\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOne other possible combination is, if you have multiple applications:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e.\n├── README.md\n├── applications\n│   ├── confluence\n│   │   ├── db\n│   │   │   ├── db_deployment.yaml\n│   │   │   └── db_service.yaml\n│   │   ├── deployment\n│   │   │   └── deployment.yaml\n│   │   ├── pvc\n│   │   │   └── confluence_app_pvc.yaml\n│   │   └── service\n│   │       └── service.yaml\n│   ├── gitea\n│   │   ├── config\n│   │   │   ├── app.ini\n│   │   │   └── gitea_config_map.yaml\n│   │   ├── db\n│   │   │   ├── gitea_db_deployment.yaml\n│   │   │   ├── gitea_db_network_policy.yaml\n│   │   │   ├── gitea_db_pvc.yaml\n│   │   │   └── gitea_db_service.yaml\n│   │   ├── deployment\n│   │   │   └── gitea_deployment.yaml\n│   │   ├── pvc\n│   │   │   └── gitea_app_pvc.yaml\n│   │   └── service\n│   │       └── gitea_service.yaml\n├── cronjobs\n│   ├── cronjob1\n│   │   ├── Dockerfile\n│   │   ├── README.md\n│   │   ├── go.mod\n│   │   ├── go.sum\n│   │   ├── cron.yaml\n│   │   └── main.go\n├── ingress\n│   ├── example1\n│   │   ├── example1_ingress_resource.yaml\n│   │   └── gitea_ssh_configmap.yaml\n│   ├── example2\n│   │   └── example2_ingress_resource.yaml\n│   ├── lets-encrypt-issuer.yaml\n│   └── nginx\n│       ├── nginx-ingress-controller-deployment.yaml\n│       └── nginx-ingress-controller-service.yaml\n└── namespaces\n    ├── example1_namespace.yaml\n    ├── example2_namespace.yaml\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"namespace\"\u003eNamespace\u003c/h2\u003e\n\u003cp\u003eBefore we begin, we\u0026rsquo;ll create a namespace for our application to properly partition all our entities.\u003c/p\u003e\n\u003cp\u003eTo create a namespace we\u0026rsquo;ll use this yaml \u003ccode\u003eexample_namespace.yaml\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eNamespace\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eexample\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eApply this with \u003ccode\u003ekubectl -f apply example_namespace.yaml\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"the-database\"\u003eThe Database\u003c/h2\u003e\n\u003cp\u003eDeploying a Postgres database on Kubernetes is actually really easy. You need five things to have a basic, but\nrelatively secure installation.\u003c/p\u003e\n\u003ch3 id=\"secret\"\u003eSecret\u003c/h3\u003e\n\u003cp\u003eThe secret contains our password and our database user. In postgres, if you define a user using \u003ccode\u003ePOSTGRES_USER\u003c/code\u003e\npostgres will create the user and a database with the user\u0026rsquo;s name. This could come from Vault too, but\nthe Kubernetes secret is usually enough since it should be a closed environment anyways. But for important information\nI would definitely use an admission policy and some vault secret goodness. (Maybe another post?)\u003c/p\u003e\n\u003cp\u003eOur secret looks like this:\ndatabase_secret.yaml\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eSecret\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-db-password\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003edata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ePOSTGRES_PASSWORD\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ecGFzc3dvcmQxMjM=\u003c/span\u003e\n  \u003cspan style=\"color:#75715e\"\u003e# This creates a user and a db with the same name.\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ePOSTGRES_USER\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ec3RhcGxl\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTo generate the base64 code for a password and a user, use:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eecho -n \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;password123\u0026#34;\u003c/span\u003e | base64\necho -n \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e | base64\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u0026hellip;and paste the result in the respective fields. Once done, apply with \u003ccode\u003ekubectl -f apply database_secret.yaml\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"deployment\"\u003eDeployment\u003c/h3\u003e\n\u003cp\u003eThe deployment which configures our database. Looks something like this (database_deployment.yaml):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eapps/v1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eDeployment\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-db\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ereplicas\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eselector\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003ematchLabels\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-db\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-db\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n        \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-db\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epostgres\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epostgres:11\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eenv\u003c/span\u003e:\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePOSTGRES_USER\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePOSTGRES_PASSWORD\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003evalueFrom\u003c/span\u003e:\n              \u003cspan style=\"color:#f92672\"\u003esecretKeyRef\u003c/span\u003e:\n                \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-db-password\u003c/span\u003e\n                \u003cspan style=\"color:#f92672\"\u003ekey\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePOSTGRES_PASSWORD\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003evolumeMounts\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003emountPath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/var/lib/postgresql/data\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003esubPath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edata\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# important so it gets mounted correctly\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-db-data\u003c/span\u003e\n        - \u003cspan style=\"color:#f92672\"\u003emountPath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/docker-entrypoint-initdb.d/staple_initdb.sql\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003esubPath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple_initdb.sql\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ebootstrap-script\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-db-data\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003epersistentVolumeClaim\u003c/span\u003e:\n            \u003cspan style=\"color:#f92672\"\u003eclaimName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edo-storage-staple-db\u003c/span\u003e\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ebootstrap-script\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003econfigMap\u003c/span\u003e:\n            \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-initdb-script\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNote the two volume mounts.\u003c/p\u003e\n\u003cp\u003eThe first one makes sure that our data isn\u0026rsquo;t lost when the database pod itself restarts. It creates a mount\nto a persistent volume which is defined a few lines below by \u003ccode\u003epersistentVolumeClaim\u003c/code\u003e. \u003ccode\u003esubPath\u003c/code\u003e is important\nin this case otherwise you\u0026rsquo;ll end up with a lost\u0026amp;found folder.\u003c/p\u003e\n\u003cp\u003eThe second mount is a postgres specific initialization file. Postgres will run that sql file when it\nstarts up. I\u0026rsquo;m using it to create my application\u0026rsquo;s schema.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"color:#66d9ef\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edatabase\u003c/span\u003e staples;\n\u003cspan style=\"color:#66d9ef\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etable\u003c/span\u003e users (email varchar(\u003cspan style=\"color:#ae81ff\"\u003e255\u003c/span\u003e), password text, confirm_code text, max_staples int);\n\u003cspan style=\"color:#66d9ef\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etable\u003c/span\u003e staples (name varchar(\u003cspan style=\"color:#ae81ff\"\u003e255\u003c/span\u003e), id serial, content text, created_at \u003cspan style=\"color:#66d9ef\"\u003etimestamp\u003c/span\u003e, archived bool, user_email varchar(\u003cspan style=\"color:#ae81ff\"\u003e255\u003c/span\u003e));\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd it comes from a configmap which looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eConfigMap\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-initdb-script\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003edata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003estaple_initdb.sql\u003c/span\u003e:\n    \u003cspan style=\"color:#ae81ff\"\u003ecreate table users (email varchar(255), password text, confirm_code text, max_staples int);\u003c/span\u003e\n    \u003cspan style=\"color:#ae81ff\"\u003ecreate table staples (name varchar(255), id serial, content text, created_at timestamp, archived bool, user_email varchar(255));\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"network-policy\"\u003eNetwork Policy\u003c/h3\u003e\n\u003cp\u003eNetwork policies are important if you value your privacy. They restrict a PODs communication to a certain namespace\nOR even to between applications only. By default I like to deny all traffic and then slowly open the valve until everything works.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/kube/szaffi.png\" alt=\"Szaffi\"\u003e\nKudos if you know who this is. (mind my terrible drawing capabilities)\u003c/p\u003e\n\u003cp\u003eWe\u0026rsquo;ll use a basic network policy which will restrict the DB to talk to anything BUT the backend. Nothing else\nwill be able to talk to this Pod.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enetworking.k8s.io/v1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eNetworkPolicy\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-db-network-policy\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003epodSelector\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003ematchLabels\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-db\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003epolicyTypes\u003c/span\u003e:\n  - \u003cspan style=\"color:#ae81ff\"\u003eIngress\u003c/span\u003e\n  - \u003cspan style=\"color:#ae81ff\"\u003eEgress\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eingress\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003epodSelector\u003c/span\u003e:\n        \u003cspan style=\"color:#f92672\"\u003ematchLabels\u003c/span\u003e:\n          \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003eprotocol\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eTCP\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eport\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e5432\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eegress\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003eto\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003epodSelector\u003c/span\u003e:\n        \u003cspan style=\"color:#f92672\"\u003ematchLabels\u003c/span\u003e:\n          \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003eprotocol\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eTCP\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eport\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e5432\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe important bit here is the \u003ccode\u003epodSelector\u003c/code\u003e part. The label will be the label used by the application deployment.\nThis will restrict the Pod\u0026rsquo;s incoming and outgoing traffic to that of the application Pod including denying internet\ntraffic.\u003c/p\u003e\n\u003ch3 id=\"pvc\"\u003ePVC\u003c/h3\u003e\n\u003cp\u003eThe persistent volume claim definition is straight forward:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePersistentVolumeClaim\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edo-storage-staple-db\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eaccessModes\u003c/span\u003e:\n  - \u003cspan style=\"color:#ae81ff\"\u003eReadWriteOnce\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eresources\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003erequests\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003estorage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e10Gi\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003estorageClassName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edo-block-storage\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e10 gigs should be enough anything.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/kube/gates.png\" alt=\"Gates\"\u003e\u003c/p\u003e\n\u003ch3 id=\"service\"\u003eService\u003c/h3\u003e\n\u003cp\u003eThe service will expose the database deployment to our cluster.\u003c/p\u003e\n\u003cp\u003eOur service is fairly basic:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eService\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-db-service\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003eport\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e5432\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eselector\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-db\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eclusterIP\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eNone\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat\u0026rsquo;s done with the database. Next up is the backend.\u003c/p\u003e\n\u003ch2 id=\"the-backend\"\u003eThe backend\u003c/h2\u003e\n\u003cp\u003eThe backend itself is written in a way that it doesn\u0026rsquo;t require a persistent storage so\nwe can skip that part. It only needs three pieces. A secret, a deployment definition and the\nservice exposing the deployment.\u003c/p\u003e\n\u003ch3 id=\"secret-1\"\u003eSecret\u003c/h3\u003e\n\u003cp\u003eFirst, we create a secret which contains Mailgun credentials.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eSecret\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-mg-creds\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003edata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eMG_DOMAIN\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ecGFzc3dvcmQxMjM=\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eMG_API_KEY\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ecGFzc3dvcmQxMjM=\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"database-connection\"\u003eDatabase connection\u003c/h3\u003e\n\u003cp\u003eThe connection settings are handled through the same secret which is used to spin up the DB itself.\nWe have to only mount that here too and we are good.\u003c/p\u003e\n\u003ch3 id=\"deployment-1\"\u003eDeployment\u003c/h3\u003e\n\u003cp\u003eWhich brings us to the deployment. This is a bit more involved.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eapps/v1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eDeployment\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-app\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ereplicas\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eselector\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003ematchLabels\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n        \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/name\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/instance\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eskarlso/staple:v0.1.0\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eimagePullPolicy\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eIfNotPresent\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eresources\u003c/span\u003e:\n          \u003cspan style=\"color:#f92672\"\u003erequests\u003c/span\u003e:\n            \u003cspan style=\"color:#f92672\"\u003ememory\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;500Mi\u0026#34;\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003ecpu\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;250m\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003elimits\u003c/span\u003e:\n            \u003cspan style=\"color:#f92672\"\u003ememory\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1000Mi\u0026#34;\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003ecpu\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;500m\u0026#34;\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eenv\u003c/span\u003e:\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePOD_NAMESPACE\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003evalueFrom\u003c/span\u003e:\n              \u003cspan style=\"color:#f92672\"\u003efieldRef\u003c/span\u003e:\n                \u003cspan style=\"color:#f92672\"\u003efieldPath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emetadata.namespace\u003c/span\u003e\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eDB_PASSWORD\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003evalueFrom\u003c/span\u003e:\n              \u003cspan style=\"color:#f92672\"\u003esecretKeyRef\u003c/span\u003e:\n                \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-db-password\u003c/span\u003e\n                \u003cspan style=\"color:#f92672\"\u003ekey\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePOSTGRES_PASSWORD\u003c/span\u003e\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eMG_DOMAIN\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003evalueFrom\u003c/span\u003e:\n              \u003cspan style=\"color:#f92672\"\u003esecretKeyRef\u003c/span\u003e:\n                \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-mg-creds\u003c/span\u003e\n                \u003cspan style=\"color:#f92672\"\u003ekey\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eMG_DOMAIN\u003c/span\u003e\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eMG_API_KEY\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003evalueFrom\u003c/span\u003e:\n              \u003cspan style=\"color:#f92672\"\u003esecretKeyRef\u003c/span\u003e:\n                \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-mg-creds\u003c/span\u003e\n                \u003cspan style=\"color:#f92672\"\u003ekey\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eMG_API_KEY\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eargs\u003c/span\u003e:\n          - --\u003cspan style=\"color:#ae81ff\"\u003estaple-db-hostname=staple-db-service.cronohub.svc.cluster.local:5432\u003c/span\u003e\n          - --\u003cspan style=\"color:#ae81ff\"\u003estaple-db-username=staple\u003c/span\u003e\n          - --\u003cspan style=\"color:#ae81ff\"\u003estaple-db-database=staple\u003c/span\u003e\n          - --\u003cspan style=\"color:#ae81ff\"\u003estaple-db-password=$(DB_PASSWORD)\u003c/span\u003e\n          - --\u003cspan style=\"color:#ae81ff\"\u003emg-domain=$(MG_DOMAIN)\u003c/span\u003e\n          - --\u003cspan style=\"color:#ae81ff\"\u003emg-api-key=$(MG_API_KEY)\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-port\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003econtainerPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e9998\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThere are a few important points here and I won\u0026rsquo;t explain them all, like the resource restrictions,\nwhich you should be familiar with by now. I\u0026rsquo;m using a mix of 12factor app\u0026rsquo;s environment configuration\nand command line arguments for the application configuration. The app itself is not using os.Environ\nbut the args.\u003c/p\u003e\n\u003cp\u003eThe args point to the cluster local dns of the database, some db settings, and the mailgun credentials.\u003c/p\u003e\n\u003cp\u003eIt also exposes the container port 9998 which is Echo\u0026rsquo;s default port.\u003c/p\u003e\n\u003cp\u003eNow all we need is the service.\u003c/p\u003e\n\u003ch3 id=\"service-1\"\u003eService\u003c/h3\u003e\n\u003cp\u003eWithout much fanfare:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eService\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-service\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/name\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/instance\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eselector\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/name\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/instance\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eservice-port\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eport\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e9998\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003etargetPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-port\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd with this, the backend is done.\u003c/p\u003e\n\u003ch2 id=\"the-frontend\"\u003eThe frontend\u003c/h2\u003e\n\u003cp\u003eThe frontend, similarly to the backend, does not require a persistent volume. We can skip that one too.\u003c/p\u003e\n\u003cp\u003eIn fact it only needs two things, a deployment and a service, and that\u0026rsquo;s all. It uses serve to host the\nstatic files. Honestly, that could also be a Go application serving the static content or anything\nthat can serve static files.\u003c/p\u003e\n\u003ch3 id=\"deployment-2\"\u003eDeployment\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eapps/v1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eDeployment\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-frontend\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-frontend\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ereplicas\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eselector\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003ematchLabels\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-frontend\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n        \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-frontend\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/name\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-frontend\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/instance\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-frontend\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-frontend\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eskarlso/staple-frontend:v0.0.9\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eimagePullPolicy\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eIfNotPresent\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eresources\u003c/span\u003e:\n          \u003cspan style=\"color:#f92672\"\u003erequests\u003c/span\u003e:\n            \u003cspan style=\"color:#f92672\"\u003ememory\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;500Mi\u0026#34;\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003ecpu\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;250m\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003elimits\u003c/span\u003e:\n            \u003cspan style=\"color:#f92672\"\u003ememory\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1000Mi\u0026#34;\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003ecpu\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;500m\u0026#34;\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eenv\u003c/span\u003e:\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePOD_NAMESPACE\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003evalueFrom\u003c/span\u003e:\n              \u003cspan style=\"color:#f92672\"\u003efieldRef\u003c/span\u003e:\n                \u003cspan style=\"color:#f92672\"\u003efieldPath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emetadata.namespace\u003c/span\u003e\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eREACT_APP_STAPLE_DEV_HOST\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-front\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003econtainerPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e5000\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"service-2\"\u003eService\u003c/h3\u003e\n\u003cp\u003eAnd the service:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eService\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-front-service\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-frontend\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/name\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-frontend\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/instance\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-frontend\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eselector\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-frontend\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/name\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-frontend\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/instance\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-frontend\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-front\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eport\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e5000\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003etargetPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-front\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd with that the backend and frontend are wired together and ready to receive traffic.\u003c/p\u003e\n\u003cp\u003eAll pods should be up and running without problems at this point. If you have any trouble deploying\nthings, please don\u0026rsquo;t hesitate to leave a question in the comments.\u003c/p\u003e\n\u003ch2 id=\"ingress\"\u003eIngress\u003c/h2\u003e\n\u003cp\u003eFantastic. Now, our application is running. We just need to expose it and route traffic to it.\nThe backend has the api route \u003ccode\u003e/rest/api/v1/\u003c/code\u003e. The frontend has the route syntax \u003ccode\u003e/login\u003c/code\u003e, \u003ccode\u003e/register\u003c/code\u003e\nand a bunch of others. The key here is that all of them are under the same domain name but based on the URI\nwe need to direct one request to the backend the other to the frontend.\u003c/p\u003e\n\u003cp\u003eThis is done via nginx\u0026rsquo;s routing logic using regex. In an nginx config this would be the \u003ccode\u003elocation\u003c/code\u003e part.\nIt\u0026rsquo;s imperative that the order of the routing is from more specific towards more general Because we need to catch\nthe specific URIs first.\u003c/p\u003e\n\u003ch3 id=\"ingress-resource\"\u003eIngress Resource\u003c/h3\u003e\n\u003cp\u003eTo do this, we will create something called an \u003ca href=\"https://docs.nginx.com/nginx-ingress-controller/configuration/ingress-resources/\"\u003eIngress Resource\u003c/a\u003e.\nNote that this is Nginx\u0026rsquo;s ingress resource and not Kubernetes'. There is a difference.\u003c/p\u003e\n\u003cp\u003eI suggest reading up on that link about the ingress resource because it reads quite well and will explain how it\nworks and fits into the Kubernetes environment.\u003c/p\u003e\n\u003cp\u003eGot it? Good. We\u0026rsquo;ll create one for \u003ccode\u003estaple.app\u003c/code\u003e domain:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eextensions/v1beta1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eIngress\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-app-ingress\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eannotations\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003ekubernetes.io/ingress.class\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;nginx\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003ecert-manager.io/cluster-issuer\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;letsencrypt-prod\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003ecert-manager.io/acme-challenge-type\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ehttp01\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003enginx.ingress.kubernetes.io/rewrite-target\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/$1\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# this is important\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003etls\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003ehosts\u003c/span\u003e:\n    - \u003cspan style=\"color:#ae81ff\"\u003estaple.app\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003esecretName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-app-tls\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003erules\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003ehost\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple.app\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003ehttp\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003epaths\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003ebackend\u003c/span\u003e:\n          \u003cspan style=\"color:#f92672\"\u003eserviceName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-service\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003eservicePort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ess-port\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# 9998\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003epath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/(rest/api/1.*)\u003c/span\u003e\n  - \u003cspan style=\"color:#f92672\"\u003ehost\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple.app\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003ehttp\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003epaths\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003ebackend\u003c/span\u003e:\n          \u003cspan style=\"color:#f92672\"\u003eserviceName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003estaple-front-service\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003eservicePort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003esfs-port\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# 5000\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003epath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/(.*)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLet\u0026rsquo;s take a look at what\u0026rsquo;s going on here. The first thing to catch the eye are the annotations.\nThese are configuration settings for nginx, cert-manager and Kubernetes.\nWe have the cluster issuer\u0026rsquo;s name. The challenge type, which we decided should be http01,\nand the most important part, the rewrite-target setting. This will use the first capture group\nas a base after the host.\u003c/p\u003e\n\u003cp\u003eWith this rewrite rule in place, the \u003ccode\u003epaths\u003c/code\u003e values need to provide a capture group. The first in line will see\neverything that goes to the urls like: \u003ccode\u003estaple.app/rest/api/1/token\u003c/code\u003e, \u003ccode\u003estaple.app/rest/api/1/staples\u003c/code\u003e,\n\u003ccode\u003estaple.app/rest/api/1/user\u003c/code\u003e, etc. The first part of the url is the host \u003ccode\u003estaple.app\u003c/code\u003e, second part is \u003ccode\u003e/(rest/api/1/.*)\u003c/code\u003e\nfor which the result is that group number one ($1) will be \u003ccode\u003erest/api/1/token\u003c/code\u003e. Nginx now sees that we\nhave a backend route for that and will send this URI along to the service. Our service picks it up\nand will match that URI to the router configuration.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/kube/regex.png\" alt=\"Regex\"\u003e\u003c/p\u003e\n\u003cp\u003eIf there is a request like, \u003ccode\u003estaple.app/login\u003c/code\u003e, which is our frontend\u0026rsquo;s job to pick up, the first rule\nwill not catch it because the regex isn\u0026rsquo;t matching, so it falls through to the second one, which\nis the frontend service that is using a \u0026ldquo;catch all\u0026rdquo; regex. Like ip tables, we go from\nspecific to more general.\u003c/p\u003e\n\u003ch1 id=\"ending-words\"\u003eEnding words\u003c/h1\u003e\n\u003cp\u003eAnd that\u0026rsquo;s it. If everything works correctly, then the certificate service wired up the https certs and\nwe should be able ping the rest endpoint under \u003ccode\u003ehttps://staple.app/rest/api/1/token\u003c/code\u003e and log in to the app\nin the browser using \u003ccode\u003ehttps://staple.app\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eStay tuned for the second part where we\u0026rsquo;ll scale the thing up!\u003c/p\u003e\n\u003cp\u003eThanks for reading!\nGergely.\u003c/p\u003e\n"
        },
        {
            "title": "How to do a good code review",
            "date_published": "2020-05-11T21:01:00+01:00",
            "date_modified": "2020-05-11T21:01:00+01:00",
            "id": "https://skarlso.github.io/2020/05/11/good-code-reviews/",
            "url": "https://skarlso.github.io/2020/05/11/good-code-reviews/",
            "authors": [
                {
                  "name": "hannibal"
                }
            ],
            "content_html": "\u003ch1 id=\"intro\"\u003eIntro\u003c/h1\u003e\n\u003cp\u003eHi folks.\u003c/p\u003e\n\u003cp\u003eThis time, I would like to talk a little bit about code reviews.\u003c/p\u003e\n\u003cp\u003eHow do you do code reviews? Don\u0026rsquo;t hesitate to share it in the comments.\u003c/p\u003e\n\u003cp\u003eHow do I do code reviews? Well read on if you would like to know.\u003c/p\u003e\n\u003ch1 id=\"the-top-down-approach\"\u003eThe Top Down approach\u003c/h1\u003e\n\u003cp\u003eIf I\u0026rsquo;m dealing with a small code change, a couple of lines here and there in the odd file\nfirst, I\u0026rsquo;ll try to understand why the review is there? What was it trying to achieve? What\u0026rsquo;s\nthe goal of the change? Is there a ticket/issue I can read for background info? Or an RFC?\u003c/p\u003e\n\u003cp\u003eUnderstanding the goal of the change will let you know how to read the change. I usually also\nscribble down some notes and my expectations to see if the change meets them or does something\ncompletely different. And if it\u0026rsquo;s different, maybe my expectations were wrong.\u003c/p\u003e\n\u003cp\u003eIn any case, I will have a framework to start with. It\u0026rsquo;s important to understand why the change\nis there in the first place. I cannot stress this enough.\u003c/p\u003e\n\u003ch1 id=\"logical-follow\"\u003eLogical follow\u003c/h1\u003e\n\u003cp\u003eIf the change is large, the top down approach will simply not work. You will loose track of\nwhy the change is and your logical big picture image will fade into nothingness after a hundred lines.\u003c/p\u003e\n\u003cp\u003eIn Github at least, what I would do to approach this, is close all views and just have a general sense first\nhow big the change is, and what files changed (after I understand why the change is there and what is it trying\nto change and / or solve). Once I have a feel for the structure I would look for changes which are trivial.\nFor example parameter changes of a function. I would expect that in that case there will be a lot of changes at places\nwhere that function was called. I would review those and then go on.\u003c/p\u003e\n\u003cp\u003eIf there is any, I would look for an entry point into the change. Is there a new handler? A new API?\nA new method? Did an API change? If so, did that change propagate all the way through the API\u0026rsquo;s implementation?\u003c/p\u003e\n\u003cp\u003eIf it\u0026rsquo;s a huge number of deletes, I would look for the deleted code in the whole codebase. Did they miss something?\nWas that code referenced in another section of the code or possibly in another service? In that case, do a search\non the whole organization on all repositories if you believe that that makes sense.\u003c/p\u003e\n\u003cp\u003eIf it\u0026rsquo;s concurrent code\u0026hellip; are they syncing it up at some point? Are they releasing the lock? Is the lock happening\nat the right place? In Go for example, you can get a lock and then \u003ccode\u003edefer w.Lock.Unlock()\u003c/code\u003e it. This makes\nfor a convenient way of \u0026ldquo;forgetting\u0026rdquo; about the lock acquire. But this is counterproductive in some cases.\u003c/p\u003e\n\u003cp\u003eImagine you have a function which acquires the lock in the begin. Then does a for loop which takes a couple of seconds\nbut doesn\u0026rsquo;t actually use the map or the value you were trying to protect. In that case you are taking the\nlock but aren\u0026rsquo;t actually using it. There was no point in acquiring it at the beginning of the function.\u003c/p\u003e\n\u003ch1 id=\"general-order\"\u003eGeneral order\u003c/h1\u003e\n\u003cp\u003eThere are a LOT of things one can review in a PR. Minute things and a myriad if small to big logical\nproblems and ramifications. It\u0026rsquo;s not possible to list them all. So here are some general rules I would\nfollow:\u003c/p\u003e\n\u003ch2 id=\"syntax\"\u003eSyntax\u003c/h2\u003e\n\u003cp\u003eThe first thing I would do is look through the syntax and follow this mnemonic: BUD.\nB(ottleneck), U(nnecessary code), D(uplicate work). Spotting these is usually easy but it can happen\nthat the change is subtle. Bottlenecks are often embedded loops in loops or a very sneaky recursion.\nUnnecessary code is sometimes harder to spot. This is duplicate code which could be extracted. It can be subtle\nbecause it\u0026rsquo;s likely that only a small thing changes and at first glance it\u0026rsquo;s not trivial how to extract\nthe rest of the code around that small thing. Maybe it can be a function (if your language supports functions\nas first class citizens) which could close over a value and change it multiple times.\u003c/p\u003e\n\u003cp\u003eDuplicate work is when a loop is calculating something over and over but it\u0026rsquo;s actually the same thing or\nwe already have that information and it\u0026rsquo;s not likely that it would change so it can be reused. These kind of\nproblems are solved through caching or simply just do it once, store the result, then pass it around. Candidates\nfor this could be multiple calls to the same api for the same information which didn\u0026rsquo;t change in between.\u003c/p\u003e\n\u003ch2 id=\"general-language-guidelines\"\u003eGeneral language guidelines\u003c/h2\u003e\n\u003cp\u003eGeneral language syntax and guidelines adherence comes next. In Go this is trivial, since we have a plethora\nof tools available to us, devs, in the form of static analyzers like, fmt, golint, goimport etc. But in the\nabsence there is usually a good guide at hand how a language is supposed to look like.\u003c/p\u003e\n\u003ch2 id=\"workplace--project-guideline-adherence\"\u003eWorkplace / Project guideline adherence\u003c/h2\u003e\n\u003cp\u003eThis could arguably come before the general adherence. Whichever suits you better. Or maybe your workplace / environment\nthe code is in (this could also be an open source project) is different from the general guidelines. That is okay, as\nlong as it\u0026rsquo;s sensible. You could try changing it if you think it\u0026rsquo;s too far from how a language is supposed to look like\nbut that usually doesn\u0026rsquo;t work. Especially if the in-place guidelines are already there for years.\u003c/p\u003e\n\u003cp\u003eGenerally though, it\u0026rsquo;s better to follow whatever style/code/whim the current environment is doing. If changing something\nalways look around how that looks like in the code you are working in and then follow that style. These could be things like,\nvariable naming, comment semantics, logical flow of the code, structuring (like where the code should go and how it should look\nlike (yes, look like(sometime aesthetics matter))).\u003c/p\u003e\n\u003ch2 id=\"could-it-be-done-concurrently\"\u003eCould it be done concurrently\u003c/h2\u003e\n\u003cp\u003eAs a cherry on top, I would try to determine if the work that is being done, could be done in a thread / go routine. In Go, go routines\nare cheap and very easy to make. It\u0026rsquo;s also easy to abuse them of course, but it doesn\u0026rsquo;t hurt to think asynchronously. Especially in\na distributed environment. Which brings me to the next point.\u003c/p\u003e\n\u003ch2 id=\"in-a-distributed-environment-timing-is-key\"\u003eIn a distributed environment timing is key\u003c/h2\u003e\n\u003cp\u003eIf this change is in an environment which has many services and is generally distributed your first though should immediately\nbe, how those this affect the rest of the services and what timing issues could arise. If there is a delete operation, what about\nanother service calling a create or a get on the same resource at the same time? What if it\u0026rsquo;s a create but another service also calls\ncreate with the same values? Is the data eventually consistent or strongly consistent? How does that affect the runtime? Is the change\nin a frequently called code segment which is usually under heavy load? Did the change change the way that is handled? Did it slow it down\nor speed it up? Did it trade the slowdown for strong consistency? Is strong consistency really needed in that service which would\njustify the slowdown?\u003c/p\u003e\n\u003cp\u003eLike I said\u0026hellip; a myriad of things\u0026hellip;\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;ll stop here for now.\u003c/p\u003e\n\u003ch1 id=\"conclusion\"\u003eConclusion\u003c/h1\u003e\n\u003cp\u003eI hope this made sense. If you disagree with this approach or have a different guideline of reviewing, please don\u0026rsquo;t hesitate it to share it!\u003c/p\u003e\n\u003cp\u003eAs always,\nThanks for reading!\nGergely.\u003c/p\u003e\n"
        },
        {
            "title": "How to Make SPA refresh work with a Go backend",
            "date_published": "2020-02-17T21:01:00+01:00",
            "date_modified": "2020-02-17T21:01:00+01:00",
            "id": "https://skarlso.github.io/2020/02/17/making-spa-refresh-work-with-go-backend/",
            "url": "https://skarlso.github.io/2020/02/17/making-spa-refresh-work-with-go-backend/",
            "authors": [
                {
                  "name": "hannibal"
                }
            ],
            "content_html": "\u003ch1 id=\"intro\"\u003eIntro\u003c/h1\u003e\n\u003cp\u003eHi folks.\u003c/p\u003e\n\u003cp\u003eToday I would like to share a quick \u0026ldquo;fix\u0026rdquo; for a problem I\u0026rsquo;ve seen popping up here and there.\u003c/p\u003e\n\u003cp\u003eThat is, if you have a react frontend which is a SPA app but you still want refresh to work.\nWhat do I mean by that? Consider the following\u0026hellip;\u003c/p\u003e\n\u003ch1 id=\"the-problem\"\u003eThe problem\u003c/h1\u003e\n\u003cp\u003eYou have a SPA app with a react router which navigates the user around. The app calls to a backend\napi which serves content of some kind. You have the following routes\u0026hellip;. login, signup, reset, archive.\u003c/p\u003e\n\u003cp\u003eIf your app is compiled with your backend, as it usually is, then something like: \u003ca href=\"https://app.com/login\"\u003ehttps://app.com/login\u003c/a\u003e\nwill not work unless it\u0026rsquo;s also defined on the backend serving some content.\u003c/p\u003e\n\u003cp\u003eSo but what should the content be in this case?\u003c/p\u003e\n\u003ch1 id=\"the-structre\"\u003eThe structre\u003c/h1\u003e\n\u003cp\u003eFor that, let\u0026rsquo;s first look at the strucute of the app. Consider the following directory tree:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e.\n├── Dockerfile\n├── LICENSE\n├── Makefile\n├── README.md\n├── build\n├── cmd\n│   └── root.go\n├── frontend\n│   ├── LICENSE\n│   ├── README.md\n│   ├── build\n│   ├── package-lock.json\n│   ├── package.json\n│   ├── public\n│   ├── src\n│   └── yarn.lock\n├── go.mod\n├── go.sum\n├── img\n├── internal\n└── pkg\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFor this, the frontend contains a build dir in which the generated react frontend static files plus\ncompiled JavaScript libraries are. In this directory there also is a index.html file which does the actual\nheavy lifting in terms of routing.\u003c/p\u003e\n\u003cp\u003eThe Go backend therefor must only route to index.html on certain endpoints.\u003c/p\u003e\n\u003cp\u003eIn Go to build and deploy a single binary containing the static assets here in, you can use something like\n\u003ca href=\"https://github.com/GeertJohan/go.rice\"\u003ego.rice\u003c/a\u003e or \u003ca href=\"https://github.com/elazarl/go-bindata-assetfs\"\u003eassetfs\u003c/a\u003e which\ngenerate a Go file for you which contains all the data in an easily accessible way.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;ll be using go.rice.\u003c/p\u003e\n\u003ch1 id=\"the-solution\"\u003eThe solution\u003c/h1\u003e\n\u003cp\u003eTo summarize, all you have to do is route every route in your router.js file to index.html in Go. But how? Well, like this\u0026hellip;\u003c/p\u003e\n\u003cp\u003eConsider this appliction: \u003ca href=\"https://github.com/staple-org/staple\"\u003eStaple\u003c/a\u003e. This is a react frontend go backend application\nwhich builds a frontend asset then packages it up with go.rice, builds a Docker container and deploys the whole thing to\na Kubernetes cluster. But this is the interesting part which handles the index routing:\u003c/p\u003e\n\u003cp\u003eIn routes.go (contains the mapped routes from under Router.js):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epkg\u003c/span\u003e\n\n\u003cspan style=\"color:#75715e\"\u003e// These routes must match the routes under frontend/Routes.js\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eroutes\u003c/span\u003e = []\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/login\u0026#34;\u003c/span\u003e,\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/archive\u0026#34;\u003c/span\u003e,\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/staples/new\u0026#34;\u003c/span\u003e,\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/reset\u0026#34;\u003c/span\u003e,\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/signup\u0026#34;\u003c/span\u003e,\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/settings\u0026#34;\u003c/span\u003e,\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOnce we have a list of routes to map\u0026hellip;\u003c/p\u003e\n\u003cp\u003eIn server.go (which is starting up the server and generates the handlers\u0026hellip;)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e    \u003cspan style=\"color:#75715e\"\u003e// ... code which sets up the api routes... after every handler has been estabilished...\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Setup front-end if not in production mode.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e !\u003cspan style=\"color:#a6e22e\"\u003econfig\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eOpts\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDevMode\u003c/span\u003e {\n        \u003cspan style=\"color:#75715e\"\u003e// This path needs to be relative from this files package\u0026#39;s location.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003estaticAssets\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erice\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFindBox\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;../frontend/build\u0026#34;\u003c/span\u003e)\n\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\t\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Cannot find assets in production\u0026#34;\u003c/span\u003e)\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n\t\t}\n\n\t\t\u003cspan style=\"color:#75715e\"\u003e// Register handler for static assets\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#a6e22e\"\u003eassetHandler\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFileServer\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003estaticAssets\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHTTPBox\u003c/span\u003e())\n        \u003cspan style=\"color:#75715e\"\u003e// Open the index.html file as a *File for reading the content out of it.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#75715e\"\u003e// This is a virtual file handled by go.rice.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estaticAssets\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eOpen\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;index.html\u0026#34;\u003c/span\u003e)\n\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\t\t\t\u003cspan style=\"color:#a6e22e\"\u003econfig\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eOpts\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eLogger\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eError\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eErr\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eMsg\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Failed to find index.html content.\u0026#34;\u003c/span\u003e)\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n\t\t}\n\n        \u003cspan style=\"color:#75715e\"\u003e// Set up the main point as a static file server\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGET\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eecho\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWrapHandler\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eassetHandler\u003c/span\u003e))\n\t\t\u003cspan style=\"color:#75715e\"\u003e// Set up routes to index.html for all routes under Routes.js. Index.html will handle the routing any further.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eroutes\u003c/span\u003e {\n\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGET\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eindexServer\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e))\n\t\t}\n\t\t\u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGET\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/favicon.ico\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eecho\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWrapHandler\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eassetHandler\u003c/span\u003e))\n\t\t\u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGET\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/site.webmanifest\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eecho\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWrapHandler\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eassetHandler\u003c/span\u003e))\n\t\t\u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGET\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/static/css/*\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eecho\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWrapHandler\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStripPrefix\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eassetHandler\u003c/span\u003e)))\n\t\t\u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGET\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/static/js/*\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eecho\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWrapHandler\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStripPrefix\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eassetHandler\u003c/span\u003e)))\n\t\t\u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGET\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/static/media/*\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eecho\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWrapHandler\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStripPrefix\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eassetHandler\u003c/span\u003e)))\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhat is \u003ccode\u003eindexServer\u003c/code\u003e in this you might ask? Well, fret no longer, I shall show you:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#75715e\"\u003e// indexServer takes a name and the contents of the virtual file index.html gathered up by go.rice\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// and serves its content via http.ServeContent under the given name.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eindexServer\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003efile\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003erice\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFile\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eecho\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHandlerFunc\u003c/span\u003e {\n\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eecho\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContext\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e {\n\t\t\u003cspan style=\"color:#a6e22e\"\u003estat\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efile\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStat\u003c/span\u003e()\n\t\t\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eServeContent\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eResponse\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eWriter\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRequest\u003c/span\u003e(), \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003estat\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eModTime\u003c/span\u003e(), \u003cspan style=\"color:#a6e22e\"\u003efile\u003c/span\u003e)\n\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\t}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe key points are the name, which will be the route and the file which is the index.html content which contains\nthe logic to route based on the request. All that will be handled. And if a new route comes along,\nsimple add it to the list, recompile and you are done!\u003c/p\u003e\n\u003ch1 id=\"conclusion\"\u003eConclusion\u003c/h1\u003e\n\u003cp\u003eIn summary, you let your index.html file handle the routing as you would normally do. Just you need to make your\nbackend aware of that fact. Now refreshing the page will work as you\u0026rsquo;d expect.\u003c/p\u003e\n\u003cp\u003eThank you for reading,\nGergely.\u003c/p\u003e\n"
        },
        {
            "title": "Using a Kubernetes based Cluster for Various Services with auto HTTPS - Part 2",
            "date_published": "2019-10-15T21:01:00+01:00",
            "date_modified": "2019-10-15T21:01:00+01:00",
            "id": "https://skarlso.github.io/2019/10/15/kubernetes-cluster-part2/",
            "url": "https://skarlso.github.io/2019/10/15/kubernetes-cluster-part2/",
            "authors": [
                {
                  "name": "hannibal"
                }
            ],
            "content_html": "\u003ch1 id=\"intro\"\u003eIntro\u003c/h1\u003e\n\u003cp\u003eHi folks.\u003c/p\u003e\n\u003cp\u003eThis is a continuation of the previous post about my Kubernetes infrastructure located \u003ca href=\"https://skarlso.github.io/2019/09/21/kubernetes-cluster/\"\u003ehere\u003c/a\u003e. The two remaining points are to deploy Athens Go proxy and setting up monitoring.\u003c/p\u003e\n\u003ch1 id=\"athens\"\u003eAthens\u003c/h1\u003e\n\u003cp\u003e\u003cimg src=\"/img/hosting/athens.png\" alt=\"Athens\"\u003e\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s start with \u003ca href=\"https://github.com/gomods/athens\"\u003eAthens\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eFirst of all if you are a helm user, Athens has an awesome set of helm charts which you can use to deploy it in your cluster.\nLocated \u003ca href=\"https://github.com/gomods/athens/tree/master/charts/athens-proxy\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI prefer to deploy my own config files, but that\u0026rsquo;s me. So here is my preferred way of deploying Athens.\u003c/p\u003e\n\u003cp\u003eSince this is also a subdomain of the previously created \u003ccode\u003epowerhouse\u003c/code\u003e namespace we are going to use that.\u003c/p\u003e\n\u003ch2 id=\"pvc\"\u003ePVC\u003c/h2\u003e\n\u003cp\u003eWe are going to need a PersistentVolumeClaim for Athens so it can store all the things forever.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePersistentVolumeClaim\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epowerhouse\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-storage\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eaccessModes\u003c/span\u003e:\n  - \u003cspan style=\"color:#ae81ff\"\u003eReadWriteOnce\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eresources\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003erequests\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003estorage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e10Gi\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003estorageClassName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edo-block-storage\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eClaim is very boring. Which means it just works.\u003c/p\u003e\n\u003ch2 id=\"deployment\"\u003eDeployment\u003c/h2\u003e\n\u003cp\u003eThis is more interesting. Athens provides a lot of possibilities for the deployment. I\u0026rsquo;m just deploying the barest possible here. Which means, no user auth, no private repository support, ssh key configuration, etc\u0026hellip; It\u0026rsquo;s a plain proxy installation.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eapps/v1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eDeployment\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epowerhouse\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-app\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-proxy\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ereplicas\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eselector\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003ematchLabels\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-proxy\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n        \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-proxy\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/name\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-proxy\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/instance\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-proxy\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-proxy\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egomods/athens:v0.6.0\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003elivenessProbe\u003c/span\u003e:\n          \u003cspan style=\"color:#f92672\"\u003ehttpGet\u003c/span\u003e:\n            \u003cspan style=\"color:#f92672\"\u003epath\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/healthz\u0026#34;\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003eport\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e3000\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003ereadinessProbe\u003c/span\u003e:\n          \u003cspan style=\"color:#f92672\"\u003ehttpGet\u003c/span\u003e:\n            \u003cspan style=\"color:#f92672\"\u003epath\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/readyz\u0026#34;\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003eport\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e3000\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eenv\u003c/span\u003e:\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eATHENS_GOGET_WORKERS\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;3\u0026#34;\u003c/span\u003e\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eATHENS_STORAGE_TYPE\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;disk\u0026#34;\u003c/span\u003e\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eATHENS_DISK_STORAGE_ROOT\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/var/lib/athens\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n          - \u003cspan style=\"color:#f92672\"\u003econtainerPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e3000\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-http\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003evolumeMounts\u003c/span\u003e:\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-data\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003emountPath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/var/lib/athens\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003esubPath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-data\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003epersistentVolumeClaim\u003c/span\u003e:\n            \u003cspan style=\"color:#f92672\"\u003eclaimName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-storage\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFun fact. The name of the app must not be just plain \u003ccode\u003eathens\u003c/code\u003e because that will result in an error: \u003ccode\u003etoo many colons in address\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe issue is here: \u003ca href=\"https://github.com/gomods/athens/issues/1038#issuecomment-457145658\"\u003ehttps://github.com/gomods/athens/issues/1038#issuecomment-457145658\u003c/a\u003e Basically it\u0026rsquo;s because of the name used for the environment properties inside the container.\u003c/p\u003e\n\u003ch2 id=\"service\"\u003eService\u003c/h2\u003e\n\u003cp\u003eNow, let\u0026rsquo;s expose it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eService\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epowerhouse\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-service\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-proxy\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/name\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-proxy\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/instance\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-proxy\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eselector\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-proxy\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/name\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-proxy\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/instance\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-proxy\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003eport\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003etargetPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e3000\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"ingress\"\u003eIngress\u003c/h2\u003e\n\u003cp\u003eI\u0026rsquo;m using port 80 here because it\u0026rsquo;s convenient. But if you use any other port, don\u0026rsquo;t forget to alter your ingress to forward to that port and service.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eextensions/v1beta1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eIngress\u003c/span\u003e\n...\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003etls\u003c/span\u003e:\n...\n  - \u003cspan style=\"color:#f92672\"\u003ehosts\u003c/span\u003e:\n    - \u003cspan style=\"color:#ae81ff\"\u003eathens.powerhouse.com\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003esecretName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-cronohub-tls\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003erules\u003c/span\u003e:\n...\n  - \u003cspan style=\"color:#f92672\"\u003ehost\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens.powerhouse.com\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003ehttp\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003epaths\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003ebackend\u003c/span\u003e:\n          \u003cspan style=\"color:#f92672\"\u003eserviceName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-service\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003eservicePort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1234\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003epath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd that\u0026rsquo;s it! If you now visit \u003ccode\u003ehttps://athens.powerhouse.com\u003c/code\u003e it should say \u003ccode\u003e\u0026quot;Welcome to The Athens Proxy\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNow, if you set this proxy with \u003ccode\u003eexport GOPROXY=https://athens.powerhouse.com\u003c/code\u003e it should start to cache modules. It\u0026rsquo;s a fantastic proxy with a lot of capabilities. I encourage you to check it out and drop by it\u0026rsquo;s slack channel on Gopher slack called Athens.\u003c/p\u003e\n\u003ch1 id=\"monitoring\"\u003eMonitoring\u003c/h1\u003e\n\u003cp\u003eMonitoring is a huge topic so I\u0026rsquo;m not going to talk about how to monitor or what. That is described in great many of posts. I especially recommend reading sysdig\u0026rsquo;s 6 part post on doing monitoring with Prometheus and Grafana and what to monitor and the four golden signals and whatnot. Starting \u003ca href=\"https://sysdig.com/blog/kubernetes-monitoring-prometheus/\"\u003ehere\u003c/a\u003e and \u003ca href=\"https://sysdig.com/blog/monitoring-kubernetes-with-sysdig-cloud/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"prometheus\"\u003ePrometheus\u003c/h2\u003e\n\u003cp\u003eI\u0026rsquo;m going to deploy \u003ca href=\"https://prometheus.io\"\u003ePrometheus\u003c/a\u003e. Prometheus is a monitoring tool which sits inside your cluster and gathers data about running pods, nodes, services, whatever you expose and wants to send data to it. It can also alert on things and can be integrated with tools like Graphana for nice front-end and metrics. Prometheus itself uses PromQL as its query language to gather data from different sources and do time series analytics and much much more.\u003c/p\u003e\n\u003cp\u003ePlease visit the website and documentation for more details. It\u0026rsquo;s the defacto monitoring tool for Kubernetes. Again, I\u0026rsquo;m going to do a very basic installation of Prometheus. So basic in fact, that I don\u0026rsquo;t even have a PVC for it, because I don\u0026rsquo;t care at this point about retaining data.\u003c/p\u003e\n\u003ch3 id=\"namespace\"\u003eNamespace\u003c/h3\u003e\n\u003cp\u003eLet\u0026rsquo;s create it\u0026rsquo;s own namespace.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eNamespace\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emonitoring\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emonitoring\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"config\"\u003eConfig\u003c/h3\u003e\n\u003cp\u003ePrometheus Server config is massive. I don\u0026rsquo;t expect you to pick up on everything in this thing, but I would encourage you to at least try to find out what these setting do\u0026hellip; Our config yaml file contains the configuration file for Prometheus which we\u0026rsquo;ll later set up via a command line argument. It\u0026rsquo;s called \u003ccode\u003eprometheus.yml\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eConfigMap\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eprometheus-server-conf\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eprometheus-server-conf\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emonitoring\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003edata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eprometheus.yml\u003c/span\u003e: |-\u003cspan style=\"color:#e6db74\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e    global:\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e      scrape_interval: 5s\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e      evaluation_interval: 5s\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e    scrape_configs:\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e      - job_name: \u0026#39;kubernetes-apiservers\u0026#39;\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        kubernetes_sd_configs:\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - role: endpoints\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        scheme: https\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        tls_config:\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        relabel_configs:\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          action: keep\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          regex: default;kubernetes;https\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e      - job_name: \u0026#39;kubernetes-nodes\u0026#39;\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        scheme: https\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        tls_config:\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        kubernetes_sd_configs:\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - role: node\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        relabel_configs:\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - action: labelmap\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          regex: __meta_kubernetes_node_label_(.+)\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - target_label: __address__\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          replacement: kubernetes.default.svc:443\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - source_labels: [__meta_kubernetes_node_name]\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          regex: (.+)\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          target_label: __metrics_path__\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          replacement: /api/v1/nodes/${1}/proxy/metrics\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e      - job_name: \u0026#39;kubernetes-pods\u0026#39;\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        kubernetes_sd_configs:\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - role: pod\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        relabel_configs:\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          action: keep\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          regex: true\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          action: replace\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          target_label: __metrics_path__\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          regex: (.+)\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          action: replace\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          regex: ([^:]+)(?::\\d+)?;(\\d+)\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          replacement: $1:$2\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          target_label: __address__\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - action: labelmap\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          regex: __meta_kubernetes_pod_label_(.+)\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - source_labels: [__meta_kubernetes_namespace]\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          action: replace\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          target_label: kubernetes_namespace\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - source_labels: [__meta_kubernetes_pod_name]\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          action: replace\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          target_label: kubernetes_pod_name\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e      - job_name: \u0026#39;kubernetes-cadvisor\u0026#39;\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        scheme: https\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        tls_config:\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        kubernetes_sd_configs:\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - role: node\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        relabel_configs:\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - action: labelmap\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          regex: __meta_kubernetes_node_label_(.+)\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - target_label: __address__\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          replacement: kubernetes.default.svc:443\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - source_labels: [__meta_kubernetes_node_name]\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          regex: (.+)\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          target_label: __metrics_path__\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e      - job_name: \u0026#39;kubernetes-service-endpoints\u0026#39;\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        kubernetes_sd_configs:\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - role: endpoints\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        relabel_configs:\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          action: keep\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          regex: true\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          action: replace\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          target_label: __scheme__\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          regex: (https?)\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          action: replace\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          target_label: __metrics_path__\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          regex: (.+)\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          action: replace\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          target_label: __address__\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          regex: ([^:]+)(?::\\d+)?;(\\d+)\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          replacement: $1:$2\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - action: labelmap\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          regex: __meta_kubernetes_service_label_(.+)\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - source_labels: [__meta_kubernetes_namespace]\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          action: replace\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          target_label: kubernetes_namespace\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        - source_labels: [__meta_kubernetes_service_name]\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          action: replace\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e          target_label: kubernetes_name\u003c/span\u003e    \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eMostly it\u0026rsquo;s just setting up what Prometheus should monitor and how. The important bits are the \u003ccode\u003elabels\u003c/code\u003e. How this is going to work is, that we will \u003ccode\u003eannotate\u003c/code\u003e the resources we want Prometheus to see. Which is pretty cool. Basically we will just alter a pod to include an annotation and it will begin monitoring it. No need to install anything anywhere or restart anything. Just add an annotation and bamm, you\u0026rsquo;re done.\u003c/p\u003e\n\u003ch2 id=\"rbac\"\u003eRBAC\u003c/h2\u003e\n\u003cp\u003ePrometheus needs permissions to access resources in the cluster such as API end-points and gathering data about the cluster itself. We will provide it with this permission through \u003ca href=\"https://kubernetes.io/docs/reference/access-authn-authz/rbac/\"\u003eRole Based Access Control\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe\u0026rsquo;ll create a service account which Prometheus can use. We want it to access the whole cluster so we\u0026rsquo;ll use a \u003ccode\u003eClusterRole\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003erbac.authorization.k8s.io/v1beta1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eClusterRole\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eprometheus\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003erules\u003c/span\u003e:\n- \u003cspan style=\"color:#f92672\"\u003eapiGroups\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e]\n  \u003cspan style=\"color:#f92672\"\u003eresources\u003c/span\u003e:\n  - \u003cspan style=\"color:#ae81ff\"\u003enodes\u003c/span\u003e\n  - \u003cspan style=\"color:#ae81ff\"\u003enodes/proxy\u003c/span\u003e\n  - \u003cspan style=\"color:#ae81ff\"\u003eservices\u003c/span\u003e\n  - \u003cspan style=\"color:#ae81ff\"\u003eendpoints\u003c/span\u003e\n  - \u003cspan style=\"color:#ae81ff\"\u003epods\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003everbs\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;get\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;list\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;watch\u0026#34;\u003c/span\u003e]\n- \u003cspan style=\"color:#f92672\"\u003eapiGroups\u003c/span\u003e:\n  - \u003cspan style=\"color:#ae81ff\"\u003eextensions\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eresources\u003c/span\u003e:\n  - \u003cspan style=\"color:#ae81ff\"\u003eingresses\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003everbs\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;get\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;list\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;watch\u0026#34;\u003c/span\u003e]\n- \u003cspan style=\"color:#f92672\"\u003enonResourceURLs\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/metrics\u0026#34;\u003c/span\u003e]\n  \u003cspan style=\"color:#f92672\"\u003everbs\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;get\u0026#34;\u003c/span\u003e]\n---\n\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003erbac.authorization.k8s.io/v1beta1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eClusterRoleBinding\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eprometheus\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003eroleRef\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eapiGroup\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003erbac.authorization.k8s.io\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eClusterRole\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eprometheus\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003esubjects\u003c/span\u003e:\n- \u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eServiceAccount\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edefault\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emonitoring\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis will give access to monitor the following resources: nodes, nodes/proxy, services, endpoints and pods. The action are get, list, watch. No modifications.\u003c/p\u003e\n\u003cp\u003eWe\u0026rsquo;ll also allow Prometheus to watch ingresses for data traffic and allow it to do get requests to non-resource endpoint \u003ccode\u003e/metrics\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"deployment-1\"\u003eDeployment\u003c/h2\u003e\n\u003cp\u003eNow, the deployment is actually pretty easy.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eextensions/v1beta1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eDeployment\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eprometheus-deployment\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emonitoring\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ereplicas\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n        \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eprometheus-server\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eprometheus\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eprom/prometheus:v2.2.1\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003eargs\u003c/span\u003e:\n            - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;--config.file=/etc/prometheus/prometheus.yml\u0026#34;\u003c/span\u003e\n            - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;--storage.tsdb.path=/prometheus/\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n            - \u003cspan style=\"color:#f92672\"\u003econtainerPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e9090\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evolumeMounts\u003c/span\u003e:\n            - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eprometheus-config-volume\u003c/span\u003e\n              \u003cspan style=\"color:#f92672\"\u003emountPath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/etc/prometheus/\u003c/span\u003e\n            - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eprometheus-storage-volume\u003c/span\u003e\n              \u003cspan style=\"color:#f92672\"\u003emountPath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/prometheus/\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eprometheus-config-volume\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003econfigMap\u003c/span\u003e:\n            \u003cspan style=\"color:#f92672\"\u003edefaultMode\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e420\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eprometheus-server-conf\u003c/span\u003e\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eprometheus-storage-volume\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003eemptyDir\u003c/span\u003e: {}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe two interesting things here are the two arguments. The config file, which we include through the \u003ccode\u003econfigMap\u003c/code\u003e and the storage. Which I\u0026rsquo;m not bind mounting.\u003c/p\u003e\n\u003ch2 id=\"service-1\"\u003eService\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s expose Prometheus. Now, this may come as a surprise if you don\u0026rsquo;t know anything about Prometheus, but this is an in cluster monitoring tool. It\u0026rsquo;s usually not supposed to be accessed directly, but through tools like Graphana or used by tools like Alerting or traefik as a reverse proxy. As such, Prometheus does not support authentication or authorization or user management of any kind. That is usually taken care of by a reverse proxy or other means written about \u003ca href=\"https://prometheus.io/docs/operating/security/#authentication-authorization-and-encryption\"\u003ehere\u003c/a\u003e and \u003ca href=\"https://prometheus.io/docs/guides/basic-auth/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAs such, we can do a number of things. We can expose it as a NodePort service for example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eService\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eprometheus-service\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emonitoring\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eannotations\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003eprometheus.io/scrape\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;true\u0026#39;\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eprometheus.io/port\u003c/span\u003e:   \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;9090\u0026#39;\u003c/span\u003e\n\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eselector\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eprometheus-server\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003etype\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eNodePort\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003eport\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e8080\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003etargetPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e9090\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003enodePort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e30000\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOr we just port forward the pod like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ek port-forward pods/prometheus-deployment-6bf45557bd-qc6t6 9090:9090 -n monitoring\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd access it by simply opening the url: http://127.0.0.1:9090.\u003c/p\u003e\n\u003ch2 id=\"prometheus-1\"\u003ePrometheus\u003c/h2\u003e\n\u003cp\u003eOnce you open it, you should see something like this, after running a small query:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/hosting/prometheus.png\" alt=\"prometheus.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"adding-in-resources-to-monitor\"\u003eAdding in Resources to monitor\u003c/h2\u003e\n\u003cp\u003eIn order to add a resource to monitor simply insert these annotations:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e  \u003cspan style=\"color:#f92672\"\u003eannotations\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003eprometheus.io/scrape\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;true\u0026#39;\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eprometheus.io/port\u003c/span\u003e:   \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;9090\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eDone.\u003c/p\u003e\n\u003ch1 id=\"bonus-round----graphana\"\u003eBonus Round \u0026ndash; Graphana\u003c/h1\u003e\n\u003cp\u003eWe deployed Athens and Prometheus to monitor our cluster. We don\u0026rsquo;t have anything before Prometheus that would be fancy, but installing Graphana is actually pretty easy. You can follow the instructions \u003ca href=\"https://prometheus.io/docs/visualization/grafana/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eA very easy way of looking at some nice metrics without worrying about anything like users and such, is running a Graphana instance in docker on your local machine with:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edocker run -d -p 3000:3000 grafana/grafana\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u0026hellip; and while you are forwarding the Prometheus end-point you navigate to your Graphana instance by opening \u003ccode\u003e127.0.0.1:3000\u003c/code\u003e and install a Prometheus data-point like this:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/hosting/graphana_config.png\" alt=\"graphana config\"\u003e\u003c/p\u003e\n\u003cp\u003eAfter that navigate to a new dashboard and select a simple PromQL metric to see if it\u0026rsquo;s working. You should see something like this:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/hosting/graphana.png\" alt=\"graphana\"\u003e\u003c/p\u003e\n\u003cp\u003eNow you can create a new dashboard add a PVC to our Prometheus instance and enjoy all the metrics you can store!\u003c/p\u003e\n\u003ch1 id=\"conclusion\"\u003eConclusion\u003c/h1\u003e\n\u003cp\u003eAnd this is it folks. Everything is installed and we can monitor things now. If you give Prometheus a PVC you can build some pretty awesome time series graphs too and see how your cluster behaves over time.\u003c/p\u003e\n\u003cp\u003eThank you for reading!\nGergely.\u003c/p\u003e\n"
        },
        {
            "title": "Summary of Practical Go workshop from Dave Cheney",
            "date_published": "2019-10-10T21:01:00+01:00",
            "date_modified": "2019-10-10T21:01:00+01:00",
            "id": "https://skarlso.github.io/2019/10/10/practical-go-summary/",
            "url": "https://skarlso.github.io/2019/10/10/practical-go-summary/",
            "authors": [
                {
                  "name": "hannibal"
                }
            ],
            "content_html": "\u003ch1 id=\"intro\"\u003eIntro\u003c/h1\u003e\n\u003cp\u003eHi folks.\u003c/p\u003e\n\u003cp\u003eSo there is \u003ca href=\"https://dave.cheney.net/practical-go/presentations/qcon-china.html\"\u003ethis\u003c/a\u003e workshop from \u003ca href=\"https://twitter.com/davecheney\"\u003eDave Cheney\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAnd I thought I\u0026rsquo;d draw a sort of summary of that workshop.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/practical_go.png\" alt=\"enjoy\"\u003e\u003c/p\u003e\n\u003cp\u003eRight-click-\u0026gt;Open Image for higher resolution.\u003c/p\u003e\n\u003cp\u003eCheers,\nGergely.\u003c/p\u003e\n"
        },
        {
            "title": "How I killed my entire Kubernetes cluster",
            "date_published": "2019-10-01T21:01:00+01:00",
            "date_modified": "2019-10-01T21:01:00+01:00",
            "id": "https://skarlso.github.io/2019/10/01/killing-kubernetes-cluster/",
            "url": "https://skarlso.github.io/2019/10/01/killing-kubernetes-cluster/",
            "authors": [
                {
                  "name": "hannibal"
                }
            ],
            "content_html": "\u003ch1 id=\"intro\"\u003eIntro\u003c/h1\u003e\n\u003cp\u003eOne morning I woke up and tried to access my gitea just to find that it wasn\u0026rsquo;t running.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/kube_dead.png\" alt=\"dead kube\"\u003e\u003c/p\u003e\n\u003cp\u003eI checked my cluster and found that the whole thing was dead as meat. I quickly jumped in and ran \u003ccode\u003ek get pods -A\u003c/code\u003e to see what\u0026rsquo;s\ngoing on. None of my services worked.\u003c/p\u003e\n\u003cp\u003eWhat immediately struck my eye was a 100+ pods of my fork_updater cronjob. The fork_updater cronjob which runs once a month, looks\nlike this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ebatch/v1beta1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eCronJob\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003efork-updater\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003efork-updater\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eschedule\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;* * 1 * *\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ejobTemplate\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e:\n        \u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n          \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003efork-updater-ssh-key\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003esecret\u003c/span\u003e:\n              \u003cspan style=\"color:#f92672\"\u003esecretName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003efork-updater-ssh-key\u003c/span\u003e\n              \u003cspan style=\"color:#f92672\"\u003edefaultMode\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e256\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# yaml spec does not support octal mode\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003efork-updater\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003eimagePullPolicy\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eIfNotPresent\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eskarlso/repo-updater:1.0.4\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003eenv\u003c/span\u003e:\n              - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e:  \u003cspan style=\"color:#ae81ff\"\u003eGIT_TOKEN\u003c/span\u003e\n                \u003cspan style=\"color:#f92672\"\u003evalueFrom\u003c/span\u003e:\n                  \u003cspan style=\"color:#f92672\"\u003esecretKeyRef\u003c/span\u003e:\n                    \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e:  \u003cspan style=\"color:#ae81ff\"\u003efork-updater-secret\u003c/span\u003e\n                    \u003cspan style=\"color:#f92672\"\u003ekey\u003c/span\u003e:  \u003cspan style=\"color:#ae81ff\"\u003eGIT_TOKEN\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003evolumeMounts\u003c/span\u003e:\n            - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003efork-updater-ssh-key\u003c/span\u003e\n              \u003cspan style=\"color:#f92672\"\u003emountPath\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/etc/secret\u0026#34;\u003c/span\u003e\n              \u003cspan style=\"color:#f92672\"\u003ereadOnly\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003erestartPolicy\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eOnFailure\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eInherently there is nothing wrong with this at first glance. But on a second glance, the problem is \u003ccode\u003erestartPolicy: Always\u003c/code\u003e.\nFor whatever the reason, the cronjob died when it started up. The restart policy then\u0026hellip; restarted the cronjob, which failed again\nreally fast. Then it scheduled a new one and a new one and a new one\u0026hellip; and I had 100+ containers pending and running and\ncreating.\u003c/p\u003e\n\u003cp\u003eAt that point the cluster was basically DDOSd into oblivion. Once the other resources started to die ( since this was a private\ncluster and I didn\u0026rsquo;t bother to set up restrictions on resources ) the cronjob hogged even more and it basically blocked everything\nelse from being able to run. It overwhelmed the scheduler.\u003c/p\u003e\n\u003cp\u003eLovevly that.\u003c/p\u003e\n\u003cp\u003eThis is how you could potentionally kill a cluster which doesn\u0026rsquo;t have any resource limits and restrictions set up.\u003c/p\u003e\n\u003cp\u003eGergely.\u003c/p\u003e\n"
        },
        {
            "title": "Using a Kubernetes based Cluster for Various Services with auto HTTPS",
            "date_published": "2019-09-21T21:01:00+01:00",
            "date_modified": "2019-09-21T21:01:00+01:00",
            "id": "https://skarlso.github.io/2019/09/21/kubernetes-cluster/",
            "url": "https://skarlso.github.io/2019/09/21/kubernetes-cluster/",
            "authors": [
                {
                  "name": "hannibal"
                }
            ],
            "content_html": "\u003ch1 id=\"intro\"\u003eIntro\u003c/h1\u003e\n\u003cp\u003eHi folks.\u003c/p\u003e\n\u003cp\u003eToday, I would like to show you how my infrastructure is deployed and managed. Spoiler alert, I\u0026rsquo;m using Kubernetes to do that.\u003c/p\u003e\n\u003cp\u003eI know\u0026hellip; What a twist!\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s get to it.\u003c/p\u003e\n\u003ch1 id=\"what\"\u003eWhat\u003c/h1\u003e\n\u003cp\u003e\u003cimg src=\"/img/hosting/kube-architecture.png\" alt=\"kube-architecture\"\u003e\u003c/p\u003e\n\u003cp\u003eWhat services am I running exactly? Here is a list I\u0026rsquo;m running at the time of this writing:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAthens Go Proxy\u003c/li\u003e\n\u003cli\u003eGitea\u003c/li\u003e\n\u003cli\u003eThe Lounge (IRC bouncer)\u003c/li\u003e\n\u003cli\u003eTwo CronJobs\n\u003cul\u003e\n\u003cli\u003eFork Updater\u003c/li\u003e\n\u003cli\u003eIDLE RPG online checker\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eMy WebSite (gergelybrautigam.com)\u003c/li\u003e\n\u003cli\u003eMonitoring\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAnd it\u0026rsquo;s really simple to add more.\u003c/p\u003e\n\u003ch1 id=\"where\"\u003eWhere\u003c/h1\u003e\n\u003cp\u003eMy cluster is deployed at DigitalOcean using two droplets each 1vCPU and 2GB RAM.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/hosting/kube-on-digitalocean.png\" alt=\"kube-on-digitalocean\"\u003e\u003c/p\u003e\n\u003ch1 id=\"what-not\"\u003eWhat Not\u003c/h1\u003e\n\u003cp\u003eThis isn\u0026rsquo;t going to be a production grade cluster. What I don\u0026rsquo;t include in here:\u003c/p\u003e\n\u003ch2 id=\"rbac-for-various-services-and-users\"\u003eRBAC for various services and users\u003c/h2\u003e\n\u003cp\u003eSince I\u0026rsquo;m the only user of my cluster I didn\u0026rsquo;t create any kind of access limits / users or such. You are free to create them though. The only role based auth that\u0026rsquo;s going on is for Prometheus.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m not using any third party things which require access to the API.\u003c/p\u003e\n\u003ch2 id=\"resource-limitation\"\u003eResource limitation\u003c/h2\u003e\n\u003cp\u003eI\u0026rsquo;m the sole user of my things. I\u0026rsquo;m not really scaling my gitea up or down based on usage and as such, I did not define things like:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eResource limits\u003c/li\u003e\n\u003cli\u003eNodes with certain capabilities\u003c/li\u003e\n\u003cli\u003eAffinities and Taints \u0026ndash; which means, everything can run anywhere\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"readiness-liveliness\"\u003eReadiness Liveliness\u003c/h2\u003e\n\u003cp\u003eMost of by deploys and services don\u0026rsquo;t have these except for Athens.\u003c/p\u003e\n\u003ch1 id=\"how\"\u003eHow\u003c/h1\u003e\n\u003cp\u003eOkay, with that out of the way, let\u0026rsquo;s get into the hows of things\u0026hellip;\u003c/p\u003e\n\u003ch1 id=\"beginning\"\u003eBeginning\u003c/h1\u003e\n\u003cp\u003eThe most important thing that you need to do in order to use Kubernetes is Containerizing all the things.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/hosting/containers.png\" alt=\"containers\"\u003e\u003c/p\u003e\n\u003cp\u003eSince Kubernetes is a container orchestration tool, without containers it\u0026rsquo;s pretty useless.\u003c/p\u003e\n\u003cp\u003eAs a driver, I\u0026rsquo;m going to use Docker. Kubernetes can use anything that\u0026rsquo;s OCI compatible, which means if you would like to use runc as a container engine, you can do that. I\u0026rsquo;d like to keep my sanity though.\u003c/p\u003e\n\u003ch2 id=\"example\"\u003eExample\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"/img/hosting/fork-updater.png\" alt=\"fork-updater\"\u003e\u003c/p\u003e\n\u003cp\u003eTo show you what I mean\u0026hellip; I have a cronjob which is running every month. It gathers all my forks on github and updates them with the latest from their parents. This a small ruby script located here: \u003ca href=\"https://gist.github.com/Skarlso/fd5bd5971a78a5fa9760b31683de690e\"\u003eFork Updater\u003c/a\u003e. How do we run this? It requires two things. First, a token. We pass that currently as an environment property. It could be in a file in a vault or a secret mounted in as a file it doesn\u0026rsquo;t matter. Currently, it\u0026rsquo;s an environment property. The second thing is more subtle.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m pushing the changes back into my remote forks. I\u0026rsquo;m doing this via SSH. So, we need a key in there too. How we\u0026rsquo;ll get that in there, I\u0026rsquo;ll talk about later when we are talking about how to set this cron job up. For now though, the container needs to look for a key in a specific location because we don\u0026rsquo;t want to over-mount \u003ccode\u003e/root/.ssh/\u003c/code\u003e and we also don\u0026rsquo;t want to use an initContainer to copy over an SSH key (because it\u0026rsquo;s mounted in as a symlink (but that\u0026rsquo;s a different issue all together)). Also, we certianly do NOT want to have a key in the container.\u003c/p\u003e\n\u003cp\u003eTo achieve this, we simply set up a \u003ccode\u003econfig\u003c/code\u003e file for SSH like this one:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eHost github.com\n    IdentityFile /etc/secret/id_rsa\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003e/etc/secret\u003c/code\u003e will be the destination of the ssh key we create.\u003c/p\u003e\n\u003cp\u003eAnd we also need to have a known_hosts file, otherwise git clone will complain. We also bake this into the container. Why? Why not generate that on the fly? Because I want it to fail in case there is something wrong or there is a MIMA going on etc.\u003c/p\u003e\n\u003cp\u003eAll this translated into a Dockerfile looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-Dockerfile\" data-lang=\"Dockerfile\"\u003e\u003cspan style=\"color:#75715e\"\u003e# We are using alpine for a minimalistic image\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eFROM\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e alpine:latest\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e apk --no-cache add ca-certificates\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e apk update\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# Openssh is needed for the SSH command\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e apk --no-cache add ruby vim curl git build-base ruby-dev openssh openssh-client\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# Setup dependencies for the fork ruby file\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e gem install octokit logger multi_json json --no-ri --no-rdoc\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e mkdir /data\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eWORKDIR\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e /data\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# Setup some data about the committer\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e git config --global user.name \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Fork Updater\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e git config --global user.email \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;email@email.com\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e mkdir -p /root/.ssh\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# Get the host config for github.com\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e ssh-keyscan github.com \u0026gt;\u0026gt; /root/.ssh/known_hosts\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# Setup the SSH config\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eCOPY\u003c/span\u003e ./config /root/.ssh\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eCOPY\u003c/span\u003e ./fork_updater.rb .\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eCMD\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ruby\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/data/fork_updater.rb\u0026#34;\u003c/span\u003e]\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat\u0026rsquo;s it. Now our updater is containerized and ready to be deployed as a cronjob on a kube cluster. Oh, and we also need to create the SSH key like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekubectl create secret generic ssh-key-secret --from-file=ssh-privatekey=/path/to/.ssh/id_rsa\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"before-we-begin\"\u003eBefore we Begin\u003c/h1\u003e\n\u003cp\u003eThere are two things we will need though to set up for our cluster before we even begin adding the first service. And that\u0026rsquo;s an ingress with a load-balancer and cert-manager.\u003c/p\u003e\n\u003ch1 id=\"cert-manager\"\u003eCert-Manager\u003c/h1\u003e\n\u003cp\u003eNow, you have the option of installing cert-manager via helm, or via the provided kube config yaml file. I \u003cstrong\u003eSTRONGLY\u003c/strong\u003e recommend using the config yaml file because the upgrading process with helm is a hell of a lot dirtier / failure prone than simply applying a new yaml file with a different version in it.\u003c/p\u003e\n\u003cp\u003eEither way, to install cert-manager follow this simple guide: \u003ca href=\"https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html#installing-with-regular-manifests\"\u003eCert-manager Install Manual\u003c/a\u003e.\u003c/p\u003e\n\u003ch1 id=\"ingress\"\u003eIngress\u003c/h1\u003e\n\u003cp\u003eAn Ingress is a must. This is the component which manages external access to the services which we will define. Like a proxy before your http server. This component will handle the hostname based routing between our services.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m using nginx ingress, although there are a couple of implementations out there.\u003c/p\u003e\n\u003cp\u003eTo install nginx ingress, follow their guide here: \u003ca href=\"https://kubernetes.github.io/ingress-nginx/deploy/\"\u003eInstalling Nginx-Ingress\u003c/a\u003e.\u003c/p\u003e\n\u003ch1 id=\"from-easy-to-complicated\"\u003eFrom Easy to Complicated\u003c/h1\u003e\n\u003cp\u003eAlright. Now that we have the prereqs out of the way, let\u0026rsquo;s get our hands dirty. I\u0026rsquo;ll start with the easiest of them all, my web site, and then will progress towards the more complicated ones, like Gitea and Athens, which require a lot more fiddling and have more moving parts.\u003c/p\u003e\n\u003ch2 id=\"my-website\"\u003eMy Website\u003c/h2\u003e\n\u003cp\u003eThe site, located here: \u003ca href=\"https://gergelybrautigam.com\"\u003eGergely\u0026rsquo;s Domain\u003c/a\u003e; is a really simple, static, \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e based website. It contains nothing fancy, no real Javascript magic, has a simple list of things I\u0026rsquo;ve done and who I am.\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s powered / served by an nginx instance running on port 9090 define by a very simple Dockerfile:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-Dockerfile\" data-lang=\"Dockerfile\"\u003e\u003cspan style=\"color:#66d9ef\"\u003eFROM\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e golang:latest as builder\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e apt-get update \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e apt install -y git make vim hugo\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e mkdir -p /opt/website\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e git clone https://github.com/Skarlso/gergelybrautigam /opt/website\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eWORKDIR\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e /opt/website\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e make\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eFROM\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e nginx:latest\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e mkdir -p /var/www/html/gergelybrautigam\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eWORKDIR\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e /var/www/html/gergelybrautigam\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eCOPY\u003c/span\u003e --from\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ebuilder /opt/website/public .\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eCOPY\u003c/span\u003e 01_gergelybrautigam /etc/nginx/sites-available/\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e mkdir -p /etc/nginx/sites-enabled/\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e ln -s /etc/nginx/sites-available/01_gergelybrautigam /etc/nginx/sites-enabled/01_gergelybrautigam\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eEasy as goblin pie. Nginx has a command set like this \u003ccode\u003eCMD [\u0026quot;nginx\u0026quot;, \u0026quot;-g\u0026quot;, \u0026quot;daemon off;\u0026quot;]\u003c/code\u003e and exposes port 80.\u003c/p\u003e\n\u003ch3 id=\"the-deployment\"\u003eThe deployment\u003c/h3\u003e\n\u003cp\u003eIn order to deploy this in the cluster, I created a deployment as follows:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eapps/v1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eDeployment\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egb-deployment\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egergely-brautigam\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egergelybrautigam\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eannotations\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003eprometheus.io/scrape\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;true\u0026#39;\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eprometheus.io/port\u003c/span\u003e:   \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;9090\u0026#39;\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ereplicas\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eselector\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003ematchLabels\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egergelybrautigam\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n        \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egergelybrautigam\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eannotations\u003c/span\u003e:\n          \u003cspan style=\"color:#f92672\"\u003eprometheus.io/scrape\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;true\u0026#39;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003eprometheus.io/port\u003c/span\u003e:   \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;9090\u0026#39;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egergelybrautigam\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eskarlso/gergelybrautigam:v0.0.26\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003econtainerPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e9090\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe metadata section defines information about the deployment. It\u0026rsquo;s name is gb-deployment. The namespace in which this sits is called gergely-brautigam and it has some labels to it so Prometheus monitoring tool can discover the pod.\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s running a single replica, has a bunch of more metadata and template settings, and finally the container spec which defines the image, and the exposed container port on which the application is running.\u003c/p\u003e\n\u003cp\u003eNow we need a service to expose this deployment.\u003c/p\u003e\n\u003ch3 id=\"the-service\"\u003eThe service\u003c/h3\u003e\n\u003cp\u003eThe service is also simple. It looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eService\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egergely-brautigam\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egb-service\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eselector\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egergelybrautigam\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003eport\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003etargetPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e9090\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAgain, nothing fancy here, just a simple service exposing a port to a different port on the front-end side. This service will be picked up by our previously created routing facility.\u003c/p\u003e\n\u003ch3 id=\"ingress-1\"\u003eIngress\u003c/h3\u003e\n\u003cp\u003eNow that we have the service we need to expose it to the domain. I have the domain gergelybrautigam.com and I already pointed it at the LoadBalancer\u0026rsquo;s IP which was created by the nginx ingress controller.\u003c/p\u003e\n\u003cp\u003eWe only want one LoadBalancer, but we have multiple hostnames. We can achieve that by creating an Ingress resource in the namespace our service is in like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eextensions/v1beta1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eIngress\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egergely-brautigam\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egergely-brautigam-ingress\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eannotations\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003ekubernetes.io/ingress.class\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;nginx\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003ecertmanager.k8s.io/cluster-issuer\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;letsencrypt-prod\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003ecertmanager.k8s.io/acme-challenge-type\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ehttp01\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003enginx.ingress.kubernetes.io/rewrite-target\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003etls\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003ehosts\u003c/span\u003e:\n    - \u003cspan style=\"color:#ae81ff\"\u003egergelybrautigam.com\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003esecretName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egergelybrautigam-tls\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003erules\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003ehost\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egergelybrautigam.com\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003ehttp\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003epaths\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003ebackend\u003c/span\u003e:\n          \u003cspan style=\"color:#f92672\"\u003eserviceName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egb-service\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003eservicePort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRemember, we already have the nginx ingress resource in the default namespace when we installed the controller previously. That is the main entrypoint. We are taking advantage of the rewrite-target annotation. That is our key to success \u003ccode\u003enginx.ingress.kubernetes.io/rewrite-target: /\u003c/code\u003e. The rest is basic routing. We\u0026rsquo;ll have something like this in the other namespace to.\u003c/p\u003e\n\u003cp\u003eAnd with that, our website is done and it should be working under HTTPS. Cert-manager should have picked it up and generated a certificate for it. Let\u0026rsquo;s check.\u003c/p\u003e\n\u003cp\u003eRunning \u003ccode\u003ek get certs -n gergely-brautigam\u003c/code\u003e you should see something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e $ k get certs -n gergely-brautigam\nNAME                   READY   SECRET                 AGE\ngergelybrautigam-tls   True    gergelybrautigam-tls   86d\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf there is a problem, just describe the cert resource and look for the generated challenge and if it was successful or not. The challenge contains mostly good error messages.\u003c/p\u003e\n\u003ch2 id=\"irc-bouncer\"\u003eIRC bouncer\u003c/h2\u003e\n\u003cp\u003eThat wasn\u0026rsquo;t too bad, right? Let\u0026rsquo;s do something a bit more complex this time. We are going to deploy \u003ca href=\"https://github.com/thelounge/thelounge\"\u003eThe lounge\u003c/a\u003e irc bouncer.\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s actually quite easy to do but can be daunting to look at at first.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/hosting/the-climb.png\" alt=\"easy\"\u003e\u003c/p\u003e\n\u003ch3 id=\"the-container\"\u003eThe container\u003c/h3\u003e\n\u003cp\u003eLucky for us, the bouncer already provides a container located here: \u003ca href=\"https://hub.docker.com/r/thelounge/thelounge/\"\u003eThe Lounge Docker Hub\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe just need two things. To expose the port 9000 and to give it something called a PersistentVolume. What\u0026rsquo;s a persistent volume? Well, look it up here: \u003ca href=\"https://kubernetes.io/docs/concepts/storage/persistent-volumes/\"\u003eKubernetes Persistent Volumes\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eTL;DR: We need to preserve data. Containers are ephemeral in nature. Meaning if there is a problem we usually just delete the pod. Which means that all data will be lost. But we need persistence in this case because we\u0026rsquo;ll have user data and user information which we would like to persist between pods. That\u0026rsquo;s what a volume is for.\u003c/p\u003e\n\u003cp\u003eIt will be mounted into the pod so we can point the bouncer to use that location for data management.\u003c/p\u003e\n\u003ch3 id=\"pvc\"\u003ePVC\u003c/h3\u003e\n\u003cp\u003eWith that, this is how our PersistentVolumeClaim will look like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePersistentVolumeClaim\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epowerhouse\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edo-storage-irc\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eaccessModes\u003c/span\u003e:\n  - \u003cspan style=\"color:#ae81ff\"\u003eReadWriteOnce\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eresources\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003erequests\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003estorage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e5Gi\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003estorageClassName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edo-block-storage\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eDigitalOcean provides a block storage implementation for this claim so we use that storage class \u003ccode\u003edo-block-storage\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"deployment\"\u003eDeployment\u003c/h3\u003e\n\u003cp\u003eWith that, this is how the deployment will look like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eapps/v1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eDeployment\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epowerhouse\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eirc-app\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eirc\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ereplicas\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eselector\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003ematchLabels\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eirc\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n        \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eirc\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/name\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eirc\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/instance\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eirc\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eirc\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ethelounge/thelounge:3.1.1\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003econtainerPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e9000\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eirc-http\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003evolumeMounts\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003emountPath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/var/opt/thelounge\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003esubPath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ethelounge\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eirc-data\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003ereadOnly\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eirc-data\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003epersistentVolumeClaim\u003c/span\u003e:\n            \u003cspan style=\"color:#f92672\"\u003eclaimName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edo-storage-irc\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eShort and sweet. The important bits are the labels, those are used by cert-manager and ingress to find the right deployment, and the \u003ccode\u003evolumeMounts\u003c/code\u003e. We mount into the /var/opt/thelounge folder because that\u0026rsquo;s the main configuration location. The subPath is important for a correct mounting.\u003c/p\u003e\n\u003ch3 id=\"the-service-1\"\u003eThe service\u003c/h3\u003e\n\u003cp\u003eAlright, with the deployment in place, let\u0026rsquo;s take a look at the service.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eService\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epowerhouse\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eirc\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eirc\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/name\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eirc\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/instance\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eirc\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eselector\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eirc\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/name\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eirc\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/instance\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eirc\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ehttp\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eport\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e9000\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003etargetPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eirc-http\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAgain, very boring stuff. Boring is good. Boring is predictable. We expose port 9000 to the named targetPort called irc-http which we defined in the above deployment.\u003c/p\u003e\n\u003cp\u003eNow, I have a domain in which these things are running, let\u0026rsquo;s call it \u003ccode\u003epowerhouse.com\u003c/code\u003e (because I\u0026rsquo;m tired of example.com). And I have multiple services in this namespace too, so I\u0026rsquo;ll call the namespace here, powerhouse and put this irc service in there. This also means that the ingress resource for this namespace will contain a couple more routings, because my powerhouse namespace will also contain my gitea and Athens proxy installation.\u003c/p\u003e\n\u003cp\u003eWe can, however, take a peak at the ingress resource here and now\u0026hellip; because I hate suspense.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eextensions/v1beta1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eIngress\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epowerhouse\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epowerhouse-ingress\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eannotations\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003ekubernetes.io/ingress.class\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;nginx\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003ecertmanager.k8s.io/cluster-issuer\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;letsencrypt-prod\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003ecertmanager.k8s.io/acme-challenge-type\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ehttp01\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003enginx.ingress.kubernetes.io/rewrite-target\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003etls\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003ehosts\u003c/span\u003e:\n    - \u003cspan style=\"color:#ae81ff\"\u003eirc.powerhouse.com\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003esecretName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eirc-powerhouse-tls\u003c/span\u003e\n  - \u003cspan style=\"color:#f92672\"\u003ehosts\u003c/span\u003e:\n    - \u003cspan style=\"color:#ae81ff\"\u003egitea.powerhouse.com\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003esecretName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-powerhouse-tls\u003c/span\u003e\n  - \u003cspan style=\"color:#f92672\"\u003ehosts\u003c/span\u003e:\n    - \u003cspan style=\"color:#ae81ff\"\u003eathens.powerhouse.com\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003esecretName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-powerhouse-tls\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003erules\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003ehost\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eirc.powerhouse.com\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003ehttp\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003epaths\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003ebackend\u003c/span\u003e:\n          \u003cspan style=\"color:#f92672\"\u003eserviceName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eirc\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003eservicePort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e9000\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003epath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/\u003c/span\u003e\n  - \u003cspan style=\"color:#f92672\"\u003ehost\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea.powerhouse.com\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003ehttp\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003epaths\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003ebackend\u003c/span\u003e:\n          \u003cspan style=\"color:#f92672\"\u003eserviceName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003eservicePort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e3000\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003epath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/\u003c/span\u003e\n  - \u003cspan style=\"color:#f92672\"\u003ehost\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens.powerhouse.com\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003ehttp\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003epaths\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003ebackend\u003c/span\u003e:\n          \u003cspan style=\"color:#f92672\"\u003eserviceName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eathens-service\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003eservicePort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003epath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe can see that I have multiple paths pointing to three different subdomains with different ports. These ports will be routed to by nginx ingress. Meaning you \u003cstrong\u003eDO NOT OPEN THESE ON YOUR LOADBALANCER\u003c/strong\u003e. These will all be accessible from 443/HTTPS. Expect for gitea\u0026rsquo;s SSH port later on.\u003c/p\u003e\n\u003cp\u003eWith these in place, cert-manager should pick it up and provide a certificate for it.\u003c/p\u003e\n\u003ch3 id=\"side-track----debugging\"\u003eSide track \u0026ndash; debugging\u003c/h3\u003e\n\u003cp\u003eIf there is a problem and we can\u0026rsquo;t reach TheLounge we need to debug. I use the following tool to access Kubernetes resources: \u003ca href=\"https://github.com/derailed/k9s\"\u003eK9S\u003c/a\u003e. It\u0026rsquo;s a neat CLI tool to look at kube resources in an interactive way and not having to type in a bunch of commands. Never the less, I will also paste those in here.\u003c/p\u003e\n\u003cp\u003eTo look at the pods that should have been created, type:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ek get pods -n powerhouse\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eShould see something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eNAME                          READY   STATUS    RESTARTS   AGE\nathens-app-857749c59c-lmjnb   1/1     Running   0          6d3h\ngitea-app-6974fb995b-pn2vv    1/1     Running   0          9d\ngitea-db-59758fbcd9-4562c     1/1     Running   0          9d\nirc-app-5f87688f98-dqsvb      1/1     Running   0          9d\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can see that my other services are running fine. And there is IRC as well. Now if there would be any kind of problem we could access the Pods information be describing the pod with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ek describe pod/irc-app-5f87688f98-dqsvb -n powerhouse\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhich will provide a bunch of information about the pod. But the pod could be absolutely fine, yet our service could be down. (We didn\u0026rsquo;t define any liveliness or readiness probs after all).\u003c/p\u003e\n\u003cp\u003eWe can verify that by taking a peak in the container (also, check if our mounting was successful). Since this is just a container, exec works similar to docker exec.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e $ k exec -it irc-app-5f87688f98-dqsvb -n powerhouse /bin/bash\nroot@irc-app-5f87688f98-dqsvb:/#\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eShould give us a prompt. We can now look at logs, check out the configuration folder etc.\u003c/p\u003e\n\u003cp\u003eIn k9s you would simply select the right namespace, select the pod, hit \u003ccode\u003ed\u003c/code\u003e for describe or \u003ccode\u003es\u003c/code\u003e for shell. Done.\u003c/p\u003e\n\u003ch2 id=\"gitea\"\u003eGitea\u003c/h2\u003e\n\u003cp\u003eNow, we have IRC running. Let\u0026rsquo;s try deploying \u003ca href=\"https://gitea.io/en-us/\"\u003eGitea\u003c/a\u003e. This takes a tiny bit more fiddling though.\u003c/p\u003e\n\u003ch3 id=\"requirements\"\u003eRequirements\u003c/h3\u003e\n\u003cp\u003eGitea requires the following things to be present:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe gitea app configuration file (this can be done via environment properties though)\u003c/li\u003e\n\u003cli\u003eA DB\u003c/li\u003e\n\u003cli\u003eA PersistentVolume\u003c/li\u003e\n\u003cli\u003eSSH Port for SSH based git clones instead of simple https\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"db\"\u003eDB\u003c/h4\u003e\n\u003cp\u003eWe shall begin with the simplest of them, the DB. At this point we could go with the DigitalOcean managed Postgres installation, but I didn\u0026rsquo;t want to put that on the bill as well. So I choose to simply put my DB into a container and deploy it within the cluster.\u003c/p\u003e\n\u003cp\u003eThis is actually quite simple. The DB will be a separate deployment / application in the same namespace as the Gitea app. It will also contain a network policy, since the DB doesn\u0026rsquo;t need internet access and the internet shouldn\u0026rsquo;t be able to access it.\u003c/p\u003e\n\u003cp\u003eIn fact the only thing that should be able to access the DB is the Gitea application itself which we will be able to restrict via the usage of\u0026hellip; Labels!\u003c/p\u003e\n\u003ch5 id=\"deployment-1\"\u003eDeployment\u003c/h5\u003e\n\u003cp\u003eBut first, take a look at the deployment of a Postgres 11 pod:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eapps/v1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eDeployment\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epowerhouse\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-db\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ereplicas\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eselector\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003ematchLabels\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-db\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-db\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n        \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-db\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epostgres\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epostgres:11\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eenv\u003c/span\u003e:\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePOSTGRES_USER\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea\u003c/span\u003e\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePOSTGRES_PASSWORD\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003evalueFrom\u003c/span\u003e:\n              \u003cspan style=\"color:#f92672\"\u003esecretKeyRef\u003c/span\u003e:\n                \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-db-password\u003c/span\u003e\n                \u003cspan style=\"color:#f92672\"\u003ekey\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epassword\u003c/span\u003e\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePOSTGRES_DB\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003evolumeMounts\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003emountPath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/var/lib/postgresql/data\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003esubPath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edata\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# important so it gets mounted properly\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egit-db-data\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egit-db-data\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003epersistentVolumeClaim\u003c/span\u003e:\n            \u003cspan style=\"color:#f92672\"\u003eclaimName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edo-storage-gitea-db\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOkay, there are a lot of things going on here, but the three things we need to note are the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e      \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n        \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-db\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOur network policy will look for this label to identify the pods which fell under its rule.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePOSTGRES_PASSWORD\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003evalueFrom\u003c/span\u003e:\n              \u003cspan style=\"color:#f92672\"\u003esecretKeyRef\u003c/span\u003e:\n                \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-db-password\u003c/span\u003e\n                \u003cspan style=\"color:#f92672\"\u003ekey\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epassword\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe database password will come from a secret.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e        \u003cspan style=\"color:#f92672\"\u003evolumeMounts\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003emountPath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/var/lib/postgresql/data\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003esubPath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edata\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# important so it gets mounted properly\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egit-db-data\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egit-db-data\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003epersistentVolumeClaim\u003c/span\u003e:\n            \u003cspan style=\"color:#f92672\"\u003eclaimName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edo-storage-gitea-db\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe also need a persistent volume otherwise the data will be lost on each pod restart.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e---\n\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePersistentVolumeClaim\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epowerhouse\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edo-storage-gitea-db\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eaccessModes\u003c/span\u003e:\n  - \u003cspan style=\"color:#ae81ff\"\u003eReadWriteOnce\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eresources\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003erequests\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003estorage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e10Gi\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003estorageClassName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edo-block-storage\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"service\"\u003eService\u003c/h5\u003e\n\u003cp\u003eWe also need a Service so Gitea will be able to reach it. This isn\u0026rsquo;t public though so a NodePort is enough with no clusterIP.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eService\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epowerhouse\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-db-service\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003eport\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e5432\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eselector\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-db\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eclusterIP\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eNone\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn order to reach this DB we can use a URL like this now from the Gitea app: \u003ccode\u003egitea-db-service.powerhouse.svc.cluster.local:5432\u003c/code\u003e.\u003c/p\u003e\n\u003ch5 id=\"networkpolicy\"\u003eNetworkPolicy\u003c/h5\u003e\n\u003cp\u003eWe want the Gitea app to be able to reach it. Which means in-out to the Gitea app and nothing else.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enetworking.k8s.io/v1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eNetworkPolicy\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-db-network-policy\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epowehouse\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003epodSelector\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003ematchLabels\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-db\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003epolicyTypes\u003c/span\u003e:\n  - \u003cspan style=\"color:#ae81ff\"\u003eIngress\u003c/span\u003e\n  - \u003cspan style=\"color:#ae81ff\"\u003eEgress\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eingress\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003epodSelector\u003c/span\u003e:\n        \u003cspan style=\"color:#f92672\"\u003ematchLabels\u003c/span\u003e:\n          \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003eprotocol\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eTCP\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eport\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e5432\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eegress\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003eto\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003epodSelector\u003c/span\u003e:\n        \u003cspan style=\"color:#f92672\"\u003ematchLabels\u003c/span\u003e:\n          \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003eprotocol\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eTCP\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eport\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e5432\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe can test this now by exec-ing into the Pod of the DB deployment and trying to ping google.com for example. It should be denied. Yet later, when we deploy our Gitea app, that should be able to talk to the DB instance.\u003c/p\u003e\n\u003ch5 id=\"secret\"\u003eSecret\u003c/h5\u003e\n\u003cp\u003eFinally, we have a Secret which contains our db password base64 encoded.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eSecret\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ecronohub\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-db-password\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003etype\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eOpaque\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003edata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003epassword\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eZ2l0ZWE=\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat says password123. To get it, you can run something like \u003ccode\u003eecho -n \u0026quot;password123\u0026quot; | base64\u003c/code\u003e.\u003c/p\u003e\n\u003ch4 id=\"gitea-app-ini\"\u003eGitea App ini\u003c/h4\u003e\n\u003cp\u003eHuh, with that done, we can go on with the application ini file. This can be configured via environment properties but once you get over a dozen configuration entries, it\u0026rsquo;s just easier to use an app.ini. My app ini is large, so I won\u0026rsquo;t post it here. I could mount it in as a file, but that proved to be difficult or not work at all properly because Gitea is running under a different user than root. Also, once the mount happened the fact the gitea was trying to write into it caused problems. Mounting as a different user didn\u0026rsquo;t work out either, so I\u0026rsquo;m using an \u003ca href=\"https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\"\u003eInitContainer\u003c/a\u003e to do the job. They are there for that reason. And it was actually a hell of a lot simpler than doing file mounting.\u003c/p\u003e\n\u003cp\u003eThe app.ini is defined as a ConfigMap like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekubectl create configmap gitea-app-ini --from-file=app.ini --namespace powerhouse\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis was done from the folder where my app.ini was residing.\u003c/p\u003e\n\u003ch4 id=\"deployment-2\"\u003eDeployment\u003c/h4\u003e\n\u003cp\u003eNow comes the big gun. The Gitea deployment file. This is how it looks like in all its glory:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eapps/v1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eDeployment\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ecronohub\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-app\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ereplicas\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eselector\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003ematchLabels\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n        \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/name\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/instance\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003einitContainers\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003einit-disk\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ebusybox:latest\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003ecommand\u003c/span\u003e:\n        - \u003cspan style=\"color:#ae81ff\"\u003e/bin/chown\u003c/span\u003e\n        - \u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# we set the gid and uid of the user for gitea.\u003c/span\u003e\n        - \u003cspan style=\"color:#ae81ff\"\u003e/data\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003evolumeMounts\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egit-data\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003emountPath\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/data\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003ereadOnly\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n      - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003einit-app-ini\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ebusybox:latest\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003ecommand\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;sh\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;-c\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;mkdir -p /data/gitea/conf/; cp /data/app.ini /data/gitea/conf\u0026#39;\u003c/span\u003e]\n        \u003cspan style=\"color:#f92672\"\u003evolumeMounts\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egit-data\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003emountPath\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/data\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003ereadOnly\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-app-ini-conf\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003emountPath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/data/app.ini\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003esubPath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eapp.ini\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003ereadOnly\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea/gitea:1.9.2\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eenv\u003c/span\u003e:\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eDB_PASSWD\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003evalueFrom\u003c/span\u003e:\n              \u003cspan style=\"color:#f92672\"\u003esecretKeyRef\u003c/span\u003e:\n                \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-db-password\u003c/span\u003e\n                \u003cspan style=\"color:#f92672\"\u003ekey\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epassword\u003c/span\u003e\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eDB_TYPE\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003evalueFrom\u003c/span\u003e:\n              \u003cspan style=\"color:#f92672\"\u003econfigMapKeyRef\u003c/span\u003e:\n                \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-config-map\u003c/span\u003e\n                \u003cspan style=\"color:#f92672\"\u003ekey\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eDB_TYPE\u003c/span\u003e\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eDB_HOST\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003evalueFrom\u003c/span\u003e:\n              \u003cspan style=\"color:#f92672\"\u003econfigMapKeyRef\u003c/span\u003e:\n                \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-config-map\u003c/span\u003e\n                \u003cspan style=\"color:#f92672\"\u003ekey\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eDB_HOST\u003c/span\u003e\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eDB_NAME\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003evalueFrom\u003c/span\u003e:\n              \u003cspan style=\"color:#f92672\"\u003econfigMapKeyRef\u003c/span\u003e:\n                \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-config-map\u003c/span\u003e\n                \u003cspan style=\"color:#f92672\"\u003ekey\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eDB_NAME\u003c/span\u003e\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eDB_USER\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003evalueFrom\u003c/span\u003e:\n              \u003cspan style=\"color:#f92672\"\u003econfigMapKeyRef\u003c/span\u003e:\n                \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-config-map\u003c/span\u003e\n                \u003cspan style=\"color:#f92672\"\u003ekey\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eDB_USER\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003econtainerPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e3000\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-http\u003c/span\u003e\n        - \u003cspan style=\"color:#f92672\"\u003econtainerPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-ssh\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003evolumeMounts\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003emountPath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/data\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egit-data\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003ereadOnly\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egit-data\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003epersistentVolumeClaim\u003c/span\u003e:\n            \u003cspan style=\"color:#f92672\"\u003eclaimName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edo-storage-gitea\u003c/span\u003e\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-app-ini-conf\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003econfigMap\u003c/span\u003e:\n            \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-app-ini\u003c/span\u003e\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe important bit is the initContainer section. What\u0026rsquo;s happening here? We mount the app.ini file to the init container under /data. The awesome part about the initContainer is that the real container will have access to the file system the init container created.\u003c/p\u003e\n\u003cp\u003eSo we take that file, fix the permissions on it and copy it to the right location under \u003ccode\u003e/data/gitea/conf\u003c/code\u003e for the Gitea app to work with.\u003c/p\u003e\n\u003cp\u003eDone!\u003c/p\u003e\n\u003cp\u003eAnd the configMap is simple:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eConfigMap\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epowerhouse\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-config-map\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003edata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eAPP_COLOR\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eblue\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eAPP_MOD\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eprod\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eDB_TYPE\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epostgres\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eDB_HOST\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;gitea-db-service.cronohub.svc.cluster.local:5432\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eDB_NAME\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eDB_USER\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"ssh\"\u003eSSH\u003c/h4\u003e\n\u003cp\u003eNormally, Ingress only allows HTTP based traffic control. But what would an ingress be without also regular TCP based routing?\u003c/p\u003e\n\u003cp\u003eBut it\u0026rsquo;s not trivial. Nginx Ingress provides a documentation for this here: \u003ca href=\"https://kubernetes.github.io/ingress-nginx/user-guide/exposing-tcp-udp-services/\"\u003eExposing TCP and UDP services\u003c/a\u003e. What does that mean in practice?\u003c/p\u003e\n\u003cp\u003eYou see we are also exposing port 22 on the container:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e        - \u003cspan style=\"color:#f92672\"\u003econtainerPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-ssh\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI choose to differentiate my SSH port for Gitea from port 22 because that\u0026rsquo;s just cumbersome to get done right. Gitea provides an explanation on how to do port 22 forwarding in a docker container with a custom git command which forwards commands to the container itself. This is all just plain too much to worry about.\u003c/p\u003e\n\u003cp\u003eI have this in the app.ini:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-ini\" data-lang=\"ini\"\u003e\u003cspan style=\"color:#a6e22e\"\u003eSSH_PORT\u003c/span\u003e         \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026lt;port of my choosing\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd then this in the Service definition:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eService\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epowerhouse\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/name\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/instance\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eselector\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/name\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eapp.kubernetes.io/instance\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ehttp\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eport\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e3000\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003etargetPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-http\u003c/span\u003e\n  - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003essh\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eport\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e\u0026lt;port of my choosing\u0026gt;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003etargetPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egitea-ssh\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eprotocol\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eTCP\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd then, we edit the nginx-controller deployment like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekubectl edit deployment.apps/nginx-ingress-controller\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd add this line \u003ccode\u003e--tcp-services-configmap=cronohub/gitea-ssh-service\u003c/code\u003e to the container\u0026rsquo;s args field:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e      \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003eargs\u003c/span\u003e:\n        - \u003cspan style=\"color:#ae81ff\"\u003e/nginx-ingress-controller\u003c/span\u003e\n        - --\u003cspan style=\"color:#ae81ff\"\u003edefault-backend-service=default/nginx-ingress-default-backend\u003c/span\u003e\n        - --\u003cspan style=\"color:#ae81ff\"\u003eelection-id=ingress-controller-leader\u003c/span\u003e\n        - --\u003cspan style=\"color:#ae81ff\"\u003eingress-class=nginx\u003c/span\u003e\n        - --\u003cspan style=\"color:#ae81ff\"\u003econfigmap=default/nginx-ingress-controller\u003c/span\u003e\n        - --\u003cspan style=\"color:#ae81ff\"\u003etcp-services-configmap=powerhouse/gitea-ssh-service\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOne more thing is that we have to open that port on the load balancer as well to get traffic to it. To that end, edit the nginx ingress service as well:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekubectl edit services/nginx-ingress-controller\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd add the exposed port:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e  - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003essh\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eport\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e\u0026lt;port of my choosing\u0026gt;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eprotocol\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eTCP\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003etargetPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e\u0026lt;port of my choosing\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThere will probably be a nodePort section in there on the other ports. Ignore that for your change.\u003c/p\u003e\n\u003cp\u003eAlso, if you are doing the nginx installation by hand, just add this or save the yaml file from those deployments like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekubectl get service/nginx-ingress-controller -o yaml \u0026gt; nginx-ingress-controller.yaml\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSo you can deploy / modify it later on.\u003c/p\u003e\n\u003ch4 id=\"finished-gitea\"\u003eFinished Gitea\u003c/h4\u003e\n\u003cp\u003eAnd with that, visit \u003ccode\u003egitea.powerhouse.com\u003c/code\u003e and it should work including HTTPS and SSH!\u003c/p\u003e\n\u003cp\u003eYou can now clone repositories like this: \u003ccode\u003egit clone ssh://git@gitea.powerhouse.com:1234/user/awesome_project.git\u003c/code\u003e after you created your user.\u003c/p\u003e\n\u003cp\u003eUser creation is done by using the gitea admin CLI tool described here: \u003ca href=\"https://docs.gitea.io/en-us/command-line/\"\u003eGitea Documentation\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIt is important to note that we don\u0026rsquo;t use \u003ccode\u003elatest\u003c/code\u003e anywhere. It\u0026rsquo;s just not good if you are trying to update a service later on. We could set ImagePolicy to AlwaysPull but that\u0026rsquo;s just not a good thing to do if you have a 2 gig image. Always use version and policy \u003ccode\u003eimagePullPolicy: IfNotPresent\u003c/code\u003e to save yourself some bandwidth.\u003c/p\u003e\n\u003ch2 id=\"idle-checker\"\u003eIdle Checker\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"/img/hosting/idle-checker.png\" alt=\"idle-checker\"\u003e\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s create a last resource, then we\u0026rsquo;ll call it a day.\u003c/p\u003e\n\u003cp\u003eThe idle RPG is a cool little game that you play by\u0026hellip; not playing. At all. If you play, you get penalties. Here is a cool resource to start: \u003ca href=\"https://idlerpg.lolhosting.net\"\u003eIdle RPG\u003c/a\u003e. It looks something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e21:56 \u0026lt;@IdleBot\u0026gt; Verily I say unto thee, the Heavens have burst forth, and the blessed hand of God carried ganome 0 days, 03:52:11 toward level 45.\n21:56 \u0026lt;@IdleBot\u0026gt; ganome reaches next level in 0 days, 01:49:16.\n22:02 \u0026lt;@IdleBot\u0026gt; himuraken, the level 77 Mage Of BitFlips, is now online from nickname himuraken. Next level in 11 days, 10:35:53.\n22:14 \u0026lt;@IdleBot\u0026gt; Nechayev, Sundance, and simple [2011/2347] have team battled HeavyPodda, Sixbierehomme, and L [1417/2717] and won! 0 days, 06:14:54 is removed from their clocks.\n22:18 \u0026lt;@IdleBot\u0026gt; canton7 saw an episode of Ally McBeal. This terrible calamity has slowed them 0 days, 05:10:53 from level 85.\n22:18 \u0026lt;@IdleBot\u0026gt; canton7 reaches next level in 2 days, 00:21:36.\n22:26 \u0026lt;@IdleBot\u0026gt; Tor [4/1142] has challenged Brainiac [232/817] in combat and lost! 3 days, 23:06:05 is added to Tor's clock.\n22:26 \u0026lt;@IdleBot\u0026gt; Tor reaches next level in 39 days, 23:39:35.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt could happen that by some misfortune the bouncer gets restarted and it doesn\u0026rsquo;t log you back in. Or you simply just lose connection and you don\u0026rsquo;t re-connect. That is unacceptable because the point is to be present. Otherwise you don\u0026rsquo;t play. So you need an early warning in case you are offline. Luckily, IdleRPG provides an XML based endpoint to get which contains your status.\u003c/p\u003e\n\u003cp\u003eFrom there, I\u0026rsquo;m using mailgun with a registered domain to send me an email in case my status is offline. For that, here is a small Go program \u003ca href=\"https://gist.github.com/Skarlso/318ddd6f8d71dbda8fbbd1a908fdb159\"\u003eIdleRPG Checker Go Code\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eTo put that into a Docker container, here is a Dockerfile:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-Dockerfile\" data-lang=\"Dockerfile\"\u003e\u003cspan style=\"color:#66d9ef\"\u003eFROM\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e golang:latest as build\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e go get -v github.com/sirupsen/logrus \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    go get -v github.com/mailgun/mailgun-go\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eCOPY\u003c/span\u003e ./main.go /code/\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eWORKDIR\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e /code\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e CGO_ENABLED\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e GOOS\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003elinux go build -a -installsuffix cgo -o /idlerpg-checker .\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eFROM\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e alpine:latest\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e apk --no-cache add ca-certificates\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eCOPY\u003c/span\u003e --from\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ebuild /idlerpg-checker /idlerpg-checker\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e echo \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v0.0.1\u0026#34;\u003c/span\u003e \u0026gt;\u0026gt; .version\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eENTRYPOINT\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/idlerpg-checker\u0026#34;\u003c/span\u003e]\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd the corresponding cronjob resource definition:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ebatch/v1beta1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eCronJob\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eidle-checker\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eidle-checker\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eschedule\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*/20 * * * *\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ejobTemplate\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e:\n        \u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n          \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n          - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eidle-checker\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eskarlso/idle-checker\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003eimagePullPolicy\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eIfNotPresent\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003eenv\u003c/span\u003e:\n              - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e:  \u003cspan style=\"color:#ae81ff\"\u003eMG_API_KEY\u003c/span\u003e\n                \u003cspan style=\"color:#f92672\"\u003evalueFrom\u003c/span\u003e:\n                  \u003cspan style=\"color:#f92672\"\u003esecretKeyRef\u003c/span\u003e:\n                    \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e:  \u003cspan style=\"color:#ae81ff\"\u003eidle-rpg-secret\u003c/span\u003e\n                    \u003cspan style=\"color:#f92672\"\u003ekey\u003c/span\u003e:  \u003cspan style=\"color:#ae81ff\"\u003eMG_API_KEY\u003c/span\u003e\n              - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e:  \u003cspan style=\"color:#ae81ff\"\u003eMG_DOMAIN\u003c/span\u003e\n                \u003cspan style=\"color:#f92672\"\u003evalueFrom\u003c/span\u003e:\n                  \u003cspan style=\"color:#f92672\"\u003esecretKeyRef\u003c/span\u003e:\n                    \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e:  \u003cspan style=\"color:#ae81ff\"\u003eidle-rpg-secret\u003c/span\u003e\n                    \u003cspan style=\"color:#f92672\"\u003ekey\u003c/span\u003e:  \u003cspan style=\"color:#ae81ff\"\u003eMG_DOMAIN\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003eargs\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;-username\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;username\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;-email\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;user@powerhouse.com\u0026#39;\u003c/span\u003e]\n          \u003cspan style=\"color:#f92672\"\u003erestartPolicy\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eOnFailure\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAaaand, the secret for the API key:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eSecret\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eidle-checker\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eidle-rpg-secret\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003etype\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eOpaque\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003edata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eMG_API_KEY\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003easdf=\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eMG_DOMAIN\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003easdf==\u003c/span\u003e\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eDone. Huh. This will run every 20 minutes and check if the user with username \u003ccode\u003eusername\u003c/code\u003e is online. If not, it will send an email to the given email address. Your levels are safe.\u003c/p\u003e\n\u003ch1 id=\"closing-words\"\u003eClosing words\u003c/h1\u003e\n\u003cp\u003ePhew. This has been quite the ride. The post is now really long, so I will split the rest out into a Part 2. That is, Athens and Monitoring.\u003c/p\u003e\n\u003cp\u003eThank you for reading this far!\u003c/p\u003e\n\u003cp\u003eCheers,\nGergely.\u003c/p\u003e\n"
        },
        {
            "title": "Updated Face-recog architecture drawing",
            "date_published": "2019-09-19T13:01:00+01:00",
            "date_modified": "2019-09-19T13:01:00+01:00",
            "id": "https://skarlso.github.io/2019/09/19/updated-face-recog-drawing/",
            "url": "https://skarlso.github.io/2019/09/19/updated-face-recog-drawing/",
            "authors": [
                {
                  "name": "hannibal"
                }
            ],
            "content_html": "\u003cp\u003eI had a lot of fun using \u003ca href=\"https://procreate.art\"\u003eProcreate\u003c/a\u003e to re-draw the architecture image I\u0026rsquo;ve drawn for my distribute face recognition application detailed in this post \u003ca href=\"https://skarlso.github.io/2018/03/15/kubernetes-distributed-application/\"\u003eDistributed Face-Recognition App\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWithout much fanfare, here is the drawing:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/kube/kube_architecture.png\" alt=\"kube_architecture.png\"\u003e\u003c/p\u003e\n\u003cp\u003eThanks,\nGergely.\u003c/p\u003e\n"
        },
        {
            "title": "Efferent and Afferent metrics in Go",
            "date_published": "2019-04-21T21:01:00+01:00",
            "date_modified": "2019-04-21T21:01:00+01:00",
            "id": "https://skarlso.github.io/2019/04/21/efferent-and-afferent-metrics-in-go/",
            "url": "https://skarlso.github.io/2019/04/21/efferent-and-afferent-metrics-in-go/",
            "authors": [
                {
                  "name": "hannibal"
                }
            ],
            "content_html": "\u003ch1 id=\"intro\"\u003eIntro\u003c/h1\u003e\n\u003cp\u003eHi folks!\u003c/p\u003e\n\u003cp\u003eToday I would like to write about a metric that I read in a book called Clean Architecture from Robert Cecil Martin ( Uncle Bob ).\u003c/p\u003e\n\u003ch1 id=\"abstract\"\u003eAbstract\u003c/h1\u003e\n\u003cp\u003eThe metrics I mean are \u003ca href=\"https://en.wikipedia.org/wiki/Software_package_metrics\"\u003eEfferent\u003c/a\u003e and \u003ca href=\"https://en.wikipedia.org/wiki/Software_package_metrics\"\u003eAfferent\u003c/a\u003e coupling in packages. So you, dear reader, don\u0026rsquo;t have to navigate away from this page, here are the descriptions pasted in:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eAfferent couplings (Ca): The number of classes in other packages that depend upon classes within the package is an indicator of the package\u0026rsquo;s responsibility. Afferent couplings signal inward. (Affected by this package) (Fan-In).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eEfferent couplings (Ce): The number of classes in other packages that the classes in this package depend upon is an indicator of the package\u0026rsquo;s dependence on externalities. Efferent couplings signal outward. (Effecting this package) (Fan-Out).\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese metrics used together will indicate the stability / instability of each package in a project.\u003c/p\u003e\n\u003ch1 id=\"metric-usage\"\u003eMetric Usage\u003c/h1\u003e\n\u003cp\u003eWhat does it mean if the package is stable vs. unstable? Let\u0026rsquo;s take a closer look.\u003c/p\u003e\n\u003ch2 id=\"unstable\"\u003eUnstable\u003c/h2\u003e\n\u003cp\u003eIf the instability metric comes out as 1 or close to 1, that means that the package is unstable. It means that there are only packages which this package is depending upon and nothing, or only 1 or 2, packages depend on it. This infers two things:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe package is easy to change since there is nothing depending on the behavior explicitly\u003c/li\u003e\n\u003cli\u003eThe package is volatile since it depends on a lot of out side things\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe first one is self-explanatory. The second one has ramifications. These ramifications are that there are a lot of packages that could cause bugs in this package. Ideally, a package with instability 1 or high, requires a large test coverage to ensure that no bugs seep in.\u003c/p\u003e\n\u003ch2 id=\"stable\"\u003eStable\u003c/h2\u003e\n\u003cp\u003eOn the other spectrum lies the indicator for a stable package. If this metric is 0 or close to 0, the package is said to be stable. A stable package resists change because it has a lot of depending packages. The depending packages lock this package in place, meaning we can\u0026rsquo;t change the package easily. Ideally this is the package that would contain business logic for example, or code which does not change often.\u003c/p\u003e\n\u003ch1 id=\"appliance-in-go-ecosystem\"\u003eAppliance in Go ecosystem\u003c/h1\u003e\n\u003cp\u003eThe book was using mostly Java or C/C++ for examples and dealt with classes describing these metrics. Especially the Abstractness of a package which calculates as ratio of abstract classes + interfaces vs concrete classes and implementations. This isn\u0026rsquo;t that easy to define in Go. Not impossible though and we could still get something close enough. Something like, count interfaces + structs vs implementations of said interfaces with function receivers and functions.\u003c/p\u003e\n\u003cp\u003eThe easier of these is the coupling metrics. I think we can define them since Go also has import statements. Go doesn\u0026rsquo;t have classes, but it\u0026rsquo;s enough if we calculate the number of packages that said package depends upon and are depended upon by. Should be close enough.\u003c/p\u003e\n\u003ch1 id=\"tool\"\u003eTool\u003c/h1\u003e\n\u003cp\u003eIf there is a project with a \u003cstrong\u003elot\u003c/strong\u003e of packages and files, it would be quite difficult to calculate things using your hands\u0026hellip; Hence, \u003ca href=\"https://github.com/Skarlso/effrit\"\u003eEffrit\u003c/a\u003e. This tool, at the writing of this post, only calculates the stability metric for now. If given a parameter like \u003ccode\u003e-p effrit\u003c/code\u003e it will only calculate the Fan-Out metrics considering project packages. If no project name is given, it will also calculate not project packages (for example cobra or aws sdk) as Efferent. Usage is really simple. Navigate to the root of the project and run \u003ccode\u003eeffrit scan -p \u0026lt;projectname\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003ch1 id=\"applying-the-tool\"\u003eApplying the tool\u003c/h1\u003e\n\u003cp\u003eLet\u0026rsquo;s see with a real example on using the tool and what to do with the metrics it provides.\u003c/p\u003e\n\u003cp\u003eI have a project called \u003ca href=\"https://github.com/go-furnace/go-furnace\"\u003eFurnace\u003c/a\u003e. Running the tool on it I get the following stats:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/effrit/effrit1.png\" alt=\"furnace-before-tool\"\u003e.\u003c/p\u003e\n\u003cp\u003eWhat do these means?\u003c/p\u003e\n\u003cp\u003eIt means, that hopefully, \u003ccode\u003ecommand\u003c/code\u003e packages have a high coverage and that \u003ccode\u003econfig\u003c/code\u003e packages don\u0026rsquo;t require change that often. The coverage count for aws command package is:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ecoverage: 74.7% of statements\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThat is pretty good. I think it\u0026rsquo;s covered well enough for now.\u003c/p\u003e\n\u003cp\u003eOn to the \u003ccode\u003econfig\u003c/code\u003e package. This is the whole file:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econfig\u003c/span\u003e\n\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;os/user\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;path/filepath\u0026#34;\u003c/span\u003e\n\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/go-furnace/go-furnace/handle\u0026#34;\u003c/span\u003e\n)\n\n\u003cspan style=\"color:#75715e\"\u003e// Spinners is a collection os spinner types\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSpinners\u003c/span\u003e = []\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e`←↖↑↗→↘↓↙`\u003c/span\u003e,\n\t\u003cspan style=\"color:#e6db74\"\u003e`▁▃▄▅▆▇█▇▆▅▄▃`\u003c/span\u003e,\n\t\u003cspan style=\"color:#e6db74\"\u003e`┤┘┴└├┌┬┐`\u003c/span\u003e,\n\t\u003cspan style=\"color:#e6db74\"\u003e`◰◳◲◱`\u003c/span\u003e,\n\t\u003cspan style=\"color:#e6db74\"\u003e`◴◷◶◵`\u003c/span\u003e,\n\t\u003cspan style=\"color:#e6db74\"\u003e`◐◓◑◒`\u003c/span\u003e,\n\t\u003cspan style=\"color:#e6db74\"\u003e`⣾⣽⣻⢿⡿⣟⣯⣷`\u003c/span\u003e,\n\t\u003cspan style=\"color:#e6db74\"\u003e`|/-\\`\u003c/span\u003e}\n\n\u003cspan style=\"color:#75715e\"\u003e// WAITFREQUENCY global wait frequency default.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWAITFREQUENCY\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\n\u003cspan style=\"color:#75715e\"\u003e// STACKNAME is the default name for a stack.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSTACKNAME\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;FurnaceStack\u0026#34;\u003c/span\u003e\n\n\u003cspan style=\"color:#75715e\"\u003e// SPINNER is the index of which spinner to use. Defaults to 7.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSPINNER\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e\n\n\u003cspan style=\"color:#75715e\"\u003e// Path retrieves the main configuration path.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePath\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e {\n\t\u003cspan style=\"color:#75715e\"\u003e// Get configuration path\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eusr\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003euser\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCurrent\u003c/span\u003e()\n\t\u003cspan style=\"color:#a6e22e\"\u003ehandle\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eError\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efilepath\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eJoin\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eusr\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHomeDir\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.config\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;go-furnace\u0026#34;\u003c/span\u003e)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNot a lot of stuff in there. But it\u0026rsquo;s using the \u003ccode\u003ehandle\u003c/code\u003e package. Hence the \u003ccode\u003e0.2\u003c/code\u003e. Luckily, we also have some coverage to take care of that.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003ehandle\u003c/code\u003e is pretty stable. Let\u0026rsquo;s take a peak inside:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehandle\u003c/span\u003e\n\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\n\u003cspan style=\"color:#75715e\"\u003e// LogFatalf is used to define the fatal error handler function. In unit tests, this is used to\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// mock out fatal errors so we can test for them.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eLogFatalf\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e\n\n\u003cspan style=\"color:#75715e\"\u003e// Error extracts the if err != nil check. If the given error is not nil it will call\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// the defined fatal error handler function.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eError\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Error occurred:\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\t}\n}\n\n\u003cspan style=\"color:#75715e\"\u003e// Fatal is a wrapper for LogFatalf function. It\u0026#39;s used to throw a Fatal in case it needs to.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\t\u003cspan style=\"color:#a6e22e\"\u003eLogFatalf\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBasic logic to take care of errors in Furnace. Last time I changed this file was\u0026hellip; a year ago. Yeah, I think it\u0026rsquo;s doing fine.\u003c/p\u003e\n\u003ch1 id=\"conclusion\"\u003eConclusion\u003c/h1\u003e\n\u003cp\u003eAnd that\u0026rsquo;s it. Hopefully this is an interesting metric to use to define what packages may need refactoring, or need to be repurposed because they are too rigid. If a packages is stable, aka. hard to change but must undergo changes frequently, it may be time to refactor and introduce a mediator or a liaison package. If a package is unstable and has a lot of bugs, we might want to refactor it and inverse it\u0026rsquo;s dependencies. This is called the Dependency Inversion Principle, DIP. Which is also described in the same book. However it\u0026rsquo;s not always bad if a package is unstable. Maybe it contains code which needs to change frequently. It\u0026rsquo;s a database schema code. Or an algorithm which requires constant tweaking. And that is fine. Just make sure it\u0026rsquo;s covered well enough.\u003c/p\u003e\n\u003cp\u003eThe principles that these metrics are based on are: \u003ca href=\"http://wiki.c2.com/?StableAbstractionsPrinciple\"\u003eSAP\u003c/a\u003e and \u003ca href=\"https://www.smartics.eu/confluence/display/ADOC/Stable+Dependencies+Principle\"\u003eSDP\u003c/a\u003e. Stable Abstraction Principle and Stable Dependencies Principle. These are also described in the same book, Clean Architecture. A highly recommend it. Applying these principles could help maintain the project\u0026rsquo;s stability and it\u0026rsquo;s dependencies.\u003c/p\u003e\n\u003cp\u003eThank you for reading,\nGergely.\u003c/p\u003e\n"
        },
        {
            "title": "Living with a new Parser for a year",
            "date_published": "2019-04-12T08:01:00+01:00",
            "date_modified": "2019-04-12T08:01:00+01:00",
            "id": "https://skarlso.github.io/2019/04/12/living-with-a-parser/",
            "url": "https://skarlso.github.io/2019/04/12/living-with-a-parser/",
            "authors": [
                {
                  "name": "hannibal"
                }
            ],
            "content_html": "\u003cp\u003eHi folks!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/parser/hi.jpg\" alt=\"hi\"\u003e\u003c/p\u003e\n\u003cp\u003eToday’s post is a retrospective. I would like to gather some thoughts about living with the new parser that I wrote for \u003ca href=\"https://github.com/joshbuddy/jsonpath/\"\u003eJsonPath\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAfter a little over a year, some interesting problems surfaced that I thought I’d share for people who also would like to endeavor on this path. Let’s begin.\u003c/p\u003e\n\u003ch1 id=\"previously\"\u003ePreviously\u003c/h1\u003e\n\u003cp\u003eAbout, two years ago, I took over managing / fixing / improving this ruby gem: \u003ca href=\"https://github.com/joshbuddy/jsonpath\"\u003eJson Parser\u003c/a\u003e. It\u0026rsquo;s a json parser in ruby. Amongst other problems, it used \u003ccode\u003eeval\u003c/code\u003e in the background to evaluate expressions. It was a security risk to use this gem to its full extent. Something had to be done about that.\u003c/p\u003e\n\u003cp\u003eI proceeded to write a semi-language parser which replaced eval that can be found here: \u003ca href=\"https://github.com/joshbuddy/jsonpath/blob/master/lib/jsonpath/parser.rb\"\u003eParser\u003c/a\u003e. The basic intention was to replace the bare minimum of the eval behavior, and so, it was lacking some serious logic. That got improved as time went by.\u003c/p\u003e\n\u003cp\u003eThis is a one year retrospective on living with a self-written parser. Enjoy some of the quirks I faced so you don\u0026rsquo;t have to.\u003c/p\u003e\n\u003ch1 id=\"ast\"\u003eAST\u003c/h1\u003e\n\u003cp\u003e\u003cimg src=\"/img/parser/ast.jpg\" alt=\"ast\"\u003e\u003c/p\u003e\n\u003cp\u003eAST is short for \u003ca href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\"\u003eAbstract Syntax Tree\u003c/a\u003e. It’s a data structure that is ideal for representing and parsing language syntax. All major lexers use some kind of AST in the background like this old Ruby language parser gem: \u003ca href=\"https://github.com/whitequark/parser\"\u003eWhitequark Parser\u003c/a\u003e. This parser is used by projects like Rubocop and line coverage reports. It\u0026rsquo;s usage is not trivial right out of the box. But as you move along you get a firm grasp of true potential.\u003c/p\u003e\n\u003cp\u003eI decided to not use that parser a year ago mainly because I thought it’s too much for what I’m trying to accomplish. Maybe I was right, maybe not. I tried to play with Parser recently but it’s none trivial nature and lack of documentation makes it cumbersome to use.\u003c/p\u003e\n\u003ch1 id=\"the-first-problems\"\u003eThe first problems\u003c/h1\u003e\n\u003cp\u003e\u003cimg src=\"/img/parser/infinity.jpg\" alt=\"infinity\"\u003e\u003c/p\u003e\n\u003cp\u003eWhat was then the first trouble that arose after I replaced eval? The parser back then was dumbed down a lot. The bug I faced was a simple infinite loop. The parser works like a lexer. It identifies tokens of certain type and tries to parse them into variables. This lexing had an error.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelsif\u003c/span\u003e t \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e scanner\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003escan(\u003cspan style=\"color:#e6db74\"\u003e/(\\s+)?\u0026#39;?(\\w+)?[.,]?(\\w+)?\u0026#39;?(\\s+)?/\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e# @TODO: At this point I should trim somewhere...\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelsif\u003c/span\u003e t \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e scanner\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003escan(\u003cspan style=\"color:#e6db74\"\u003e/(\\s+)?\u0026#39;?.*\u0026#39;?(\\s+)?/\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIt was caught by this Json Path:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$.acceptNewTasks.[?(@.taskEndpoint == \u0026quot;mps/awesome\u0026quot;)].lastTaskPollTime\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe culprit was the \u003ccode\u003e/\u003c/code\u003e character. The tokenizer wasn’t prepared…\u003c/p\u003e\n\u003cp\u003eEval would have no problem but the parser is using strict regex-s. This is where an AST would have had more luck.\u003c/p\u003e\n\u003ch1 id=\"numbers\"\u003eNumbers\u003c/h1\u003e\n\u003cp\u003e\u003cimg src=\"/img/parser/twins1.jpg\" alt=\"twins1\"\u003e\u003c/p\u003e\n\u003cp\u003eThe second problem was the fact that the parser is using strings. Who would have thought that the string \u003ccode\u003e2.0\u003c/code\u003e in fact does not equal to string \u003ccode\u003e2\u003c/code\u003e? In Ruby the simplest way of making sure a variable is a Number is by casting the variable to Number or Float. In case it’s not a Number we rescue and move on.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003eel \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Float(el) \u003cspan style=\"color:#66d9ef\"\u003erescue\u003c/span\u003e el\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIncidentally this also solved the problem where the json path contained a number but since everything is a string this, also did not equal: \u003ccode\u003e'1' == 1\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSince first the string needed to be a Number.\u003c/p\u003e\n\u003ch1 id=\"supporting-regexes\"\u003eSupporting regexes\u003c/h1\u003e\n\u003cp\u003e\u003cimg src=\"/img/parser/bouncer1.jpg\" alt=\"bouncer1\"\u003e\u003c/p\u003e\n\u003cp\u003eNext came supported operators. The parser only supported the basic operators: \u003ccode\u003e\u0026lt;\u0026gt;=\u003c/code\u003e. It was missing \u003ccode\u003e=~\u003c/code\u003e from this. Which meant people who would use regexes to filter JSON would no longer be able to do so. This was only a tiny modification actually:\u003c/p\u003e\n\u003cp\u003eFirst, the operator filter needed to be aware\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eelsif\u003c/span\u003e t \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e scanner\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003escan(\u003cspan style=\"color:#e6db74\"\u003e/(\\s+)?[\u0026lt;\u0026gt;=][=\u0026lt;\u0026gt;]?(\\s+)?/\u003c/span\u003e)\n\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eelsif\u003c/span\u003e t \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e scanner\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003escan(\u003cspan style=\"color:#e6db74\"\u003e/(\\s+)?[\u0026lt;\u0026gt;=][=~]?(\\s+)?/\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWith that done, we just \u003ccode\u003e.to_regexp\u003c/code\u003e it with the power of ruby and \u003ccode\u003esend\u003c/code\u003e would automatically pick it up. And of course test coverage.\u003c/p\u003e\n\u003ch1 id=\"regression\"\u003eRegression\u003c/h1\u003e\n\u003cp\u003eOnce the parser was introduced I knew that it would create problems, since eval did many things that the parser could not handle. And they started to arrive slowly. One-by-one.\u003c/p\u003e\n\u003ch2 id=\"booleans\"\u003eBooleans\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"/img/parser/twins2.jpg\" alt=\"twins2\"\u003e\u003c/p\u003e\n\u003cp\u003eAka, the story of \u003ccode\u003etrue == 'true'\u003c/code\u003e\u0026hellip; Inherently working with strings here makes it difficult to detect when the type boolean is meant or a string which happens to say \u003ccode\u003etrue\u003c/code\u003e. This one was easy to solve as well in the end:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003eoperand \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e t \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;true\u0026#39;\u003c/span\u003e\n            \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n        \u003cspan style=\"color:#66d9ef\"\u003eelsif\u003c/span\u003e t \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;false\u0026#39;\u003c/span\u003e\n            \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n        \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n            operator\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eto_s\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrip \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;=~\u0026#39;\u003c/span\u003e ? t\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eto_regexp : t\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egsub(\u003cspan style=\"color:#e6db74\"\u003e%r{^\u0026#39;|\u0026#39;$}\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrip \u003cspan style=\"color:#75715e\"\u003e# We also handle regexp here.\u003c/span\u003e\n        \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIgnoring the regex part, this was all it needed.\u003c/p\u003e\n\u003ch2 id=\"syntax\"\u003eSyntax\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"/img/parser/bouncer3.jpg\" alt=\"bouncer3\"\u003e\u003c/p\u003e\n\u003cp\u003eSome smaller tid-bits here and there also started to crop up. Things that eval did not mind at all, but my poor Parser couldn\u0026rsquo;t handle. The regex started out tightly tied. This meant that certain characters weren\u0026rsquo;t properly detected. Characters like the underscore, or \u003ccode\u003e@\u003c/code\u003e or \u003ccode\u003e/\u003c/code\u003e\u0026hellip; All these weren\u0026rsquo;t picked up by my tight regexp. I had to widen it a bit using .* at certain places.\u003c/p\u003e\n\u003ch2 id=\"number-formatting\"\u003eNumber formatting\u003c/h2\u003e\n\u003cp\u003eFormatting and comparing numbers gave me a lot of headache. I had to detect whether I’m dealing with a number or a string parsed as a number or a number but that was converted into string or a string that happened to be a number. Geez…\u003c/p\u003e\n\u003cp\u003eI ended up making it simple like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003eel \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Float(el) \u003cspan style=\"color:#66d9ef\"\u003erescue\u003c/span\u003e el\noperand \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Float(operand) \u003cspan style=\"color:#66d9ef\"\u003erescue\u003c/span\u003e operand\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBasically everything is a number. Doesn’t matter where it came from, what it was in the past… It’s a number if it can be converted. This, of course, also means that a test like this one fails:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etest_number_match\u003c/span\u003e\n    json \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\n      \u003cspan style=\"color:#e6db74\"\u003echannels\u003c/span\u003e:\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e\n        {\n          \u003cspan style=\"color:#e6db74\"\u003eelem\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\n        },\n        {\n          \u003cspan style=\"color:#e6db74\"\u003eelem\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e\n        }\n      \u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n    }\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eto_json\n\n    assert_equal \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e{ \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;elem\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e }\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eJsonPath\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eon(json, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;$..channels[?(@.elem == 1)]\u0026#34;\u003c/span\u003e)\n  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBoth will match… Even though you’d expect it only to match one. Luckily though… this is exactly how \u003ca href=\"http://jsonpath.com/\"\u003ehttp://jsonpath.com/\u003c/a\u003e works as well. An AST would detect that it’s a number type… But since I’m parsing strings here, that would be almost impossible a feat to accomplish in a nice manner.\u003c/p\u003e\n\u003ch2 id=\"groups\"\u003eGroups\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"/img/parser/bouncer2.jpg\" alt=\"bouncer2\"\u003e\u003c/p\u003e\n\u003cp\u003eAnd finally, the biggest one… Groups in conditions. A query like this one for example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$..book[?((@['author'] == 'Evelyn Waugh' || @['author'] == 'Herman Melville' \u0026amp;\u0026amp; (@['price'] == 33 || @['price'] == 9))]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSomething like this was never parsed correctly. Since the parser didn’t understand grouping and order of evaluation. Let’s break it down. How do we get from a monstrous like that one above to something that can be handled? We take it one group at a time.\u003c/p\u003e\n\u003ch3 id=\"parentheses\"\u003eParentheses\u003c/h3\u003e\n\u003cp\u003eAs a first step, we make sure that the parentheses match. It’s possible that someone didn’t pay attention and left out a closing parentheses. Now, there are a couple of way of doing that in Ruby, but I went for the most plain blatant one.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echeck_parenthesis_count\u003c/span\u003e(exp)\n      \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eunless\u003c/span\u003e exp\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003einclude?(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;(\u0026#34;\u003c/span\u003e)\n      depth \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n      exp\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003echars\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eeach \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003ec\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\n        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e c \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;(\u0026#39;\u003c/span\u003e\n          depth \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n        \u003cspan style=\"color:#66d9ef\"\u003eelsif\u003c/span\u003e c \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;)\u0026#39;\u003c/span\u003e\n          depth \u003cspan style=\"color:#f92672\"\u003e-=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n        \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n      \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n      depth \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n    \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA basic depth counter. We do this first, to avoid parsing an invalid query.\u003c/p\u003e\n\u003ch3 id=\"breaking-it-down\"\u003eBreaking it down\u003c/h3\u003e\n\u003cp\u003eNext we break down this complex thing into a query that makes more sense to the parser. To do that, we take each group and extract the operation in them and replace it with the value they provide. Meaning a query like the one above essentially should look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e((false || false) \u0026amp;\u0026amp; (false || true))\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNeat. This is handled by this code segment: \u003ca href=\"https://github.com/joshbuddy/jsonpath/blob/b2525b8e8c596ddf1c8b40982529300b5a98132b/lib/jsonpath/parser.rb#L112\"\u003eParser\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe parsing function is called over and over again until there are no parentheses left in the expression. Aka, a single true or false or number remains.\u003c/p\u003e\n\u003cp\u003eNow, who can spot an issue with that? The function \u003ccode\u003ebool_or_exp\u003c/code\u003e is there to return a float or a boolean value. If it returns a float, we still \u0026amp;\u0026amp;= -it together with the result\u0026hellip; Thus, if there is a query like this one for example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$..book[?(@.length-5 \u0026amp;\u0026amp; @.type == 'asdf')]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis would fail horribly. Which means, asking for a specific index in a json in a grouped expression is not supported at the moment.\u003c/p\u003e\n\u003ch3 id=\"return-value\"\u003eReturn Value\u003c/h3\u003e\n\u003cp\u003eThe parser doesn’t just return a bool value and call it a day. It also returns indexes like you read above. Indexes in cases when there is a query that returns the location of an item in the node and not if the node contains something or matches some data. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$..book[(@.length-5)]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eReturns the length-5-th book.\u003c/p\u003e\n\u003ch1 id=\"outstanding-issues\"\u003eOutstanding issues\u003c/h1\u003e\n\u003cp\u003eRight now there are two outstanding issues. The one mentioned above, where you can’t nest indexes and true/false notations. And the other is a submitted issue in which it’s described that it’s not possible to use something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$.phoneNumbers[?(@[0].type == 'home')]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhich basically boils down to the fact that Jsonpath can’t handle nested lists like these:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e{\n  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;phoneNumbers\u0026#34;\u003c/span\u003e: [\n    [{\n      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;type\u0026#34;\u003c/span\u003e  : \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;iPhone\u0026#34;\u003c/span\u003e,\n      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;number\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0123-4567-8888\u0026#34;\u003c/span\u003e\n    }],\n    [{\n      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;type\u0026#34;\u003c/span\u003e  : \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;home\u0026#34;\u003c/span\u003e,\n      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;number\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0123-4567-8910\u0026#34;\u003c/span\u003e\n    }]\n  ]\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat isn’t actually the problem of the parser, but Jsonpath itself.\u003c/p\u003e\n\u003ch1 id=\"conclusion\"\u003eConclusion\u003c/h1\u003e\n\u003cp\u003eLike a good marriage, living with a Parser is a lot of compromise and ironing out edges and working on making it better for both parties involved. I have no doubt that there are more bugs in this code, but I\u0026rsquo;m trying to keep it concise and clear to read as much as possible.\u003c/p\u003e\n\u003cp\u003eI hope this was as fun to read as it was to write.\u003c/p\u003e\n\u003cp\u003eThank you for reading,\u003c/p\u003e\n\u003cp\u003eGergely.\u003c/p\u003e\n"
        },
        {
            "title": "Deploy a Hugo Blog Github Actions",
            "date_published": "2019-03-19T22:01:00+01:00",
            "date_modified": "2019-03-19T22:01:00+01:00",
            "id": "https://skarlso.github.io/2019/03/19/deploy-hugo-blog-github-actions/",
            "url": "https://skarlso.github.io/2019/03/19/deploy-hugo-blog-github-actions/",
            "authors": [
                {
                  "name": "hannibal"
                }
            ],
            "content_html": "\u003ch1 id=\"intro\"\u003eIntro\u003c/h1\u003e\n\u003cp\u003eHi folks.\u003c/p\u003e\n\u003cp\u003eToday I thought I show you how you can use \u003ca href=\"https://github.com/features/actions\"\u003eGithub Actions\u003c/a\u003e to deploy a hugo based blog like this one.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s dive in.\u003c/p\u003e\n\u003ch1 id=\"actions\"\u003eActions\u003c/h1\u003e\n\u003cp\u003eWhat are actions? If you read the above linked document they are basically steps performed in containers based on some events that happened with your repository. Events can be such as pushing, creating a PR or creating/closing an issue etc.\u003c/p\u003e\n\u003cp\u003eWe need an even on a push.\u003c/p\u003e\n\u003cp\u003eActions is in beta right now so much of the documentation has some gaps but they are fairly okay. I recommend reading through this one carefully: \u003ca href=\"https://developer.github.com/actions/\"\u003eDeveloper Guide\u003c/a\u003e. This describes for example accessing the environment. That is important because we will need to access the generated content from one action in the next action.\u003c/p\u003e\n\u003ch1 id=\"dockerfile\"\u003eDockerfile\u003c/h1\u003e\n\u003cp\u003eEach action requires a Dockerfile which will be used to create a container to run this particular action in. The Dockerfile uses LABELS to mark a container. It is recommended to create an ENTRYPOINT in the Dockerfile that can work with CMDs passed in from the action.\u003c/p\u003e\n\u003cp\u003eFor example my pusher container has the ability to push into any repository thanks to using arguments for the entrypoint.sh script.\u003c/p\u003e\n\u003cp\u003eWe\u0026rsquo;ll see that later on.\u003c/p\u003e\n\u003ch1 id=\"blog-actions\"\u003eBlog actions\u003c/h1\u003e\n\u003cp\u003eLet\u0026rsquo;s look at the two actions in detail which we\u0026rsquo;ll be using.\u003c/p\u003e\n\u003ch2 id=\"builder\"\u003eBuilder\u003c/h2\u003e\n\u003cp\u003eFirst, we need to build the blog. This is accomplished pretty much the same as I wrote earlier in the travis blog part but with a little extra information.\u003c/p\u003e\n\u003cp\u003eThis is the Dockerfile:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-Dockerfile\" data-lang=\"Dockerfile\"\u003e\u003cspan style=\"color:#66d9ef\"\u003eFROM\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e golang:latest\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eLABEL\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hugo Builder\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eLABEL\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;maintainer\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Gergely Brautigam \u0026lt;gergely@gergelybrautigam.com\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eLABEL\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0.1.0\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eLABEL\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;com.github.actions.name\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Go Builder\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eLABEL\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;com.github.actions.description\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Build a hugo blog\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eLABEL\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;com.github.actions.icon\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;package\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eLABEL\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;com.github.actions.color\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;#E0EBF5\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  apt-get update \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  apt-get install -y ca-certificates openssl git \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  update-ca-certificates \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  rm -rf /var/lib/apt\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e go get github.com/gohugoio/hugo\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eCOPY\u003c/span\u003e entrypoint.sh /entrypoint.sh\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eENTRYPOINT\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/entrypoint.sh\u0026#34;\u003c/span\u003e]\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ePretty simple. The entrypoint script looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#75715e\"\u003e#!/bin/bash\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\nset -e\nset -x\nset -o pipefail\n\n\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[[\u003c/span\u003e -z \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$GITHUB_WORKSPACE\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e]]\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003ethen\u003c/span\u003e\n  echo \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Set the GITHUB_WORKSPACE env variable.\u0026#34;\u003c/span\u003e\n  exit \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003cspan style=\"color:#66d9ef\"\u003efi\u003c/span\u003e\n\n\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[[\u003c/span\u003e -z \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$GITHUB_REPOSITORY\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e]]\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003ethen\u003c/span\u003e\n  echo \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Set the GITHUB_REPOSITORY env variable.\u0026#34;\u003c/span\u003e\n  exit \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003cspan style=\"color:#66d9ef\"\u003efi\u003c/span\u003e\n\nroot_path\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$GITHUB_WORKSPACE\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\necho \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Root path is: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eroot_path\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\nblog_path\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$GITHUB_WORKSPACE\u003cspan style=\"color:#e6db74\"\u003e/.blog\u0026#34;\u003c/span\u003e\necho \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Blog path is: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eblog_path\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\nmkdir -p \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$blog_path\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\nmkdir -p \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$root_path\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\ncd \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$root_path\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\necho \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Preparing to build blog\u0026#34;\u003c/span\u003e\nhugo --theme hermit\necho \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Building is done. Copying over generated files\u0026#34;\u003c/span\u003e\ncp -R public/* \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$blog_path\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e/\necho \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Copy is done.\u0026#34;\u003c/span\u003e\n\nexit \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe interesting parts here are \u003ccode\u003eGITHUB_WORKSPACE\u003c/code\u003e and \u003ccode\u003eGITHUB_REPOSITORY\u003c/code\u003e. The workspace is where the repository is located at.\u003c/p\u003e\n\u003cp\u003eThis is the place where we will copy our built blog files. Since this is a mount basically on the local build machine the next action which comes along will see the folder \u003ccode\u003e.blog\u003c/code\u003e. This is how we pass artifacts between actions.\u003c/p\u003e\n\u003cp\u003eThis action can be found here: \u003ca href=\"https://github.com/Skarlso/blog-builder\"\u003eHugo Blog Builder Action\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"publisher\"\u003ePublisher\u003c/h2\u003e\n\u003cp\u003eOnce the building finishes successfully we can push it to the new location.\u003c/p\u003e\n\u003cp\u003eDockerfile is similar to the one above in every regard. Except for the name and that it doesn\u0026rsquo;t need Hugo and the command\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-Dockerfile\" data-lang=\"Dockerfile\"\u003e\u003cspan style=\"color:#66d9ef\"\u003eFROM\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e golang:latest\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eLABEL\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hugo Pusher\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eLABEL\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;maintainer\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Gergely Brautigam \u0026lt;gergely@gergelybrautigam.com\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eLABEL\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0.1.0\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eLABEL\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;com.github.actions.name\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Go Pusher\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eLABEL\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;com.github.actions.description\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Push a hugo blog\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eLABEL\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;com.github.actions.icon\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;package\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eLABEL\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;com.github.actions.color\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;#E0EBF5\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  apt-get update \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  apt-get install -y ca-certificates openssl git \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  update-ca-certificates \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  rm -rf /var/lib/apt\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eCOPY\u003c/span\u003e entrypoint.sh /entrypoint.sh\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eENTRYPOINT\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/entrypoint.sh\u0026#34;\u003c/span\u003e]\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eCMD\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Skarlso/skarlso.github.io.git\u0026#34;\u003c/span\u003e]\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhy do we require the CMD? Let\u0026rsquo;s take a look at the script.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#75715e\"\u003e#!/bin/bash\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\nset -e\nset -x\n\n\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[[\u003c/span\u003e -z \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$GITHUB_WORKSPACE\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e]]\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003ethen\u003c/span\u003e\n  echo \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Set the GITHUB_WORKSPACE env variable.\u0026#34;\u003c/span\u003e\n  exit \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003cspan style=\"color:#66d9ef\"\u003efi\u003c/span\u003e\n\n\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[[\u003c/span\u003e -z \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$GITHUB_REPOSITORY\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e]]\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003ethen\u003c/span\u003e\n  echo \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Set the GITHUB_REPOSITORY env variable.\u0026#34;\u003c/span\u003e\n  exit \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003cspan style=\"color:#66d9ef\"\u003efi\u003c/span\u003e\n\nsetup_git\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n  repo\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e$1\n  git config --global user.email \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bot@github.com\u0026#34;\u003c/span\u003e\n  git config --global user.name \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Github Actions\u0026#34;\u003c/span\u003e\n  git init\n  echo \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Starting to clone blog repository\u0026#34;\u003c/span\u003e\n  git remote add origin https://\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003ePUSH_TOKEN\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e@github.com/\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003erepo\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u0026gt; /dev/null 2\u0026gt;\u0026amp;\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n  git pull origin master\n  echo \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Cloning is done\u0026#34;\u003c/span\u003e\n  ls -l\n\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\ncommit_website_files\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n  git add .\n  git commit -am \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Github Action Build \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eGITHUB_SHA\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\nupload_files\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n  git push --quiet --set-upstream origin master\n\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\necho \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Beginning publishing workflow\u0026#34;\u003c/span\u003e\nrepo\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e$1\n\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e -z \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003erepo\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003ethen\u003c/span\u003e\n    echo \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Repo must be defined.\u0026#34;\u003c/span\u003e\n    exit \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003cspan style=\"color:#66d9ef\"\u003efi\u003c/span\u003e\necho \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Using repository \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003erepo\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e to push to\u0026#34;\u003c/span\u003e\nmkdir /opt/publish \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e cd /opt/publish\nblog_path\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$GITHUB_WORKSPACE\u003cspan style=\"color:#e6db74\"\u003e/.blog\u0026#34;\u003c/span\u003e\necho \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Blog is located at: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eblog_path\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\nls -l \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eblog_path\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\necho \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Setting up git\u0026#34;\u003c/span\u003e\nsetup_git \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003erepo\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\ncp -R \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eblog_path\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e/* .\necho \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Copied over generated content from blog path. Committing.\u0026#34;\u003c/span\u003e\ncommit_website_files\necho \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Committed. Pushing.\u0026#34;\u003c/span\u003e\nupload_files\necho \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;All done.\u0026#34;\u003c/span\u003e\nexit \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow this is a lot more involved. I\u0026rsquo;m leaving as many echos in here as possible for esae of debugging.\u003c/p\u003e\n\u003cp\u003eThe interesting part in here is the \u003ccode\u003erepo=$1\u003c/code\u003e. This is why we need CMD specified. But this is what makes this Action a bit more flexible too. It can push anywhere it has access to.\u003c/p\u003e\n\u003cp\u003eThis action can be found here: \u003ca href=\"https://github.com/Skarlso/blog-publisher\"\u003eHugo Blog Publisher Action\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"the-workflow-file\"\u003eThe Workflow file\u003c/h2\u003e\n\u003cp\u003eHow does this all fit together? You have to create a workflow file which looks something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eworkflow \u0026quot;Publish Blog\u0026quot; {\n  on = \u0026quot;push\u0026quot;\n  resolves = [\u0026quot;blog-publisher\u0026quot;]\n}\n\naction \u0026quot;blog-builder\u0026quot; {\n  uses = \u0026quot;skarlso/blog-builder@master\u0026quot;\n  secrets = [\u0026quot;GITHUB_TOKEN\u0026quot;]\n}\n\naction \u0026quot;blog-publisher\u0026quot; {\n  uses = \u0026quot;skarlso/blog-publisher@master\u0026quot;\n  needs = [\u0026quot;blog-builder\u0026quot;]\n  secrets = [\u0026quot;GITHUB_TOKEN\u0026quot;, \u0026quot;PUSH_TOKEN\u0026quot;]\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis is located in your repositroy under \u003ccode\u003e.github/main.workdflow\u003c/code\u003e. Notice the secrets. GITHUB_TOKEN is created for you by Github. This is a basic token which lets you access the github API. But it can\u0026rsquo;t be used for pushing code. Thus, we need another token. This can be defined under your repository / settings / secrets. Once you have a token, add a new secret called PUSH_TOKEN and\u0026hellip; done.\u003c/p\u003e\n\u003cp\u003eEverything should be ready to go.\u003c/p\u003e\n\u003ch2 id=\"location-of-the-actions\"\u003eLocation of the actions\u003c/h2\u003e\n\u003cp\u003eNow, I read the doc and should have been possible to have these actions in the repositroy itself. However, I faced some problems with that setup so I ended up having actions in their respectice repository. That\u0026rsquo;s why \u003ccode\u003euses\u003c/code\u003e is set up to be \u003ccode\u003eskarlso/\u0026lt;action-name\u0026gt;@branch\u003c/code\u003e.\u003c/p\u003e\n\u003ch1 id=\"conclusion\"\u003eConclusion\u003c/h1\u003e\n\u003cp\u003eOn a push now the blog is built and published. If a step fails it won\u0026rsquo;t be published. It\u0026rsquo;s actually a lot faster than my travis build was.\u003c/p\u003e\n\u003cp\u003eThank you for reading,\u003c/p\u003e\n\u003cp\u003eGergely.\u003c/p\u003e\n"
        },
        {
            "title": "Cronohub: Archive from anywhere to anywhere",
            "date_published": "2019-03-19T21:01:00+01:00",
            "date_modified": "2019-03-19T21:01:00+01:00",
            "id": "https://skarlso.github.io/2019/03/19/cronohub/",
            "url": "https://skarlso.github.io/2019/03/19/cronohub/",
            "authors": [
                {
                  "name": "hannibal"
                }
            ],
            "content_html": "\u003ch1 id=\"intro\"\u003eIntro\u003c/h1\u003e\n\u003cp\u003eGood afternoon folks.\u003c/p\u003e\n\u003cp\u003eToday, I would like to talk a little bit about \u003ca href=\"https://github.com/cronohub/cronohub\"\u003eCronohub\u003c/a\u003e. It\u0026rsquo;s a Python application\nwhich you can use to archive anything from anywhere to anywhere. It uses plugins to archive this versatility.\u003c/p\u003e\n\u003cp\u003eLet me show you some of its features.\u003c/p\u003e\n\u003ch1 id=\"main-usage\"\u003eMain Usage\u003c/h1\u003e\n\u003cp\u003eCronohub is a python application which uses the power and ease of usage of Python to give the user a\nframework. This Framework can then be used to implement concrete functionality in the form of plugins.\u003c/p\u003e\n\u003cp\u003eThe plugins provide the essential working logic for Cronohub. Cronohub itself, is basically a Hub for these\nplugins.\u003c/p\u003e\n\u003cp\u003eWhat can Cronohub be actually used for? Say, you have a gazillion Github repositories you would like to archive to a\nS3 bucket. Or SCP to another server. Or to ownCloud\u0026hellip; You would use cronohub as such:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e❯ cronohub -s {github,gitlab} -t {s3,owncloud,scp}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt is this simple. What\u0026rsquo;s going on here then? \u003ccode\u003e-s\u003c/code\u003e tells Cronohub to use a source plugin called \u003ccode\u003egithub\u003c/code\u003e where as\n\u003ccode\u003e-t\u003c/code\u003e tells it to use a target plugin called \u003ccode\u003es3\u003c/code\u003e or \u003ccode\u003eowncloud\u003c/code\u003e or an \u003ccode\u003escp\u003c/code\u003e operation.\u003c/p\u003e\n\u003ch2 id=\"under-the-hood\"\u003eUnder the hood\u003c/h2\u003e\n\u003cp\u003eWhat happens then is that the source plugin downloads the repositories for a given user. The plugins themselves can\nrequire certain configuration options to be provided. Like environment properties. To get the Help of a plugin you\ncan simply ask Cronohub like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e❯ cronohub help --source-help github\nHelp (github source plugin):\n    - Environment Property:\n        CRONO_GITHUB_TOKEN: a token with access to listing repositories for a given user.\n    - File that filters the list of repositories to archive. If not present, all will be archived.\n        ~/.config/cronohub/configurations/github/.repo_list\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt will display help information for that plugin.\u003c/p\u003e\n\u003cp\u003eOnce the source plugin finished downloading the requested repositories to a given location it will pass on a list\nof files to the target plugin for archiving. The target plugin takes this list of files and will add a timestamp\nto the file and upload them with the requested operation.\u003c/p\u003e\n\u003cp\u003eThe plugins take care of parallelization or threading if this makes it faster. For example the github plugin downloads\nat most 5 archive files concurrently.\u003c/p\u003e\n\u003ch1 id=\"plugins\"\u003ePlugins\u003c/h1\u003e\n\u003cp\u003eWhat are plugins then? The plugins adhere to an ABC. An Abstract Base Class. This class defines the abilities and\nstructure of a plugin. It looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e abc \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e ABCMeta, abstractmethod\n\n\n\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCronohubSourcePlugin\u003c/span\u003e(metaclass\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eABCMeta):\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e    This is the basic definition of a CronoHub plugin.\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#a6e22e\"\u003e@abstractmethod\u003c/span\u003e\n    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003evalidate\u003c/span\u003e(self):\n        \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\n\n    \u003cspan style=\"color:#a6e22e\"\u003e@abstractmethod\u003c/span\u003e\n    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehelp\u003c/span\u003e(self):\n        \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\n\n    \u003cspan style=\"color:#a6e22e\"\u003e@abstractmethod\u003c/span\u003e\n    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efetch\u003c/span\u003e(self):\n        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        Returns a tuple (str, str) where there first parameter is the name of the\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        archive and the second is the location as a full path. Exp:\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        (\u0026#34;my-project-12345\u0026#34;, \u0026#34;/home/user/projects/my-project/my-project.tar.gz\u0026#34;)\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eValidation will be called before the plugin can be used. This method can be used to validate settings\nfor a plugin, for example if a token is provided for the github plugin. Or a bucket name is defined for the\nS3 plugin etc.\u003c/p\u003e\n\u003cp\u003eHelp will display information just like we saw above and fetch will actually perform the downloading or\nfetching of files to later archive.\u003c/p\u003e\n\u003cp\u003ePlugins are located in this repository: \u003ca href=\"https://github.com/cronohub/plugins\"\u003eCronohub plugins\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eHopefully, at some point I\u0026rsquo;ll finish \u003ca href=\"https://cronohub.org\"\u003ehttps://cronohub.org\u003c/a\u003e and then there will be an online repository for these.\u003c/p\u003e\n\u003cp\u003ePlugins are located at \u003ccode\u003e~/.config/cronohub/plugins/{target,source}\u003c/code\u003e. Each plugin must take care of its own\ndependencies via a \u003ccode\u003erequirements.txt\u003c/code\u003e file.\u003c/p\u003e\n\u003cp\u003eRight now, there are only a few plugins available.\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:center\"\u003eSource Plugins\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003eTarget Plugins\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003eGithub\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003eS3\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003eGitlab\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003eSCP\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003eLocal\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003eownCloud\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003eNo-Op\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eMore are hopefully on the way. Local is simply gathering a list of files from a folder. And no-op is what it says. It\u0026rsquo;s good for debugging a source plugin as it doesn\u0026rsquo;t do anything else but displays the files it got from the source plugin.\u003c/p\u003e\n\u003ch1 id=\"installation\"\u003eInstallation\u003c/h1\u003e\n\u003cp\u003eInstalling is dead trivial. Simply run:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003epip install cronohub\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u0026hellip; and that\u0026rsquo;s it. It\u0026rsquo;s published on pypi.org.\u003c/p\u003e\n\u003ch1 id=\"contribution\"\u003eContribution\u003c/h1\u003e\n\u003cp\u003ePlugin contributions are heartily welcomed!\u003c/p\u003e\n\u003cp\u003eAnd that\u0026rsquo;s it.\u003c/p\u003e\n\u003cp\u003eThank you for reading,\u003c/p\u003e\n\u003cp\u003eGergely.\u003c/p\u003e\n"
        },
        {
            "title": "Deploy a Hugo Blog with Travis on Git Push",
            "date_published": "2019-03-18T21:01:00+01:00",
            "date_modified": "2019-03-18T21:01:00+01:00",
            "id": "https://skarlso.github.io/2019/03/18/hugo-blog-with-travis-deployment/",
            "url": "https://skarlso.github.io/2019/03/18/hugo-blog-with-travis-deployment/",
            "authors": [
                {
                  "name": "hannibal"
                }
            ],
            "content_html": "\u003ch1 id=\"intro\"\u003eIntro\u003c/h1\u003e\n\u003cp\u003eHi folks.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;ve been using the Hugo build for wercker for a long time now. Recent problems occurred though where I did not understand at first\nwhat the problem was. It was quite difficult to debug since I did not have too much insight on the wercker build itself. Turned\nout that I deleted the GITHUB token that the process was using. However, the error message was telling me that a function failed\nto load some other function. Which was totally unrelated.\u003c/p\u003e\n\u003cp\u003eThus, I thought that I\u0026rsquo;m going to shift away from this outside medium to a different one that I\u0026rsquo;m already familiar with and have\ngreater control over.\u003c/p\u003e\n\u003cp\u003eHence, Travis. Incidentally, since I will no longer be dependend on a third party component (which was the image wercker was\nusing), I\u0026rsquo;ll be able to switch away from this build platform easily. For example, to CircleCI.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m using github pages, but without the whole convoluted submodule init, different branch stuff. I find that that simply adds unnecessary complexity to the whole thing. I\u0026rsquo;m keeping the source and the website in a different repository.\u003c/p\u003e\n\u003cp\u003eThe steps are simple:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGet the source\u003c/li\u003e\n\u003cli\u003eGenerate the content locally using \u003ccode\u003ehugo\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSetup Git\u003c/li\u003e\n\u003cli\u003eGet the source for the generated web site\u003c/li\u003e\n\u003cli\u003eCopy in the newly generated code\u003c/li\u003e\n\u003cli\u003ePush the code up to git\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSounds simple\u0026hellip; In fact it\u0026rsquo;s so simple, it\u0026rsquo;s three files.\u003c/p\u003e\n\u003ch3 id=\"travis\"\u003eTravis\u003c/h3\u003e\n\u003cp\u003eThe travis modification is such:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003elanguage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ego\u003c/span\u003e\n\n\u003cspan style=\"color:#f92672\"\u003einstall\u003c/span\u003e:\n    - \u003cspan style=\"color:#ae81ff\"\u003ego get github.com/gohugoio/hugo\u003c/span\u003e\n    - \u003cspan style=\"color:#ae81ff\"\u003esudo apt-get install -y git\u003c/span\u003e\n\n\u003cspan style=\"color:#f92672\"\u003escript\u003c/span\u003e:\n    - \u003cspan style=\"color:#ae81ff\"\u003e.travis/build.sh\u003c/span\u003e\n\n\u003cspan style=\"color:#f92672\"\u003eafter_success\u003c/span\u003e:\n    - \u003cspan style=\"color:#ae81ff\"\u003ecd ${TRAVIS_BUILD_DIR} \u0026amp;\u0026amp; .travis/push.sh\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eEasy, it\u0026rsquo;s a standard Go based travis file. There are two things here which stand out. The \u003ccode\u003escripts\u003c/code\u003e section and the\n\u003ccode\u003eafter_success\u003c/code\u003e section. Why \u003ccode\u003eafter_success\u003c/code\u003e? Because if we made a mistake, we don\u0026rsquo;t want to destroy the website. Thus we only\npush in case build.sh was successful.\u003c/p\u003e\n\u003ch3 id=\"building\"\u003eBuilding\u003c/h3\u003e\n\u003cp\u003eIn this light, building the blog is simple. In fact the whole script is such:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#75715e\"\u003e#!/bin/sh\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\nset -e\nset -x\n\nmkdir /opt/blog\ngit clone --recurse-submodules https://github.com/Skarlso/blogsource.git /opt/app\necho Build started on \u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003edate\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\ncd /opt/app\nhugo --theme hermit\ncp -R public/* /opt/blog\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFor clone, \u003ccode\u003e--recurse-submodules\u003c/code\u003e is required because the theme is a submodule. Once this script runs successfull,\nwe can push the new version of the site.\u003c/p\u003e\n\u003ch3 id=\"pushing\"\u003ePushing\u003c/h3\u003e\n\u003cp\u003ePushing is a bit more involved. There are four steps involved in this process.\u003c/p\u003e\n\u003ch4 id=\"setup-git\"\u003eSetup git\u003c/h4\u003e\n\u003cp\u003eFirst, we set up git to use some specific name so we know where the push came from.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esetup_git\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n  git config --global user.email \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;travis@travis-ci.org\u0026#34;\u003c/span\u003e\n  git config --global user.name \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Travis CI\u0026#34;\u003c/span\u003e\n  git init\n  git remote add origin https://\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eGITHUB_TOKEN\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e@github.com/Skarlso/skarlso.github.io.git \u0026gt; /dev/null 2\u0026gt;\u0026amp;\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n  git pull origin master\n\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eGithub token is a secret environment property. We also pull the blog source in this step.\u003c/p\u003e\n\u003ch4 id=\"copy\"\u003eCopy\u003c/h4\u003e\n\u003cp\u003eThen copy everything from the built site\u0026rsquo;s public folder (which was we already copied to /opt/blog) to this folder.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecp -R /opt/blog/* .\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"commit-the-changes\"\u003eCommit the changes\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecommit_website_files\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n  git add .\n  git commit -am \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Travis build: \u003c/span\u003e$TRAVIS_BUILD_NUMBER\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis is extracted for clarity.\u003c/p\u003e\n\u003ch4 id=\"pushing-the-changes\"\u003ePushing the changes\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eupload_files\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n  git push --quiet --set-upstream origin master\n\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe script in it\u0026rsquo;s entirety here: \u003ca href=\"#push-sh\"\u003epush.sh\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eAnd that\u0026rsquo;s it. The site is changed and updated. This can be executed in any environment and the only requirement is hugo and git being present. If you still prefer the branch method of Github pages, this is easily altered to checkout the right branch and push the changes from there.\u003c/p\u003e\n\u003cp\u003eNo dependency on anything. Just how I like my build processes.\u003c/p\u003e\n\u003cp\u003eThanks for reading!\u003c/p\u003e\n\u003cp\u003eGergely.\u003c/p\u003e\n\u003ch1 id=\"appendix\"\u003eAppendix\u003c/h1\u003e\n\u003ch2 id=\"pushsh\"\u003epush.sh\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#75715e\"\u003e#!/bin/sh\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\nset -e\nset -x\n\nsetup_git\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n  git config --global user.email \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;travis@travis-ci.org\u0026#34;\u003c/span\u003e\n  git config --global user.name \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Travis CI\u0026#34;\u003c/span\u003e\n  git init\n  git remote add origin https://\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eGITHUB_TOKEN\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e@github.com/Skarlso/skarlso.github.io.git \u0026gt; /dev/null 2\u0026gt;\u0026amp;\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n  git pull origin master\n\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\ncommit_website_files\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n  git add .\n  git commit -am \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Travis build: \u003c/span\u003e$TRAVIS_BUILD_NUMBER\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\nupload_files\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n  git push --quiet --set-upstream origin master\n\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\nmkdir /opt/publish \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e cd /opt/publish\nsetup_git\ncp -R /opt/blog/* .\ncommit_website_files\nupload_files\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e"
        },
        {
            "title": "Go SSH with Host Key Verification",
            "date_published": "2019-02-17T21:01:00+01:00",
            "date_modified": "2019-02-17T21:01:00+01:00",
            "id": "https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/",
            "url": "https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/",
            "authors": [
                {
                  "name": "hannibal"
                }
            ],
            "content_html": "\u003cp\u003eHi folks.\u003c/p\u003e\n\u003cp\u003eFollowing a long search and reading lots of debates and possibilities of doing SSH within Go, I was shocked to see that not a great many tools and people use SSH with host key verification. What I usually see is this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#a6e22e\"\u003eHostKeyCallback\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003essh\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eInsecureIgnoreHostKey\u003c/span\u003e()\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis is terrible. Now, I realise that doing HostKeyVerification can be tedious, but don\u0026rsquo;t fear. It\u0026rsquo;s actually easy\nnow that the Go team provided the knownhosts subpackage in their crypto SSH package located here:\n\u003ca href=\"https://godoc.org/golang.org/x/crypto/ssh/knownhosts\"\u003eKnownHosts\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis part in particular is interesting: \u003ca href=\"https://godoc.org/golang.org/x/crypto/ssh/knownhosts#New\"\u003eNew\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eUsing new with a known_hosts file a code can be written like this one to verify host keys:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bytes\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;io/ioutil\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;golang.org/x/crypto/ssh\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#a6e22e\"\u003ekh\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;golang.org/x/crypto/ssh/knownhosts\u0026#34;\u003c/span\u003e\n)\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\t\u003cspan style=\"color:#a6e22e\"\u003euser\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;user\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#a6e22e\"\u003eaddress\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;192.168.0.17\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#a6e22e\"\u003ecommand\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;uptime\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;9999\u0026#34;\u003c/span\u003e\n\n\t\u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eioutil\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eReadFile\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/Users/user/.ssh/id_rsa\u0026#34;\u003c/span\u003e)\n\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;unable to read private key: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\t}\n\n\t\u003cspan style=\"color:#75715e\"\u003e// Create the Signer for this private key.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003esigner\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003essh\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eParsePrivateKey\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e)\n\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;unable to parse private key: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\t}\n\n\t\u003cspan style=\"color:#a6e22e\"\u003ehostKeyCallback\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekh\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNew\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/Users/user/.ssh/known_hosts\u0026#34;\u003c/span\u003e)\n\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;could not create hostkeycallback function: \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\t}\n\n\t\u003cspan style=\"color:#a6e22e\"\u003econfig\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003essh\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClientConfig\u003c/span\u003e{\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eUser\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003euser\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eAuth\u003c/span\u003e: []\u003cspan style=\"color:#a6e22e\"\u003essh\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAuthMethod\u003c/span\u003e{\n\t\t\t\u003cspan style=\"color:#75715e\"\u003e// Add in password check here for moar security.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003essh\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePublicKeys\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003esigner\u003c/span\u003e),\n\t\t},\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eHostKeyCallback\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003ehostKeyCallback\u003c/span\u003e,\n\t}\n\t\u003cspan style=\"color:#75715e\"\u003e// Connect to the remote server and perform the SSH handshake.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003essh\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDial\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tcp\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eaddress\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;:\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003econfig\u003c/span\u003e)\n\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;unable to connect: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\t}\n\t\u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClose\u003c/span\u003e()\n\t\u003cspan style=\"color:#a6e22e\"\u003ess\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewSession\u003c/span\u003e()\n\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;unable to create SSH session: \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\t}\n\t\u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ess\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClose\u003c/span\u003e()\n\t\u003cspan style=\"color:#75715e\"\u003e// Creating the buffer which will hold the remotly executed command\u0026#39;s output.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estdoutBuf\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebytes\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBuffer\u003c/span\u003e\n\t\u003cspan style=\"color:#a6e22e\"\u003ess\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStdout\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estdoutBuf\u003c/span\u003e\n\t\u003cspan style=\"color:#a6e22e\"\u003ess\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRun\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecommand\u003c/span\u003e)\n\t\u003cspan style=\"color:#75715e\"\u003e// Let\u0026#39;s print out the result of command.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003estdoutBuf\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e())\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHere is the whole thing as a \u003ca href=\"https://gist.github.com/Skarlso/34321a230cf0245018288686c9e70b2d\"\u003eGist\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003ePlease try and avoid using Insecure host keys. It is easier, but can harm so much. Software like these:\n\u003ca href=\"https://mitmproxy.org/\"\u003eMan in The Middle Proxy\u003c/a\u003e thrive in an environment that doesn\u0026rsquo;t do it, or doesn\u0026rsquo;t in other ways\nmitigate this problem.\u003c/p\u003e\n\u003cp\u003eBe wise and be safe.\nThanks for reading,\nGergely.\u003c/p\u003e\n"
        },
        {
            "title": "Extensive tutorial on go-plugin.",
            "date_published": "2018-10-29T07:01:00+01:00",
            "date_modified": "2018-10-29T07:01:00+01:00",
            "id": "https://skarlso.github.io/2018/10/29/go-plugin-tutorial/",
            "url": "https://skarlso.github.io/2018/10/29/go-plugin-tutorial/",
            "authors": [
                {
                  "name": "hannibal"
                }
            ],
            "content_html": "\u003ch1 id=\"intro\"\u003eIntro\u003c/h1\u003e\n\u003cp\u003eIf you don\u0026rsquo;t know what go-plugin is, don\u0026rsquo;t worry, here is a small introduction on the subject matter:\u003c/p\u003e\n\u003cp\u003eBack in the old days when Go didn\u0026rsquo;t have the \u003ccode\u003eplugin\u003c/code\u003e package, HashiCorp was desperately looking for a way to use plugins.\u003c/p\u003e\n\u003cp\u003eIn the old days, Lua plus Go wasn\u0026rsquo;t really a thing yet, and to be honest, nobody wants to write Lua ( joking!).\u003c/p\u003e\n\u003cp\u003eAnd thus Mitchell had this brilliant idea of using RPC over the local network to serve a local interface as something that could easily be implemented with any other language that supported RPC. This sounds convoluted but has many benefits! For example, your code will never crash because of a plugin and the ability to use any language to implement a plugin. Not just Go.\u003c/p\u003e\n\u003cp\u003eIt has been a battle-hardened solution for years now and is being actively used by Terraform, Vault, Consule, and especially Packer. All using go-plugin in order to provide a much needed flexibility. Writing a plugin is easy. Or so they say.\u003c/p\u003e\n\u003cp\u003eIt can get complicated quickly, for example, if you are trying to use GRPC. You can lose sight of what exactly you\u0026rsquo;ll need to implement, where and why; or utilizing various languages or using go-plugins in your own project and extending your CLI with pluggable components.\u003c/p\u003e\n\u003cp\u003eThese are all nothing to sneeze at. Suddenly you\u0026rsquo;ll find yourself with hundreds of lines of code pasted from various examples and yet nothing works. Or worse, it DOES work but you have no idea how. Then you find yourself needing to extend it with a new capability, or you find an elusive bug and can\u0026rsquo;t trace its origins.\u003c/p\u003e\n\u003cp\u003eFear not. I\u0026rsquo;ll try to demystify things and draw a clear picture about how it works and how the pieces fit together.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s start at the beginning.\u003c/p\u003e\n\u003ch1 id=\"basic-plugin\"\u003eBasic plugin\u003c/h1\u003e\n\u003cp\u003eLet\u0026rsquo;s start by writing a simple Go GRPC plugin. In fact, we can go through the basic example in the go-plugin’s repository which can be quite confusing when first starting out. We\u0026rsquo;ll go step-by-step, and the switch to GRPC will be much easier!\u003c/p\u003e\n\u003ch2 id=\"basic-concepts\"\u003eBasic concepts\u003c/h2\u003e\n\u003ch3 id=\"server\"\u003eServer\u003c/h3\u003e\n\u003cp\u003eIn the case of plugins, the Server is the one serving the plugin\u0026rsquo;s implementation. This means the server will have to provide the implementation to an interface.\u003c/p\u003e\n\u003ch3 id=\"client\"\u003eClient\u003c/h3\u003e\n\u003cp\u003eThe Client calls the server in order to execute the desired behaviour. The underlying logic will connect to the server running on localhost on a random higher port, call the wanted function’s implementation and wait for a response. Once the response is received provide that back to the calling Client.\u003c/p\u003e\n\u003ch2 id=\"implementation\"\u003eImplementation\u003c/h2\u003e\n\u003ch3 id=\"the-main-function\"\u003eThe main function\u003c/h3\u003e\n\u003ch4 id=\"logger\"\u003eLogger\u003c/h4\u003e\n\u003cp\u003eThe plugins defined here use stdout in a special way. If you aren\u0026rsquo;t writing a Go based plugin, you will have to do that yourself by outputting something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1|1|tcp|127.0.0.1:1234|grpc\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe\u0026rsquo;ll come back to this later. Suffice to say the framework will pick this up and will connect to the plugin based on the output. In order to get some output back, we must define a special logger:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Create an hclog.Logger\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003elogger\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehclog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNew\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehclog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eLoggerOptions\u003c/span\u003e{\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eName\u003c/span\u003e:   \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;plugin\u0026#34;\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eOutput\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStdout\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eLevel\u003c/span\u003e:  \u003cspan style=\"color:#a6e22e\"\u003ehclog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDebug\u003c/span\u003e,\n\t})\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"newclient\"\u003eNewClient\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\t\u003cspan style=\"color:#75715e\"\u003e// We\u0026#39;re a host! Start by launching the plugin process.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eplugin\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewClient\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eplugin\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClientConfig\u003c/span\u003e{\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eHandshakeConfig\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003ehandshakeConfig\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#a6e22e\"\u003ePlugins\u003c/span\u003e:         \u003cspan style=\"color:#a6e22e\"\u003epluginMap\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eCmd\u003c/span\u003e:             \u003cspan style=\"color:#a6e22e\"\u003eexec\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCommand\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;./plugin/greeter\u0026#34;\u003c/span\u003e),\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eLogger\u003c/span\u003e:          \u003cspan style=\"color:#a6e22e\"\u003elogger\u003c/span\u003e,\n\t})\n\t\u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eKill\u003c/span\u003e()\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhat is happening here? Let\u0026rsquo;s see one by one:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eHandshakeConfig: handshakeConfig,\u003c/code\u003e: This part is the handshake configuration of the plugin. It has a nice comment as well.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#75715e\"\u003e// handshakeConfigs are used to just do a basic handshake between\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// a plugin and host. If the handshake fails, a user friendly error is shown.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// This prevents users from executing bad plugins or executing a plugin\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// directory. It is a UX feature, not a security feature.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehandshakeConfig\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eplugin\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHandshakeConfig\u003c/span\u003e{\n\t\u003cspan style=\"color:#a6e22e\"\u003eProtocolVersion\u003c/span\u003e:  \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\n\t\u003cspan style=\"color:#a6e22e\"\u003eMagicCookieKey\u003c/span\u003e:   \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;BASIC_PLUGIN\u0026#34;\u003c/span\u003e,\n\t\u003cspan style=\"color:#a6e22e\"\u003eMagicCookieValue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e,\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003eProtocolVersion\u003c/code\u003e here is used in order to maintain compatibility with your current plugin versions. It\u0026rsquo;s basically like an API version. If you increase this, you will have two options. Don\u0026rsquo;t accept lower protocol versions nor switch to the version number and use a different client implementation for a lower version than for a higher version. This way you will maintain backwards compatibility.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eMagicCookieKey\u003c/code\u003e and \u003ccode\u003eMagicCookieValue\u003c/code\u003e are used for a basic handshake which the comment is talking about. You have to set this \u003cstrong\u003eONCE\u003c/strong\u003e for your application. Never change it again, for if you do, your plugins will no longer work. For uniqueness sake, I suggest using UUID.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eCmd\u003c/code\u003e is one of the most important parts about a plugin. Basically how plugins work is that they boil down to a compiled binary which is executed and starts an RPC server. This is where you will have to define the binary which will be executed and does all this. Since this is all happening locally, (please keep in mind that Go-plugins only support localhost, and for a good reason), these binaries will most likely sit next to your application\u0026rsquo;s binary or in a pre-configured global location. Something like:  \u003ccode\u003e~/.config/my-app/plugins\u003c/code\u003e. This is individual for each plugin of course. The plugins can be autoloaded via a discovery function given a path and a glob.\u003c/p\u003e\n\u003cp\u003eAnd last but not least is the \u003ccode\u003ePlugins\u003c/code\u003e map. This map is used in order to identify a plugin called \u003ccode\u003eDispense\u003c/code\u003e. This map is globally available and must stay consistent in order for all the plugins to work:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#75715e\"\u003e// pluginMap is the map of plugins we can dispense.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epluginMap\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#a6e22e\"\u003eplugin\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePluglin\u003c/span\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;greeter\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eexample\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGreeterPlugin\u003c/span\u003e{},\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou can see that the key is the name of the plugin and the value is the plugin.\u003c/p\u003e\n\u003cp\u003eWe then proceed to create an RPC client:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Connect via RPC\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003erpcClient\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClient\u003c/span\u003e()\n\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\t}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNothing fancy about this one\u0026hellip;\u003c/p\u003e\n\u003cp\u003eNow comes the interesting part:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Request the plugin\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eraw\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erpcClient\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDispense\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;greeter\u0026#34;\u003c/span\u003e)\n\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\t}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhat\u0026rsquo;s happening here? Dispense will look in the above created map and search for the plugin. If it cannot find it, it will throw an error at us. If it does find it, it will cast this plugin to an RPC or a GRPC type plugin. Then proceed to create an RPC or a GRPC client out of it.\u003c/p\u003e\n\u003cp\u003eThere is no call yet. This is just creating a client and parsing it to a respective representation.\u003c/p\u003e\n\u003cp\u003eNow comes the magic:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\t\u003cspan style=\"color:#75715e\"\u003e// We should have a Greeter now! This feels like a normal interface\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#75715e\"\u003e// implementation but is in fact over an RPC connection.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003egreeter\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eraw\u003c/span\u003e.(\u003cspan style=\"color:#a6e22e\"\u003eexample\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGreeter\u003c/span\u003e)\n\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003egreeter\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGreet\u003c/span\u003e())\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHere we are type asserting our raw GRPC client into our own plugin type. This is so we can call the respective function on the plugin! Once that\u0026rsquo;s done we will have a {client,struct,implementation} that can be called like a simple function.\u003c/p\u003e\n\u003cp\u003eThe implementation right now comes from greeter_impl.go, but that will change once protoc makes an appearance.\u003c/p\u003e\n\u003cp\u003eBehind the scenes, go-plugin will do a bunch of hat tricks with multiplexing TCP connections as well as a remote procedure call to our plugin. Our plugin then will run the function, generate some kind of output, and will then send that back for the waiting client.\u003c/p\u003e\n\u003cp\u003eThe client will then proceed to parse the message into a given response type and will then return it back to the client’s callee.\u003c/p\u003e\n\u003cp\u003eThis concludes main.go for now.\u003c/p\u003e\n\u003ch3 id=\"the-interface\"\u003eThe Interface\u003c/h3\u003e\n\u003cp\u003eNow let’s investigate the Interface. The interface is used to provide calling details. This interface will be what defines our plugins’ capabilities. How does our \u003ccode\u003eGreeter\u003c/code\u003e look like?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#75715e\"\u003e// Greeter is the interface that we\u0026#39;re exposing as a plugin.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGreeter\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\t\u003cspan style=\"color:#a6e22e\"\u003eGreet\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis is pretty simple. It defines a function which will return a string typed value.\u003c/p\u003e\n\u003cp\u003eNow, we will need a couple of things for this to work. Firstly we need something which defines the RPC workings. go-plugin is working with \u003ccode\u003enet/http\u003c/code\u003e inside. It also uses something called Yamux for connection multiplexing, but we needn’t worry about this detail.\u003c/p\u003e\n\u003cp\u003eImplementing the RPC details looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#75715e\"\u003e// Here is an implementation that talks over RPC\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGreeterRPC\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n    \u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003erpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClient\u003c/span\u003e\n}\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGreeterRPC\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eGreet\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e {\n\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresp\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\t\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCall\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Plugin.Greet\u0026#34;\u003c/span\u003e, new(\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}), \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eresp\u003c/span\u003e)\n\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\t\t\u003cspan style=\"color:#75715e\"\u003e// You usually want your interfaces to return errors. If they don\u0026#39;t,\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e// there isn\u0026#39;t much other choice here.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\tpanic(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\t}\n\n\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresp\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHere the GreeterRPC struct is an RPC specific implementation that will handle communication over RPC. This is Client in this setup.\u003c/p\u003e\n\u003cp\u003eIn case of gRPC, this would look something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#75715e\"\u003e// GRPCClient is an implementation of KV that talks over RPC.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGreeterGRPC\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e{ \u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eproto\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGreeterClient\u003c/span\u003e }\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGreeterGRPC\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eGreet\u003c/span\u003e() (\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGreet\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBackground\u003c/span\u003e(), \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eproto\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEmpty\u003c/span\u003e{})\n\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhat is happening here? What\u0026rsquo;s Proto and what is GreeterClient? GRPC uses Google\u0026rsquo;s protoc library to serialize and unserialize data. \u003ccode\u003eproto.GreeterClient\u003c/code\u003e is generated Go code by protoc. This code is a skeleton for which implementation detail will be replaced on run time. Well, the actual result will be used and not replaced as such.\u003c/p\u003e\n\u003cp\u003eBack to our previous example. The RPC client calls a specific Plugin function called Greet for which the implementation will be provided by a Server that will be streamed back over the RPC protocol.\u003c/p\u003e\n\u003cp\u003eThe server is pretty easy to follow:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#75715e\"\u003e// Here is the RPC server that GreeterRPC talks to, conforming to\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// the requirements of net/rpc\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGreeterRPCServer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\t\u003cspan style=\"color:#75715e\"\u003e// This is the real implementation\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eImpl\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGreeter\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eImpl is the concrete implementation that will be called in the Server\u0026rsquo;s implementation of the Greet plugin. Now we must define Greet on the RPCServer in order for it to be able to call the remote code. This looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGreeterRPCServer\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eGreet\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}, \u003cspan style=\"color:#a6e22e\"\u003eresp\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e {\n\t\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eresp\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eImpl\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGreet\u003c/span\u003e()\n\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis is all still boilerplate for the RPC works. Now comes plugin. For this, the comment is actually quite good too:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#75715e\"\u003e// This is the implementation of plugin.Plugin so we can serve/consume this\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e//\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// This has two methods: Server must return an RPC server for this plugin\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// type. We construct a GreeterRPCServer for this.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e//\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// Client must return an implementation of our interface that communicates\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// over an RPC client. We return GreeterRPC for this.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e//\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// Ignore MuxBroker. That is used to create more multiplexed streams on our\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// plugin connection and is a more advanced use case.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGreeterPlugin\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\t\u003cspan style=\"color:#75715e\"\u003e// Impl Injection\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eImpl\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGreeter\u003c/span\u003e\n}\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGreeterPlugin\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eServer\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eplugin\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMuxBroker\u003c/span\u003e) (\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGreeterRPCServer\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eImpl\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eImpl\u003c/span\u003e}, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n}\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eGreeterPlugin\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eClient\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eplugin\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMuxBroker\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003erpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClient\u003c/span\u003e) (\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGreeterRPC\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e}, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhat does this mean? So, remember: \u003ccode\u003eGreeterRPCServer\u003c/code\u003e is the one calling the actual implementation while Client is receiving the result of that call. The \u003ccode\u003eGreeterPlugin\u003c/code\u003e has the \u003ccode\u003eGreeter\u003c/code\u003e interface embedded just like the \u003ccode\u003eRPCServer\u003c/code\u003e. We will use the \u003ccode\u003eGreeterPlugin\u003c/code\u003e as a struct in the plugin map. This is the plugin that we will actually use.\u003c/p\u003e\n\u003cp\u003eThis is all still common stuff. These things will need to be visible for both. The plugin\u0026rsquo;s implementation will use the interface to see what it needs to implement. The Client will use it see what to call and what API is available. Like, \u003ccode\u003eGreet\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eHow does the implementation look like?\u003c/p\u003e\n\u003ch3 id=\"the-implementation\"\u003eThe Implementation\u003c/h3\u003e\n\u003cp\u003eIn a completely separate package, but which still has access to the interface definition, this plugin could be something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#75715e\"\u003e// Here is a real implementation of Greeter\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGreeterHello\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\t\u003cspan style=\"color:#a6e22e\"\u003elogger\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehclog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eLogger\u003c/span\u003e\n}\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGreeterHello\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eGreet\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e {\n\t\u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elogger\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDebug\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;message from GreeterHello.Greet\u0026#34;\u003c/span\u003e)\n\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello!\u0026#34;\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe create a struct and then add the function to it which is defined by the plugin\u0026rsquo;s interface. This interface, since it\u0026rsquo;s required by both parties, could well sit in a common package outside of both programs. Something like a SDK. Both code could import it and use it as a common dependency. This way we have separated the interface from the plugin \u003cstrong\u003eand\u003c/strong\u003e the calling client.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003emain\u003c/code\u003e function could look something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#a6e22e\"\u003elogger\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehclog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNew\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehclog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eLoggerOptions\u003c/span\u003e{\n    \u003cspan style=\"color:#a6e22e\"\u003eLevel\u003c/span\u003e:      \u003cspan style=\"color:#a6e22e\"\u003ehclog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTrace\u003c/span\u003e,\n    \u003cspan style=\"color:#a6e22e\"\u003eOutput\u003c/span\u003e:     \u003cspan style=\"color:#a6e22e\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStderr\u003c/span\u003e,\n    \u003cspan style=\"color:#a6e22e\"\u003eJSONFormat\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e,\n})\n\n\u003cspan style=\"color:#a6e22e\"\u003egreeter\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGreeterHello\u003c/span\u003e{\n    \u003cspan style=\"color:#a6e22e\"\u003elogger\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003elogger\u003c/span\u003e,\n}\n\u003cspan style=\"color:#75715e\"\u003e// pluginMap is the map of plugins we can dispense.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epluginMap\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#a6e22e\"\u003eplugin\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePlugin\u003c/span\u003e{\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;greeter\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eexample\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGreeterPlugin\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eImpl\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003egreeter\u003c/span\u003e},\n}\n\n\u003cspan style=\"color:#a6e22e\"\u003elogger\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDebug\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;message from plugin\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e)\n\n\u003cspan style=\"color:#a6e22e\"\u003eplugin\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eServe\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eplugin\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eServeConfig\u003c/span\u003e{\n    \u003cspan style=\"color:#a6e22e\"\u003eHandshakeConfig\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003ehandshakeConfig\u003c/span\u003e,\n    \u003cspan style=\"color:#a6e22e\"\u003ePlugins\u003c/span\u003e:         \u003cspan style=\"color:#a6e22e\"\u003epluginMap\u003c/span\u003e,\n})\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNotice two things that we need. One is the \u003ccode\u003ehandshakeConfig\u003c/code\u003e. You can either define it here, with the same cookie details as you defined in the client code, or you can extract the handshake information into the SDK. This is up to you.\u003c/p\u003e\n\u003cp\u003eThen the next interesting thing is the \u003ccode\u003eplugin.Serve\u003c/code\u003e method. This is where the magic happens. The plugins open up a RPC communication socket and over a hijacked \u003ccode\u003estdout\u003c/code\u003e, broadcasts its availability to the calling Client in this format:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eCORE-PROTOCOL-VERSION | APP-PROTOCOL-VERSION | NETWORK-TYPE | NETWORK-ADDR | PROTOCOL\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFor Go plugins, you don\u0026rsquo;t have to concern yourself with this. \u003ccode\u003ego-plugin\u003c/code\u003e takes care of all this for you. For non-Go versions, we must take this into account. And before calling serve, we need to output this information to \u003ccode\u003estdout\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eFor example, a Python plugin must deal with this himself. Like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"color:#75715e\"\u003e# Output information\u003c/span\u003e\n\u003cspan style=\"color:#66d9ef\"\u003eprint\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1|1|tcp|127.0.0.1:1234|grpc\u0026#34;\u003c/span\u003e)\nsys\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estdout\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eflush()\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFor GRPC plugins, it\u0026rsquo;s also mandatory to implement a HealthChecker.\u003c/p\u003e\n\u003cp\u003eHow would all this look like with GRPC?\u003c/p\u003e\n\u003cp\u003eIt gets slightly more complicated but not too much. We need to use \u003ccode\u003eprotoc\u003c/code\u003e to create a protocol description for our implementation, and then we will call that. Let\u0026rsquo;s look at this now by converting the basic greeter example into GRPC.\u003c/p\u003e\n\u003ch1 id=\"grpc-basic-plugin\"\u003eGRPC Basic plugin\u003c/h1\u003e\n\u003cp\u003eThe example that\u0026rsquo;s under GRPC is quite elaborate and perhaps you don\u0026rsquo;t need the Python part. I will focus on the basic RPC example into a GRPC example. That should not be a problem.\u003c/p\u003e\n\u003ch2 id=\"the-api\"\u003eThe API\u003c/h2\u003e\n\u003cp\u003eFirst and foremost, you will need to define an API to implement with \u003ccode\u003eprotoc\u003c/code\u003e. For our basic example, the protoc file could look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-proto3\" data-lang=\"proto3\"\u003esyntax = \u0026quot;proto3\u0026quot;;\npackage proto;\n\nmessage GreetResponse {\n    string message = 1;\n}\n\nmessage Empty {}\n\nservice GreeterService {\n    rpc Greet(Empty) returns (GreetResponse);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe syntax is quite simple and readable. What this defines is a message, which is a response, that will contain a \u003ccode\u003emessage\u003c/code\u003e with the type \u003ccode\u003estring\u003c/code\u003e. The \u003ccode\u003eservice\u003c/code\u003e defines a service which has a method called \u003ccode\u003eGreet\u003c/code\u003e. The service definition is basically an interface for which we will be providing the concrete implementation through the plugin.\u003c/p\u003e\n\u003cp\u003eTo read more about protoc, visit this page: \u003ca href=\"https://developers.google.com/protocol-buffers/\"\u003eGoogle Protocol Buffer\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"generate-the-code\"\u003eGenerate the code\u003c/h2\u003e\n\u003cp\u003eNow, with the protoc definition in hand, we need to generate the stubs that the local client implementation can call. That client call will then, through the remote procedure call, call the right function on the server which will have the concrete implementation at the ready. Run it and return the result in the specified format. Because the stub needs to be available by both parties, (the client AND the server), this needs to live in a shared location.\u003c/p\u003e\n\u003cp\u003eWhy? Because the client is calling the stub and the server is implementing the stub. Both need it in order to know what to call/implement.\u003c/p\u003e\n\u003cp\u003eTo generate the code, run this command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eprotoc -I proto/ proto/greeter.proto --go_out\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eplugins\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003egrpc:proto\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI encourage you to read the generated code. Much will make little sense at first. It will have a bunch of structs and defined things that the GRPC package will use in order to server the function. The interesting bits and pieces are:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGreetResponse\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eGetMessage\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e {\n\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e\n\t}\n\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhich will get use the message inside the response.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGreeterServiceClient\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\t\u003cspan style=\"color:#a6e22e\"\u003eGreet\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContext\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ein\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eEmpty\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eopts\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCallOption\u003c/span\u003e) (\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGreetResponse\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis is our ServiceClient interface which defines the Greet function’s topology.\u003c/p\u003e\n\u003cp\u003eAnd lastly, this guy:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eRegisterGreeterServiceServer\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eServer\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003esrv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGreeterServiceServer\u003c/span\u003e) {\n\t\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRegisterService\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003e_GreeterService_serviceDesc\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003esrv\u003c/span\u003e)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhich we will need in order to register our implementation for the server. We can ignore the rest.\u003c/p\u003e\n\u003ch2 id=\"the-interface-1\"\u003eThe interface\u003c/h2\u003e\n\u003cp\u003eMuch like the RPC, we need to define an interface for the client and server to use. This must be in a shared place as both the server and the client need to know about it. You could put this into an SDK and your peers could just get the SDK and implement some function for define and done. The interface definition in the GRPC land could look something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#75715e\"\u003e// Greeter is the interface that we\u0026#39;re exposing as a plugin.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGreeter\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\t\u003cspan style=\"color:#a6e22e\"\u003eGreet\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n}\n\n\u003cspan style=\"color:#75715e\"\u003e// This is the implementation of plugin.GRPCPlugin so we can serve/consume this.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGreeterGRPCPlugin\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\t\u003cspan style=\"color:#75715e\"\u003e// GRPCPlugin must still implement the Plugin interface\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eplugin\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePlugin\u003c/span\u003e\n\t\u003cspan style=\"color:#75715e\"\u003e// Concrete implementation, written in Go. This is only used for plugins\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#75715e\"\u003e// that are written in Go.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eImpl\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGreeter\u003c/span\u003e\n}\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGreeterGRPCPlugin\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eGRPCServer\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ebroker\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eplugin\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGRPCBroker\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eServer\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e {\n\t\u003cspan style=\"color:#a6e22e\"\u003eproto\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRegisterGreeterServer\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGRPCServer\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eImpl\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eImpl\u003c/span\u003e})\n\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n}\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGreeterGRPCPlugin\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eGRPCClient\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContext\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ebroker\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eplugin\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGRPCBroker\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClientConn\u003c/span\u003e) (\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGRPCClient\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003eproto\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewGreeterClient\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e)}, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWith this we have the Plugin\u0026rsquo;s implementation for hashicorp what needed to be done. The plugin will call the underlying implementation and serve/consume the plugin. We can now write the GRPC part of it.\u003c/p\u003e\n\u003cp\u003ePlease note that \u003ccode\u003eproto\u003c/code\u003e is a shared library too where the protocol stubs reside. That needs to be somewhere on the path or in a separate SDK of some sort, but it must be visible.\u003c/p\u003e\n\u003ch2 id=\"writing-the-grpc-client\"\u003eWriting the GRPC Client\u003c/h2\u003e\n\u003cp\u003eFirstly we define the grpc client struct:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#75715e\"\u003e// GRPCClient is an implementation of Greeter that talks over RPC.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGRPCClient\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e{ \u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eproto\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGreeterClient\u003c/span\u003e }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen we define how the client will call the remote function:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGRPCClient\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eGreet\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e {\n\t\u003cspan style=\"color:#a6e22e\"\u003eret\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGreet\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBackground\u003c/span\u003e(), \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eproto\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEmpty\u003c/span\u003e{})\n\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eret\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis will take the \u003ccode\u003eclient\u003c/code\u003e in the \u003ccode\u003eGRPCClient\u003c/code\u003e and will call the method on it. Once that\u0026rsquo;s done we will return to the result \u003ccode\u003eMessage\u003c/code\u003e property which will be \u003ccode\u003eHello!\u003c/code\u003e. \u003ccode\u003eproto.Empty\u003c/code\u003e is an empty struct; we use this if there is no parameter for a defined method or no return value. We can\u0026rsquo;t just leave it blank. \u003ccode\u003eprotoc\u003c/code\u003e needs to be told explicitly that there is no parameter or return value.\u003c/p\u003e\n\u003ch2 id=\"writing-the-grpc-server\"\u003eWriting the GRPC Server\u003c/h2\u003e\n\u003cp\u003eThe server implementation will also be similar. We call \u003ccode\u003eImpl\u003c/code\u003e here which will have our concrete plugin implementation.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#75715e\"\u003e// Here is the gRPC server that GRPCClient talks to.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGRPCServer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\t\u003cspan style=\"color:#75715e\"\u003e// This is the real implementation\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eImpl\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGreeter\u003c/span\u003e\n}\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGRPCServer\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eGreet\u003c/span\u003e(\n\t\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContext\u003c/span\u003e,\n\t\u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eproto\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEmpty\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eproto\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGreeterResponse\u003c/span\u003e {\n\t\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eImpl\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGreet\u003c/span\u003e()\n\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eproto\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGreeterResponse\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd we will use the \u003ccode\u003eprotoc\u003c/code\u003e defined message response. \u003ccode\u003ev\u003c/code\u003e will have the response from \u003ccode\u003eGreet\u003c/code\u003e which will be \u003ccode\u003eHello!\u003c/code\u003e provided by the concrete plugin\u0026rsquo;s implementation. We then transform that into a protoc type by setting the \u003ccode\u003eMessage\u003c/code\u003e property on the \u003ccode\u003eGreeterResponse\u003c/code\u003e struct provided by the automatically generated protoc stub code.\u003c/p\u003e\n\u003cp\u003eEasy, right?\u003c/p\u003e\n\u003ch2 id=\"writing-the-plugin-itself\"\u003eWriting the plugin itself\u003c/h2\u003e\n\u003cp\u003eThe whole thing looks much like the RPC implementation with just a few small modifications and changes. This can sit completely outside of everything, or can even be provided by a third party implementor.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#75715e\"\u003e// Here is a real implementation of KV that writes to a local file with\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// the key name and the contents are the value of the key.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGreeter\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e{}\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eGreeter\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eGreet\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e {\n\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello!\u0026#34;\u003c/span\u003e\n}\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\t\u003cspan style=\"color:#a6e22e\"\u003eplugin\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eServe\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eplugin\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eServeConfig\u003c/span\u003e{\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eHandshakeConfig\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003eshared\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHandshake\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#a6e22e\"\u003ePlugins\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#a6e22e\"\u003eplugin\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePlugin\u003c/span\u003e{\n\t\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;greeter\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eshared\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGreeterGRPCPlugin\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eImpl\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGreeter\u003c/span\u003e{}},\n\t\t},\n\n\t\t\u003cspan style=\"color:#75715e\"\u003e// A non-nil value here enables gRPC serving for this plugin...\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eGRPCServer\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003eplugin\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDefaultGRPCServer\u003c/span\u003e,\n\t})\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"calling-it-all-in-the-main\"\u003eCalling it all in the main\u003c/h2\u003e\n\u003cp\u003eOnce all that is done, the \u003ccode\u003emain\u003c/code\u003e function looks the same as RPC\u0026rsquo;s main but with some small modifications.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\t\u003cspan style=\"color:#75715e\"\u003e// We\u0026#39;re a host. Start by launching the plugin process.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eplugin\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewClient\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eplugin\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClientConfig\u003c/span\u003e{\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eHandshakeConfig\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003eshared\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHandshake\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#a6e22e\"\u003ePlugins\u003c/span\u003e:         \u003cspan style=\"color:#a6e22e\"\u003eshared\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePluginMap\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eCmd\u003c/span\u003e:             \u003cspan style=\"color:#a6e22e\"\u003eexec\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCommand\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;./plugin/greeter\u0026#34;\u003c/span\u003e),\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eAllowedProtocols\u003c/span\u003e: []\u003cspan style=\"color:#a6e22e\"\u003eplugin\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eProtocol\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eplugin\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eProtocolGRPC\u003c/span\u003e},\n\t})\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003eNewClient\u003c/code\u003e now defines \u003ccode\u003eAllowedProtocols\u003c/code\u003e to be \u003ccode\u003eProtocolGRPC\u003c/code\u003e. The rest is the same as before calling \u003ccode\u003eDispense\u003c/code\u003e and value hinting the plugin to the correct type then calling \u003ccode\u003eGreet()\u003c/code\u003e.\u003c/p\u003e\n\u003ch1 id=\"conclusion\"\u003eConclusion\u003c/h1\u003e\n\u003cp\u003eThis is it. We made it! Now our plugin works over GRPC with a defined API by protoc. The plugin\u0026rsquo;s implementation can live where ever we want it to, but it needs some shared data. These are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe generated code by \u003ccode\u003eprotoc\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eThe defined plugin interface\u003c/li\u003e\n\u003cli\u003eThe GRPC Server and Client\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese need to be visible by both the Client and the Server. The Server here is the plugin. If you are planning on making people be able to extend your application with go-plugin, you should make these available as a separate SDK. So people won\u0026rsquo;t have to include your whole project just to implement an interface and use protoc. In fact, you could also extract the \u003ccode\u003eprotoc\u003c/code\u003e definition into a separate repository so that your SDK can also pull it in.\u003c/p\u003e\n\u003cp\u003eYou will have three repositories:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eYour application;\u003c/li\u003e\n\u003cli\u003eThe SDK providing the interface and the GRPC Server and Client implementation;\u003c/li\u003e\n\u003cli\u003eThe protoc definition file and generated skeleton ( for Go based plugins).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOther languages will have to generate their own protoc code, and includ it into the plugin; like the Python implementation example located here: \u003ca href=\"https://github.com/hashicorp/go-plugin/tree/master/examples/grpc/plugin-python\"\u003eGo-plugin Python Example\u003c/a\u003e. Also, read this documentation carefully: \u003ca href=\"https://github.com/hashicorp/go-plugin/blob/master/docs/guide-plugin-write-non-go.md\"\u003enon-go go-plugin\u003c/a\u003e. This document will also clarify what \u003ccode\u003e1|1|tcp|127.0.0.1:1234|grpc\u003c/code\u003e means and will dissipate the confusion around how plugins work.\u003c/p\u003e\n\u003cp\u003eLastly, if you would like to have an in-depth explanation about how go-plugin came to be, watch this video by Mitchell:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=SRvm3zQQc1Q\"\u003ego-plugin explanation video\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI must warn you though- it\u0026rsquo;s an hour long. But worth the watch!\u003c/p\u003e\n\u003cp\u003eThat\u0026rsquo;s it. I hope this has helped to clear the confusion around how to use go-plugin.\u003c/p\u003e\n\u003cp\u003eHappy plugging!\u003c/p\u003e\n\u003cp\u003eGergely.\u003c/p\u003e\n"
        },
        {
            "title": "Furnace with a new Plugin System",
            "date_published": "2018-09-17T07:01:00+01:00",
            "date_modified": "2018-09-17T07:01:00+01:00",
            "id": "https://skarlso.github.io/2018/09/17/furnace-plugin-update/",
            "url": "https://skarlso.github.io/2018/09/17/furnace-plugin-update/",
            "authors": [
                {
                  "name": "hannibal"
                }
            ],
            "content_html": "\u003cp\u003eHi.\u003c/p\u003e\n\u003cp\u003eA quick update, but a very important and interesting one hopefully. Furnace just got a massive boost to its plugin system.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m using \u003ca href=\"https://github.com/hashicorp/go-plugin\"\u003eHashiCorp\u0026rsquo;s Go-Plugins\u003c/a\u003e system now to handle plugins. This means one of\ntwo things that are interesting to the plugin author.\u003c/p\u003e\n\u003cp\u003eOne, plugins can be written in any language which is supported by Furnace and supports GRPC. Currently this means that\nplugins can be written in the following languages:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eGo\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePython\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRuby\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAdding new plugins is easy and I\u0026rsquo;m open for suggestions in which language to provide next if the need arrises.\u003c/p\u003e\n\u003cp\u003eTo find out more, please read the README on Furnace about plugins located here: \u003ca href=\"https://github.com/go-furnace/go-furnace/blob/master/README.md#plugins\"\u003eFurnace Plugin System\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI hope to see a bunch of nice plugins pop up here and there if please are interested in writing them. I\u0026rsquo;m listing a couple of\npossibilities like, notification after create, or resource cleanup or even preventing the stack from creating in the first place\nwith a pre-create check for permissions / resource availability / funds constraints.\u003c/p\u003e\n\u003cp\u003eHave fun writing plugins and making Furnace more powerful then ever.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m planning on providing some basic plugins that could be used out of the box. Those will probably be in Go though.\u003c/p\u003e\n\u003cp\u003eThanks,\nGergely.\u003c/p\u003e\n"
        }
        ]
}
