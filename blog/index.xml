<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/blog/</link>
    <description>Recent content in Blogs on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 03 Dec 2021 01:01:00 +0100</lastBuildDate><atom:link href="https://skarlso.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Advent Of Code - Day 3</title>
      <link>https://skarlso.github.io/2021/12/03/aoc-day3/</link>
      <pubDate>Fri, 03 Dec 2021 01:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2021/12/03/aoc-day3/</guid>
      <description><![CDATA[<h1 id="advent-of-code---day-3">Advent Of Code - Day 3</h1>
<p>Here we go for day 3!</p>
<p>This day was a tiny bit more complex. A lot of more things to read for sure! But all the more exciting!</p>
<p>Let&rsquo;s get to it!</p>
<h2 id="day-3---part-1">Day 3 - Part 1</h2>
<p>We are dealing with binary numbers. At fist glance it can be daunting, but it&rsquo;s actually not that complicated.
We have to find two numbers. <code>gamma rate</code> and <code>epsilon rate</code>. To do that, we have to parse some binary numbers
and then convert them to decimal. The two numbers can be found by looking for the most common bit at a given
position in all of the numbers and the least common one at a given position in all of the given numbers. Better
put, as we read on, find the bit that occurs most of the time and the one that occurs least of the time in all
numbers and put them together. That&rsquo;s your new number.</p>
<p>As always, let&rsquo;s write out our constraints first!</p>
<ul>
<li>we have a list of binary numbers</li>
<li>we have to go through all of them and check a certain position for all of them</li>
<li>find the most occurring number ( either 0, or 1 ) that occurs at position <code>n</code></li>
<li>append this number to a new number that is being constructed <code>result</code></li>
</ul>
<p>Okay, so&hellip; loop through the numbers, as we loop, check all of the numbers at position 0, 1, 2, 3&hellip; and check
which digit occurs most and least. Add the most one to the <code>gamma rate</code> and the least one to the <code>epsilon rate</code>.</p>
<p>This needs a bit of a brain wrap. We will loop through all the numbers, but we will also loop through all the numbers
again but check a certain position. Meanwhile, we track the number of zeros and ones we count.</p>
<p>This will result in two loops. The first loop goes as long as the numbers are. And the second goes as many times
as many numbers there are.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">    <span class="c1">// Loop as much as long the numbers are...
</span><span class="c1"></span>	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">zeros</span> <span class="o">:=</span> <span class="mi">0</span>
		<span class="nx">ones</span> <span class="o">:=</span> <span class="mi">0</span>

        <span class="c1">// loop through all the numbers and check digit location.
</span><span class="c1"></span>		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">nums</span><span class="p">);</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
            <span class="c1">// count ones and zeros
</span><span class="c1"></span>			<span class="k">if</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;0&#39;</span> <span class="p">{</span>
				<span class="nx">zeros</span><span class="o">++</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
				<span class="nx">ones</span><span class="o">++</span>
			<span class="p">}</span>
		<span class="p">}</span>

        <span class="c1">// if zeros are larger gamma is 0 epsilon is 1.
</span><span class="c1"></span>		<span class="k">if</span> <span class="nx">zeros</span> <span class="p">&gt;</span> <span class="nx">ones</span> <span class="p">{</span>
			<span class="nx">gamma</span> <span class="o">+=</span> <span class="s">&#34;0&#34;</span>
			<span class="nx">epsilon</span> <span class="o">+=</span> <span class="s">&#34;1&#34;</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">// if ones are larger, gamma is 1 epsilon is 0.
</span><span class="c1"></span>			<span class="nx">gamma</span> <span class="o">+=</span> <span class="s">&#34;1&#34;</span>
			<span class="nx">epsilon</span> <span class="o">+=</span> <span class="s">&#34;0&#34;</span>
		<span class="p">}</span>
	<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This will result in the right gamma and epsilon numbers, but we aren&rsquo;t done yet there. We have to convert
this to decimal. Lucky for us, Go provides tools for this. We simple call <code>strconv.ParseInt</code> like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">	<span class="nx">g</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">ParseInt</span><span class="p">(</span><span class="nx">gamma</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span>
	<span class="nx">e</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">ParseInt</span><span class="p">(</span><span class="nx">epsilon</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;result: &#34;</span><span class="p">,</span> <span class="nx">g</span> <span class="o">*</span> <span class="nx">e</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>And that&rsquo;s it. We have our power consumption. On to Part 2!</p>
<h2 id="day-3---part-2">Day 3 - Part 2</h2>
<p>Now that&rsquo;s a doozy! That is a LOT of text&hellip; Let&rsquo;s try breaking it down. AOC now will teach you how to read.
This is actually an important skill to acquire. A lot of times you will have to parse a lot of text and try
to figure out what the actual task is.</p>
<p>Again, we are looking for two numbers. <code>oxygen generator rating</code> and <code>CO2 scrubber rating</code>. Now, it&rsquo;s important
again, to identify certain aspects here. Like last time I talked about that there are things which you can
take for granted. Things and rules which will make it easier to find something or will define an exit criteria
for a search or a filter. Reading here, we find such an exit criteria:</p>
<blockquote>
<p>process that involves filtering out values until only one remains.</p>
</blockquote>
<p>We have to filter the numbers <strong>until only one remains</strong>. This is important. You can be sure that the result
will always be a single number out of the list of numbers. That&rsquo;s your exit criteria. You can stop once your
list is filtered to a single number.</p>
<p>The next sentence I actually find confusing.</p>
<blockquote>
<p>Before searching for either rating value, start with the full list of binary numbers from your diagnostic
report and consider just the first bit of those numbers.</p>
</blockquote>
<p>For me this implies that I would have to do something with the numbers before I start search. This is not true.
It&rsquo;s actually just outlining what you filter criteria will be&hellip; which is:</p>
<ul>
<li>start with the first bit</li>
<li>selected numbers based on a predicate (described later as <em>bit criteria</em>)</li>
<li>if you have one number left, stop</li>
<li>continue with the next bit</li>
</ul>
<p>So what are the bit criteria?</p>
<p>Each number has its own definition of criteria that it needs.</p>
<p><strong>oxygen generator rating</strong>:</p>
<ul>
<li>the most common value in a bit position</li>
<li>if equal keep the 1s</li>
</ul>
<p><strong>CO2 scrubber rating</strong>:</p>
<ul>
<li>the least common value in a bit position</li>
<li>if equal keep the 0s</li>
</ul>
<p>Then we have a nice and detailed example for both of the values. Basically, we&rsquo;ll have two loops and we duplicate
our list of numbers. Both loops will delete numbers based on the predicate until only a single number remains. All
the while going through the bit positions until it&rsquo;s done.</p>
<p>The basic algorithm looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">filter</span><span class="p">(</span><span class="nx">list</span> <span class="p">[]</span><span class="kt">string</span><span class="p">,</span> <span class="nx">pred</span> <span class="kd">func</span><span class="p">(</span><span class="nx">zeros</span><span class="p">,</span> <span class="nx">ones</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
    <span class="c1">// Start at position zero.
</span><span class="c1"></span>	<span class="nx">bitPosition</span> <span class="o">:=</span> <span class="mi">0</span>
    <span class="c1">// until there is only a single left...
</span><span class="c1"></span>	<span class="k">for</span> <span class="nb">len</span><span class="p">(</span><span class="nx">list</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span> <span class="p">{</span>
		<span class="nx">zeros</span> <span class="o">:=</span> <span class="mi">0</span>
		<span class="nx">ones</span> <span class="o">:=</span> <span class="mi">0</span>

        <span class="c1">// same as before, we count the ones and zeros
</span><span class="c1"></span>		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">o</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">list</span> <span class="p">{</span>
			<span class="k">if</span> <span class="nx">o</span><span class="p">[</span><span class="nx">bitPosition</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;0&#39;</span> <span class="p">{</span>
				<span class="nx">zeros</span><span class="o">++</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
				<span class="nx">ones</span><span class="o">++</span>
			<span class="p">}</span>
		<span class="p">}</span>

        <span class="c1">// we decide which number / position to keep
</span><span class="c1"></span>		<span class="kd">var</span> <span class="nx">bit</span> <span class="kt">byte</span>
        <span class="c1">// based on the predicate, ones and zeros, decide which number will be kept.
</span><span class="c1"></span>		<span class="k">if</span> <span class="nf">pred</span><span class="p">(</span><span class="nx">zeros</span><span class="p">,</span> <span class="nx">ones</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">bit</span> <span class="p">=</span> <span class="sc">&#39;1&#39;</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="nx">bit</span> <span class="p">=</span> <span class="sc">&#39;0&#39;</span>
		<span class="p">}</span>
        <span class="c1">// remove the numbers which are not needed
</span><span class="c1"></span>		<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">list</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
			<span class="k">if</span> <span class="nx">list</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">bitPosition</span><span class="p">]</span> <span class="o">==</span> <span class="nx">bit</span> <span class="p">{</span>
				<span class="nx">list</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">list</span><span class="p">[:</span><span class="nx">i</span><span class="p">],</span> <span class="nx">list</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span><span class="o">...</span><span class="p">)</span>
				<span class="nx">i</span><span class="o">--</span>
			<span class="p">}</span>
		<span class="p">}</span>
        <span class="c1">// check the next bit position
</span><span class="c1"></span>		<span class="nx">bitPosition</span><span class="o">++</span>
	<span class="p">}</span>
    <span class="c1">// return
</span><span class="c1"></span>	<span class="k">return</span> <span class="nx">list</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>And our predicates look like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">	<span class="nx">oxygen</span> <span class="o">:=</span> <span class="nf">filter</span><span class="p">(</span><span class="nx">oxygens</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">zeros</span><span class="p">,</span> <span class="nx">ones</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">zeros</span> <span class="p">&gt;</span> <span class="nx">ones</span>
	<span class="p">})</span>
	<span class="nx">co2</span> <span class="o">:=</span> <span class="nf">filter</span><span class="p">(</span><span class="nx">co2s</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">zeros</span><span class="p">,</span> <span class="nx">ones</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">zeros</span> <span class="p">&lt;</span> <span class="nx">ones</span> <span class="o">||</span> <span class="nx">zeros</span> <span class="o">==</span> <span class="nx">ones</span>
	<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>For oxygens, we are looking for most common values, otherwise it&rsquo;s not needed. And for co2s we
are looking for the least common values and if they equal, we want the zeros.</p>
<p>And that&rsquo;s pretty much it. Parsing and finding and understanding the problem was a bit harder this time
around, but it will get a lot more convoluted after this.</p>
<h2 id="conclusion">Conclusion</h2>
<p>We got a taste of what longer and more convoluted descriptions will look like. We got prepared for reading.
We learned a bit about <code>strconv.ParseInt</code>. Maybe it will be handy later.</p>
<p>BTW this is something that is called trivially parallel. We could easily call these in a Go routine. But it
wouldn&rsquo;t matter since our sample size is rather small. Just keep in mind to keep an eye out for these.</p>
<p>The repository for all my solutions for AOC 2021 can be found <a href="https://github.com/Skarlso/aoc2021">here</a>.</p>
<p>Thank you for reading!</p>
<p>Happy coding!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Advent Of Code - Day 2</title>
      <link>https://skarlso.github.io/2021/12/02/aoc-day2/</link>
      <pubDate>Thu, 02 Dec 2021 01:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2021/12/02/aoc-day2/</guid>
      <description><![CDATA[<h1 id="advent-of-code---day-2">Advent Of Code - Day 2</h1>
<p>Here we go for day 2!</p>
<p>These first couple of problems prepare you on how to deal with input mainly. Learn and get used to parsing lines, and
get comfortable with data structures.</p>
<h2 id="day-2---part-1">Day 2 - Part 1</h2>
<p>We continue the story of Santa and the submarine. This time, he has the task of trying to steer the thing.
The task is straightforward. You get a couple of instructions and based on a value you increase or decrease a positions.</p>
<p>We have a choice to make here. The wording says horizontal position and depth. Considering the future of these exercises
we could go with variable names <code>horizontal</code> and <code>depth</code>. But I choose <code>x</code> and <code>y</code>. Why did I do that? That sounds like
I&rsquo;m not considering the right variable names. But I&rsquo;m preparing for the inevitable 2D coordinates that will definitely
come. You might as well get comfortable dealing with them now.</p>
<p>So, what are our constraints?</p>
<p>This time, it&rsquo;s quite clear and neatly packaged:</p>
<ul>
<li>forward X increases the horizontal position by X units.</li>
<li>down X increases the depth by X units.</li>
<li>up X decreases the depth by X units.</li>
</ul>
<p>Now comes a sentence I think is there only to confuse you. It might be not, but I swear I had to take a second look at
that. The above constraints are clear and easy to follow. And then comes this sentence and makes me take spend a little
bit more time on parsing them:</p>
<blockquote>
<p>Note that since you&rsquo;re on a submarine, down and up affect your depth, and so they have the opposite result of what you might expect.</p>
</blockquote>
<p>No, they are not. According to the constraints I expect down to increase depth and up to decrease depth. It&rsquo;s clearly
written there. I believe this sentence should just be ignored.</p>
<p>Let&rsquo;s get to solving this thing. We read the rest of the thing, and get to our test input.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">forward 5
down 5
forward 8
up 3
down 8
forward 2
</code></pre></td></tr></table>
</div>
</div><p>What comes now, is trying to parse the input. In Go, <code>Scanf</code> is an option. In other languages, you might want to just
<code>Split(s, &quot; &quot;)</code> split by space. In Go I&rsquo;m using this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">		<span class="kd">var</span> <span class="p">(</span>
			<span class="nx">op</span> <span class="kt">string</span>
			<span class="nx">v</span>  <span class="kt">int</span>
		<span class="p">)</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Sscanf</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">l</span><span class="p">),</span> <span class="s">&#34;%s %d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">op</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">v</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>What&rsquo;s happening here is that <code>l</code> is a line from the above sample in a file ( reading line by line ). <code>&quot;%s %d&quot;</code> is saying
scan for strings and then scan for a number. And the <code>&amp;op, &amp;v</code> just puts the result in their respective values.</p>
<p>We have the result now in values. Let&rsquo;s implement the above three rules.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="k">switch</span> <span class="nx">op</span> <span class="p">{</span>
<span class="k">case</span> <span class="s">&#34;forward&#34;</span><span class="p">:</span>
    <span class="nx">x</span> <span class="o">+=</span> <span class="nx">v</span>
<span class="k">case</span> <span class="s">&#34;up&#34;</span><span class="p">:</span>
    <span class="nx">y</span> <span class="o">-=</span> <span class="nx">v</span>
<span class="k">case</span> <span class="s">&#34;down&#34;</span><span class="p">:</span>
    <span class="nx">y</span> <span class="o">+=</span> <span class="nx">v</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Pretty neat. Could be an <code>if</code>. Could be made tidier. Doesn&rsquo;t really matter as long as it solves the problem at hand. Competitive
scripts usually are not meant to be maintainable masterpieces.</p>
<p>It gets the job done. Then we continue by reading what the actual result should be and we see that we just have to multiple
horizontal position with depth. Which is <code>x * y</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;mult: &#34;</span><span class="p">,</span> <span class="nx">x</span><span class="o">*</span><span class="nx">y</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>This gets us the right test value and, in fact, the right value to our input as well.</p>
<p>Here, I would like to mention that you always have to deal with things like empty new lines, and spaces after a line. So always
<code>trim</code> and make sure you don&rsquo;t accidentally parse an empty line as a valid input.</p>
<h2 id="day-2---part-2">Day 2 - Part 2</h2>
<p>Now, things get a bit more complex. Turns out we aren&rsquo;t actually parsing the coordinates correctly, so there are some
new constraints. What are they?</p>
<p>We have a new value, <code>aim</code>. And a new set of constraints:</p>
<ul>
<li>down X increases your aim by X units.</li>
<li>up X decreases your aim by X units.</li>
<li>forward X does two things:
<ul>
<li>It increases your horizontal position by X units.</li>
<li>It increases your depth by your aim multiplied by X.</li>
</ul>
</li>
</ul>
<p>Again, just ignore the fluff around this this time, because it&rsquo;s more distracting than helpful. Sometimes it contains some weird extra
info, but this time, I found them to be a bit misleading. The actual problem is super simple.</p>
<p>We change our implementation to increase decrease <code>aim</code> and do the thing for <code>x</code> and <code>y</code> a bit differently.</p>
<p>Following the rules we get to this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="k">switch</span> <span class="nx">op</span> <span class="p">{</span>
<span class="k">case</span> <span class="s">&#34;forward&#34;</span><span class="p">:</span>
    <span class="nx">x</span> <span class="o">+=</span> <span class="nx">v</span>
    <span class="nx">y</span> <span class="o">+=</span> <span class="p">(</span><span class="nx">aim</span> <span class="o">*</span> <span class="nx">v</span><span class="p">)</span>
<span class="k">case</span> <span class="s">&#34;up&#34;</span><span class="p">:</span>
    <span class="nx">aim</span> <span class="o">-=</span> <span class="nx">v</span>
<span class="k">case</span> <span class="s">&#34;down&#34;</span><span class="p">:</span>
    <span class="nx">aim</span> <span class="o">+=</span> <span class="nx">v</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Then we carefully read what has to be done to get the result and we see that it actually did not change.
We still multiple <code>x</code> and <code>y</code>.</p>
<p>And indeed, this is the correct result for our test, so we run it for our input and that should yield the right value.</p>
<h2 id="conclusion">Conclusion</h2>
<p>This day now showed you that input comes in various forms and formats which you need to be prepared to parse correctly.
We made sure that we skip empty new lines and always trim possible spaces. And we got to know <code>Sscanf</code> which can be handy
at times if the format is strict enough.</p>
<p>We also learned to read important information and disregard things which can distract from the actual goal.</p>
<p>The repository for all my solutions for AOC 2021 can be found <a href="https://github.com/Skarlso/aoc2021">here</a>.</p>
<p>Thank you for reading!</p>
<p>Happy coding!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Advent Of Code - Day 1</title>
      <link>https://skarlso.github.io/2021/12/01/aoc-day1/</link>
      <pubDate>Wed, 01 Dec 2021 01:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2021/12/01/aoc-day1/</guid>
      <description><![CDATA[<h1 id="advent-of-code---day-1">Advent Of Code - Day 1</h1>
<p>Since 2015, <a href="https://adventofcode.com/">Advent Of Code</a> has been a part of my life. I&rsquo;ve done various posts on it already, but this year will be different.
I&rsquo;m going to blog every day every solution, why and how I&rsquo;ve gotten to that solution.</p>
<p>This isn&rsquo;t going to be ever December, because I&rsquo;m usually unable to solve a problem on a single day in the later days from day 10 or so. It takes more time then I have.
But I will solve all of them. At the time of this writing, I have completed almost all puzzles except for year 2019 which I didn&rsquo;t much enjoy to be honest.</p>
<p><img src="/img/2021/12/01/stars.png" alt="Events"></p>
<h2 id="a-bit-of-history-before-we-begin">A bit of history before we begin</h2>
<p>I first heard of Advent Of Code when I joined <a href="https://cheppers.com/">Cheppers</a> back in 2015. It was a great journey, and I loved every moment if it, but eventually I moved on.
Advent of code, however, stayed with me over these past years. As someone without a formal CS education, I&rsquo;m using these puzzles to catch up things I might have missed out. Everything I know I learned either by my self, or from books or videos or on the job. I begun coding at an early year and it stuck with me.</p>
<p>I really struggled with some of these problems, and I haven&rsquo;t been able to completely solve a single year so far without seeking help. Every year, I&rsquo;m getting closer and closer to solving all of the days, but it hasn&rsquo;t happened yet.</p>
<p>It was amazing in identifying my weak areas. Things like, geometry problems ( I have forgotten everything from school ) ( asteroids had to be shot down going in a circle on a 2d matrix ), permutation problems, graph traversal, BFS, DFS, backtracking&hellip; As someone who never really had to deal with these things, I really lacked the know how.</p>
<p>As the years went by, and I solved all of the puzzles this way or that, and looked at what other people were cooking up, I begun to see that I started to improve in some of these areas.</p>
<p>I know why I didn&rsquo;t improve in the areas I would have liked to improve in. And that is, lack of reflection. What do I mean by that? I solved the problem, read someone&rsquo;s solution, then went on with my life. The way to get better at something is through reflection and recall though. And I didn&rsquo;t do either.</p>
<p>So this year, I&rsquo;m going to reflect and recall all my solutions, and even though I might need help in the later days, I will never use anyone else&rsquo;s code. I will always write my own. And then, reflect upon it, by writing a post and talking about why this solution works or how I&rsquo;ve gotten to it.</p>
<p>I also decided to finally create an SDK with all the common functions I&rsquo;m using.</p>
<h2 id="day-1">Day 1</h2>
<p>History out of the way, let&rsquo;s break down day 1.</p>
<h3 id="part-1">Part 1</h3>
<p>As usual, the first couple days are warmup. Easy problems to get your brain started into the right move and set up the story. Which is my favorite thing in all of this! Reasons why AOC is so awesome, is that it has an actual story!
It isn&rsquo;t just leetcode, or spoj or codewars or whatever. There is an actual story and it&rsquo;s hilarious and a good read. And the problems aren&rsquo;t just, solve x, solve y. They usually are diverse in some sense.</p>
<p>Part 1 this year, sets us up on a wild ride under the sea. The keys dropped into the water and we hopped into a submarine to go after it.</p>
<p>Let&rsquo;s examine the problem.</p>
<p>How do I read AOC problems? First, I&rsquo;m reading the story. I&rsquo;m not in a hurry. I don&rsquo;t want to be on the leader board. That&rsquo;s not gonna happen. Then, I&rsquo;m examining the problems and write down all the constraints ( aka, rules ).</p>
<p>For Part 1:</p>
<ul>
<li>we have a set of numbers</li>
<li>they are all positive integers ranging from 100 - 9999 ( it&rsquo;s important to identify your working sample as your solution depends on it )
<ul>
<li>which means we can assume that there won&rsquo;t be any negative numbers, floats, complex numbers, etc. ( narrows down the solution sample size )</li>
</ul>
</li>
</ul>
<blockquote>
<p>The first order of business is to figure out how quickly the depth increases, just so you know what you&rsquo;re dealing with - you never know if the keys will get carried into deeper water by an ocean current or a fish or something.</p>
</blockquote>
<ul>
<li>we need depth increases ( what does this mean? ) ( we read on to find out more )</li>
</ul>
<blockquote>
<p>To do this, count <strong>the number of times a depth measurement increases</strong> from the previous measurement.</p>
</blockquote>
<p>It&rsquo;s important to see what things are in <strong>bold</strong>. They provide rules, hints and further clues. It&rsquo;s also important to read and re-read every sentence PROPERLY AND THOROUGHLY. Because sometimes they are confusing on purpose. From the above we gather the following rule:</p>
<ul>
<li>count the number of times a number in the list increases compared to the previous one (numbers[n+1] &gt; numbers[n])</li>
</ul>
<p>And here is a tiny tidbit that I&rsquo;m sure folks will glance over and yet it&rsquo;s very important! In parentheses!</p>
<blockquote>
<p>(There is no measurement before the first measurement.)</p>
</blockquote>
<p>Meaning, you don&rsquo;t compare the first one. This could cause a <a href="https://en.wikipedia.org/wiki/Off-by-one_error">off by one error</a> in part 2. It&rsquo;s important to pay attention.</p>
<p>Then we have the example, and we are off.</p>
<h4 id="code">Code</h4>
<p>Essentially we just loop through all numbers that we gathered, and if there is a bigger number as the current one we increase a counter.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">counter</span> <span class="o">:=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
  <span class="k">if</span> <span class="nx">n</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="p">&gt;</span> <span class="nx">n</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">{</span>
    <span class="nx">counter</span><span class="o">++</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Number of increases:&#34;</span><span class="p">,</span> <span class="nx">counter</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>That&rsquo;s it. We test it on the test which should yield the right number then we run it on our input, which also should yield the right number.
This runs at a reasonable pace, so I think we are fine on optimization.</p>
<p>Onwards to&hellip;</p>
<h3 id="part-2">Part 2</h3>
<p>As usually, with part 2, things get a bit more complex here. We now need to solve a sliding window of threes. This a bit confusing to read at first,
but essentially, we just need to sum up groups and compare the sums. We have to still do that same thing as before, but now, we track a previous
sum and we need to check the next 2 numbers in the list not just the current, and current + 1.</p>
<p>The term <code>sliding-window</code> can be a bit confusing here. It just means that we will compare a slice of the numbers. The A B C notation looks also weird
to me. This one is a bit better:</p>
<p>Consider a list like this <code>1, 2, 3, 4, 5, 6</code>. We compare <code>[1+2+3], [2+3+4], [3+4+5], [4+5+6]</code>.</p>
<p>So the sliding window is basically a set of three numbers counted from your current number. Instead of <code>numbers[n] and numbers[n+1]</code> we will look at
<code>numbers[n] + numbers[n+1] + numbers[n+2]</code>.</p>
<p>Following that the code changes a tiny bit:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">counter</span> <span class="o">:=</span> <span class="mi">0</span>
<span class="nx">prevsum</span> <span class="o">:=</span> <span class="nx">math</span><span class="p">.</span><span class="nx">MaxInt</span>
<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
  <span class="k">if</span> <span class="nx">n</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="nx">n</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="nx">n</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="p">&gt;</span> <span class="nx">prevsum</span> <span class="p">{</span>
    <span class="nx">counter</span><span class="o">++</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Number of increases:&#34;</span><span class="p">,</span> <span class="nx">counter</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>Why did I add the <code>math.MaxInt</code>? Because we don&rsquo;t count the first one, as pointed out by the previous sentence in parentheses!</p>
<p>This should give us the right value and both <strong>star</strong>s.</p>
<h2 id="closing-words">Closing words</h2>
<p>So this is it for day 1. This one was an easy day. It prepared you to read the problem description. Understand it, and prase out the rules of
engagement.</p>
<p>The repository for all my solutions for AOC 2021 can be found <a href="https://github.com/Skarlso/aoc2021">here</a>.</p>
<p>Thanks for reading,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Summary of Programmer&#39;s Brain</title>
      <link>https://skarlso.github.io/2021/11/27/summary-of-programmers-brain/</link>
      <pubDate>Sat, 27 Nov 2021 01:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2021/11/27/summary-of-programmers-brain/</guid>
      <description><![CDATA[<h1 id="prologue">Prologue</h1>
<p>Hello all.</p>
<p>This is a summary of the book <a href="https://www.manning.com/books/the-programmers-brain">Programmer&rsquo;s Brain</a>. Let me begin by saying the book is fantastic and you should definitely read it. The research put into it is phenomenal, and the many linked notes, data and reference make for an amazing and compelling read!</p>
<p>Not to mention that it is fantastic that someone put actual effort and data into finding out how programmers operate, think and behave. And most of all, how our code behaves and reading, and dealing with code is not just about understanding algorithms and finding the best possible and most optimized code ever.</p>
<p>What does this summary contain? Information that I found useful about the book. It doesn&rsquo;t contain everything, just the distilled amalgamation of information that I hand picked and will try to convey using my own words.</p>
<p>Let&rsquo;s dive in.</p>
<h2 id="part-one---reading-code-better">Part One - Reading code better</h2>
<h3 id="understanding">Understanding</h3>
<p>We all know that we read code more than we write it. It&rsquo;s a basic premise, right? Yet, still we don&rsquo;t write code for reading at all! We have to make a conscious effort of it to write it in a readable, compact way. We optimize for speed, optimize for structure, but we rarely, if at all, optimize for readability. For understandability. To please the reader, instead of the writer. To look ahead an think, by whom and how will this code be read again?</p>
<p>This part offers a couple of solutions to alleviate this pain.</p>
<h4 id="confusion">Confusion</h4>
<p>It identifies three things. Lack of Knowledge, Lack of Information and Lack of Processing Power.</p>
<ul>
<li>lack of information - basically, you don&rsquo;t know enough about the project / code you are looking at</li>
<li>lack of knowledge - you lack knowledge about the thing you are doing, i.e.: some obscure language syntax you are unfamiliar with</li>
<li>lack of processing power - the code chunk you are looking at is too large, or you should break it down</li>
</ul>
<p>The book makes a point on how cognitive load works and why you should take care of it. I&rsquo;m not going to detail that part ( read the book! ). But it&rsquo;s basically all about how complex something looks until you have enough background in your long term memory to be able to decipher it instantly and not spending too much time on it.</p>
<p><em>Lack of processing power</em> is alleviated by taking notes, jotting down information and functions and variables about the code you are writing. By using a second brain (i.e. paper) you lighten the load on your current working memory. Further, it might be helpful to refactor into something that you do understand and are already familiar with. For example, exploding a Python list comprehension into a for loops until you understand the whole thing. Then put it back and read it again.</p>
<p><em>Lack of knowledge</em> is easy to mend. You read up on said topic / become better in it.</p>
<p><em>Lack of information</em> again, just read up on the stuff you are missing.</p>
<h4 id="reading">Reading</h4>
<p>The book then continues with helping you speed read code better. There are fascinating researches quoted about various things they tried with experts and junior programmers and chess masters vs beginners.</p>
<p>As much as Go people dislike talking about design patterns in Go, they exist for a reason. The reason is that there are common problems which have common, tried solutions. It&rsquo;s fare that these patterns apply differently in Go because of the structure available to us, but they still exist. And this is on which speed reading hinges. Patterns. The more patterns you recognize the faster you&rsquo;ll be able to read code.</p>
<p><code>for</code> loops, <code>if err != nil</code> checks. It&rsquo;s ingrained now into your memory and you recognize and can read it at a glance.</p>
<p>This means, in order to help the reading of your code, you should focus on things called Beacons. Beacons are small, understandable (at a glance) parts of your code. Comments, patterns like <code>if err != nil </code>, chains, proper function names; all of these are beacons which help in understanding and reading your code better.</p>
<p>For faster code reading speed, you have to know patterns and idioms at a glance. Practice until you know them by heart. For example, you don&rsquo;t have to look twice to identify a bridge above water, right? You know it&rsquo;s a bridge because it looks like a bridge. It could be above a street too it still would be a bridge.</p>
<p>To be able to learn faster, the book, and indeed many other research papers now-a-days, suggest spaced repetition, recall, and / or flashcards.</p>
<p>One of the best suggestions I&rsquo;ve gotten out of this book about reading and learning code, is if you have to Google something for the second time because you don&rsquo;t remember how that works, you are wasting time and are adding to your cognitive load. At that point, you should make an effort to remember it with the above suggested tips. Why, even for the first time. If you Google something or look it up on StackOverflow, at that moment, you should create a flash card for it and condense that information WITH YOUR OWN WORDS! Then use spaced repetition / recall to remember it.</p>
<p>In the future you will benefit from having that thing in the back of your head.</p>
<h2 id="part-two---thinking-about-code">Part Two - Thinking about code</h2>
<h3 id="reading-strategies">Reading strategies</h3>
<p>Then we get to reading and understanding code. Research backed data proves that mathematical knowledge will not make you better at understanding code. Linguistic proves backs programming skills more than mathematical understanding. Logical proves also helps a lot more.</p>
<p>Effective reading in general, can be broken down into the following sections:</p>
<ul>
<li>Activating &ndash; try remembering things which relate or are similar to the thing you are reading</li>
<li>Monitoring &ndash; check your understanding as you go</li>
<li>Determining importance &ndash; discard things that are of no interest to you</li>
<li>Inferring &ndash; understand things that the text only implies</li>
<li>Visualizing &ndash; draw things &ndash; only helps if you are visually inclined. I think you should do whatever helps you to understand</li>
<li>Questioning &ndash; without recall there is no remembering</li>
<li>Summarizing &ndash; write a summary IN YOUR OWN WORDS!!! ( I can&rsquo;t stress this enough )</li>
</ul>
<p>When you are reading code, you first will understand the code at hand, and then, a bigger picture understanding comes later. I&rsquo;m not sure about which comes first. I think everyone is different. Someone might understand the bigger picture a lot easier than actual code. In any case, mapping either to the other is a difficult process. Inferring code from patterns and inferring the bigger picture from code. It&rsquo;s a good exercise.</p>
<p>The book also separates variables based on behavior. This might help you understand the code better later, when you read it. It uses the following 11 categories:</p>
<ul>
<li>Follower</li>
<li>Stepper</li>
<li>Walker</li>
<li>Temporary</li>
<li>Counter/Gatherer</li>
<li>Container</li>
<li>Fixed value</li>
<li>Flag</li>
<li>Organizer</li>
<li>Most-recent Holder</li>
<li>Most-wanted Holder</li>
</ul>
<p>These are self-explanatory, but marking the variables might give you a hint on their purpose and maybe refactor them or name them appropriately.</p>
<p>Now, we come to the interesting sub-section of problem solving.</p>
<h3 id="problem-solving">Problem solving</h3>
<h4 id="mental-models">Mental Models</h4>
<p>The way you create a mental model about a problem will decide how you&rsquo;ll go about solving them. Which means, if your solution &ldquo;feels dirty&rdquo;, or is buggy and doesn&rsquo;t feel right, you just might need to change your mental model about the problem. Or the data representing it. Your mental model will decide how you tackle this problem. So you better make sure your mental model is correct. A couple of mental models can be, diagrams, a graph, a state machine&hellip; everything that can represent the logic of the code with a model.</p>
<p>Thinking with models about the logic of the code is an important skill. Abstracting the problem can give you a huge benefit in solving it.</p>
<p>There is an awesome quote from Rob Pike:</p>
<blockquote>
<p>A year or two after I’d joined the Labs, I was pair programming with Ken Thompson on an on-the-fly compiler for a little interactive graphics language designed by Gerard Holzmann. I was the faster typist, so I was at the keyboard and Ken was standing behind me as we programmed. We were working fast, and things broke, often visibly — it was a graphics language, after all. When something went wrong, I’d reflexively start to dig in to the problem, examining stack traces, sticking in print statements, invoking a debugger, and so on. But Ken would just stand and think, ignoring me and the code we’d just written. After a while I noticed a pattern: <strong>Ken would often understand the problem before I would, and would suddenly announce, “I know what’s wrong.” He was usually correct. I realized that Ken was building a mental model of the code and when something broke it was an error in the model. By thinking about <em>how</em> that problem could happen, he’d intuit where the model was wrong or where our code must not be satisfying the model.</strong></p>
<p><strong>Ken taught me that thinking before debugging is extremely important. If you dive into the bug, you tend to fix the local issue in the code, but if you think about the bug first, how the bug came to be, you often find and correct a higher-level problem in the code that will improve the design and prevent further bugs.</strong></p>
<p>I recognize this is largely a matter of style. Some people insist on line-by-line tool-driven debugging for everything. But I now believe that thinking — without looking at the code — is the best debugging tool of all, because it leads to better software.</p>
</blockquote>
<p>I love this. It shows that having a clear mental model of the code will help you in understanding it better. Work through the code, construct a model by following a call path. Understand and draw the entities which interact with each other through that path and construct a structure out of it. Draw that structure or put it into a state machine, write down how pieces and variables interact and you&rsquo;ll have a clear understanding of what&rsquo;s going on.</p>
<p>This is called following a focus point. A focus point is an entry to a system. Sometimes there are multiple focus points. They all represent a different path through the system but might use the same entities.</p>
<p>The more general mental models you store in your Long Term Memory, the easier it will be to identify and solve problems. Use flashcards to remember as many mental models as you can. Things like, tree traversal, sorting, data structures, thinking about architecture, layered architecture etc&hellip; If you can recall them from heart you&rsquo;ll be able to reason and understand code a lot better.</p>
<h4 id="notional-machines">Notional Machines</h4>
<p>The best way to describe a notional machine is an abstraction of the executing code. It&rsquo;s a kind of mental model, but it&rsquo;s always correct. A normal mental model can be incorrect. A notional machine always depicts what the machine is doing. I didn&rsquo;t really find them helpful, but they might be helpful to others. Notional machines help us understand how the machine works, how code runs. There are multiple machines which can work together. To learn more about them, either read the book, or read <a href="https://www.researchgate.net/publication/259998496_Notional_Machines_and_Introductory_Programming_Education">this</a> research paper on them.</p>
<h4 id="misconceptions">Misconceptions</h4>
<p>This one is interesting and certainly worth an explanation. Basically, you have to constantly check you biases about code, concepts and your mental models. Otherwise, you&rsquo;ll fall into the routine of using the wrong model all the time. This isn&rsquo;t always easy, because it might not be apparent at first. But never assume that what you know is always correct. Of course there are axioms like <code>1==1</code> which will always be true, but that doesn&rsquo;t mean that a concept you might know is an axiom.</p>
<p>Always read the documentation and the code of the current project you are working on with the care of checking your mental models. They might be outdated or incorrect.</p>
<h2 id="part-three---writing-better-code">Part Three - Writing better code</h2>
<h3 id="how-to-get-better-at-naming-things">How to get better at naming things</h3>
<p>This is a whole chapter in it&rsquo;s own about naming things. That is an important chapter to be sure because naming is the hardest. But I found that the advice there is basically, name things in the context they are in and regarding the behavior they represent. Naming things has always been important. A good name will sometimes solve the whole problem in its own!</p>
<p>There was one time where I was thinking about how to implement a particular feature. I&rsquo;ve spent a day on trying to come up with a nice solution. When I stepped back and thought about the problem without looking at the code. Building up a mental model, thinking about what I need and if there is a <code>thing</code> that can do that for me. When suddenly, the best name popped into my head based on the need, the circumstance and the behavior of the thing. Suddenly, the whole implementation laid itself out before me because I knew what I needed. I had a name for it.</p>
<p>Equally, a bad name will deprive the understanding you need and, in fact, will make it much harder to implement anything else in that context.</p>
<p>Amongst other things, the book suggests the three-step model. <a href="https://www.cs.huji.ac.il/~feit/papers/Names20TSE.pdf">How Developer&rsquo;s Choose Names</a>.</p>
<h3 id="avoid-bad-code-and-cognitive-load">Avoid bad code and cognitive load</h3>
<p>First, let&rsquo;s look at the cognitive load part. What does cognitive load mean? It means that you have to spend a lot of brain power / energy on understanding the actual code. Why is that? Is the code way too complex for what it&rsquo;s doing? Is it written badly? Does it smell? Do you not understand the domain? Do you not understand the syntax? There are many things you can do to alleviate some of the pain. The main three are:</p>
<h4 id="make-sure-you-completely-understand-the-domain">Make sure you completely understand the domain</h4>
<p>This one is easy to dismiss but is actually hugely important. You have to be absolutely crystal clear that you understand the domain that the code is dealing with. Otherwise, the code will either not make sense, or will be difficult to interpret in it&rsquo;s fullest. By understanding the domain, you&rsquo;ll be able to figure out the code, even more so, you&rsquo;ll be able to reason about the code. And maybe you&rsquo;ll actually find that the code is in fact, wrong. It doesn&rsquo;t actually implement the domain well.</p>
<h4 id="simplify-the-code">Simplify the code</h4>
<p>Sometimes the code is just written in an insane complex way for no apparent reason. Or there is a reason, you just don&rsquo;t see it yet. And that&rsquo;s okay! Start by refactoring the code in a way you understand or making it simpler. I, actually have a story about this.</p>
<p>There was a <a href="https://github.com/weaveworks/eksctl/issues/1275">ticket</a> in <a href="https://github.com/weaveworks/eksctl">eksctl</a> I picked up. Refactor the logging to expand nested task logging into a nice structure. Basically come from this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">[ℹ]  3 sequential tasks: { delete nodegroup &#34;ng-5b8f2f94&#34;, 2 sequential sub-tasks: { 2 sequential sub-tasks: { delete IAM role for serviceaccount &#34;default/s3-reader&#34;, delete serviceaccount &#34;default/s3-reader&#34; }, delete IAM OIDC provider }, delete cluster control plane &#34;irp-test-5-manual&#34; [async] }
</code></pre></td></tr></table>
</div>
</div><p>to something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">[ℹ]  3 sequential tasks: {
  delete nodegroup &#34;ng-5b8f2f94&#34;, 2 sequential sub-tasks: {
    2 sequential sub-tasks: {
      delete IAM role for serviceaccount &#34;default/s3-reader&#34;, delete serviceaccount &#34;default/s3-reader&#34;
    }
    delete IAM OIDC provider
  }
  delete cluster control plane &#34;irp-test-5-manual&#34; [async]
}
</code></pre></td></tr></table>
</div>
</div><p>Looks easy, right? This was the result: <a href="https://github.com/weaveworks/eksctl/pull/4290">pr</a>. It took me two days! Turns out what parsed the log messages was so convoluted and recursive that it was difficult to unravel. Ultimately, what I did was, I begun re-writing bits of it and simplifying the whole thing, running the code over and over to see what it produced. It was a loose, semi-recursive structure, where you had no idea how deep you are at any given moment; thus you couldn&rsquo;t just indent things based on a counter or a tracker. It was always 1 or 0 deep.</p>
<p>Even so, I think this will sort of break apart if we ever go 4-5 nested tasks deep&hellip; but that&rsquo;s a story for another day.</p>
<p>The lesson here is, that simplifying and re-writing the code made me understand what&rsquo;s going on there a lot better and I was finally able to rewrite it.</p>
<p>Next, the book talks about how code smells increase the cognitive load many fold. Eliminating code smells will increase the understandability of the code. Code smells have been introduced by Kent Beck and become more known when Martin Fowler wrote about them. A brief description can be found <a href="https://martinfowler.com/bliki/CodeSmell.html">here</a>. The <code>Refactoring</code> book identifies these code smells:</p>
<ul>
<li>Long Methods</li>
<li>Long Parameter List</li>
<li>Switch statements</li>
<li>Alternative Classes with different Interfaces</li>
<li>Primitive obsession - Avoid the overuse of primitive types in a class</li>
<li>Incomplete Library class - Methods should not be added to random classes instead of to a library class.</li>
<li>Large Class</li>
<li>Lazy Class - doing too little</li>
<li>Data Class - just dealing with data</li>
<li>Temp fields</li>
<li>Data Clumps</li>
<li>Divergent Change | Shotgun surgery - change which results in unwanted change in different parts of the code</li>
<li>Feature Envy</li>
<li>Inappropriate intimacy - classes should not be connected to other classes extensively</li>
<li>Duplicate code or code clones</li>
<li>Superflouse comments</li>
<li>Message Chains - aka. train wrecks</li>
<li>Middle man - its only purpose is to delegate to other method calls</li>
<li>Refused bequest (inherit unused behavior)</li>
<li>Speculative generality - adding code &ldquo;just in case&rdquo;</li>
</ul>
<p>Some of these don&rsquo;t really apply in Go, especially the pieces about classes and inheritance. But some of them do apply and should be looked out for. They can really complicate the code unnecessarily. Further anti-patterns are Structural and Linguistic.</p>
<p><strong>Structural</strong>: Code is okay, but structured in a way that is difficult to understand and process -&gt; increases cognitive load.
<strong>Linguistic</strong>: Bad / misleading names lead to confusion and bugs.</p>
<h3 id="solving-complex-problems">Solving complex problems</h3>
<p>First, identify what the problem is. Re-write / re-formulate it in your own words. This will make sure that you understand the problem at hand properly. Then draw the problem out as much as possible and identify the individual constraints which exist. List them and examine them. If the problem is too complex, start removing or adding constraints until it is easier to think about the solution.</p>
<p>The book talks about State Space. A state space is all steps we could consider when solving the problem.</p>
<p>Now, the book says something I would like to quote word for word, because I believe this is profound and should be taken to heart.</p>
<blockquote>
<p>In 1945, Pólya wrote a short and famous book called How to Solve It. His book proposes a “system of thinking” to solve any problem involving three steps:
&gt; 1. Understanding the problem
&gt; 2. Devising a plan
&gt; 3. Carrying out the plan</p>
<p>However, despite the popularity of generic approaches, research has consistently shown that problem solving is neither a generic skill nor a cognitive process.</p>
</blockquote>
<p>Let me repeat this. <strong>However, despite the popularity of generic approaches, research has consistently shown that problem solving is neither a generic skill nor a cognitive process.</strong></p>
<p>There is no such thing as learning a base generic method of problem solving and then solve all possible problems. You have to exercise specific problems in order to be better at specific problems. Guess what this means on a broader aspect. Learning to play Chess will not make you smarter. It will make you good at chess. Playing games on Lumosity will not make you smarter. It will make you better at playing games on Lumosity.</p>
<p>What will definitely help you though is the following. &ldquo;Automate&rdquo; mundane algorithms. What this means in practice is that you exercise problems which include things like, tree traversal, graph building, stack based operations, breath first search, depth first search, etc. Practice them until you know these things by heart. The same way you learn to do math. You solve quadratic functions until you know by hearth what the solution is.</p>
<p>But you don&rsquo;t stop there!!! You also need to be able to evolve these. Apply them to similar problems and understand how a problem is similar, or break it down until you can make it similar. I&rsquo;d like to think about like when Miyagi thought Daniel son <strong>wax on wax off</strong> technique and then suddenly, Daniel knew how to do karate. That&rsquo;s a bit of stretch but you get the gist of the idea.</p>
<p>The main is that common things like, what is an optimistic or a pessimistic lock, have to be in your long term memory. Continuously Googling and looking at StackOverflow will not make you better at problem solving. That does not mean you shouldn&rsquo;t!!!!!!!! BUT! You should eventually learn from it! And now, let me repeat an important sentence. <strong>IT IS OKAY TO LOOK AT SOLUTIONS FROM OTHER PEOPLE!!</strong> Like, in art. You first learn by coping things. Things from real world, other artist&rsquo;s work. You study art from other people and drawing from masters. You understand how they did it, and replicate that until you know it by heart. On then do you begin to extend and find your own style.</p>
<p>And so, it&rsquo;s perfectly fine to look at other people&rsquo;s solutions to hard problems <strong>AS LONG AS YOU LEARN FROM THEM</strong>! Look at the solution. Study it. Understand it. Then write your own! That&rsquo;s how you&rsquo;ll learn.</p>
<p>The book goes into a lot of detail about what kind of memory influences these problems. But this, the above thing, was my biggest takeaway from all of that. Basically, automating things in your brain will free up cognitive load when thinking about code and solving problems.</p>
<h2 id="part-four---collaborating-on-code">Part Four - Collaborating on Code</h2>
<h3 id="writing-code">Writing code</h3>
<p>The book first starts off by listing all the different activities when writing code and sums them up into the following sub-sections:</p>
<p><strong>Searching</strong></p>
<p>Mostly reading and learning the code. Hard on short term memory. Helps to write down where you are, what you are looking for and what did you already found to off-load cognitive load. Leave breadcrumbs, change the code here and there, leave a TODO / anchor.</p>
<p><strong>Comprehension</strong></p>
<p>58% of our time is spent doing this activity. It&rsquo;s about understanding the code and trying to find out what it does and how. Changing / simplifying the code helps. Draw models and leave notes on structure which can help you continue your task later.</p>
<p><strong>Transcription</strong></p>
<p>&ldquo;Just coding&rdquo; where you know what you are going to write where and why.</p>
<p><strong>Incrementation</strong></p>
<p>Adding new feature. Is hard on everything&hellip;</p>
<p><strong>Exploration</strong></p>
<p>The final activity. Sketching with code. Vague idea but by writing code, your idea solidifies. Jot down your design, will help order your thoughts and free up mental space for other things.</p>
<p>Then the book continue to talk about interrupts and how they are not really helpful. We already know this&hellip;</p>
<h3 id="improving-the-design-of-large-systems">Improving the design of large systems</h3>
<p>This is an interesting chapter I completely misunderstood but I&rsquo;m glad I got perspective on. It makes you think about your system&rsquo;s design in terms of cognitive load and how hard it would be for other to find their way in it. Basically design your system with humans in mind. Is it easy to follow? Do package names make sense? Does that code have to live there? Your architecture might be awesome, and intricate, but if others can&rsquo;t read it, then it they won&rsquo;t collaborate on it. And if you are working in a team this is especially important. The book calls this CDCB ( cognitive dimension of codebases ).</p>
<p>CDCB identifies the following dimensions:</p>
<p><strong>Error Proneness</strong>
This one is mostly about type safety and how easy it is in your code to make errors.</p>
<p><strong>Consistency</strong>
How consistent is your code with itself. Naming, structure, where and why things are where they are. Paradigms, idioms being used&hellip;</p>
<p><strong>Diffuseness</strong>
How much space a programming construct takes. How long certain required syntaxes are. Things like for loops, and language structures. How compact or extent the code is.</p>
<p><strong>Hidden Dependencies</strong>
How visible are the code&rsquo;s dependencies. Are there hidden things the user needs but is not apparent and not documented?</p>
<p><strong>Provisionality</strong>
Exploring ideas can help when writing code. You start writing and that will give you ideas about how to proceed further. Your vague ideas become more concrete. Some language can be used better to do this because they don&rsquo;t get in your way. Like Python, JavaScript. Go is strictly typed and will scream at you if you make a mistake. That can hinder exploration.</p>
<p><strong>Viscosity</strong>
How resistant is your code to changes.</p>
<p><strong>Progressive Evaluation</strong>
Similar to Provisionality, this dimensions defines how hard it is to execute partial code.</p>
<p><strong>Role expressiveness</strong>
How easy it is to see what does what. Like, in Ruby it&rsquo;s difficult to see if something is a function call or a variable. <code>thing.other</code>. Other might be anything. Meanwhile in other languages it&rsquo;s easy to see that <code>thing()</code> is a function.</p>
<p><strong>Closeness of Mapping</strong>
How close your program is to the domain / problem that is solved.</p>
<p><strong>Hard Mental Operations</strong>
The code requires hard mental operations, such as, deciphering obscure syntax, or understanding hard idioms like monads and difficult to follow type systems. If your project requires hard mental operations, contributors are less likely to join it.</p>
<p><strong>Secondary Notation</strong>
This one is weird. Second meaning to code, such as comments and named parameters.</p>
<p><strong>Abstraction</strong>
Can users of your system create their own abstractions which are as powerful as built in abstractions. For example functions in a programming language. In Go I would say interfaces provide this abstraction since a user of a Library can create their own Interface over some functionality of a library and use that and pass in the libraries function.</p>
<p><strong>Visibility</strong>
How easy is it to see parts of the system. Is your folder structure following your architecture layers?</p>
<p>Playing around with these and improving one or the other might improve the overall design of your project. But there are trade-offs for everything.</p>
<h3 id="how-to-onboard-new-developers">How to onboard new developers</h3>
<p>This chapter is all about the differences between senior and newcomers and ties nicely back into all of the research being done about cognitive load, short term vs long term memory, sensory overload and information overload. It&rsquo;s an interesting read for sure if you do a lot of interviews I definitely encourage reading the whole thing in the book. I&rsquo;m going to summarize what I&rsquo;ve got out of it&hellip;</p>
<p><strong>Don&rsquo;t overload newcomers.</strong>
They need to learn a LOT about your environment, group dynamic, team procedures, issue handling, break routines&hellip; and I didn&rsquo;t even begin talking about code yet&hellip;</p>
<p><strong>Once you master something you forget how difficult it was.</strong>
This is a great point we tend to forget. You have a better view of the big picture. You know parts of the code better. Beginners tend to focus on detail more and don&rsquo;t see the big picture yet. You tend to think that that stuff is &ldquo;easy&rdquo;. Since you already forgot how difficult it is/was.</p>
<p><strong>Noticing patterns.</strong>
Even if you don&rsquo;t immediately have an answer to a problem you&rsquo;ll be faster in finding it. You can chunk code better, you can read code faster and spot certain patterns more efficiently since you already encountered them a hundred times over.</p>
<p><strong>Semantic Wave</strong>
This one is a really interesting concept. It depicts the ideal learning curve of a newcomer. Coin by Karl Maton. Read about it <a href="https://www.sciencedirect.com/science/article/abs/pii/S0898589812000678">here</a>.</p>
<p>Has three steps&hellip;</p>
<p>1: <em>understanding</em> - understand the generic concept</p>
<p>2: <em>unpacking</em> - this is the low of the curve where the beginner is ready to learn the details about the thing</p>
<p>3: <em>repacking</em> - get back to the generic concept on their own - meaning understand why the generic concept is useful and results in the concrete detail. This is when the information is actually internalized and ideally, completely remembered.</p>
<p>Following this there are three anti-patterns when not regarding this curve.</p>
<p>1: <em>high flatline</em> - only using abstract terms</p>
<p>2: <em>low flatline</em> - too much detail, not enough high level view on the <strong>why</strong></p>
<p>3: <em>funny enough this one doesn&rsquo;t have a fancy name</em> - starts with the abstract, goes to the detail but doesn&rsquo;t allow time for the internalization, the <em>repacking</em>. Let&rsquo;s call this one <em>the rush</em>.</p>
<p>The book has some more awesome suggestions and activities to follow with the newcomers, but I can spoil all the fun now can I.</p>
<h2 id="conclusions">Conclusions</h2>
<p>This has been it. Thank you for reading. I hope this was as fun to read as it was to write. It was a great journey reading this book and the citations and research that went into it.</p>
<p>Thanks for reading,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Reader&#39;s Digest 2021-07</title>
      <link>https://skarlso.github.io/2021/07/31/readers-digest/</link>
      <pubDate>Sat, 31 Jul 2021 01:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2021/07/31/readers-digest/</guid>
      <description><![CDATA[<h1 id="readers-digest">Reader&rsquo;s Digest</h1>
<p>I thought it would a cool idea if I kept a summary of the things I&rsquo;ve read or listened to on a monthly
basis. Here is July of 2021 so far. Enjoy.</p>
<h1 id="ultimate-go">Ultimate Go</h1>
<p><a href="https://www.amazon.com/Ultimate-Go-Notebook-William-Kennedy/dp/1737384426/ref=sr_1_3?crid=3EYE58E3G0EO3&amp;dchild=1&amp;keywords=go+ultimate+notebook&amp;qid=1630309494&amp;sprefix=go+ultimate+%2Caps%2C244&amp;sr=8-3">This</a> book is a culmination of Bill Kennedy&rsquo;s <a href="https://www.oreilly.com/library/view/ultimate-go-programming/9780135261651/">Ultimate Go course</a> and notes
which were spawned from them by <a href="https://hoanhan.co/">Hoanh An</a>. Bill Kennedy set out to put everything together and create
a notebook which can be read and followed like the personal notes of a student.</p>
<p>It contains a great many code examples which has been reviewed again and again ( by me too! ) to ensure that
there are no bugs in them, and that they adhere to a high standard.</p>
<p>The book follows An as he follows the Ultimate Go course and takes notes from them. The course talks about
the language intricacies, inner workings of the scheduler, the GC, memory and CPU profiles usage and many, many more things.
It also touches up on the now incoming type parameters, aka generics, in Go 1.18. It&rsquo;s a great touch in the book
as it will eventually be a standard and better to begin understanding it sooner rather than later.</p>
<p>The first chapter sets up the reader&rsquo;s mind frame to the unusual way the book is written ( in first person ). With a
lovely and inspiring set of quotes from a great many people big in the tech industry.</p>
<p>I encourage everyone to have a read of it!</p>
<h1 id="go-with-domain">Go with Domain</h1>
<p>This book can be obtained by subscribing to ThreeDots' newsletter <a href="https://threedots.tech/go-with-the-domain/">here</a>.</p>
<p>It&rsquo;s a lengthy book describing a journey the authors (Milosz Smolka, Robert Laszczak) took in order to improve software
and therefor, the World. It&rsquo;s a great journey, but it&rsquo;s mostly about using DDD in a pragmatic way in Go.</p>
<p>My feelings about this book are mixed. On one hand, Go doesn&rsquo;t like convoluted patterns, and DDD IS convoluted. On the other
hand, patterns are there for a reason. They solve real problems in a generic way which has been already solved before us
a hundred thousand times. And Go has patterns, just different ones than other languages. And that&rsquo;s fine. Go promotes
simple implementations and simple solutions.</p>
<p>However, there is only so far that you can get with simple. Eventually, you&rsquo;ll be in an enterprise environment working with
a 100 other people and will try to put something together using poor communications, that&rsquo;s bound to fail. DDD at least
offers the ubiquitous language which provides common language across everyone who uses the product. That&rsquo;s definitely a
benefit. And Event storming is a good idea IMHO.</p>
<p>I offer this. It&rsquo;s a good read. It&rsquo;s incomplete as of this writing, missing the last few chapters. Everyone who reads it
should decide for themselves if the patterns offered make sense. But for sure, it should not be dismissed too hastily.</p>
<p>The authors are aware of the Go communities apprehension against bloated patterns and offer pragmatic solutions in many
cases. I really like that. It&rsquo;s not a 1:1 copy try of DDD, it&rsquo;s a clever try in adapting it and molding it to Go.</p>
<h1 id="texas-reckoners---lux">Texas Reckoners - Lux</h1>
<p>This one is again from Brandon Sanderson. I listened to it via an <a href="https://www.amazon.com/Lux-A-Texas-Reckoners-Novel/dp/B0979GXN82/ref=sr_1_1?crid=2I2N0HTFOKJ1C&amp;dchild=1&amp;keywords=texas+reckoners&amp;qid=1630309057&amp;sprefix=texas+rek%2Caps%2C242&amp;sr=8-1">AudioBook</a>. It was quiet enjoyable! I
already listened to all three of the Steelheart Reckoners and it was awesome to hear some references to that.
The end ties the timeline together, Calamity disappears from the sky, and it&rsquo;s left open with a massive Cliff Hanger.
I&rsquo;m looking forward to listening to #2.</p>
<p>The story follows a group of Texas reckoners which is another cell that Prof created. A fresh recruit call Jax is taken
into the care of this group and molded into a formidable Epic assassin. His brother is killed by an Epic call Lovestruck
in the early days and his whole family died when in Steelheart the bomber Epic destroyed a city.</p>
<p>He is set out for revenge to take down Lux, a floating city governed by an Epic called Lifeforce. He has the ability to
make anyone immortal. The floating city plunders around Texas, so the Reckoners set out to destroy it!</p>
<h2 id="conclusion">Conclusion</h2>
<p>That&rsquo;s it for these months. Next month I&rsquo;m planning on finishing two Go related books hopefully and will write some reviews
about those.</p>
<p>And as always,
Thanks for reading,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Reader&#39;s Digest 2021-06</title>
      <link>https://skarlso.github.io/2021/06/30/readers-digest/</link>
      <pubDate>Wed, 30 Jun 2021 01:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2021/06/30/readers-digest/</guid>
      <description><![CDATA[<h1 id="readers-digest">Reader&rsquo;s Digest</h1>
<p>I thought it would a cool idea if I kept a summary of the things I&rsquo;ve read or listened to on a monthly
basis. Here is June of 2021 so far. Enjoy.</p>
<h2 id="hell-divers-6-allegiance">Hell Divers 6: Allegiance</h2>
<p>I love the Hell Divers series. I listened to this one on audible as always and it was fantastic, as always.
King Xavier Rodriguez. That sounds as bad ass as it is. We follow King Xavier and Rhino, his trusted subordinate into
battle with a new threat called Skin Walkers and of course the machines, the defectors which are trying to kill everyone.
Also, there is now a signal from a possible group of people who are surviving on the surface for more than 200 years!
Xavier hates being king but does anything to keep the peace and humanity alive. Sadly, not all of his people agree to that
especially not after what they did to their people. The people of the metal island, the cannibals are harsh people. And
they don&rsquo;t get along nicely all the time.</p>
<h2 id="go-typed-parameters-proposal">Go Typed Parameters Proposal</h2>
<p>The proposal can be found <a href="https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md">here</a> and it&rsquo;s quite lengthy.</p>
<p>The first example speaks worlds:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Print prints the elements of a slice.
</span><span class="c1">// It should be possible to call this with any slice value.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Print</span><span class="p">(</span><span class="nx">s</span> <span class="p">[]</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Just an example, not the suggested syntax.
</span><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>It is actually exciting that generics is coming to Go. And it&rsquo;s even in my life time. The introduction of generics back
in the old days to Java brought a lot of confusion into the land of Java but more importantly, it brought in the eagerness
of using generics for EVERYTHING. I&rsquo;m really hoping that this proposal will not affect the land of Go. But unfortunately,
it probably will. It is up to us to take care and apply generics WHEN IT&rsquo;S REALLY NECESSARY AND ONLY THEN!</p>
<p>Even so, the proposal is really solid and has some pretty nice scenarios. And there is this issue:
<a href="https://github.com/golang/go/issues/45955">Add generic slice package to Go</a>. Which talks about what the title says.
It has some really amazing feedback already and a gazillion view and an &ldquo;approve&rdquo; from Rob Pike! <a href="https://github.com/golang/go/issues/45955#issuecomment-861173504">Comment</a>.
Which just means he didn&rsquo;t vehemently object. This is really happening. Which is insane and exciting at the same time!</p>
<h2 id="horizon-zero-dawn">Horizon Zero Dawn</h2>
<p>This isn&rsquo;t a book, but a game on PS4 which I spent most of my time instead of reading. I do not regret it, because the
story is absolutely beautiful. When I play, I play for reading. Meaning I read every lore and listen to every story I
encounter and start looking for them as well. Now, let&rsquo;s step back, what is Horizon Zero Dawn?</p>
<p>If you&rsquo;ve been living under a rock these past years, or are just not into games that much let me break it down for you.
The year is&hellip;. X. We have no idea but it&rsquo;s somewhere around the 31st century. It&rsquo;s been several decades after some kind
of apocalypse ( what kind, we find out as we progress with the story ) which left the world in ruins. Small tribes of
humanity survived and segregated into the Nora, Oseram, Banuk and Carja mostly. The ones we know about that is.
Our protagonist is a Nora girl called Aloy.</p>
<p>But there is an interesting twist&hellip; Instead of mostly animals, we have giant Robots, which are animals / perform the tasks
animals perform. Like, hunting, scavenging, eating plant life, swimming in the waters&hellip; Etc.</p>
<p>And these people, hunt these machines. Usually, these machines are docile, but with time, they got more and more aggressive
and more and more machines came around which were always aggressive and effectively started to hunt people.</p>
<p><strong>SPOILER WARNING</strong>: Now, our girl grows up as an outcast, because she actually came into the world, not from a mother
but from the belly of a mountain called Mother&rsquo;s Heart. Mother&rsquo;s Heart is actually an ancient facility sealed shut, with
a biometric security system which they call All Mother. The story is REALLY long, but eventually, we find out the following&hellip;</p>
<p>A guy called Faro creates a company called Faro Automated Solutions which creates a bunch of semi-sentient machines which
are used as &ldquo;peacekeeping&rdquo; devices. They can self replicate and they &ldquo;eat biomass&rdquo; to sustain themselves indefinitely.
And of course, as these things are, there is a glitch and they become something called a Swarm which devourers everything
in their path. Until Dr. Elisabeth Sobeck comes along and saves the day with Project Zero Dawn.</p>
<p>And here comes the twist. Sobeck knows that the planet is doomed. There is a cryptographic thing where they need hundreds
of years to crack the machines encryption and shut them down. But humanity and anything that&rsquo;s a biomass doesn&rsquo;t have that
long. So she proposes to create Gaia. Which is a powerful AI that has various subroutine helpers called Hades, Apollo and
others. They contain the digitized version of everything living and after humanity and everything is gone, Gaia will
crack the code eventually in an underground shelter and repopulate the Earth with life. And that&rsquo;s where the robot animals
come in, they are basically terraforming. Making life possible.</p>
<p>But as these things go, something went wrong and Apollo, which contained all knowledge on Earth, has been destroyed and
the people reborn had no idea what&rsquo;s going on, where they are and how they are alive. The initial people were created
in tubes from zygotes.</p>
<p>And here comes Aloy. So Gaia had a subroutine called Hades, to destroy everything if terraforming failed or there was a
catastrophic event and the world needs resetting. Gaia can&rsquo;t do that because she is a fully featured, feeling, sentient
AI who is incapable of destruction and Hades is the opposite. It can take over, destroy, then give back control to Gaia.
Of course, Hades was corrupted and didn&rsquo;t want to give back control and started killing everything. Gaia created Aloy who
is a clone of Elisabeth Sobeck so she could access facilities with biometric scanners all over the place and find out the
truth about the world and fix Gaia and delete Hades.</p>
<p>It&rsquo;s quite the story! Incredibly well written with likable characters all along the way. It was well worth the time spent
on it, even if I didn&rsquo;t catch up on some reading. I regret nothing.</p>
<h2 id="conclusion">Conclusion</h2>
<p>That&rsquo;s it for these months. Next month I&rsquo;m planning on finishing two Go related books hopefully and will write some reviews
about those.</p>
<p>And as always,
Thanks for reading,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Blog refactor</title>
      <link>https://skarlso.github.io/2021/05/25/blog-refactor/</link>
      <pubDate>Tue, 25 May 2021 01:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2021/05/25/blog-refactor/</guid>
      <description><![CDATA[<h1 id="blog-refactor">Blog Refactor</h1>
<p>Finally, I went back and fixed a lot of old posts and old code entries. I tried to fix and repair links and images, but some are lost forever on some obscure WordPress blog which I used to use.</p>
<p>I&rsquo;m glad though that the code is intact and I could re-read a lot of my old stuff. It&rsquo;s interesting to see how much I evolved, how much my writing evolved. I used to write a lot of groovy and python and java and bash and ruby.</p>
<p>I&rsquo;ve been writing this blog for a long time now and I would like to write even more! For example, I&rsquo;m planning on a new series called, Things for People in a hurry, where I&rsquo;ll explain concepts and technologies in as less detail as possible, but still relevant and understandable. For people who just want to be in loop, but don&rsquo;t care / have time for an in-depth read ATM.</p>
<p>Hopefully I learn a lot of things while writing those sections and I hope that people will enjoy them and give me stuff they are interested about but don&rsquo;t have time to look up.</p>
<p>I&rsquo;m interested in all technology and concepts, such as Quantum computing too!</p>
<p>In any case,
Thanks for staying with me all these years, and here&rsquo;s to much much more!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Reader&#39;s Digest 2021-04</title>
      <link>https://skarlso.github.io/2021/04/21/readers-digest/</link>
      <pubDate>Wed, 21 Apr 2021 01:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2021/04/21/readers-digest/</guid>
      <description><![CDATA[<h1 id="readers-digest">Reader&rsquo;s Digest</h1>
<p>I thought it would a cool idea if I kept a summary of the things I&rsquo;ve read or listened to on a monthly
basis. Here is April of 2021 so far. Enjoy.</p>
<h2 id="invincible">Invincible</h2>
<p>After seeing it air on Amazon Prime, I had to go and read the comic. It&rsquo;s quite a lot, but I assure you it&rsquo;s worth it.
Some spoiler alerts&hellip;</p>
<p>Okay, so we follow this guy, Mark Grayson. He&rsquo;s Invincible. He is also and alien, called a Viltrumite. I can hardly
summaries over 3000 pages of comic books so I&rsquo;ll try to be brief.</p>
<p>The Viltrumites are a race of warrior people who wants to conquer the whole galaxy. They also have the power to do so.
They are virtually immortal, live for thousands of years and are very durable. They can fly, have super strength and
a bunch of other things. The stories are insane. We follow all kinds of people across multiverses, a lot of villains and
heroes. There is gore, sex, violance and immature jokes all around. It&rsquo;s fantastic.</p>
<p>There are better episodes and there are boring episodes as it goes with these things. The one thing that bothered me a lot
is that the Viltrumites, of course, have a weak spot. You have to remember that these are people who want to be eliminated
by a lot of other people in the whole galaxy. There is a literal coalition of planets who want to kill them.</p>
<p>And there are two main things which can kill / incapacitate them. The first one is a virus, which was developed by a
traiter Viltrumite which killed like 99.9% of them. And the other is the same weakness as the things have in the movie
called The quiet place. It&rsquo;s specific frequency sound. Granted, some very specific frequency, but it&rsquo;s sound. Because Viltrumites have a
delicate equilibrium because of their flying ability, if there is a specific frequency sound being emitted in close proximity
it can incapacitate or even kill a Viltrumite.</p>
<p>Which makes me wonder that for thousands of years in multiple, parallel universes and with thousands of alien races,
nobody even thought of doing that? It had to be Earth and Humans ( and a Dinosaur ) who came up with it? That&rsquo;s just
implausible really. And after being used only a couple of times, they don&rsquo;t use it again on a global scale!</p>
<p>Anyways. The story is still incredible and it has a lot of amazing content so I encourage comic lovers to read it all!</p>
<h2 id="conclusion">Conclusion</h2>
<p>That&rsquo;s it for this month. Some lengthy blog posts and Invincible pretty much took up my reading time.</p>
<p>And as always,
Thanks for reading,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Reader&#39;s Digest 2021-03</title>
      <link>https://skarlso.github.io/2021/03/23/readers-digest/</link>
      <pubDate>Tue, 23 Mar 2021 01:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2021/03/23/readers-digest/</guid>
      <description><![CDATA[<h1 id="readers-digest">Reader&rsquo;s Digest</h1>
<p>I thought it would a cool idea if I kept a summary of the things I&rsquo;ve read or listened to on a monthly
basis. Here is March of 2021 so far. Enjoy.</p>
<h2 id="the-aurora-database-paper">The Aurora Database paper</h2>
<p>The paper about Aurora database from AWS can be found here: <a href="http://nil.csail.mit.edu/6.824/2020/papers/aurora.pdf">Paper</a>.
It details the design decision taken to support a highly available, fault tolerant, fast replicating
database. They take the following approach&hellip; They modified mysql database such as that they only send
around the redo log and the redo log is enough to recover / replicate in order to achieve write and
read consistency. They separate the data into Protected Groups and speed up terabytes of recovery by
doing 10 Gigabyte segments in parallel. The database IS the logs. By only replicating the log instead
of the data and the data page, they save millions in networks costs. The main gain however, is that
the storage was modified to understand the application. Instead of using General store they use a storage
which understand the data. In this case, decoupling storage from the database, as so many do, was actually
a drawback.</p>
<h2 id="gcatch-paper">GCatch paper</h2>
<p>This paper is a static concurrency bug analyser for Go found here <a href="https://songlh.github.io/paper/gcatch.pdf">Paper</a>.</p>
<p>It&rsquo;s ingenious! It&rsquo;s a static analyser which finds mostly blocking bugs using channels in Go. In Go, it&rsquo;s
really easy to write concurrent software using something called <a href="https://tour.golang.org/concurrency/2">Channels</a>.
They are basically coroutines multiplexed onto kernel threads and thus you can have a million of them
running around doing stuff. Go effectively made IO operators CPU bound with them. Coroutines aren&rsquo;t new,
however, it&rsquo;s really easy to mess up code with channels in subtle ways. Analyzers exist, however, GCatch
argues that they can&rsquo;t find the most subtle of bugs, only some surface bugs really.</p>
<p>This paper proposes a tool which does inter-procedural, path-sensitive analysis and uses Z3 to find paths
which can lead to deadlocks in code that uses locking primitives and channels. It also contains five other
prominent tools. It converts mutexes into channels internally with buffer size zero and sends on it on
Lock and reads from it on Unlock, then performs a bunch of path combinations and goes through those
suspicious paths and performs its analysis.</p>
<p>They found a hundred and something bugs in Docker and Kubernetes. Things like, sending on a channel in
<code>select</code> when in fact, a timeout already returned, thus that Go routine is not indefinitely stuck. Since
it can&rsquo;t send its output on the channel, the program didn&rsquo;t quit so it&rsquo;s not GC-d. A simple fix is to
make the channel of size 1 so even if there is a chance that the scope quit it can still send and quit.
Like Exec.</p>
<p>It&rsquo;s an interesting read and the tool is awesome, however&hellip;. It was written with Go 14 and it&rsquo;s proving to
be difficult to port to current version using modules. I would hate to see this tool getting left behind
because it can&rsquo;t be turned into a linter.</p>
<h2 id="rhythm-of-war---brandon-sanderson">Rhythm of War - Brandon Sanderson</h2>
<p><a href="https://www.amazon.com/Rhythm-War-Stormlight-Archive-Book-ebook/dp/B0826NKZHR">Amazon</a>.</p>
<p>An epic continuation of this saga with over a 1000 pages long and 54 hours of listening time on Audible.
This story has been ongoing for a while now. Brandon Sanderson came out with the first book back in 2010.
This is the continuation of the Stormlight Archive series. These are massive master pieces. I first came
along Brandon Sanderson when I read the Mistborn series. That was another epic novel. I love reading
Sanderson because he comes up with some unique ways of magic or magic like abilities which have some
divine sense in the end, or have some interesting explanation. And their abilities are almost always
used in interesting ways.</p>
<p>For example, a simple ability to pull or push metal. Turns out that results in things like, shooting
coins, or literally flying as the person tosses a coin to the ground and pushes on it, pushing themselves
upwards in the end.</p>
<p>I could write many many pages about each and every fantastic novel, but I&rsquo;m going to stick to this one
expecting that people know about the series.</p>
<p>I&rsquo;ve listened to this one as I&rsquo;m insane busy, I couldn&rsquo;t have read a 1000 something pages book.
The fantastic work of Micheal Kramer and Kate Reading is always a treat to listen too. They are both
excellent readers always making the characters live through their words.</p>
<p>SPOILERS:</p>
<p>This time we mostly follow Eshonai&rsquo;s and Venli&rsquo;s but we finally also get what we wanted all these years.
Finally, Kaladin and Shallan face their inner demons. And even though they aren&rsquo;t fully okay, Kaladin
speaks his fourth oat and Shallan remembers her past. As much as I love this story, I don&rsquo;t believe I
would have been able to listen or read another 1000 pages without these two resolving their problems.
You root for them so hard, it&rsquo;s exhausting.</p>
<p>I won&rsquo;t spoil everything but the twist at the end left me dumbstruck! It was such an amazing finish.</p>
<p>The story follows the fused as they invade Urithiru. There is a side story for Navani and Jasna
doing their own thing and we do root for Navani and her fantastic discoveries regarding light and powers,
but Jasna is a side character in this story. Another main character is Witt. We finally get to know
who he is and where he comes from. We also understand now that the Fused are actually from another planet
in the same system and Odium just wants to get off this system and fight a holy war with some ancient Gods
somewhere. A lot of things which made no sense are revealed finally. I recommend it if you have the time
to listen or read it.</p>
<h2 id="how-to-take-smart-notes">How to take smart notes</h2>
<p><a href="https://www.amazon.com/How-Take-Smart-Notes-Nonfiction-ebook/dp/B06WVYW33Y">Amazon</a>.</p>
<p>This one&rsquo;s review will be condensed because it would be rather lengthy otherwise. It&rsquo;s basically talking about
how to use the <a href="https://zettelkasten.de/">Zettelkasten</a> system. But it does so much more then that. It challenges
the way you think, the way you learn the way things are taught in school and the way you process and store
information. Condensed I would say these are the main points:</p>
<ul>
<li>Connect new information to existing information. Information without connection isn&rsquo;t worth much and will be
remembered poorly or not at all.</li>
<li>Always read with a pen in your hand and take notes about what you are reading.</li>
<li>Always use your own words and never just copy blindly; by doing this, you will better understand what you just
read. The same goes to things like, writing a blog in which you explain something you think you know. It reveals
the black holes in your knowledge which you didn&rsquo;t even know exist.</li>
<li>Don&rsquo;t try to group based on topics. That will result in forced connections and will leave you confined within
that topic. Topics should emerge from your notes and then gathered into indexes which contain links to related
notes and information.</li>
<li>Tags are useful but don&rsquo;t over do them. If you have a 1000 tags your information will be lost and hard to find
because things that are unrelated will show up in the searches. So go easy on the tags</li>
<li>Note taking is a chore. It&rsquo;s not something that you just do and it just works. Good note taking requires effort.
You take notes while you read then transcribe them into Zettelkasten and throw away the rest. Those are transient
notes. Zettelkasten notes focus on the gist of things. On the meat!</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>And that&rsquo;s all for this months. Rhythm of War, the papers and the note taking book pretty much took all my
time away, so not much else got done since January. But I still think this is a nice finish. Especially
considering Rhythm of War was such a huge epic.</p>
<p>And as always,
Thanks for reading,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Reader&#39;s Digest 2021-01</title>
      <link>https://skarlso.github.io/2021/02/01/readers-digest/</link>
      <pubDate>Mon, 01 Feb 2021 01:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2021/02/01/readers-digest/</guid>
      <description><![CDATA[<h1 id="readers-digest">Reader&rsquo;s Digest</h1>
<p>I thought it would a cool idea if I kept a summary of the things I&rsquo;ve read or listened to on a monthly
basis. Here is January of 2021 so far. Enjoy.</p>
<h2 id="all-systems-red---murderbot">All systems red - Murderbot</h2>
<p>This book is SHORT. It&rsquo;s little over 3 hours of listening time. I&rsquo;m listening at 1.30 so it&rsquo;s just short of 2 hours.
But it&rsquo;s entertaining. The murderbot series is following a rouge security bot which hacked its own governor module
and is self aware and free. But&hellip; it kind of hates humans and interacting with them. It just calls itself murderbot
but has no intention of killing all humans. Instead, all its wants to do is basically&hellip; watch movies and various series on something called a Feed. In the first book of the series, this one, we follow Murderbot protect a few humans
that it gets to short of like after an attempt on their lives.</p>
<p>The narrator, Kevin R. Free, is doing a great job of impersonating the robot and you can feel the anxiety from his words when inevitably, the robot has to interact with humans. Whether it likes it or not&hellip;</p>
<h2 id="artificial-condition---murderbot">Artificial Condition - Murderbot</h2>
<p>Another short story following our Murderbot. This time, it wants to get to the bottom of a mystery involving its past.
In his past, the Murderbot, when it hacked its governor module, it went berserk and killed 80 people in the process. The company who owned it, covered it all up. Or so it thought. During its journey to find out what happened it met a new friend, Art. Art is a huge vessel capable of massive computing capacity, and happens to also love watching series.
They team up and help a rag-tag group of researchers while trying to find out what happened to Murderbot and those 80 people.</p>
<h2 id="rogue-protocol">Rogue Protocol</h2>
<p>Another fantastic episode of Murderbot. You can sense that the bot is slowly evolving into a more caring bot. Even though it&rsquo;s saying repeatedly that it doesn&rsquo;t case, it starts to care. This book was an action packed one. Lot&rsquo;s of tension and fear inducing moments. Silence then all out war! We also meet Micky, who is a &ldquo;pet bot&rdquo; for some humans. Their relationship starts off as rocky but after a while, Murderbot comes to appreciate Micky for another free soul. There are some open question in there once the story finishes.</p>
<h2 id="the-vexed-generation---magician-20">The vexed generation - Magician 2.0</h2>
<p>Being a programmer, I followed Magician 2.0 with an interest. I listen to all of the books in the series. It was fun at first, but then started to get a bit low in quality and repetitive. I don&rsquo;t really care about the people in it, and I don&rsquo;t really care about what&rsquo;s happening to them. And since they are effectively immortal there is no real danger to them at all. In this episode however, there was real danger at the end. And while the protagonist kids were kind of annoying, and it could have been narrated better and I felt like some of the characters weren&rsquo;t fully utilized, the story kind of still was fun to read. Definitely better than the previous one about dragons.</p>
<h2 id="heavens-river---bobiverse">Heaven&rsquo;s River - Bobiverse</h2>
<p>The latest addition to the Bobiverse universe. This time there is civil war amongst the Bobs and, of course, there is a new species to explore. The species was interesting, and the talk about mega-structures was also interesting, but I found that the lack of coding, and fighting and technical stuff ( what caught me on the first couple of Bob adventures ) left me wanting for more and left me with an empty feeling at the end. I really missed the proves of Bob and couldn&rsquo;t care less about Starfleet.</p>
<h2 id="armada">Armada</h2>
<p>This one was interesting. It talks about the same premise as The Last Starfighter ( there is a reference to that in there ) which I found fascinating as a child. It is about the fact that an alien race uses video games to find the best soldier for a mission to save the universe. This time though the Earth is doing the recruiting and it is against an alien invasion. And much like Ender&rsquo;s Game, it turns out that the threat is real and that all fighting on the video game that our protagonist did was preparing him for this situation. The twist was pretty good too.</p>
<h2 id="prometheus-up-and-running">Prometheus Up And Running</h2>
<p>This one has a larger post incoming.</p>
<p>That&rsquo;s all for this month.
Thanks for reading,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How to deploy a Go (Golang) backend with a React frontend separately on Kubernetes - Part One</title>
      <link>https://skarlso.github.io/2020/07/23/kubernetes-deploy-golang-react-apps-separately-part1/</link>
      <pubDate>Thu, 23 Jul 2020 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2020/07/23/kubernetes-deploy-golang-react-apps-separately-part1/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Welcome. This is a longer post about how to deploy a Go backend with a React frontend
on Kubernetes as separate entities. Instead of the usual compiled together single binary Go
application, we are going to separate the two. Why? Because usually a React frontend is just a &ldquo;static&rdquo;
SPA app with very little requirements in terms of resources, while the Go backend does most of the
leg work, requiring a lot more resources.</p>
<p>Part two of this will contain scaling, utilization configuration, health probes, readiness probes,
and how to make sure our application can run multiple instances without stepping on each other&rsquo;s toes.</p>
<p><em>Note</em>: This isn&rsquo;t going to be a Kubernetes guide. Some knowledge is assumed.</p>
<h2 id="summary">Summary</h2>
<p><img src="/img/kube/short-version.png" alt="Give me the short version"></p>
<p>This post details a complex setup of an infrastructure with a second part coming on scaling and how to make
your application scalable in the first place by doing idempotent transactions or dealing with locking and
several instances of the same application not stepping on each other&rsquo;s foot.</p>
<p>This, part one, details how to deploy traditional REST + Frontend based application in Go + React, but not bundled
together as a single binary, instead having the backend separate from the frontend. They key in doing so is explained
at the <a href="#ingress">Ingress</a> section when talking about routing specific URIs to the backend and frontend services.</p>
<p>If you are familiar with Kubernetes and infrastructure setup, feel free to skip ahead to that section. Otherwise, enjoy
the drawings or the writing or both.</p>
<h2 id="technology">Technology</h2>
<p>The SPA app will be handled by <a href="https://www.npmjs.com/package/serve">Serve</a> while the Go backend
will use <a href="https://echo.labstack.com/">Echo</a>. The database will be Postgres.</p>
<p>We are going to apply some best practices using Network Policies to cordon off traffic that we don&rsquo;t
want to go outside.</p>
<p>We will set up HTTPS using cert-manager and let&rsquo;s encrypt. We&rsquo;ll be using nginx as ingress
provider.</p>
<h2 id="code">Code</h2>
<p><img src="/img/kube/architect.png" alt="Let me show you the code"></p>
<p>All, or most of the code, including the application can be found here:</p>
<p><a href="https://github.com/staple-org">Staple</a>. The application is a simple reading list manager with
user handling, email sending and lots of database access.</p>
<p>Let&rsquo;s get to it then!</p>
<h2 id="kubernetes-provider">Kubernetes Provider</h2>
<p><img src="/img/kube/audition.png" alt="Difficult Choice"></p>
<p>Let&rsquo;s start with the obvious one. Where do you would like to create your Kubernetes cluster?</p>
<p>There are four major providers now-a-days. AWS <a href="https://aws.amazon.com/eks/">EKS</a>, GCP <a href="https://cloud.google.com/kubernetes-engine">GKE</a>,
Azure <a href="https://azure.microsoft.com/en-us/services/kubernetes-service/">AKS</a> and DigitalOcean <a href="https://www.digitalocean.com/products/kubernetes/">DKE</a>.
Personally, I prefer DO because, it&rsquo;s a lot cheaper than the others. The downside is that DO only
provides ReadWriteOnce persistent volumes. This gets to be a problem when we are trying to update
and the new Pod can&rsquo;t mount the volume because it&rsquo;s already taken by the existing one. This can be
solved by a good ol NFS instance. But that&rsquo;s another story.</p>
<p>AWS' was late to the party and their solution is quite fragile and the API is terrible. GCP is best in terms
of technicalities, api, handling, and updates. Azure is surprisingly good, however, the documentation is
most of the times out of date or even plain incorrect at some places.</p>
<h2 id="setup-basics">Setup Basics</h2>
<p><img src="/img/kube/owl.jpg" alt="Owl"></p>
<p>To setup your Kubernetes instance, follow DigitalOcean&rsquo;s Kubernetes Getting Started guide. It&rsquo;s really simple.
When you have access to the cluster via kubectl I highly recommend using this tool: <a href="https://github.com/derailed/k9s">k9s</a>.</p>
<p>It&rsquo;s a flexible and quite handy tool for quick observations, logs, shells to pods, edits and generally following what&rsquo;s
happening to your cluster.</p>
<p>Now that we are all set with our own little cluster, it&rsquo;s time to have some people move in. First, we are going to
install cert-manager.</p>
<p><em>Note</em>: I&rsquo;m not going to use Helm because I think it&rsquo;s unnecessary in this setting. We aren&rsquo;t going to install
these things in a highly configurable way and updating with helm is a pain in the butt. For example, for cert-manager
the update with helm takes several steps, whilst updating with a plain yaml file is just applying the next version
of the yaml file.</p>
<p>I&rsquo;m not going to explain how to install cert-manager or nginx. I&rsquo;ll link to their respective guides because frankly, they
are simple to follow and work out of the box.</p>
<p>To install nginx, simply apply the yaml file located here: <a href="https://kubernetes.github.io/ingress-nginx/deploy/#digital-ocean">DigitalOcean Nginx</a>.</p>
<p>To install cert-manager follow this guide: <a href="https://cert-manager.io/docs/installation/kubernetes/">cert-manager</a>.
Follow the regular manifest install part, then ignore the Helm part and proceed with verification and then install
your issuer. I used a simple ACME/http01 issuer from here: <a href="https://cert-manager.io/docs/configuration/acme/http01/">acme/http01</a></p>
<p><em>Note</em>: That acme configuration contains the <strong>staging</strong> url. This is to test that things are working. Once you are
sure that everything is wired up correctly, switch that url to this one:
<code>https://acme-v02.api.letsencrypt.org/directory</code> -&gt; prod url. For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">cert-manager.io/v1alpha2</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterIssuer</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">letsencrypt-prod</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">acme</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="c"># The ACME server URL</span><span class="w">
</span><span class="w">    </span><span class="nt">server</span><span class="p">:</span><span class="w"> </span><span class="l">https://acme-v02.api.letsencrypt.org/directory</span><span class="w">
</span><span class="w">    </span><span class="c"># Email address used for ACME registration</span><span class="w">
</span><span class="w">    </span><span class="nt">email</span><span class="p">:</span><span class="w"> </span><span class="l">your@email.com</span><span class="w">
</span><span class="w">    </span><span class="c"># Name of a secret used to store the ACME account private key</span><span class="w">
</span><span class="w">    </span><span class="nt">privateKeySecretRef</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">letsencrypt-prod</span><span class="w">
</span><span class="w">    </span><span class="c"># Enable the HTTP-01 challenge provider</span><span class="w">
</span><span class="w">    </span><span class="nt">solvers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">http01</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">ingress</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">class</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p><em>Note</em>: I&rsquo;m using a ClusterIssuer because I have multiple domains and multiple namespaces.</p>
<p>That&rsquo;s it. Cert-manager and nginx should be up and running. Later on, we will create our own
ingress rules.</p>
<h2 id="domain">Domain</h2>
<p>Next, you&rsquo;ll need a domain to bind too. There are a gazillion domain providers out there like
no-ip, GoDaddy, HostGator, Shopify and so on. Choose one which is available to you or has the best
prices.</p>
<p>There are some good guides on how to choose a domain and where to create it.
For example: <a href="https://domains.google/learning-center/5-things-to-watch-out-for-when-buying-a-domain/">5 things to watch out for when buying a domain</a>.</p>
<h1 id="the-application">The application</h1>
<p>Alright, let&rsquo;s put together the application.</p>
<p><img src="/img/kube/assemble.png" alt="Assemble"></p>
<h2 id="structure">Structure</h2>
<p>Every piece of our infrastructure will be laid out in yaml files. I believe in infrastructure as code.
If you run a command you will most likely forget about it, unless it&rsquo;s logged and / or is replayable.</p>
<p>This is the structure I&rsquo;m using:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">.
├── LICENSE
├── README.md
├── certificate_request
│   └── certificate_request.yml
├── configmaps
│   └── staple_initdb_script.yaml
├── database
│   ├── staple_db_deployment.yaml
│   ├── staple_db_network_policy.yaml
│   ├── staple_db_pvc.yaml
│   └── staple_db_service.yaml
├── namespace
│   └── staple_namespace.yaml
├── primer.sql
├── rbac
├── secrets
│   ├── staple_db_password.yaml
│   └── staple_mg_creds.yaml
├── staple-backend
│   ├── staple_deployment.yaml
│   └── staple_service.yaml
└── staple-frontend
    ├── staple_deployment.yaml
    └── staple_service.yaml
</code></pre></td></tr></table>
</div>
</div><p>One other possible combination is, if you have multiple applications:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">.
├── README.md
├── applications
│   ├── confluence
│   │   ├── db
│   │   │   ├── db_deployment.yaml
│   │   │   └── db_service.yaml
│   │   ├── deployment
│   │   │   └── deployment.yaml
│   │   ├── pvc
│   │   │   └── confluence_app_pvc.yaml
│   │   └── service
│   │       └── service.yaml
│   ├── gitea
│   │   ├── config
│   │   │   ├── app.ini
│   │   │   └── gitea_config_map.yaml
│   │   ├── db
│   │   │   ├── gitea_db_deployment.yaml
│   │   │   ├── gitea_db_network_policy.yaml
│   │   │   ├── gitea_db_pvc.yaml
│   │   │   └── gitea_db_service.yaml
│   │   ├── deployment
│   │   │   └── gitea_deployment.yaml
│   │   ├── pvc
│   │   │   └── gitea_app_pvc.yaml
│   │   └── service
│   │       └── gitea_service.yaml
├── cronjobs
│   ├── cronjob1
│   │   ├── Dockerfile
│   │   ├── README.md
│   │   ├── go.mod
│   │   ├── go.sum
│   │   ├── cron.yaml
│   │   └── main.go
├── ingress
│   ├── example1
│   │   ├── example1_ingress_resource.yaml
│   │   └── gitea_ssh_configmap.yaml
│   ├── example2
│   │   └── example2_ingress_resource.yaml
│   ├── lets-encrypt-issuer.yaml
│   └── nginx
│       ├── nginx-ingress-controller-deployment.yaml
│       └── nginx-ingress-controller-service.yaml
└── namespaces
    ├── example1_namespace.yaml
    ├── example2_namespace.yaml
</code></pre></td></tr></table>
</div>
</div><h2 id="namespace">Namespace</h2>
<p>Before we begin, we&rsquo;ll create a namespace for our application to properly partition all our entities.</p>
<p>To create a namespace we&rsquo;ll use this yaml <code>example_namespace.yaml</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Namespace</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">example</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Apply this with <code>kubectl -f apply example_namespace.yaml</code>.</p>
<h2 id="the-database">The Database</h2>
<p>Deploying a Postgres database on Kubernetes is actually really easy. You need five things to have a basic, but
relatively secure installation.</p>
<h3 id="secret">Secret</h3>
<p>The secret contains our password and our database user. In postgres, if you define a user using <code>POSTGRES_USER</code>
postgres will create the user and a database with the user&rsquo;s name. This could come from Vault too, but
the Kubernetes secret is usually enough since it should be a closed environment anyways. But for important information
I would definitely use an admission policy and some vault secret goodness. (Maybe another post?)</p>
<p>Our secret looks like this:
database_secret.yaml</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Secret</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db-password</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">POSTGRES_PASSWORD</span><span class="p">:</span><span class="w"> </span><span class="l">cGFzc3dvcmQxMjM=</span><span class="w">
</span><span class="w">  </span><span class="c"># This creates a user and a db with the same name.</span><span class="w">
</span><span class="w">  </span><span class="nt">POSTGRES_USER</span><span class="p">:</span><span class="w"> </span><span class="l">c3RhcGxl</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>To generate the base64 code for a password and a user, use:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">echo</span> -n <span class="s2">&#34;password123&#34;</span> <span class="p">|</span> base64
<span class="nb">echo</span> -n <span class="s2">&#34;username&#34;</span> <span class="p">|</span> base64
</code></pre></td></tr></table>
</div>
</div><p>&hellip;and paste the result in the respective fields. Once done, apply with <code>kubectl -f apply database_secret.yaml</code>.</p>
<h3 id="deployment">Deployment</h3>
<p>The deployment which configures our database. Looks something like this (database_deployment.yaml):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">postgres</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">postgres:11</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POSTGRES_USER</span><span class="w">
</span><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POSTGRES_PASSWORD</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db-password</span><span class="w">
</span><span class="w">                </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">POSTGRES_PASSWORD</span><span class="w">
</span><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/var/lib/postgresql/data</span><span class="w">
</span><span class="w">          </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">data</span><span class="w"> </span><span class="c"># important so it gets mounted correctly</span><span class="w">
</span><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db-data</span><span class="w">
</span><span class="w">        </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/docker-entrypoint-initdb.d/staple_initdb.sql</span><span class="w">
</span><span class="w">          </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">staple_initdb.sql</span><span class="w">
</span><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">bootstrap-script</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db-data</span><span class="w">
</span><span class="w">          </span><span class="nt">persistentVolumeClaim</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">claimName</span><span class="p">:</span><span class="w"> </span><span class="l">do-storage-staple-db</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">bootstrap-script</span><span class="w">
</span><span class="w">          </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-initdb-script</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Note the two volume mounts.</p>
<p>The first one makes sure that our data isn&rsquo;t lost when the database pod itself restarts. It creates a mount
to a persistent volume which is defined a few lines below by <code>persistentVolumeClaim</code>. <code>subPath</code> is important
in this case otherwise you&rsquo;ll end up with a lost&amp;found folder.</p>
<p>The second mount is a postgres specific initialization file. Postgres will run that sql file when it
starts up. I&rsquo;m using it to create my application&rsquo;s schema.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">create</span><span class="w"> </span><span class="k">database</span><span class="w"> </span><span class="n">staples</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">users</span><span class="w"> </span><span class="p">(</span><span class="n">email</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span><span class="w"> </span><span class="n">password</span><span class="w"> </span><span class="nb">text</span><span class="p">,</span><span class="w"> </span><span class="n">confirm_code</span><span class="w"> </span><span class="nb">text</span><span class="p">,</span><span class="w"> </span><span class="n">max_staples</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">staples</span><span class="w"> </span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="nb">serial</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="w"> </span><span class="nb">text</span><span class="p">,</span><span class="w"> </span><span class="n">created_at</span><span class="w"> </span><span class="k">timestamp</span><span class="p">,</span><span class="w"> </span><span class="n">archived</span><span class="w"> </span><span class="n">bool</span><span class="p">,</span><span class="w"> </span><span class="n">user_email</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">));</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>And it comes from a configmap which looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-initdb-script</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">staple_initdb.sql</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="l">create table users (email varchar(255), password text, confirm_code text, max_staples int);</span><span class="w">
</span><span class="w">    </span><span class="l">create table staples (name varchar(255), id serial, content text, created_at timestamp, archived bool, user_email varchar(255));</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="network-policy">Network Policy</h3>
<p>Network policies are important if you value your privacy. They restrict a PODs communication to a certain namespace
OR even to between applications only. By default I like to deny all traffic and then slowly open the valve until everything works.</p>
<p><img src="/img/kube/szaffi.png" alt="Szaffi">
Kudos if you know who this is. (mind my terrible drawing capabilities)</p>
<p>We&rsquo;ll use a basic network policy which will restrict the DB to talk to anything BUT the backend. Nothing else
will be able to talk to this Pod.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.k8s.io/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">NetworkPolicy</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db-network-policy</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">podSelector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db</span><span class="w">
</span><span class="w">  </span><span class="nt">policyTypes</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">Ingress</span><span class="w">
</span><span class="w">  </span>- <span class="l">Egress</span><span class="w">
</span><span class="w">  </span><span class="nt">ingress</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">from</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">podSelector</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">5432</span><span class="w">
</span><span class="w">  </span><span class="nt">egress</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">to</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">podSelector</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">5432</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>The important bit here is the <code>podSelector</code> part. The label will be the label used by the application deployment.
This will restrict the Pod&rsquo;s incoming and outgoing traffic to that of the application Pod including denying internet
traffic.</p>
<h3 id="pvc">PVC</h3>
<p>The persistent volume claim definition is straight forward:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PersistentVolumeClaim</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">do-storage-staple-db</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">accessModes</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">ReadWriteOnce</span><span class="w">
</span><span class="w">  </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">storage</span><span class="p">:</span><span class="w"> </span><span class="l">10Gi</span><span class="w">
</span><span class="w">  </span><span class="nt">storageClassName</span><span class="p">:</span><span class="w"> </span><span class="l">do-block-storage</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>10 gigs should be enough anything.</p>
<p><img src="/img/kube/gates.png" alt="Gates"></p>
<h3 id="service">Service</h3>
<p>The service will expose the database deployment to our cluster.</p>
<p>Our service is fairly basic:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db-service</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">5432</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db</span><span class="w">
</span><span class="w">  </span><span class="nt">clusterIP</span><span class="p">:</span><span class="w"> </span><span class="l">None</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>That&rsquo;s done with the database. Next up is the backend.</p>
<h2 id="the-backend">The backend</h2>
<p>The backend itself is written in a way that it doesn&rsquo;t require a persistent storage so
we can skip that part. It only needs three pieces. A secret, a deployment definition and the
service exposing the deployment.</p>
<h3 id="secret-1">Secret</h3>
<p>First, we create a secret which contains Mailgun credentials.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Secret</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-mg-creds</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">MG_DOMAIN</span><span class="p">:</span><span class="w"> </span><span class="l">cGFzc3dvcmQxMjM=</span><span class="w">
</span><span class="w">  </span><span class="nt">MG_API_KEY</span><span class="p">:</span><span class="w"> </span><span class="l">cGFzc3dvcmQxMjM=</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="database-connection">Database connection</h3>
<p>The connection settings are handled through the same secret which is used to spin up the DB itself.
We have to only mount that here too and we are good.</p>
<h3 id="deployment-1">Deployment</h3>
<p>Which brings us to the deployment. This is a bit more involved.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-app</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">        </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">        </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">skarlso/staple:v0.1.0</span><span class="w">
</span><span class="w">        </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent</span><span class="w">
</span><span class="w">        </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;500Mi&#34;</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;250m&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;1000Mi&#34;</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;500m&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POD_NAMESPACE</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">fieldRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">fieldPath</span><span class="p">:</span><span class="w"> </span><span class="l">metadata.namespace</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">DB_PASSWORD</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db-password</span><span class="w">
</span><span class="w">                </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">POSTGRES_PASSWORD</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">MG_DOMAIN</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-mg-creds</span><span class="w">
</span><span class="w">                </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">MG_DOMAIN</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">MG_API_KEY</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-mg-creds</span><span class="w">
</span><span class="w">                </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">MG_API_KEY</span><span class="w">
</span><span class="w">        </span><span class="nt">args</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- --<span class="l">staple-db-hostname=staple-db-service.cronohub.svc.cluster.local:5432</span><span class="w">
</span><span class="w">          </span>- --<span class="l">staple-db-username=staple</span><span class="w">
</span><span class="w">          </span>- --<span class="l">staple-db-database=staple</span><span class="w">
</span><span class="w">          </span>- --<span class="l">staple-db-password=$(DB_PASSWORD)</span><span class="w">
</span><span class="w">          </span>- --<span class="l">mg-domain=$(MG_DOMAIN)</span><span class="w">
</span><span class="w">          </span>- --<span class="l">mg-api-key=$(MG_API_KEY)</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-port</span><span class="w">
</span><span class="w">          </span><span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">9998</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>There are a few important points here and I won&rsquo;t explain them all, like the resource restrictions,
which you should be familiar with by now. I&rsquo;m using a mix of 12factor app&rsquo;s environment configuration
and command line arguments for the application configuration. The app itself is not using os.Environ
but the args.</p>
<p>The args point to the cluster local dns of the database, some db settings, and the mailgun credentials.</p>
<p>It also exposes the container port 9998 which is Echo&rsquo;s default port.</p>
<p>Now all we need is the service.</p>
<h3 id="service-1">Service</h3>
<p>Without much fanfare:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-service</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">service-port</span><span class="w">
</span><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">9998</span><span class="w">
</span><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="l">staple-port</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>And with this, the backend is done.</p>
<h2 id="the-frontend">The frontend</h2>
<p>The frontend, similarly to the backend, does not require a persistent volume. We can skip that one too.</p>
<p>In fact it only needs two things, a deployment and a service, and that&rsquo;s all. It uses serve to host the
static files. Honestly, that could also be a Go application serving the static content or anything
that can serve static files.</p>
<h3 id="deployment-2">Deployment</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">        </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">        </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">skarlso/staple-frontend:v0.0.9</span><span class="w">
</span><span class="w">        </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent</span><span class="w">
</span><span class="w">        </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;500Mi&#34;</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;250m&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;1000Mi&#34;</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;500m&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POD_NAMESPACE</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">fieldRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">fieldPath</span><span class="p">:</span><span class="w"> </span><span class="l">metadata.namespace</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">REACT_APP_STAPLE_DEV_HOST</span><span class="w">
</span><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-front</span><span class="w">
</span><span class="w">          </span><span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">5000</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="service-2">Service</h3>
<p>And the service:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-front-service</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-front</span><span class="w">
</span><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">5000</span><span class="w">
</span><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="l">staple-front</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>And with that the backend and frontend are wired together and ready to receive traffic.</p>
<p>All pods should be up and running without problems at this point. If you have any trouble deploying
things, please don&rsquo;t hesitate to leave a question in the comments.</p>
<h2 id="ingress">Ingress</h2>
<p>Fantastic. Now, our application is running. We just need to expose it and route traffic to it.
The backend has the api route <code>/rest/api/v1/</code>. The frontend has the route syntax <code>/login</code>, <code>/register</code>
and a bunch of others. The key here is that all of them are under the same domain name but based on the URI
we need to direct one request to the backend the other to the frontend.</p>
<p>This is done via nginx&rsquo;s routing logic using regex. In an nginx config this would be the <code>location</code> part.
It&rsquo;s imperative that the order of the routing is from more specific towards more general Because we need to catch
the specific URIs first.</p>
<h3 id="ingress-resource">Ingress Resource</h3>
<p>To do this, we will create something called an <a href="https://docs.nginx.com/nginx-ingress-controller/configuration/ingress-resources/">Ingress Resource</a>.
Note that this is Nginx&rsquo;s ingress resource and not Kubernetes'. There is a difference.</p>
<p>I suggest reading up on that link about the ingress resource because it reads quite well and will explain how it
works and fits into the Kubernetes environment.</p>
<p>Got it? Good. We&rsquo;ll create one for <code>staple.app</code> domain:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">extensions/v1beta1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Ingress</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-app-ingress</span><span class="w">
</span><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">kubernetes.io/ingress.class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;nginx&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">cert-manager.io/cluster-issuer</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;letsencrypt-prod&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">cert-manager.io/acme-challenge-type</span><span class="p">:</span><span class="w"> </span><span class="l">http01</span><span class="w">
</span><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/rewrite-target</span><span class="p">:</span><span class="w"> </span><span class="l">/$1</span><span class="w"> </span><span class="c"># this is important</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">tls</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">hosts</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="l">staple.app</span><span class="w">
</span><span class="w">    </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">staple-app-tls</span><span class="w">
</span><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">staple.app</span><span class="w">
</span><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">backend</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">serviceName</span><span class="p">:</span><span class="w"> </span><span class="l">staple-service</span><span class="w">
</span><span class="w">          </span><span class="nt">servicePort</span><span class="p">:</span><span class="w"> </span><span class="l">ss-port</span><span class="w"> </span><span class="c"># 9998</span><span class="w">
</span><span class="w">        </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/(rest/api/1.*)</span><span class="w">
</span><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">staple.app</span><span class="w">
</span><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">backend</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">serviceName</span><span class="p">:</span><span class="w"> </span><span class="l">staple-front-service</span><span class="w">
</span><span class="w">          </span><span class="nt">servicePort</span><span class="p">:</span><span class="w"> </span><span class="l">sfs-port</span><span class="w"> </span><span class="c"># 5000</span><span class="w">
</span><span class="w">        </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/(.*)</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Let&rsquo;s take a look at what&rsquo;s going on here. The first thing to catch the eye are the annotations.
These are configuration settings for nginx, cert-manager and Kubernetes.
We have the cluster issuer&rsquo;s name. The challenge type, which we decided should be http01,
and the most important part, the rewrite-target setting. This will use the first capture group
as a base after the host.</p>
<p>With this rewrite rule in place, the <code>paths</code> values need to provide a capture group. The first in line will see
everything that goes to the urls like: <code>staple.app/rest/api/1/token</code>, <code>staple.app/rest/api/1/staples</code>,
<code>staple.app/rest/api/1/user</code>, etc. The first part of the url is the host <code>staple.app</code>, second part is <code>/(rest/api/1/.*)</code>
for which the result is that group number one ($1) will be <code>rest/api/1/token</code>. Nginx now sees that we
have a backend route for that and will send this URI along to the service. Our service picks it up
and will match that URI to the router configuration.</p>
<p><img src="/img/kube/regex.png" alt="Regex"></p>
<p>If there is a request like, <code>staple.app/login</code>, which is our frontend&rsquo;s job to pick up, the first rule
will not catch it because the regex isn&rsquo;t matching, so it falls through to the second one, which
is the frontend service that is using a &ldquo;catch all&rdquo; regex. Like ip tables, we go from
specific to more general.</p>
<h1 id="ending-words">Ending words</h1>
<p>And that&rsquo;s it. If everything works correctly, then the certificate service wired up the https certs and
we should be able ping the rest endpoint under <code>https://staple.app/rest/api/1/token</code> and log in to the app
in the browser using <code>https://staple.app</code>.</p>
<p>Stay tuned for the second part where we&rsquo;ll scale the thing up!</p>
<p>Thanks for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How to do a good code review</title>
      <link>https://skarlso.github.io/2020/05/11/good-code-reviews/</link>
      <pubDate>Mon, 11 May 2020 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2020/05/11/good-code-reviews/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>This time, I would like to talk a little bit about code reviews.</p>
<p>How do you do code reviews? Don&rsquo;t hesitate to share it in the comments.</p>
<p>How do I do code reviews? Well read on if you would like to know.</p>
<h1 id="the-top-down-approach">The Top Down approach</h1>
<p>If I&rsquo;m dealing with a small code change, a couple of lines here and there in the odd file
first, I&rsquo;ll try to understand why the review is there? What was it trying to achieve? What&rsquo;s
the goal of the change? Is there a ticket/issue I can read for background info? Or an RFC?</p>
<p>Understanding the goal of the change will let you know how to read the change. I usually also
scribble down some notes and my expectations to see if the change meets them or does something
completely different. And if it&rsquo;s different, maybe my expectations were wrong.</p>
<p>In any case, I will have a framework to start with. It&rsquo;s important to understand why the change
is there in the first place. I cannot stress this enough.</p>
<h1 id="logical-follow">Logical follow</h1>
<p>If the change is large, the top down approach will simply not work. You will loose track of
why the change is and your logical big picture image will fade into nothingness after a hundred lines.</p>
<p>In Github at least, what I would do to approach this, is close all views and just have a general sense first
how big the change is, and what files changed (after I understand why the change is there and what is it trying
to change and / or solve). Once I have a feel for the structure I would look for changes which are trivial.
For example parameter changes of a function. I would expect that in that case there will be a lot of changes at places
where that function was called. I would review those and then go on.</p>
<p>If there is any, I would look for an entry point into the change. Is there a new handler? A new API?
A new method? Did an API change? If so, did that change propagate all the way through the API&rsquo;s implementation?</p>
<p>If it&rsquo;s a huge number of deletes, I would look for the deleted code in the whole codebase. Did they miss something?
Was that code referenced in another section of the code or possibly in another service? In that case, do a search
on the whole organization on all repositories if you believe that that makes sense.</p>
<p>If it&rsquo;s concurrent code&hellip; are they syncing it up at some point? Are they releasing the lock? Is the lock happening
at the right place? In Go for example, you can get a lock and then <code>defer w.Lock.Unlock()</code> it. This makes
for a convenient way of &ldquo;forgetting&rdquo; about the lock acquire. But this is counterproductive in some cases.</p>
<p>Imagine you have a function which acquires the lock in the begin. Then does a for loop which takes a couple of seconds
but doesn&rsquo;t actually use the map or the value you were trying to protect. In that case you are taking the
lock but aren&rsquo;t actually using it. There was no point in acquiring it at the beginning of the function.</p>
<h1 id="general-order">General order</h1>
<p>There are a LOT of things one can review in a PR. Minute things and a myriad if small to big logical
problems and ramifications. It&rsquo;s not possible to list them all. So here are some general rules I would
follow:</p>
<h2 id="syntax">Syntax</h2>
<p>The first thing I would do is look through the syntax and follow this mnemonic: BUD.
B(ottleneck), U(nnecessary code), D(uplicate work). Spotting these is usually easy but it can happen
that the change is subtle. Bottlenecks are often embedded loops in loops or a very sneaky recursion.
Unnecessary code is sometimes harder to spot. This is duplicate code which could be extracted. It can be subtle
because it&rsquo;s likely that only a small thing changes and at first glance it&rsquo;s not trivial how to extract
the rest of the code around that small thing. Maybe it can be a function (if your language supports functions
as first class citizens) which could close over a value and change it multiple times.</p>
<p>Duplicate work is when a loop is calculating something over and over but it&rsquo;s actually the same thing or
we already have that information and it&rsquo;s not likely that it would change so it can be reused. These kind of
problems are solved through caching or simply just do it once, store the result, then pass it around. Candidates
for this could be multiple calls to the same api for the same information which didn&rsquo;t change in between.</p>
<h2 id="general-language-guidelines">General language guidelines</h2>
<p>General language syntax and guidelines adherence comes next. In Go this is trivial, since we have a plethora
of tools available to us, devs, in the form of static analyzers like, fmt, golint, goimport etc. But in the
absence there is usually a good guide at hand how a language is supposed to look like.</p>
<h2 id="workplace--project-guideline-adherence">Workplace / Project guideline adherence</h2>
<p>This could arguably come before the general adherence. Whichever suits you better. Or maybe your workplace / environment
the code is in (this could also be an open source project) is different from the general guidelines. That is okay, as
long as it&rsquo;s sensible. You could try changing it if you think it&rsquo;s too far from how a language is supposed to look like
but that usually doesn&rsquo;t work. Especially if the in-place guidelines are already there for years.</p>
<p>Generally though, it&rsquo;s better to follow whatever style/code/whim the current environment is doing. If changing something
always look around how that looks like in the code you are working in and then follow that style. These could be things like,
variable naming, comment semantics, logical flow of the code, structuring (like where the code should go and how it should look
like (yes, look like(sometime aesthetics matter))).</p>
<h2 id="could-it-be-done-concurrently">Could it be done concurrently</h2>
<p>As a cherry on top, I would try to determine if the work that is being done, could be done in a thread / go routine. In Go, go routines
are cheap and very easy to make. It&rsquo;s also easy to abuse them of course, but it doesn&rsquo;t hurt to think asynchronously. Especially in
a distributed environment. Which brings me to the next point.</p>
<h2 id="in-a-distributed-environment-timing-is-key">In a distributed environment timing is key</h2>
<p>If this change is in an environment which has many services and is generally distributed your first though should immediately
be, how those this affect the rest of the services and what timing issues could arise. If there is a delete operation, what about
another service calling a create or a get on the same resource at the same time? What if it&rsquo;s a create but another service also calls
create with the same values? Is the data eventually consistent or strongly consistent? How does that affect the runtime? Is the change
in a frequently called code segment which is usually under heavy load? Did the change change the way that is handled? Did it slow it down
or speed it up? Did it trade the slowdown for strong consistency? Is strong consistency really needed in that service which would
justify the slowdown?</p>
<p>Like I said&hellip; a myriad of things&hellip;</p>
<p>I&rsquo;ll stop here for now.</p>
<h1 id="conclusion">Conclusion</h1>
<p>I hope this made sense. If you disagree with this approach or have a different guideline of reviewing, please don&rsquo;t hesitate it to share it!</p>
<p>As always,
Thanks for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How to Make SPA refresh work with a Go backend</title>
      <link>https://skarlso.github.io/2020/02/17/making-spa-refresh-work-with-go-backend/</link>
      <pubDate>Mon, 17 Feb 2020 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2020/02/17/making-spa-refresh-work-with-go-backend/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>Today I would like to share a quick &ldquo;fix&rdquo; for a problem I&rsquo;ve seen popping up here and there.</p>
<p>That is, if you have a react frontend which is a SPA app but you still want refresh to work.
What do I mean by that? Consider the following&hellip;</p>
<h1 id="the-problem">The problem</h1>
<p>You have a SPA app with a react router which navigates the user around. The app calls to a backend
api which serves content of some kind. You have the following routes&hellip;. login, signup, reset, archive.</p>
<p>If your app is compiled with your backend, as it usually is, then something like: <a href="https://app.com/login">https://app.com/login</a>
will not work unless it&rsquo;s also defined on the backend serving some content.</p>
<p>So but what should the content be in this case?</p>
<h1 id="the-structre">The structre</h1>
<p>For that, let&rsquo;s first look at the strucute of the app. Consider the following directory tree:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">.
├── Dockerfile
├── LICENSE
├── Makefile
├── README.md
├── build
├── cmd
│   └── root.go
├── frontend
│   ├── LICENSE
│   ├── README.md
│   ├── build
│   ├── package-lock.json
│   ├── package.json
│   ├── public
│   ├── src
│   └── yarn.lock
├── go.mod
├── go.sum
├── img
├── internal
└── pkg
</code></pre></td></tr></table>
</div>
</div><p>For this, the frontend contains a build dir in which the generated react frontend static files plus
compiled JavaScript libraries are. In this directory there also is a index.html file which does the actual
heavy lifting in terms of routing.</p>
<p>The Go backend therefor must only route to index.html on certain endpoints.</p>
<p>In Go to build and deploy a single binary containing the static assets here in, you can use something like
<a href="https://github.com/GeertJohan/go.rice">go.rice</a> or <a href="https://github.com/elazarl/go-bindata-assetfs">assetfs</a> which
generate a Go file for you which contains all the data in an easily accessible way.</p>
<p>I&rsquo;ll be using go.rice.</p>
<h1 id="the-solution">The solution</h1>
<p>To summarize, all you have to do is route every route in your router.js file to index.html in Go. But how? Well, like this&hellip;</p>
<p>Consider this appliction: <a href="https://github.com/staple-org/staple">Staple</a>. This is a react frontend go backend application
which builds a frontend asset then packages it up with go.rice, builds a Docker container and deploys the whole thing to
a Kubernetes cluster. But this is the interesting part which handles the index routing:</p>
<p>In routes.go (contains the mapped routes from under Router.js):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">pkg</span>

<span class="c1">// These routes must match the routes under frontend/Routes.js
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">routes</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
	<span class="s">&#34;/login&#34;</span><span class="p">,</span>
	<span class="s">&#34;/archive&#34;</span><span class="p">,</span>
	<span class="s">&#34;/staples/new&#34;</span><span class="p">,</span>
	<span class="s">&#34;/reset&#34;</span><span class="p">,</span>
	<span class="s">&#34;/signup&#34;</span><span class="p">,</span>
	<span class="s">&#34;/settings&#34;</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Once we have a list of routes to map&hellip;</p>
<p>In server.go (which is starting up the server and generates the handlers&hellip;)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">    <span class="c1">// ... code which sets up the api routes... after every handler has been estabilished...
</span><span class="c1"></span>	<span class="c1">// Setup front-end if not in production mode.
</span><span class="c1"></span>	<span class="k">if</span> <span class="p">!</span><span class="nx">config</span><span class="p">.</span><span class="nx">Opts</span><span class="p">.</span><span class="nx">DevMode</span> <span class="p">{</span>
        <span class="c1">// This path needs to be relative from this files package&#39;s location.
</span><span class="c1"></span>		<span class="nx">staticAssets</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rice</span><span class="p">.</span><span class="nf">FindBox</span><span class="p">(</span><span class="s">&#34;../frontend/build&#34;</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;Cannot find assets in production&#34;</span><span class="p">)</span>
			<span class="k">return</span> <span class="nx">err</span>
		<span class="p">}</span>

		<span class="c1">// Register handler for static assets
</span><span class="c1"></span>        <span class="nx">assetHandler</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">FileServer</span><span class="p">(</span><span class="nx">staticAssets</span><span class="p">.</span><span class="nf">HTTPBox</span><span class="p">())</span>
        <span class="c1">// Open the index.html file as a *File for reading the content out of it.
</span><span class="c1"></span>        <span class="c1">// This is a virtual file handled by go.rice.
</span><span class="c1"></span>		<span class="nx">index</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">staticAssets</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;index.html&#34;</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="nx">config</span><span class="p">.</span><span class="nx">Opts</span><span class="p">.</span><span class="nx">Logger</span><span class="p">.</span><span class="nf">Error</span><span class="p">().</span><span class="nf">Err</span><span class="p">(</span><span class="nx">err</span><span class="p">).</span><span class="nf">Msg</span><span class="p">(</span><span class="s">&#34;Failed to find index.html content.&#34;</span><span class="p">)</span>
			<span class="k">return</span> <span class="nx">err</span>
		<span class="p">}</span>

        <span class="c1">// Set up the main point as a static file server
</span><span class="c1"></span>		<span class="nx">e</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">echo</span><span class="p">.</span><span class="nf">WrapHandler</span><span class="p">(</span><span class="nx">assetHandler</span><span class="p">))</span>
		<span class="c1">// Set up routes to index.html for all routes under Routes.js. Index.html will handle the routing any further.
</span><span class="c1"></span>		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">r</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">routes</span> <span class="p">{</span>
			<span class="nx">e</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span> <span class="nf">indexServer</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span> <span class="nx">index</span><span class="p">))</span>
		<span class="p">}</span>
		<span class="nx">e</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/favicon.ico&#34;</span><span class="p">,</span> <span class="nx">echo</span><span class="p">.</span><span class="nf">WrapHandler</span><span class="p">(</span><span class="nx">assetHandler</span><span class="p">))</span>
		<span class="nx">e</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/site.webmanifest&#34;</span><span class="p">,</span> <span class="nx">echo</span><span class="p">.</span><span class="nf">WrapHandler</span><span class="p">(</span><span class="nx">assetHandler</span><span class="p">))</span>
		<span class="nx">e</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/static/css/*&#34;</span><span class="p">,</span> <span class="nx">echo</span><span class="p">.</span><span class="nf">WrapHandler</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nf">StripPrefix</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">assetHandler</span><span class="p">)))</span>
		<span class="nx">e</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/static/js/*&#34;</span><span class="p">,</span> <span class="nx">echo</span><span class="p">.</span><span class="nf">WrapHandler</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nf">StripPrefix</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">assetHandler</span><span class="p">)))</span>
		<span class="nx">e</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/static/media/*&#34;</span><span class="p">,</span> <span class="nx">echo</span><span class="p">.</span><span class="nf">WrapHandler</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nf">StripPrefix</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">assetHandler</span><span class="p">)))</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>What is <code>indexServer</code> in this you might ask? Well, fret no longer, I shall show you:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// indexServer takes a name and the contents of the virtual file index.html gathered up by go.rice
</span><span class="c1">// and serves its content via http.ServeContent under the given name.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">indexServer</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">file</span> <span class="o">*</span><span class="nx">rice</span><span class="p">.</span><span class="nx">File</span><span class="p">)</span> <span class="nx">echo</span><span class="p">.</span><span class="nx">HandlerFunc</span> <span class="p">{</span>
	<span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c</span> <span class="nx">echo</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
		<span class="nx">stat</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Stat</span><span class="p">()</span>
		<span class="nx">http</span><span class="p">.</span><span class="nf">ServeContent</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nf">Response</span><span class="p">().</span><span class="nx">Writer</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Request</span><span class="p">(),</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">stat</span><span class="p">.</span><span class="nf">ModTime</span><span class="p">(),</span> <span class="nx">file</span><span class="p">)</span>
		<span class="k">return</span> <span class="kc">nil</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The key points are the name, which will be the route and the file which is the index.html content which contains
the logic to route based on the request. All that will be handled. And if a new route comes along,
simple add it to the list, recompile and you are done!</p>
<h1 id="conclusion">Conclusion</h1>
<p>In summary, you let your index.html file handle the routing as you would normally do. Just you need to make your
backend aware of that fact. Now refreshing the page will work as you&rsquo;d expect.</p>
<p>Thank you for reading,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Using a Kubernetes based Cluster for Various Services with auto HTTPS - Part 2</title>
      <link>https://skarlso.github.io/2019/10/15/kubernetes-cluster-part2/</link>
      <pubDate>Tue, 15 Oct 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/10/15/kubernetes-cluster-part2/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>This is a continuation of the previous post about my Kubernetes infrastructure located <a href="https://skarlso.github.io/2019/09/21/kubernetes-cluster/">here</a>. The two remaining points are to deploy Athens Go proxy and setting up monitoring.</p>
<h1 id="athens">Athens</h1>
<p><img src="/img/hosting/athens.png" alt="Athens"></p>
<p>Let&rsquo;s start with <a href="https://github.com/gomods/athens">Athens</a>.</p>
<p>First of all if you are a helm user, Athens has an awesome set of helm charts which you can use to deploy it in your cluster.
Located <a href="https://github.com/gomods/athens/tree/master/charts/athens-proxy">here</a>.</p>
<p>I prefer to deploy my own config files, but that&rsquo;s me. So here is my preferred way of deploying Athens.</p>
<p>Since this is also a subdomain of the previously created <code>powerhouse</code> namespace we are going to use that.</p>
<h2 id="pvc">PVC</h2>
<p>We are going to need a PersistentVolumeClaim for Athens so it can store all the things forever.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PersistentVolumeClaim</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">powerhouse</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">athens-storage</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">accessModes</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">ReadWriteOnce</span><span class="w">
</span><span class="w">  </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">storage</span><span class="p">:</span><span class="w"> </span><span class="l">10Gi</span><span class="w">
</span><span class="w">  </span><span class="nt">storageClassName</span><span class="p">:</span><span class="w"> </span><span class="l">do-block-storage</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Claim is very boring. Which means it just works.</p>
<h2 id="deployment">Deployment</h2>
<p>This is more interesting. Athens provides a lot of possibilities for the deployment. I&rsquo;m just deploying the barest possible here. Which means, no user auth, no private repository support, ssh key configuration, etc&hellip; It&rsquo;s a plain proxy installation.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">powerhouse</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">athens-app</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w">        </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w">        </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">gomods/athens:v0.6.0</span><span class="w">
</span><span class="w">        </span><span class="nt">livenessProbe</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">httpGet</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/healthz&#34;</span><span class="w">
</span><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">3000</span><span class="w">
</span><span class="w">        </span><span class="nt">readinessProbe</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">httpGet</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/readyz&#34;</span><span class="w">
</span><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">3000</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ATHENS_GOGET_WORKERS</span><span class="w">
</span><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3&#34;</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ATHENS_STORAGE_TYPE</span><span class="w">
</span><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;disk&#34;</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ATHENS_DISK_STORAGE_ROOT</span><span class="w">
</span><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">/var/lib/athens</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">3000</span><span class="w">
</span><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">athens-http</span><span class="w">
</span><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">athens-data</span><span class="w">
</span><span class="w">            </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/var/lib/athens</span><span class="w">
</span><span class="w">            </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">athens</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">athens-data</span><span class="w">
</span><span class="w">          </span><span class="nt">persistentVolumeClaim</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">claimName</span><span class="p">:</span><span class="w"> </span><span class="l">athens-storage</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Fun fact. The name of the app must not be just plain <code>athens</code> because that will result in an error: <code>too many colons in address</code>.</p>
<p>The issue is here: <a href="https://github.com/gomods/athens/issues/1038#issuecomment-457145658">https://github.com/gomods/athens/issues/1038#issuecomment-457145658</a> Basically it&rsquo;s because of the name used for the environment properties inside the container.</p>
<h2 id="service">Service</h2>
<p>Now, let&rsquo;s expose it.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">powerhouse</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">athens-service</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">3000</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h2 id="ingress">Ingress</h2>
<p>I&rsquo;m using port 80 here because it&rsquo;s convenient. But if you use any other port, don&rsquo;t forget to alter your ingress to forward to that port and service.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">extensions/v1beta1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Ingress</span><span class="w">
</span><span class="w"></span><span class="nn">...</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">tls</span><span class="p">:</span><span class="w">
</span><span class="w"></span><span class="nn">...</span><span class="w">
</span><span class="w">  </span>- <span class="nt">hosts</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="l">athens.powerhouse.com</span><span class="w">
</span><span class="w">    </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">athens-cronohub-tls</span><span class="w">
</span><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span><span class="w"></span><span class="nn">...</span><span class="w">
</span><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">athens.powerhouse.com</span><span class="w">
</span><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">backend</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">serviceName</span><span class="p">:</span><span class="w"> </span><span class="l">athens-service</span><span class="w">
</span><span class="w">          </span><span class="nt">servicePort</span><span class="p">:</span><span class="w"> </span><span class="m">1234</span><span class="w">
</span><span class="w">        </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>And that&rsquo;s it! If you now visit <code>https://athens.powerhouse.com</code> it should say <code>&quot;Welcome to The Athens Proxy&quot;</code>.</p>
<p>Now, if you set this proxy with <code>export GOPROXY=https://athens.powerhouse.com</code> it should start to cache modules. It&rsquo;s a fantastic proxy with a lot of capabilities. I encourage you to check it out and drop by it&rsquo;s slack channel on Gopher slack called Athens.</p>
<h1 id="monitoring">Monitoring</h1>
<p>Monitoring is a huge topic so I&rsquo;m not going to talk about how to monitor or what. That is described in great many of posts. I especially recommend reading sysdig&rsquo;s 6 part post on doing monitoring with Prometheus and Grafana and what to monitor and the four golden signals and whatnot. Starting <a href="https://sysdig.com/blog/kubernetes-monitoring-prometheus/">here</a> and <a href="https://sysdig.com/blog/monitoring-kubernetes-with-sysdig-cloud/">here</a>.</p>
<h2 id="prometheus">Prometheus</h2>
<p>I&rsquo;m going to deploy <a href="https://prometheus.io">Prometheus</a>. Prometheus is a monitoring tool which sits inside your cluster and gathers data about running pods, nodes, services, whatever you expose and wants to send data to it. It can also alert on things and can be integrated with tools like Graphana for nice front-end and metrics. Prometheus itself uses PromQL as its query language to gather data from different sources and do time series analytics and much much more.</p>
<p>Please visit the website and documentation for more details. It&rsquo;s the defacto monitoring tool for Kubernetes. Again, I&rsquo;m going to do a very basic installation of Prometheus. So basic in fact, that I don&rsquo;t even have a PVC for it, because I don&rsquo;t care at this point about retaining data.</p>
<h3 id="namespace">Namespace</h3>
<p>Let&rsquo;s create it&rsquo;s own namespace.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Namespace</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">monitoring</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">monitoring</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="config">Config</h3>
<p>Prometheus Server config is massive. I don&rsquo;t expect you to pick up on everything in this thing, but I would encourage you to at least try to find out what these setting do&hellip; Our config yaml file contains the configuration file for Prometheus which we&rsquo;ll later set up via a command line argument. It&rsquo;s called <code>prometheus.yml</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus-server-conf</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus-server-conf</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">monitoring</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">prometheus.yml</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span><span class="sd">    global:
</span><span class="sd">      scrape_interval: 5s
</span><span class="sd">      evaluation_interval: 5s
</span><span class="sd">
</span><span class="sd">    scrape_configs:
</span><span class="sd">      - job_name: &#39;kubernetes-apiservers&#39;
</span><span class="sd">        kubernetes_sd_configs:
</span><span class="sd">        - role: endpoints
</span><span class="sd">        scheme: https
</span><span class="sd">        tls_config:
</span><span class="sd">          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
</span><span class="sd">        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
</span><span class="sd">        relabel_configs:
</span><span class="sd">        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
</span><span class="sd">          action: keep
</span><span class="sd">          regex: default;kubernetes;https
</span><span class="sd">
</span><span class="sd">      - job_name: &#39;kubernetes-nodes&#39;
</span><span class="sd">        scheme: https
</span><span class="sd">        tls_config:
</span><span class="sd">          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
</span><span class="sd">        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
</span><span class="sd">        kubernetes_sd_configs:
</span><span class="sd">        - role: node
</span><span class="sd">        relabel_configs:
</span><span class="sd">        - action: labelmap
</span><span class="sd">          regex: __meta_kubernetes_node_label_(.+)
</span><span class="sd">        - target_label: __address__
</span><span class="sd">          replacement: kubernetes.default.svc:443
</span><span class="sd">        - source_labels: [__meta_kubernetes_node_name]
</span><span class="sd">          regex: (.+)
</span><span class="sd">          target_label: __metrics_path__
</span><span class="sd">          replacement: /api/v1/nodes/${1}/proxy/metrics
</span><span class="sd">
</span><span class="sd">      - job_name: &#39;kubernetes-pods&#39;
</span><span class="sd">        kubernetes_sd_configs:
</span><span class="sd">        - role: pod
</span><span class="sd">        relabel_configs:
</span><span class="sd">        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
</span><span class="sd">          action: keep
</span><span class="sd">          regex: true
</span><span class="sd">        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
</span><span class="sd">          action: replace
</span><span class="sd">          target_label: __metrics_path__
</span><span class="sd">          regex: (.+)
</span><span class="sd">        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
</span><span class="sd">          action: replace
</span><span class="sd">          regex: ([^:]+)(?::\d+)?;(\d+)
</span><span class="sd">          replacement: $1:$2
</span><span class="sd">          target_label: __address__
</span><span class="sd">        - action: labelmap
</span><span class="sd">          regex: __meta_kubernetes_pod_label_(.+)
</span><span class="sd">        - source_labels: [__meta_kubernetes_namespace]
</span><span class="sd">          action: replace
</span><span class="sd">          target_label: kubernetes_namespace
</span><span class="sd">        - source_labels: [__meta_kubernetes_pod_name]
</span><span class="sd">          action: replace
</span><span class="sd">          target_label: kubernetes_pod_name
</span><span class="sd">
</span><span class="sd">      - job_name: &#39;kubernetes-cadvisor&#39;
</span><span class="sd">        scheme: https
</span><span class="sd">        tls_config:
</span><span class="sd">          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
</span><span class="sd">        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
</span><span class="sd">        kubernetes_sd_configs:
</span><span class="sd">        - role: node
</span><span class="sd">        relabel_configs:
</span><span class="sd">        - action: labelmap
</span><span class="sd">          regex: __meta_kubernetes_node_label_(.+)
</span><span class="sd">        - target_label: __address__
</span><span class="sd">          replacement: kubernetes.default.svc:443
</span><span class="sd">        - source_labels: [__meta_kubernetes_node_name]
</span><span class="sd">          regex: (.+)
</span><span class="sd">          target_label: __metrics_path__
</span><span class="sd">          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
</span><span class="sd">
</span><span class="sd">      - job_name: &#39;kubernetes-service-endpoints&#39;
</span><span class="sd">        kubernetes_sd_configs:
</span><span class="sd">        - role: endpoints
</span><span class="sd">        relabel_configs:
</span><span class="sd">        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
</span><span class="sd">          action: keep
</span><span class="sd">          regex: true
</span><span class="sd">        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
</span><span class="sd">          action: replace
</span><span class="sd">          target_label: __scheme__
</span><span class="sd">          regex: (https?)
</span><span class="sd">        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
</span><span class="sd">          action: replace
</span><span class="sd">          target_label: __metrics_path__
</span><span class="sd">          regex: (.+)
</span><span class="sd">        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
</span><span class="sd">          action: replace
</span><span class="sd">          target_label: __address__
</span><span class="sd">          regex: ([^:]+)(?::\d+)?;(\d+)
</span><span class="sd">          replacement: $1:$2
</span><span class="sd">        - action: labelmap
</span><span class="sd">          regex: __meta_kubernetes_service_label_(.+)
</span><span class="sd">        - source_labels: [__meta_kubernetes_namespace]
</span><span class="sd">          action: replace
</span><span class="sd">          target_label: kubernetes_namespace
</span><span class="sd">        - source_labels: [__meta_kubernetes_service_name]
</span><span class="sd">          action: replace
</span><span class="sd">          target_label: kubernetes_name</span><span class="w">    
</span></code></pre></td></tr></table>
</div>
</div><p>Mostly it&rsquo;s just setting up what Prometheus should monitor and how. The important bits are the <code>labels</code>. How this is going to work is, that we will <code>annotate</code> the resources we want Prometheus to see. Which is pretty cool. Basically we will just alter a pod to include an annotation and it will begin monitoring it. No need to install anything anywhere or restart anything. Just add an annotation and bamm, you&rsquo;re done.</p>
<h2 id="rbac">RBAC</h2>
<p>Prometheus needs permissions to access resources in the cluster such as API end-points and gathering data about the cluster itself. We will provide it with this permission through <a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/">Role Based Access Control</a>.</p>
<p>We&rsquo;ll create a service account which Prometheus can use. We want it to access the whole cluster so we&rsquo;ll use a <code>ClusterRole</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1beta1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRole</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus</span><span class="w">
</span><span class="w"></span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span><span class="w"></span>- <span class="nt">apiGroups</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;&#34;</span><span class="p">]</span><span class="w">
</span><span class="w">  </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">nodes</span><span class="w">
</span><span class="w">  </span>- <span class="l">nodes/proxy</span><span class="w">
</span><span class="w">  </span>- <span class="l">services</span><span class="w">
</span><span class="w">  </span>- <span class="l">endpoints</span><span class="w">
</span><span class="w">  </span>- <span class="l">pods</span><span class="w">
</span><span class="w">  </span><span class="nt">verbs</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;get&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;list&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;watch&#34;</span><span class="p">]</span><span class="w">
</span><span class="w"></span>- <span class="nt">apiGroups</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">extensions</span><span class="w">
</span><span class="w">  </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">ingresses</span><span class="w">
</span><span class="w">  </span><span class="nt">verbs</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;get&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;list&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;watch&#34;</span><span class="p">]</span><span class="w">
</span><span class="w"></span>- <span class="nt">nonResourceURLs</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;/metrics&#34;</span><span class="p">]</span><span class="w">
</span><span class="w">  </span><span class="nt">verbs</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;get&#34;</span><span class="p">]</span><span class="w">
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1beta1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRoleBinding</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus</span><span class="w">
</span><span class="w"></span><span class="nt">roleRef</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">apiGroup</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io</span><span class="w">
</span><span class="w">  </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRole</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus</span><span class="w">
</span><span class="w"></span><span class="nt">subjects</span><span class="p">:</span><span class="w">
</span><span class="w"></span>- <span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ServiceAccount</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">monitoring</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>This will give access to monitor the following resources: nodes, nodes/proxy, services, endpoints and pods. The action are get, list, watch. No modifications.</p>
<p>We&rsquo;ll also allow Prometheus to watch ingresses for data traffic and allow it to do get requests to non-resource endpoint <code>/metrics</code>.</p>
<h2 id="deployment-1">Deployment</h2>
<p>Now, the deployment is actually pretty easy.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">extensions/v1beta1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus-deployment</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">monitoring</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus-server</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus</span><span class="w">
</span><span class="w">          </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">prom/prometheus:v2.2.1</span><span class="w">
</span><span class="w">          </span><span class="nt">args</span><span class="p">:</span><span class="w">
</span><span class="w">            </span>- <span class="s2">&#34;--config.file=/etc/prometheus/prometheus.yml&#34;</span><span class="w">
</span><span class="w">            </span>- <span class="s2">&#34;--storage.tsdb.path=/prometheus/&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">            </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">9090</span><span class="w">
</span><span class="w">          </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus-config-volume</span><span class="w">
</span><span class="w">              </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/prometheus/</span><span class="w">
</span><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus-storage-volume</span><span class="w">
</span><span class="w">              </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/prometheus/</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus-config-volume</span><span class="w">
</span><span class="w">          </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">defaultMode</span><span class="p">:</span><span class="w"> </span><span class="m">420</span><span class="w">
</span><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus-server-conf</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus-storage-volume</span><span class="w">
</span><span class="w">          </span><span class="nt">emptyDir</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>The two interesting things here are the two arguments. The config file, which we include through the <code>configMap</code> and the storage. Which I&rsquo;m not bind mounting.</p>
<h2 id="service-1">Service</h2>
<p>Let&rsquo;s expose Prometheus. Now, this may come as a surprise if you don&rsquo;t know anything about Prometheus, but this is an in cluster monitoring tool. It&rsquo;s usually not supposed to be accessed directly, but through tools like Graphana or used by tools like Alerting or traefik as a reverse proxy. As such, Prometheus does not support authentication or authorization or user management of any kind. That is usually taken care of by a reverse proxy or other means written about <a href="https://prometheus.io/docs/operating/security/#authentication-authorization-and-encryption">here</a> and <a href="https://prometheus.io/docs/guides/basic-auth/">here</a>.</p>
<p>As such, we can do a number of things. We can expose it as a NodePort service for example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus-service</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">monitoring</span><span class="w">
</span><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">prometheus.io/scrape</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;true&#39;</span><span class="w">
</span><span class="w">      </span><span class="nt">prometheus.io/port</span><span class="p">:</span><span class="w">   </span><span class="s1">&#39;9090&#39;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus-server</span><span class="w">
</span><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">NodePort</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span><span class="w">      </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">9090</span><span class="w">
</span><span class="w">      </span><span class="nt">nodePort</span><span class="p">:</span><span class="w"> </span><span class="m">30000</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Or we just port forward the pod like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">k port-forward pods/prometheus-deployment-6bf45557bd-qc6t6 9090:9090 -n monitoring
</code></pre></td></tr></table>
</div>
</div><p>And access it by simply opening the url: http://127.0.0.1:9090.</p>
<h2 id="prometheus-1">Prometheus</h2>
<p>Once you open it, you should see something like this, after running a small query:</p>
<p><img src="/img/hosting/prometheus.png" alt="prometheus.png"></p>
<h2 id="adding-in-resources-to-monitor">Adding in Resources to monitor</h2>
<p>In order to add a resource to monitor simply insert these annotations:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">prometheus.io/scrape</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;true&#39;</span><span class="w">
</span><span class="w">      </span><span class="nt">prometheus.io/port</span><span class="p">:</span><span class="w">   </span><span class="s1">&#39;9090&#39;</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Done.</p>
<h1 id="bonus-round----graphana">Bonus Round &ndash; Graphana</h1>
<p>We deployed Athens and Prometheus to monitor our cluster. We don&rsquo;t have anything before Prometheus that would be fancy, but installing Graphana is actually pretty easy. You can follow the instructions <a href="https://prometheus.io/docs/visualization/grafana/">here</a>.</p>
<p>A very easy way of looking at some nice metrics without worrying about anything like users and such, is running a Graphana instance in docker on your local machine with:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">docker run -d -p 3000:3000 grafana/grafana
</code></pre></td></tr></table>
</div>
</div><p>&hellip; and while you are forwarding the Prometheus end-point you navigate to your Graphana instance by opening <code>127.0.0.1:3000</code> and install a Prometheus data-point like this:</p>
<p><img src="/img/hosting/graphana_config.png" alt="graphana config"></p>
<p>After that navigate to a new dashboard and select a simple PromQL metric to see if it&rsquo;s working. You should see something like this:</p>
<p><img src="/img/hosting/graphana.png" alt="graphana"></p>
<p>Now you can create a new dashboard add a PVC to our Prometheus instance and enjoy all the metrics you can store!</p>
<h1 id="conclusion">Conclusion</h1>
<p>And this is it folks. Everything is installed and we can monitor things now. If you give Prometheus a PVC you can build some pretty awesome time series graphs too and see how your cluster behaves over time.</p>
<p>Thank you for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Summary of Practical Go workshop from Dave Cheney</title>
      <link>https://skarlso.github.io/2019/10/10/practical-go-summary/</link>
      <pubDate>Thu, 10 Oct 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/10/10/practical-go-summary/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>So there is <a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html">this</a> workshop from <a href="https://twitter.com/davecheney">Dave Cheney</a>.</p>
<p>And I thought I&rsquo;d draw a sort of summary of that workshop.</p>
<p><img src="/img/practical_go.png" alt="enjoy"></p>
<p>Right-click-&gt;Open Image for higher resolution.</p>
<p>Cheers,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How I killed my entire Kubernetes cluster</title>
      <link>https://skarlso.github.io/2019/10/01/killing-kubernetes-cluster/</link>
      <pubDate>Tue, 01 Oct 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/10/01/killing-kubernetes-cluster/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>One morning I woke up and tried to access my gitea just to find that it wasn&rsquo;t running.</p>
<p><img src="/img/kube_dead.png" alt="dead kube"></p>
<p>I checked my cluster and found that the whole thing was dead as meat. I quickly jumped in and ran <code>k get pods -A</code> to see what&rsquo;s
going on. None of my services worked.</p>
<p>What immediately struck my eye was a 100+ pods of my fork_updater cronjob. The fork_updater cronjob which runs once a month, looks
like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">batch/v1beta1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">CronJob</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fork-updater</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">fork-updater</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">schedule</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;* * 1 * *&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">jobTemplate</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fork-updater-ssh-key</span><span class="w">
</span><span class="w">            </span><span class="nt">secret</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">fork-updater-ssh-key</span><span class="w">
</span><span class="w">              </span><span class="nt">defaultMode</span><span class="p">:</span><span class="w"> </span><span class="m">256</span><span class="w"> </span><span class="c"># yaml spec does not support octal mode</span><span class="w">
</span><span class="w">          </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fork-updater</span><span class="w">
</span><span class="w">            </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent</span><span class="w">
</span><span class="w">            </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">skarlso/repo-updater:1.0.4</span><span class="w">
</span><span class="w">            </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">              </span>- <span class="nt">name</span><span class="p">:</span><span class="w">  </span><span class="l">GIT_TOKEN</span><span class="w">
</span><span class="w">                </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">                  </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                    </span><span class="nt">name</span><span class="p">:</span><span class="w">  </span><span class="l">fork-updater-secret</span><span class="w">
</span><span class="w">                    </span><span class="nt">key</span><span class="p">:</span><span class="w">  </span><span class="l">GIT_TOKEN</span><span class="w">
</span><span class="w">            </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fork-updater-ssh-key</span><span class="w">
</span><span class="w">              </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/etc/secret&#34;</span><span class="w">
</span><span class="w">              </span><span class="nt">readOnly</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">          </span><span class="nt">restartPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">OnFailure</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Inherently there is nothing wrong with this at first glance. But on a second glance, the problem is <code>restartPolicy: Always</code>.
For whatever the reason, the cronjob died when it started up. The restart policy then&hellip; restarted the cronjob, which failed again
really fast. Then it scheduled a new one and a new one and a new one&hellip; and I had 100+ containers pending and running and
creating.</p>
<p>At that point the cluster was basically DDOSd into oblivion. Once the other resources started to die ( since this was a private
cluster and I didn&rsquo;t bother to set up restrictions on resources ) the cronjob hogged even more and it basically blocked everything
else from being able to run. It overwhelmed the scheduler.</p>
<p>Lovevly that.</p>
<p>This is how you could potentionally kill a cluster which doesn&rsquo;t have any resource limits and restrictions set up.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Using a Kubernetes based Cluster for Various Services with auto HTTPS</title>
      <link>https://skarlso.github.io/2019/09/21/kubernetes-cluster/</link>
      <pubDate>Sat, 21 Sep 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/09/21/kubernetes-cluster/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>Today, I would like to show you how my infrastructure is deployed and managed. Spoiler alert, I&rsquo;m using Kubernetes to do that.</p>
<p>I know&hellip; What a twist!</p>
<p>Let&rsquo;s get to it.</p>
<h1 id="what">What</h1>
<p><img src="/img/hosting/kube-architecture.png" alt="kube-architecture"></p>
<p>What services am I running exactly? Here is a list I&rsquo;m running at the time of this writing:</p>
<ul>
<li>Athens Go Proxy</li>
<li>Gitea</li>
<li>The Lounge (IRC bouncer)</li>
<li>Two CronJobs
<ul>
<li>Fork Updater</li>
<li>IDLE RPG online checker</li>
</ul>
</li>
<li>My WebSite (gergelybrautigam.com)</li>
<li>Monitoring</li>
</ul>
<p>And it&rsquo;s really simple to add more.</p>
<h1 id="where">Where</h1>
<p>My cluster is deployed at DigitalOcean using two droplets each 1vCPU and 2GB RAM.</p>
<p><img src="/img/hosting/kube-on-digitalocean.png" alt="kube-on-digitalocean"></p>
<h1 id="what-not">What Not</h1>
<p>This isn&rsquo;t going to be a production grade cluster. What I don&rsquo;t include in here:</p>
<h2 id="rbac-for-various-services-and-users">RBAC for various services and users</h2>
<p>Since I&rsquo;m the only user of my cluster I didn&rsquo;t create any kind of access limits / users or such. You are free to create them though. The only role based auth that&rsquo;s going on is for Prometheus.</p>
<p>I&rsquo;m not using any third party things which require access to the API.</p>
<h2 id="resource-limitation">Resource limitation</h2>
<p>I&rsquo;m the sole user of my things. I&rsquo;m not really scaling my gitea up or down based on usage and as such, I did not define things like:</p>
<ul>
<li>Resource limits</li>
<li>Nodes with certain capabilities</li>
<li>Affinities and Taints &ndash; which means, everything can run anywhere</li>
</ul>
<h2 id="readiness-liveliness">Readiness Liveliness</h2>
<p>Most of by deploys and services don&rsquo;t have these except for Athens.</p>
<h1 id="how">How</h1>
<p>Okay, with that out of the way, let&rsquo;s get into the hows of things&hellip;</p>
<h1 id="beginning">Beginning</h1>
<p>The most important thing that you need to do in order to use Kubernetes is Containerizing all the things.</p>
<p><img src="/img/hosting/containers.png" alt="containers"></p>
<p>Since Kubernetes is a container orchestration tool, without containers it&rsquo;s pretty useless.</p>
<p>As a driver, I&rsquo;m going to use Docker. Kubernetes can use anything that&rsquo;s OCI compatible, which means if you would like to use runc as a container engine, you can do that. I&rsquo;d like to keep my sanity though.</p>
<h2 id="example">Example</h2>
<p><img src="/img/hosting/fork-updater.png" alt="fork-updater"></p>
<p>To show you what I mean&hellip; I have a cronjob which is running every month. It gathers all my forks on github and updates them with the latest from their parents. This a small ruby script located here: <a href="https://gist.github.com/Skarlso/fd5bd5971a78a5fa9760b31683de690e">Fork Updater</a>. How do we run this? It requires two things. First, a token. We pass that currently as an environment property. It could be in a file in a vault or a secret mounted in as a file it doesn&rsquo;t matter. Currently, it&rsquo;s an environment property. The second thing is more subtle.</p>
<p>I&rsquo;m pushing the changes back into my remote forks. I&rsquo;m doing this via SSH. So, we need a key in there too. How we&rsquo;ll get that in there, I&rsquo;ll talk about later when we are talking about how to set this cron job up. For now though, the container needs to look for a key in a specific location because we don&rsquo;t want to over-mount <code>/root/.ssh/</code> and we also don&rsquo;t want to use an initContainer to copy over an SSH key (because it&rsquo;s mounted in as a symlink (but that&rsquo;s a different issue all together)). Also, we certianly do NOT want to have a key in the container.</p>
<p>To achieve this, we simply set up a <code>config</code> file for SSH like this one:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Host github.com
    IdentityFile /etc/secret/id_rsa
</code></pre></td></tr></table>
</div>
</div><p><code>/etc/secret</code> will be the destination of the ssh key we create.</p>
<p>And we also need to have a known_hosts file, otherwise git clone will complain. We also bake this into the container. Why? Why not generate that on the fly? Because I want it to fail in case there is something wrong or there is a MIMA going on etc.</p>
<p>All this translated into a Dockerfile looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="c"># We are using alpine for a minimalistic image</span><span class="err">
</span><span class="err"></span><span class="k">FROM</span><span class="s"> alpine:latest</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> apk --no-cache add ca-certificates<span class="err">
</span><span class="err"></span><span class="k">RUN</span> apk update<span class="err">
</span><span class="err"></span><span class="c"># Openssh is needed for the SSH command</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> apk --no-cache add ruby vim curl git build-base ruby-dev openssh openssh-client<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c"># Setup dependencies for the fork ruby file</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> gem install octokit logger multi_json json --no-ri --no-rdoc<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> mkdir /data<span class="err">
</span><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /data</span><span class="err">
</span><span class="err"></span><span class="c"># Setup some data about the committer</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> git config --global user.name <span class="s2">&#34;Fork Updater&#34;</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> git config --global user.email <span class="s2">&#34;email@email.com&#34;</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> mkdir -p /root/.ssh<span class="err">
</span><span class="err"></span><span class="c"># Get the host config for github.com</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> ssh-keyscan github.com &gt;&gt; /root/.ssh/known_hosts<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c"># Setup the SSH config</span><span class="err">
</span><span class="err"></span><span class="k">COPY</span> ./config /root/.ssh<span class="err">
</span><span class="err"></span><span class="k">COPY</span> ./fork_updater.rb .<span class="err">
</span><span class="err"></span><span class="k">CMD</span> <span class="p">[</span><span class="s2">&#34;ruby&#34;</span><span class="p">,</span> <span class="s2">&#34;/data/fork_updater.rb&#34;</span><span class="p">]</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><p>That&rsquo;s it. Now our updater is containerized and ready to be deployed as a cronjob on a kube cluster. Oh, and we also need to create the SSH key like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">kubectl create secret generic ssh-key-secret --from-file=ssh-privatekey=/path/to/.ssh/id_rsa
</code></pre></td></tr></table>
</div>
</div><h1 id="before-we-begin">Before we Begin</h1>
<p>There are two things we will need though to set up for our cluster before we even begin adding the first service. And that&rsquo;s an ingress with a load-balancer and cert-manager.</p>
<h1 id="cert-manager">Cert-Manager</h1>
<p>Now, you have the option of installing cert-manager via helm, or via the provided kube config yaml file. I <strong>STRONGLY</strong> recommend using the config yaml file because the upgrading process with helm is a hell of a lot dirtier / failure prone than simply applying a new yaml file with a different version in it.</p>
<p>Either way, to install cert-manager follow this simple guide: <a href="https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html#installing-with-regular-manifests">Cert-manager Install Manual</a>.</p>
<h1 id="ingress">Ingress</h1>
<p>An Ingress is a must. This is the component which manages external access to the services which we will define. Like a proxy before your http server. This component will handle the hostname based routing between our services.</p>
<p>I&rsquo;m using nginx ingress, although there are a couple of implementations out there.</p>
<p>To install nginx ingress, follow their guide here: <a href="https://kubernetes.github.io/ingress-nginx/deploy/">Installing Nginx-Ingress</a>.</p>
<h1 id="from-easy-to-complicated">From Easy to Complicated</h1>
<p>Alright. Now that we have the prereqs out of the way, let&rsquo;s get our hands dirty. I&rsquo;ll start with the easiest of them all, my web site, and then will progress towards the more complicated ones, like Gitea and Athens, which require a lot more fiddling and have more moving parts.</p>
<h2 id="my-website">My Website</h2>
<p>The site, located here: <a href="https://gergelybrautigam.com">Gergely&rsquo;s Domain</a>; is a really simple, static, <a href="https://gohugo.io">Hugo</a> based website. It contains nothing fancy, no real Javascript magic, has a simple list of things I&rsquo;ve done and who I am.</p>
<p>It&rsquo;s powered / served by an nginx instance running on port 9090 define by a very simple Dockerfile:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="k">FROM</span><span class="s"> golang:latest as builder</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> apt-get update <span class="o">&amp;&amp;</span> apt install -y git make vim hugo<span class="err">
</span><span class="err"></span><span class="k">RUN</span> mkdir -p /opt/website<span class="err">
</span><span class="err"></span><span class="k">RUN</span> git clone https://github.com/Skarlso/gergelybrautigam /opt/website<span class="err">
</span><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /opt/website</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> make<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">FROM</span><span class="s"> nginx:latest</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> mkdir -p /var/www/html/gergelybrautigam<span class="err">
</span><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /var/www/html/gergelybrautigam</span><span class="err">
</span><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>builder /opt/website/public .<span class="err">
</span><span class="err"></span><span class="k">COPY</span> 01_gergelybrautigam /etc/nginx/sites-available/<span class="err">
</span><span class="err"></span><span class="k">RUN</span> mkdir -p /etc/nginx/sites-enabled/<span class="err">
</span><span class="err"></span><span class="k">RUN</span> ln -s /etc/nginx/sites-available/01_gergelybrautigam /etc/nginx/sites-enabled/01_gergelybrautigam<span class="err">
</span></code></pre></td></tr></table>
</div>
</div><p>Easy as goblin pie. Nginx has a command set like this <code>CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</code> and exposes port 80.</p>
<h3 id="the-deployment">The deployment</h3>
<p>In order to deploy this in the cluster, I created a deployment as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gb-deployment</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">gergely-brautigam</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">gergelybrautigam</span><span class="w">
</span><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">prometheus.io/scrape</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;true&#39;</span><span class="w">
</span><span class="w">      </span><span class="nt">prometheus.io/port</span><span class="p">:</span><span class="w">   </span><span class="s1">&#39;9090&#39;</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">gergelybrautigam</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">gergelybrautigam</span><span class="w">
</span><span class="w">      </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">prometheus.io/scrape</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;true&#39;</span><span class="w">
</span><span class="w">          </span><span class="nt">prometheus.io/port</span><span class="p">:</span><span class="w">   </span><span class="s1">&#39;9090&#39;</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gergelybrautigam</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">skarlso/gergelybrautigam:v0.0.26</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">9090</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>The metadata section defines information about the deployment. It&rsquo;s name is gb-deployment. The namespace in which this sits is called gergely-brautigam and it has some labels to it so Prometheus monitoring tool can discover the pod.</p>
<p>It&rsquo;s running a single replica, has a bunch of more metadata and template settings, and finally the container spec which defines the image, and the exposed container port on which the application is running.</p>
<p>Now we need a service to expose this deployment.</p>
<h3 id="the-service">The service</h3>
<p>The service is also simple. It looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">gergely-brautigam</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gb-service</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">gergelybrautigam</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">9090</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Again, nothing fancy here, just a simple service exposing a port to a different port on the front-end side. This service will be picked up by our previously created routing facility.</p>
<h3 id="ingress-1">Ingress</h3>
<p>Now that we have the service we need to expose it to the domain. I have the domain gergelybrautigam.com and I already pointed it at the LoadBalancer&rsquo;s IP which was created by the nginx ingress controller.</p>
<p>We only want one LoadBalancer, but we have multiple hostnames. We can achieve that by creating an Ingress resource in the namespace our service is in like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">extensions/v1beta1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Ingress</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">gergely-brautigam</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gergely-brautigam-ingress</span><span class="w">
</span><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">kubernetes.io/ingress.class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;nginx&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">certmanager.k8s.io/cluster-issuer</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;letsencrypt-prod&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">certmanager.k8s.io/acme-challenge-type</span><span class="p">:</span><span class="w"> </span><span class="l">http01</span><span class="w">
</span><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/rewrite-target</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">tls</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">hosts</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="l">gergelybrautigam.com</span><span class="w">
</span><span class="w">    </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">gergelybrautigam-tls</span><span class="w">
</span><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">gergelybrautigam.com</span><span class="w">
</span><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">backend</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">serviceName</span><span class="p">:</span><span class="w"> </span><span class="l">gb-service</span><span class="w">
</span><span class="w">          </span><span class="nt">servicePort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Remember, we already have the nginx ingress resource in the default namespace when we installed the controller previously. That is the main entrypoint. We are taking advantage of the rewrite-target annotation. That is our key to success <code>nginx.ingress.kubernetes.io/rewrite-target: /</code>. The rest is basic routing. We&rsquo;ll have something like this in the other namespace to.</p>
<p>And with that, our website is done and it should be working under HTTPS. Cert-manager should have picked it up and generated a certificate for it. Let&rsquo;s check.</p>
<p>Running <code>k get certs -n gergely-brautigam</code> you should see something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback"> $ k get certs -n gergely-brautigam
NAME                   READY   SECRET                 AGE
gergelybrautigam-tls   True    gergelybrautigam-tls   86d
</code></pre></td></tr></table>
</div>
</div><p>If there is a problem, just describe the cert resource and look for the generated challenge and if it was successful or not. The challenge contains mostly good error messages.</p>
<h2 id="irc-bouncer">IRC bouncer</h2>
<p>That wasn&rsquo;t too bad, right? Let&rsquo;s do something a bit more complex this time. We are going to deploy <a href="https://github.com/thelounge/thelounge">The lounge</a> irc bouncer.</p>
<p>It&rsquo;s actually quite easy to do but can be daunting to look at at first.</p>
<p><img src="/img/hosting/the-climb.png" alt="easy"></p>
<h3 id="the-container">The container</h3>
<p>Lucky for us, the bouncer already provides a container located here: <a href="https://hub.docker.com/r/thelounge/thelounge/">The Lounge Docker Hub</a>.</p>
<p>We just need two things. To expose the port 9000 and to give it something called a PersistentVolume. What&rsquo;s a persistent volume? Well, look it up here: <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/">Kubernetes Persistent Volumes</a>.</p>
<p>TL;DR: We need to preserve data. Containers are ephemeral in nature. Meaning if there is a problem we usually just delete the pod. Which means that all data will be lost. But we need persistence in this case because we&rsquo;ll have user data and user information which we would like to persist between pods. That&rsquo;s what a volume is for.</p>
<p>It will be mounted into the pod so we can point the bouncer to use that location for data management.</p>
<h3 id="pvc">PVC</h3>
<p>With that, this is how our PersistentVolumeClaim will look like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PersistentVolumeClaim</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">powerhouse</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">do-storage-irc</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">accessModes</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">ReadWriteOnce</span><span class="w">
</span><span class="w">  </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">storage</span><span class="p">:</span><span class="w"> </span><span class="l">5Gi</span><span class="w">
</span><span class="w">  </span><span class="nt">storageClassName</span><span class="p">:</span><span class="w"> </span><span class="l">do-block-storage</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>DigitalOcean provides a block storage implementation for this claim so we use that storage class <code>do-block-storage</code>.</p>
<h3 id="deployment">Deployment</h3>
<p>With that, this is how the deployment will look like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">powerhouse</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">irc-app</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">irc</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">irc</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">irc</span><span class="w">
</span><span class="w">        </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">irc</span><span class="w">
</span><span class="w">        </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">irc</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">irc</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">thelounge/thelounge:3.1.1</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">9000</span><span class="w">
</span><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">irc-http</span><span class="w">
</span><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/var/opt/thelounge</span><span class="w">
</span><span class="w">          </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">thelounge</span><span class="w">
</span><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">irc-data</span><span class="w">
</span><span class="w">          </span><span class="nt">readOnly</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">irc-data</span><span class="w">
</span><span class="w">          </span><span class="nt">persistentVolumeClaim</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">claimName</span><span class="p">:</span><span class="w"> </span><span class="l">do-storage-irc</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Short and sweet. The important bits are the labels, those are used by cert-manager and ingress to find the right deployment, and the <code>volumeMounts</code>. We mount into the /var/opt/thelounge folder because that&rsquo;s the main configuration location. The subPath is important for a correct mounting.</p>
<h3 id="the-service-1">The service</h3>
<p>Alright, with the deployment in place, let&rsquo;s take a look at the service.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">powerhouse</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">irc</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">irc</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">irc</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">irc</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">irc</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">irc</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">irc</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">http</span><span class="w">
</span><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">9000</span><span class="w">
</span><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="l">irc-http</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Again, very boring stuff. Boring is good. Boring is predictable. We expose port 9000 to the named targetPort called irc-http which we defined in the above deployment.</p>
<p>Now, I have a domain in which these things are running, let&rsquo;s call it <code>powerhouse.com</code> (because I&rsquo;m tired of example.com). And I have multiple services in this namespace too, so I&rsquo;ll call the namespace here, powerhouse and put this irc service in there. This also means that the ingress resource for this namespace will contain a couple more routings, because my powerhouse namespace will also contain my gitea and Athens proxy installation.</p>
<p>We can, however, take a peak at the ingress resource here and now&hellip; because I hate suspense.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">extensions/v1beta1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Ingress</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">powerhouse</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">powerhouse-ingress</span><span class="w">
</span><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">kubernetes.io/ingress.class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;nginx&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">certmanager.k8s.io/cluster-issuer</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;letsencrypt-prod&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">certmanager.k8s.io/acme-challenge-type</span><span class="p">:</span><span class="w"> </span><span class="l">http01</span><span class="w">
</span><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/rewrite-target</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">tls</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">hosts</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="l">irc.powerhouse.com</span><span class="w">
</span><span class="w">    </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">irc-powerhouse-tls</span><span class="w">
</span><span class="w">  </span>- <span class="nt">hosts</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="l">gitea.powerhouse.com</span><span class="w">
</span><span class="w">    </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-powerhouse-tls</span><span class="w">
</span><span class="w">  </span>- <span class="nt">hosts</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="l">athens.powerhouse.com</span><span class="w">
</span><span class="w">    </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">athens-powerhouse-tls</span><span class="w">
</span><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">irc.powerhouse.com</span><span class="w">
</span><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">backend</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">serviceName</span><span class="p">:</span><span class="w"> </span><span class="l">irc</span><span class="w">
</span><span class="w">          </span><span class="nt">servicePort</span><span class="p">:</span><span class="w"> </span><span class="m">9000</span><span class="w">
</span><span class="w">        </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">gitea.powerhouse.com</span><span class="w">
</span><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">backend</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">serviceName</span><span class="p">:</span><span class="w"> </span><span class="l">gitea</span><span class="w">
</span><span class="w">          </span><span class="nt">servicePort</span><span class="p">:</span><span class="w"> </span><span class="m">3000</span><span class="w">
</span><span class="w">        </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">athens.powerhouse.com</span><span class="w">
</span><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">backend</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">serviceName</span><span class="p">:</span><span class="w"> </span><span class="l">athens-service</span><span class="w">
</span><span class="w">          </span><span class="nt">servicePort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span><span class="w">        </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>We can see that I have multiple paths pointing to three different subdomains with different ports. These ports will be routed to by nginx ingress. Meaning you <strong>DO NOT OPEN THESE ON YOUR LOADBALANCER</strong>. These will all be accessible from 443/HTTPS. Expect for gitea&rsquo;s SSH port later on.</p>
<p>With these in place, cert-manager should pick it up and provide a certificate for it.</p>
<h3 id="side-track----debugging">Side track &ndash; debugging</h3>
<p>If there is a problem and we can&rsquo;t reach TheLounge we need to debug. I use the following tool to access Kubernetes resources: <a href="https://github.com/derailed/k9s">K9S</a>. It&rsquo;s a neat CLI tool to look at kube resources in an interactive way and not having to type in a bunch of commands. Never the less, I will also paste those in here.</p>
<p>To look at the pods that should have been created, type:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">k get pods -n powerhouse
</code></pre></td></tr></table>
</div>
</div><p>Should see something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">NAME                          READY   STATUS    RESTARTS   AGE
athens-app-857749c59c-lmjnb   1/1     Running   0          6d3h
gitea-app-6974fb995b-pn2vv    1/1     Running   0          9d
gitea-db-59758fbcd9-4562c     1/1     Running   0          9d
irc-app-5f87688f98-dqsvb      1/1     Running   0          9d
</code></pre></td></tr></table>
</div>
</div><p>You can see that my other services are running fine. And there is IRC as well. Now if there would be any kind of problem we could access the Pods information be describing the pod with:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">k describe pod/irc-app-5f87688f98-dqsvb -n powerhouse
</code></pre></td></tr></table>
</div>
</div><p>Which will provide a bunch of information about the pod. But the pod could be absolutely fine, yet our service could be down. (We didn&rsquo;t define any liveliness or readiness probs after all).</p>
<p>We can verify that by taking a peak in the container (also, check if our mounting was successful). Since this is just a container, exec works similar to docker exec.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback"> $ k exec -it irc-app-5f87688f98-dqsvb -n powerhouse /bin/bash
root@irc-app-5f87688f98-dqsvb:/#
</code></pre></td></tr></table>
</div>
</div><p>Should give us a prompt. We can now look at logs, check out the configuration folder etc.</p>
<p>In k9s you would simply select the right namespace, select the pod, hit <code>d</code> for describe or <code>s</code> for shell. Done.</p>
<h2 id="gitea">Gitea</h2>
<p>Now, we have IRC running. Let&rsquo;s try deploying <a href="https://gitea.io/en-us/">Gitea</a>. This takes a tiny bit more fiddling though.</p>
<h3 id="requirements">Requirements</h3>
<p>Gitea requires the following things to be present:</p>
<ul>
<li>The gitea app configuration file (this can be done via environment properties though)</li>
<li>A DB</li>
<li>A PersistentVolume</li>
<li>SSH Port for SSH based git clones instead of simple https</li>
</ul>
<h4 id="db">DB</h4>
<p>We shall begin with the simplest of them, the DB. At this point we could go with the DigitalOcean managed Postgres installation, but I didn&rsquo;t want to put that on the bill as well. So I choose to simply put my DB into a container and deploy it within the cluster.</p>
<p>This is actually quite simple. The DB will be a separate deployment / application in the same namespace as the Gitea app. It will also contain a network policy, since the DB doesn&rsquo;t need internet access and the internet shouldn&rsquo;t be able to access it.</p>
<p>In fact the only thing that should be able to access the DB is the Gitea application itself which we will be able to restrict via the usage of&hellip; Labels!</p>
<h5 id="deployment-1">Deployment</h5>
<p>But first, take a look at the deployment of a Postgres 11 pod:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">powerhouse</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-db</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-db</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-db</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-db</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">postgres</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">postgres:11</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POSTGRES_USER</span><span class="w">
</span><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">gitea</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POSTGRES_PASSWORD</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-db-password</span><span class="w">
</span><span class="w">                </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">password</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POSTGRES_DB</span><span class="w">
</span><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">gitea</span><span class="w">
</span><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/var/lib/postgresql/data</span><span class="w">
</span><span class="w">          </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">data</span><span class="w"> </span><span class="c"># important so it gets mounted properly</span><span class="w">
</span><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">git-db-data</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">git-db-data</span><span class="w">
</span><span class="w">          </span><span class="nt">persistentVolumeClaim</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">claimName</span><span class="p">:</span><span class="w"> </span><span class="l">do-storage-gitea-db</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Okay, there are a lot of things going on here, but the three things we need to note are the following:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-db</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Our network policy will look for this label to identify the pods which fell under its rule.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POSTGRES_PASSWORD</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-db-password</span><span class="w">
</span><span class="w">                </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">password</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>The database password will come from a secret.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/var/lib/postgresql/data</span><span class="w">
</span><span class="w">          </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">data</span><span class="w"> </span><span class="c"># important so it gets mounted properly</span><span class="w">
</span><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">git-db-data</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">git-db-data</span><span class="w">
</span><span class="w">          </span><span class="nt">persistentVolumeClaim</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">claimName</span><span class="p">:</span><span class="w"> </span><span class="l">do-storage-gitea-db</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>We also need a persistent volume otherwise the data will be lost on each pod restart.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PersistentVolumeClaim</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">powerhouse</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">do-storage-gitea-db</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">accessModes</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">ReadWriteOnce</span><span class="w">
</span><span class="w">  </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">storage</span><span class="p">:</span><span class="w"> </span><span class="l">10Gi</span><span class="w">
</span><span class="w">  </span><span class="nt">storageClassName</span><span class="p">:</span><span class="w"> </span><span class="l">do-block-storage</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h5 id="service">Service</h5>
<p>We also need a Service so Gitea will be able to reach it. This isn&rsquo;t public though so a NodePort is enough with no clusterIP.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">powerhouse</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-db-service</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">5432</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-db</span><span class="w">
</span><span class="w">  </span><span class="nt">clusterIP</span><span class="p">:</span><span class="w"> </span><span class="l">None</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>In order to reach this DB we can use a URL like this now from the Gitea app: <code>gitea-db-service.powerhouse.svc.cluster.local:5432</code>.</p>
<h5 id="networkpolicy">NetworkPolicy</h5>
<p>We want the Gitea app to be able to reach it. Which means in-out to the Gitea app and nothing else.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.k8s.io/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">NetworkPolicy</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-db-network-policy</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">powehouse</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">podSelector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-db</span><span class="w">
</span><span class="w">  </span><span class="nt">policyTypes</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">Ingress</span><span class="w">
</span><span class="w">  </span>- <span class="l">Egress</span><span class="w">
</span><span class="w">  </span><span class="nt">ingress</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">from</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">podSelector</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">gitea</span><span class="w">
</span><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">5432</span><span class="w">
</span><span class="w">  </span><span class="nt">egress</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">to</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">podSelector</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">gitea</span><span class="w">
</span><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">5432</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>We can test this now by exec-ing into the Pod of the DB deployment and trying to ping google.com for example. It should be denied. Yet later, when we deploy our Gitea app, that should be able to talk to the DB instance.</p>
<h5 id="secret">Secret</h5>
<p>Finally, we have a Secret which contains our db password base64 encoded.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Secret</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">cronohub</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-db-password</span><span class="w">
</span><span class="w"></span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Opaque</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">Z2l0ZWE=</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>That says password123. To get it, you can run something like <code>echo -n &quot;password123&quot; | base64</code>.</p>
<h4 id="gitea-app-ini">Gitea App ini</h4>
<p>Huh, with that done, we can go on with the application ini file. This can be configured via environment properties but once you get over a dozen configuration entries, it&rsquo;s just easier to use an app.ini. My app ini is large, so I won&rsquo;t post it here. I could mount it in as a file, but that proved to be difficult or not work at all properly because Gitea is running under a different user than root. Also, once the mount happened the fact the gitea was trying to write into it caused problems. Mounting as a different user didn&rsquo;t work out either, so I&rsquo;m using an <a href="https://kubernetes.io/docs/concepts/workloads/pods/init-containers/">InitContainer</a> to do the job. They are there for that reason. And it was actually a hell of a lot simpler than doing file mounting.</p>
<p>The app.ini is defined as a ConfigMap like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">kubectl create configmap gitea-app-ini --from-file=app.ini --namespace powerhouse
</code></pre></td></tr></table>
</div>
</div><p>This was done from the folder where my app.ini was residing.</p>
<h4 id="deployment-2">Deployment</h4>
<p>Now comes the big gun. The Gitea deployment file. This is how it looks like in all its glory:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">cronohub</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-app</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">gitea</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">gitea</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">gitea</span><span class="w">
</span><span class="w">        </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea</span><span class="w">
</span><span class="w">        </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">gitea</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">initContainers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">init-disk</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">busybox:latest</span><span class="w">
</span><span class="w">        </span><span class="nt">command</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="l">/bin/chown</span><span class="w">
</span><span class="w">        </span>- <span class="m">1000</span><span class="p">:</span><span class="m">1000</span><span class="w"> </span><span class="c"># we set the gid and uid of the user for gitea.</span><span class="w">
</span><span class="w">        </span>- <span class="l">/data</span><span class="w">
</span><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">git-data</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/data&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">readOnly</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">init-app-ini</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">busybox:latest</span><span class="w">
</span><span class="w">        </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s1">&#39;sh&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;-c&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;mkdir -p /data/gitea/conf/; cp /data/app.ini /data/gitea/conf&#39;</span><span class="p">]</span><span class="w">
</span><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">git-data</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/data&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">readOnly</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-app-ini-conf</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/data/app.ini</span><span class="w">
</span><span class="w">          </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">app.ini</span><span class="w">
</span><span class="w">          </span><span class="nt">readOnly</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">gitea/gitea:1.9.2</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">DB_PASSWD</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-db-password</span><span class="w">
</span><span class="w">                </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">password</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">DB_TYPE</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">configMapKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-config-map</span><span class="w">
</span><span class="w">                </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">DB_TYPE</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">DB_HOST</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">configMapKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-config-map</span><span class="w">
</span><span class="w">                </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">DB_HOST</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">DB_NAME</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">configMapKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-config-map</span><span class="w">
</span><span class="w">                </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">DB_NAME</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">DB_USER</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">configMapKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-config-map</span><span class="w">
</span><span class="w">                </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">DB_USER</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">3000</span><span class="w">
</span><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-http</span><span class="w">
</span><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">22</span><span class="w">
</span><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-ssh</span><span class="w">
</span><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/data</span><span class="w">
</span><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">git-data</span><span class="w">
</span><span class="w">          </span><span class="nt">readOnly</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">git-data</span><span class="w">
</span><span class="w">          </span><span class="nt">persistentVolumeClaim</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">claimName</span><span class="p">:</span><span class="w"> </span><span class="l">do-storage-gitea</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-app-ini-conf</span><span class="w">
</span><span class="w">          </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-app-ini</span><span class="w">
</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>The important bit is the initContainer section. What&rsquo;s happening here? We mount the app.ini file to the init container under /data. The awesome part about the initContainer is that the real container will have access to the file system the init container created.</p>
<p>So we take that file, fix the permissions on it and copy it to the right location under <code>/data/gitea/conf</code> for the Gitea app to work with.</p>
<p>Done!</p>
<p>And the configMap is simple:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">powerhouse</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-config-map</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">APP_COLOR</span><span class="p">:</span><span class="w"> </span><span class="l">blue</span><span class="w">
</span><span class="w">  </span><span class="nt">APP_MOD</span><span class="p">:</span><span class="w"> </span><span class="l">prod</span><span class="w">
</span><span class="w">  </span><span class="nt">DB_TYPE</span><span class="p">:</span><span class="w"> </span><span class="l">postgres</span><span class="w">
</span><span class="w">  </span><span class="nt">DB_HOST</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;gitea-db-service.cronohub.svc.cluster.local:5432&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">DB_NAME</span><span class="p">:</span><span class="w"> </span><span class="l">gitea</span><span class="w">
</span><span class="w">  </span><span class="nt">DB_USER</span><span class="p">:</span><span class="w"> </span><span class="l">gitea</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h4 id="ssh">SSH</h4>
<p>Normally, Ingress only allows HTTP based traffic control. But what would an ingress be without also regular TCP based routing?</p>
<p>But it&rsquo;s not trivial. Nginx Ingress provides a documentation for this here: <a href="https://kubernetes.github.io/ingress-nginx/user-guide/exposing-tcp-udp-services/">Exposing TCP and UDP services</a>. What does that mean in practice?</p>
<p>You see we are also exposing port 22 on the container:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">22</span><span class="w">
</span><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-ssh</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>I choose to differentiate my SSH port for Gitea from port 22 because that&rsquo;s just cumbersome to get done right. Gitea provides an explanation on how to do port 22 forwarding in a docker container with a custom git command which forwards commands to the container itself. This is all just plain too much to worry about.</p>
<p>I have this in the app.ini:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ini" data-lang="ini"><span class="na">SSH_PORT</span>         <span class="o">=</span> <span class="s">&lt;port of my choosing&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>And then this in the Service definition:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">powerhouse</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">gitea</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">gitea</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">gitea</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">gitea</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">gitea</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">http</span><span class="w">
</span><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">3000</span><span class="w">
</span><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-http</span><span class="w">
</span><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ssh</span><span class="w">
</span><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;port of my choosing&gt;</span><span class="w">
</span><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="l">gitea-ssh</span><span class="w">
</span><span class="w">    </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>And then, we edit the nginx-controller deployment like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">kubectl edit deployment.apps/nginx-ingress-controller
</code></pre></td></tr></table>
</div>
</div><p>And add this line <code>--tcp-services-configmap=cronohub/gitea-ssh-service</code> to the container&rsquo;s args field:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">args</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="l">/nginx-ingress-controller</span><span class="w">
</span><span class="w">        </span>- --<span class="l">default-backend-service=default/nginx-ingress-default-backend</span><span class="w">
</span><span class="w">        </span>- --<span class="l">election-id=ingress-controller-leader</span><span class="w">
</span><span class="w">        </span>- --<span class="l">ingress-class=nginx</span><span class="w">
</span><span class="w">        </span>- --<span class="l">configmap=default/nginx-ingress-controller</span><span class="w">
</span><span class="w">        </span>- --<span class="l">tcp-services-configmap=powerhouse/gitea-ssh-service</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>One more thing is that we have to open that port on the load balancer as well to get traffic to it. To that end, edit the nginx ingress service as well:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">kubectl edit services/nginx-ingress-controller
</code></pre></td></tr></table>
</div>
</div><p>And add the exposed port:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ssh</span><span class="w">
</span><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;port of my choosing&gt;</span><span class="w">
</span><span class="w">    </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;port of my choosing&gt;</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>There will probably be a nodePort section in there on the other ports. Ignore that for your change.</p>
<p>Also, if you are doing the nginx installation by hand, just add this or save the yaml file from those deployments like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">kubectl get service/nginx-ingress-controller -o yaml &gt; nginx-ingress-controller.yaml
</code></pre></td></tr></table>
</div>
</div><p>So you can deploy / modify it later on.</p>
<h4 id="finished-gitea">Finished Gitea</h4>
<p>And with that, visit <code>gitea.powerhouse.com</code> and it should work including HTTPS and SSH!</p>
<p>You can now clone repositories like this: <code>git clone ssh://git@gitea.powerhouse.com:1234/user/awesome_project.git</code> after you created your user.</p>
<p>User creation is done by using the gitea admin CLI tool described here: <a href="https://docs.gitea.io/en-us/command-line/">Gitea Documentation</a>.</p>
<p>It is important to note that we don&rsquo;t use <code>latest</code> anywhere. It&rsquo;s just not good if you are trying to update a service later on. We could set ImagePolicy to AlwaysPull but that&rsquo;s just not a good thing to do if you have a 2 gig image. Always use version and policy <code>imagePullPolicy: IfNotPresent</code> to save yourself some bandwidth.</p>
<h2 id="idle-checker">Idle Checker</h2>
<p><img src="/img/hosting/idle-checker.png" alt="idle-checker"></p>
<p>Let&rsquo;s create a last resource, then we&rsquo;ll call it a day.</p>
<p>The idle RPG is a cool little game that you play by&hellip; not playing. At all. If you play, you get penalties. Here is a cool resource to start: <a href="https://idlerpg.lolhosting.net">Idle RPG</a>. It looks something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">21:56 &lt;@IdleBot&gt; Verily I say unto thee, the Heavens have burst forth, and the blessed hand of God carried ganome 0 days, 03:52:11 toward level 45.
21:56 &lt;@IdleBot&gt; ganome reaches next level in 0 days, 01:49:16.
22:02 &lt;@IdleBot&gt; himuraken, the level 77 Mage Of BitFlips, is now online from nickname himuraken. Next level in 11 days, 10:35:53.
22:14 &lt;@IdleBot&gt; Nechayev, Sundance, and simple [2011/2347] have team battled HeavyPodda, Sixbierehomme, and L [1417/2717] and won! 0 days, 06:14:54 is removed from their clocks.
22:18 &lt;@IdleBot&gt; canton7 saw an episode of Ally McBeal. This terrible calamity has slowed them 0 days, 05:10:53 from level 85.
22:18 &lt;@IdleBot&gt; canton7 reaches next level in 2 days, 00:21:36.
22:26 &lt;@IdleBot&gt; Tor [4/1142] has challenged Brainiac [232/817] in combat and lost! 3 days, 23:06:05 is added to Tor&#39;s clock.
22:26 &lt;@IdleBot&gt; Tor reaches next level in 39 days, 23:39:35.
</code></pre></td></tr></table>
</div>
</div><p>It could happen that by some misfortune the bouncer gets restarted and it doesn&rsquo;t log you back in. Or you simply just lose connection and you don&rsquo;t re-connect. That is unacceptable because the point is to be present. Otherwise you don&rsquo;t play. So you need an early warning in case you are offline. Luckily, IdleRPG provides an XML based endpoint to get which contains your status.</p>
<p>From there, I&rsquo;m using mailgun with a registered domain to send me an email in case my status is offline. For that, here is a small Go program <a href="https://gist.github.com/Skarlso/318ddd6f8d71dbda8fbbd1a908fdb159">IdleRPG Checker Go Code</a>.</p>
<p>To put that into a Docker container, here is a Dockerfile:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="k">FROM</span><span class="s"> golang:latest as build</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> go get -v github.com/sirupsen/logrus <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>    go get -v github.com/mailgun/mailgun-go<span class="err">
</span><span class="err"></span><span class="k">COPY</span> ./main.go /code/<span class="err">
</span><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /code</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> <span class="nv">CGO_ENABLED</span><span class="o">=</span><span class="m">0</span> <span class="nv">GOOS</span><span class="o">=</span>linux go build -a -installsuffix cgo -o /idlerpg-checker .<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">FROM</span><span class="s"> alpine:latest</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> apk --no-cache add ca-certificates<span class="err">
</span><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>build /idlerpg-checker /idlerpg-checker<span class="err">
</span><span class="err"></span><span class="k">RUN</span> <span class="nb">echo</span> <span class="s2">&#34;v0.0.1&#34;</span> &gt;&gt; .version<span class="err">
</span><span class="err"></span><span class="k">ENTRYPOINT</span> <span class="p">[</span><span class="s2">&#34;/idlerpg-checker&#34;</span><span class="p">]</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><p>And the corresponding cronjob resource definition:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">batch/v1beta1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">CronJob</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">idle-checker</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">idle-checker</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">schedule</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;*/20 * * * *&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">jobTemplate</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">idle-checker</span><span class="w">
</span><span class="w">            </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">skarlso/idle-checker</span><span class="w">
</span><span class="w">            </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent</span><span class="w">
</span><span class="w">            </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">              </span>- <span class="nt">name</span><span class="p">:</span><span class="w">  </span><span class="l">MG_API_KEY</span><span class="w">
</span><span class="w">                </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">                  </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                    </span><span class="nt">name</span><span class="p">:</span><span class="w">  </span><span class="l">idle-rpg-secret</span><span class="w">
</span><span class="w">                    </span><span class="nt">key</span><span class="p">:</span><span class="w">  </span><span class="l">MG_API_KEY</span><span class="w">
</span><span class="w">              </span>- <span class="nt">name</span><span class="p">:</span><span class="w">  </span><span class="l">MG_DOMAIN</span><span class="w">
</span><span class="w">                </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">                  </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                    </span><span class="nt">name</span><span class="p">:</span><span class="w">  </span><span class="l">idle-rpg-secret</span><span class="w">
</span><span class="w">                    </span><span class="nt">key</span><span class="p">:</span><span class="w">  </span><span class="l">MG_DOMAIN</span><span class="w">
</span><span class="w">            </span><span class="nt">args</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s1">&#39;-username&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;username&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;-email&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;user@powerhouse.com&#39;</span><span class="p">]</span><span class="w">
</span><span class="w">          </span><span class="nt">restartPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">OnFailure</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Aaaand, the secret for the API key:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Secret</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">idle-checker</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">idle-rpg-secret</span><span class="w">
</span><span class="w"></span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Opaque</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">MG_API_KEY</span><span class="p">:</span><span class="w"> </span><span class="l">asdf=</span><span class="w">
</span><span class="w">  </span><span class="nt">MG_DOMAIN</span><span class="p">:</span><span class="w"> </span><span class="l">asdf==</span><span class="w">
</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Done. Huh. This will run every 20 minutes and check if the user with username <code>username</code> is online. If not, it will send an email to the given email address. Your levels are safe.</p>
<h1 id="closing-words">Closing words</h1>
<p>Phew. This has been quite the ride. The post is now really long, so I will split the rest out into a Part 2. That is, Athens and Monitoring.</p>
<p>Thank you for reading this far!</p>
<p>Cheers,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Updated Face-recog architecture drawing</title>
      <link>https://skarlso.github.io/2019/09/19/updated-face-recog-drawing/</link>
      <pubDate>Thu, 19 Sep 2019 13:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/09/19/updated-face-recog-drawing/</guid>
      <description><![CDATA[<p>I had a lot of fun using <a href="https://procreate.art">Procreate</a> to re-draw the architecture image I&rsquo;ve drawn for my distribute face recognition application detailed in this post <a href="https://skarlso.github.io/2018/03/15/kubernetes-distributed-application/">Distributed Face-Recognition App</a>.</p>
<p>Without much fanfare, here is the drawing:</p>
<p><img src="/img/kube/kube_architecture.png" alt="kube_architecture.png"></p>
<p>Thanks,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Efferent and Afferent metrics in Go</title>
      <link>https://skarlso.github.io/2019/04/21/efferent-and-afferent-metrics-in-go/</link>
      <pubDate>Sun, 21 Apr 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/04/21/efferent-and-afferent-metrics-in-go/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks!</p>
<p>Today I would like to write about a metric that I read in a book called Clean Architecture from Robert Cecil Martin ( Uncle Bob ).</p>
<h1 id="abstract">Abstract</h1>
<p>The metrics I mean are <a href="https://en.wikipedia.org/wiki/Software_package_metrics">Efferent</a> and <a href="https://en.wikipedia.org/wiki/Software_package_metrics">Afferent</a> coupling in packages. So you, dear reader, don&rsquo;t have to navigate away from this page, here are the descriptions pasted in:</p>
<ul>
<li>
<p>Afferent couplings (Ca): The number of classes in other packages that depend upon classes within the package is an indicator of the package&rsquo;s responsibility. Afferent couplings signal inward. (Affected by this package) (Fan-In).</p>
</li>
<li>
<p>Efferent couplings (Ce): The number of classes in other packages that the classes in this package depend upon is an indicator of the package&rsquo;s dependence on externalities. Efferent couplings signal outward. (Effecting this package) (Fan-Out).</p>
</li>
</ul>
<p>These metrics used together will indicate the stability / instability of each package in a project.</p>
<h1 id="metric-usage">Metric Usage</h1>
<p>What does it mean if the package is stable vs. unstable? Let&rsquo;s take a closer look.</p>
<h2 id="unstable">Unstable</h2>
<p>If the instability metric comes out as 1 or close to 1, that means that the package is unstable. It means that there are only packages which this package is depending upon and nothing, or only 1 or 2, packages depend on it. This infers two things:</p>
<ul>
<li>The package is easy to change since there is nothing depending on the behavior explicitly</li>
<li>The package is volatile since it depends on a lot of out side things</li>
</ul>
<p>The first one is self-explanatory. The second one has ramifications. These ramifications are that there are a lot of packages that could cause bugs in this package. Ideally, a package with instability 1 or high, requires a large test coverage to ensure that no bugs seep in.</p>
<h2 id="stable">Stable</h2>
<p>On the other spectrum lies the indicator for a stable package. If this metric is 0 or close to 0, the package is said to be stable. A stable package resists change because it has a lot of depending packages. The depending packages lock this package in place, meaning we can&rsquo;t change the package easily. Ideally this is the package that would contain business logic for example, or code which does not change often.</p>
<h1 id="appliance-in-go-ecosystem">Appliance in Go ecosystem</h1>
<p>The book was using mostly Java or C/C++ for examples and dealt with classes describing these metrics. Especially the Abstractness of a package which calculates as ratio of abstract classes + interfaces vs concrete classes and implementations. This isn&rsquo;t that easy to define in Go. Not impossible though and we could still get something close enough. Something like, count interfaces + structs vs implementations of said interfaces with function receivers and functions.</p>
<p>The easier of these is the coupling metrics. I think we can define them since Go also has import statements. Go doesn&rsquo;t have classes, but it&rsquo;s enough if we calculate the number of packages that said package depends upon and are depended upon by. Should be close enough.</p>
<h1 id="tool">Tool</h1>
<p>If there is a project with a <strong>lot</strong> of packages and files, it would be quite difficult to calculate things using your hands&hellip; Hence, <a href="https://github.com/Skarlso/effrit">Effrit</a>. This tool, at the writing of this post, only calculates the stability metric for now. If given a parameter like <code>-p effrit</code> it will only calculate the Fan-Out metrics considering project packages. If no project name is given, it will also calculate not project packages (for example cobra or aws sdk) as Efferent. Usage is really simple. Navigate to the root of the project and run <code>effrit scan -p &lt;projectname&gt;</code>.</p>
<h1 id="applying-the-tool">Applying the tool</h1>
<p>Let&rsquo;s see with a real example on using the tool and what to do with the metrics it provides.</p>
<p>I have a project called <a href="https://github.com/go-furnace/go-furnace">Furnace</a>. Running the tool on it I get the following stats:</p>
<p><img src="/img/effrit/effrit1.png" alt="furnace-before-tool">.</p>
<p>What do these means?</p>
<p>It means, that hopefully, <code>command</code> packages have a high coverage and that <code>config</code> packages don&rsquo;t require change that often. The coverage count for aws command package is:</p>
<p><code>coverage: 74.7% of statements</code></p>
<p>That is pretty good. I think it&rsquo;s covered well enough for now.</p>
<p>On to the <code>config</code> package. This is the whole file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">config</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;os/user&#34;</span>
	<span class="s">&#34;path/filepath&#34;</span>

	<span class="s">&#34;github.com/go-furnace/go-furnace/handle&#34;</span>
<span class="p">)</span>

<span class="c1">// Spinners is a collection os spinner types
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">Spinners</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">`←↖↑↗→↘↓↙`</span><span class="p">,</span>
	<span class="s">`▁▃▄▅▆▇█▇▆▅▄▃`</span><span class="p">,</span>
	<span class="s">`┤┘┴└├┌┬┐`</span><span class="p">,</span>
	<span class="s">`◰◳◲◱`</span><span class="p">,</span>
	<span class="s">`◴◷◶◵`</span><span class="p">,</span>
	<span class="s">`◐◓◑◒`</span><span class="p">,</span>
	<span class="s">`⣾⣽⣻⢿⡿⣟⣯⣷`</span><span class="p">,</span>
	<span class="s">`|/-\`</span><span class="p">}</span>

<span class="c1">// WAITFREQUENCY global wait frequency default.
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">WAITFREQUENCY</span> <span class="p">=</span> <span class="mi">1</span>

<span class="c1">// STACKNAME is the default name for a stack.
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">STACKNAME</span> <span class="p">=</span> <span class="s">&#34;FurnaceStack&#34;</span>

<span class="c1">// SPINNER is the index of which spinner to use. Defaults to 7.
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">SPINNER</span> <span class="p">=</span> <span class="mi">7</span>

<span class="c1">// Path retrieves the main configuration path.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Path</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="c1">// Get configuration path
</span><span class="c1"></span>	<span class="nx">usr</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">user</span><span class="p">.</span><span class="nf">Current</span><span class="p">()</span>
	<span class="nx">handle</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="k">return</span> <span class="nx">filepath</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">usr</span><span class="p">.</span><span class="nx">HomeDir</span><span class="p">,</span> <span class="s">&#34;.config&#34;</span><span class="p">,</span> <span class="s">&#34;go-furnace&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Not a lot of stuff in there. But it&rsquo;s using the <code>handle</code> package. Hence the <code>0.2</code>. Luckily, we also have some coverage to take care of that.</p>
<p>The <code>handle</code> is pretty stable. Let&rsquo;s take a peak inside:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">handle</span>

<span class="kn">import</span> <span class="s">&#34;log&#34;</span>

<span class="c1">// LogFatalf is used to define the fatal error handler function. In unit tests, this is used to
</span><span class="c1">// mock out fatal errors so we can test for them.
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">LogFatalf</span> <span class="p">=</span> <span class="nx">log</span><span class="p">.</span><span class="nx">Fatalf</span>

<span class="c1">// Error extracts the if err != nil check. If the given error is not nil it will call
</span><span class="c1">// the defined fatal error handler function.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Error</span><span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;Error occurred:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Fatal is a wrapper for LogFatalf function. It&#39;s used to throw a Fatal in case it needs to.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Fatal</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="nf">LogFatalf</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Basic logic to take care of errors in Furnace. Last time I changed this file was&hellip; a year ago. Yeah, I think it&rsquo;s doing fine.</p>
<h1 id="conclusion">Conclusion</h1>
<p>And that&rsquo;s it. Hopefully this is an interesting metric to use to define what packages may need refactoring, or need to be repurposed because they are too rigid. If a packages is stable, aka. hard to change but must undergo changes frequently, it may be time to refactor and introduce a mediator or a liaison package. If a package is unstable and has a lot of bugs, we might want to refactor it and inverse it&rsquo;s dependencies. This is called the Dependency Inversion Principle, DIP. Which is also described in the same book. However it&rsquo;s not always bad if a package is unstable. Maybe it contains code which needs to change frequently. It&rsquo;s a database schema code. Or an algorithm which requires constant tweaking. And that is fine. Just make sure it&rsquo;s covered well enough.</p>
<p>The principles that these metrics are based on are: <a href="http://wiki.c2.com/?StableAbstractionsPrinciple">SAP</a> and <a href="https://www.smartics.eu/confluence/display/ADOC/Stable+Dependencies+Principle">SDP</a>. Stable Abstraction Principle and Stable Dependencies Principle. These are also described in the same book, Clean Architecture. A highly recommend it. Applying these principles could help maintain the project&rsquo;s stability and it&rsquo;s dependencies.</p>
<p>Thank you for reading,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Living with a new Parser for a year</title>
      <link>https://skarlso.github.io/2019/04/12/living-with-a-parser/</link>
      <pubDate>Fri, 12 Apr 2019 08:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/04/12/living-with-a-parser/</guid>
      <description><![CDATA[<p>Hi folks!</p>
<p><img src="/img/parser/hi.jpg" alt="hi"></p>
<p>Today’s post is a retrospective. I would like to gather some thoughts about living with the new parser that I wrote for <a href="https://github.com/joshbuddy/jsonpath/">JsonPath</a>.</p>
<p>After a little over a year, some interesting problems surfaced that I thought I’d share for people who also would like to endeavor on this path. Let’s begin.</p>
<h1 id="previously">Previously</h1>
<p>About, two years ago, I took over managing / fixing / improving this ruby gem: <a href="https://github.com/joshbuddy/jsonpath">Json Parser</a>. It&rsquo;s a json parser in ruby. Amongst other problems, it used <code>eval</code> in the background to evaluate expressions. It was a security risk to use this gem to its full extent. Something had to be done about that.</p>
<p>I proceeded to write a semi-language parser which replaced eval that can be found here: <a href="https://github.com/joshbuddy/jsonpath/blob/master/lib/jsonpath/parser.rb">Parser</a>. The basic intention was to replace the bare minimum of the eval behavior, and so, it was lacking some serious logic. That got improved as time went by.</p>
<p>This is a one year retrospective on living with a self-written parser. Enjoy some of the quirks I faced so you don&rsquo;t have to.</p>
<h1 id="ast">AST</h1>
<p><img src="/img/parser/ast.jpg" alt="ast"></p>
<p>AST is short for <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">Abstract Syntax Tree</a>. It’s a data structure that is ideal for representing and parsing language syntax. All major lexers use some kind of AST in the background like this old Ruby language parser gem: <a href="https://github.com/whitequark/parser">Whitequark Parser</a>. This parser is used by projects like Rubocop and line coverage reports. It&rsquo;s usage is not trivial right out of the box. But as you move along you get a firm grasp of true potential.</p>
<p>I decided to not use that parser a year ago mainly because I thought it’s too much for what I’m trying to accomplish. Maybe I was right, maybe not. I tried to play with Parser recently but it’s none trivial nature and lack of documentation makes it cumbersome to use.</p>
<h1 id="the-first-problems">The first problems</h1>
<p><img src="/img/parser/infinity.jpg" alt="infinity"></p>
<p>What was then the first trouble that arose after I replaced eval? The parser back then was dumbed down a lot. The bug I faced was a simple infinite loop. The parser works like a lexer. It identifies tokens of certain type and tries to parse them into variables. This lexing had an error.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="o">-</span>        <span class="k">elsif</span> <span class="n">t</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/(\s+)?&#39;?(\w+)?[.,]?(\w+)?&#39;?(\s+)?/</span><span class="p">)</span> <span class="c1"># @TODO: At this point I should trim somewhere...</span>
<span class="o">+</span>        <span class="k">elsif</span> <span class="n">t</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/(\s+)?&#39;?.*&#39;?(\s+)?/</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>It was caught by this Json Path:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$.acceptNewTasks.[?(@.taskEndpoint == &#34;mps/awesome&#34;)].lastTaskPollTime
</code></pre></td></tr></table>
</div>
</div><p>The culprit was the <code>/</code> character. The tokenizer wasn’t prepared…</p>
<p>Eval would have no problem but the parser is using strict regex-s. This is where an AST would have had more luck.</p>
<h1 id="numbers">Numbers</h1>
<p><img src="/img/parser/twins1.jpg" alt="twins1"></p>
<p>The second problem was the fact that the parser is using strings. Who would have thought that the string <code>2.0</code> in fact does not equal to string <code>2</code>? In Ruby the simplest way of making sure a variable is a Number is by casting the variable to Number or Float. In case it’s not a Number we rescue and move on.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">el</span> <span class="o">=</span> <span class="nb">Float</span><span class="p">(</span><span class="n">el</span><span class="p">)</span> <span class="k">rescue</span> <span class="n">el</span>
</code></pre></td></tr></table>
</div>
</div><p>Incidentally this also solved the problem where the json path contained a number but since everything is a string this, also did not equal: <code>'1' == 1</code>.</p>
<p>Since first the string needed to be a Number.</p>
<h1 id="supporting-regexes">Supporting regexes</h1>
<p><img src="/img/parser/bouncer1.jpg" alt="bouncer1"></p>
<p>Next came supported operators. The parser only supported the basic operators: <code>&lt;&gt;=</code>. It was missing <code>=~</code> from this. Which meant people who would use regexes to filter JSON would no longer be able to do so. This was only a tiny modification actually:</p>
<p>First, the operator filter needed to be aware&hellip;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="o">-</span> <span class="k">elsif</span> <span class="n">t</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/(\s+)?[&lt;&gt;=][=&lt;&gt;]?(\s+)?/</span><span class="p">)</span>
<span class="o">+</span> <span class="k">elsif</span> <span class="n">t</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/(\s+)?[&lt;&gt;=][=~]?(\s+)?/</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>With that done, we just <code>.to_regexp</code> it with the power of ruby and <code>send</code> would automatically pick it up. And of course test coverage.</p>
<h1 id="regression">Regression</h1>
<p>Once the parser was introduced I knew that it would create problems, since eval did many things that the parser could not handle. And they started to arrive slowly. One-by-one.</p>
<h2 id="booleans">Booleans</h2>
<p><img src="/img/parser/twins2.jpg" alt="twins2"></p>
<p>Aka, the story of <code>true == 'true'</code>&hellip; Inherently working with strings here makes it difficult to detect when the type boolean is meant or a string which happens to say <code>true</code>. This one was easy to solve as well in the end:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">operand</span> <span class="o">=</span> <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="s1">&#39;true&#39;</span>
            <span class="kp">true</span>
        <span class="k">elsif</span> <span class="n">t</span> <span class="o">==</span> <span class="s1">&#39;false&#39;</span>
            <span class="kp">false</span>
        <span class="k">else</span>
            <span class="n">operator</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span> <span class="o">==</span> <span class="s1">&#39;=~&#39;</span> <span class="p">?</span> <span class="n">t</span><span class="o">.</span><span class="n">to_regexp</span> <span class="p">:</span> <span class="n">t</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">%r{^&#39;|&#39;$}</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span> <span class="c1"># We also handle regexp here.</span>
        <span class="k">end</span>
</code></pre></td></tr></table>
</div>
</div><p>Ignoring the regex part, this was all it needed.</p>
<h2 id="syntax">Syntax</h2>
<p><img src="/img/parser/bouncer3.jpg" alt="bouncer3"></p>
<p>Some smaller tid-bits here and there also started to crop up. Things that eval did not mind at all, but my poor Parser couldn&rsquo;t handle. The regex started out tightly tied. This meant that certain characters weren&rsquo;t properly detected. Characters like the underscore, or <code>@</code> or <code>/</code>&hellip; All these weren&rsquo;t picked up by my tight regexp. I had to widen it a bit using .* at certain places.</p>
<h2 id="number-formatting">Number formatting</h2>
<p>Formatting and comparing numbers gave me a lot of headache. I had to detect whether I’m dealing with a number or a string parsed as a number or a number but that was converted into string or a string that happened to be a number. Geez…</p>
<p>I ended up making it simple like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">el</span> <span class="o">=</span> <span class="nb">Float</span><span class="p">(</span><span class="n">el</span><span class="p">)</span> <span class="k">rescue</span> <span class="n">el</span>
<span class="n">operand</span> <span class="o">=</span> <span class="nb">Float</span><span class="p">(</span><span class="n">operand</span><span class="p">)</span> <span class="k">rescue</span> <span class="n">operand</span>
</code></pre></td></tr></table>
</div>
</div><p>Basically everything is a number. Doesn’t matter where it came from, what it was in the past… It’s a number if it can be converted. This, of course, also means that a test like this one fails:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby">  <span class="k">def</span> <span class="nf">test_number_match</span>
    <span class="n">json</span> <span class="o">=</span> <span class="p">{</span>
      <span class="ss">channels</span><span class="p">:</span><span class="o">[</span>
        <span class="p">{</span>
          <span class="ss">elem</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="ss">elem</span><span class="p">:</span> <span class="s1">&#39;1&#39;</span>
        <span class="p">}</span>
      <span class="o">]</span>
    <span class="p">}</span><span class="o">.</span><span class="n">to_json</span>

    <span class="n">assert_equal</span> <span class="o">[</span><span class="p">{</span> <span class="s1">&#39;elem&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">}</span><span class="o">]</span><span class="p">,</span> <span class="no">JsonPath</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="n">json</span><span class="p">,</span> <span class="s2">&#34;$..channels[?(@.elem == 1)]&#34;</span><span class="p">)</span>
  <span class="k">end</span>
</code></pre></td></tr></table>
</div>
</div><p>Both will match… Even though you’d expect it only to match one. Luckily though… this is exactly how <a href="http://jsonpath.com/">http://jsonpath.com/</a> works as well. An AST would detect that it’s a number type… But since I’m parsing strings here, that would be almost impossible a feat to accomplish in a nice manner.</p>
<h2 id="groups">Groups</h2>
<p><img src="/img/parser/bouncer2.jpg" alt="bouncer2"></p>
<p>And finally, the biggest one… Groups in conditions. A query like this one for example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$..book[?((@[&#39;author&#39;] == &#39;Evelyn Waugh&#39; || @[&#39;author&#39;] == &#39;Herman Melville&#39; &amp;&amp; (@[&#39;price&#39;] == 33 || @[&#39;price&#39;] == 9))]
</code></pre></td></tr></table>
</div>
</div><p>Something like this was never parsed correctly. Since the parser didn’t understand grouping and order of evaluation. Let’s break it down. How do we get from a monstrous like that one above to something that can be handled? We take it one group at a time.</p>
<h3 id="parentheses">Parentheses</h3>
<p>As a first step, we make sure that the parentheses match. It’s possible that someone didn’t pay attention and left out a closing parentheses. Now, there are a couple of way of doing that in Ruby, but I went for the most plain blatant one.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby">    <span class="k">def</span> <span class="nf">check_parenthesis_count</span><span class="p">(</span><span class="n">exp</span><span class="p">)</span>
      <span class="k">return</span> <span class="kp">true</span> <span class="k">unless</span> <span class="n">exp</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&#34;(&#34;</span><span class="p">)</span>
      <span class="n">depth</span> <span class="o">=</span> <span class="mi">0</span>
      <span class="n">exp</span><span class="o">.</span><span class="n">chars</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
        <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s1">&#39;(&#39;</span>
          <span class="n">depth</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">elsif</span> <span class="n">c</span> <span class="o">==</span> <span class="s1">&#39;)&#39;</span>
          <span class="n">depth</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">end</span>
      <span class="k">end</span>
      <span class="n">depth</span> <span class="o">==</span> <span class="mi">0</span>
    <span class="k">end</span>
</code></pre></td></tr></table>
</div>
</div><p>A basic depth counter. We do this first, to avoid parsing an invalid query.</p>
<h3 id="breaking-it-down">Breaking it down</h3>
<p>Next we break down this complex thing into a query that makes more sense to the parser. To do that, we take each group and extract the operation in them and replace it with the value they provide. Meaning a query like the one above essentially should look like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">((false || false) &amp;&amp; (false || true))
</code></pre></td></tr></table>
</div>
</div><p>Neat. This is handled by this code segment: <a href="https://github.com/joshbuddy/jsonpath/blob/b2525b8e8c596ddf1c8b40982529300b5a98132b/lib/jsonpath/parser.rb#L112">Parser</a>.</p>
<p>The parsing function is called over and over again until there are no parentheses left in the expression. Aka, a single true or false or number remains.</p>
<p>Now, who can spot an issue with that? The function <code>bool_or_exp</code> is there to return a float or a boolean value. If it returns a float, we still &amp;&amp;= -it together with the result&hellip; Thus, if there is a query like this one for example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$..book[?(@.length-5 &amp;&amp; @.type == &#39;asdf&#39;)]
</code></pre></td></tr></table>
</div>
</div><p>This would fail horribly. Which means, asking for a specific index in a json in a grouped expression is not supported at the moment.</p>
<h3 id="return-value">Return Value</h3>
<p>The parser doesn’t just return a bool value and call it a day. It also returns indexes like you read above. Indexes in cases when there is a query that returns the location of an item in the node and not if the node contains something or matches some data. For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$..book[(@.length-5)]
</code></pre></td></tr></table>
</div>
</div><p>Returns the length-5-th book.</p>
<h1 id="outstanding-issues">Outstanding issues</h1>
<p>Right now there are two outstanding issues. The one mentioned above, where you can’t nest indexes and true/false notations. And the other is a submitted issue in which it’s described that it’s not possible to use something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$.phoneNumbers[?(@[0].type == &#39;home&#39;)]
</code></pre></td></tr></table>
</div>
</div><p>Which basically boils down to the fact that Jsonpath can’t handle nested lists like these:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;phoneNumbers&#34;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">[{</span>
      <span class="nt">&#34;type&#34;</span>  <span class="p">:</span> <span class="s2">&#34;iPhone&#34;</span><span class="p">,</span>
      <span class="nt">&#34;number&#34;</span><span class="p">:</span> <span class="s2">&#34;0123-4567-8888&#34;</span>
    <span class="p">}],</span>
    <span class="p">[{</span>
      <span class="nt">&#34;type&#34;</span>  <span class="p">:</span> <span class="s2">&#34;home&#34;</span><span class="p">,</span>
      <span class="nt">&#34;number&#34;</span><span class="p">:</span> <span class="s2">&#34;0123-4567-8910&#34;</span>
    <span class="p">}]</span>
  <span class="p">]</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>That isn’t actually the problem of the parser, but Jsonpath itself.</p>
<h1 id="conclusion">Conclusion</h1>
<p>Like a good marriage, living with a Parser is a lot of compromise and ironing out edges and working on making it better for both parties involved. I have no doubt that there are more bugs in this code, but I&rsquo;m trying to keep it concise and clear to read as much as possible.</p>
<p>I hope this was as fun to read as it was to write.</p>
<p>Thank you for reading,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Deploy a Hugo Blog Github Actions</title>
      <link>https://skarlso.github.io/2019/03/19/deploy-hugo-blog-github-actions/</link>
      <pubDate>Tue, 19 Mar 2019 22:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/03/19/deploy-hugo-blog-github-actions/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>Today I thought I show you how you can use <a href="https://github.com/features/actions">Github Actions</a> to deploy a hugo based blog like this one.</p>
<p>Let&rsquo;s dive in.</p>
<h1 id="actions">Actions</h1>
<p>What are actions? If you read the above linked document they are basically steps performed in containers based on some events that happened with your repository. Events can be such as pushing, creating a PR or creating/closing an issue etc.</p>
<p>We need an even on a push.</p>
<p>Actions is in beta right now so much of the documentation has some gaps but they are fairly okay. I recommend reading through this one carefully: <a href="https://developer.github.com/actions/">Developer Guide</a>. This describes for example accessing the environment. That is important because we will need to access the generated content from one action in the next action.</p>
<h1 id="dockerfile">Dockerfile</h1>
<p>Each action requires a Dockerfile which will be used to create a container to run this particular action in. The Dockerfile uses LABELS to mark a container. It is recommended to create an ENTRYPOINT in the Dockerfile that can work with CMDs passed in from the action.</p>
<p>For example my pusher container has the ability to push into any repository thanks to using arguments for the entrypoint.sh script.</p>
<p>We&rsquo;ll see that later on.</p>
<h1 id="blog-actions">Blog actions</h1>
<p>Let&rsquo;s look at the two actions in detail which we&rsquo;ll be using.</p>
<h2 id="builder">Builder</h2>
<p>First, we need to build the blog. This is accomplished pretty much the same as I wrote earlier in the travis blog part but with a little extra information.</p>
<p>This is the Dockerfile:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="k">FROM</span><span class="s"> golang:latest</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">LABEL</span> <span class="s2">&#34;name&#34;</span><span class="o">=</span><span class="s2">&#34;Hugo Builder&#34;</span><span class="err">
</span><span class="err"></span><span class="k">LABEL</span> <span class="s2">&#34;maintainer&#34;</span><span class="o">=</span><span class="s2">&#34;Gergely Brautigam &lt;gergely@gergelybrautigam.com&gt;&#34;</span><span class="err">
</span><span class="err"></span><span class="k">LABEL</span> <span class="s2">&#34;version&#34;</span><span class="o">=</span><span class="s2">&#34;0.1.0&#34;</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">LABEL</span> <span class="s2">&#34;com.github.actions.name&#34;</span><span class="o">=</span><span class="s2">&#34;Go Builder&#34;</span><span class="err">
</span><span class="err"></span><span class="k">LABEL</span> <span class="s2">&#34;com.github.actions.description&#34;</span><span class="o">=</span><span class="s2">&#34;Build a hugo blog&#34;</span><span class="err">
</span><span class="err"></span><span class="k">LABEL</span> <span class="s2">&#34;com.github.actions.icon&#34;</span><span class="o">=</span><span class="s2">&#34;package&#34;</span><span class="err">
</span><span class="err"></span><span class="k">LABEL</span> <span class="s2">&#34;com.github.actions.color&#34;</span><span class="o">=</span><span class="s2">&#34;#E0EBF5&#34;</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> <span class="se">\
</span><span class="se"></span>  apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>  apt-get install -y ca-certificates openssl git <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>  update-ca-certificates <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>  rm -rf /var/lib/apt<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> go get github.com/gohugoio/hugo<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">COPY</span> entrypoint.sh /entrypoint.sh<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">ENTRYPOINT</span> <span class="p">[</span><span class="s2">&#34;/entrypoint.sh&#34;</span><span class="p">]</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><p>Pretty simple. The entrypoint script looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="nb">set</span> -e
<span class="nb">set</span> -x
<span class="nb">set</span> -o pipefail

<span class="k">if</span> <span class="o">[[</span> -z <span class="s2">&#34;</span><span class="nv">$GITHUB_WORKSPACE</span><span class="s2">&#34;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
  <span class="nb">echo</span> <span class="s2">&#34;Set the GITHUB_WORKSPACE env variable.&#34;</span>
  <span class="nb">exit</span> <span class="m">1</span>
<span class="k">fi</span>

<span class="k">if</span> <span class="o">[[</span> -z <span class="s2">&#34;</span><span class="nv">$GITHUB_REPOSITORY</span><span class="s2">&#34;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
  <span class="nb">echo</span> <span class="s2">&#34;Set the GITHUB_REPOSITORY env variable.&#34;</span>
  <span class="nb">exit</span> <span class="m">1</span>
<span class="k">fi</span>

<span class="nv">root_path</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$GITHUB_WORKSPACE</span><span class="s2">&#34;</span>
<span class="nb">echo</span> <span class="s2">&#34;Root path is: </span><span class="si">${</span><span class="nv">root_path</span><span class="si">}</span><span class="s2">&#34;</span>
<span class="nv">blog_path</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$GITHUB_WORKSPACE</span><span class="s2">/.blog&#34;</span>
<span class="nb">echo</span> <span class="s2">&#34;Blog path is: </span><span class="si">${</span><span class="nv">blog_path</span><span class="si">}</span><span class="s2">&#34;</span>
mkdir -p <span class="s2">&#34;</span><span class="nv">$blog_path</span><span class="s2">&#34;</span>
mkdir -p <span class="s2">&#34;</span><span class="nv">$root_path</span><span class="s2">&#34;</span>
<span class="nb">cd</span> <span class="s2">&#34;</span><span class="nv">$root_path</span><span class="s2">&#34;</span>
<span class="nb">echo</span> <span class="s2">&#34;Preparing to build blog&#34;</span>
hugo --theme hermit
<span class="nb">echo</span> <span class="s2">&#34;Building is done. Copying over generated files&#34;</span>
cp -R public/* <span class="s2">&#34;</span><span class="nv">$blog_path</span><span class="s2">&#34;</span>/
<span class="nb">echo</span> <span class="s2">&#34;Copy is done.&#34;</span>

<span class="nb">exit</span> <span class="m">0</span>
</code></pre></td></tr></table>
</div>
</div><p>The interesting parts here are <code>GITHUB_WORKSPACE</code> and <code>GITHUB_REPOSITORY</code>. The workspace is where the repository is located at.</p>
<p>This is the place where we will copy our built blog files. Since this is a mount basically on the local build machine the next action which comes along will see the folder <code>.blog</code>. This is how we pass artifacts between actions.</p>
<p>This action can be found here: <a href="https://github.com/Skarlso/blog-builder">Hugo Blog Builder Action</a>.</p>
<h2 id="publisher">Publisher</h2>
<p>Once the building finishes successfully we can push it to the new location.</p>
<p>Dockerfile is similar to the one above in every regard. Except for the name and that it doesn&rsquo;t need Hugo and the command&hellip;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="k">FROM</span><span class="s"> golang:latest</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">LABEL</span> <span class="s2">&#34;name&#34;</span><span class="o">=</span><span class="s2">&#34;Hugo Pusher&#34;</span><span class="err">
</span><span class="err"></span><span class="k">LABEL</span> <span class="s2">&#34;maintainer&#34;</span><span class="o">=</span><span class="s2">&#34;Gergely Brautigam &lt;gergely@gergelybrautigam.com&gt;&#34;</span><span class="err">
</span><span class="err"></span><span class="k">LABEL</span> <span class="s2">&#34;version&#34;</span><span class="o">=</span><span class="s2">&#34;0.1.0&#34;</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">LABEL</span> <span class="s2">&#34;com.github.actions.name&#34;</span><span class="o">=</span><span class="s2">&#34;Go Pusher&#34;</span><span class="err">
</span><span class="err"></span><span class="k">LABEL</span> <span class="s2">&#34;com.github.actions.description&#34;</span><span class="o">=</span><span class="s2">&#34;Push a hugo blog&#34;</span><span class="err">
</span><span class="err"></span><span class="k">LABEL</span> <span class="s2">&#34;com.github.actions.icon&#34;</span><span class="o">=</span><span class="s2">&#34;package&#34;</span><span class="err">
</span><span class="err"></span><span class="k">LABEL</span> <span class="s2">&#34;com.github.actions.color&#34;</span><span class="o">=</span><span class="s2">&#34;#E0EBF5&#34;</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> <span class="se">\
</span><span class="se"></span>  apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>  apt-get install -y ca-certificates openssl git <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>  update-ca-certificates <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>  rm -rf /var/lib/apt<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">COPY</span> entrypoint.sh /entrypoint.sh<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">ENTRYPOINT</span> <span class="p">[</span><span class="s2">&#34;/entrypoint.sh&#34;</span><span class="p">]</span><span class="err">
</span><span class="err"></span><span class="k">CMD</span> <span class="p">[</span><span class="s2">&#34;Skarlso/skarlso.github.io.git&#34;</span><span class="p">]</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><p>Why do we require the CMD? Let&rsquo;s take a look at the script.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="nb">set</span> -e
<span class="nb">set</span> -x

<span class="k">if</span> <span class="o">[[</span> -z <span class="s2">&#34;</span><span class="nv">$GITHUB_WORKSPACE</span><span class="s2">&#34;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
  <span class="nb">echo</span> <span class="s2">&#34;Set the GITHUB_WORKSPACE env variable.&#34;</span>
  <span class="nb">exit</span> <span class="m">1</span>
<span class="k">fi</span>

<span class="k">if</span> <span class="o">[[</span> -z <span class="s2">&#34;</span><span class="nv">$GITHUB_REPOSITORY</span><span class="s2">&#34;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
  <span class="nb">echo</span> <span class="s2">&#34;Set the GITHUB_REPOSITORY env variable.&#34;</span>
  <span class="nb">exit</span> <span class="m">1</span>
<span class="k">fi</span>

setup_git<span class="o">()</span> <span class="o">{</span>
  <span class="nv">repo</span><span class="o">=</span><span class="nv">$1</span>
  git config --global user.email <span class="s2">&#34;bot@github.com&#34;</span>
  git config --global user.name <span class="s2">&#34;Github Actions&#34;</span>
  git init
  <span class="nb">echo</span> <span class="s2">&#34;Starting to clone blog repository&#34;</span>
  git remote add origin https://<span class="s2">&#34;</span><span class="si">${</span><span class="nv">PUSH_TOKEN</span><span class="si">}</span><span class="s2">&#34;</span>@github.com/<span class="s2">&#34;</span><span class="si">${</span><span class="nv">repo</span><span class="si">}</span><span class="s2">&#34;</span> &gt; /dev/null 2&gt;<span class="p">&amp;</span><span class="m">1</span>
  git pull origin master
  <span class="nb">echo</span> <span class="s2">&#34;Cloning is done&#34;</span>
  ls -l
<span class="o">}</span>

commit_website_files<span class="o">()</span> <span class="o">{</span>
  git add .
  git commit -am <span class="s2">&#34;Github Action Build </span><span class="si">${</span><span class="nv">GITHUB_SHA</span><span class="si">}</span><span class="s2">&#34;</span>
<span class="o">}</span>

upload_files<span class="o">()</span> <span class="o">{</span>
  git push --quiet --set-upstream origin master
<span class="o">}</span>

<span class="nb">echo</span> <span class="s2">&#34;Beginning publishing workflow&#34;</span>
<span class="nv">repo</span><span class="o">=</span><span class="nv">$1</span>
<span class="k">if</span> <span class="o">[</span> -z <span class="s2">&#34;</span><span class="si">${</span><span class="nv">repo</span><span class="si">}</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nb">echo</span> <span class="s2">&#34;Repo must be defined.&#34;</span>
    <span class="nb">exit</span> <span class="m">1</span>
<span class="k">fi</span>
<span class="nb">echo</span> <span class="s2">&#34;Using repository </span><span class="si">${</span><span class="nv">repo</span><span class="si">}</span><span class="s2"> to push to&#34;</span>
mkdir /opt/publish <span class="o">&amp;&amp;</span> <span class="nb">cd</span> /opt/publish
<span class="nv">blog_path</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$GITHUB_WORKSPACE</span><span class="s2">/.blog&#34;</span>
<span class="nb">echo</span> <span class="s2">&#34;Blog is located at: </span><span class="si">${</span><span class="nv">blog_path</span><span class="si">}</span><span class="s2">&#34;</span>
ls -l <span class="s2">&#34;</span><span class="si">${</span><span class="nv">blog_path</span><span class="si">}</span><span class="s2">&#34;</span>
<span class="nb">echo</span> <span class="s2">&#34;Setting up git&#34;</span>
setup_git <span class="s2">&#34;</span><span class="si">${</span><span class="nv">repo</span><span class="si">}</span><span class="s2">&#34;</span>
cp -R <span class="s2">&#34;</span><span class="si">${</span><span class="nv">blog_path</span><span class="si">}</span><span class="s2">&#34;</span>/* .
<span class="nb">echo</span> <span class="s2">&#34;Copied over generated content from blog path. Committing.&#34;</span>
commit_website_files
<span class="nb">echo</span> <span class="s2">&#34;Committed. Pushing.&#34;</span>
upload_files
<span class="nb">echo</span> <span class="s2">&#34;All done.&#34;</span>
<span class="nb">exit</span> <span class="m">0</span>
</code></pre></td></tr></table>
</div>
</div><p>Now this is a lot more involved. I&rsquo;m leaving as many echos in here as possible for esae of debugging.</p>
<p>The interesting part in here is the <code>repo=$1</code>. This is why we need CMD specified. But this is what makes this Action a bit more flexible too. It can push anywhere it has access to.</p>
<p>This action can be found here: <a href="https://github.com/Skarlso/blog-publisher">Hugo Blog Publisher Action</a>.</p>
<h2 id="the-workflow-file">The Workflow file</h2>
<p>How does this all fit together? You have to create a workflow file which looks something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">workflow &#34;Publish Blog&#34; {
  on = &#34;push&#34;
  resolves = [&#34;blog-publisher&#34;]
}

action &#34;blog-builder&#34; {
  uses = &#34;skarlso/blog-builder@master&#34;
  secrets = [&#34;GITHUB_TOKEN&#34;]
}

action &#34;blog-publisher&#34; {
  uses = &#34;skarlso/blog-publisher@master&#34;
  needs = [&#34;blog-builder&#34;]
  secrets = [&#34;GITHUB_TOKEN&#34;, &#34;PUSH_TOKEN&#34;]
}
</code></pre></td></tr></table>
</div>
</div><p>This is located in your repositroy under <code>.github/main.workdflow</code>. Notice the secrets. GITHUB_TOKEN is created for you by Github. This is a basic token which lets you access the github API. But it can&rsquo;t be used for pushing code. Thus, we need another token. This can be defined under your repository / settings / secrets. Once you have a token, add a new secret called PUSH_TOKEN and&hellip; done.</p>
<p>Everything should be ready to go.</p>
<h2 id="location-of-the-actions">Location of the actions</h2>
<p>Now, I read the doc and should have been possible to have these actions in the repositroy itself. However, I faced some problems with that setup so I ended up having actions in their respectice repository. That&rsquo;s why <code>uses</code> is set up to be <code>skarlso/&lt;action-name&gt;@branch</code>.</p>
<h1 id="conclusion">Conclusion</h1>
<p>On a push now the blog is built and published. If a step fails it won&rsquo;t be published. It&rsquo;s actually a lot faster than my travis build was.</p>
<p>Thank you for reading,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Cronohub: Archive from anywhere to anywhere</title>
      <link>https://skarlso.github.io/2019/03/19/cronohub/</link>
      <pubDate>Tue, 19 Mar 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/03/19/cronohub/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Good afternoon folks.</p>
<p>Today, I would like to talk a little bit about <a href="https://github.com/cronohub/cronohub">Cronohub</a>. It&rsquo;s a Python application
which you can use to archive anything from anywhere to anywhere. It uses plugins to archive this versatility.</p>
<p>Let me show you some of its features.</p>
<h1 id="main-usage">Main Usage</h1>
<p>Cronohub is a python application which uses the power and ease of usage of Python to give the user a
framework. This Framework can then be used to implement concrete functionality in the form of plugins.</p>
<p>The plugins provide the essential working logic for Cronohub. Cronohub itself, is basically a Hub for these
plugins.</p>
<p>What can Cronohub be actually used for? Say, you have a gazillion Github repositories you would like to archive to a
S3 bucket. Or SCP to another server. Or to ownCloud&hellip; You would use cronohub as such:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">❯ cronohub -s {github,gitlab} -t {s3,owncloud,scp}
</code></pre></td></tr></table>
</div>
</div><p>It is this simple. What&rsquo;s going on here then? <code>-s</code> tells Cronohub to use a source plugin called <code>github</code> where as
<code>-t</code> tells it to use a target plugin called <code>s3</code> or <code>owncloud</code> or an <code>scp</code> operation.</p>
<h2 id="under-the-hood">Under the hood</h2>
<p>What happens then is that the source plugin downloads the repositories for a given user. The plugins themselves can
require certain configuration options to be provided. Like environment properties. To get the Help of a plugin you
can simply ask Cronohub like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">❯ cronohub help --source-help github
Help (github source plugin):
    - Environment Property:
        CRONO_GITHUB_TOKEN: a token with access to listing repositories for a given user.
    - File that filters the list of repositories to archive. If not present, all will be archived.
        ~/.config/cronohub/configurations/github/.repo_list
</code></pre></td></tr></table>
</div>
</div><p>It will display help information for that plugin.</p>
<p>Once the source plugin finished downloading the requested repositories to a given location it will pass on a list
of files to the target plugin for archiving. The target plugin takes this list of files and will add a timestamp
to the file and upload them with the requested operation.</p>
<p>The plugins take care of parallelization or threading if this makes it faster. For example the github plugin downloads
at most 5 archive files concurrently.</p>
<h1 id="plugins">Plugins</h1>
<p>What are plugins then? The plugins adhere to an ABC. An Abstract Base Class. This class defines the abilities and
structure of a plugin. It looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">abc</span> <span class="kn">import</span> <span class="n">ABCMeta</span><span class="p">,</span> <span class="n">abstractmethod</span>


<span class="k">class</span> <span class="nc">CronohubSourcePlugin</span><span class="p">(</span><span class="n">metaclass</span><span class="o">=</span><span class="n">ABCMeta</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    This is the basic definition of a CronoHub plugin.
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="nd">@abstractmethod</span>
    <span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="o">...</span>

    <span class="nd">@abstractmethod</span>
    <span class="k">def</span> <span class="nf">help</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="o">...</span>

    <span class="nd">@abstractmethod</span>
    <span class="k">def</span> <span class="nf">fetch</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Returns a tuple (str, str) where there first parameter is the name of the
</span><span class="s2">        archive and the second is the location as a full path. Exp:
</span><span class="s2">        (&#34;my-project-12345&#34;, &#34;/home/user/projects/my-project/my-project.tar.gz&#34;)
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="o">...</span>
</code></pre></td></tr></table>
</div>
</div><p>Validation will be called before the plugin can be used. This method can be used to validate settings
for a plugin, for example if a token is provided for the github plugin. Or a bucket name is defined for the
S3 plugin etc.</p>
<p>Help will display information just like we saw above and fetch will actually perform the downloading or
fetching of files to later archive.</p>
<p>Plugins are located in this repository: <a href="https://github.com/cronohub/plugins">Cronohub plugins</a>.</p>
<p>Hopefully, at some point I&rsquo;ll finish <a href="https://cronohub.org">https://cronohub.org</a> and then there will be an online repository for these.</p>
<p>Plugins are located at <code>~/.config/cronohub/plugins/{target,source}</code>. Each plugin must take care of its own
dependencies via a <code>requirements.txt</code> file.</p>
<p>Right now, there are only a few plugins available.</p>
<table>
<thead>
<tr>
<th style="text-align:center">Source Plugins</th>
<th style="text-align:center">Target Plugins</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Github</td>
<td style="text-align:center">S3</td>
</tr>
<tr>
<td style="text-align:center">Gitlab</td>
<td style="text-align:center">SCP</td>
</tr>
<tr>
<td style="text-align:center">Local</td>
<td style="text-align:center">ownCloud</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">No-Op</td>
</tr>
</tbody>
</table>
<p>More are hopefully on the way. Local is simply gathering a list of files from a folder. And no-op is what it says. It&rsquo;s good for debugging a source plugin as it doesn&rsquo;t do anything else but displays the files it got from the source plugin.</p>
<h1 id="installation">Installation</h1>
<p>Installing is dead trivial. Simply run:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">pip install cronohub
</code></pre></td></tr></table>
</div>
</div><p>&hellip; and that&rsquo;s it. It&rsquo;s published on pypi.org.</p>
<h1 id="contribution">Contribution</h1>
<p>Plugin contributions are heartily welcomed!</p>
<p>And that&rsquo;s it.</p>
<p>Thank you for reading,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Deploy a Hugo Blog with Travis on Git Push</title>
      <link>https://skarlso.github.io/2019/03/18/hugo-blog-with-travis-deployment/</link>
      <pubDate>Mon, 18 Mar 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/03/18/hugo-blog-with-travis-deployment/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>I&rsquo;ve been using the Hugo build for wercker for a long time now. Recent problems occurred though where I did not understand at first
what the problem was. It was quite difficult to debug since I did not have too much insight on the wercker build itself. Turned
out that I deleted the GITHUB token that the process was using. However, the error message was telling me that a function failed
to load some other function. Which was totally unrelated.</p>
<p>Thus, I thought that I&rsquo;m going to shift away from this outside medium to a different one that I&rsquo;m already familiar with and have
greater control over.</p>
<p>Hence, Travis. Incidentally, since I will no longer be dependend on a third party component (which was the image wercker was
using), I&rsquo;ll be able to switch away from this build platform easily. For example, to CircleCI.</p>
<p>I&rsquo;m using github pages, but without the whole convoluted submodule init, different branch stuff. I find that that simply adds unnecessary complexity to the whole thing. I&rsquo;m keeping the source and the website in a different repository.</p>
<p>The steps are simple:</p>
<ul>
<li>Get the source</li>
<li>Generate the content locally using <code>hugo</code></li>
<li>Setup Git</li>
<li>Get the source for the generated web site</li>
<li>Copy in the newly generated code</li>
<li>Push the code up to git</li>
</ul>
<p>Sounds simple&hellip; In fact it&rsquo;s so simple, it&rsquo;s three files.</p>
<h3 id="travis">Travis</h3>
<p>The travis modification is such:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">language</span><span class="p">:</span><span class="w"> </span><span class="l">go</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">install</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="l">go get github.com/gohugoio/hugo</span><span class="w">
</span><span class="w">    </span>- <span class="l">sudo apt-get install -y git</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">script</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="l">.travis/build.sh</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">after_success</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="l">cd ${TRAVIS_BUILD_DIR} &amp;&amp; .travis/push.sh</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Easy, it&rsquo;s a standard Go based travis file. There are two things here which stand out. The <code>scripts</code> section and the
<code>after_success</code> section. Why <code>after_success</code>? Because if we made a mistake, we don&rsquo;t want to destroy the website. Thus we only
push in case build.sh was successful.</p>
<h3 id="building">Building</h3>
<p>In this light, building the blog is simple. In fact the whole script is such:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/sh
</span><span class="cp"></span>
<span class="nb">set</span> -e
<span class="nb">set</span> -x

mkdir /opt/blog
git clone --recurse-submodules https://github.com/Skarlso/blogsource.git /opt/app
<span class="nb">echo</span> Build started on <span class="sb">`</span>date<span class="sb">`</span>
<span class="nb">cd</span> /opt/app
hugo --theme hermit
cp -R public/* /opt/blog
</code></pre></td></tr></table>
</div>
</div><p>For clone, <code>--recurse-submodules</code> is required because the theme is a submodule. Once this script runs successfull,
we can push the new version of the site.</p>
<h3 id="pushing">Pushing</h3>
<p>Pushing is a bit more involved. There are four steps involved in this process.</p>
<h4 id="setup-git">Setup git</h4>
<p>First, we set up git to use some specific name so we know where the push came from.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">setup_git<span class="o">()</span> <span class="o">{</span>
  git config --global user.email <span class="s2">&#34;travis@travis-ci.org&#34;</span>
  git config --global user.name <span class="s2">&#34;Travis CI&#34;</span>
  git init
  git remote add origin https://<span class="si">${</span><span class="nv">GITHUB_TOKEN</span><span class="si">}</span>@github.com/Skarlso/skarlso.github.io.git &gt; /dev/null 2&gt;<span class="p">&amp;</span><span class="m">1</span>
  git pull origin master
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Github token is a secret environment property. We also pull the blog source in this step.</p>
<h4 id="copy">Copy</h4>
<p>Then copy everything from the built site&rsquo;s public folder (which was we already copied to /opt/blog) to this folder.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">cp -R /opt/blog/* .
</code></pre></td></tr></table>
</div>
</div><h4 id="commit-the-changes">Commit the changes</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">commit_website_files<span class="o">()</span> <span class="o">{</span>
  git add .
  git commit -am <span class="s2">&#34;Travis build: </span><span class="nv">$TRAVIS_BUILD_NUMBER</span><span class="s2">&#34;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This is extracted for clarity.</p>
<h4 id="pushing-the-changes">Pushing the changes</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">upload_files<span class="o">()</span> <span class="o">{</span>
  git push --quiet --set-upstream origin master
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The script in it&rsquo;s entirety here: <a href="#push-sh">push.sh</a></p>
<p>And that&rsquo;s it. The site is changed and updated. This can be executed in any environment and the only requirement is hugo and git being present. If you still prefer the branch method of Github pages, this is easily altered to checkout the right branch and push the changes from there.</p>
<p>No dependency on anything. Just how I like my build processes.</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
<h1 id="appendix">Appendix</h1>
<h2 id="pushsh">push.sh</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/sh
</span><span class="cp"></span>
<span class="nb">set</span> -e
<span class="nb">set</span> -x

setup_git<span class="o">()</span> <span class="o">{</span>
  git config --global user.email <span class="s2">&#34;travis@travis-ci.org&#34;</span>
  git config --global user.name <span class="s2">&#34;Travis CI&#34;</span>
  git init
  git remote add origin https://<span class="si">${</span><span class="nv">GITHUB_TOKEN</span><span class="si">}</span>@github.com/Skarlso/skarlso.github.io.git &gt; /dev/null 2&gt;<span class="p">&amp;</span><span class="m">1</span>
  git pull origin master
<span class="o">}</span>

commit_website_files<span class="o">()</span> <span class="o">{</span>
  git add .
  git commit -am <span class="s2">&#34;Travis build: </span><span class="nv">$TRAVIS_BUILD_NUMBER</span><span class="s2">&#34;</span>
<span class="o">}</span>

upload_files<span class="o">()</span> <span class="o">{</span>
  git push --quiet --set-upstream origin master
<span class="o">}</span>

mkdir /opt/publish <span class="o">&amp;&amp;</span> <span class="nb">cd</span> /opt/publish
setup_git
cp -R /opt/blog/* .
commit_website_files
upload_files
</code></pre></td></tr></table>
</div>
</div>]]></description>
    </item>
    
    <item>
      <title>Go SSH with Host Key Verification</title>
      <link>https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/</link>
      <pubDate>Sun, 17 Feb 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>Following a long search and reading lots of debates and possibilities of doing SSH within Go, I was shocked to see that not a great many tools and people use SSH with host key verification. What I usually see is this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">HostKeyCallback</span><span class="p">:</span> <span class="nx">ssh</span><span class="p">.</span><span class="nf">InsecureIgnoreHostKey</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>This is terrible. Now, I realise that doing HostKeyVerification can be tedious, but don&rsquo;t fear. It&rsquo;s actually easy
now that the Go team provided the knownhosts subpackage in their crypto SSH package located here:
<a href="https://godoc.org/golang.org/x/crypto/ssh/knownhosts">KnownHosts</a>.</p>
<p>This part in particular is interesting: <a href="https://godoc.org/golang.org/x/crypto/ssh/knownhosts#New">New</a>.</p>
<p>Using new with a known_hosts file a code can be written like this one to verify host keys:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;bytes&#34;</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;io/ioutil&#34;</span>
	<span class="s">&#34;log&#34;</span>

	<span class="s">&#34;golang.org/x/crypto/ssh&#34;</span>
	<span class="nx">kh</span> <span class="s">&#34;golang.org/x/crypto/ssh/knownhosts&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">user</span> <span class="o">:=</span> <span class="s">&#34;user&#34;</span>
	<span class="nx">address</span> <span class="o">:=</span> <span class="s">&#34;192.168.0.17&#34;</span>
	<span class="nx">command</span> <span class="o">:=</span> <span class="s">&#34;uptime&#34;</span>
	<span class="nx">port</span> <span class="o">:=</span> <span class="s">&#34;9999&#34;</span>

	<span class="nx">key</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadFile</span><span class="p">(</span><span class="s">&#34;/Users/user/.ssh/id_rsa&#34;</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;unable to read private key: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="c1">// Create the Signer for this private key.
</span><span class="c1"></span>	<span class="nx">signer</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ssh</span><span class="p">.</span><span class="nf">ParsePrivateKey</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;unable to parse private key: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="nx">hostKeyCallback</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">kh</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;/Users/user/.ssh/known_hosts&#34;</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;could not create hostkeycallback function: &#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="nx">config</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">ssh</span><span class="p">.</span><span class="nx">ClientConfig</span><span class="p">{</span>
		<span class="nx">User</span><span class="p">:</span> <span class="nx">user</span><span class="p">,</span>
		<span class="nx">Auth</span><span class="p">:</span> <span class="p">[]</span><span class="nx">ssh</span><span class="p">.</span><span class="nx">AuthMethod</span><span class="p">{</span>
			<span class="c1">// Add in password check here for moar security.
</span><span class="c1"></span>			<span class="nx">ssh</span><span class="p">.</span><span class="nf">PublicKeys</span><span class="p">(</span><span class="nx">signer</span><span class="p">),</span>
		<span class="p">},</span>
		<span class="nx">HostKeyCallback</span><span class="p">:</span> <span class="nx">hostKeyCallback</span><span class="p">,</span>
	<span class="p">}</span>
	<span class="c1">// Connect to the remote server and perform the SSH handshake.
</span><span class="c1"></span>	<span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ssh</span><span class="p">.</span><span class="nf">Dial</span><span class="p">(</span><span class="s">&#34;tcp&#34;</span><span class="p">,</span> <span class="nx">address</span><span class="o">+</span><span class="s">&#34;:&#34;</span><span class="o">+</span><span class="nx">port</span><span class="p">,</span> <span class="nx">config</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;unable to connect: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
	<span class="nx">ss</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">NewSession</span><span class="p">()</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;unable to create SSH session: &#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="nx">ss</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
	<span class="c1">// Creating the buffer which will hold the remotly executed command&#39;s output.
</span><span class="c1"></span>	<span class="kd">var</span> <span class="nx">stdoutBuf</span> <span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span>
	<span class="nx">ss</span><span class="p">.</span><span class="nx">Stdout</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">stdoutBuf</span>
	<span class="nx">ss</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">command</span><span class="p">)</span>
	<span class="c1">// Let&#39;s print out the result of command.
</span><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">stdoutBuf</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Here is the whole thing as a <a href="https://gist.github.com/Skarlso/34321a230cf0245018288686c9e70b2d">Gist</a>.</p>
<p>Please try and avoid using Insecure host keys. It is easier, but can harm so much. Software like these:
<a href="https://mitmproxy.org/">Man in The Middle Proxy</a> thrive in an environment that doesn&rsquo;t do it, or doesn&rsquo;t in other ways
mitigate this problem.</p>
<p>Be wise and be safe.
Thanks for reading,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Extensive tutorial on go-plugin.</title>
      <link>https://skarlso.github.io/2018/10/29/go-plugin-tutorial/</link>
      <pubDate>Mon, 29 Oct 2018 07:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/10/29/go-plugin-tutorial/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>If you don&rsquo;t know what go-plugin is, don&rsquo;t worry, here is a small introduction on the subject matter:</p>
<p>Back in the old days when Go didn&rsquo;t have the <code>plugin</code> package, HashiCorp was desperately looking for a way to use plugins.</p>
<p>In the old days, Lua plus Go wasn&rsquo;t really a thing yet, and to be honest, nobody wants to write Lua ( joking!).</p>
<p>And thus Mitchell had this brilliant idea of using RPC over the local network to serve a local interface as something that could easily be implemented with any other language that supported RPC. This sounds convoluted but has many benefits! For example, your code will never crash because of a plugin and the ability to use any language to implement a plugin. Not just Go.</p>
<p>It has been a battle-hardened solution for years now and is being actively used by Terraform, Vault, Consule, and especially Packer. All using go-plugin in order to provide a much needed flexibility. Writing a plugin is easy. Or so they say.</p>
<p>It can get complicated quickly, for example, if you are trying to use GRPC. You can lose sight of what exactly you&rsquo;ll need to implement, where and why; or utilizing various languages or using go-plugins in your own project and extending your CLI with pluggable components.</p>
<p>These are all nothing to sneeze at. Suddenly you&rsquo;ll find yourself with hundreds of lines of code pasted from various examples and yet nothing works. Or worse, it DOES work but you have no idea how. Then you find yourself needing to extend it with a new capability, or you find an elusive bug and can&rsquo;t trace its origins.</p>
<p>Fear not. I&rsquo;ll try to demystify things and draw a clear picture about how it works and how the pieces fit together.</p>
<p>Let&rsquo;s start at the beginning.</p>
<h1 id="basic-plugin">Basic plugin</h1>
<p>Let&rsquo;s start by writing a simple Go GRPC plugin. In fact, we can go through the basic example in the go-plugin’s repository which can be quite confusing when first starting out. We&rsquo;ll go step-by-step, and the switch to GRPC will be much easier!</p>
<h2 id="basic-concepts">Basic concepts</h2>
<h3 id="server">Server</h3>
<p>In the case of plugins, the Server is the one serving the plugin&rsquo;s implementation. This means the server will have to provide the implementation to an interface.</p>
<h3 id="client">Client</h3>
<p>The Client calls the server in order to execute the desired behaviour. The underlying logic will connect to the server running on localhost on a random higher port, call the wanted function’s implementation and wait for a response. Once the response is received provide that back to the calling Client.</p>
<h2 id="implementation">Implementation</h2>
<h3 id="the-main-function">The main function</h3>
<h4 id="logger">Logger</h4>
<p>The plugins defined here use stdout in a special way. If you aren&rsquo;t writing a Go based plugin, you will have to do that yourself by outputting something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">1|1|tcp|127.0.0.1:1234|grpc
</code></pre></td></tr></table>
</div>
</div><p>We&rsquo;ll come back to this later. Suffice to say the framework will pick this up and will connect to the plugin based on the output. In order to get some output back, we must define a special logger:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">	<span class="c1">// Create an hclog.Logger
</span><span class="c1"></span>	<span class="nx">logger</span> <span class="o">:=</span> <span class="nx">hclog</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">hclog</span><span class="p">.</span><span class="nx">LoggerOptions</span><span class="p">{</span>
		<span class="nx">Name</span><span class="p">:</span>   <span class="s">&#34;plugin&#34;</span><span class="p">,</span>
		<span class="nx">Output</span><span class="p">:</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">,</span>
		<span class="nx">Level</span><span class="p">:</span>  <span class="nx">hclog</span><span class="p">.</span><span class="nx">Debug</span><span class="p">,</span>
	<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="newclient">NewClient</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">	<span class="c1">// We&#39;re a host! Start by launching the plugin process.
</span><span class="c1"></span>	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">plugin</span><span class="p">.</span><span class="nf">NewClient</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">ClientConfig</span><span class="p">{</span>
		<span class="nx">HandshakeConfig</span><span class="p">:</span> <span class="nx">handshakeConfig</span><span class="p">,</span>
		<span class="nx">Plugins</span><span class="p">:</span>         <span class="nx">pluginMap</span><span class="p">,</span>
		<span class="nx">Cmd</span><span class="p">:</span>             <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;./plugin/greeter&#34;</span><span class="p">),</span>
		<span class="nx">Logger</span><span class="p">:</span>          <span class="nx">logger</span><span class="p">,</span>
	<span class="p">})</span>
	<span class="k">defer</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Kill</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>What is happening here? Let&rsquo;s see one by one:</p>
<p><code>HandshakeConfig: handshakeConfig,</code>: This part is the handshake configuration of the plugin. It has a nice comment as well.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// handshakeConfigs are used to just do a basic handshake between
</span><span class="c1">// a plugin and host. If the handshake fails, a user friendly error is shown.
</span><span class="c1">// This prevents users from executing bad plugins or executing a plugin
</span><span class="c1">// directory. It is a UX feature, not a security feature.
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">handshakeConfig</span> <span class="p">=</span> <span class="nx">plugin</span><span class="p">.</span><span class="nx">HandshakeConfig</span><span class="p">{</span>
	<span class="nx">ProtocolVersion</span><span class="p">:</span>  <span class="mi">1</span><span class="p">,</span>
	<span class="nx">MagicCookieKey</span><span class="p">:</span>   <span class="s">&#34;BASIC_PLUGIN&#34;</span><span class="p">,</span>
	<span class="nx">MagicCookieValue</span><span class="p">:</span> <span class="s">&#34;hello&#34;</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The <code>ProtocolVersion</code> here is used in order to maintain compatibility with your current plugin versions. It&rsquo;s basically like an API version. If you increase this, you will have two options. Don&rsquo;t accept lower protocol versions nor switch to the version number and use a different client implementation for a lower version than for a higher version. This way you will maintain backwards compatibility.</p>
<p>The <code>MagicCookieKey</code> and <code>MagicCookieValue</code> are used for a basic handshake which the comment is talking about. You have to set this <strong>ONCE</strong> for your application. Never change it again, for if you do, your plugins will no longer work. For uniqueness sake, I suggest using UUID.</p>
<p><code>Cmd</code> is one of the most important parts about a plugin. Basically how plugins work is that they boil down to a compiled binary which is executed and starts an RPC server. This is where you will have to define the binary which will be executed and does all this. Since this is all happening locally, (please keep in mind that Go-plugins only support localhost, and for a good reason), these binaries will most likely sit next to your application&rsquo;s binary or in a pre-configured global location. Something like:  <code>~/.config/my-app/plugins</code>. This is individual for each plugin of course. The plugins can be autoloaded via a discovery function given a path and a glob.</p>
<p>And last but not least is the <code>Plugins</code> map. This map is used in order to identify a plugin called <code>Dispense</code>. This map is globally available and must stay consistent in order for all the plugins to work:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// pluginMap is the map of plugins we can dispense.
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">pluginMap</span> <span class="p">=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">Pluglin</span>	<span class="s">&#34;greeter&#34;</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">example</span><span class="p">.</span><span class="nx">GreeterPlugin</span><span class="p">{},</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>You can see that the key is the name of the plugin and the value is the plugin.</p>
<p>We then proceed to create an RPC client:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">	<span class="c1">// Connect via RPC
</span><span class="c1"></span>	<span class="nx">rpcClient</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Client</span><span class="p">()</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Nothing fancy about this one&hellip;</p>
<p>Now comes the interesting part:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">	<span class="c1">// Request the plugin
</span><span class="c1"></span>	<span class="nx">raw</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rpcClient</span><span class="p">.</span><span class="nf">Dispense</span><span class="p">(</span><span class="s">&#34;greeter&#34;</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>What&rsquo;s happening here? Dispense will look in the above created map and search for the plugin. If it cannot find it, it will throw an error at us. If it does find it, it will cast this plugin to an RPC or a GRPC type plugin. Then proceed to create an RPC or a GRPC client out of it.</p>
<p>There is no call yet. This is just creating a client and parsing it to a respective representation.</p>
<p>Now comes the magic:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">	<span class="c1">// We should have a Greeter now! This feels like a normal interface
</span><span class="c1"></span>	<span class="c1">// implementation but is in fact over an RPC connection.
</span><span class="c1"></span>	<span class="nx">greeter</span> <span class="o">:=</span> <span class="nx">raw</span><span class="p">.(</span><span class="nx">example</span><span class="p">.</span><span class="nx">Greeter</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">greeter</span><span class="p">.</span><span class="nf">Greet</span><span class="p">())</span>
</code></pre></td></tr></table>
</div>
</div><p>Here we are type asserting our raw GRPC client into our own plugin type. This is so we can call the respective function on the plugin! Once that&rsquo;s done we will have a {client,struct,implementation} that can be called like a simple function.</p>
<p>The implementation right now comes from greeter_impl.go, but that will change once protoc makes an appearance.</p>
<p>Behind the scenes, go-plugin will do a bunch of hat tricks with multiplexing TCP connections as well as a remote procedure call to our plugin. Our plugin then will run the function, generate some kind of output, and will then send that back for the waiting client.</p>
<p>The client will then proceed to parse the message into a given response type and will then return it back to the client’s callee.</p>
<p>This concludes main.go for now.</p>
<h3 id="the-interface">The Interface</h3>
<p>Now let’s investigate the Interface. The interface is used to provide calling details. This interface will be what defines our plugins’ capabilities. How does our <code>Greeter</code> look like?</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Greeter is the interface that we&#39;re exposing as a plugin.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Greeter</span> <span class="kd">interface</span> <span class="p">{</span>
	<span class="nf">Greet</span><span class="p">()</span> <span class="kt">string</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This is pretty simple. It defines a function which will return a string typed value.</p>
<p>Now, we will need a couple of things for this to work. Firstly we need something which defines the RPC workings. go-plugin is working with <code>net/http</code> inside. It also uses something called Yamux for connection multiplexing, but we needn’t worry about this detail.</p>
<p>Implementing the RPC details looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Here is an implementation that talks over RPC
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">GreeterRPC</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">client</span> <span class="o">*</span><span class="nx">rpc</span><span class="p">.</span><span class="nx">Client</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">g</span> <span class="o">*</span><span class="nx">GreeterRPC</span><span class="p">)</span> <span class="nf">Greet</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">resp</span> <span class="kt">string</span>
	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">g</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">Call</span><span class="p">(</span><span class="s">&#34;Plugin.Greet&#34;</span><span class="p">,</span> <span class="nb">new</span><span class="p">(</span><span class="kd">interface</span><span class="p">{}),</span> <span class="o">&amp;</span><span class="nx">resp</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="c1">// You usually want your interfaces to return errors. If they don&#39;t,
</span><span class="c1"></span>		<span class="c1">// there isn&#39;t much other choice here.
</span><span class="c1"></span>		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="nx">resp</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Here the GreeterRPC struct is an RPC specific implementation that will handle communication over RPC. This is Client in this setup.</p>
<p>In case of gRPC, this would look something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// GRPCClient is an implementation of KV that talks over RPC.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">GreeterGRPC</span> <span class="kd">struct</span><span class="p">{</span> <span class="nx">client</span> <span class="nx">proto</span><span class="p">.</span><span class="nx">GreeterClient</span> <span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">GreeterGRPC</span><span class="p">)</span> <span class="nf">Greet</span><span class="p">()</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">s</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">Greet</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="o">&amp;</span><span class="nx">proto</span><span class="p">.</span><span class="nx">Empty</span><span class="p">{})</span>
	<span class="k">return</span> <span class="nx">s</span><span class="p">,</span> <span class="nx">err</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>What is happening here? What&rsquo;s Proto and what is GreeterClient? GRPC uses Google&rsquo;s protoc library to serialize and unserialize data. <code>proto.GreeterClient</code> is generated Go code by protoc. This code is a skeleton for which implementation detail will be replaced on run time. Well, the actual result will be used and not replaced as such.</p>
<p>Back to our previous example. The RPC client calls a specific Plugin function called Greet for which the implementation will be provided by a Server that will be streamed back over the RPC protocol.</p>
<p>The server is pretty easy to follow:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Here is the RPC server that GreeterRPC talks to, conforming to
</span><span class="c1">// the requirements of net/rpc
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">GreeterRPCServer</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="c1">// This is the real implementation
</span><span class="c1"></span>	<span class="nx">Impl</span> <span class="nx">Greeter</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Impl is the concrete implementation that will be called in the Server&rsquo;s implementation of the Greet plugin. Now we must define Greet on the RPCServer in order for it to be able to call the remote code. This looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">GreeterRPCServer</span><span class="p">)</span> <span class="nf">Greet</span><span class="p">(</span><span class="nx">args</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">resp</span> <span class="o">*</span><span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="o">*</span><span class="nx">resp</span> <span class="p">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Impl</span><span class="p">.</span><span class="nf">Greet</span><span class="p">()</span>
	<span class="k">return</span> <span class="kc">nil</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This is all still boilerplate for the RPC works. Now comes plugin. For this, the comment is actually quite good too:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// This is the implementation of plugin.Plugin so we can serve/consume this
</span><span class="c1">//
</span><span class="c1">// This has two methods: Server must return an RPC server for this plugin
</span><span class="c1">// type. We construct a GreeterRPCServer for this.
</span><span class="c1">//
</span><span class="c1">// Client must return an implementation of our interface that communicates
</span><span class="c1">// over an RPC client. We return GreeterRPC for this.
</span><span class="c1">//
</span><span class="c1">// Ignore MuxBroker. That is used to create more multiplexed streams on our
</span><span class="c1">// plugin connection and is a more advanced use case.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">GreeterPlugin</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="c1">// Impl Injection
</span><span class="c1"></span>	<span class="nx">Impl</span> <span class="nx">Greeter</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">GreeterPlugin</span><span class="p">)</span> <span class="nf">Server</span><span class="p">(</span><span class="o">*</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">MuxBroker</span><span class="p">)</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">GreeterRPCServer</span><span class="p">{</span><span class="nx">Impl</span><span class="p">:</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Impl</span><span class="p">},</span> <span class="kc">nil</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">GreeterPlugin</span><span class="p">)</span> <span class="nf">Client</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">MuxBroker</span><span class="p">,</span> <span class="nx">c</span> <span class="o">*</span><span class="nx">rpc</span><span class="p">.</span><span class="nx">Client</span><span class="p">)</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">GreeterRPC</span><span class="p">{</span><span class="nx">client</span><span class="p">:</span> <span class="nx">c</span><span class="p">},</span> <span class="kc">nil</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>What does this mean? So, remember: <code>GreeterRPCServer</code> is the one calling the actual implementation while Client is receiving the result of that call. The <code>GreeterPlugin</code> has the <code>Greeter</code> interface embedded just like the <code>RPCServer</code>. We will use the <code>GreeterPlugin</code> as a struct in the plugin map. This is the plugin that we will actually use.</p>
<p>This is all still common stuff. These things will need to be visible for both. The plugin&rsquo;s implementation will use the interface to see what it needs to implement. The Client will use it see what to call and what API is available. Like, <code>Greet</code>.</p>
<p>How does the implementation look like?</p>
<h3 id="the-implementation">The Implementation</h3>
<p>In a completely separate package, but which still has access to the interface definition, this plugin could be something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Here is a real implementation of Greeter
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">GreeterHello</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">logger</span> <span class="nx">hclog</span><span class="p">.</span><span class="nx">Logger</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">g</span> <span class="o">*</span><span class="nx">GreeterHello</span><span class="p">)</span> <span class="nf">Greet</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="nx">g</span><span class="p">.</span><span class="nx">logger</span><span class="p">.</span><span class="nf">Debug</span><span class="p">(</span><span class="s">&#34;message from GreeterHello.Greet&#34;</span><span class="p">)</span>
	<span class="k">return</span> <span class="s">&#34;Hello!&#34;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>We create a struct and then add the function to it which is defined by the plugin&rsquo;s interface. This interface, since it&rsquo;s required by both parties, could well sit in a common package outside of both programs. Something like a SDK. Both code could import it and use it as a common dependency. This way we have separated the interface from the plugin <strong>and</strong> the calling client.</p>
<p>The <code>main</code> function could look something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">logger</span> <span class="o">:=</span> <span class="nx">hclog</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">hclog</span><span class="p">.</span><span class="nx">LoggerOptions</span><span class="p">{</span>
    <span class="nx">Level</span><span class="p">:</span>      <span class="nx">hclog</span><span class="p">.</span><span class="nx">Trace</span><span class="p">,</span>
    <span class="nx">Output</span><span class="p">:</span>     <span class="nx">os</span><span class="p">.</span><span class="nx">Stderr</span><span class="p">,</span>
    <span class="nx">JSONFormat</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
<span class="p">})</span>

<span class="nx">greeter</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">GreeterHello</span><span class="p">{</span>
    <span class="nx">logger</span><span class="p">:</span> <span class="nx">logger</span><span class="p">,</span>
<span class="p">}</span>
<span class="c1">// pluginMap is the map of plugins we can dispense.
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">pluginMap</span> <span class="p">=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">Plugin</span><span class="p">{</span>
    <span class="s">&#34;greeter&#34;</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">example</span><span class="p">.</span><span class="nx">GreeterPlugin</span><span class="p">{</span><span class="nx">Impl</span><span class="p">:</span> <span class="nx">greeter</span><span class="p">},</span>
<span class="p">}</span>

<span class="nx">logger</span><span class="p">.</span><span class="nf">Debug</span><span class="p">(</span><span class="s">&#34;message from plugin&#34;</span><span class="p">,</span> <span class="s">&#34;foo&#34;</span><span class="p">,</span> <span class="s">&#34;bar&#34;</span><span class="p">)</span>

<span class="nx">plugin</span><span class="p">.</span><span class="nf">Serve</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">ServeConfig</span><span class="p">{</span>
    <span class="nx">HandshakeConfig</span><span class="p">:</span> <span class="nx">handshakeConfig</span><span class="p">,</span>
    <span class="nx">Plugins</span><span class="p">:</span>         <span class="nx">pluginMap</span><span class="p">,</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>Notice two things that we need. One is the <code>handshakeConfig</code>. You can either define it here, with the same cookie details as you defined in the client code, or you can extract the handshake information into the SDK. This is up to you.</p>
<p>Then the next interesting thing is the <code>plugin.Serve</code> method. This is where the magic happens. The plugins open up a RPC communication socket and over a hijacked <code>stdout</code>, broadcasts its availability to the calling Client in this format:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">CORE-PROTOCOL-VERSION <span class="p">|</span> APP-PROTOCOL-VERSION <span class="p">|</span> NETWORK-TYPE <span class="p">|</span> NETWORK-ADDR <span class="p">|</span> PROTOCOL
</code></pre></td></tr></table>
</div>
</div><p>For Go plugins, you don&rsquo;t have to concern yourself with this. <code>go-plugin</code> takes care of all this for you. For non-Go versions, we must take this into account. And before calling serve, we need to output this information to <code>stdout</code>.</p>
<p>For example, a Python plugin must deal with this himself. Like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Output information</span>
<span class="k">print</span><span class="p">(</span><span class="s2">&#34;1|1|tcp|127.0.0.1:1234|grpc&#34;</span><span class="p">)</span>
<span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>For GRPC plugins, it&rsquo;s also mandatory to implement a HealthChecker.</p>
<p>How would all this look like with GRPC?</p>
<p>It gets slightly more complicated but not too much. We need to use <code>protoc</code> to create a protocol description for our implementation, and then we will call that. Let&rsquo;s look at this now by converting the basic greeter example into GRPC.</p>
<h1 id="grpc-basic-plugin">GRPC Basic plugin</h1>
<p>The example that&rsquo;s under GRPC is quite elaborate and perhaps you don&rsquo;t need the Python part. I will focus on the basic RPC example into a GRPC example. That should not be a problem.</p>
<h2 id="the-api">The API</h2>
<p>First and foremost, you will need to define an API to implement with <code>protoc</code>. For our basic example, the protoc file could look like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">syntax</span> <span class="p">=</span> <span class="s">&#34;proto3&#34;</span><span class="p">;</span>
<span class="kn">package</span> <span class="nx">proto</span><span class="p">;</span>

<span class="nx">message</span> <span class="nx">GreetResponse</span> <span class="p">{</span>
    <span class="kt">string</span> <span class="nx">message</span> <span class="p">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">message</span> <span class="nx">Empty</span> <span class="p">{}</span>

<span class="nx">service</span> <span class="nx">GreeterService</span> <span class="p">{</span>
    <span class="nx">rpc</span> <span class="nf">Greet</span><span class="p">(</span><span class="nx">Empty</span><span class="p">)</span> <span class="nf">returns</span> <span class="p">(</span><span class="nx">GreetResponse</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The syntax is quite simple and readable. What this defines is a message, which is a response, that will contain a <code>message</code> with the type <code>string</code>. The <code>service</code> defines a service which has a method called <code>Greet</code>. The service definition is basically an interface for which we will be providing the concrete implementation through the plugin.</p>
<p>To read more about protoc, visit this page: <a href="https://developers.google.com/protocol-buffers/">Google Protocol Buffer</a>.</p>
<h2 id="generate-the-code">Generate the code</h2>
<p>Now, with the protoc definition in hand, we need to generate the stubs that the local client implementation can call. That client call will then, through the remote procedure call, call the right function on the server which will have the concrete implementation at the ready. Run it and return the result in the specified format. Because the stub needs to be available by both parties, (the client AND the server), this needs to live in a shared location.</p>
<p>Why? Because the client is calling the stub and the server is implementing the stub. Both need it in order to know what to call/implement.</p>
<p>To generate the code, run this command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">protoc -I proto/ proto/greeter.proto --go_out<span class="o">=</span><span class="nv">plugins</span><span class="o">=</span>grpc:proto
</code></pre></td></tr></table>
</div>
</div><p>I encourage you to read the generated code. Much will make little sense at first. It will have a bunch of structs and defined things that the GRPC package will use in order to server the function. The interesting bits and pieces are:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">GreetResponse</span><span class="p">)</span> <span class="nf">GetMessage</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">m</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Message</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="s">&#34;&#34;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Which will get use the message inside the response.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">GreeterServiceClient</span> <span class="kd">interface</span> <span class="p">{</span>
	<span class="nf">Greet</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">in</span> <span class="o">*</span><span class="nx">Empty</span><span class="p">,</span> <span class="nx">opts</span> <span class="o">...</span><span class="nx">grpc</span><span class="p">.</span><span class="nx">CallOption</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">GreetResponse</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This is our ServiceClient interface which defines the Greet function’s topology.</p>
<p>And lastly, this guy:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">RegisterGreeterServiceServer</span><span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">grpc</span><span class="p">.</span><span class="nx">Server</span><span class="p">,</span> <span class="nx">srv</span> <span class="nx">GreeterServiceServer</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">s</span><span class="p">.</span><span class="nf">RegisterService</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">_GreeterService_serviceDesc</span><span class="p">,</span> <span class="nx">srv</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Which we will need in order to register our implementation for the server. We can ignore the rest.</p>
<h2 id="the-interface-1">The interface</h2>
<p>Much like the RPC, we need to define an interface for the client and server to use. This must be in a shared place as both the server and the client need to know about it. You could put this into an SDK and your peers could just get the SDK and implement some function for define and done. The interface definition in the GRPC land could look something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Greeter is the interface that we&#39;re exposing as a plugin.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Greeter</span> <span class="kd">interface</span> <span class="p">{</span>
	<span class="nf">Greet</span><span class="p">()</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="c1">// This is the implementation of plugin.GRPCPlugin so we can serve/consume this.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">GreeterGRPCPlugin</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="c1">// GRPCPlugin must still implement the Plugin interface
</span><span class="c1"></span>	<span class="nx">plugin</span><span class="p">.</span><span class="nx">Plugin</span>
	<span class="c1">// Concrete implementation, written in Go. This is only used for plugins
</span><span class="c1"></span>	<span class="c1">// that are written in Go.
</span><span class="c1"></span>	<span class="nx">Impl</span> <span class="nx">Greeter</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">GreeterGRPCPlugin</span><span class="p">)</span> <span class="nf">GRPCServer</span><span class="p">(</span><span class="nx">broker</span> <span class="o">*</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">GRPCBroker</span><span class="p">,</span> <span class="nx">s</span> <span class="o">*</span><span class="nx">grpc</span><span class="p">.</span><span class="nx">Server</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="nx">proto</span><span class="p">.</span><span class="nf">RegisterGreeterServer</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">GRPCServer</span><span class="p">{</span><span class="nx">Impl</span><span class="p">:</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Impl</span><span class="p">})</span>
	<span class="k">return</span> <span class="kc">nil</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">GreeterGRPCPlugin</span><span class="p">)</span> <span class="nf">GRPCClient</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">broker</span> <span class="o">*</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">GRPCBroker</span><span class="p">,</span> <span class="nx">c</span> <span class="o">*</span><span class="nx">grpc</span><span class="p">.</span><span class="nx">ClientConn</span><span class="p">)</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">GRPCClient</span><span class="p">{</span><span class="nx">client</span><span class="p">:</span> <span class="nx">proto</span><span class="p">.</span><span class="nf">NewGreeterClient</span><span class="p">(</span><span class="nx">c</span><span class="p">)},</span> <span class="kc">nil</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>With this we have the Plugin&rsquo;s implementation for hashicorp what needed to be done. The plugin will call the underlying implementation and serve/consume the plugin. We can now write the GRPC part of it.</p>
<p>Please note that <code>proto</code> is a shared library too where the protocol stubs reside. That needs to be somewhere on the path or in a separate SDK of some sort, but it must be visible.</p>
<h2 id="writing-the-grpc-client">Writing the GRPC Client</h2>
<p>Firstly we define the grpc client struct:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// GRPCClient is an implementation of Greeter that talks over RPC.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">GRPCClient</span> <span class="kd">struct</span><span class="p">{</span> <span class="nx">client</span> <span class="nx">proto</span><span class="p">.</span><span class="nx">GreeterClient</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Then we define how the client will call the remote function:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">GRPCClient</span><span class="p">)</span> <span class="nf">Greet</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="nx">ret</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">Greet</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="o">&amp;</span><span class="nx">proto</span><span class="p">.</span><span class="nx">Empty</span><span class="p">{})</span>
	<span class="k">return</span> <span class="nx">ret</span><span class="p">.</span><span class="nx">Message</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This will take the <code>client</code> in the <code>GRPCClient</code> and will call the method on it. Once that&rsquo;s done we will return to the result <code>Message</code> property which will be <code>Hello!</code>. <code>proto.Empty</code> is an empty struct; we use this if there is no parameter for a defined method or no return value. We can&rsquo;t just leave it blank. <code>protoc</code> needs to be told explicitly that there is no parameter or return value.</p>
<h2 id="writing-the-grpc-server">Writing the GRPC Server</h2>
<p>The server implementation will also be similar. We call <code>Impl</code> here which will have our concrete plugin implementation.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Here is the gRPC server that GRPCClient talks to.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">GRPCServer</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="c1">// This is the real implementation
</span><span class="c1"></span>	<span class="nx">Impl</span> <span class="nx">Greeter</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">GRPCServer</span><span class="p">)</span> <span class="nf">Greet</span><span class="p">(</span>
	<span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span>
	<span class="nx">req</span> <span class="o">*</span><span class="nx">proto</span><span class="p">.</span><span class="nx">Empty</span><span class="p">)</span> <span class="o">*</span><span class="nx">proto</span><span class="p">.</span><span class="nx">GreeterResponse</span> <span class="p">{</span>
	<span class="nx">v</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Impl</span><span class="p">.</span><span class="nf">Greet</span><span class="p">()</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">proto</span><span class="p">.</span><span class="nx">GreeterResponse</span><span class="p">{</span><span class="nx">Message</span><span class="p">:</span> <span class="nx">v</span><span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>And we will use the <code>protoc</code> defined message response. <code>v</code> will have the response from <code>Greet</code> which will be <code>Hello!</code> provided by the concrete plugin&rsquo;s implementation. We then transform that into a protoc type by setting the <code>Message</code> property on the <code>GreeterResponse</code> struct provided by the automatically generated protoc stub code.</p>
<p>Easy, right?</p>
<h2 id="writing-the-plugin-itself">Writing the plugin itself</h2>
<p>The whole thing looks much like the RPC implementation with just a few small modifications and changes. This can sit completely outside of everything, or can even be provided by a third party implementor.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Here is a real implementation of KV that writes to a local file with
</span><span class="c1">// the key name and the contents are the value of the key.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Greeter</span> <span class="kd">struct</span><span class="p">{}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">Greeter</span><span class="p">)</span> <span class="nf">Greet</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="k">return</span> <span class="s">&#34;Hello!&#34;</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">plugin</span><span class="p">.</span><span class="nf">Serve</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">ServeConfig</span><span class="p">{</span>
		<span class="nx">HandshakeConfig</span><span class="p">:</span> <span class="nx">shared</span><span class="p">.</span><span class="nx">Handshake</span><span class="p">,</span>
		<span class="nx">Plugins</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">Plugin</span><span class="p">{</span>
			<span class="s">&#34;greeter&#34;</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">shared</span><span class="p">.</span><span class="nx">GreeterGRPCPlugin</span><span class="p">{</span><span class="nx">Impl</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">Greeter</span><span class="p">{}},</span>
		<span class="p">},</span>

		<span class="c1">// A non-nil value here enables gRPC serving for this plugin...
</span><span class="c1"></span>		<span class="nx">GRPCServer</span><span class="p">:</span> <span class="nx">plugin</span><span class="p">.</span><span class="nx">DefaultGRPCServer</span><span class="p">,</span>
	<span class="p">})</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="calling-it-all-in-the-main">Calling it all in the main</h2>
<p>Once all that is done, the <code>main</code> function looks the same as RPC&rsquo;s main but with some small modifications.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">	<span class="c1">// We&#39;re a host. Start by launching the plugin process.
</span><span class="c1"></span>	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">plugin</span><span class="p">.</span><span class="nf">NewClient</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">ClientConfig</span><span class="p">{</span>
		<span class="nx">HandshakeConfig</span><span class="p">:</span> <span class="nx">shared</span><span class="p">.</span><span class="nx">Handshake</span><span class="p">,</span>
		<span class="nx">Plugins</span><span class="p">:</span>         <span class="nx">shared</span><span class="p">.</span><span class="nx">PluginMap</span><span class="p">,</span>
		<span class="nx">Cmd</span><span class="p">:</span>             <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;./plugin/greeter&#34;</span><span class="p">),</span>
		<span class="nx">AllowedProtocols</span><span class="p">:</span> <span class="p">[]</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">Protocol</span><span class="p">{</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">ProtocolGRPC</span><span class="p">},</span>
	<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>The <code>NewClient</code> now defines <code>AllowedProtocols</code> to be <code>ProtocolGRPC</code>. The rest is the same as before calling <code>Dispense</code> and value hinting the plugin to the correct type then calling <code>Greet()</code>.</p>
<h1 id="conclusion">Conclusion</h1>
<p>This is it. We made it! Now our plugin works over GRPC with a defined API by protoc. The plugin&rsquo;s implementation can live where ever we want it to, but it needs some shared data. These are:</p>
<ul>
<li>The generated code by <code>protoc</code></li>
<li>The defined plugin interface</li>
<li>The GRPC Server and Client</li>
</ul>
<p>These need to be visible by both the Client and the Server. The Server here is the plugin. If you are planning on making people be able to extend your application with go-plugin, you should make these available as a separate SDK. So people won&rsquo;t have to include your whole project just to implement an interface and use protoc. In fact, you could also extract the <code>protoc</code> definition into a separate repository so that your SDK can also pull it in.</p>
<p>You will have three repositories:</p>
<ul>
<li>Your application;</li>
<li>The SDK providing the interface and the GRPC Server and Client implementation;</li>
<li>The protoc definition file and generated skeleton ( for Go based plugins).</li>
</ul>
<p>Other languages will have to generate their own protoc code, and includ it into the plugin; like the Python implementation example located here: <a href="https://github.com/hashicorp/go-plugin/tree/master/examples/grpc/plugin-python">Go-plugin Python Example</a>. Also, read this documentation carefully: <a href="https://github.com/hashicorp/go-plugin/blob/master/docs/guide-plugin-write-non-go.md">non-go go-plugin</a>. This document will also clarify what <code>1|1|tcp|127.0.0.1:1234|grpc</code> means and will dissipate the confusion around how plugins work.</p>
<p>Lastly, if you would like to have an in-depth explanation about how go-plugin came to be, watch this video by Mitchell:</p>
<p><a href="https://www.youtube.com/watch?v=SRvm3zQQc1Q">go-plugin explanation video</a>.</p>
<p>I must warn you though- it&rsquo;s an hour long. But worth the watch!</p>
<p>That&rsquo;s it. I hope this has helped to clear the confusion around how to use go-plugin.</p>
<p>Happy plugging!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Furnace with a new Plugin System</title>
      <link>https://skarlso.github.io/2018/09/17/furnace-plugin-update/</link>
      <pubDate>Mon, 17 Sep 2018 07:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/09/17/furnace-plugin-update/</guid>
      <description><![CDATA[<p>Hi.</p>
<p>A quick update, but a very important and interesting one hopefully. Furnace just got a massive boost to its plugin system.</p>
<p>I&rsquo;m using <a href="https://github.com/hashicorp/go-plugin">HashiCorp&rsquo;s Go-Plugins</a> system now to handle plugins. This means one of
two things that are interesting to the plugin author.</p>
<p>One, plugins can be written in any language which is supported by Furnace and supports GRPC. Currently this means that
plugins can be written in the following languages:</p>
<ul>
<li>
<p>Go</p>
</li>
<li>
<p>Python</p>
</li>
<li>
<p>Ruby</p>
</li>
</ul>
<p>Adding new plugins is easy and I&rsquo;m open for suggestions in which language to provide next if the need arrises.</p>
<p>To find out more, please read the README on Furnace about plugins located here: <a href="https://github.com/go-furnace/go-furnace/blob/master/README.md#plugins">Furnace Plugin System</a>.</p>
<p>I hope to see a bunch of nice plugins pop up here and there if please are interested in writing them. I&rsquo;m listing a couple of
possibilities like, notification after create, or resource cleanup or even preventing the stack from creating in the first place
with a pre-create check for permissions / resource availability / funds constraints.</p>
<p>Have fun writing plugins and making Furnace more powerful then ever.</p>
<p>I&rsquo;m planning on providing some basic plugins that could be used out of the box. Those will probably be in Go though.</p>
<p>Thanks,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>TOTP generator with account handling for multiple tokens</title>
      <link>https://skarlso.github.io/2018/09/13/gotp/</link>
      <pubDate>Thu, 13 Sep 2018 08:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/09/13/gotp/</guid>
      <description><![CDATA[<p>Hi.</p>
<p>Today, I would like to write about a little tool I put together in Rust.</p>
<p>It&rsquo;s called <a href="https://github.com/Skarlso/totp">gotp</a>. I&rsquo;m calling it gotp mainly
because of crates.io. I published it there as well, you can find it under this
link: <a href="https://crates.io/crates/gotp">crates.io/gotp</a>.</p>
<p>The purpose is clear. It&rsquo;s a totp generator I wrote a while ago in C++ but now
it&rsquo;s in rust. It can generate a token and save it into an account file that is
AES encrypted. The password is never saved, so it&rsquo;s secure enough to use it.</p>
<p>One of it&rsquo;s properties it will have over the c++ implementation is it&rsquo;s safe,
it uses a proper IV and once I&rsquo;m done, it will also support encryption via PGP.</p>
<p>That way a password will no longer be asked, but the gpg-agent will be used instead.</p>
<p>This will give a much needed usability boost in which a password will no longer be
asked for constantly.</p>
<p>There is also a possibility to place the account file into DropBox or Google Drive
and share it between your own devices. This way your home laptop will also have
the same account as your work laptop making it essentially an Authy like service
on the CLI.</p>
<p>Enjoy, and keep an eye out for the PGP update. For more information in usage, please
read the README.</p>
<p>Thank you!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Keep your git forks updated all the time</title>
      <link>https://skarlso.github.io/2018/06/08/fork-updater/</link>
      <pubDate>Fri, 08 Jun 2018 08:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/06/08/fork-updater/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>Today&rsquo;s is a quick tip for keeping your forks updated.</p>
<p>If you are like me, and have at least a 100 forks in your repository because:
* You would like to contribute at some point
* Save it for yourself because you are afraid that it disappears
* Would like to make modifications for your own benefit
* Whatever the reason</p>
<p>&hellip;then you probably have a lot of trouble keeping them updated and making sure you always see the latest change.</p>
<p>Upstream can change a lot especially if it&rsquo;s a busy repository.</p>
<p>Fret not. Help is here. This little ruby script will solve your troubles:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby">
<span class="c1">#!/usr/bin/env ruby</span>

<span class="nb">require</span> <span class="s1">&#39;octokit&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;logger&#39;</span>

<span class="vi">@logger</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&#34;output.log&#34;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">update_fork</span><span class="p">(</span><span class="n">repo</span><span class="p">)</span>
  <span class="n">repo_name</span> <span class="o">=</span> <span class="n">repo</span><span class="o">.</span><span class="n">name</span>
  <span class="c1"># clone the repository -- octokit doesn&#39;t provide this feature as it&#39;s a github api library</span>
  <span class="vi">@logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;cloning into </span><span class="si">#{</span><span class="n">repo</span><span class="o">.</span><span class="n">ssh_url</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
  <span class="nb">system</span><span class="p">(</span><span class="s2">&#34;git clone </span><span class="si">#{</span><span class="n">repo</span><span class="o">.</span><span class="n">ssh_url</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
  <span class="c1"># setup upstream for updating</span>
  <span class="vi">@logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;setup upstream to </span><span class="si">#{</span><span class="n">repo</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">ssh_url</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
  <span class="nb">system</span><span class="p">(</span><span class="s2">&#34;cd </span><span class="si">#{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2"> &amp;&amp; git remote add upstream </span><span class="si">#{</span><span class="n">repo</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">ssh_url</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
  <span class="c1"># do the update</span>
  <span class="vi">@logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;doing the update with push&#34;</span><span class="p">)</span>
  <span class="nb">system</span><span class="p">(</span><span class="s2">&#34;cd </span><span class="si">#{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2"> &amp;&amp; git fetch upstream &amp;&amp; git rebase upstream/master &amp;&amp; git push origin&#34;</span><span class="p">)</span>
<span class="k">ensure</span>
  <span class="c1"># ensure that the folder is cleaned up</span>
  <span class="vi">@logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;cleanup: removing the repository folder&#34;</span><span class="p">)</span>
  <span class="nb">system</span><span class="p">(</span><span class="s2">&#34;rm -fr </span><span class="si">#{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">client</span> <span class="o">=</span> <span class="no">Octokit</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:access_token</span> <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;GIT_TOKEN&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">per_page</span><span class="p">:</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">repos</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">repos</span><span class="p">({},</span> <span class="ss">query</span><span class="p">:</span> <span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s1">&#39;owner&#39;</span><span class="p">,</span> <span class="ss">sort</span><span class="p">:</span> <span class="s1">&#39;asc&#39;</span><span class="p">})</span>

<span class="c1"># Go through all the pages and add them to the list of repositories.</span>
<span class="n">repos</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">client</span><span class="o">.</span><span class="n">last_response</span><span class="o">.</span><span class="n">rels</span><span class="o">[</span><span class="ss">:next</span><span class="o">].</span><span class="n">get</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>

<span class="n">repos</span> <span class="o">=</span> <span class="n">repos</span><span class="o">.</span><span class="n">select</span><span class="p">{</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span> <span class="n">r</span><span class="o">.</span><span class="n">fork</span> <span class="p">}</span>

<span class="vi">@logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;going to update &#39;</span><span class="si">#{</span><span class="n">repos</span><span class="o">.</span><span class="n">length</span><span class="si">}</span><span class="s2">&#39; repositories&#34;</span><span class="p">)</span>

<span class="n">repos</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">repo</span><span class="o">|</span>
  <span class="c1"># get the repositories information</span>
  <span class="vi">@logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;updating </span><span class="si">#{</span><span class="n">repo</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
  <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">repository</span><span class="p">(</span><span class="n">repo</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
  <span class="n">update_fork</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></td></tr></table>
</div>
</div><p>This script is also available as a Gist located <a href="https://gist.github.com/Skarlso/fd5bd5971a78a5fa9760b31683de690e">here</a>.</p>
<p>Put this into a cron job, or a Jenkins job on a schedule and you should be good to go.</p>
<p>Note two things:
First: <code>ENV['GIT_TOKEN']</code> this should be set to a token which you can acquire by navigating to
<a href="https://github.com/settings/tokens">tokens</a>. Add a token which has <code>repo</code> access.</p>
<p>Second: Obviously this script will push to your local repository. So wherever you run this, make sure git is set-up and can push
to your repository via SSH. This script is using <code>ssh_url</code> for the repositories. It won&rsquo;t ask for a username or a password.</p>
<p>That&rsquo;s it. Enjoy and keep updating.</p>
<p>Thanks for reading</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Kubernetes distributed application deployment with sample Face Recognition App</title>
      <link>https://skarlso.github.io/2018/03/15/kubernetes-distributed-application/</link>
      <pubDate>Thu, 15 Mar 2018 23:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/03/15/kubernetes-distributed-application/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Alright folks. Settle in and get comfortable. This is going to be a long, but hopefully, fun ride.</p>
<p>I&rsquo;m going to deploy a distributed application with <a href="https://kubernetes.io/">Kubernetes</a>. I attempted to create an application that I thought resembled a real world app. Obviously I had to cut some corners due to time and energy constraints.</p>
<p>My focus will be on Kubernetes and deployment.</p>
<p>Shall we delve right in?</p>
<h1 id="the-application">The Application</h1>
<h2 id="tldr">TL;DR</h2>
<p><img src="/img/kube_overview.png" alt="kube overview"></p>
<p>The application itself consists of six parts. The repository can be found here: <a href="https://github.com/Skarlso/kube-cluster-sample">Kube Cluster Sample</a>.</p>
<p>It’s a face recognition service which identifies images of people, comparing them to known individuals. A simple frontend displays a table of these images whom they belong to. This happens by sending a request to a <a href="https://github.com/Skarlso/kube-cluster-sample/tree/master/receiver">receiver</a>. The request contains a path to an image. This image can sit on an NFS somewhere. The receiver stores this path in the DB (MySQL) and sends a processing request to a queue. The queue uses: <a href="http://nsq.io/">NSQ</a>. The request contains the ID of the saved image.</p>
<p>An <a href="https://github.com/Skarlso/kube-cluster-sample/tree/master/image_processor">Image Processing</a> service is constantly monitoring the queue for jobs to do. The processing consists of the following steps: taking the ID; loading the image; and finally,  sending the image to a <a href="https://github.com/Skarlso/kube-cluster-sample/tree/master/face_recognition">face recognition</a> backend written in Python via <a href="https://grpc.io/">gRPC</a>. If the identification is successful, the backend will return the name of the image corresponding to that person. The image_processor then updates the image’s record with the person’s ID and marks the image as “processed successfully”. If identification is unsuccessful, the image will be left as “pending”. If there was a failure during identification, the image will be flagged as “failed”.</p>
<p>Failed images can be retried  with a cron job, for example:</p>
<p>So how does this all work? Let&rsquo;s check it out .</p>
<h2 id="receiver">Receiver</h2>
<p>The receiver service is the starting point of the process. It&rsquo;s an API which receives a request in the following format:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">curl -d <span class="s1">&#39;{&#34;path&#34;:&#34;/unknown_images/unknown0001.jpg&#34;}&#39;</span> http://127.0.0.1:8000/image/post
</code></pre></td></tr></table>
</div>
</div><p>In this instance, the receiver stores the path using a shared database cluster. The entity will then receive an ID from the database service. This application is based on the model where unique identification for Entity Objects is provided by the persistence layer. Once the ID is procured, the receiver will send a message to NSQ. At this point in the process, the receiver&rsquo;s job is done.</p>
<h2 id="image-processor">Image Processor</h2>
<p>Here is where the excitement begins. When Image Processor first runs it creates two Go routines. These are&hellip;</p>
<h3 id="consume">Consume</h3>
<p>This is an NSQ consumer. It has three integral jobs. Firstly, it listens for messages on the queue. Secondly, when there is a message, it appends the received ID to a thread safe slice of IDs that the second routine processes. And lastly, it signals the second routine that there is work to be do. It does this through <a href="https://golang.org/pkg/sync/#Cond">sync.Condition</a>.</p>
<h3 id="processimages">ProcessImages</h3>
<p>This routine processes a slice of IDs until the slice is drained completely. Once the slice is drained, the routine suspends instead of sleep-waiting on a channel. The processing of a single ID can be seen in the following linear steps:</p>
<ul>
<li>Establish a gRPC connection to the Face Recognition service (explained under Face Recognition)</li>
<li>Retrieve the image record from the database</li>
<li>Setup two functions for the <a href="#circuit-breaker">Circuit Breaker</a>
<ul>
<li>Function 1: The main function which runs  the RPC method call</li>
<li>Function 2: A health check for the Ping of the circuit breaker</li>
</ul>
</li>
<li>Call Function 1 which sends the path of the image to the face recognition service. This path should be accessible by the face recognition service. Preferably something shared like an NFS</li>
<li>If this call fails, update the image record as FAILED PROCESSING</li>
<li>If it succeeds, an image name should come back which corresponds to a person in the db. It runs a joined SQL query which gets the corresponding person&rsquo;s ID</li>
<li>Update the Image record in the database with PROCESSED status and the ID of the person that image was identified as</li>
</ul>
<p>This service can be replicated. In other words, more than one can run at the same time.</p>
<h3 id="circuit-breaker">Circuit Breaker</h3>
<p>A  system in which replicating resources requires little to no effort, there still can be cases where, for example, the network goes down, or there are communication problems of any kind between two services. I like to implement a little circuit breaker around the gRPC calls for fun.</p>
<p>This is how it works:</p>
<p><img src="/img/kube_circuit1.png" alt="kube circuit"></p>
<p>As you can see, once there are 5 unsuccessful calls to the service, the circuit breaker activates, not allowing any more calls to go through. After a configured amount of time, it will send a Ping call to the service to see if it&rsquo;s back up. If that still errors out, it will increase the timeout. If not, it opens the circuit, allowing traffic to proceed.</p>
<h2 id="front-end">Front-End</h2>
<p>This is only a simple table view with Go&rsquo;s own html/template used to render a list of images.</p>
<h2 id="face-recognition">Face Recognition</h2>
<p>Here is where the identification magic happens. I decided to make this a gRPC based service for the  sole purpose of its flexibility. I started writing it in Go but decided that a Python implementation would be much sorter. In fact, excluding the gRPC code, the recognition part is approximately 7 lines of Python code. I&rsquo;m using this fantastic library which contains all the C bindings to OpenCV. <a href="https://github.com/ageitgey/face_recognition">Face Recognition</a>. Having an API contract here means that I can change the implementation anytime as long as it adheres to the contract.</p>
<p>Please note that there exist a great Go library OpenCV. I was about to use it but they had yet to write the C bindings for that part of OpenCV. It&rsquo;s called <a href="https://gocv.io/">GoCV</a>. Check them out! They have some pretty amazing things, like real-time camera feed processing that only needs a couple of lines of code.</p>
<p>The python library is simple in nature. Have a set of images of people you know. I have a folder with a couple of images named, <code>hannibal_1.jpg, hannibal_2.jpg, gergely_1.jpg, john_doe.jpg</code>. In the database I have two tables named, <code>person, person_images</code>. They look like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">+----+----------+
<span class="p">|</span> id <span class="p">|</span> name     <span class="p">|</span>
+----+----------+
<span class="p">|</span>  <span class="m">1</span> <span class="p">|</span> Gergely  <span class="p">|</span>
<span class="p">|</span>  <span class="m">2</span> <span class="p">|</span> John Doe <span class="p">|</span>
<span class="p">|</span>  <span class="m">3</span> <span class="p">|</span> Hannibal <span class="p">|</span>
+----+----------+
+----+----------------+-----------+
<span class="p">|</span> id <span class="p">|</span> image_name     <span class="p">|</span> person_id <span class="p">|</span>
+----+----------------+-----------+
<span class="p">|</span>  <span class="m">1</span> <span class="p">|</span> hannibal_1.jpg <span class="p">|</span>         <span class="m">3</span> <span class="p">|</span>
<span class="p">|</span>  <span class="m">2</span> <span class="p">|</span> hannibal_2.jpg <span class="p">|</span>         <span class="m">3</span> <span class="p">|</span>
+----+----------------+-----------+
</code></pre></td></tr></table>
</div>
</div><p>The face recognition library returns the name of the image from the known people which matches the person on the unknown image. After that, a simple joined query -like this- will return the person in question.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span><span class="w"> </span><span class="n">person</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">person</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="k">inner</span><span class="w"> </span><span class="k">join</span><span class="w"> </span><span class="n">person_images</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">pi</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">person</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pi</span><span class="p">.</span><span class="n">person_id</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">image_name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;hannibal_2.jpg&#39;</span><span class="p">;</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>The gRPC call returns the ID of the person which is then used to update the image&rsquo;s ‘person` column.</p>
<h2 id="nsq">NSQ</h2>
<p>NSQ is a nice little Go based queue. It can be scaled and has a minimal footprint on the system. It also has a lookup service that consumers use to receive messages, and a daemon that senders use when sending messages.</p>
<p>NSQ&rsquo;s philosophy is that the daemon should run with the sender application. That way, the sender will send to the localhost only. But the daemon is connected to the lookup service, and that&rsquo;s how they achieve a global queue.</p>
<p>This means that there are as many NSQ daemons deployed as there are senders. Because the daemon has a minuscule resource requirement, it won&rsquo;t interfere with the requirements of the main application.</p>
<h2 id="configuration">Configuration</h2>
<p>In order to be as flexible as possible, as well as making use of Kubernetes&rsquo;s ConfigSet, I&rsquo;m using .env files in development to store configurations like the location of the database service, or NSQ&rsquo;s lookup address. In production- and that means the Kubernetes’s environment- I&rsquo;ll use environment properties.</p>
<h2 id="conclusion-for-the-application">Conclusion for the Application</h2>
<p>And that&rsquo;s all there is to the architecture of the application we are about to deploy. All of its components are changeable and coupled only through the database, a queue and gRPC. This is imperative when deploying a distributed application due to how updating mechanics work. I will cover that part in the Deployment section.</p>
<h1 id="deployment-with-kubernetes">Deployment with Kubernetes</h1>
<h2 id="basics">Basics</h2>
<p>What <strong>is</strong> Kubernetes?</p>
<p>I&rsquo;m going to cover some of the basics here. I won&rsquo;t go too much into detail-  that would require a whole book like this one: <a href="http://shop.oreilly.com/product/0636920043874.do">Kubernetes Up And Running</a>. Also, if you’re daring enough, you can have a look through this documentation: <a href="https://kubernetes.io/docs/">Kubernetes Documentation</a>.</p>
<p>Kubernetes is a containerized service and application manager. It scales easily, employs a swarm of containers, and most importantly, it&rsquo;s highly configurable via yaml based template files. People often compare Kubernetes to Docker swarm, but Kubernetes does way more than that! For example: it&rsquo;s container agnostic. You could use LXC with Kubernetes and it would work the same way as you using it with Docker. It provides a layer above managing a cluster of deployed services and applications. How? Let&rsquo;s take a quick look at the building blocks of Kubernetes.</p>
<p>In Kubernetes, you’ll describe a desired state of the application and Kubernetes will do what it can to reach that state. States could be something such as deployed; paused; replicated twice; and so on and so forth.</p>
<p>One of the basics of Kubernetes is that it uses Labels and Annotations for all of its components. Services, Deployments, ReplicaSets, DaemonSets, everything is labelled. Consider the following scenario. In order to identify what pod belongs to what application, a label is used called <code>app: myapp</code>. Let’s assume you have two containers of this application deployed; if you would remove the label <code>app</code> from one of the containers, Kubernetes would only detect one and thus would launch a new instance of <code>myapp</code>.</p>
<h3 id="kubernetes-cluster">Kubernetes Cluster</h3>
<p>For Kuberenetes to work, a Kubernetes cluster needs to be present. Setting that up might be a tad painful, but luckily, help is on hand. Minikube sets up a cluster for us locally with one Node. And AWS has a beta service running in the form of a Kubernetes cluster in which the only thing you need to do is request nodes and define your deployments. The Kubernetes cluster components are documented here: <a href="https://kubernetes.io/docs/concepts/overview/components/">Kubernetes Cluster Components</a>.</p>
<h3 id="nodes">Nodes</h3>
<p>A Node is a worker machine. It can be anything- from a vm to a physical machine- including all sorts of cloud provided vms.</p>
<h3 id="pods">Pods</h3>
<p>Pods are a logically grouped collection of containers, meaning one Pod can potentially house a multitude of containers. A Pod gets its own DNS and virtual IP address after it has been created so Kubernetes can load balancer traffic to it. You rarely need to deal with containers directly. Even when debugging, (like looking at logs), you usually invoke <code>kubectl logs deployment/your-app -f</code> instead of looking at a specific container. Although it is possible with <code>-c container_name</code>. The <code>-f</code> does a tail on the log.</p>
<h3 id="deployments">Deployments</h3>
<p>When creating any kind of resource in Kubernetes, it will use a Deployment in the background. A deployment describes a desired state of the current application. It&rsquo;s an object you can use to update Pods or a Service to be in a different state, do an update, or rollout new version of your app. You don&rsquo;t directly control a ReplicaSet, (as described later), but control the deployment object which creates and manages a ReplicaSet.</p>
<h3 id="services">Services</h3>
<p>By default a Pod will get an IP address. However, since Pods are a volatile thing in Kubernetes, you&rsquo;ll need something more permanent. A queue, mysql, or an internal API, a frontend; these need to be long running and behind a static, unchanging IP or preferably a DNS record.</p>
<p>For this purpose, Kubernetes has Services for which you can define modes of accessibility. Load Balanced, simple IP or internal DNS.</p>
<p>How does Kubernetes know if a service is running correctly? You can configure Health Checks and Availability Checks. A Health Check will check whether a container is running, but that doesn&rsquo;t mean that your service is running. For that, you have the availability check which pings a different endpoint in your application.</p>
<p>Since Services are pretty important, I recommend that you read up on them later here: <a href="https://kubernetes.io/docs/concepts/services-networking/service/">Services</a>. Advanced  warning though, this document is quite dense. Twenty four A4 pages of networking, services and discovery. It&rsquo;s also vital to decide whether you want to seriously employ Kubernetes in production.</p>
<h3 id="dns--service-discovery">DNS / Service Discovery</h3>
<p>If you create a service in the cluster, that service will get a DNS record in Kubernetes provided by special Kubernetes deployments called kube-proxy and kube-dns. These two provide service discover inside a cluster. If you have a mysql service running and set <code>clusterIP: none</code>, then everyone in the cluster can reach that service by pinging <code>mysql.default.svc.cluster.local</code>. Where:</p>
<ul>
<li><code>mysql</code> &ndash; is the name of the service</li>
<li><code>default</code> &ndash; is the namespace name</li>
<li><code>svc</code> &ndash; is services</li>
<li><code>cluster.local</code> &ndash; is a local cluster domain</li>
</ul>
<p>The domain can be changed via a custom definition. To access a service outside the cluster, a DNS provider has to be used, and Nginx (for example), to bind an IP address to a record. The public IP address of a service can be queried with the following commands:</p>
<ul>
<li>NodePort &ndash; <code>kubectl get -o jsonpath=&quot;{.spec.ports[0].nodePort}&quot; services mysql</code></li>
<li>LoadBalancer &ndash; <code>kubectl get -o jsonpath=&quot;{.spec.ports[0].LoadBalancer}&quot; services mysql</code></li>
</ul>
<h3 id="template-files">Template Files</h3>
<p>Like Docker Compose, TerraForm or other service management tools, Kubernetes also provides infrastructure describing templates. What that means is that you rarely need  to do anything by hand.</p>
<p>For example, consider the following yaml template which describes an nginx Deployment:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w"> </span><span class="c">#(1)</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w"> </span><span class="c">#(2)</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-deployment</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w"> </span><span class="c">#(3)</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w"> </span><span class="c">#(4)</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w"> </span><span class="c">#(5)</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w"> </span><span class="c">#(6)</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx:1.7.9</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>This is a simple deployment in which we do the following:</p>
<ul>
<li>(1) Define the type of the template with kind</li>
<li>(2) Add metadata that will identify this deployment and every resource that it would create with a label (3)</li>
<li>(4) Then comes the spec which describes the desired state
<ul>
<li>(5) For the nginx app, have 3 replicas</li>
<li>(6) This is the template definition for the containers that this Pod will contain
<ul>
<li>nginx named container</li>
<li>nginx:1.7.9 image (docker in this case)</li>
<li>exposed ports</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="replicaset">ReplicaSet</h3>
<p>A ReplicaSet is a low level replication manager. It ensures that the correct number of replicates are running for a application. However, Deployments are at a higher level and should always manage ReplicaSets. You rarely need to use ReplicaSets directly unless you have a fringe case in which you want to control the specifics of replication.</p>
<h3 id="daemonset">DaemonSet</h3>
<p>Remember how I said Kubernetes is using Labels all the time? A DaemonSet is a controller that ensures that at daemonized application is always running on a node with a certain label.</p>
<p>For example: you want all the nodes labelled with <code>logger</code> or <code>mission_critical</code> to run an logger / auditing service daemon. Then you create a DaemonSet and give it a node selector called <code>logger</code> or <code>mission_critical</code>. Kubernetes will look for a node that has that label. Always ensure that it will have an instance of that daemon running on it. Thus everyone running on that node will have access to that daemon locally.</p>
<p>In case of my application, the NSQ daemon could be a DaemonSet. Make sure it&rsquo;s up on a node which has the receiver component running by labelling a node with <code>receiver</code> and specifying a DaemonSet with a <code>receiver</code> application selector.</p>
<p>The DaemonSet has all the benefits of the ReplicaSet. It&rsquo;s scalable and Kubernetes manages it; which means, all life cycle events are handled by Kube ensuring it never dies, and when it does,  it will be immediately replaced.</p>
<h3 id="scaling">Scaling</h3>
<p>It&rsquo;s trivial to scale in Kubernetes. The ReplicaSets take care of the number of instances of a Pod to run- as seen in the nginx deployment with the setting <code>replicas:3</code>. It&rsquo;s up to us to write our application in a way that allows Kubernetes to run multiple copies of it.</p>
<p>Of course the settings are vast. You can specify which replicates must run on what Nodes, or on various waiting times as to how long to wait for an instance to come up. You can read more on this subject here: <a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/">Horizontal Scaling</a> and here: <a href="https://kubernetes.io/docs/tutorials/kubernetes-basics/scale-interactive/">Interactive Scaling with Kubernetes</a> and of course the details of a <a href="https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/">ReplicaSet</a> which controls all the scaling made possible in Kubernetes.</p>
<h3 id="conclusion-for-kubernetes">Conclusion for Kubernetes</h3>
<p>It&rsquo;s a convenient tool to handle container orchestration. Its unit of work are Pods and it has a layered architecture. The top level layer is Deployments through which you handle all other resources. It&rsquo;s highly configurable. It provides an API for all calls you make, so potentially, instead of running <code>kubectl</code> you can also write your own logic to send information to the Kubernetes API.</p>
<p>It provides support for all major cloud providers natively by now and it&rsquo;s completely open source. Feel free to contribute! And check the code if you would like to have a deeper understanding on how it works: <a href="https://github.com/kubernetes/kubernetes">Kubernetes on Github</a>.</p>
<h2 id="minikube">Minikube</h2>
<p>I&rsquo;m going to use <a href="https://github.com/kubernetes/minikube/">Minikube</a>. Minikube is a local Kubernetes cluster simulator. It&rsquo;s not great in simulating multiple nodes though, but for starting out and local play without any costs, it&rsquo;s great. It uses a VM that can be fine tuned if necessary using VirtualBox and the likes.</p>
<p>All of the kube template files that I&rsquo;ll be using can be found here: <a href="https://github.com/Skarlso/kube-cluster-sample/tree/master/kube_files">Kube files</a>.</p>
<p><strong>NOTE</strong> If, later on, you would like to play with scaling but notice that the replicates are always in <code>Pending</code> state, remember that minikube employs a single node only. It might not allow multiple replicas on the same node, or just plainly ran out of resources to use. You can check available resources with the following command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">kubectl get nodes -o yaml
</code></pre></td></tr></table>
</div>
</div><h2 id="building-the-containers">Building the containers</h2>
<p>Kubernetes supports most of the containers out there. I&rsquo;m going to use Docker. For all the services I&rsquo;ve built, there is a Dockerfile included in the repository. I encourage you to study them. Most of them are simple. For the go services, I&rsquo;m using a multi stage build that has been  recently introduced. The Go services are Alpine Linux based. The Face Recognition service is Python. NSQ and MySQL are using their own containers.</p>
<h2 id="context">Context</h2>
<p>Kubernetes uses namespaces. If you don&rsquo;t specify any, it will use the <code>default</code> namespace. I&rsquo;m going to permanently set a context to avoid polluting the default namespace. You do that like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">❯ kubectl config set-context kube-face-cluster --namespace<span class="o">=</span>face
Context <span class="s2">&#34;kube-face-cluster&#34;</span> created.
</code></pre></td></tr></table>
</div>
</div><p>You have to also start using the context once it&rsquo;s created, like so:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">❯ kubectl config use-context kube-face-cluster
Switched to context <span class="s2">&#34;kube-face-cluster&#34;</span>.
</code></pre></td></tr></table>
</div>
</div><p>After this, all <code>kubectl</code> commands will use the namespace <code>face</code>.</p>
<h2 id="deploying-the-application">Deploying the Application</h2>
<p>Overview of Pods and Services:</p>
<p><img src="/img/kube_deployed.png" alt="kube deployed"></p>
<h3 id="mysql">MySQL</h3>
<p>The first Service I&rsquo;m going to deploy is my database.</p>
<p>I&rsquo;m using the Kubernetes example located here <a href="https://kubernetes.io/docs/tasks/run-application/run-single-instance-stateful-application/#deploy-mysql">Kube MySQL</a> which fits my needs. Please note that this file is using a plain password for MYSQL_PASSWORD. I&rsquo;m going to employ a vault as described here <a href="https://kubernetes.io/docs/concepts/configuration/secret/">Kubernetes Secrets</a>.</p>
<p>I&rsquo;ve created a secret locally as described in that document using a secret yaml:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Secret</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kube-face-secret</span><span class="w">
</span><span class="w"></span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Opaque</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">mysql_password</span><span class="p">:</span><span class="w"> </span><span class="l">base64codehere</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>I created the  base64 code via the following command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">echo</span> -n <span class="s2">&#34;ubersecurepassword&#34;</span> <span class="p">|</span> base64
</code></pre></td></tr></table>
</div>
</div><p>And, this is what you&rsquo;ll see in my deployment yaml file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">...</span><span class="w">
</span><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">MYSQL_ROOT_PASSWORD</span><span class="w">
</span><span class="w">  </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kube-face-secret</span><span class="w">
</span><span class="w">      </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">mysql_password</span><span class="w">
</span><span class="w"></span><span class="nn">...</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Another thing worth mentioning: It&rsquo;s using a volume to persist the database. The volume definition is as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">...</span><span class="w">
</span><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mysql-persistent-storage</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/var/lib/mysql</span><span class="w">
</span><span class="w"></span><span class="nn">...</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mysql-persistent-storage</span><span class="w">
</span><span class="w">        </span><span class="nt">persistentVolumeClaim</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">claimName</span><span class="p">:</span><span class="w"> </span><span class="l">mysql-pv-claim</span><span class="w">
</span><span class="w"></span><span class="nn">...</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p><code>presistentVolumeClain</code> is key here. This tells Kubernetes that this resource requires a persistent volume. How it&rsquo;s provided is abstracted away from the user. You can be sure that Kubernetes will provide a volume that will always be there. It is similar to Pods. To read up on the details, check out this document: <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes">Kubernetes Persistent Volumes</a>.</p>
<p>Deploying the mysql Service is done with the following command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">kubectl apply -f mysql.yaml
</code></pre></td></tr></table>
</div>
</div><p><code>apply</code> vs <code>create</code>. In short, <code>apply</code> is considered a declarative object configuration command while <code>create</code> is imperative. What this means for now is that ‘create’ is usually for a one of tasks, like running something or creating a deployment. While, when using apply, the user doesn&rsquo;t define the action to be taken. That will be defined by Kubernetes based on the current status of the cluster. Thus, when there is no service called <code>mysql</code> and I&rsquo;m calling <code>apply -f mysql.yaml</code> it will create the service. When running again, Kubernetes won&rsquo;t do anything. But if I would run <code>create</code> again it will throw an error saying the service is already created.</p>
<p>For more information, check out the following docs: <a href="https://kubernetes.io/docs/concepts/overview/object-management-kubectl/overview/">Kubernetes Object Management</a>, <a href="https://kubernetes.io/docs/concepts/overview/object-management-kubectl/imperative-config/">Imperative Configuration</a>, <a href="https://kubernetes.io/docs/concepts/overview/object-management-kubectl/declarative-config/">Declarative Configuration</a>.</p>
<p>To see progress information, run:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># Describes the whole process</span>
kubectl describe deployment mysql
<span class="c1"># Shows only the pod</span>
kubectl get pods -l <span class="nv">app</span><span class="o">=</span>mysql
</code></pre></td></tr></table>
</div>
</div><p>Output should be similar to this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">...
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  &lt;none&gt;
NewReplicaSet:   mysql-55cd6b9f47 <span class="o">(</span>1/1 replicas created<span class="o">)</span>
...
</code></pre></td></tr></table>
</div>
</div><p>Or in case of <code>get pods</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">NAME                     READY     STATUS    RESTARTS   AGE
mysql-78dbbd9c49-k6sdv   1/1       Running   <span class="m">0</span>          18s
</code></pre></td></tr></table>
</div>
</div><p>To test the instance, run the following snippet:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">kubectl run -it --rm --image<span class="o">=</span>mysql:5.6 --restart<span class="o">=</span>Never mysql-client -- mysql -h mysql -pyourpasswordhere
</code></pre></td></tr></table>
</div>
</div><p><strong>GOTCHA</strong>: If you change the password now, it&rsquo;s not enough to re-apply your yaml file to update the container. Since the DB is persisted, the password will not be changed. You have to delete the whole deployment with <code>kubectl delete -f mysql.yaml</code>.</p>
<p>You should see the following when running a <code>show databases</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">If you don<span class="err">&#39;</span>t see a <span class="nb">command</span> prompt, try pressing enter.
mysql&gt;
mysql&gt;
mysql&gt; show databases<span class="p">;</span>
+--------------------+
<span class="p">|</span> Database           <span class="p">|</span>
+--------------------+
<span class="p">|</span> information_schema <span class="p">|</span>
<span class="p">|</span> kube               <span class="p">|</span>
<span class="p">|</span> mysql              <span class="p">|</span>
<span class="p">|</span> performance_schema <span class="p">|</span>
+--------------------+
<span class="m">4</span> rows in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>

mysql&gt; <span class="nb">exit</span>
Bye
</code></pre></td></tr></table>
</div>
</div><p>You&rsquo;ll also notice that I’ve mounted a file located here: <a href="https://github.com/Skarlso/kube-cluster-sample/blob/master/database_setup.sql">Database Setup SQL</a> into the container. MySQL container automatically executes these. That file will bootstrap some data and the schema I&rsquo;m going to use.</p>
<p>The volume definition is as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">  </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mysql-persistent-storage</span><span class="w">
</span><span class="w">    </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/var/lib/mysql</span><span class="w">
</span><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">bootstrap-script</span><span class="w">
</span><span class="w">    </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/docker-entrypoint-initdb.d/database_setup.sql</span><span class="w">
</span><span class="w"></span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mysql-persistent-storage</span><span class="w">
</span><span class="w">  </span><span class="nt">persistentVolumeClaim</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">claimName</span><span class="p">:</span><span class="w"> </span><span class="l">mysql-pv-claim</span><span class="w">
</span><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">bootstrap-script</span><span class="w">
</span><span class="w">  </span><span class="nt">hostPath</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/Users/hannibal/golang/src/github.com/Skarlso/kube-cluster-sample/database_setup.sql</span><span class="w">
</span><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">File</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>To check if the bootstrap script was successful, run this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">~/golang/src/github.com/Skarlso/kube-cluster-sample/kube_files master*
❯ kubectl run -it --rm --image<span class="o">=</span>mysql:5.6 --restart<span class="o">=</span>Never mysql-client -- mysql -h mysql -uroot -pyourpasswordhere kube
If you don<span class="err">&#39;</span>t see a <span class="nb">command</span> prompt, try pressing enter.

mysql&gt; show tables<span class="p">;</span>
+----------------+
<span class="p">|</span> Tables_in_kube <span class="p">|</span>
+----------------+
<span class="p">|</span> images         <span class="p">|</span>
<span class="p">|</span> person         <span class="p">|</span>
<span class="p">|</span> person_images  <span class="p">|</span>
+----------------+
<span class="m">3</span> rows in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>

mysql&gt;
</code></pre></td></tr></table>
</div>
</div><p>This concludes the database service setup. Logs for this service can be viewed with the following command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">kubectl logs deployment/mysql -f
</code></pre></td></tr></table>
</div>
</div><h3 id="nsq-lookup">NSQ Lookup</h3>
<p>The NSQ Lookup will run as an internal service. It doesn&rsquo;t need access from the outside, so I&rsquo;m setting <code>clusterIP: None</code> which will tell Kubernetes that this service is a headless service. This means that it won&rsquo;t be load balanced, and it won&rsquo;t be a single IP service. The DNS will be based upon service selectors.</p>
<p>Our NSQ Lookup selector is:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nsqlookup</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Thus, the internal DNS will look like this: <code>nsqlookup.default.svc.cluster.local</code>.</p>
<p>Headless services are described in detail here: <a href="https://kubernetes.io/docs/concepts/services-networking/service/#headless-services">Headless Service</a>.</p>
<p>Basically it&rsquo;s the same as MySQL, just with slight modifications. As stated earlier, I&rsquo;m using NSQ&rsquo;s own Docker Image called <code>nsqio/nsq</code>. All nsq commands are there, so nsqd will also use this image just with a different command. For nsqlookupd, the command is:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;/nsqlookupd&#34;</span><span class="p">]</span><span class="w">
</span><span class="w"></span><span class="nt">args</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;--broadcast-address=nsqlookup.default.svc.cluster.local&#34;</span><span class="p">]</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>What&rsquo;s the <code>--broadcast-address</code> for, you might ask? By default, nsqlookup will use the <code>hostname</code> as broadcast address. When the consumer runs a callback it will try to connect to something like: <code>http://nsqlookup-234kf-asdf:4161/lookup?topics=image</code>. Please note that <code>nsqlookup-234kf-asdf</code> is the hostname of the container. By setting the broadcast-address to the internal DNS, the callback will be: <code>http://nsqlookup.default.svc.cluster.local:4161/lookup?topic=images</code>. Which will work as expected.</p>
<p>NSQ Lookup also requires two ports forwarded: One for broadcasting and one for nsqd callback. These are exposed in the Dockerfile, and then utilized in the Kubernetes template. Like this:</p>
<p>In the container template:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">4160</span><span class="w">
</span><span class="w">          </span><span class="nt">hostPort</span><span class="p">:</span><span class="w"> </span><span class="m">4160</span><span class="w">
</span><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">4161</span><span class="w">
</span><span class="w">          </span><span class="nt">hostPort</span><span class="p">:</span><span class="w"> </span><span class="m">4161</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>In the service template:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">tcp</span><span class="w">
</span><span class="w">    </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">4160</span><span class="w">
</span><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">4160</span><span class="w">
</span><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">http</span><span class="w">
</span><span class="w">    </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">4161</span><span class="w">
</span><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">4161</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Names are required by Kubernetes.</p>
<p>To create this service, I&rsquo;m using the same command as before:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">kubectl apply -f nsqlookup.yaml
</code></pre></td></tr></table>
</div>
</div><p>This concludes nsqlookupd. Two of the major players are in the sack!</p>
<h3 id="receiver-1">Receiver</h3>
<p>This is a more complex one. The receiver will do three things:</p>
<ul>
<li>Create some deployments;</li>
<li>Create the nsq daemon;</li>
<li>Expose the service to the public.</li>
</ul>
<h4 id="deployments-1">Deployments</h4>
<p>The first deployment it creates is its own. The receiver’s container is <code>skarlso/kube-receiver-alpine</code>.</p>
<h4 id="nsq-daemon">Nsq Daemon</h4>
<p>The receiver starts an nsq daemon. As stated earlier, the receiver runs an nsqd with it-self. It does this so talking to it can happen locally and not over the network. By making the receiver do this, they will end up on the same node.</p>
<p>NSQ daemon also needs some adjustments and parameters.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">4150</span><span class="w">
</span><span class="w">          </span><span class="nt">hostPort</span><span class="p">:</span><span class="w"> </span><span class="m">4150</span><span class="w">
</span><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">4151</span><span class="w">
</span><span class="w">          </span><span class="nt">hostPort</span><span class="p">:</span><span class="w"> </span><span class="m">4151</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">NSQLOOKUP_ADDRESS</span><span class="w">
</span><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">nsqlookup.default.svc.cluster.local</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">NSQ_BROADCAST_ADDRESS</span><span class="w">
</span><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">nsqd.default.svc.cluster.local</span><span class="w">
</span><span class="w">        </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;/nsqd&#34;</span><span class="p">]</span><span class="w">
</span><span class="w">        </span><span class="nt">args</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;--lookupd-tcp-address=$(NSQLOOKUP_ADDRESS):4160&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;--broadcast-address=$(NSQ_BROADCAST_ADDRESS)&#34;</span><span class="p">]</span><span class="w">
</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>You can see that the lookup-tcp-address and the broadcast-address are set. Lookup tcp address is the DNS for the nsqlookupd service. And the broadcast address is necessary, just like with nsqlookupd, so the callbacks are working properly.</p>
<h4 id="public-facing">Public facing</h4>
<p>Now, this is the first time I&rsquo;m deploying a public facing service. There are two options. I could use a LoadBalancer since this API will be under heavy load. And if this would be deployed anywhere in production, then it should be using one.</p>
<p>I&rsquo;m doing this locally though- with one node- so something called a <code>NodePort</code> is enough. A <code>NodePort</code> exposes a service on each node&rsquo;s IP at a static port. If not specified, it will assign a random port on the host between 30000-32767. But it can also be configured to be a specific port, using <code>nodePort</code> in the template file. To reach this service, use <code>&lt;NodeIP&gt;:&lt;NodePort&gt;</code>. If more than one node is configured, a LoadBalancer can multiplex them to a single IP.</p>
<p>For further information, check out this document: <a href="https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services---service-types">Publishing Services</a>.</p>
<p>Putting this all together, we&rsquo;ll get a receiver-service for which the template for is as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">receiver-service</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8000</span><span class="w">
</span><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">8000</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">receiver</span><span class="w">
</span><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">NodePort</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>For a fixed nodePort on 8000 a definition of <code>nodePort</code> must be provided:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">receiver-service</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8000</span><span class="w">
</span><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">8000</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">receiver</span><span class="w">
</span><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">NodePort</span><span class="w">
</span><span class="w">  </span><span class="nt">nodePort</span><span class="p">:</span><span class="w"> </span><span class="m">8000</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="image-processor-1">Image processor</h3>
<p>The Image Processor is where I&rsquo;m handling passing off images to be identified. It should have access to nsqlookupd, mysql and the gRPC endpoint of the face recognition service. This is actually quite a boring service. In fact, it&rsquo;s not even a service at all. It doesn&rsquo;t expose anything, and thus it&rsquo;s the first deployment only component. For brevity, here is the whole template:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">image-processor-deployment</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">image-processor</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">image-processor</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">image-processor</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">skarlso/kube-processor-alpine:latest</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">MYSQL_CONNECTION</span><span class="w">
</span><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mysql.default.svc.cluster.local&#34;</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">MYSQL_USERPASSWORD</span><span class="w">
</span><span class="w">          </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kube-face-secret</span><span class="w">
</span><span class="w">              </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">mysql_userpassword</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">MYSQL_PORT</span><span class="w">
</span><span class="w">          </span><span class="c"># TIL: If this is 3306 without &#34; kubectl throws an error.</span><span class="w">
</span><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3306&#34;</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">MYSQL_DBNAME</span><span class="w">
</span><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">kube</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">NSQ_LOOKUP_ADDRESS</span><span class="w">
</span><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;nsqlookup.default.svc.cluster.local:4161&#34;</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">GRPC_ADDRESS</span><span class="w">
</span><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;face-recog.default.svc.cluster.local:50051&#34;</span><span class="w">
</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>The only interesting points in this file are the multitude of environment properties that are used to configure the application. Note the nsqlookupd address and the grpc address.</p>
<p>To create this deployment, run:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">kubectl apply -f image_processor.yaml
</code></pre></td></tr></table>
</div>
</div><h3 id="face---recognition">Face - Recognition</h3>
<p>The face recognition service does have a service. It&rsquo;s a simple one. Only needed by image-processor. It&rsquo;s template is as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">face-recog</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">50051</span><span class="w">
</span><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">50051</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">face-recog</span><span class="w">
</span><span class="w">  </span><span class="nt">clusterIP</span><span class="p">:</span><span class="w"> </span><span class="l">None</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>The more interesting part is that it requires two volumes. The two volumes are <code>known_people</code> and <code>unknown_people</code>. Can you guess what they will contain? Yep, images. The <code>known_people</code> volume contains all the images associated to the known people in the database. The <code>unknown_people</code> volume will contain all new images. And that&rsquo;s the path we will need to use when sending images from the receiver; that is wherever the mount point points too, which in my case is <code>/unknown_people</code>. Basically, the path needs to be one that the face recognition service can access.</p>
<p>Now, with Kubernetes and Docker, this is easy. It can be a mounted S3 or some kind of nfs or a local mount from host to guest. The possibilities are endless (around a dozen or so). I&rsquo;m going to use a local mount for the sake of simplicity.</p>
<p>Mounting a volume is done in two parts. Firstly, the Dockerfile has to specify volumes:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="k">VOLUME</span> <span class="p">[</span> <span class="s2">&#34;/unknown_people&#34;</span><span class="p">,</span> <span class="s2">&#34;/known_people&#34;</span> <span class="p">]</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><p>Secondly, the Kubernetes template needs add <code>volumeMounts</code> as seen in the MySQL service; the difference being <code>hostPath</code> instead of claimed volume:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">known-people-storage</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/known_people</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">unknown-people-storage</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/unknown_people</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">known-people-storage</span><span class="w">
</span><span class="w">        </span><span class="nt">hostPath</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/Users/hannibal/Temp/known_people</span><span class="w">
</span><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Directory</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">unknown-people-storage</span><span class="w">
</span><span class="w">        </span><span class="nt">hostPath</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/Users/hannibal/Temp/</span><span class="w">
</span><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Directory</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>We also need to set the <code>known_people</code> folder config setting for the face recognition service. This is done via an environment property:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">KNOWN_PEOPLE</span><span class="w">
</span><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/known_people&#34;</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Then the Python code will look up images, like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python">        <span class="n">known_people</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;KNOWN_PEOPLE&#39;</span><span class="p">,</span> <span class="s1">&#39;known_people&#39;</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">&#34;Known people images location is: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">known_people</span><span class="p">)</span>
        <span class="n">images</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">image_files_in_folder</span><span class="p">(</span><span class="n">known_people</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>Where <code>image_files_in_folder</code> is:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python">    <span class="k">def</span> <span class="nf">image_files_in_folder</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">folder</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">folder</span><span class="p">)</span> <span class="k">if</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;.*\.(jpg|jpeg|png)&#39;</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">I</span><span class="p">)]</span>
</code></pre></td></tr></table>
</div>
</div><p>Neat.</p>
<p>Now, if the receiver receives a request (and sends it off further down the line) similar to the one below&hellip;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">curl -d <span class="s1">&#39;{&#34;path&#34;:&#34;/unknown_people/unknown220.jpg&#34;}&#39;</span> http://192.168.99.100:30251/image/post
</code></pre></td></tr></table>
</div>
</div><p>&hellip;it will look for an image called unknown220.jpg under <code>/unknown_people</code>, locate an image in the known_folder that corresponds to the person in the unknown image and return the name of the image that matches.</p>
<p>Looking at logs, you should see something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># Receiver</span>
❯ curl -d <span class="s1">&#39;{&#34;path&#34;:&#34;/unknown_people/unknown219.jpg&#34;}&#39;</span> http://192.168.99.100:30251/image/post
got path: <span class="o">{</span>Path:/unknown_people/unknown219.jpg<span class="o">}</span>
image saved with id: <span class="m">4</span>
image sent to nsq

<span class="c1"># Image Processor</span>
2018/03/26 18:11:21 INF    <span class="m">1</span> <span class="o">[</span>images/ch<span class="o">]</span> querying nsqlookupd http://nsqlookup.default.svc.cluster.local:4161/lookup?topic<span class="o">=</span>images
2018/03/26 18:11:59 Got a message: <span class="m">4</span>
2018/03/26 18:11:59 Processing image id:  <span class="m">4</span>
2018/03/26 18:12:00 got person:  Hannibal
2018/03/26 18:12:00 updating record with person id
2018/03/26 18:12:00 <span class="k">done</span>
</code></pre></td></tr></table>
</div>
</div><p>And that concludes all of the services that we need to deploy.</p>
<h3 id="frontend">Frontend</h3>
<p>Lastly, there is a small web-app which displays the information in the db for convenience. This is also a public facing service with the same parameters as the receiver.</p>
<p>It looks like this:</p>
<p><img src="/img/kube-frontend.png" alt="frontend"></p>
<h3 id="recap">Recap</h3>
<p>We are now at the point in which I’ve deployed a bunch of services. A recap off the commands I’ve used so far:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">kubectl apply -f mysql.yaml
kubectl apply -f nsqlookup.yaml
kubectl apply -f receiver.yaml
kubectl apply -f image_processor.yaml
kubectl apply -f face_recognition.yaml
kubectl apply -f frontend.yaml
</code></pre></td></tr></table>
</div>
</div><p>These could be in any order since the application does not allocate connections on start. (Except for image_processor&rsquo;s NSQ consumer. But that re-tries.)</p>
<p>Query-ing kube for running pods with <code>kubectl get pods</code> should show something like this if there were no errors:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">❯ kubectl get pods
NAME                                          READY     STATUS    RESTARTS   AGE
face-recog-6bf449c6f-qg5tr                    1/1       Running   <span class="m">0</span>          1m
image-processor-deployment-6467468c9d-cvx6m   1/1       Running   <span class="m">0</span>          31s
mysql-7d667c75f4-bwghw                        1/1       Running   <span class="m">0</span>          36s
nsqd-584954c44c-299dz                         1/1       Running   <span class="m">0</span>          26s
nsqlookup-7f5bdfcb87-jkdl7                    1/1       Running   <span class="m">0</span>          11s
receiver-deployment-5cb4797598-sf5ds          1/1       Running   <span class="m">0</span>          26s
</code></pre></td></tr></table>
</div>
</div><p>Running <code>minikube service list</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">❯ minikube service list
<span class="p">|</span>-------------<span class="p">|</span>----------------------<span class="p">|</span>-----------------------------<span class="p">|</span>
<span class="p">|</span>  NAMESPACE  <span class="p">|</span>         NAME         <span class="p">|</span>             URL             <span class="p">|</span>
<span class="p">|</span>-------------<span class="p">|</span>----------------------<span class="p">|</span>-----------------------------<span class="p">|</span>
<span class="p">|</span> default     <span class="p">|</span> face-recog           <span class="p">|</span> No node port                <span class="p">|</span>
<span class="p">|</span> default     <span class="p">|</span> kubernetes           <span class="p">|</span> No node port                <span class="p">|</span>
<span class="p">|</span> default     <span class="p">|</span> mysql                <span class="p">|</span> No node port                <span class="p">|</span>
<span class="p">|</span> default     <span class="p">|</span> nsqd                 <span class="p">|</span> No node port                <span class="p">|</span>
<span class="p">|</span> default     <span class="p">|</span> nsqlookup            <span class="p">|</span> No node port                <span class="p">|</span>
<span class="p">|</span> default     <span class="p">|</span> receiver-service     <span class="p">|</span> http://192.168.99.100:30251 <span class="p">|</span>
<span class="p">|</span> kube-system <span class="p">|</span> kube-dns             <span class="p">|</span> No node port                <span class="p">|</span>
<span class="p">|</span> kube-system <span class="p">|</span> kubernetes-dashboard <span class="p">|</span> http://192.168.99.100:30000 <span class="p">|</span>
<span class="p">|</span>-------------<span class="p">|</span>----------------------<span class="p">|</span>-----------------------------<span class="p">|</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="rolling-update">Rolling update</h3>
<p>What happens during a rolling update?</p>
<p><img src="/img/kube_rotate.png" alt="kube rotate"></p>
<p>As it happens during software development, change is requested/needed to some parts of the system. So what happens to our cluster if I change one of its components without breaking the others whilst also maintaining backwards compatibility with no disruption to user experience? Thankfully Kubernetes can help with that.</p>
<p>What I don&rsquo;t like is that the API only handles one image at a time. Unfortunately there is no bulk upload option.</p>
<h4 id="code">Code</h4>
<p>Currently, we have the following code segment dealing with a single image:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// PostImage handles a post of an image. Saves it to the database
</span><span class="c1">// and sends it to NSQ for further processing.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">PostImage</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
<span class="o">...</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">router</span> <span class="o">:=</span> <span class="nx">mux</span><span class="p">.</span><span class="nf">NewRouter</span><span class="p">()</span>
    <span class="nx">router</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/image/post&#34;</span><span class="p">,</span> <span class="nx">PostImage</span><span class="p">).</span><span class="nf">Methods</span><span class="p">(</span><span class="s">&#34;POST&#34;</span><span class="p">)</span>
    <span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:8000&#34;</span><span class="p">,</span> <span class="nx">router</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>We have two options: Add a new endpoint with <code>/images/post</code> and make the client use that, or modify the existing one.</p>
<p>The new client code has the advantage in that it can fall back to submitting the old way if the new endpoint isn&rsquo;t available. The old client code, however, doesn&rsquo;t have this advantage so we can&rsquo;t change the way our code works right now. Consider this: You have 90 servers and you do a slow paced rolling update that will take out servers one step at a time whilst doing an update. If an update lasts around a minute, the whole process will take around one and a half hours to complete, (not counting any parallel updates).</p>
<p>During this time, some of your servers will run the new code and some will run the old one. Calls are load balanced, thus you have no control over which servers will be hit. If a client is trying to do a call the new way but hits an old server, the client will fail. The client can try and fallback, but since you eliminated the old version it will not succeed unless it, by mere chance, hits a server with the new code (assuming no sticky sessions are set).</p>
<p>Also, once all your servers are updated, an old client will not be able to use your service any longer.</p>
<p>Now, you can argue that you don&rsquo;t want to keep old versions of your code forever. And that’s true in a sense. That&rsquo;s why we are going to modify the old code to simply call the new one with some slight augmentations. This way, once all clients have been migrated, the code can simply be deleted without any problems.</p>
<h4 id="new-endpoint">New Endpoint</h4>
<p>Let&rsquo;s add a new route method:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="o">...</span>
<span class="nx">router</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/images/post&#34;</span><span class="p">,</span> <span class="nx">PostImages</span><span class="p">).</span><span class="nf">Methods</span><span class="p">(</span><span class="s">&#34;POST&#34;</span><span class="p">)</span>
<span class="o">...</span>
</code></pre></td></tr></table>
</div>
</div><p>Updating the old one to call the new one with a modified body looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// PostImage handles a post of an image. Saves it to the database
</span><span class="c1">// and sends it to NSQ for further processing.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">PostImage</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">p</span> <span class="nx">Path</span>
    <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">NewDecoder</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">Body</span><span class="p">).</span><span class="nf">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">p</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
      <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&#34;got error while decoding body: %s&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
      <span class="k">return</span>
    <span class="p">}</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&#34;got path: %+v\n&#34;</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span>
    <span class="kd">var</span> <span class="nx">ps</span> <span class="nx">Paths</span>
    <span class="nx">paths</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="nx">Path</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="nx">paths</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">paths</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span>
    <span class="nx">ps</span><span class="p">.</span><span class="nx">Paths</span> <span class="p">=</span> <span class="nx">paths</span>
    <span class="kd">var</span> <span class="nx">pathsJSON</span> <span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span>
    <span class="nx">err</span> <span class="p">=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">NewEncoder</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">pathsJSON</span><span class="p">).</span><span class="nf">Encode</span><span class="p">(</span><span class="nx">ps</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
      <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&#34;failed to encode paths: %s&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
      <span class="k">return</span>
    <span class="p">}</span>
    <span class="nx">r</span><span class="p">.</span><span class="nx">Body</span> <span class="p">=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">NopCloser</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">pathsJSON</span><span class="p">)</span>
    <span class="nx">r</span><span class="p">.</span><span class="nx">ContentLength</span> <span class="p">=</span> <span class="nb">int64</span><span class="p">(</span><span class="nx">pathsJSON</span><span class="p">.</span><span class="nf">Len</span><span class="p">())</span>
    <span class="nf">PostImages</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Well, the naming could be better, but you should get the basic idea. I&rsquo;m modifying the incoming single path by wrapping it into the new format and sending it over to the new endpoint handler. And that&rsquo;s it! There are a few more modifications. To check them out, take a look at this PR: <a href="https://github.com/Skarlso/kube-cluster-sample/pull/1">Rolling Update Bulk Image Path PR</a>.</p>
<p>Now, the receiver can be called in two ways:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># Single Path:</span>
curl -d <span class="s1">&#39;{&#34;path&#34;:&#34;unknown4456.jpg&#34;}&#39;</span> http://127.0.0.1:8000/image/post

<span class="c1"># Multiple Paths:</span>
curl -d <span class="s1">&#39;{&#34;paths&#34;:[{&#34;path&#34;:&#34;unknown4456.jpg&#34;}]}&#39;</span> http://127.0.0.1:8000/images/post
</code></pre></td></tr></table>
</div>
</div><p>Here, the client is curl. Normally, if the client is a service, I would modify it that in case the new end-point throws a 404 it would try the old one next.</p>
<p>For brevity, I&rsquo;m not modifying NSQ and the others to handle bulk image processing; they will still receive it one by one. I&rsquo;ll leave that up to you as homework ;)</p>
<h4 id="new-image">New Image</h4>
<p>To perform a rolling update, I must create a new image first from the receiver service.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">docker build -t skarlso/kube-receiver-alpine:v1.1 .
</code></pre></td></tr></table>
</div>
</div><p>Once this is complete, we can begin rolling out the change.</p>
<h4 id="rolling-update-1">Rolling update</h4>
<p>In Kubernetes, you can configure your rolling update in multiple ways:</p>
<h5 id="manual-update">Manual Update</h5>
<p>If I was using a container version in my config file called <code>v1.0</code>, then doing an update is simply calling:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">kubectl rolling-update receiver --image:skarlso/kube-receiver-alpine:v1.1
</code></pre></td></tr></table>
</div>
</div><p>If there is a problem during the rollout we can always rollback.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">kubectl rolling-update receiver --rollback
</code></pre></td></tr></table>
</div>
</div><p>It will set back the previous version. No fuss, no muss.</p>
<h5 id="apply-a-new-configuration-file">Apply a new configuration file</h5>
<p>The problem with by-hand updates is that they aren&rsquo;t in source control.</p>
<p>Consider this: Something has changed, A couple of servers got updated by hand to do a quick “patch fix”, but nobody witnessed it and it wasn’t documented. A new person comes along and does a change to the template and applies the template to the cluster. All the servers are updated, and then all of a sudden there is a service outage.</p>
<p>Long story short, the servers which got updated are written over because the template doesn’t  reflect what has been done manually.</p>
<p>The recommended way is to change the template in order to use the new version, and than apply the template with the <code>apply</code> command.</p>
<p>Kubernetes recommends that a Deployment with ReplicaSets should handle a rollout. This means there must be at least two replicates present for a rolling update. If less than two replicates are present then the update won&rsquo;t work (unless <code>maxUnavailable</code> is set to 1). I increase the replica count in yaml. I also set the new image version for the receiver container.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span><span class="w"></span><span class="nn">...</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">receiver</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">skarlso/kube-receiver-alpine:v1.1</span><span class="w">
</span><span class="w"></span><span class="nn">...</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Looking at the progress, this is what you should see :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">❯ kubectl rollout status deployment/receiver-deployment
Waiting <span class="k">for</span> rollout to finish: <span class="m">1</span> out of <span class="m">2</span> new replicas have been updated...
</code></pre></td></tr></table>
</div>
</div><p>You can add in additional rollout configuration settings by specifying the <code>strategy</code> part of the template like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">  </span><span class="nt">strategy</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">RollingUpdate</span><span class="w">
</span><span class="w">    </span><span class="nt">rollingUpdate</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">maxSurge</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">      </span><span class="nt">maxUnavailable</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Additional information on rolling update can be found in the below documents: <a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#rolling-back-a-deployment">Deployment Rolling Update</a>, <a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#updating-a-deployment">Updating a Deployment</a>, <a href="https://kubernetes.io/docs/concepts/cluster-administration/manage-deployment/#updating-your-application-without-a-service-outage">Manage Deployments</a>, <a href="https://kubernetes.io/docs/tasks/run-application/rolling-update-replication-controller/">Rolling Update using ReplicaController</a>.</p>
<p><strong>NOTE MINIKUBE USERS</strong>: Since we are doing this on a local machine with one node and 1 replica of an application, we have to set <code>maxUnavailable</code> to <code>1</code>; otherwise Kubernetes won&rsquo;t allow the update to happen, and the new version will remain in <code>Pending</code> state. That’s because we aren’t allowing for a services to exist with no running containers; which basically means service outage.</p>
<h3 id="scaling-1">Scaling</h3>
<p>Scaling is dead easy with Kubernetes. Since it&rsquo;s managing the whole cluster, you basically just need to put a number into the template of the desired replicas to use.</p>
<p>This has been a great post so far, but it&rsquo;s getting too long. I&rsquo;m planning on writing a follow-up where I will be truly scaling things up on AWS with multiple nodes and replicas; plus deploying a Kubernetes cluster with <a href="https://github.com/kubernetes/kops">Kops</a>. So stay tuned!</p>
<h3 id="cleanup">Cleanup</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">kubectl delete deployments --all
kubectl delete services -all
</code></pre></td></tr></table>
</div>
</div><h1 id="final-words">Final Words</h1>
<p>And that’s it ladies and gentlemen. We wrote, deployed, updated and scaled (well, not yet really) a distributed application with Kubernetes.</p>
<p>If you have any questions, please feel free to chat in the comments below. I&rsquo;m happy to answer.</p>
<p>I hope you’ve enjoyed reading this. I know it&rsquo;s quite long; I was thinking of splitting it up multiple posts, but having a cohesive, one page guide is useful and makes it easy to find, save, and print.</p>
<p>Thank you for reading,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Go Budapest Meetup</title>
      <link>https://skarlso.github.io/2018/02/06/go-budapest-meetup/</link>
      <pubDate>Tue, 06 Feb 2018 23:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/02/06/go-budapest-meetup/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>So I was at <a href="https://www.meetup.com/go-budapest">Go Budapest Meetup</a> yesterday, where the brilliant <a href="https://jbrandhorst.com/">Johan Brandhorst</a>
gave a talk about his project based on <a href="https://grpc.io/">gRPC</a> using <a href="https://github.com/improbable-eng/grpc-web">gRPC-web</a> +
<a href="https://github.com/gopherjs/gopherjs">GopherJS</a> + <a href="https://github.com/google/protobuf">protobuf</a>. He also has some Go
contributions and check out his project here: <a href="https://github.com/johanbrandhorst/protobuf">Protobuf</a>. It&rsquo;s GopherJS Bindings for
ProtobufJS and gRPC-Web.</p>
<p>It was interesting to see where these projects could lead and I see the potential in them. I liked the usage of Protobuf and gRPC,
I don&rsquo;t have THAT much experience with them. However after yesterday, I&rsquo;m eager to find an excuse to do something with these libraries.
I used gRPC indirectly, well, the result of it, when dealing with Google Cloud Platform&rsquo;s API. Which is largely generated code through
gRPC and protobuf.</p>
<p>He also presented a bi-directional stream communication between the gRPC-web client and the server which was an interesting feat
to produce. It did involve the use of <a href="https://godoc.org/golang.org/x/sync/errgroup">errgroup</a>. Which is nice.</p>
<p>I didn&rsquo;t look THAT much into WebAssembly however, again, after yesterday, I will. He gave a shout out to WebAssembly developers
that he is ready to tackle the Go bindings for WASM!</p>
<p>It was a good change of pace to look at some Go code being written, I&rsquo;ll be sure to visit the meetup again, in about three months
when the next one will come.</p>
<p>Maybe, I&rsquo;ll even give a talk if they are looking for speakers. ;)</p>
<p>A huge thank you to <a href="https://www.emarsys.com/en/about-us/">Emarsys Budapest</a> for organizing the event and bringing Johan to us
for his talk.</p>
<p>Thanks, <br>
Gergely</p>
]]></description>
    </item>
    
    <item>
      <title>Ansible &#43; Nginx &#43; LetsEncrypt &#43; Wiki &#43; Nagios</title>
      <link>https://skarlso.github.io/2018/01/23/nginx-certbot-ansible/</link>
      <pubDate>Tue, 23 Jan 2018 22:34:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/01/23/nginx-certbot-ansible/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>Today, I would like demonstrate how to use <a href="https://www.ansible.com/">Ansible</a> in order to construct a server hosting multiple HTTPS domains with <a href="https://www.nginx.com/">Nginx</a> and <a href="https://letsencrypt.org/">LetsEncrypt</a>. Are you ready? Let&rsquo;s dive in.</p>
<h2 id="tldr">TL;DR</h2>
<p><img src="/img/ansible.svg" alt="playbook"></p>
<h2 id="what-you-will-need">What you will need</h2>
<p>There is really only one thing you need in order for this to work and that is Ansible. If you would like to run local tests without a remote server, than you will need <a href="https://www.vagrantup.com/">Vagrant</a> and <a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a>. But those two are optional.</p>
<h2 id="what-we-are-going-to-set-up">What We Are Going To Set Up</h2>
<p>The setup is as follows:</p>
<h3 id="nagios">Nagios</h3>
<p>We are going to have a Nagios with a custom check for pending security updates. That will run under nagios.example.com.</p>
<h3 id="hugo-website">Hugo Website</h3>
<p>The main web site is going to be a basic <a href="https://gohugo.io/">Hugo</a> site. Hugo is a static Go based web site generator. This Blog is run by it.</p>
<p>We are also going to setup <a href="https://www.noip.com/">NoIP</a> which will provide the DNS for the sites.</p>
<h3 id="wiki">Wiki</h3>
<p>The wiki is a plain, basic <a href="https://www.dokuwiki.org/dokuwiki#">DokuWiki</a>.</p>
<h3 id="https--nginx">HTTPS + Nginx</h3>
<p>And all the above will be hosted by Nginx with HTTPS provided by letsencrypt. We are going to set all these up with Ansible on top so it will be idempotent.</p>
<h3 id="repository">Repository</h3>
<p>All of the playbooks and the whole thing together can be viewed here: <a href="https://github.com/Skarlso/ansible-server-setup">Github Ansible Server Setup</a>.</p>
<h2 id="ansible">Ansible</h2>
<p>I won&rsquo;t be writing everything down to the basics about Ansible. For that you will need to go and read its documentation. But I will provide ample of clarification for using what I&rsquo;ll be using.</p>
<h3 id="some-basics">Some Basics</h3>
<p>Ansible is a configuration management tool which, unlike chef or puppet, isn&rsquo;t master - slave based. It&rsquo;s using SSH to run a set of instructions on a target machine. The instructions are written in yaml files and look something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="c"># tasks file for ssh</span><span class="w">
</span><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Copy sshd_config</span><span class="w">
</span><span class="w">  </span><span class="nt">copy</span><span class="p">:</span><span class="w"> </span><span class="l">content=&#34;{{sshd_config}}&#34; dest=/etc/ssh/sshd_config</span><span class="w">
</span><span class="w">  </span><span class="nt">notify</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">SSHD Restart</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>This is a basic Task which copies over an <code>sshd_config</code> file overwriting the one already being there. It can execute in priviliged mode if root password is provided or the user has sudo rights.</p>
<p>It works from so called <code>hosts</code> files where the server details are described. This is how a basic host file would look like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">[</span>local<span class="o">]</span>
127.0.0.1

<span class="o">[</span>webserver1<span class="o">]</span>
1.23.4.5
</code></pre></td></tr></table>
</div>
</div><p>Ansible will use these settings to try and access the server. To test if the connection is working, you can send a <code>ping</code> task like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">ansible all -m ping
</code></pre></td></tr></table>
</div>
</div><p>Ansible uses <code>variables</code> for things that change. They are defined under each task&rsquo;s subfolder called <code>vars</code>. Please feel free to change the varialbes there to your liking.</p>
<h3 id="ssh-access">SSH Access</h3>
<p>You can either define SSH information per host or per group or globally. In this example I have it under the groups wars called
<code>webserver1</code> like this (vars.yaml):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="c"># SSH sudo keys and pass</span><span class="w">
</span><span class="w"></span><span class="nt">ansible_become_pass</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{vault_ansible_become_pass}}&#39;</span><span class="w">
</span><span class="w"></span><span class="nt">ansible_ssh_port</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{vault_ansible_ssh_port}}&#39;</span><span class="w">
</span><span class="w"></span><span class="nt">ansible_ssh_user</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{vault_ansible_ssh_user}}&#39;</span><span class="w">
</span><span class="w"></span><span class="nt">ansible_ssh_private_key_file</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{vault_ansible_ssh_private_key_file}}&#39;</span><span class="w">
</span><span class="w"></span><span class="nt">home_dir</span><span class="p">:</span><span class="w"> </span><span class="l">/root</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="further-reading">Further reading</h3>
<p>Further readings are:</p>
<ul>
<li><a href="https://serversforhackers.com/c/an-ansible-tutorial">Servers For Hackers</a></li>
<li><a href="http://docs.ansible.com/ansible/latest/intro_getting_started.html">Ansible docs</a></li>
</ul>
<h3 id="vault">Vault</h3>
<p>The vault is the place where we can keep secure information. This file is called <code>vault</code> and usually lives under either <code>group_vars</code> or <code>host_vars</code>. The preference is up to you.</p>
<p>This file is encrypted using a password you specify. You can have the vault password stored in the following ways:</p>
<ul>
<li>Store it on a secure drive which is encrypted and only mounted when the playbook is executed</li>
<li>Store it on <a href="https://keybase.io">Keybase</a></li>
<li>Store it on an encrypted S3 bucket</li>
<li>Store it in a file next to the playbook which is never commited into source control</li>
</ul>
<p>Either way, in the end, ansible will look for a file called <code>.vault_password</code> for when it&rsquo;s trying to decrypt the file. You can
define a different file in the <code>ansible.cfg</code> file using the <code>vault_password_file</code> option.</p>
<p>You can create a vault like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">ansible-vault create vault
</code></pre></td></tr></table>
</div>
</div><p>If you are following along, you are going to need these variables in the vault:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">vault_ansible_become_pass</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;your_sudo_password&gt;</span><span class="w"> </span><span class="c"># if applicable</span><span class="w">
</span><span class="w"></span><span class="nt">vault_ansible_ssh_user</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;ssh_user&gt;</span><span class="w">
</span><span class="w"></span><span class="nt">vault_ansible_ssh_private_key_file</span><span class="p">:</span><span class="w"> </span><span class="l">/Users/user/.ssh/ida_rsa</span><span class="w">
</span><span class="w"></span><span class="nt">vault_nagios_password</span><span class="p">:</span><span class="w"> </span><span class="l">supersecurenagiosadminpassword</span><span class="w">
</span><span class="w"></span><span class="nt">vault_nagios_username</span><span class="p">:</span><span class="w"> </span><span class="l">nagiosadmin</span><span class="w">
</span><span class="w"></span><span class="nt">vault_noip_username</span><span class="p">:</span><span class="w"> </span><span class="l">youruser@gmail.com</span><span class="w">
</span><span class="w"></span><span class="nt">vault_noip_password</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;SuperSecureNoIPPassword&#34;</span><span class="w">
</span><span class="w"></span><span class="nt">vault_nginx_user</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;localuser&gt;</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>You can always edit the vault later on with:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">ansible-vault edit group_vars/webserver1/vault --vault-password-file<span class="o">=</span>.vault_pass
</code></pre></td></tr></table>
</div>
</div><h3 id="tasks">Tasks</h3>
<p>The following are a collection of tasks which execute in order. The end task, which is letsencrypt, relies on all the hosts being present and configured under Nginx. Otherwise it will throw an error that the host you are trying to configure HTTPS for, isn&rsquo;t defined.</p>
<h4 id="no-ip">No-IP</h4>
<p>I&rsquo;m choosing No-ip as a DNS provider because it&rsquo;s cheap and the sync tool is easy to automate. To automate the CLI of No-IP, I&rsquo;m using a package called <code>expect</code>. This looks something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> <span class="o">{{</span>home_dir<span class="o">}}</span>
wget http://www.no-ip.com/client/linux/noip-duc-linux.tar.gz
mkdir -p noip
tar zxf noip-duc-linux.tar.gz -C noip
<span class="nb">cd</span> noip/*
make

/usr/bin/expect <span class="s">&lt;&lt;END_SCRIPT
</span><span class="s">spawn make install
</span><span class="s">expect &#34;Please enter the login/email*&#34; { send &#34;{{noip_username}}\r&#34; }
</span><span class="s">expect &#34;Please enter the password for user*&#34; { send &#34;{{noip_password}}\r&#34; }
</span><span class="s">expect {
</span><span class="s">    &#34;Do you wish to have them all updated*&#34; {
</span><span class="s">        send &#34;y&#34;
</span><span class="s">        exp_continue
</span><span class="s">    }
</span><span class="s">}
</span><span class="s">expect &#34;Please enter an update interval*&#34; { send &#34;30\r&#34; }
</span><span class="s">expect &#34;Do you wish to run something at successful update*&#34; {send &#34;N&#34; }
</span><span class="s">END_SCRIPT</span>
</code></pre></td></tr></table>
</div>
</div><p>The interesting part is the command running expect. Basically, it&rsquo;s expecting some kind of output which is outlined there. And has canned answers for those which it <code>send</code>s to the waiting command.</p>
<h4 id="to-util-or-not-to-util">To Util or Not To Util</h4>
<p>So, there are small tasks, like installing vim and wget and such which could warrant the existance of a <code>utils</code> task. Utils task would install the packages that are used as convinience and don&rsquo;t really relate to a singe task.</p>
<p>Yet I settled for the following. Each of my tasks has a dependency part. The given tasks takes care of all the packages it needs so they can be executed on their own as well as in unison.</p>
<p>This looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="c"># Install dependencies</span><span class="w">
</span><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Install dependencies</span><span class="w">
</span><span class="w">  </span><span class="nt">apt</span><span class="p">:</span><span class="w"> </span><span class="l">pkg=&#34;{{item}}&#34; state=installed</span><span class="w">
</span><span class="w">  </span><span class="nt">with_items</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="s2">&#34;{{deps}}&#34;</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>For which the <code>deps</code> variable is defined as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="c"># Defined dependencies for letsencrypt task.</span><span class="w">
</span><span class="w"></span><span class="nt">deps</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s1">&#39;git&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;python-dev&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;build-essential&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;libpython-dev&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;libpython2.7&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;augeas-lenses&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;libaugeas0&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;libffi-dev&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;libssl-dev&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;python-virtualenv&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;python3-virtualenv&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;virtualenv&#39;</span><span class="p">]</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>This is much cleaner. And if a task is no longer needed, it&rsquo;s dependencies will no longer be needed either in most of the cases.</p>
<h4 id="nagios-1">Nagios</h4>
<p>I&rsquo;m using Nagios 4 which is a real pain in the butt to install. Luckily, thanks to Ansiblei, I only ever had to figure it out once. Now I have a script for that. Installing Nagios demands several, smaller components to be installed. Thus our task uses import from outside tasks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml">- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Install Nagios</span><span class="w">
</span><span class="w">  </span><span class="nt">block</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">include</span><span class="p">:</span><span class="w"> </span><span class="l">create_users.yml</span><span class="w"> </span><span class="c"># creates the Nagios user</span><span class="w">
</span><span class="w">    </span>- <span class="nt">include</span><span class="p">:</span><span class="w"> </span><span class="l">install_dependencies.yml</span><span class="w"> </span><span class="c"># installs Nagios dependencies</span><span class="w">
</span><span class="w">    </span>- <span class="nt">include</span><span class="p">:</span><span class="w"> </span><span class="l">core_install.yml</span><span class="w"> </span><span class="c"># Installs Nagios Core</span><span class="w">
</span><span class="w">    </span>- <span class="nt">include</span><span class="p">:</span><span class="w"> </span><span class="l">plugin_install.yml</span><span class="w"> </span><span class="c"># Installs Nagios Plugins</span><span class="w">
</span><span class="w">    </span>- <span class="nt">include</span><span class="p">:</span><span class="w"> </span><span class="l">create_htpasswd.yml</span><span class="w"> </span><span class="c"># Creates a password for Nagios&#39; admin user</span><span class="w">
</span><span class="w">    </span>- <span class="nt">include</span><span class="p">:</span><span class="w"> </span><span class="l">setup_custom_check.yml</span><span class="w"> </span><span class="c"># Adds a custom check which is to check how many security updates are pending</span><span class="w">
</span><span class="w">  </span><span class="nt">when</span><span class="p">:</span><span class="w"> </span><span class="l">st.stat.exists == False</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>The <code>when</code> is a check for a variable created by a file check.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml">- <span class="nt">stat</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/usr/local/nagios/bin/nagios</span><span class="w">
</span><span class="w">  </span><span class="nt">register</span><span class="p">:</span><span class="w"> </span><span class="l">st</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>It checks if Nagios is installed or not. If yes, skip.</p>
<p>I&rsquo;m not going to paste in here all the subtasks because that would be huge. You can check those out in the repository under Nagios.</p>
<h4 id="hugo">Hugo</h4>
<p>Hugo is easy to install. Its sole requirement is Go. To install hugo you simply run <code>apt-get install hugo</code>. Setting up the
site for me was just checking out the git repo and than execute hugo from the root folder like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">hugo server --bind<span class="o">=</span>127.0.0.1 --port<span class="o">=</span><span class="m">8080</span> --baseUrl<span class="o">=</span>https://example.com --appendPort<span class="o">=</span><span class="nb">false</span> --logFile hugo.log --verboseLog --verbose -v <span class="p">&amp;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="wiki-1">Wiki</h4>
<p>I used DokuWiki because it&rsquo;s a file based wiki so installation is basically just downloading the archive, extracting it and done. The only thing that&rsquo;s needed for it, is php-fpm to run it and a few php modules which I&rsquo;ll outline in the ansible playbook.</p>
<p>The VHOST file for DokuWiki is provided by them and looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">server <span class="o">{</span>
    server_name   <span class="o">{{</span> wiki_server_name <span class="o">}}</span><span class="p">;</span>
    root <span class="o">{{</span> wiki_root <span class="o">}}</span><span class="p">;</span>
    index index.php index.html index.htm<span class="p">;</span>
    client_max_body_size 2M<span class="p">;</span>
    client_body_buffer_size 128k<span class="p">;</span>
    location / <span class="o">{</span>
        index doku.php<span class="p">;</span>
        try_files <span class="nv">$uri</span> <span class="nv">$uri</span>/ @dokuwiki<span class="p">;</span>
    <span class="o">}</span>
    location @dokuwiki <span class="o">{</span>
        rewrite ^/_media/<span class="o">(</span>.*<span class="o">)</span> /lib/exe/fetch.php?media<span class="o">=</span><span class="nv">$1</span> last<span class="p">;</span>
        rewrite ^/_detail/<span class="o">(</span>.*<span class="o">)</span> /lib/exe/detail.php?media<span class="o">=</span><span class="nv">$1</span> last<span class="p">;</span>
        rewrite ^/_export/<span class="o">([</span>^/<span class="o">]</span>+<span class="o">)</span>/<span class="o">(</span>.*<span class="o">)</span> /doku.php?do<span class="o">=</span>export_<span class="nv">$1</span><span class="p">&amp;</span><span class="nv">id</span><span class="o">=</span><span class="nv">$2</span> last<span class="p">;</span>
        rewrite ^/<span class="o">(</span>.*<span class="o">)</span> /doku.php?id<span class="o">=</span><span class="nv">$1</span> last<span class="p">;</span>
    <span class="o">}</span>
    location ~ <span class="se">\.</span>php$ <span class="o">{</span>
        try_files <span class="nv">$uri</span> <span class="o">=</span>404<span class="p">;</span>
        fastcgi_pass unix:/var/run/php5-fpm.sock<span class="p">;</span>
        fastcgi_index index.php<span class="p">;</span>
        fastcgi_param SCRIPT_FILENAME <span class="nv">$document_root$fastcgi_script_name</span><span class="p">;</span>
        include fastcgi_params<span class="p">;</span>
    <span class="o">}</span>
    location ~ /<span class="se">\.</span>ht <span class="o">{</span>
        deny all<span class="p">;</span>
    <span class="o">}</span>
    location ~ /<span class="o">(</span>data<span class="p">|</span>conf<span class="p">|</span>bin<span class="p">|</span>inc<span class="o">)</span>/ <span class="o">{</span>
        deny all<span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="nginx">Nginx</h4>
<p>Nginx install is through apt as well. Here, however, there is a bit of magic going on with templates. The templates provide the
vhost files for the three hosts we will be running. This looks as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml">- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Install vhosts</span><span class="w">
</span><span class="w">  </span><span class="nt">block</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">template</span><span class="p">:</span><span class="w"> </span><span class="l">src=01_example.com.j2 dest=/etc/nginx/vhosts/01_example.com</span><span class="w">
</span><span class="w">      </span><span class="nt">notify</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">Restart Nginx</span><span class="w">
</span><span class="w">    </span>- <span class="nt">template</span><span class="p">:</span><span class="w"> </span><span class="l">src=02_wiki.example.com.j2 dest=/etc/nginx/vhosts/02_wiki_example.com</span><span class="w">
</span><span class="w">      </span><span class="nt">notify</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">Restart Nginx</span><span class="w">
</span><span class="w">    </span>- <span class="nt">template</span><span class="p">:</span><span class="w"> </span><span class="l">src=03_nagios.example.com.j2 dest=/etc/nginx/vhosts/03_nagios.example.com</span><span class="w">
</span><span class="w">      </span><span class="nt">notify</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">Restart Nginx</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Now, you might be wondering what <code>notify</code> is? It&rsquo;s basically a handler that gets notified to restart nginx. The great part about
it is that it does this only once, even if it was called multiple times. The handler looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml">- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Restart Nginx</span><span class="w">
</span><span class="w">  </span><span class="nt">service</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">    </span><span class="nt">state</span><span class="p">:</span><span class="w"> </span><span class="l">restarted</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>And lives under <code>handlers</code> sub-folder.</p>
<p>With this, Nginx is done and should be providing our sites under plain HTTP.</p>
<h4 id="letsencrypt">LetsEncrypt</h4>
<p>Now comes the part where we enable HTTPS for all these three domains. Which is as follows:</p>
<ul>
<li>example.com</li>
<li>wiki.example.com</li>
<li>nagios.example.com</li>
</ul>
<p>This is actually quiet simple now-a-days with <code>certbot-auto</code>. In fact, it will insert the configurations we need all by itself.
The only thing for us to do is to specify what domains we have and what our challenge would be. Also, we have to pass in some
variables for <code>certbot-auto</code> to run in a non-interactive mode. This looks as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml">- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Generate Certificate for Domains</span><span class="w">
</span><span class="w">  </span><span class="nt">shell</span><span class="p">:</span><span class="w"> </span><span class="l">./certbot-auto --authenticator standalone --installer nginx -d &#39;{{ domain_example }}&#39; -d &#39;{{ domain_wiki }}&#39; -d &#39;{{ domain_nagios }}&#39; --email example@gmail.com --agree-tos -n --no-verify-ssl --pre-hook &#34;sudo systemctl stop nginx&#34; --post-hook &#34;sudo systemctl start nginx&#34; --redirect</span><span class="w">
</span><span class="w">  </span><span class="nt">args</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">chdir</span><span class="p">:</span><span class="w"> </span><span class="l">/opt/letsencrypt</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>And that&rsquo;s that. The interesting and required part here is the <code>pre-hook</code> and <code>post-hook</code>. Without those it wouldn&rsquo;t work because
the ports that certbot is performing the challenge on would be taken already. This stops nginx, performs the challenge and
generates the certs, and starts nginx again. Also note <code>--redirect</code>. This will force HTTPS on the sites and disables plain HTTP.</p>
<p>If all went well our sites should contain information like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">    listen <span class="m">443</span> ssl<span class="p">;</span> <span class="c1"># managed by Certbot</span>
    ssl_certificate /etc/letsencrypt/live/example.com-0001/fullchain.pem<span class="p">;</span> <span class="c1"># managed by Certbot</span>
    ssl_certificate_key /etc/letsencrypt/live/example.com-0001/privkey.pem<span class="p">;</span> <span class="c1"># managed by Certbot</span>
    include /etc/letsencrypt/options-ssl-nginx.conf<span class="p">;</span> <span class="c1"># managed by Certbot</span>
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem<span class="p">;</span> <span class="c1"># managed by Certbot</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="test-run-using-vagrant">Test Run using Vagrant</h3>
<p>If you don&rsquo;t want to run all this on a live server to test out, you can do either of these two things:</p>
<ul>
<li>Use a remote dedicated test server</li>
<li>Use a local virtual machine with Vagrant</li>
</ul>
<p>Here, I&rsquo;m giving you an option for the later.</p>
<p>It&rsquo;s possible for most of the things to be tested on a local Vagrant machine. Most of the time a Vagrant box is enough to test out installing things. A sample Vagrant file looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="c1"># encoding: utf-8</span>
<span class="c1"># -*- mode: ruby -*-</span>
<span class="c1"># vi: set ft=ruby :</span>
<span class="c1"># Box / OS</span>
<span class="no">VAGRANT_BOX</span> <span class="o">=</span> <span class="s1">&#39;ubuntu/xenial64&#39;</span>

<span class="no">VM_NAME</span> <span class="o">=</span> <span class="s1">&#39;ansible-practice&#39;</span>

<span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="c1"># Vagrant box from Hashicorp</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="no">VAGRANT_BOX</span>
  <span class="c1"># Actual machine name</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">hostname</span> <span class="o">=</span> <span class="no">VM_NAME</span>
  <span class="c1"># Set VM name in Virtualbox</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s1">&#39;virtualbox&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
    <span class="n">v</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="no">VM_NAME</span>
    <span class="n">v</span><span class="o">.</span><span class="n">memory</span> <span class="o">=</span> <span class="mi">2048</span>
  <span class="k">end</span>
  <span class="c1"># Ansible provision</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s1">&#39;ansible_local&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">ansible</span><span class="o">|</span>
    <span class="n">ansible</span><span class="o">.</span><span class="n">limit</span> <span class="o">=</span> <span class="s1">&#39;all&#39;</span>
    <span class="n">ansible</span><span class="o">.</span><span class="n">inventory_path</span> <span class="o">=</span> <span class="s1">&#39;hosts&#39;</span>
    <span class="n">ansible</span><span class="o">.</span><span class="n">playbook</span> <span class="o">=</span> <span class="s1">&#39;local.yml&#39;</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></td></tr></table>
</div>
</div><p>This interesting part here is the ansible provision section. It&rsquo;s running a version of Ansible that is called <code>ansible_local</code>. It&rsquo;s local, becuase it will be only on the VirtualBox. Meaning, you don&rsquo;t have to have Ansible installed to test it on a vagrant box. Neat, huh?</p>
<p>To test your playbook, simply run <code>vagrant up</code> and you should see the provisioning happening.</p>
<h2 id="room-for-improvement">Room for improvement</h2>
<p>And that should be all. Note that this setup isn&rsquo;t quiet enterprise ready. I would add the following things:</p>
<h3 id="tests-and-checks">Tests and Checks</h3>
<p>A ton of tests and checks if the commands that we are using are actually successful or not. If they aren&rsquo;t make them report the failure.</p>
<h3 id="multiple-domains">Multiple Domains</h3>
<p>If you happen to have a ton of domain names to set up, this will not be the most effective way. Right now letsencrypt creates a
single certificate file for those three domains with <code>-d</code> and that&rsquo;s not what you want with potentially hundreds of domains.</p>
<p>In that case, have a list to go through with <code>with_items</code>. Note that you&rsquo;ll have to restart nginx on each line, because you don&rsquo;t
want one of them fail and stop the process entirely. Rather have a few fail but the rest still work.</p>
<h1 id="conclusion">Conclusion</h1>
<p>That&rsquo;s it folks. Have fun setting up servers all over the place and enjoy the power of nginx and letsencrypt and not having to
worry about adding another server into the bunch.</p>
<p>Thank you for reading,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Huge Furnace Update</title>
      <link>https://skarlso.github.io/2018/01/13/furnace-massive-update/</link>
      <pubDate>Sat, 13 Jan 2018 22:34:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/01/13/furnace-massive-update/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>In the past couple of months I&rsquo;ve been slowly updating <a href="https://github.com/Skarlso/go-furnace">Furnace</a>.</p>
<p>There are three major changes that happened. Let&rsquo;s take a look at them, shall we?</p>
<h2 id="google-cloud-platform">Google Cloud Platform</h2>
<p>Furnace now supports <a href="https://cloud.google.com">Google Cloud Platform (GCP)</a>. It provides the same API to handle GCP resource as with AWS. Namely, <code>create</code>, <code>delete</code>, <code>status</code>, <code>update</code>. I opted to leave out <code>push</code> because Google mostly works with git based repositories, meaning a push is literary just a push, than Google handles distributing the new code by itself.</p>
<p>All the rest of the commands should work the same way as AWS.</p>
<h3 id="deployment-manager">Deployment Manager</h3>
<p>GCP has a similar service to AWS CloudFormations called <a href="https://cloud.google.com/deployment-manager/docs/">Deployment Manager</a>. The documentation is fairly detailed with a Bookshelf example app to deploy. Code and Templates can be found in their Git repositroy here: <a href="https://github.com/GoogleCloudPlatform/deploymentmanager-samples">Deployment Manager Git Repository</a>.</p>
<h3 id="setting-up-gcp">Setting up GCP</h3>
<p>As the README of Furnace outlines&hellip;</p>
<blockquote>
<p>Please carefully read and follow the instruction outlined in this document: <a href="https://cloud.google.com/sdk/#Quick_Start">Google Cloud Getting Started</a>. It will describe how to download and install the SDK and initialize cloud to a Project ID.</p>
</blockquote>
<blockquote>
<p>Take special attention to these documents:</p>
</blockquote>
<blockquote>
<p><a href="https://cloud.google.com/sdk/docs/initializing">Initializing GCloud Tools</a>
<a href="https://cloud.google.com/sdk/docs/authorizing">Authorizing Tools</a></p>
</blockquote>
<blockquote>
<p>Furnace uses a Google Key-File to authenticate with your Google Cloud Account and Project.
In the future, Furnace assumes these things are properly set up and in working order.</p>
</blockquote>
<p>To initialize the client, it uses the following code:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">  <span class="nx">ctx</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">()</span>
  <span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">google</span><span class="p">.</span><span class="nf">DefaultClient</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">dm</span><span class="p">.</span><span class="nx">NdevCloudmanScope</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>The DefaultClient in turn, does the following:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// FindDefaultCredentials searches for &#34;Application Default Credentials&#34;.
</span><span class="c1">//
</span><span class="c1">// It looks for credentials in the following places,
</span><span class="c1">// preferring the first location found:
</span><span class="c1">//
</span><span class="c1">//   1. A JSON file whose path is specified by the
</span><span class="c1">//      GOOGLE_APPLICATION_CREDENTIALS environment variable.
</span><span class="c1">//   2. A JSON file in a location known to the gcloud command-line tool.
</span><span class="c1">//      On Windows, this is %APPDATA%/gcloud/application_default_credentials.json.
</span><span class="c1">//      On other systems, $HOME/.config/gcloud/application_default_credentials.json.
</span><span class="c1">//   3. On Google App Engine it uses the appengine.AccessToken function.
</span><span class="c1">//   4. On Google Compute Engine and Google App Engine Managed VMs, it fetches
</span><span class="c1">//      credentials from the metadata server.
</span><span class="c1">//      (In this final case any provided scopes are ignored.)
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">FindDefaultCredentials</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">scope</span> <span class="o">...</span><span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">DefaultCredentials</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</code></pre></td></tr></table>
</div>
</div><p>Take note on the order. This is how Google will authenticate your requests.</p>
<h3 id="running-gcp">Running GCP</h3>
<p>Running gcp is largely similar to AWS. First, you create the necessary templates to your infrastructure. This is done via the Deployment Manager and it&rsquo;s templating engine. The GCP templates are Python <a href="http://jinja.pocoo.org/">JINJA</a> files. Examples are provided in the <code>template</code> directory. It&rsquo;s a bit more complicated than the CloudFormation templates in that it uses outside templates plus schema files to configure dynamic details.</p>
<p>It&rsquo;s all explained in these documents: <a href="https://cloud.google.com/deployment-manager/docs/step-by-step-guide/create-a-template">Creating a Template Step-by-step</a> and <a href="https://cloud.google.com/deployment-manager/docs/configuration/templates/create-basic-template">Creating a Basic Template</a>.</p>
<p>It&rsquo;s not trivial however. And using the API can also be confusing. The Google Code is just a generated Go code file using gRPC. But studying it may provide valuable insigth into how the API is structured. I&rsquo;m also providing some basic samples that I gathered together and the readme does a bit more explaining on how to use them.</p>
<h3 id="your-first-stack">Your First Stack</h3>
<p>Once you have everything set-up you&rsquo;ll need a configuration file for Furnace. The usage is outlined more here <a href="#YAML-Configuration">YAML Configuration</a>. The configuration file for GCP looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">main</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">project_name</span><span class="p">:</span><span class="w"> </span><span class="l">testplatform-1234</span><span class="w">
</span><span class="w">  </span><span class="nt">spinner</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w"></span><span class="nt">gcp</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">template_name</span><span class="p">:</span><span class="w"> </span><span class="l">google_template.yaml</span><span class="w">
</span><span class="w">  </span><span class="nt">stack_name</span><span class="p">:</span><span class="w"> </span><span class="l">test-stack</span><span class="w">
</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Where <code>project_name</code> is the name you generate for your first billable Google Cloud Platform project. Template lives next to this yaml file and stack name must be DNS complient.</p>
<p>Once you have a project and a template setup, it&rsquo;s as simple as calling <code>./furnace-gcp create</code> or <code>./furnace-gcp create mycustomstack</code>.</p>
<h3 id="deleting">Deleting</h3>
<p>Deleting happens with <code>./furnace-gcp delete</code> or <code>./furnace-gcp delete mycustomstack</code>. Luckily, as with AWS, this means that every resource created with the DeploymentManager will be deleted leaving no need for search and cleanup.</p>
<h3 id="project-name-vs-project-id">Project Name vs. Project ID</h3>
<p>Unlike with AWS Google requires your stack name and project id to be DNS complient. This is most likely because all API calls and such contain that information.</p>
<h2 id="separate-binaries">Separate Binaries</h2>
<p>In order to mitigate some of Furnace&rsquo;s size, I&rsquo;m providing separate binaries for each service it supports.</p>
<p>The AWS binaries can be found in <code>aws</code> folder, and respectively, the Google Cloud Platform is located in <code>gcp</code>. Both are build-able by running <code>make</code>.</p>
<p>If you would like to run both with a single command, a top level make file is provided for your convinience. Just run <code>make</code> from the root. That will build all binaries. Later on, Digital Oceans will join the ranks.</p>
<h2 id="yaml-configuration">YAML Configuration</h2>
<p>Last but not least, Furnace now employs YAML files for configuration. However, it isn&rsquo;t JUST using YAML files. It also employs a smart configuration pattern which works as follows.</p>
<p>Since Furnace is a distributed binary file which could be running from any given location at any time. Because of that, at first I opted for a global configuration directory.</p>
<p>Now, however, furnace uses a furnace configuration file named with the following pattern: <code>.stackalias.furnace</code>. Where stackname, or stack is the name of a custom stack you would like to create for a project. The content of this file is a single entry, which is the location, relative to this file, of the YAML configuration files for the given stack. For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">stacks/mydatabasestack.yaml
</code></pre></td></tr></table>
</div>
</div><p>This means, that in the directory called <code>stacks</code> there will a yaml configuration file for your database stack. The AWS config file looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-YAML" data-lang="YAML"><span class="nt">main</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">stackname</span><span class="p">:</span><span class="w"> </span><span class="l">FurnaceStack</span><span class="w">
</span><span class="w">  </span><span class="nt">spinner</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w"></span><span class="nt">aws</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">code_deploy_role</span><span class="p">:</span><span class="w"> </span><span class="l">CodeDeployServiceRole</span><span class="w">
</span><span class="w">  </span><span class="nt">region</span><span class="p">:</span><span class="w"> </span><span class="l">us-east-1</span><span class="w">
</span><span class="w">  </span><span class="nt">enable_plugin_system</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="w">  </span><span class="nt">template_name</span><span class="p">:</span><span class="w"> </span><span class="l">cloud_formation.template</span><span class="w">
</span><span class="w">  </span><span class="nt">app_name</span><span class="p">:</span><span class="w"> </span><span class="l">furnace_app</span><span class="w">
</span><span class="w">  </span><span class="nt">code_deploy</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="c"># Only needed in case S3 is used for code deployment</span><span class="w">
</span><span class="w">    </span><span class="nt">code_deploy_s3_bucket</span><span class="p">:</span><span class="w"> </span><span class="l">furnace_code_bucket</span><span class="w">
</span><span class="w">    </span><span class="c"># The name of the zip file in case it&#39;s on a bucket</span><span class="w">
</span><span class="w">    </span><span class="nt">code_deploy_s3_key</span><span class="p">:</span><span class="w"> </span><span class="l">furnace_deploy_app</span><span class="w">
</span><span class="w">    </span><span class="c"># In case a Git Repository is used for the application, define these two settings</span><span class="w">
</span><span class="w">    </span><span class="nt">git_account</span><span class="p">:</span><span class="w"> </span><span class="l">Skarlso/furnace-codedeploy-app</span><span class="w">
</span><span class="w">    </span><span class="nt">git_revision</span><span class="p">:</span><span class="w"> </span><span class="l">b89451234...</span><span class="w">
</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>The important part is the <code>template_name</code>. The template has to be next to this yaml file. To use this file, you simply call any of the AWS or GCP commands with an extra, optional parameter like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">./furnace-aws create mydatabase
</code></pre></td></tr></table>
</div>
</div><p>Note that mydatabase will translate to <code>.mydatabase.furnace</code>.</p>
<p>The intelligent part is, that this file could be placed anywhere in the project folder structure; because furnace, when looking for a config file, traverses backwards from the current execution directory up until <code>/</code>. Where root is not included in the search.</p>
<p>Consider the following directory tree:</p>
<p>├── docs
│   ├── <code>furnace-aws status mydatabase</code>
├── stacks
│   ├── mystack.template
│   └── mystack.yaml
└── .mydatabase.furnace</p>
<p>You are currently in your <code>docs</code> directory and would like to ask for the status of your database. You don&rsquo;t have to move to the location of the setting file, just simply run the command from where you are. This only works if you are above the location of the file. If you would be below, furnace would say it can&rsquo;t find the file. Because it only traverses upwards.</p>
<p><code>.mydatabase.furnace</code> here contains only a single entry <code>stacks/mystack.yaml</code>. And that&rsquo;s it. This way, you could have multiple furnace files, for example a <code>.database.furnace</code>, <code>.front-end.furnace</code> and a <code>.backend.furnace</code>. All three would work in unison, and if want needs updating, simply run <code>./furnace-aws update backend</code>. And done!</p>
<h1 id="closing-words">Closing words</h1>
<p>As always, contributions are welcomed in the form of issues or pull requests. Questions anything, I tend to answer as soon as I can.</p>
<p>Always run the tests before submitting.</p>
<p>Thank you for reading.
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Commit-Build-Deploy With AWS CodeBuild and Lambda</title>
      <link>https://skarlso.github.io/2017/12/04/commit-build-deploy/</link>
      <pubDate>Mon, 04 Dec 2017 22:34:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/12/04/commit-build-deploy/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi All.</p>
<p>Today I would like to write about an AWS finger practice.</p>
<p>Previously, I wrote about how I build and deploy my blog with <a href="www.wercker.com">Wercker</a>. Since, I&rsquo;m a cloud engineer and I dislike Oracle and it&rsquo;s ever expending tenctacles into the abyss, I wanted to switch to use something else.</p>
<p>My build and deploy cycle is simple.</p>
<p>Commit to Blogsource Repo -&gt; Wercker WebHook -&gt; Builds my blog using Hugo -&gt; Pushed to a Different Repository which my Github Blog.</p>
<p>That&rsquo;s all.</p>
<p>It&rsquo;s quiet possible to reproduce this on AWS without infering costs. Unless you publish like&hellip; a couple 100 posts / week.</p>
<p>I&rsquo;m going to use the following services: <a href="https://aws.amazon.com/cloudformation/">CloudFormation</a>, <a href="https://aws.amazon.com/lambda/details/">AWS Lambda</a>, <a href="https://aws.amazon.com/codebuild/">CodeBuild</a>, <a href="https://aws.amazon.com/s3/">S3</a>.</p>
<p>To deploy the below describe architecture in your account in us-east-1 region simply click this button:
<a href="https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?stackName=blogbuilder&amp;templateURL=https://s3.amazonaws.com/blog-builder-template-bucket/template.yaml"><img src="/img/cloudformation-launch-stack.png" alt="Launch Stack"></a></p>
<p>BEFORE doing that though you need the following created:</p>
<p>Have a bucket for your lambda function. The lambda function can be found here:</p>
<p><a href="https://github.com/Skarlso/aws-lambda-code-pusher">Lambda Repository</a>.</p>
<p>Zip up the lambda folder contents by doing this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> lambda
zip -r gitpusher.zip *
aws s3 cp gitpusher.zip s3://your-lambda-bucket
</code></pre></td></tr></table>
</div>
</div><p>That&rsquo;s it.</p>
<p>To read a description of the stack, please continue.</p>
<h1 id="tldr">TL;DR;</h1>
<p>The architecture I&rsquo;m about to lay out is simple in its use and design. I tried not to complicate things, because I think the simpler something is, the less prone to failure it will be.</p>
<p>In its most basic form the flow is as follows:</p>
<p><img src="/img/blog_builder_flow.png" alt="Flow">.</p>
<p>You push something into a repository you provide. CodeBuild has a webhook to this repository so on each commit it starts to build the blog. The build will use a so called <code>buildspec.yaml</code> file which describes how your blog should be built. Mine looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">0.2</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">phases</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">install</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">commands</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">echo Installing required packages and Hugo</span><span class="w">
</span><span class="w">      </span>- <span class="l">apt-get update</span><span class="w">
</span><span class="w">      </span>- <span class="l">apt-get install -y git golang wget</span><span class="w">
</span><span class="w">      </span>- <span class="l">wget -q https://github.com/gohugoio/hugo/releases/download/v0.31/hugo_0.31_Linux-64bit.deb -O /tmp/hugo.dep</span><span class="w">
</span><span class="w">      </span>- <span class="l">dpkg -i /tmp/hugo.dep</span><span class="w">
</span><span class="w">  </span><span class="nt">pre_build</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">commands</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">echo Downloading source code</span><span class="w">
</span><span class="w">      </span>- <span class="l">git clone https://github.com/Skarlso/blogsource.git /opt/app</span><span class="w">
</span><span class="w">  </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">commands</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">echo Build started on `date`</span><span class="w">
</span><span class="w">      </span>- <span class="l">cd /opt/app &amp;&amp; hugo --theme purehugo</span><span class="w">
</span><span class="w">  </span><span class="nt">post_build</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">commands</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">echo Build completed on `date`</span><span class="w">
</span><span class="w"></span><span class="nt">artifacts</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">files</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="l">/opt/app/public/**/*</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>When it&rsquo;s finished, CodeBuild will upload everything in the public folder as a zip to a bucket. The bucket has a lambda attached which triggers on putObject event with the extension <code>.zip</code>. It downloads the archive, extracts it and pushes it to another repository, which is the repository for the blog.</p>
<p>And done! That&rsquo;s it. For an architecture overview, please read on.</p>
<h1 id="architecture">Architecture</h1>
<p>Now, we are going to use CloudFormation stack to deploy these resources. Because we aren&rsquo;t animals to create them by hand, yes?</p>
<p>An overview of my current architecture is best shown by this image:</p>
<p><img src="/img/blog_builder_cf_template.png" alt="AWS Stack">.</p>
<p>Let&rsquo;s go over these components one - by - one.</p>
<h2 id="lambda-role">Lambda Role</h2>
<p>This is the <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">Role</a> which allows the Lambda to access things in your account. It needs the following service access: s3, logs, lambda; and the following permissions: logs:Create*, logs:PutLogEvents, s3:GetObject, s3:ListBucket.</p>
<h2 id="code-build-role">Code Build Role</h2>
<p>This is the role which allows CodeBuild to have access to services it needs. These services are the following: s3, logs, ssm, codebuild. CodeBuild also needs the following actions allowed: logs:Create*, logs:PutLogEvents, s3:GetObject, s3:PutObject, ssm:GetParameters.</p>
<h2 id="build-bucket">Build Bucket</h2>
<p>This is the bucket in which CodeBuild will push the generated build artifact.</p>
<h2 id="blog-pusher-function">Blog Pusher Function</h2>
<p>This is the heart of this project. It contains the logic to download the zipped artifact, extract it, create a hollow repository from the extracted archive and push the changes to the repository. And just the changes.</p>
<p>This is achieve by a short Python 3.6 script which can be found in the linked repository.</p>
<h2 id="parameters">Parameters</h2>
<p>The stack requires you to provide a couple of parameters which are described in the template. Like, bucket name, github repository, git token and such. Please refer to the template for a full description of each.</p>
<h2 id="charges">Charges</h2>
<p>I recently push a couple of builds to test this configuration and I inferred 0.2 USD in charges. But that was like 10-15 builds a day.</p>
<h1 id="deploying">Deploying</h1>
<p>In order to deploy this you can use <a href="https://github.com/Skarlso/go-furnace">Furnace</a> to easily manage the template and it&rsquo;s parameters. Once you copy the template to the target directory, simply run <code>furnace aws create</code> and provide the necessary parameters.</p>
<h1 id="conclusion">Conclusion</h1>
<p>And that is all. A nice little stack which does the same as Wercker without costs but the leisure of simply pushing up some change to a repository of your choosing.</p>
<p>I hope you enjoyed this little write up as much as I enjoyed creating it.</p>
<p>As always,
Thanks for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Furnace Ikea Manual</title>
      <link>https://skarlso.github.io/2017/11/06/furnace-ikea-manual/</link>
      <pubDate>Mon, 06 Nov 2017 20:34:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/11/06/furnace-ikea-manual/</guid>
      <description><![CDATA[<p>Hi there folks.</p>
<p>Just a quick post, of how I went on and created an IKEA manual about <a href="https://github.com/Skarlso/go-furnace">Furnace</a>.</p>
<p>Page 1: <img src="/img/ikea-furnace-1.png" alt="Page 1">.
Page 2: <img src="/img/ikea-furnace-2.png" alt="Page 2">.</p>
<p>I drew these using <a href="https://krita.org/en/">Krita</a>. I mostly used a mouse but I also used a Wacom Bamboo drawing tabled, for sketches and such.</p>
<p>Thanks,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Furnace Binaries</title>
      <link>https://skarlso.github.io/2017/09/03/furnace-binaries/</link>
      <pubDate>Sun, 03 Sep 2017 10:34:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/09/03/furnace-binaries/</guid>
      <description><![CDATA[<p>Hey folks.</p>
<p>Quick note. Furnace now comes pre-compiled easy to access binaries which you can download and use out of the box.</p>
<p>No need to install anything, or compile the source. Just download, unzip and use.</p>
<p>Here is the website: <a href="https://skarlso.github.io/furnace-web">Furnace Website</a>.</p>
<p>Enjoy,
Cheers,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Notetaking</title>
      <link>https://skarlso.github.io/2017/05/31/notetaking/</link>
      <pubDate>Wed, 31 May 2017 06:23:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/05/31/notetaking/</guid>
      <description><![CDATA[<p><img src="/img/page1.jpeg" alt="Page1"></p>
<p><img src="/img/page2.jpeg" alt="Page2"></p>
]]></description>
    </item>
    
    <item>
      <title>Replacing Eval with Object.send and a self written Parser</title>
      <link>https://skarlso.github.io/2017/05/28/replace-eval-with-object-send-and-a-parser/</link>
      <pubDate>Sun, 28 May 2017 19:23:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/05/28/replace-eval-with-object-send-and-a-parser/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>A while ago, I was added as a curator for a Gem called <a href="https://github.com/joshbuddy/jsonpath">JsonPath</a>. It&rsquo;s a small but very useful and brilliant gem. It had a couple of problems which I fixed, but the hardest to eliminate proved to be a series of evals throughout the code.</p>
<p>You could opt in using <code>eval</code> with a constructor parameter, but generally, it was considered to be unsafe. Thus, normally when a project was using it, like <a href="https://github.com/huginn/huginn">Huginn</a> they had to opt out by default, thus missing out on sweet parsing like this: <code>$..book[?(@['price'] &gt; 20)]</code>.</p>
<h2 id="eval">Eval</h2>
<p>In order to remove eval, first I had to understand what it is actually doing. I had to take it apart.</p>
<p><img src="/img/takeevalapart.jpg" alt="apart"></p>
<p>After much digging and understanding the code, I found, all it does is perform the given operations on the current node. And if the operation is true, it will select that node, otherwise, return false, and ignore that node.</p>
<p>For example <code>$..book[?(@['price'] &gt; 20)]</code> could be translated to:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">return</span> <span class="vi">@_current_node</span><span class="o">[</span><span class="s1">&#39;price&#39;</span><span class="o">]</span> <span class="o">&gt;</span> <span class="mi">20</span>
</code></pre></td></tr></table>
</div>
</div><p>Checking first if <code>'price'</code> is even a key in <code>@_current_node</code>. Once I&rsquo;ve understood this part, I set on trying to fix eval.</p>
<h3 id="safe--4">SAFE = 4</h3>
<p>In ruby, you could extract the part where you Eval and put it into its own proc and set <code>SAFE = 4</code> which will disable some things like system calls.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">proc</span> <span class="k">do</span>
  <span class="no">SAFE</span> <span class="o">=</span> <span class="mi">4</span>
  <span class="nb">eval</span><span class="p">(</span><span class="n">some_expression</span><span class="p">)</span>
<span class="k">end</span><span class="o">.</span><span class="n">call</span>
</code></pre></td></tr></table>
</div>
</div><p>SAFE levels:</p>
<p>$SAFE	Description
0	No checking of the use of externally supplied (tainted) data is performed. This is Ruby&rsquo;s default mode.</p>
<blockquote>
<p>= 1	Ruby disallows the use of tainted data by potentially dangerous operations.
= 2	Ruby prohibits the loading of program files from globally writable locations.
= 3	All newly created objects are considered tainted.
= 4	Ruby effectively partitions the running program in two. None - tainted objects may not be modified. Typically, this will be used to create a sandbox: the program sets up an environment using a lower $SAFE level, then resets $SAFE to 4 to prevent subsequent changes to that environment.</p>
</blockquote>
<p>This has the disadvantage that anything below 4 is just, meh. But nothing above 1 will actually work with JsonPath so&hellip; scratch that.</p>
<h3 id="sandboxing">Sandboxing</h3>
<p>We could technically try and sandbox eval into it&rsquo;s own process with a PID and whitelist methods which are allowed to be called.</p>
<p>Not bad, and there are a few gems out there which are trying to do that like <a href="https://github.com/ukutaht/safe_ruby">SafeRuby</a>. But all of these project have been abandoned years ago for a good reason.</p>
<h3 id="objectsend">Object.send</h3>
<p><img src="/img/nobodylikesyou.jpg" alt="nobodylikesyou"></p>
<p><code>Object.send</code> is the best way to get some flexibility while still being safe. You basically just call methods on objects by describing said method on an object and giving parameters to it, like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="mi">1</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:+</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="mi">3</span>
</code></pre></td></tr></table>
</div>
</div><p>This is a very powerful tool in our toolbox which we will exploit immensely.</p>
<p>So let&rsquo;s get to it.</p>
<h1 id="writing-a-parser">Writing a parser</h1>
<p>Writing a parser in Ruby is a very fluid experience. It has nice tools which support that, and the one I used is <code>StringScanner</code>. It has the ability to track where you are currently at in a string and move a pointer along with regex matches. In fact, JsonPath already employs this method when parsing a json expression. So reusing that logic was in fact&hellip; elementary.</p>
<h2 id="the-expression">The expression</h2>
<p>How do we get from this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$..book<span class="o">[</span>?<span class="o">(</span>@<span class="o">[</span><span class="s1">&#39;price&#39;</span><span class="o">]</span> &lt; 20<span class="o">)]</span>
</code></pre></td></tr></table>
</div>
</div><p>To this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="vi">@_current_node</span><span class="o">[</span><span class="s1">&#39;price&#39;</span><span class="o">]</span> <span class="o">&lt;</span> <span class="mi">20</span>
</code></pre></td></tr></table>
</div>
</div><p>Well. By simple elimination. There are a couple of problems along the way of course. Because this wouldn&rsquo;t be a parser if it couldn&rsquo;t handle ALL the other cases&hellip;</p>
<h3 id="removing-clutter">Removing Clutter</h3>
<p>Some of this we don&rsquo;t need. Like, <code>$..book</code> part.</p>
<p><img src="/img/dontneed1.jpg" alt="dontneed1"></p>
<p>The other things we don&rsquo;t need are all the <code>'[]?()</code></p>
<p><img src="/img/dontneed2.jpg" alt="dontneed2"></p>
<p>Once this is done, we can move to isolating the important bits.</p>
<p><img src="/img/takingaim.jpg" alt="takingaim"></p>
<h3 id="breakdown">BreakDown</h3>
<h4 id="elements">Elements</h4>
<p>How does an expression actually look like?</p>
<p>Let&rsquo;s break it down.</p>
<p><img src="/img/confused.jpg" alt="confused"></p>
<p>So, this is a handful. Operations can be <code>&lt;=,&gt;=,&lt;,&gt;,==,!=</code> and operands can be either numbers, or words, and element accessor can be nested since something like this is perfectly valid: <code>$..book[?(@.written.year == 1997)]</code>.</p>
<p><img src="/img/feedline.jpg" alt="feedline"></p>
<p>To avoid being overwhelmed, ruby has our back with a method called <code>dig</code>.</p>
<p><img src="/img/dig.jpg" alt="dig"></p>
<p>This, basically lets us pass in some parameters into a dig function on a hash or an array with variadic parameters, which will go on and access those elements in order how they were supplied. Until it either returns a <code>nil</code> or an end result.</p>
<p>For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="mi">2</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">{</span><span class="ss">a</span><span class="p">:</span> <span class="p">{</span><span class="ss">b</span><span class="p">:</span> <span class="s1">&#39;c&#39;</span><span class="p">}}</span>
 <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:a</span><span class="o">=&gt;</span><span class="p">{</span><span class="ss">:b</span><span class="o">=&gt;</span><span class="s2">&#34;c&#34;</span><span class="p">}}</span>
<span class="mi">2</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">002</span> <span class="o">&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">dig</span><span class="p">(</span><span class="ss">:a</span><span class="p">,</span> <span class="ss">:b</span><span class="p">)</span>
 <span class="o">=&gt;</span> <span class="s2">&#34;c&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>Easy. However&hellip; Dig was only added after ruby 2.3 thus, I had to write my own dig for now, until I stop supporting anything below 2.3.</p>
<p>At first, I wanted to add it to the hash class, but it proved to be a futile attempt if I wanted to do it nicely, thus the parser got it as a private method.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby">    <span class="k">def</span> <span class="nf">dig</span><span class="p">(</span><span class="n">keys</span><span class="p">,</span> <span class="nb">hash</span><span class="p">)</span>
      <span class="k">return</span> <span class="nb">hash</span> <span class="k">unless</span> <span class="nb">hash</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">Hash</span>
      <span class="k">return</span> <span class="kp">nil</span> <span class="k">unless</span> <span class="nb">hash</span><span class="o">.</span><span class="n">key?</span><span class="p">(</span><span class="n">keys</span><span class="o">.</span><span class="n">first</span><span class="p">)</span>
      <span class="k">return</span> <span class="nb">hash</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">keys</span><span class="o">.</span><span class="n">first</span><span class="p">)</span> <span class="k">if</span> <span class="n">keys</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span>
      <span class="n">prev</span> <span class="o">=</span> <span class="n">keys</span><span class="o">.</span><span class="n">shift</span>
      <span class="n">dig</span><span class="p">(</span><span class="n">keys</span><span class="p">,</span> <span class="nb">hash</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">prev</span><span class="p">))</span>
    <span class="k">end</span>
</code></pre></td></tr></table>
</div>
</div><p>And the corresponding regex behind getting a multitude of elements is as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="o">...</span>
<span class="k">if</span> <span class="n">t</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/\[&#39;\w+&#39;\]+/</span><span class="p">)</span>
<span class="o">...</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="operator">Operator</h4>
<p>Selecting the operator is another interesting part as it can be a single one or multiple and all sorts. Until I realized that no&hellip; it can actually be only a couple.</p>
<p><img src="/img/whatone.jpg" alt="whatone"></p>
<p><img src="/img/whattwo.jpg" alt="whattwo"></p>
<p>Also, after a bit of fiddling and doing and doing a silly case statement first:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">case</span> <span class="n">op</span>
<span class="k">when</span> <span class="s1">&#39;&gt;&#39;</span>
  <span class="n">dig</span><span class="p">(</span><span class="vi">@_current_node</span><span class="p">,</span> <span class="o">*</span><span class="n">elements</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">operand</span>
<span class="k">when</span> <span class="s1">&#39;&lt;&#39;</span>
  <span class="n">dig</span><span class="p">(</span><span class="vi">@_current_node</span><span class="p">,</span> <span class="o">*</span><span class="n">elements</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">operand</span>
<span class="o">...</span>
<span class="k">end</span>
</code></pre></td></tr></table>
</div>
</div><p>&hellip;I promptly saw that this is not how it should be done.</p>
<p>And here comes Object.send.</p>
<p><img src="/img/send.jpg" alt="send"></p>
<p>This gave me the opportunity to write this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">dig</span><span class="p">(</span><span class="n">elements</span><span class="p">,</span> <span class="vi">@_current_node</span><span class="p">)</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">operator</span><span class="p">,</span> <span class="n">operand</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>Much better. Now I could send all the things in the way of a node.</p>
<p><img src="/img/sendtwo.jpg" alt="send"></p>
<p>Parsing an op be like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">elsif</span> <span class="n">t</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/\s+[&lt;&gt;=][&lt;&gt;=]?\s+?/</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="operand">Operand</h4>
<p>Now comes the final piece. The value which we are comparing. This could either be a simple integer, a floating number, or a word. Hah. So coming up with a regex which fits this tightly took a little fiddling, but eventually I ended up with this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">elsif</span> <span class="n">t</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/(\s+)?&#39;?(\w+)?[.,]?(\w+)?&#39;?(\s+)?/</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>Without StackOverflow I would say this is fine ((although I need to remove all those space check, shees)). What are all the question marks? Basically, everything is optional. Because an this expression <code>$..book[?(@.price)]</code> is valid. Which is basically just asserting if a given node has a price element.</p>
<h4 id="logical-operators">Logical Operators</h4>
<p>The last thing that remains is logical operators, which if you are using eval, is pretty straight forward. It takes care of anything that you might add in like <code>&amp;&amp;, ||, |, &amp;, ^</code> etc etc.</p>
<p>Now, that&rsquo;s something I did with a case though. Until I find a nicer solution. Since we can already parse a single expression it&rsquo;s just a question of breaking down a multi structure expression as the following one: <code>$..book[?(@['price'] &gt; 20 &amp;&amp; @.written.year == 1998)]</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">exps</span> <span class="o">=</span> <span class="n">exp</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/(&amp;&amp;)|(\|\|)/</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>This splits up the string by either <code>&amp;&amp;</code> or <code>||</code> and the usage of groups () also includes the operators. Than I evaluate the expressions and save the whole thing in an array like <code>[true, '&amp;&amp;', false]</code>. You know what could immediately resolve this? Yep&hellip;</p>
<p><img src="/img/saynotoeval.jpg" alt="saynotoeval">.</p>
<p>I&rsquo;d rather just parse it although technically an eval at this stage wouldn&rsquo;t be that big of a problem&hellip;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="n">exp</span><span class="p">)</span>
  <span class="n">exps</span> <span class="o">=</span> <span class="n">exp</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/(&amp;&amp;)|(\|\|)/</span><span class="p">)</span>
  <span class="n">ret</span> <span class="o">=</span> <span class="n">parse_exp</span><span class="p">(</span><span class="n">exps</span><span class="o">.</span><span class="n">shift</span><span class="p">)</span>
  <span class="n">exps</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
    <span class="k">case</span> <span class="n">item</span>
    <span class="k">when</span> <span class="s1">&#39;&amp;&amp;&#39;</span>
      <span class="n">ret</span> <span class="o">&amp;&amp;=</span> <span class="n">parse_exp</span><span class="p">(</span><span class="n">exps</span><span class="o">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span><span class="p">)</span>
    <span class="k">when</span> <span class="s1">&#39;||&#39;</span>
      <span class="n">ret</span> <span class="o">||=</span> <span class="n">parse_exp</span><span class="p">(</span><span class="n">exps</span><span class="o">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="n">ret</span>
<span class="k">end</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="closing-words">Closing words</h1>
<p>That&rsquo;s it folks. The parser is done. And there is no eval being used. There are some more things here that are interesting. Like, array indexing is allowed in jsonpath which is solved by sending <code>.length</code> to a current node. For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">if</span> <span class="n">scanner</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/\./</span><span class="p">)</span>
  <span class="n">sym</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/\w+/</span><span class="p">)</span>
  <span class="n">op</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/./</span><span class="p">)</span>
  <span class="n">num</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/\d+/</span><span class="p">)</span>
  <span class="k">return</span> <span class="vi">@_current_node</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">sym</span><span class="o">.</span><span class="n">to_sym</span><span class="p">)</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">op</span><span class="o">.</span><span class="n">to_sym</span><span class="p">,</span> <span class="n">num</span><span class="o">.</span><span class="n">to_i</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></td></tr></table>
</div>
</div><p>If an expression begins with a <code>.</code>. So you see that using <code>send</code> will help a lot, and understanding what eval is trying to evaluate and rather writing your own parser, isn&rsquo;t that hard at all using ruby.</p>
<p>I hope you enjoyed reading this little tid-bit as much as I enjoyed writing and drawing it. Leave a comment if your liked the drawings or if you did not and I should never do them again (( I don&rsquo;t really care, this is my blog haha. )). Note to self: I shouldn&rsquo;t draw on the other side of the drawing because of bleed-through.</p>
<p>Thank you!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 4</title>
      <link>https://skarlso.github.io/2017/04/16/building-furnace-part-4/</link>
      <pubDate>Sun, 16 Apr 2017 09:23:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/04/16/building-furnace-part-4/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>Previously on this blog: <a href="https://skarlso.github.io/2017/03/16/building-furnace-part-1/">Part 1</a>. <a href="https://skarlso.github.io/2017/03/19/building-furnace-part-2/">Part 2</a>. <a href="https://skarlso.github.io/2017/03/22/building-furnace-part-3/">Part 3</a>.</p>
<p>In this part we are going to talk about Unit Testing Furnace and how to work some magic with AWS and Go.</p>
<h1 id="mock-stub-fake-dummy-canned-insert-name-here">Mock Stub Fake Dummy Canned <Insert Name Here></h1>
<p>Unit testing in Go usually follows the Dependency Injection model of dealing with Mocks and Stubs.</p>
<p>## DI</p>
<p>Dependency Inject in short is one object supplying the dependencies of another object. In a longer description, it&rsquo;s ideal to be used
for removing the lock on a third party library, like the AWS client. Imaging having code which solely depends on the AWS client. How
would you unit test that code without having to ACTUALLY connect to AWS? You couldn&rsquo;t. Every time you try to test the code it would run
the live code and it would try and connect to AWS and perform the operations it&rsquo;s design to do. The Ruby library with it&rsquo;s metaprogramming
allows you to set the client globally to stub responses, but, alas, this is not the world of Ruby.</p>
<p>Here is where DI comes to the rescue. If you have control over the AWS client on a very high level, and would pass it around as a function
parameter, or create that client in an <code>init()</code> function and have it globally defined; you would be able to implement your own client, and
have your code use that with stubbed responses which your tests need. For example, you would like a CreateApplication call to fail, or you
would like a DescribeStack which returns an aws.Error(&ldquo;StackAlreadyExists&rdquo;).</p>
<p>For this, however, you need the API of the AWS client. Which is provided by AWS.</p>
<h2 id="aws-client-api">AWS Client API</h2>
<p>In order for DI to work, the injected object needs to be of a certain type for us to inject our own. Luckily, AWS provides an Interface for
all of it&rsquo;s clients. Meaning, we can implement our own version for all of the clients, like S3, CloudFormation, CodeDeploy etc.</p>
<p>For each client you want to mock out, an <em>*iface</em> package should be present like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">  <span class="s">&#34;github.com/aws/aws-sdk-go/service/cloudformation/cloudformationiface&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>In this package you find and use the interface like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">fakeCloudFormationClient</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">cloudformationiface</span><span class="p">.</span><span class="nx">CloudFormationAPI</span>
	<span class="nx">err</span> <span class="kt">error</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>And with this, we have our own CloudFormation client. The real code uses the real clients as function parameters, like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Execute defines what this command does.
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Create</span><span class="p">)</span> <span class="nf">Execute</span><span class="p">(</span><span class="nx">opts</span> <span class="o">*</span><span class="nx">commander</span><span class="p">.</span><span class="nx">CommandHelper</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Creating cloud formation session.&#34;</span><span class="p">)</span>
	<span class="nx">sess</span> <span class="o">:=</span> <span class="nx">session</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">aws</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span><span class="nx">Region</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">REGION</span><span class="p">)})</span>
	<span class="nx">cfClient</span> <span class="o">:=</span> <span class="nx">cloudformation</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">sess</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">CFClient</span><span class="p">{</span><span class="nx">cfClient</span><span class="p">}</span>
	<span class="nf">createExecute</span><span class="p">(</span><span class="nx">opts</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">client</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>We can&rsquo;t test Execute itself, as it&rsquo;s using the real client here (or you could have a global from some library, thus allowing you to tests
even <code>Execute</code> here) but there is very little logic in this function for this very reason. All the logic is in small functions for which
the main starting point and our testing opportunity is, <code>createExecute</code>.</p>
<h2 id="stubbing-calls">Stubbing Calls</h2>
<p>Now, that we have our own client, and with the power of Go&rsquo;s interface embedding as seen above with CloudFormationAPI, we have to only stub
the functions which we are actually using, instead of every function of the given interface. This looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">	<span class="nx">cfClient</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">CFClient</span><span class="p">)</span>
	<span class="nx">cfClient</span><span class="p">.</span><span class="nx">Client</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">fakeCloudFormationClient</span><span class="p">{</span><span class="nx">err</span><span class="p">:</span> <span class="kc">nil</span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Where cfClient is a struct like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// CFClient abstraction for cloudFormation client.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">CFClient</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Client</span> <span class="nx">cloudformationiface</span><span class="p">.</span><span class="nx">CloudFormationAPI</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>And a stubbed call can than be written as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="p">(</span><span class="nx">fc</span> <span class="o">*</span><span class="nx">fakeCreateCFClient</span><span class="p">)</span> <span class="nf">WaitUntilStackCreateComplete</span><span class="p">(</span><span class="nx">input</span> <span class="o">*</span><span class="nx">cloudformation</span><span class="p">.</span><span class="nx">DescribeStacksInput</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="k">return</span> <span class="kc">nil</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This can range from a very trivial example, like the one above, to intricate ones as well, like this gem:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="p">(</span><span class="nx">fc</span> <span class="o">*</span><span class="nx">fakePushCFClient</span><span class="p">)</span> <span class="nf">ListStackResources</span><span class="p">(</span><span class="nx">input</span> <span class="o">*</span><span class="nx">cloudformation</span><span class="p">.</span><span class="nx">ListStackResourcesInput</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">cloudformation</span><span class="p">.</span><span class="nx">ListStackResourcesOutput</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="s">&#34;NoASG&#34;</span> <span class="o">==</span> <span class="o">*</span><span class="nx">input</span><span class="p">.</span><span class="nx">StackName</span> <span class="p">{</span>
		<span class="k">return</span> <span class="o">&amp;</span><span class="nx">cloudformation</span><span class="p">.</span><span class="nx">ListStackResourcesOutput</span><span class="p">{</span>
			<span class="nx">StackResourceSummaries</span><span class="p">:</span> <span class="p">[]</span><span class="o">*</span><span class="nx">cloudformation</span><span class="p">.</span><span class="nx">StackResourceSummary</span><span class="p">{</span>
				<span class="p">{</span>
					<span class="nx">ResourceType</span><span class="p">:</span>       <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;NoASG&#34;</span><span class="p">),</span>
					<span class="nx">PhysicalResourceId</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;arn::whatever&#34;</span><span class="p">),</span>
				<span class="p">},</span>
			<span class="p">},</span>
		<span class="p">},</span> <span class="nx">fc</span><span class="p">.</span><span class="nx">err</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">cloudformation</span><span class="p">.</span><span class="nx">ListStackResourcesOutput</span><span class="p">{</span>
		<span class="nx">StackResourceSummaries</span><span class="p">:</span> <span class="p">[]</span><span class="o">*</span><span class="nx">cloudformation</span><span class="p">.</span><span class="nx">StackResourceSummary</span><span class="p">{</span>
			<span class="p">{</span>
				<span class="nx">ResourceType</span><span class="p">:</span>       <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;AWS::AutoScaling::AutoScalingGroup&#34;</span><span class="p">),</span>
				<span class="nx">PhysicalResourceId</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;arn::whatever&#34;</span><span class="p">),</span>
			<span class="p">},</span>
		<span class="p">},</span>
	<span class="p">},</span> <span class="nx">fc</span><span class="p">.</span><span class="nx">err</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This ListStackResources stub lets us test two scenarios based on the stackname. If the test stackname is &lsquo;NoASG&rsquo; it will return a result
which equals to a result containing no AutoScaling Group. Otherwise, it will return the correct ResourceType for an ASG.</p>
<p>It is a common practice to line up several scenario based stubbed responses in order to test the robustness of your code.</p>
<p>Unfortunately, this also means that your tests will be a bit cluttered with stubs and mock structs and whatnots. For that, I&rsquo;m partially
using a package available struct file in which I&rsquo;m defining most of the mock structs at least. And from there on, the tests will only contain
specific stubs for that particular file. This can be further fine grained by having defaults and than only override in case you need something
else.</p>
<h1 id="testing-fatals">Testing fatals</h1>
<p>Now, the other point which is not really AWS related, but still comes to mind when dealing with Furnace, is testing error scenarios.</p>
<p>Because Furnace is a CLI application it uses Fatals to signal if something is wrong and it doesn&rsquo;t want to continue or recover because, frankly
it can&rsquo;t. If AWS throws an error, that&rsquo;s it. You can retry, but in 90% of the cases, it&rsquo;s usually something that you messed up.</p>
<p>So, how do we test for a fatal or an <code>os.Exit</code>? There are a number of points on that if you do a quick search. You may end up on this talk:
<a href="https://talks.golang.org/2014/testing.slide#23">GoTalk 2014 Testing Slide #23</a>. Which does an interesting thing. It calls the test binary in a
separate process and tests the exit code.</p>
<p>Others, and me as well, will say that you have to have your own logger implemented and use a different logger / os.Exit in your test environment.</p>
<p>Others others will tell you to not to have tests around os.Exit and fatal things, rather return an error and only the main should pop a world
ending event. I leave it up to you which you want to use. Either is fine.</p>
<p>In Furnace, I&rsquo;m using a global logger in my error handling util like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// HandleFatal handler fatal errors in Furnace.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">HandleFatal</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="nf">LogFatalf</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>And <code>LogFatalf</code> is an exported variable <code>var LogFatalf = log.Fatalf</code>. Than in a test, I just override this variable with a local anonymous
function:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">TestCreateExecuteEmptyStack</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">failed</span> <span class="o">:=</span> <span class="kc">false</span>
	<span class="nx">utils</span><span class="p">.</span><span class="nx">LogFatalf</span> <span class="p">=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">a</span> <span class="o">...</span><span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
		<span class="nx">failed</span> <span class="p">=</span> <span class="kc">true</span>
	<span class="p">}</span>
	<span class="nx">config</span><span class="p">.</span><span class="nx">WAITFREQUENCY</span> <span class="p">=</span> <span class="mi">0</span>
	<span class="nx">client</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">CFClient</span><span class="p">)</span>
	<span class="nx">stackname</span> <span class="o">:=</span> <span class="s">&#34;EmptyStack&#34;</span>
	<span class="nx">client</span><span class="p">.</span><span class="nx">Client</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">fakeCreateCFClient</span><span class="p">{</span><span class="nx">err</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">stackname</span><span class="p">:</span> <span class="nx">stackname</span><span class="p">}</span>
	<span class="nx">opts</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">commander</span><span class="p">.</span><span class="nx">CommandHelper</span><span class="p">{}</span>
	<span class="nf">createExecute</span><span class="p">(</span><span class="nx">opts</span><span class="p">,</span> <span class="nx">client</span><span class="p">)</span>
	<span class="k">if</span> <span class="p">!</span><span class="nx">failed</span> <span class="p">{</span>
		<span class="nx">t</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="s">&#34;expected outcome to fail during create&#34;</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>It can get even more granular by testing for the error message to make sure that it actually fails at the point we think we are
testing:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">TestCreateStackReturnsWithError</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">failed</span> <span class="o">:=</span> <span class="kc">false</span>
	<span class="nx">expectedMessage</span> <span class="o">:=</span> <span class="s">&#34;failed to create stack&#34;</span>
	<span class="kd">var</span> <span class="nx">message</span> <span class="kt">string</span>
	<span class="nx">utils</span><span class="p">.</span><span class="nx">LogFatalf</span> <span class="p">=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">a</span> <span class="o">...</span><span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
		<span class="nx">failed</span> <span class="p">=</span> <span class="kc">true</span>
		<span class="k">if</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].(</span><span class="kt">error</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
			<span class="nx">message</span> <span class="p">=</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">()</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="nx">config</span><span class="p">.</span><span class="nx">WAITFREQUENCY</span> <span class="p">=</span> <span class="mi">0</span>
	<span class="nx">client</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">CFClient</span><span class="p">)</span>
	<span class="nx">stackname</span> <span class="o">:=</span> <span class="s">&#34;NotEmptyStack&#34;</span>
	<span class="nx">client</span><span class="p">.</span><span class="nx">Client</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">fakeCreateCFClient</span><span class="p">{</span><span class="nx">err</span><span class="p">:</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">expectedMessage</span><span class="p">),</span> <span class="nx">stackname</span><span class="p">:</span> <span class="nx">stackname</span><span class="p">}</span>
	<span class="nx">config</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;{}&#34;</span><span class="p">)</span>
	<span class="nf">create</span><span class="p">(</span><span class="nx">stackname</span><span class="p">,</span> <span class="nx">config</span><span class="p">,</span> <span class="nx">client</span><span class="p">)</span>
	<span class="k">if</span> <span class="p">!</span><span class="nx">failed</span> <span class="p">{</span>
		<span class="nx">t</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="s">&#34;expected outcome to fail&#34;</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">if</span> <span class="nx">message</span> <span class="o">!=</span> <span class="nx">expectedMessage</span> <span class="p">{</span>
		<span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;message did not equal expected message of &#39;%s&#39;, was:%s&#34;</span><span class="p">,</span> <span class="nx">expectedMessage</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="conclusion">Conclusion</h1>
<p>This is it. That&rsquo;s all it took to write Furnace. I hope you enjoyed reading it as much as I enjoyed writing all these thoughts down.</p>
<p>I hope somebody might learn from my journey and also improve upon it.</p>
<p>Any comments are much appreciated and welcomed. Also, PRs and Issues can be submitted on the GitHub page of <a href="https://github.com/Skarlso/go-furnace">Furnace</a>.</p>
<p>Thank you for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 3</title>
      <link>https://skarlso.github.io/2017/03/22/building-furnace-part-3/</link>
      <pubDate>Wed, 22 Mar 2017 12:03:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/03/22/building-furnace-part-3/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>Previously on this blog: <a href="http://skarlso.github.io/2017/03/16/building-furnace-part-1/">Part 1</a>. <a href="https://skarlso.github.io/2017/03/19/building-furnace-part-2/">Part 2</a>. <a href="https://skarlso.github.io/2017/04/16/building-furnace-part-4/">Part 4</a>.</p>
<p>In this part, I&rsquo;m going to talk about the experimental plugin system of Furnace.</p>
<h1 id="go-experimental-plugins">Go Experimental Plugins</h1>
<p>Since Go 1.8 was released, an exciting and new feature was introduced called a Plug-in system. This system works with dynamic
libraries built with a special switch to <code>go build</code>. These libraries, <code>.so</code> or <code>.dylib</code> (later), are than loaded and once that
succeeds, specific functions can be called from them (symbol resolution).</p>
<p>We will see how this works. For package information, visit the plugin packages Go doc page
<a href="https://tip.golang.org/pkg/plugin/">here</a>.</p>
<h1 id="furnace-plugins">Furnace Plugins</h1>
<p>So, what does furnace use plugins for? Furnace uses plugins to execute arbitery code in, currently, four given locations / events.</p>
<p>These are: <code>pre_create, post_create, pre_delete, post_delete</code>. These events are called, as their name suggests, before and after
the creation and deletion of the CloudFormation stack. It allows the user to execute some code without having to rebuild the whole
project. It does that by defining a single entry point for the custom code called <code>RunPlugin</code>. Any number of functions can be
implemented, but the plugin MUST provide this single, exported function. Otherwise it will fail and ignore that plugin.</p>
<h2 id="using-plugins">Using Plugins</h2>
<p>It&rsquo;s really easy to implement, and use these plugins. I&rsquo;m not going into the detail of how to load them, because that is done by
Furnace, but only how to write and use them.</p>
<p>To use a plugin, create a go file called: <code>0001_mailer.go</code>. The <code>0001</code> before it will define WHEN it&rsquo;s executed.
Having multiple plugins is completely okay. Execution of order however, depends on the names of the files.</p>
<p>Now, in 0001_mailer.post_create we would have something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;log&#34;</span>

<span class="c1">// RunPlugin runs the plugin.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">RunPlugin</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;My Awesome Pre Create Plugin.&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Next step is the build this file to be a plugin library. Note: Right now, this only works on Linux!</p>
<p>To build this file run the following:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">go build -buildmode=plugin -o 0001_mailer.pre_create 0001_mailer.go
</code></pre></td></tr></table>
</div>
</div><p>The important part here is the extension of the file specified with <code>-o</code>. It&rsquo;s important because that&rsquo;s how Furnace identifies
what plugins it has to run.</p>
<p>Finally, copy this file to <code>~/.config/go-furnace/plugins</code> and you are all set.</p>
<h2 id="slack-notification-plugin">Slack notification Plugin</h2>
<p>To demonstrate how a plugin could be used is if you need some kind of notification once a Stack is completed. For example, you
might want to send a message to a Slack room. To do this, your plugin would look something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;os&#34;</span>

	<span class="s">&#34;github.com/nlopes/slack&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">RunPlugin</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">stackname</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;FURNACE_STACKNAME&#34;</span><span class="p">)</span>
	<span class="nx">api</span> <span class="o">:=</span> <span class="nx">slack</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;YOUR_TOKEN_HERE&#34;</span><span class="p">)</span>
	<span class="nx">params</span> <span class="o">:=</span> <span class="nx">slack</span><span class="p">.</span><span class="nx">PostMessageParameters</span><span class="p">{}</span>
	<span class="nx">channelID</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">api</span><span class="p">.</span><span class="nf">PostMessage</span><span class="p">(</span><span class="s">&#34;#general&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;Stack with name &#39;%s&#39; is Done.&#34;</span><span class="p">,</span> <span class="nx">stackname</span><span class="p">),</span> <span class="nx">params</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%s\n&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
		<span class="k">return</span>
	<span class="p">}</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Message successfully sent to channel %s at %s&#34;</span><span class="p">,</span> <span class="nx">channelID</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Currently, Furnace has no ability to share information of the stack with an outside plugin. Thus &lsquo;Done&rsquo; could be anything from
Rollback to Failed to CreateComplete.</p>
<h1 id="closing-words">Closing Words</h1>
<p>That&rsquo;s it for plugins. Thanks very much for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 2</title>
      <link>https://skarlso.github.io/2017/03/19/building-furnace-part-2/</link>
      <pubDate>Sun, 19 Mar 2017 12:03:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/03/19/building-furnace-part-2/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>Previously on this blog: <a href="https://skarlso.github.io/2017/03/16/building-furnace-part-1/">Part 1</a>, <a href="https://skarlso.github.io/2017/03/22/building-furnace-part-3/">Part 3</a>, <a href="https://skarlso.github.io/2017/04/16/building-furnace-part-4/">Part 4</a></p>
<p>In this part, I&rsquo;m going to talk about the AWS Go SDK and begin do dissect the intricacies of Furnace.</p>
<h1 id="aws-sdk">AWS SDK</h1>
<p>Fortunately, the Go SDK for AWS is quiet verbose and littered with examples of all sorts. But that doesn&rsquo;t make it less complex
and less cryptic at times. I&rsquo;m here to lift some of the early confusions, in hopes that I can help someone to avoid wasting time.</p>
<h2 id="getting-started-and-developers-guide">Getting Started and Developers Guide</h2>
<p>As always, and common from AWS, the documentation is top notch. There is a 141 pages long developer&rsquo;s guide on the SDK containing
a getting started section and an API reference. Go check it out. I&rsquo;ll wait. <a href="http://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/aws-sdk-go-dg.pdf">AWS Go SDK DG PDF</a>. I will only talk about some gotchas and things I encountered, not the basics of the SDK.</p>
<h2 id="awsstring-and-other-types">aws.String and other types</h2>
<p>Something which is immediately visible once we take a look at the API is that everything is a pointer. Now, there are a
tremendous amount of discussions about this, but I&rsquo;m with Amazon. There are various reasons for it, but to list the most prominent
ones:
- Type completion and compile time type safety.
- Values for AWS API calls have valid zero values, in addition to being optional, i.e. not being provided at all.
- Other option, like, empty interfaces with maps, or using zero values, or struct wrappers around every type, made life much
harder rather than easier or not possible at all.
- The AWS API is volatile. You never know when something gets to be optional, or required. Pointers made that decision easy.</p>
<p>There are good number of other discussions around this topic, for example: <a href="https://github.com/aws/aws-sdk-go/issues/363">AWS Go GitHub #363</a>.</p>
<p>In order to use primitives, AWS has helper functions like <code>aws.String</code>. Because &amp;&ldquo;asdf&rdquo; is not allowed, you would have to create a
variable and use its address in situations where a string pointer is needed, for example, name of the stack. These primitive helpers will
make in-lining possible. We&rsquo;ll see later that they are used to a great extent. Pointers, however, make life a bit difficult when
constructing Input structs and make for poor aesthetics.</p>
<p>This is something I&rsquo;m returning in a test for stubbing a client call:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">		<span class="k">return</span> <span class="o">&amp;</span><span class="nx">cloudformation</span><span class="p">.</span><span class="nx">ListStackResourcesOutput</span><span class="p">{</span>
			<span class="nx">StackResourceSummaries</span><span class="p">:</span> <span class="p">[]</span><span class="o">*</span><span class="nx">cloudformation</span><span class="p">.</span><span class="nx">StackResourceSummary</span><span class="p">{</span>
				<span class="p">{</span>
					<span class="nx">ResourceType</span><span class="p">:</span>       <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;NoASG&#34;</span><span class="p">),</span>
					<span class="nx">PhysicalResourceId</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;arn::whatever&#34;</span><span class="p">),</span>
				<span class="p">},</span>
			<span class="p">},</span>
		<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This doesn&rsquo;t look so appealing, but one gets used to it quickly.</p>
<h2 id="error-handling">Error handling</h2>
<p>Errors also have their own types. An AWS error looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
    <span class="k">if</span> <span class="nx">awsErr</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">err</span><span class="p">.(</span><span class="nx">awserr</span><span class="p">.</span><span class="nx">Error</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>First, we check if error is nil, than we type check if the error is an AWS error or something different. In the wild, this will
look something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">awsErr</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">err</span><span class="p">.(</span><span class="nx">awserr</span><span class="p">.</span><span class="nx">Error</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
			<span class="k">if</span> <span class="nx">awsErr</span><span class="p">.</span><span class="nf">Code</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">codedeploy</span><span class="p">.</span><span class="nx">ErrCodeDeploymentGroupAlreadyExistsException</span> <span class="p">{</span>
				<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">awsErr</span><span class="p">.</span><span class="nf">Code</span><span class="p">())</span>
				<span class="k">return</span> <span class="nx">err</span>
			<span class="p">}</span>
			<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;DeploymentGroup already exists. Nothing to do.&#34;</span><span class="p">)</span>
			<span class="k">return</span> <span class="kc">nil</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="nx">err</span>
	<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>If it&rsquo;s an AWS error, we can check further for the error code that it returns in order to identify what to handle, or what to throw
on to the caller to a potential fatal. Here, I&rsquo;m ignoring the AlreadyExistsException because, if it does, we just go on to a next
action.</p>
<h2 id="examples">Examples</h2>
<p>Luckily the API doc is very mature. In most of the cases, they provide an example to an API call. These examples, however, from
time to time provide more confusion than clarity. Take CloudFormation. For me, when I first glanced upon the
description of the API it wasn&rsquo;t immediately clear that the <code>TemplateBody</code> was supposed to be the whole template, and that
the rest of the fields were almost all optional settings. Or provided overrides in special cases.</p>
<p>And since the template is not an ordinary JAML or JSON file, I was looking for something that parses it into that the Struct I
was going to use. After some time, and digging, I realized that I didn&rsquo;t need that, and that I just need to read in the template,
define some extra parameters, and give the TemplateBody the whole of the template. The parameters defined by the CloudFormation
template where extracted for me by <code>ValidateTemplate</code> API call which returned all of them in a convenient
<code>[]*cloudformation.Parameter</code> slice. These things are not described in the document or visible from the examples. I mainly found
them through playing with the API and focused experimentation.</p>
<h2 id="waiters">Waiters</h2>
<p>From other SDK implementations, we got used to Waiters. These handy methods wait for a service to become available or for certain
situations to take in effect, like a Stage being <code>CREATE_COMPLETE</code>. The Go waiters, however, don&rsquo;t allow for callback to be fired,
or for running blocks, like the ruby SDK does. For this, I wrote a handy little waiter for myself, which outputs a spinner to see
that we are currently waiting for something and not frozen in time. This waiter looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// WaitForFunctionWithStatusOutput waits for a function to complete its action.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">WaitForFunctionWithStatusOutput</span><span class="p">(</span><span class="nx">state</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">freq</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">f</span> <span class="kd">func</span><span class="p">())</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
	<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
	<span class="nx">done</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">)</span>
	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
		<span class="nf">f</span><span class="p">()</span>
		<span class="nx">done</span> <span class="o">&lt;-</span> <span class="kc">true</span>
	<span class="p">}()</span>
	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">counter</span> <span class="o">:=</span> <span class="mi">0</span>
		<span class="k">for</span> <span class="p">{</span>
			<span class="nx">counter</span> <span class="p">=</span> <span class="p">(</span><span class="nx">counter</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="nx">Spinners</span><span class="p">[</span><span class="nx">config</span><span class="p">.</span><span class="nx">SPINNER</span><span class="p">])</span>
			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;\r[%s] Waiting for state: %s&#34;</span><span class="p">,</span> <span class="nf">yellow</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">Spinners</span><span class="p">[</span><span class="nx">config</span><span class="p">.</span><span class="nx">SPINNER</span><span class="p">][</span><span class="nx">counter</span><span class="p">])),</span> <span class="nf">red</span><span class="p">(</span><span class="nx">state</span><span class="p">))</span>
			<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Duration</span><span class="p">(</span><span class="nx">freq</span><span class="p">)</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
			<span class="k">select</span> <span class="p">{</span>
			<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">done</span><span class="p">:</span>
				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">()</span>
				<span class="k">break</span>
			<span class="k">default</span><span class="p">:</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}()</span>

	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>And I&rsquo;m calling it with the following method:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">	<span class="nx">utils</span><span class="p">.</span><span class="nf">WaitForFunctionWithStatusOutput</span><span class="p">(</span><span class="s">&#34;DELETE_COMPLETE&#34;</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">WAITFREQUENCY</span><span class="p">,</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">cfClient</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">WaitUntilStackDeleteComplete</span><span class="p">(</span><span class="nx">describeStackInput</span><span class="p">)</span>
	<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>This would output these lines to the console:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">[</span><span class="se">\]</span> Waiting <span class="k">for</span> state: DELETE_COMPLETE
</code></pre></td></tr></table>
</div>
</div><p>The spinner can be configured to be one of the following types:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">var</span> <span class="nx">Spinners</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">`←↖↑↗→↘↓↙`</span><span class="p">,</span>
	<span class="s">`▁▃▄▅▆▇█▇▆▅▄▃`</span><span class="p">,</span>
	<span class="s">`┤┘┴└├┌┬┐`</span><span class="p">,</span>
	<span class="s">`◰◳◲◱`</span><span class="p">,</span>
	<span class="s">`◴◷◶◵`</span><span class="p">,</span>
	<span class="s">`◐◓◑◒`</span><span class="p">,</span>
	<span class="s">`⣾⣽⣻⢿⡿⣟⣯⣷`</span><span class="p">,</span>
	<span class="s">`|/-\`</span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Handy.</p>
<p>And with that, let&rsquo;s dive into the basics of Furnace.</p>
<h1 id="furnace">Furnace</h1>
<h2 id="directory-structure-and-packages">Directory Structure and Packages</h2>
<p>Furnace is divided into three main packages.</p>
<h3 id="commands">commands</h3>
<p>Commands package is where the gist of Furnace lies. These commands represent the commands which are used through the CLI. Each
file has the implementation for one command. The structure is devised by this library: <a href="https://github.com/Yitsushi/go-commander">Yitsushi&rsquo;s Command Library</a>.
As of the writing of this post, the following commands are available:</p>
<ul>
<li>create - Creates a stack using the CloudFormation template file under ~/.config/go-furnace</li>
<li>delete - Deletes the created Stack. Doesn&rsquo;t do anything if the stack doesn&rsquo;t exist</li>
<li>push - Pushes an application to a stack</li>
<li>status - Displays information about the stack</li>
<li>delete-application - Deletes the CodeDeploy application and deployment group created by <code>push</code></li>
</ul>
<p>These commands represent the heart of furnace. I would like to keep these to a minimum, but I do plan on adding more, like
<code>update</code> and <code>rollout</code>. Further details and help messages on these commands can be obtained by running: <code>./furnace help</code> or
<code>./furnace help create</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">❯ ./furnace <span class="nb">help</span> push
Usage: furnace push appName <span class="o">[</span>-s3<span class="o">]</span>

Push a version of the application to a stack

Examples:
  furnace push
  furnace push appName
  furnace push appName -s3
  furnace push -s3
</code></pre></td></tr></table>
</div>
</div><h3 id="config">config</h3>
<p>Contains the configuration loader and some project wide defaults which are as follows:</p>
<ul>
<li>Events for the plugin system - <code>pre-create</code>, <code>post-create</code>, <code>pre-delete</code>, <code>post-delete</code>.</li>
<li>CodeDeploy role name - <code>CodeDeployServiceRole</code>. This is used if none is provided to locate the CodeDeploy IAM role.</li>
<li>Wait frequency - Is the setting which controls how long the waiter should sleep in between status updates. Default is <code>1s</code>.</li>
<li>Spinner - Is just the number of the spinner to use.</li>
<li>Plugin registry - Is a map of functions to run for the above events.</li>
</ul>
<p>Further more, config loads the CloudFormation template and checks if some necessary settings are present in the environment, exp:
the configuration folder under <code>~/.config/go-furnace</code>.</p>
<h3 id="utils">utils</h3>
<p>These are some helper functions which are used throughout the project. To list them:</p>
<ul>
<li>error_handler - Is a simple error handler. I&rsquo;m thinking of refactoring this one to some saner version.</li>
<li>spinner - Sets up which spinner to use in the waiter function.</li>
<li>waiter - Contains the verbose waiter introduced above under <a href="##Waiters">Waiters</a>.</li>
</ul>
<h2 id="configuration-and-environment-variables">Configuration and Environment variables</h2>
<p>Furnace is a Go application, thus it doesn&rsquo;t have the luxury of Ruby or Python where the configuration files are usually bundled
with the app. But, it does have a standard for it. Usually, configurations reside in either of these two locations. Environment
Properties or|and configuration files under a fixed location ( i.e. HOME/.config/app-name ). Furnace employs both.</p>
<p>Settings like, region, stack name, enable plugin system, are under environment properties ( though this can change ), while the
CloudFormation template lives under <code>~/.config/go-furnace/</code>. Lastly it assumes some things, like the Deployment IAM role just
exists under the used AWS account. All these are loaded and handled by the config package described above.</p>
<h2 id="usage">Usage</h2>
<p>A typical scenario for Furnace would be the following:</p>
<ul>
<li>Setup your CloudFormation template or use the one provided. The one provided sets up a highly available and self healing setting
using Auto-Scaling and Load-Balancing with a single application instance. Edit this template to your liking than copy it to
<code>~/.config/go-furnace</code>.</li>
<li>Create the configured stack with <code>./furnace create</code>.</li>
<li>Create will ask for the parameters defined in the template. If defaults are setup, simply hitting enter will use these defaults.
Take note, that the provided template sets up SSH access via a provided key. If that key is not present in CF, you won&rsquo;t be able
to SSH into the created instance.</li>
<li>Once the stack is completed, the application is ready to be pushed. To do this, run: <code>./furnace push</code>. This will locate the
appropriate version of the app from S3 or GitHub and push that version to the instances in the Auto-Scaling group. To all of
them.</li>
</ul>
<h2 id="general-practices-applied-to-the-project">General Practices Applied to the Project</h2>
<h3 id="commands-1">Commands</h3>
<p>For each command the main entry point is the <code>execute</code> function. These functions are usually calling out the small chunks of
distributed methods. Logic was kept to a bare minimum ( probably could be simplified even further ) in the execute functions
mostly for testability and the likes. We will see that in a followup post.</p>
<h3 id="errors">Errors</h3>
<p>Errors are handled immediately and usually through a fatal. If any error occurs than the application is halted. In followup
versions this might become more granular. I.e. don&rsquo;t immediately stop the world, maybe try to recover, or create a Poller or
Re-Tryer, which tries a call again for a configured amount of times.</p>
<h3 id="output-colors">Output colors</h3>
<p>Not that important, but still&hellip; Aesthetics. Displaying data to the console in a nice way gives it some extra flare.</p>
<h3 id="makefile">Makefile</h3>
<p>This project works with a Makefile for various reasons. Later on, once the project might become more complex, a Makefile makes it
really easy to handle different ways of packaging the application. Currently, for example, it provides a <code>linux</code> target which will
make Go build the project for Linux architecture on any other Architecture i.e. cross-compiling.</p>
<p>It also provides an easy way to run unit tests with <code>make test</code> and installing with <code>make &amp;&amp; make install</code>.</p>
<h1 id="closing-words">Closing Words</h1>
<p>That is all for Part 2. Join me in Part 3 where I will talk about the experimental Plugin system that Furnace employs.</p>
<p>Thank you for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Testing new Hugo if posts are generated properly</title>
      <link>https://skarlso.github.io/2017/03/17/test-new-hugo/</link>
      <pubDate>Fri, 17 Mar 2017 09:09:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/03/17/test-new-hugo/</guid>
      <description><![CDATA[<p>Testing.</p>
]]></description>
    </item>
    
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 1</title>
      <link>https://skarlso.github.io/2017/03/16/building-furnace-part-1/</link>
      <pubDate>Thu, 16 Mar 2017 21:49:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/03/16/building-furnace-part-1/</guid>
      <description><![CDATA[<h1 id="other-posts">Other posts:</h1>
<p><a href="https://skarlso.github.io/2017/03/19/building-furnace-part-2/">Part 2</a>, <a href="https://skarlso.github.io/2017/03/22/building-furnace-part-3/">Part 3</a>, <a href="https://skarlso.github.io/2017/04/16/building-furnace-part-4/">Part 4</a>.</p>
<h1 id="building-furnace-part-1">Building Furnace: Part 1</h1>
<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>This is the first part of a 4 part series which talks about the process of building a middlish sized project in Go,
with AWS. Including Unit testing and a experimental plugin feature.</p>
<p>The first part will talk about the AWS services used in brief and will contain a basic description for those who are not familiar
with them. The second part will talk about the Go SDK and the project structure itself, how it can be used, improved, and how it can
help in everyday life. The third part will talk about the experimental plugin system, and finally, we will tackle unit testing AWS
in Go.</p>
<p>Let&rsquo;s begin, shall we?</p>
<h1 id="aws">AWS</h1>
<h2 id="cloudformation">CloudFormation</h2>
<p>If you haven&rsquo;t yet read about, or know off, AWS' CloudFormation service, you can either go ahead and read the <a href="https://aws.amazon.com/cloudformation/">Documentation</a>
or read on for a very quick summary. If you are familiar with CF, you should skip ahead to <a href="##CodeDeploy">CodeDeploy</a> section.</p>
<p>CF is a service which bundles together other AWS services (for example: EC2, S3, ELB, ASG, RDS) into one, easily manageable stack.
After a stack has been created, all the resources can be handled as one, located, tagged and used via CF specific console commands.
It&rsquo;s also possible to define any number of parameters, so a stack can actually be very versatile. A parameter can be anything, from
SSH IP restriction to KeyPair names and list of tags to create or in what region the stack will be in.</p>
<p>To describe how these parts fit together, one must use a CloudFormation Template file which is either in JSON or in
YAML format. A simple example looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">    </span><span class="nt">Parameters</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">KeyName</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">Description</span><span class="p">:</span><span class="w"> </span><span class="l">The EC2 Key Pair to allow SSH access to the instance</span><span class="w">
</span><span class="w">        </span><span class="nt">Type</span><span class="p">:</span><span class="w"> </span><span class="l">AWS::EC2::KeyPair::KeyName</span><span class="w">
</span><span class="w">    </span><span class="nt">Resources</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">Ec2Instance</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">Type</span><span class="p">:</span><span class="w"> </span><span class="l">AWS::EC2::Instance</span><span class="w">
</span><span class="w">        </span><span class="nt">Properties</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">SecurityGroups</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">Ref</span><span class="p">:</span><span class="w"> </span><span class="l">InstanceSecurityGroup</span><span class="w">
</span><span class="w">          </span>- <span class="l">MyExistingSecurityGroup</span><span class="w">
</span><span class="w">          </span><span class="nt">KeyName</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">Ref</span><span class="p">:</span><span class="w"> </span><span class="l">KeyName</span><span class="w">
</span><span class="w">          </span><span class="nt">ImageId</span><span class="p">:</span><span class="w"> </span><span class="l">ami-7a11e213</span><span class="w">
</span><span class="w">      </span><span class="nt">InstanceSecurityGroup</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">Type</span><span class="p">:</span><span class="w"> </span><span class="l">AWS::EC2::SecurityGroup</span><span class="w">
</span><span class="w">        </span><span class="nt">Properties</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">GroupDescription</span><span class="p">:</span><span class="w"> </span><span class="l">Enable SSH access via port 22</span><span class="w">
</span><span class="w">          </span><span class="nt">SecurityGroupIngress</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">IpProtocol</span><span class="p">:</span><span class="w"> </span><span class="l">tcp</span><span class="w">
</span><span class="w">            </span><span class="nt">FromPort</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;22&#39;</span><span class="w">
</span><span class="w">            </span><span class="nt">ToPort</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;22&#39;</span><span class="w">
</span><span class="w">            </span><span class="nt">CidrIp</span><span class="p">:</span><span class="w"> </span><span class="m">0.0.0.0</span><span class="l">/0</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>There are a myriad of these template samples <a href="https://aws.amazon.com/cloudformation/aws-cloudformation-templates/">here</a>.</p>
<p>I&rsquo;m not going to explain this in too much detail. Parameters define the parameters, and resources define all the AWS services which
we would like to configure. Here we can see, that we are creating an EC2 instance with a custom Security Group plus and already
existing security group. ImageId is the AMI which will be used for the EC2 instance. The InstanceSecurityGroup is only defining
some SSH access to the instance.</p>
<p>That is pretty much it. This can become bloated relatively quickly once, VPCs, ELBs, and ASGs come into play. And CloudFormation
templates can also contain simple logical switches, like, conditions, ref for variables, maps and other shenanigans.</p>
<p>For example consider this part in the above example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">      </span><span class="nt">KeyName</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">Ref</span><span class="p">:</span><span class="w"> </span><span class="l">KeyName</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Here, we use the <code>KeyName</code> parameter as a Reference Value which will be interpolated to the real value, or the default one, as the
template gets processed.</p>
<h2 id="codedeploy">CodeDeploy</h2>
<p>If you haven&rsquo;t heard about CodeDeploy yet, please browse the relevant <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/welcome.html">Documentation</a>
or follow along for a &ldquo;quick&rdquo; description.</p>
<p>CodeDeploy just does what the name says. It deploys code. Any kind of code, as long as the deployment process is described in a
file called <code>appspec.yml</code>. It can be easy as coping a file to a specific location or incredibly complex with builds of various
kinds.</p>
<p>For a simple example look at this configuration:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">0.0</span><span class="w">
</span><span class="w">    </span><span class="nt">os</span><span class="p">:</span><span class="w"> </span><span class="l">linux</span><span class="w">
</span><span class="w">    </span><span class="nt">files</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">source</span><span class="p">:</span><span class="w"> </span><span class="l">/index.html</span><span class="w">
</span><span class="w">        </span><span class="nt">destination</span><span class="p">:</span><span class="w"> </span><span class="l">/var/www/html/</span><span class="w">
</span><span class="w">      </span>- <span class="nt">source</span><span class="p">:</span><span class="w"> </span><span class="l">/healthy.html</span><span class="w">
</span><span class="w">        </span><span class="nt">destination</span><span class="p">:</span><span class="w"> </span><span class="l">/var/www/html/</span><span class="w">
</span><span class="w">    </span><span class="nt">hooks</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">BeforeInstall</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">location</span><span class="p">:</span><span class="w"> </span><span class="l">scripts/install_dependencies</span><span class="w">
</span><span class="w">          </span><span class="nt">timeout</span><span class="p">:</span><span class="w"> </span><span class="m">300</span><span class="w">
</span><span class="w">          </span><span class="nt">runas</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span><span class="w">        </span>- <span class="nt">location</span><span class="p">:</span><span class="w"> </span><span class="l">scripts/clean_up</span><span class="w">
</span><span class="w">          </span><span class="nt">timeout</span><span class="p">:</span><span class="w"> </span><span class="m">300</span><span class="w">
</span><span class="w">          </span><span class="nt">runas</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span><span class="w">        </span>- <span class="nt">location</span><span class="p">:</span><span class="w"> </span><span class="l">scripts/start_server</span><span class="w">
</span><span class="w">          </span><span class="nt">timeout</span><span class="p">:</span><span class="w"> </span><span class="m">300</span><span class="w">
</span><span class="w">          </span><span class="nt">runas</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span><span class="w">      </span><span class="nt">ApplicationStop</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">location</span><span class="p">:</span><span class="w"> </span><span class="l">scripts/stop_server</span><span class="w">
</span><span class="w">          </span><span class="nt">timeout</span><span class="p">:</span><span class="w"> </span><span class="m">300</span><span class="w">
</span><span class="w">          </span><span class="nt">runas</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>CodeDeploy applications have hooks and life-cycle events which can be used to control the deployment process of an like, starting
the WebServer; making sure files are in the right location; copying files, running configuration management software like puppet,
ansible or chef; etc, etc.</p>
<p>What can be done in an <code>appspec.yml</code> file is described here: <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/app-spec-ref.html">Appspec Reference Documentation</a>.</p>
<p>Deployment happens in one of two ways:</p>
<h3 id="github">GitHub</h3>
<p>If the preferred way to deploy the application is from GitHub a commit hash must be used to identify which &ldquo;version&rdquo; of the
application is to be deployed. For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">    <span class="nx">rev</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">codedeploy</span><span class="p">.</span><span class="nx">RevisionLocation</span><span class="p">{</span>
        <span class="nx">GitHubLocation</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">codedeploy</span><span class="p">.</span><span class="nx">GitHubLocation</span><span class="p">{</span>
            <span class="nx">CommitId</span><span class="p">:</span>   <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;kajdf94j0f9k309klksjdfkj&#34;</span><span class="p">),</span>
            <span class="nx">Repository</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;Skarlso/furnace-codedeploy-app&#34;</span><span class="p">),</span>
        <span class="p">},</span>
        <span class="nx">RevisionType</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;GitHub&#34;</span><span class="p">),</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Commit Id is the hash of the latest release and repository is the full account/repository pointing to the application.</p>
<h3 id="s3">S3</h3>
<p>The second way is to use an S3 bucket. The bucket will contain an archived version of the application with a given extension. I&rsquo;m
saying given extension, because it has to be specified like this (and can be either &lsquo;zip&rsquo;, or &lsquo;tar&rsquo; or &lsquo;tgz&rsquo;):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">    <span class="nx">rev</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">codedeploy</span><span class="p">.</span><span class="nx">RevisionLocation</span><span class="p">{</span>
        <span class="nx">S3Location</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">codedeploy</span><span class="p">.</span><span class="nx">S3Location</span><span class="p">{</span>
            <span class="nx">Bucket</span><span class="p">:</span>     <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;my_codedeploy_bucket&#34;</span><span class="p">),</span>
            <span class="nx">BundleType</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;zip&#34;</span><span class="p">),</span>
            <span class="nx">Key</span><span class="p">:</span>        <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;my_awesome_app&#34;</span><span class="p">),</span>
            <span class="nx">Version</span><span class="p">:</span>    <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;VersionId&#34;</span><span class="p">),</span>
        <span class="p">},</span>
        <span class="nx">RevisionType</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;S3&#34;</span><span class="p">),</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Here, we specify the bucket name, the extension, the name of the file and an optional version id, which can be ignored.</p>
<h3 id="deploying">Deploying</h3>
<p>So how does code deploy get either of the applications to our EC2 instances? It uses an agent which is running on all of the
instances that we create. In order to do this, the agent needs to be present on our instance. For linux this can be achieved with
the following UserData (UserData in CF is the equivalent of a bootsrap script):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">    <span class="s2">&#34;UserData&#34;</span> : <span class="o">{</span>
        <span class="s2">&#34;Fn::Base64&#34;</span> : <span class="o">{</span> <span class="s2">&#34;Fn::Join&#34;</span> : <span class="o">[</span> <span class="s2">&#34;\n&#34;</span>, <span class="o">[</span>
            <span class="s2">&#34;#!/bin/bash -v&#34;</span>,
            <span class="s2">&#34;sudo yum -y update&#34;</span>,
            <span class="s2">&#34;sudo yum -y install ruby wget&#34;</span>,
            <span class="s2">&#34;cd /home/ec2-user/&#34;</span>,
            <span class="s2">&#34;wget https://aws-codedeploy-eu-central-1.s3.amazonaws.com/latest/install&#34;</span>,
            <span class="s2">&#34;chmod +x ./install&#34;</span>,
            <span class="s2">&#34;sudo ./install auto&#34;</span>,
            <span class="s2">&#34;sudo service codedeploy-agent start&#34;</span>,
        <span class="o">]</span> <span class="o">]</span> <span class="o">}</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>A simple user data configuration in the CloudFormation template will make sure that every instance that we create will have the
CodeDeploy agent running and waiting for instructions. This agent is self updating. Which can cause some trouble if AWS releases a
broken agent. However unlikely, it can happen. Never the less, once installed, it&rsquo;s no longer a concern to be bothered with.</p>
<p>It communications on HTTPS port 443.</p>
<p>CodeDeploy identifies instances which need to be updated according to our preferences, by tagging the EC2 and Auto Scaling groups.
Tagging happens in the CloudFormation template through the AutoScalingGroup settings like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json">    <span class="s2">&#34;Tags&#34;</span> <span class="err">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="nt">&#34;Key&#34;</span> <span class="p">:</span> <span class="s2">&#34;fu_stage&#34;</span><span class="p">,</span>
            <span class="nt">&#34;Value&#34;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&#34;Ref&#34;</span><span class="p">:</span> <span class="s2">&#34;AWS::StackName&#34;</span> <span class="p">},</span>
            <span class="nt">&#34;PropagateAtLaunch&#34;</span> <span class="p">:</span> <span class="kc">true</span>
        <span class="p">}</span>
    <span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>This will give the EC2 instance a tag called <code>fu_stage</code> with value equaling to the name of the stack. Once this is done, CodeDeploy
looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">    <span class="nx">params</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">codedeploy</span><span class="p">.</span><span class="nx">CreateDeploymentInput</span><span class="p">{</span>
        <span class="nx">ApplicationName</span><span class="p">:</span>               <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">appName</span><span class="p">),</span>
        <span class="nx">IgnoreApplicationStopFailures</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">Bool</span><span class="p">(</span><span class="kc">true</span><span class="p">),</span>
        <span class="nx">DeploymentGroupName</span><span class="p">:</span>           <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">appName</span> <span class="o">+</span> <span class="s">&#34;DeploymentGroup&#34;</span><span class="p">),</span>
        <span class="nx">Revision</span><span class="p">:</span>                      <span class="nf">revisionLocation</span><span class="p">(),</span>
        <span class="nx">TargetInstances</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">codedeploy</span><span class="p">.</span><span class="nx">TargetInstances</span><span class="p">{</span>
            <span class="nx">AutoScalingGroups</span><span class="p">:</span> <span class="p">[]</span><span class="o">*</span><span class="kt">string</span><span class="p">{</span>
                <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;AutoScalingGroupPhysicalID&#34;</span><span class="p">),</span>
            <span class="p">},</span>
            <span class="nx">TagFilters</span><span class="p">:</span> <span class="p">[]</span><span class="o">*</span><span class="nx">codedeploy</span><span class="p">.</span><span class="nx">EC2TagFilter</span><span class="p">{</span>
                <span class="p">{</span>
                    <span class="nx">Key</span><span class="p">:</span>   <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;fu_stage&#34;</span><span class="p">),</span>
                    <span class="nx">Type</span><span class="p">:</span>  <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;KEY_AND_VALUE&#34;</span><span class="p">),</span>
                    <span class="nx">Value</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">STACKNAME</span><span class="p">),</span>
                <span class="p">},</span>
            <span class="p">},</span>
        <span class="p">},</span>
        <span class="nx">UpdateOutdatedInstancesOnly</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">Bool</span><span class="p">(</span><span class="kc">false</span><span class="p">),</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>CreateDeploymentInput is the entire parameter list that is needed in order to identify instances to deploy code to. We can see
here that it looks for an AutoScalingGroup by Physical Id and the tag labeled <code>fu_stage</code>. Once found, it will use
<code>UpdateOutdatedInstancesOnly</code> to determine if an instance needs to be updated or not. Set to false means, it always updates.</p>
<h1 id="furnace">Furnace</h1>
<p>Where does <a href="https://github.com/Skarlso/go-furnace">Furnace</a> fit in, in all of this? Furnace provides a very easy mechanism to create,
delete and push code to a CloudFormation stack using CodeDeploy, and a couple of environment properties. Furnace <code>create</code> will
create a CloudFormation stack according to the provided template, all the while asking for the parameters defined in it for
flexibility. <code>delete</code> will remove the stack and all affiliated resources except for the created CodeDeploy application. For that,
there is <code>delete-application</code>. <code>status</code> will display information about the stack: Outputs, Parameters, Id, Name, and status.
Something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">    2017/03/16 21:14:37 Stack state is:  <span class="o">{</span>
      Capabilities: <span class="o">[</span><span class="s2">&#34;CAPABILITY_IAM&#34;</span><span class="o">]</span>,
      CreationTime: 2017-03-16 20:09:38.036 +0000 UTC,
      DisableRollback: false,
      Outputs: <span class="o">[{</span>
          Description: <span class="s2">&#34;URL of the website&#34;</span>,
          OutputKey: <span class="s2">&#34;URL&#34;</span>,
          OutputValue: <span class="s2">&#34;http://FurnaceSt-ElasticL-ID.eu-central-1.elb.amazonaws.com&#34;</span>
        <span class="o">}]</span>,
      Parameters: <span class="o">[</span>
        <span class="o">{</span>
          ParameterKey: <span class="s2">&#34;KeyName&#34;</span>,
          ParameterValue: <span class="s2">&#34;UserKeyPair&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          ParameterKey: <span class="s2">&#34;SSHLocation&#34;</span>,
          ParameterValue: <span class="s2">&#34;0.0.0.0/0&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          ParameterKey: <span class="s2">&#34;CodeDeployBucket&#34;</span>,
          ParameterValue: <span class="s2">&#34;None&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          ParameterKey: <span class="s2">&#34;InstanceType&#34;</span>,
          ParameterValue: <span class="s2">&#34;t2.nano&#34;</span>
        <span class="o">}</span>
      <span class="o">]</span>,
      StackId: <span class="s2">&#34;arn:aws:cloudformation:eu-central-1:9999999999999:stack/FurnaceStack/asdfadsf-adsfa3-432d-a-fdasdf&#34;</span>,
      StackName: <span class="s2">&#34;FurnaceStack&#34;</span>,
      StackStatus: <span class="s2">&#34;CREATE_COMPLETE&#34;</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>( This will later be improved to include created resources as well. )</p>
<p>Once the stack is <code>CREATE_COMPLETE</code> a simple <code>push</code> will deliver our application on each instance in the stack. We will get into
more detail about how these commands are working in Part 2 of this series.</p>
<h1 id="final-words">Final Words</h1>
<p>This is it for now.</p>
<p>Join me next time when I will talk about the AWS Go SDK and its intricacies and we will start to look at the basics of Furnace.</p>
<p>As always,
Thanks for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Images on older posts</title>
      <link>https://skarlso.github.io/2017/03/03/images-on-old-posts/</link>
      <pubDate>Fri, 03 Mar 2017 18:20:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/03/03/images-on-old-posts/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>Just a quick headsup, that older posts and images, may have been lost unfortunately, because I made the terrible mistake, when I
migrated over from my old blog, that I forgot to download all the images from the remote host.</p>
<p>For lack of options, I deleted the images. :/ Sorry for the inconvencience!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How to HTTPS with Hugo LetsEncrypt and HAProxy</title>
      <link>https://skarlso.github.io/2017/02/15/how-to-https-with-hugo-letsencrypt-haproxy/</link>
      <pubDate>Wed, 15 Feb 2017 19:20:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/02/15/how-to-https-with-hugo-letsencrypt-haproxy/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>Today, I would like to write about how to do HTTPS for a website, without the need to buy a certificate and set it up via your DNS provider. Let&rsquo;s begin.</p>
<h2 id="abstract">Abstract</h2>
<p>What you will achieve by the end of this post:</p>
<ul>
<li>Every call to HTTP will be redirected to HTTPS via <a href="https://www.haproxy.com">haproxy</a>.</li>
<li>HTTPS will be served with Haproxy and <a href="https://letsencrypt.org">LetsEncrypt</a> as the Certificate provider.</li>
<li>Automatically update the certificate before its expiration.</li>
<li>No need for IPTable rules to route 8080 to 80.</li>
<li>Traffic to and from your page will be encrypted.</li>
<li>This all will cost you nothing.</li>
</ul>
<p>I will use a static website generator for this called <a href="https://gohugo.io">Hugo</a> which, if you know me, is my favorite generator tool. These instructions
are for haproxy and hugo, if you wish to use apache and nginx for example, you&rsquo;ll have to dig for the corresponding settings for letsencrypt and certbot.</p>
<h1 id="what-you-will-need">What You Will Need</h1>
<h2 id="hugo">Hugo</h2>
<p>You will need hugo, which can be downloaded from here: <a href="https://gohugo.io">Hugo</a>. A simple website will be enough. For themes, you can take a look
at the humongous list located here: <a href="http://themes.gohugo.io/">HugoThemes</a>.</p>
<h2 id="haproxy">Haproxy</h2>
<p>Haproxy can be found here: <a href="https://www.haproxy.com">Haproxy</a>. There are a number of options to install haproxy. I chose a simple
<code>apt-get install haproxy</code>.</p>
<h2 id="lets-encrypt">Let&rsquo;s Encrypt</h2>
<p>Information about Let&rsquo;s Encrypt can be found on their website here: <a href="https://letsencrypt.org">Let&rsquo;s Encrypt</a>.
Let&rsquo;s Encrypt&rsquo;s client is now called <a href="https://certbot.eff.org/">Certbot</a> which is used to generate the certificates. To get the latest code
you either clone the repository <a href="https://github.com/certbot/certbot">Certbot</a>, or use an auto downloader:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">user@webserver:~$ wget https://dl.eff.org/certbot-auto
user@webserver:~$ chmod a+x ./certbot-auto
user@webserver:~$ ./certbot-auto --help
</code></pre></td></tr></table>
</div>
</div><p>Either way, I&rsquo;m using the current latest version: <em>v0.11.1</em>.</p>
<h2 id="sudo">Sudo</h2>
<p>This goes without saying, but that these operations will require you to have sudo privileges. I suggest staying in sudo for ease of use.
This means that the commands, I&rsquo;ll write here, will assume you are in <code>sudo su</code> mode thus no <code>sudo</code> prefix will be used.</p>
<h2 id="portforwarding">Portforwarding</h2>
<p>In order for your website to work under https this guide assumes that you have port <em>80</em> and <em>443</em> open on your router / network security group.</p>
<h1 id="setup">Setup</h1>
<h2 id="single-server-environment">Single Server Environment</h2>
<p>It is possible for haproxy, certbot and your website to run on designated servers. Haproxy&rsquo;s abilities allows to define multiple server sources.
In this guide, my haproxy, website and certbot will all run on the same server; thus redirecting to 127.0.0.1 and local ips. This is more
convenient, because otherwise the haproxy IP would have to be a permanent local/remote ip. Or an automated script would have to be setup which is
notified upon IP change and updates the ip records.</p>
<h2 id="creating-a-certificate">Creating a Certificate</h2>
<p>Diving in, the first thing you will require is a certificate. A certificate will allow for encrypted traffic and an authenticated website.
Let&rsquo;s Encrypt which is basically functioning as an independent, free, automated CA (Certificate Authority). Usually,
the process would be to pay a CA to give you a signed, generated certificate for your website, and you would have to set that up with your DNS
provider. Let&rsquo;s Encrypt has that all automated, and free of any charge. Neat.</p>
<h3 id="certbot">Certbot</h3>
<p>So let&rsquo;s get started. Clone the repository into <code>/opt/letsencrypt</code> for further usage.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">git clone https://github.com/certbot/certbot /opt/letsencrypt
</code></pre></td></tr></table>
</div>
</div><h3 id="generating-the-certificate">Generating the certificate</h3>
<p>Make sure that there is nothing listening on ports: 80, 443. To list usage:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">netstat -nlt <span class="p">|</span> grep <span class="s1">&#39;:80\s&#39;</span>
netstat -nlt <span class="p">|</span> grep <span class="s1">&#39;:443\s&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>Kill everything that might be on these ports, like apache2 and httpd. These will be used by haproxy and certbot for challenges
and redirecting traffic.</p>
<p>You will be creating a <a href="https://certbot.eff.org/docs/using.html#standalone">standalone</a> certificate. This is the reason we need port 80 and 443 open.
Run certbot by defining the <code>certonly</code> and <code>--standalone</code> flags. For domain validation you are going to use port 443, tls-sni-01 challenge.
The whole command looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> /opt/letsencrypt
./certbot-auto certonly --standalone -d example.com -d www.example.com
</code></pre></td></tr></table>
</div>
</div><p>If this displays something like, &ldquo;couldn&rsquo;t connect&rdquo; you probably still have something running on a port it tries to use. The
generated certificate will be located under <code>/etc/letsencrypt/archive</code> and <code>/etc/letsencrypt/keys</code> while <code>/etc/letsencrypt/live</code> is
a symlink to the latest version of the cert. It&rsquo;s wise to not copy these away from here, since the live link is always updated to the latest version.
Our script will handle haproxy, which requires one cert file made from privkey + fullchain|.pem files.</p>
<h3 id="setup-auto-renewal">Setup Auto-Renewal</h3>
<p>Let&rsquo;s Encrypt issues short lived certificates (90 days). In order to not have to do this procedure every 89 days, certbot provides a nifty
command called <code>renew</code>. However, for the cert to be generated, the port 443 has to be open. This means, haproxy needs to be stopped before
doing the renew. Now, you COULD write a script which stops it, and after the certificate has been renewed, starts it again, but certbot has
you covered again in that department. It provides hooks called <code>pre-hook</code> and <code>post-hook</code>. Thus, all you have to write is the following:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="nb">cd</span> /opt/letsencrypt
./certbot-auto renew --pre-hook <span class="s2">&#34;service haproxy stop&#34;</span> --post-hook <span class="s2">&#34;service haproxy start&#34;</span>
<span class="nv">DOMAIN</span><span class="o">=</span><span class="s1">&#39;example.com&#39;</span> sudo -E bash -c <span class="s1">&#39;cat /etc/letsencrypt/live/$DOMAIN/fullchain.pem /etc/letsencrypt/live/$DOMAIN/privkey.pem &gt; /etc/haproxy/certs/$DOMAIN.pem&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>If you would like to test it first, just include the switch <code>--dry-run</code>.</p>
<p>In case of success you should see something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@raspberrypi:/opt/letsencrypt# ./certbot-auto renew --pre-hook <span class="s2">&#34;service haproxy stop&#34;</span> --post-hook <span class="s2">&#34;service haproxy start&#34;</span> --dry-run
Saving debug log to /var/log/letsencrypt/letsencrypt.log

-------------------------------------------------------------------------------
Processing /etc/letsencrypt/renewal/example.com.conf
-------------------------------------------------------------------------------
Cert not due <span class="k">for</span> renewal, but simulating renewal <span class="k">for</span> dry run
Running pre-hook command: service haproxy stop
Renewing an existing certificate
Performing the following challenges:
tls-sni-01 challenge <span class="k">for</span> example.com
Waiting <span class="k">for</span> verification...
Cleaning up challenges
Generating key <span class="o">(</span><span class="m">2048</span> bits<span class="o">)</span>: /etc/letsencrypt/keys/0002_key-certbot.pem
Creating CSR: /etc/letsencrypt/csr/0002_csr-certbot.pem
** DRY RUN: simulating <span class="s1">&#39;certbot renew&#39;</span> close to cert expiry
**          <span class="o">(</span>The <span class="nb">test</span> certificates below have not been saved.<span class="o">)</span>

Congratulations, all renewals succeeded. The following certs have been renewed:
  /etc/letsencrypt/live/example.com/fullchain.pem <span class="o">(</span>success<span class="o">)</span>
** DRY RUN: simulating <span class="s1">&#39;certbot renew&#39;</span> close to cert expiry
**          <span class="o">(</span>The <span class="nb">test</span> certificates above have not been saved.<span class="o">)</span>
Running post-hook command: service haproxy start
</code></pre></td></tr></table>
</div>
</div><p>Put this script into a crontab to run every 89 days like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">crontab -e
<span class="c1"># Open crontab for edit and paste in this line</span>
* * */89 * * /root/renew-cert.sh
</code></pre></td></tr></table>
</div>
</div><p>And you should be all set. Now we move on the configure haproxy to redirect and to use our newly generated certificate.</p>
<h2 id="haproxy-1">Haproxy</h2>
<p>Like I said, haproxy requires a single file certificate in order to encrypt traffic to and from the website. To do this, we need to combine
<code>privkey.pem</code> and <code>fullchain.pem</code>. As of this writing, there are a couple of solutions to automate this via a post hook on renewal. And also,
there is an open ticket with certbot to implement a simpler solution located here: <a href="https://github.com/certbot/certbot/issues/1201">https://github.com/certbot/certbot/issues/1201</a>. I, for now,
have chosen to simply concatenate the two files together with <code>cat</code> like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">DOMAIN</span><span class="o">=</span><span class="s1">&#39;example.com&#39;</span> sudo -E bash -c <span class="s1">&#39;cat /etc/letsencrypt/live/$DOMAIN/fullchain.pem /etc/letsencrypt/live/$DOMAIN/privkey.pem &gt; /etc/haproxy/certs/$DOMAIN.pem&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>It will create a combined cert under <code>/etc/haproxy/certs/example.com.pem</code>.</p>
<h3 id="haproxy-configuration">Haproxy configuration</h3>
<p>If haproxy happens to be running, stop it with <code>service haproxy stop</code>.</p>
<p>First, save the default configuration file: <code>cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.old</code>. Now, overwrite the old one with this
new one (comments about what each setting does, are in-lined; they are safe to copy):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">global
    daemon
    <span class="c1"># Set this to your desired maximum connection count.</span>
    maxconn <span class="m">2048</span>
    <span class="c1"># https://cbonte.github.io/haproxy-dconv/configuration-1.5.html#3.2-tune.ssl.default-dh-param</span>
    <span class="c1"># bit setting for Diffie - Hellman key size.</span>
    tune.ssl.default-dh-param <span class="m">2048</span>

defaults
    option forwardfor
    option http-server-close

    log     global
    mode    http
    option  httplog
    option  dontlognull
    timeout connect <span class="m">5000</span>
    timeout client  <span class="m">50000</span>
    timeout server  <span class="m">50000</span>
    errorfile <span class="m">400</span> /etc/haproxy/errors/400.http
    errorfile <span class="m">403</span> /etc/haproxy/errors/403.http
    errorfile <span class="m">408</span> /etc/haproxy/errors/408.http
    errorfile <span class="m">500</span> /etc/haproxy/errors/500.http
    errorfile <span class="m">502</span> /etc/haproxy/errors/502.http
    errorfile <span class="m">503</span> /etc/haproxy/errors/503.http
    errorfile <span class="m">504</span> /etc/haproxy/errors/504.http

<span class="c1"># In case it&#39;s a simple http call, we redirect to the basic backend server</span>
<span class="c1"># which in turn, if it isn&#39;t an SSL call, will redirect to HTTPS that is</span>
<span class="c1"># handled by the frontend setting called &#39;www-https&#39;.</span>
frontend www-http
    <span class="c1"># Redirect HTTP to HTTPS</span>
    <span class="nb">bind</span> *:80
    <span class="c1"># Adds http header to end of end of the HTTP request</span>
    reqadd X-Forwarded-Proto:<span class="se">\ </span>http
    <span class="c1"># Sets the default backend to use which is defined below with name &#39;www-backend&#39;</span>
    default_backend www-backend

<span class="c1"># If the call is HTTPS we set a challenge to letsencrypt backend which</span>
<span class="c1"># verifies our certificate and than direct traffic to the backend server</span>
<span class="c1"># which is the running hugo site that is served under https if the challenge succeeds.</span>
frontend www-https
    <span class="c1"># Bind 443 with the generated letsencrypt cert.</span>
    <span class="nb">bind</span> *:443 ssl crt /etc/haproxy/certs/skarlso.com.pem
    <span class="c1"># set x-forward to https</span>
    reqadd X-Forwarded-Proto:<span class="se">\ </span>https
    <span class="c1"># set X-SSL in case of ssl_fc &lt;- explained below</span>
    http-request set-header X-SSL %<span class="o">[</span>ssl_fc<span class="o">]</span>
    <span class="c1"># Select a Challenge</span>
    acl letsencrypt-acl path_beg /.well-known/acme-challenge/
    <span class="c1"># Use the challenge backend if the challenge is set</span>
    use_backend letsencrypt-backend <span class="k">if</span> letsencrypt-acl
    default_backend www-backend

backend www-backend
   <span class="c1"># Redirect with code 301 so the browser understands it is a redirect. If it&#39;s not SSL_FC.</span>
   <span class="c1"># ssl_fc: Returns true when the front connection was made via an SSL/TLS transport</span>
   <span class="c1"># layer and is locally deciphered. This means it has matched a socket declared</span>
   <span class="c1"># with a &#34;bind&#34; line having the &#34;ssl&#34; option.</span>
   redirect scheme https code <span class="m">301</span> <span class="k">if</span> !<span class="o">{</span> ssl_fc <span class="o">}</span>
   <span class="c1"># Server for the running hugo site.</span>
   server www-1 192.168.0.17:8080 check

backend letsencrypt-backend
   <span class="c1"># Lets encrypt backend server</span>
   server letsencrypt 127.0.0.1:54321
</code></pre></td></tr></table>
</div>
</div><p>Save this, and start haproxy with <code>services haproxy start</code>. If you did everything right, it should say nothing.
If, however, there went something wrong with starting the proxy, it usually displays something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">Job <span class="k">for</span> haproxy.service failed. See <span class="s1">&#39;systemctl status haproxy.service&#39;</span> and <span class="s1">&#39;journalctl -xn&#39;</span> <span class="k">for</span> details.
</code></pre></td></tr></table>
</div>
</div><p>You can also gather some more information on what went wrong from <code>less /var/log/haproxy.log</code>.</p>
<h1 id="starting-the-server">Starting the Server</h1>
<p>Everything should be ready to go. Hugo has the concept of a baseUrl. Everything that it loads, and tries to access
will be prefixed with it. You can either set it through it&rsquo;s <code>config.yaml</code> file, or from the command line.</p>
<p>To start the server, call this from the site&rsquo;s root folder:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">hugo server --bind<span class="o">=</span>192.168.x.x --port<span class="o">=</span><span class="m">8080</span> --baseUrl<span class="o">=</span>https://example.com --appendPort<span class="o">=</span><span class="nb">false</span>
</code></pre></td></tr></table>
</div>
</div><p>Interesting thing here to note is <code>https</code> and the port. The IP could be 127.0.0.1 as well. I experienced problems though
with not binding to network IP when I was debugging the site from a different laptop on the same network.</p>
<p>Once the server is started, you should be able to open up your website from a different browser, not on your local network,
and see that it has a valid certificate installed. In Chrome you should see a green icon telling you that the cert is valid.</p>
<h1 id="last-words">Last Words</h1>
<p>And that is all. The site should be up and running and the proxy should auto-renew your site&rsquo;s certificate. If you happened to
change DNS or change the server, you&rsquo;ll have to reissue the certificate.</p>
<p>Thanks for reading!
Any questions or trouble setting something up, please feel free to leave a comment.</p>
<p>Cheers,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How to do Google Sign-In with Go - Part 2</title>
      <link>https://skarlso.github.io/2016/11/02/google-signin-with-go-part2/</link>
      <pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/11/02/google-signin-with-go-part2/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi Folks.</p>
<p>This is a follow up on my previous post about Google Sign-In. In this post we will discover what to do with the information retrieved in the first encounter, which you can find here: <a href="http://skarlso.github.io/2016/06/12/google-signin-with-go/">Google Sign-In Part 1</a>.</p>
<h1 id="forewords">Forewords</h1>
<h2 id="the-project">The Project</h2>
<p>Everything I did in the first post, and that I&rsquo;m going to do in this example, can be found in this project: <a href="https://github.com/Skarlso/google-oauth-go-sample">Google-OAuth-Go-Sample</a>.</p>
<p>Just to recap, we left off previously on the point where we successfully obtained information about the user, with a secure token and a session initiated with them. Google nicely enough provided us with some details which we can use. This information was in JSON format and looked something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;sub&#34;</span><span class="p">:</span> <span class="s2">&#34;1111111111111111111111&#34;</span><span class="p">,</span>
  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Your Name&#34;</span><span class="p">,</span>
  <span class="nt">&#34;given_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Your&#34;</span><span class="p">,</span>
  <span class="nt">&#34;family_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Name&#34;</span><span class="p">,</span>
  <span class="nt">&#34;profile&#34;</span><span class="p">:</span> <span class="s2">&#34;https://plus.google.com/1111111111111111111111&#34;</span><span class="p">,</span>
  <span class="nt">&#34;picture&#34;</span><span class="p">:</span> <span class="s2">&#34;https://lh3.googleusercontent.com/asdfadsf/AAAAAAAAAAI/Aasdfads/Xasdfasdfs/photo.jpg&#34;</span><span class="p">,</span>
  <span class="nt">&#34;email&#34;</span><span class="p">:</span> <span class="s2">&#34;your@gmail.com&#34;</span><span class="p">,</span>
  <span class="nt">&#34;email_verified&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="nt">&#34;gender&#34;</span><span class="p">:</span> <span class="s2">&#34;male&#34;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>In my example, to keep things simple, I will use the email address since that has to be unique in the land of Google. You could assign an ID to the user, and you could complicate things even further, but my goal is not to write an academic paper about cryptography here.</p>
<h1 id="implementation">Implementation</h1>
<h2 id="making-something-useful-out-of-the-data">Making something useful out of the data</h2>
<p>In order for the app to recognise a user it must save some data about the user. I&rsquo;m doing that in MongoDB right now, but that could be any form of persistence layer, like, SQLite3, BoltDB, PostgresDB, etc.</p>
<h3 id="after-successful-user-authorization">After successful user authorization</h3>
<p>Once the user used google to provide us with sufficient information about him/herself, we can retrieve data about that user from our records. The data could be anything that is linked to our unique identifier like: Character Profile, Player Information, Status, Last Logged-In, etcetc. For this, there are two things that need to happen after authorization: Save/Load user information and initiate a session.</p>
<p>The session can be in the form of a cookie, or a Redis storage, or URL re-writing. I&rsquo;m choosing a cookie here.</p>
<h3 id="save--load-user-information">Save / Load user information</h3>
<p>All I&rsquo;m doing is a simple, <em>returning / new</em> user handling. The concept is simple. If the email isn&rsquo;t saved, we save it. If it&rsquo;s saved, we set a logic to our page render to greet the returning user.</p>
<p>In the <code>AuthHandler</code> I&rsquo;m doing the following:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="o">...</span>
<span class="nx">seen</span> <span class="o">:=</span> <span class="kc">false</span>
<span class="nx">db</span> <span class="o">:=</span> <span class="nx">database</span><span class="p">.</span><span class="nx">MongoDBConnection</span><span class="p">{}</span>
<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">mongoErr</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">LoadUser</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">Email</span><span class="p">);</span> <span class="nx">mongoErr</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
    <span class="nx">seen</span> <span class="p">=</span> <span class="kc">true</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">err</span> <span class="p">=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">SaveUser</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">u</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
        <span class="nx">c</span><span class="p">.</span><span class="nf">HTML</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="s">&#34;error.tmpl&#34;</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span><span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="s">&#34;Error while saving user. Please try again.&#34;</span><span class="p">})</span>
        <span class="k">return</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nx">c</span><span class="p">.</span><span class="nf">HTML</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;battle.tmpl&#34;</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span><span class="s">&#34;email&#34;</span><span class="p">:</span> <span class="nx">u</span><span class="p">.</span><span class="nx">Email</span><span class="p">,</span> <span class="s">&#34;seen&#34;</span><span class="p">:</span> <span class="nx">seen</span><span class="p">})</span>
<span class="o">...</span>
</code></pre></td></tr></table>
</div>
</div><p>Let&rsquo;s break this down a bit. There is a db connection here, which calls a function that either returns an error, or it doesn&rsquo;t. If it doesn&rsquo;t, that means we have our user. If it does, it means we have to save the user. This is a very simple case (disregard for now, that the error could be something else as well (If you can&rsquo;t get passed that, you could type check the error or check if the returned record contains the requested user information instead of checking for an error.)).</p>
<p>The template is than rendered depending on the <code>seen</code> boolean like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;icon&#34;</span>
      <span class="na">type</span><span class="o">=</span><span class="s">&#34;image/png&#34;</span>
      <span class="na">href</span><span class="o">=</span><span class="s">&#34;/img/favicon.ico&#34;</span> <span class="p">/&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/css/main.css&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    {{if .seen}}
        <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Welcome back to the battlefield &#39;{{ .email }}&#39;.<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
    {{else}}
        <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Welcome to the battlefield &#39;{{ .email }}&#39;.<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
    {{end}}
  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>You can see here, that if <code>seen</code> is <em>true</em> the header message will say: &ldquo;Welcome <em>back</em>&hellip;&rdquo;.</p>
<h3 id="initiating-a-session">Initiating a session</h3>
<p>When the user is successfully authenticated, we activate a session so that the user can access pages that require authorization. Here, I have to mention that I&rsquo;m using <a href="https://github.com/gin-gonic/gin">Gin</a>, so restricted end-points are made with groups which require a middleware.</p>
<p>As I mentioned earlier, I&rsquo;m using cookies as session handlers. For this, a new session store has to be created with some secure token. This is achieved with the following code fragments ( note that I&rsquo;m using a Gin session middleware which uses gorilla&rsquo;s session handler located here: <a href="https://github.com/gin-gonic/contrib">Gin-Gonic(Sessions)</a>):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// RandToken in handlers.go:
</span><span class="c1">// RandToken generates a random @l length token.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">RandToken</span><span class="p">(</span><span class="nx">l</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="nx">b</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">l</span><span class="p">)</span>
	<span class="nx">rand</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
	<span class="k">return</span> <span class="nx">base64</span><span class="p">.</span><span class="nx">StdEncoding</span><span class="p">.</span><span class="nf">EncodeToString</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// quest.go:
</span><span class="c1">// Create the cookie store in main.go.
</span><span class="c1"></span><span class="nx">store</span> <span class="o">:=</span> <span class="nx">sessions</span><span class="p">.</span><span class="nf">NewCookieStore</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">handlers</span><span class="p">.</span><span class="nf">RandToken</span><span class="p">(</span><span class="mi">64</span><span class="p">)))</span>
<span class="nx">store</span><span class="p">.</span><span class="nf">Options</span><span class="p">(</span><span class="nx">sessions</span><span class="p">.</span><span class="nx">Options</span><span class="p">{</span>
    <span class="nx">Path</span><span class="p">:</span>   <span class="s">&#34;/&#34;</span><span class="p">,</span>
    <span class="nx">MaxAge</span><span class="p">:</span> <span class="mi">86400</span> <span class="o">*</span> <span class="mi">7</span><span class="p">,</span>
<span class="p">})</span>

<span class="c1">// using the cookie store:
</span><span class="c1"></span><span class="nx">router</span><span class="p">.</span><span class="nf">Use</span><span class="p">(</span><span class="nx">sessions</span><span class="p">.</span><span class="nf">Sessions</span><span class="p">(</span><span class="s">&#34;goquestsession&#34;</span><span class="p">,</span> <span class="nx">store</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><p>After this <code>gin.Context</code> lets us access this session store by doing <code>session := sessions.Default(c)</code>. Now, create a session variable called <code>user-id</code> like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">session</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;user-id&#34;</span><span class="p">,</span> <span class="nx">u</span><span class="p">.</span><span class="nx">Email</span><span class="p">)</span>
<span class="nx">err</span> <span class="p">=</span> <span class="nx">session</span><span class="p">.</span><span class="nf">Save</span><span class="p">()</span>
<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
    <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="nx">c</span><span class="p">.</span><span class="nf">HTML</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="s">&#34;error.tmpl&#34;</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span><span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="s">&#34;Error while saving session. Please try again.&#34;</span><span class="p">})</span>
    <span class="k">return</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Don&rsquo;t forget to <code>save</code> the session. ;) That is it. If I restart the server, the cookie won&rsquo;t be usable any longer, since it will generate a new token for the cookie store. The user will have to log in again. <strong>Note</strong>: It might be that you&rsquo;ll see something like this, from <code>session</code>: <code>[sessions] ERROR! securecookie: the value is not valid</code>. You can ignore this error.</p>
<h2 id="restricting-access-to-certain-end-points-with-the-auth-middleware">Restricting access to certain end-points with the auth Middleware™</h2>
<p>Now, that our session is alive, we can use it to restrict access to some part of the application. With Gin, it looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">authorized</span> <span class="o">:=</span> <span class="nx">router</span><span class="p">.</span><span class="nf">Group</span><span class="p">(</span><span class="s">&#34;/battle&#34;</span><span class="p">)</span>
<span class="nx">authorized</span><span class="p">.</span><span class="nf">Use</span><span class="p">(</span><span class="nx">middleware</span><span class="p">.</span><span class="nf">AuthorizeRequest</span><span class="p">())</span>
<span class="p">{</span>
    <span class="nx">authorized</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/field&#34;</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">.</span><span class="nx">FieldHandler</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This creates a grouping of end-points under <code>/battle</code>. Which means, everything under <code>/battle</code> will only be accessible if the middleware passed to the <code>Use</code> function calls the next handler in the chain. If it aborts the call chain, the end-point will not be accessible. My middleware is pretty simple, but it gets the job done:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// AuthorizeRequest is used to authorize a request for a certain end-point group.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">AuthorizeRequest</span><span class="p">()</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">HandlerFunc</span> <span class="p">{</span>
	<span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">session</span> <span class="o">:=</span> <span class="nx">sessions</span><span class="p">.</span><span class="nf">Default</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
		<span class="nx">v</span> <span class="o">:=</span> <span class="nx">session</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;user-id&#34;</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">v</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="nx">c</span><span class="p">.</span><span class="nf">HTML</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusUnauthorized</span><span class="p">,</span> <span class="s">&#34;error.tmpl&#34;</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span><span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="s">&#34;Please log in.&#34;</span><span class="p">})</span>
			<span class="nx">c</span><span class="p">.</span><span class="nf">Abort</span><span class="p">()</span>
		<span class="p">}</span>
		<span class="nx">c</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Note, that this only check if <code>user-id</code> is set or not. That&rsquo;s certainly not enough for a secure application. Its only supposed to be a simple example of the mechanics of the auth middleware. Also, the session usually contains more than one parameter. It&rsquo;s more likely that it contains several variables, which describe the user including a state for CORS protection. For CORS I&rsquo;d recommend using <a href="https://github.com/rs/cors">rs/cors</a>.</p>
<p>If you would try to access http://127.0.0.1:9090/battle/field without logging in, you&rsquo;d be redirected to an <code>error.tmpl</code> with the message: <strong>Please log in.</strong>.</p>
<h1 id="final-words">Final Words</h1>
<p>That&rsquo;s pretty much it. Important parts are:</p>
<ul>
<li>Saving the right information</li>
<li>Secure cookie store</li>
<li>CORS for sessions</li>
<li>Checks of the users details in the cookie</li>
<li>Authorised end-points</li>
<li>Session handling</li>
</ul>
<p>Any questions, remarks, ideas, are very welcomed in the comment section. There are plenty of very nice Go frameworks which do Google OAuth2 out of the box. I recommend using them, as they save you a lot of legwork.</p>
<p>Thank you for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>RScrap scraper</title>
      <link>https://skarlso.github.io/2016/10/06/rscrap-ruby-scraping-with-cronjob-scripts/</link>
      <pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/10/06/rscrap-ruby-scraping-with-cronjob-scripts/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hey folks.</p>
<p>So, there is this project called <a href="https://github.com/cantino/huginn">Huginn</a> which I absolutely love.</p>
<p>But the thing is, that for a couple of scrappers ( at least for me ), I don&rsquo;t want to spin up a whole rails app.</p>
<p>Hence, I&rsquo;ve come up with <a href="https://github.com/Skarlso/rscrap">RScrap</a>. Which is a bunch of Ruby scripts run as cron jobs on a raspberry pi. And because I dislike emails as well, and most of the time, I don&rsquo;t read them, I opted for a nicer solution. Enter the world of <a href="https://telegram.org">Telegram</a>. They provide you with the ability to create bots. You basically get an API key, and than using that key, you can send private messages, or even create an interactive bot which you can send messages too.</p>
<p>In my simple example, I&rsquo;m using it to send private messages to myself, but I could just as well, make it interactive and than tell it to run one of the scripts.</p>
<h1 id="the-code">The Code</h1>
<p>Let&rsquo;s take a look at what we got.</p>
<h2 id="the-main-scraper">The main scraper</h2>
<p>The main scraper, is simply bunch of convenience methods that wrap handling and working with the database and the telegram bot. That&rsquo;s all. It&rsquo;s very simple. Very short. The Telegram part is just this bit:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">send_message</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
  <span class="no">Telegram</span><span class="o">::</span><span class="no">Bot</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="vi">@token</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">bot</span><span class="o">|</span>
    <span class="n">bot</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">send_message</span><span class="p">(</span><span class="ss">chat_id</span><span class="p">:</span> <span class="vi">@id</span><span class="p">,</span> <span class="ss">text</span><span class="p">:</span> <span class="n">text</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></td></tr></table>
</div>
</div><p>Straightforward. Creating an interactive bot, would look something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="ch">#!/usr/bin/env ruby</span>
<span class="nb">require</span> <span class="s1">&#39;telegram/bot&#39;</span>

<span class="n">token</span> <span class="o">=</span> <span class="s1">&#39;YOUR_TELEGRAM_BOT_API_TOKEN&#39;</span>

<span class="no">Telegram</span><span class="o">::</span><span class="no">Bot</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">token</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">bot</span><span class="o">|</span>
  <span class="n">bot</span><span class="o">.</span><span class="n">listen</span> <span class="k">do</span> <span class="o">|</span><span class="n">message</span><span class="o">|</span>
    <span class="k">case</span> <span class="n">message</span><span class="o">.</span><span class="n">text</span>
    <span class="k">when</span> <span class="s1">&#39;/start&#39;</span>
      <span class="n">bot</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">send_message</span><span class="p">(</span><span class="ss">chat_id</span><span class="p">:</span> <span class="n">message</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">text</span><span class="p">:</span> <span class="s2">&#34;Hello, </span><span class="si">#{</span><span class="n">message</span><span class="o">.</span><span class="n">from</span><span class="o">.</span><span class="n">first_name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="k">when</span> <span class="s1">&#39;/stop&#39;</span>
      <span class="n">bot</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">send_message</span><span class="p">(</span><span class="ss">chat_id</span><span class="p">:</span> <span class="n">message</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">text</span><span class="p">:</span> <span class="s2">&#34;Bye, </span><span class="si">#{</span><span class="n">message</span><span class="o">.</span><span class="n">from</span><span class="o">.</span><span class="n">first_name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></td></tr></table>
</div>
</div><p>Basically, it will listen, and than you can send it messages and based on the parsed <code>message.text</code> you can define functions to call. For example, for rscrap I could define something like <code>run_script(script)</code>. And the command would be: <code>/run reddit</code>. Which will execute my reddit script. The possibilities are endless.</p>
<h2 id="the-scripts">The scripts</h2>
<p>The scripts use nokogiri to parse a web page, and than return a URL which will be sent by the TelegramBot. They are also saved in the database so that when a new comic strip comes out, I know that it&rsquo;s new. For reddit, I&rsquo;m saving a timestamp as well, and I collect everything after that timestamp through the reddit API as JSON, and send it as a bundled message with shortified links to the posts using bit.ly.</p>
<p>The scraping is most of the times the same for every comic. Thus, there is a helper method for it. The script itself, is very short. For example, lets look at gunnerkrigg court.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">require_relative</span> <span class="s1">&#39;../rscrap&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;nokogiri&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>

<span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;http://www.gunnerkrigg.com&#39;</span>
<span class="n">scrap</span> <span class="o">=</span> <span class="no">Rscrap</span><span class="o">.</span><span class="n">new</span>
<span class="n">page</span> <span class="o">=</span> <span class="no">Nokogiri</span><span class="o">::</span><span class="no">HTML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="n">url</span><span class="p">))</span>
<span class="n">comic_id</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;img.comic_image&#39;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="n">e</span> <span class="k">if</span> <span class="n">e</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;src&#39;</span> <span class="p">}</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span>
<span class="n">new_comic</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="n">url</span><span class="si">}#{</span><span class="n">comic_id</span><span class="si">}</span><span class="s2">&#34;</span>
<span class="n">scrap</span><span class="o">.</span><span class="n">send_new_comic</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">new_comic</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>The interesting part of it is this bit: <code>comic_id = page.css('img.comic_image')[0].select { |e| e if e[0] == 'src' }[0][1]</code>. It extracts the URL for the comic image, and stores it as an &ldquo;id&rdquo; of the comic. This than, is sent as a message which Telegram will embed. There is no need to visit the web page, the image is in your feed and you can view it directly. Just like an RSS ready.</p>
<h2 id="cron">Cron</h2>
<p>These scripts are best used in a cron job. The comics are usually running with a daily frequency, where as the reddit gatherer is running with an hour frequency. Basically, I&rsquo;m receiving updates on an hourly basis if there are new posts by then. Running ruby from cron was a bit tricky. I&rsquo;m using bundler for the environment, and came up with this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="m">0</span> 6-23 * * * /bin/bash -l -c <span class="s1">&#39;cd /home/&lt;youruser&gt;/rubyproj/rscrap &amp;&amp; bundle exec ruby scripts/reddit.rb&#39;</span>
<span class="m">0</span> 8,22 * * * /bin/bash -l -c <span class="s1">&#39;cd /home/&lt;youruser&gt;/rubyproj/rscrap &amp;&amp; bundle exec ruby scripts/gunnerkrigg.rb&#39;</span>
<span class="m">0</span> 8,22 * * * /bin/bash -l -c <span class="s1">&#39;cd /home/&lt;youruser&gt;/rubyproj/rscrap &amp;&amp; bundle exec ruby scripts/aws_blog.rb&#39;</span>
<span class="m">0</span> 5,23 * * * /bin/bash -l -c <span class="s1">&#39;cd /home/&lt;youruser&gt;/rubyproj/rscrap &amp;&amp; bundle exec ruby scripts/goblinscomic.rb&#39;</span>
<span class="m">0</span> 6,20 * * * /bin/bash -l -c <span class="s1">&#39;cd /home/&lt;youruser&gt;/rubyproj/rscrap &amp;&amp; bundle exec ruby scripts/xkcd.rb&#39;</span>
<span class="m">0</span> 7,19 * * * /bin/bash -l -c <span class="s1">&#39;cd /home/&lt;youruser&gt;/rubyproj/rscrap &amp;&amp; bundle exec ruby scripts/commitstrip.rb&#39;</span>
<span class="m">0</span> <span class="m">8</span> * * * /bin/bash -l -c <span class="s1">&#39;cd /home/&lt;youruser&gt;/rubyproj/rscrap &amp;&amp; bundle exec ruby scripts/sequiential_art.rb&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>And a telegram message for all these things, looks like this:
Reddit:
<img src="https://github.com/Skarlso/rscrap/raw/master/shorten.png" alt="TelegramIMReddit">
Comics:
<img src="https://github.com/Skarlso/rscrap/raw/master/rscrap2.png" alt="TelegramIMComics"></p>
<h1 id="conclusion">Conclusion</h1>
<p>That&rsquo;s it folks. Adding a new scraper is easy. I added the aws blog as a new entry as well by just copying the comics scripts. And I&rsquo;m also getting Weather Reports delivered every morning to me.</p>
<p>Have fun. Any questions, please feel free to leave a comment!</p>
<p>Thanks,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Budget Home Theather with a Headless Raspberry Pi and Flirc for Remote Controlling</title>
      <link>https://skarlso.github.io/2016/09/17/simple-hometheater-with-remote-and-flirc/</link>
      <pubDate>Sat, 17 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/09/17/simple-hometheater-with-remote-and-flirc/</guid>
      <description><![CDATA[<h2 id="intro">Intro</h2>
<p>Hello folks.</p>
<p>Today, I would like to tell you about my configuration for a low budget Home Theater setup.</p>
<p>My tools are as follows:</p>
<ul>
<li><a href="https://flirc.tv/">FLIRC</a></li>
<li><a href="https://www.raspberrypi.org/products/raspberry-pi-2-model-b/">Raspberry Pi 2</a></li>
<li>500G SSD</li>
<li>An a good &lsquo;ol wifi</li>
</ul>
<h2 id="tldr">TL;DR</h2>
<p>Use Flirc for remote control, <code>omxplayer</code> for streaming the movie from an SSD on a headless PI controller via SSH and enjoy a nice, cold Lemon - Menta beer.</p>
<h2 id="flirc">Flirc</h2>
<p>First, the remote control. So, I like to sit in my couch and watch the movie from there. I hate getting up, or having a keyboard at arm length to control the pi. Flirc is a very easy way of doing just that with a simple remote control.</p>
<p>It costs ~$22 and is easy to setup. Works with any kind of remote control. Setting up key bindings for the control, is as simple as starting the Flirc software and pressing buttons on the remote to map to keyboard keys. Now, my pi is running headless, and the Flirc binary isn&rsquo;t quite working with raspbian; so to do the binding, I just did that on my main machine. When I was done, I just plugged in the Flirc, and proceeded to setup the pi.</p>
<h2 id="raspberry-pi-2">Raspberry Pi 2</h2>
<p>The pi 2 is a small powerhouse. However, the SD card on which it sits is simply not fast enough. From time to time, I experienced lateness in sound, or stutter in video. So, instead of having the movie on the pi, I&rsquo;m streaming through a faster SSD with <a href="https://github.com/libfuse/sshfs">SSHFS</a>. For playing, I&rsquo;m using <code>omxplayer</code>. With omxplayer, I had a few problems, because sound was not coming through the HDMI cable. A little bit of research lead me to this change in the pi&rsquo;s boot config. Uncomment this line:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1">#hdmi_driver=2</span>
</code></pre></td></tr></table>
</div>
</div><p>After rebooting, I also, did this thing:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo apt-get install alsa-utils
sudo modprobe snd_bcm2835
sudo amixer -c <span class="m">0</span> cset <span class="nv">numid</span><span class="o">=</span><span class="m">3</span> <span class="m">2</span>
</code></pre></td></tr></table>
</div>
</div><p>This saved my bacon. The whole answer can be found here: <a href="http://raspberrypi.stackexchange.com/questions/44/why-is-my-audio-sound-output-not-working">Stackoverflow</a>.</p>
<p>Once SSHFS was working, and HDMI received sound, I just executed this command: <code>omxplayer -o hdmi /media/stream/my_movie.mkv</code>. This told omxplayer to use the local HDMI connection for video output.</p>
<p>All this was from my computer through an SSH session so I never controlled the pi directly. Once done, I proceeded to sit down with a nice, cold Lemon - Menta beer and a remote control.</p>
<p>Once little gotcha &ndash; <code>omxplayer</code> is controlled through the buttons + (volume up), - (volume down), <SPACE> (stop, play), and q for quitting. Flirc is able to map any key <em>combinations</em> on a keyboard as well to any button on the remote. Combinations can be done by selecting a control key and pressing another key. So mapping <code>+</code> to the volume up button was by pressing shift and then &lsquo;=&rsquo;.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>I enjoyed the movie while being able to adjust the volume, or pause it, when my popcorn was ready, and close the player when the movie was done. There are a number of other ways to do this, like using <a href="https://kodi.tv/">kodi</a> + <a href="https://play.google.com/store/apps/details?id=org.leetzone.android.yatsewidgetfree&amp;hl=en">yatse</a>. Which lets you remote control a media software with your mobile phone. But I&rsquo;m using the pi for a number of other things and the GUI is rather resource heavy.</p>
<p>There you have it folks. Might not be the easiest setup, but it&rsquo;s pretty awesome anyways.</p>
<p>Cheers,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Always Go with []byte</title>
      <link>https://skarlso.github.io/2016/08/19/always-go-with-bytes/</link>
      <pubDate>Fri, 19 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/08/19/always-go-with-bytes/</guid>
      <description><![CDATA[<p><em>Update</em>: This post ignored the fact that this works for utf-8 characters only. Characters which are stored on more than 1 byte
will cause trouble. Look at this <a href="https://go.dev/doc/effective_go#for">Effective Go Example</a>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="k">for</span> <span class="nx">pos</span><span class="p">,</span> <span class="nx">char</span> <span class="o">:=</span> <span class="k">range</span> <span class="s">&#34;日本\x80語&#34;</span> <span class="p">{</span> <span class="c1">// \x80 is an illegal UTF-8 encoding
</span><span class="c1"></span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;character %#U starts at byte position %d\n&#34;</span><span class="p">,</span> <span class="nx">char</span><span class="p">,</span> <span class="nx">pos</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Prints:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">character U+65E5 &#39;日&#39; starts at byte position 0
character U+672C &#39;本&#39; starts at byte position 3
character U+FFFD &#39;�&#39; starts at byte position 6
character U+8A9E &#39;語&#39; starts at byte position 7
</code></pre></td></tr></table>
</div>
</div><p>Keep this in mind when working with strings.</p>
<p>Another quick reminder&hellip; Always go with []byte if possible. I said it before, and I&rsquo;m going to say it over and over again. It&rsquo;s crucial.</p>
<p>Here is a little code from exercism.io. First, with strings:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">igpay</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;strings&#34;</span>
<span class="p">)</span>

<span class="c1">// PigLatin translates reguler old English into awesome pig-latin.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">PigLatin</span><span class="p">(</span><span class="nx">in</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">ret</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Fields</span><span class="p">(</span><span class="nx">in</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">ret</span> <span class="o">+=</span> <span class="nf">pigLatin</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#34; &#34;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Trim</span><span class="p">(</span><span class="nx">ret</span><span class="p">,</span> <span class="s">&#34; &#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">pigLatin</span><span class="p">(</span><span class="nx">in</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">ret</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">IndexAny</span><span class="p">(</span><span class="nx">in</span><span class="p">,</span> <span class="s">&#34;aeiou&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="nx">ret</span> <span class="o">+=</span> <span class="nx">in</span> <span class="o">+</span> <span class="s">&#34;ay&#34;</span>
        <span class="k">return</span>
    <span class="p">}</span>

    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">in</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nx">vowelPos</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">IndexAny</span><span class="p">(</span><span class="nx">in</span><span class="p">,</span> <span class="s">&#34;aeiou&#34;</span><span class="p">)</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;y&#39;</span> <span class="o">||</span> <span class="nx">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;x&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">vowelPos</span> <span class="p">&gt;</span> <span class="mi">1</span> <span class="p">{</span>
            <span class="nx">vowelPos</span> <span class="p">=</span> <span class="mi">0</span>
            <span class="nx">ret</span> <span class="p">=</span> <span class="nx">in</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="nx">vowelPos</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
            <span class="nx">adjustPosition</span> <span class="o">:=</span> <span class="nx">vowelPos</span>

            <span class="k">if</span> <span class="nx">in</span><span class="p">[</span><span class="nx">adjustPosition</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;u&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">in</span><span class="p">[</span><span class="nx">adjustPosition</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;q&#39;</span> <span class="p">{</span>
                <span class="nx">adjustPosition</span><span class="o">++</span>
            <span class="p">}</span>

            <span class="nx">ret</span> <span class="p">=</span> <span class="nx">in</span><span class="p">[</span><span class="nx">adjustPosition</span><span class="p">:]</span> <span class="o">+</span> <span class="nx">in</span><span class="p">[:</span><span class="nx">adjustPosition</span><span class="p">]</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">ret</span> <span class="o">+=</span> <span class="s">&#34;ay&#34;</span>
    <span class="k">return</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Than with []byte:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">igpay</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="c1">// &#34;fmt&#34;
</span><span class="c1"></span>    <span class="s">&#34;bytes&#34;</span>
<span class="p">)</span>

<span class="c1">// PigLatin translates reguler old English into awesome pig-latin.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">PigLatin</span><span class="p">(</span><span class="nx">in</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">ret</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">inBytes</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">in</span><span class="p">)</span>
    <span class="kd">var</span> <span class="nx">retBytes</span> <span class="p">[][]</span><span class="kt">byte</span>
    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">bytes</span><span class="p">.</span><span class="nf">Fields</span><span class="p">(</span><span class="nx">inBytes</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">v2</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">v</span><span class="p">))</span>
        <span class="nb">copy</span><span class="p">(</span><span class="nx">v2</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span>
        <span class="nx">retBytes</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">retBytes</span><span class="p">,</span> <span class="nf">pigLatin</span><span class="p">(</span><span class="nx">v2</span><span class="p">))</span>
    <span class="p">}</span>

    <span class="nx">ret</span> <span class="p">=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">bytes</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">retBytes</span><span class="p">,</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34; &#34;</span><span class="p">)))</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">pigLatin</span><span class="p">(</span><span class="nx">in</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="nx">ret</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="nx">bytes</span><span class="p">.</span><span class="nf">IndexAny</span><span class="p">(</span><span class="nx">in</span><span class="p">,</span> <span class="s">&#34;aeiou&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="nx">ret</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">in</span><span class="p">,</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;ay&#34;</span><span class="p">)</span><span class="o">...</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="p">}</span>

    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">in</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nx">vowelPos</span> <span class="o">:=</span> <span class="nx">bytes</span><span class="p">.</span><span class="nf">IndexAny</span><span class="p">(</span><span class="nx">in</span><span class="p">,</span> <span class="s">&#34;aeiou&#34;</span><span class="p">)</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;y&#39;</span> <span class="o">||</span> <span class="nx">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;x&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">vowelPos</span> <span class="p">&gt;</span> <span class="mi">1</span> <span class="p">{</span>
            <span class="nx">vowelPos</span> <span class="p">=</span> <span class="mi">0</span>
            <span class="nx">ret</span> <span class="p">=</span> <span class="nx">in</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="nx">vowelPos</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
            <span class="nx">adjustPosition</span> <span class="o">:=</span> <span class="nx">vowelPos</span>

            <span class="k">if</span> <span class="nx">in</span><span class="p">[</span><span class="nx">adjustPosition</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;u&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">in</span><span class="p">[</span><span class="nx">adjustPosition</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;q&#39;</span> <span class="p">{</span>
                <span class="nx">adjustPosition</span><span class="o">++</span>
            <span class="p">}</span>

            <span class="nx">in</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">in</span><span class="p">[</span><span class="nx">adjustPosition</span><span class="p">:],</span> <span class="nx">in</span><span class="p">[:</span><span class="nx">adjustPosition</span><span class="p">]</span><span class="o">...</span><span class="p">)</span>
            <span class="nx">ret</span> <span class="p">=</span> <span class="nx">in</span>
            <span class="c1">// fmt.Printf(&#34;%s\n&#34;, ret)
</span><span class="c1"></span>        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">ret</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">ret</span><span class="p">,</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;ay&#34;</span><span class="p">)</span><span class="o">...</span><span class="p">)</span>
    <span class="k">return</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>And than,the benchmarks of course:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">BenchmarkPigLatin-8          	  200000	     <span class="m">10688</span> ns/op
BenchmarkPigLatinStrings-8   	  100000	     <span class="m">15211</span> ns/op
PASS
</code></pre></td></tr></table>
</div>
</div><p>The improvement is not massive in this case, but it&rsquo;s more than enough to matter. And in a bigger, more complicated program, string concatenation will take a LOT of time away.</p>
<p>In Go, the <code>bytes</code> package has a 1-1 map compared to the <code>strings</code> packages, so chances are, if you are doing strings concatenations you will be able to port that piece of code easily to []byte.</p>
<p>That&rsquo;s all folks.</p>
<p>Happy coding,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Global variable for never changing regex</title>
      <link>https://skarlso.github.io/2016/08/16/never-changing-regex/</link>
      <pubDate>Tue, 16 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/08/16/never-changing-regex/</guid>
      <description><![CDATA[<p>Quick reminder. If you have a never changing regex in Go, do NOT put it into a frequently called function. ALWAYS put it into a global variable. I&rsquo;ll show you why.</p>
<p>Benchmark for code with a variable in a frequently called function:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">BenchmarkNumber-8     	   30000	     <span class="m">41633</span> ns/op
BenchmarkAreaCode-8   	   50000	     <span class="m">27736</span> ns/op
BenchmarkFormat-8     	   50000	     <span class="m">29263</span> ns/op
PASS
ok  	_/phone-number	5.110s
</code></pre></td></tr></table>
</div>
</div><p>Benchmark for code with the same variable outside in a global scope:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">BenchmarkNumber-8     	  300000	      <span class="m">5618</span> ns/op
BenchmarkAreaCode-8   	  500000	      <span class="m">3884</span> ns/op
BenchmarkFormat-8     	  300000	      <span class="m">4696</span> ns/op
PASS
ok  	_/phone-number	5.197s
</code></pre></td></tr></table>
</div>
</div><p>Notice the magnitude change in ns/op! That&rsquo;s something to keep an eye out for.</p>
<p>Thanks for reading!
Cheers,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Drupal missing ToolBar and settings not saving</title>
      <link>https://skarlso.github.io/2016/08/13/drupal-missing-toolbar-and-settings-not-saving/</link>
      <pubDate>Sat, 13 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/08/13/drupal-missing-toolbar-and-settings-not-saving/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>Quick gotcha, when working with Drupal. If you just freshly installed it, and everything seems to work fine, and yet you are experiencing things like, the admin toolbar is randomly disappearing, or configuration is not saved; than you might not have modrewrite enabled on your apache server.</p>
<p>Because, by default, Drupal has clean url enabled, that needs URL rewriting on apache.</p>
<p>So, step one.</p>
<p>Have this in your .htaccess file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">&lt;IfModule mod_rewrite.c&gt;
  RewriteEngine on
  ... <span class="c1"># and than a bunch of rewrite rules according to your leisure</span>
</code></pre></td></tr></table>
</div>
</div><p>Than look up this line in your httpd.conf file and remove the prefix &lsquo;#&rsquo;.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1">#LoadModule rewrite_module libexec/apache2/mod_rewrite.so</span>
</code></pre></td></tr></table>
</div>
</div><p>That is all. From there on, everything should work. If, you don&rsquo;t want the clean url setting, yet you can&rsquo;t disable it, and don&rsquo;t want to restart the server and edit the settings.php file; use drush like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">drush vset clean_url <span class="m">0</span> --yes
</code></pre></td></tr></table>
</div>
</div><p>This should disable it and bust the cache in the process so it&rsquo;s immediately visible.</p>
<p>That is all folks.</p>
<p>Cheers,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Jenkins Best Practices Talk</title>
      <link>https://skarlso.github.io/2016/07/28/jenkins-best-practices/</link>
      <pubDate>Thu, 28 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/07/28/jenkins-best-practices/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>I wanted to take the time to share with you a talk that I recently did.</p>
<p>The slides and the source I used, can be found here: <a href="https://github.com/Skarlso/jenkinsbestpractices">Github</a>.</p>
<p>And then, there is also a docker image which contains all the plugins, job configurations and all the practices which I did during the talk. Please feel free to have a go with it. <a href="https://hub.docker.com/r/skarlso/jenkinsbestpractices">DockerHub - Jenkins Best Practices</a>.</p>
<p>For easy access and reading, here are the slides on Slideshare: <a href="http://www.slideshare.net/GergelyBrautigam/jenkins-best-practices-meetup-slides">Jenkins Best Practices Slides</a>.</p>
<p>I, gladly answer any questions which should arise.</p>
<p>Thanks!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Ruby Sieve</title>
      <link>https://skarlso.github.io/2016/07/12/ruby-sieve/</link>
      <pubDate>Tue, 12 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/07/12/ruby-sieve/</guid>
      <description><![CDATA[<p>Though it could be done better, I&rsquo;m sure, but I&rsquo;m actually pretty satisfied with this one. It loops only twice as opposed to filtered ranges and whatnot other solutions to the sieve. I was thinking of rather creating a list and deleting elements from it, but that&rsquo;s already three loops.</p>
<p>Maybe I&rsquo;ll do a benchmark later on more solutions.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="c1"># Sieve contains a function to return a set of primes</span>
<span class="k">class</span> <span class="nc">Sieve</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
    <span class="vi">@n</span> <span class="o">=</span> <span class="n">n</span>
  <span class="k">end</span>

  <span class="c1"># Returns a list of primes up to a certain limit</span>
  <span class="c1"># @param n limit</span>
  <span class="c1"># @return list of primes</span>
  <span class="k">def</span> <span class="nf">primes</span>
    <span class="n">marked</span> <span class="o">=</span> <span class="o">[]</span>
    <span class="n">primes</span> <span class="o">=</span> <span class="o">[]</span>
    <span class="p">(</span><span class="mi">2</span><span class="o">..</span><span class="vi">@n</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
      <span class="k">unless</span> <span class="n">marked</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
        <span class="n">primes</span><span class="o">.</span><span class="n">push</span> <span class="n">e</span>
        <span class="p">(</span><span class="n">e</span><span class="o">..</span><span class="vi">@n</span><span class="p">)</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">marked</span><span class="o">.</span><span class="n">push</span> <span class="n">s</span> <span class="p">}</span>
      <span class="k">end</span>
    <span class="k">end</span>
    <span class="n">primes</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></td></tr></table>
</div>
</div><p>Cheers,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Simple hook to rid of trouble</title>
      <link>https://skarlso.github.io/2016/07/12/simple-hook-to-rid-of-trouble/</link>
      <pubDate>Tue, 12 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/07/12/simple-hook-to-rid-of-trouble/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>This is but a simple git hook to run a test in order to ensure you can push. It also ignores the vendor folder if you happen to have on in your directory.</p>
<p>Edit the file under <code>.git/hooks/pre-push.sample</code> and add this at the end before the <code>exit 0</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">go <span class="nb">test</span> <span class="k">$(</span>go list ./... <span class="p">|</span>grep -v vendor<span class="k">)</span>
<span class="nv">RESULT</span><span class="o">=</span><span class="nv">$?</span>
<span class="k">if</span> <span class="o">[</span> <span class="nv">$RESULT</span> -ne <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nb">echo</span> <span class="s2">&#34;Failed test run. Disallowing push.&#34;</span>
    <span class="nb">exit</span> <span class="m">1</span>
<span class="k">fi</span>
</code></pre></td></tr></table>
</div>
</div><p>After this, rename the file to <code>pre-push</code> removing the .sample from it.</p>
<p>If you now, mess something up, you should see something like this before your push:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># github.com/Skarlso/goprogressquest</span>
./create.go:40: undefined: sha1 in sha1.Sum
./create.go:41: undefined: fmt in fmt.Sprintf
./create.go:115: undefined: json in json.Unmarshal
./create.go:130: undefined: json in json.Unmarshal
FAIL	github.com/Skarlso/goprogressquest <span class="o">[</span>build failed<span class="o">]</span>
Failed <span class="nb">test</span> run. Disallowing push.
error: failed to push some refs to <span class="s1">&#39;git@github.com:Skarlso/goprogressquest.git&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>That is all.</p>
<p>Cheers,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How to do Google sign-in with Go</title>
      <link>https://skarlso.github.io/2016/06/12/google-signin-with-go/</link>
      <pubDate>Sun, 12 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/06/12/google-signin-with-go/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>Today, I would like to write up a step - by - step guide with a sample web app on how to do Google Sign-In and authorization.</p>
<p>Let&rsquo;s get started.</p>
<p><strong>EDIT</strong>: A sample project of this, and <a href="http://skarlso.github.io/2016/11/02/google-signin-with-go-part2/">Part 2</a>, can be found
<a href="https://github.com/Skarlso/goquestwebapp">here</a> or <a href="https://github.com/Skarlso/google-oauth-go-sample">here</a>.</p>
<h1 id="setup">Setup</h1>
<h2 id="google-oauth-token">Google OAuth token</h2>
<p>First what you need is, to register your application with Google, so you&rsquo;ll get a Token that you can use to authorize later calls to Google services.</p>
<p>You can do that here: <a href="https://console.developers.google.com/iam-admin/projects">Google Developer Console</a>. You&rsquo;ll have to create a new project. Once it&rsquo;s done, click on <code>Credentials</code> and create an OAuth token. You should see something like this: &ldquo;To create an OAuth client ID, you must first set a product name on the consent screen.&rdquo;. Go through the questions, like, what type your application is, and once you arrive at stage where it&rsquo;s asking for your application&rsquo;s name &ndash; there is a section asking for redirect URLs; there, write the url you wish to use when authorising your user. If you don&rsquo;t know this yet, don&rsquo;t fret, you can come back and change it later. Do NOT use <code>localhost</code>. If you are running on your own, use http://127.0.0.1:port/whatever.</p>
<p>This will get you a <code>client ID</code> and a <code>client secret</code>. I&rsquo;m going to save these into a file which will sit next to my web app. It could be stored more securely, for example, in a database or a mounted secure, encrypted drive, and so and so forth.</p>
<p>Your application can now be identified through Google services.</p>
<h1 id="the-application">The Application</h1>
<h2 id="libraries">Libraries</h2>
<p>Google has a nice library to use with OAuth 2.0. The library is available here: <a href="https://github.com/golang/oauth2">Google OAth 2.0</a>. It&rsquo;s a bit cryptic at first, but not to worry. After a bit of fiddling you&rsquo;ll understand fast what it does. I&rsquo;m also using <a href="https://github.com/gin-gonic/gin">Gin</a>, and Gin&rsquo;s session handling middleware <a href="https://github.com/gin-gonic/contrib/tree/master/sessions">Gin-Session</a>.</p>
<h2 id="setup---credentials">Setup - Credentials</h2>
<p>Let&rsquo;s create a setup which configures your credentials from the file you saved earlier. This is pretty straightforward.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Credentials which stores google ids.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Credentials</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">Cid</span> <span class="kt">string</span> <span class="s">`json:&#34;cid&#34;`</span>
    <span class="nx">Csecret</span> <span class="kt">string</span> <span class="s">`json:&#34;csecret&#34;`</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">c</span> <span class="nx">Credentials</span>
    <span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadFile</span><span class="p">(</span><span class="s">&#34;./creds.json&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;File error: %v\n&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
        <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">json</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">c</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Once you have the creds loaded, you can now go on to construct the OAuth client.</p>
<h2 id="setup---oauth-client">Setup - OAuth client</h2>
<p>Construct the OAuth config like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">conf</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">oauth2</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
  <span class="nx">ClientID</span><span class="p">:</span>     <span class="nx">c</span><span class="p">.</span><span class="nx">Cid</span><span class="p">,</span>
  <span class="nx">ClientSecret</span><span class="p">:</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Csecret</span><span class="p">,</span>
  <span class="nx">RedirectURL</span><span class="p">:</span>  <span class="s">&#34;http://localhost:9090/auth&#34;</span><span class="p">,</span>
  <span class="nx">Scopes</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
    <span class="s">&#34;https://www.googleapis.com/auth/userinfo.email&#34;</span><span class="p">,</span> <span class="c1">// You have to select your own scope from here -&gt; https://developers.google.com/identity/protocols/googlescopes#google_sign-in
</span><span class="c1"></span>  <span class="p">},</span>
  <span class="nx">Endpoint</span><span class="p">:</span> <span class="nx">google</span><span class="p">.</span><span class="nx">Endpoint</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>It will give you a struct which you can then use to Authorize the user in the google domain. Next, all you need to do is call <code>AuthCodeURL</code> on this config. It will give you a URL which redirects to a Google Sign-In form. Once the user fills that out and clicks &lsquo;Allow&rsquo;, you&rsquo;ll get back a TOKEN in the <code>code</code> query parameter and a <code>state</code> which helps protect against CSRF attacks. Always check if the provided state is the same which you provided with AuthCodeURL. This will look something like this <code>http://127.0.0.1:9090/auth?code=4FLKFskdjflf3343d4f&amp;state=lhfu3f983j;asdf</code>. Small function for this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">getLoginURL</span><span class="p">(</span><span class="nx">state</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
    <span class="c1">// State can be some kind of random generated hash string.
</span><span class="c1"></span>    <span class="c1">// See relevant RFC: http://tools.ietf.org/html/rfc6749#section-10.12
</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">conf</span><span class="p">.</span><span class="nf">AuthCodeURL</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Construct a button which the user can click and be redirected to the Google Sign-In form. When constructing the url, we must do one more thing. Create a secure state token and save it in the form of a cookie for the current user.</p>
<h2 id="random-state-and-button-construction">Random State and Button construction</h2>
<p>Small piece of code random token:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">randToken</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="nx">b</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
	<span class="nx">rand</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
	<span class="k">return</span> <span class="nx">base64</span><span class="p">.</span><span class="nx">StdEncoding</span><span class="p">.</span><span class="nf">EncodeToString</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Storing it in a session and constructing the button:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">loginHandler</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">state</span> <span class="p">=</span> <span class="nf">randToken</span><span class="p">()</span>
    <span class="nx">session</span> <span class="o">:=</span> <span class="nx">sessions</span><span class="p">.</span><span class="nf">Default</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
    <span class="nx">session</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;state&#34;</span><span class="p">,</span> <span class="nx">state</span><span class="p">)</span>
    <span class="nx">session</span><span class="p">.</span><span class="nf">Save</span><span class="p">()</span>
    <span class="nx">c</span><span class="p">.</span><span class="nx">Writer</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;&lt;html&gt;&lt;title&gt;Golang Google&lt;/title&gt; &lt;body&gt; &lt;a href=&#39;&#34;</span> <span class="o">+</span> <span class="nf">getLoginURL</span><span class="p">()</span> <span class="o">+</span> <span class="s">&#34;&#39;&gt;&lt;button&gt;Login with Google!&lt;/button&gt; &lt;/a&gt; &lt;/body&gt;&lt;/html&gt;&#34;</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>It&rsquo;s not the nicest button I ever come up with, but it will have to do.</p>
<h1 id="user-information">User Information</h1>
<p>After you got the token, you can construct an authorised Google HTTP Client, which let&rsquo;s you call Google related services and retrieve information about the user.</p>
<h2 id="getting-the-client">Getting the Client</h2>
<p>Before we construct a client, we must check if the retrieved state is still the same compared to the one we provided. I&rsquo;m doing this before constructing the client. Together this looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">authHandler</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Check state validity.
</span><span class="c1"></span>    <span class="nx">session</span> <span class="o">:=</span> <span class="nx">sessions</span><span class="p">.</span><span class="nf">Default</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
    <span class="nx">retrievedState</span> <span class="o">:=</span> <span class="nx">session</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;state&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">retrievedState</span> <span class="o">!=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="s">&#34;state&#34;</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">c</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusUnauthorized</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Invalid session state: %s&#34;</span><span class="p">,</span> <span class="nx">retrievedState</span><span class="p">))</span>
        <span class="k">return</span>
    <span class="p">}</span>
    <span class="c1">// Handle the exchange code to initiate a transport.
</span><span class="c1"></span>  	<span class="nx">tok</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">conf</span><span class="p">.</span><span class="nf">Exchange</span><span class="p">(</span><span class="nx">oauth2</span><span class="p">.</span><span class="nx">NoContext</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="s">&#34;code&#34;</span><span class="p">))</span>
  	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
  		<span class="nx">c</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
          <span class="k">return</span>
  	<span class="p">}</span>
    <span class="c1">// Construct the client.
</span><span class="c1"></span>    <span class="nx">client</span> <span class="o">:=</span> <span class="nx">conf</span><span class="p">.</span><span class="nf">Client</span><span class="p">(</span><span class="nx">oauth2</span><span class="p">.</span><span class="nx">NoContext</span><span class="p">,</span> <span class="nx">tok</span><span class="p">)</span>
    <span class="o">...</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="obtaining-information">Obtaining information</h2>
<p>Our next step is to retrieve information about the user. To achieve this, call Google&rsquo;s API with the authorised client. The code for that is:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="o">...</span>
<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;https://www.googleapis.com/oauth2/v3/userinfo&#34;</span><span class="p">)</span>
<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
    <span class="nx">c</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
    <span class="k">return</span>
<span class="p">}</span>
<span class="k">defer</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
<span class="nx">data</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Resp body: &#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
<span class="o">...</span>
</code></pre></td></tr></table>
</div>
</div><p>And this will yield a body like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;sub&#34;</span><span class="p">:</span> <span class="s2">&#34;1111111111111111111111&#34;</span><span class="p">,</span>
  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Your Name&#34;</span><span class="p">,</span>
  <span class="nt">&#34;given_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Your&#34;</span><span class="p">,</span>
  <span class="nt">&#34;family_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Name&#34;</span><span class="p">,</span>
  <span class="nt">&#34;profile&#34;</span><span class="p">:</span> <span class="s2">&#34;https://plus.google.com/1111111111111111111111&#34;</span><span class="p">,</span>
  <span class="nt">&#34;picture&#34;</span><span class="p">:</span> <span class="s2">&#34;https://lh3.googleusercontent.com/asdfadsf/AAAAAAAAAAI/Aasdfads/Xasdfasdfs/photo.jpg&#34;</span><span class="p">,</span>
  <span class="nt">&#34;email&#34;</span><span class="p">:</span> <span class="s2">&#34;your@gmail.com&#34;</span><span class="p">,</span>
  <span class="nt">&#34;email_verified&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="nt">&#34;gender&#34;</span><span class="p">:</span> <span class="s2">&#34;male&#34;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Parse it, and you&rsquo;ve got an email which you can store somewhere for registration purposes. At this point, your user is not yet Authenticated. For that, I&rsquo;m going to post a second post, which describes how to go on. Retrieving the stored email address, and user session handling with Gin and MongoDB.</p>
<h1 id="putting-it-all-together">Putting it all together</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;crypto/rand&#34;</span>
    <span class="s">&#34;encoding/base64&#34;</span>
    <span class="s">&#34;encoding/json&#34;</span>
    <span class="s">&#34;io/ioutil&#34;</span>
    <span class="s">&#34;fmt&#34;</span>
    <span class="s">&#34;log&#34;</span>
    <span class="s">&#34;os&#34;</span>
    <span class="s">&#34;net/http&#34;</span>

    <span class="s">&#34;github.com/gin-gonic/contrib/sessions&#34;</span>
    <span class="s">&#34;github.com/gin-gonic/gin&#34;</span>
    <span class="s">&#34;golang.org/x/oauth2&#34;</span>
    <span class="s">&#34;golang.org/x/oauth2/google&#34;</span>
<span class="p">)</span>

<span class="c1">// Credentials which stores google ids.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Credentials</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">Cid</span>     <span class="kt">string</span> <span class="s">`json:&#34;cid&#34;`</span>
    <span class="nx">Csecret</span> <span class="kt">string</span> <span class="s">`json:&#34;csecret&#34;`</span>
<span class="p">}</span>

<span class="c1">// User is a retrieved and authentiacted user.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">User</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">Sub</span> <span class="kt">string</span> <span class="s">`json:&#34;sub&#34;`</span>
    <span class="nx">Name</span> <span class="kt">string</span> <span class="s">`json:&#34;name&#34;`</span>
    <span class="nx">GivenName</span> <span class="kt">string</span> <span class="s">`json:&#34;given_name&#34;`</span>
    <span class="nx">FamilyName</span> <span class="kt">string</span> <span class="s">`json:&#34;family_name&#34;`</span>
    <span class="nx">Profile</span> <span class="kt">string</span> <span class="s">`json:&#34;profile&#34;`</span>
    <span class="nx">Picture</span> <span class="kt">string</span> <span class="s">`json:&#34;picture&#34;`</span>
    <span class="nx">Email</span> <span class="kt">string</span> <span class="s">`json:&#34;email&#34;`</span>
    <span class="nx">EmailVerified</span> <span class="kt">string</span> <span class="s">`json:&#34;email_verified&#34;`</span>
    <span class="nx">Gender</span> <span class="kt">string</span> <span class="s">`json:&#34;gender&#34;`</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">cred</span> <span class="nx">Credentials</span>
<span class="kd">var</span> <span class="nx">conf</span> <span class="o">*</span><span class="nx">oauth2</span><span class="p">.</span><span class="nx">Config</span>
<span class="kd">var</span> <span class="nx">state</span> <span class="kt">string</span>
<span class="kd">var</span> <span class="nx">store</span> <span class="p">=</span> <span class="nx">sessions</span><span class="p">.</span><span class="nf">NewCookieStore</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;secret&#34;</span><span class="p">))</span>

<span class="kd">func</span> <span class="nf">randToken</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="nx">b</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
	<span class="nx">rand</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
	<span class="k">return</span> <span class="nx">base64</span><span class="p">.</span><span class="nx">StdEncoding</span><span class="p">.</span><span class="nf">EncodeToString</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadFile</span><span class="p">(</span><span class="s">&#34;./creds.json&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;File error: %v\n&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
        <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">json</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">cred</span><span class="p">)</span>

    <span class="nx">conf</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">oauth2</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
        <span class="nx">ClientID</span><span class="p">:</span>     <span class="nx">cred</span><span class="p">.</span><span class="nx">Cid</span><span class="p">,</span>
        <span class="nx">ClientSecret</span><span class="p">:</span> <span class="nx">cred</span><span class="p">.</span><span class="nx">Csecret</span><span class="p">,</span>
        <span class="nx">RedirectURL</span><span class="p">:</span>  <span class="s">&#34;http://127.0.0.1:9090/auth&#34;</span><span class="p">,</span>
        <span class="nx">Scopes</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
            <span class="s">&#34;https://www.googleapis.com/auth/userinfo.email&#34;</span><span class="p">,</span> <span class="c1">// You have to select your own scope from here -&gt; https://developers.google.com/identity/protocols/googlescopes#google_sign-in
</span><span class="c1"></span>        <span class="p">},</span>
        <span class="nx">Endpoint</span><span class="p">:</span> <span class="nx">google</span><span class="p">.</span><span class="nx">Endpoint</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">indexHandler</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">c</span><span class="p">.</span><span class="nf">HTML</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;index.tmpl&#34;</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{})</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">getLoginURL</span><span class="p">(</span><span class="nx">state</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">conf</span><span class="p">.</span><span class="nf">AuthCodeURL</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">authHandler</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Handle the exchange code to initiate a transport.
</span><span class="c1"></span>    <span class="nx">session</span> <span class="o">:=</span> <span class="nx">sessions</span><span class="p">.</span><span class="nf">Default</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
    <span class="nx">retrievedState</span> <span class="o">:=</span> <span class="nx">session</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;state&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">retrievedState</span> <span class="o">!=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="s">&#34;state&#34;</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">c</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusUnauthorized</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Invalid session state: %s&#34;</span><span class="p">,</span> <span class="nx">retrievedState</span><span class="p">))</span>
        <span class="k">return</span>
    <span class="p">}</span>

	<span class="nx">tok</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">conf</span><span class="p">.</span><span class="nf">Exchange</span><span class="p">(</span><span class="nx">oauth2</span><span class="p">.</span><span class="nx">NoContext</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="s">&#34;code&#34;</span><span class="p">))</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">c</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
        <span class="k">return</span>
	<span class="p">}</span>

	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">conf</span><span class="p">.</span><span class="nf">Client</span><span class="p">(</span><span class="nx">oauth2</span><span class="p">.</span><span class="nx">NoContext</span><span class="p">,</span> <span class="nx">tok</span><span class="p">)</span>
	<span class="nx">email</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;https://www.googleapis.com/oauth2/v3/userinfo&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">c</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
        <span class="k">return</span>
	<span class="p">}</span>
    <span class="k">defer</span> <span class="nx">email</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
    <span class="nx">data</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">email</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
    <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Email body: &#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
    <span class="nx">c</span><span class="p">.</span><span class="nf">Status</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">loginHandler</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">state</span> <span class="p">=</span> <span class="nf">randToken</span><span class="p">()</span>
    <span class="nx">session</span> <span class="o">:=</span> <span class="nx">sessions</span><span class="p">.</span><span class="nf">Default</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
    <span class="nx">session</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;state&#34;</span><span class="p">,</span> <span class="nx">state</span><span class="p">)</span>
    <span class="nx">session</span><span class="p">.</span><span class="nf">Save</span><span class="p">()</span>
    <span class="nx">c</span><span class="p">.</span><span class="nx">Writer</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;&lt;html&gt;&lt;title&gt;Golang Google&lt;/title&gt; &lt;body&gt; &lt;a href=&#39;&#34;</span> <span class="o">+</span> <span class="nf">getLoginURL</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#34;&#39;&gt;&lt;button&gt;Login with Google!&lt;/button&gt; &lt;/a&gt; &lt;/body&gt;&lt;/html&gt;&#34;</span><span class="p">))</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">router</span> <span class="o">:=</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">Default</span><span class="p">()</span>
    <span class="nx">router</span><span class="p">.</span><span class="nf">Use</span><span class="p">(</span><span class="nx">sessions</span><span class="p">.</span><span class="nf">Sessions</span><span class="p">(</span><span class="s">&#34;goquestsession&#34;</span><span class="p">,</span> <span class="nx">store</span><span class="p">))</span>
    <span class="nx">router</span><span class="p">.</span><span class="nf">Static</span><span class="p">(</span><span class="s">&#34;/css&#34;</span><span class="p">,</span> <span class="s">&#34;./static/css&#34;</span><span class="p">)</span>
    <span class="nx">router</span><span class="p">.</span><span class="nf">Static</span><span class="p">(</span><span class="s">&#34;/img&#34;</span><span class="p">,</span> <span class="s">&#34;./static/img&#34;</span><span class="p">)</span>
    <span class="nx">router</span><span class="p">.</span><span class="nf">LoadHTMLGlob</span><span class="p">(</span><span class="s">&#34;templates/*&#34;</span><span class="p">)</span>

    <span class="nx">router</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">indexHandler</span><span class="p">)</span>
    <span class="nx">router</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/login&#34;</span><span class="p">,</span> <span class="nx">loginHandler</span><span class="p">)</span>
    <span class="nx">router</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/auth&#34;</span><span class="p">,</span> <span class="nx">authHandler</span><span class="p">)</span>

    <span class="nx">router</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="s">&#34;127.0.0.1:9090&#34;</span><span class="p">)</span>
<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This is it folks. I hope this helped. Any comments or advices are welcomed.</p>
<h1 id="google-api-documentation">Google API Documentation</h1>
<p>The documentation to this whole process, and MUCH more information can be found here: <a href="https://developers.google.com/identity/protocols/OAuth2">Google API Docs</a>.</p>
<p>Thanks for reading,
Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>Minecraft world automatic backup to AWS S3 bucket - Part 2 (Custom functions)</title>
      <link>https://skarlso.github.io/2016/04/17/minecraft-server-aws-s3-backup-part2/</link>
      <pubDate>Sun, 17 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/04/17/minecraft-server-aws-s3-backup-part2/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>Got an update for the backup script. This time, you&rsquo;ll have the ability to implement your own upload capabilities. I provide a mock implementation for the required functions.</p>
<p>Here is the script again, now modified and a bit cleaned up. I hope it&rsquo;s helpful.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="k">if</span> <span class="o">[[</span> -t <span class="m">1</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nv">colors</span><span class="o">=</span><span class="k">$(</span>tput colors<span class="k">)</span>
    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$colors</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nv">RED</span><span class="o">=</span><span class="s1">&#39;\033[0;31m&#39;</span>
        <span class="nv">LIGHT_GREEN</span><span class="o">=</span><span class="s1">&#39;\033[1;32m&#39;</span>
        <span class="nv">NC</span><span class="o">=</span><span class="s1">&#39;\033[0m&#39;</span>
    <span class="k">fi</span>
<span class="k">fi</span>

<span class="k">if</span> <span class="o">[[</span> -z <span class="si">${</span><span class="nv">MINECRAFT_BUCKET</span><span class="si">}</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nb">printf</span> <span class="s2">&#34;Please set the env variable %bMINECRAFT_BUCKET%b to the s3 archive bucket name.\n&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">RED</span><span class="si">}</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">NC</span><span class="si">}</span><span class="s2">&#34;</span>
    <span class="nb">exit</span> <span class="m">1</span>
<span class="k">fi</span>

<span class="k">if</span> <span class="o">[[</span> -z <span class="si">${</span><span class="nv">MINECRAFT_ARCHIVE_LIMIT</span><span class="si">}</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nb">printf</span> <span class="s2">&#34;Please set the env variable %bMINECRAFT_ARCHIVE_LIMIT%b to limit the number of archives to keep.\n&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">RED</span><span class="si">}</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">NC</span><span class="si">}</span><span class="s2">&#34;</span>
    <span class="nb">exit</span> <span class="m">1</span>
<span class="k">fi</span>

<span class="k">if</span> <span class="o">[[</span> -z <span class="si">${</span><span class="nv">MINECRAFT_WORLD</span><span class="si">}</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nb">printf</span> <span class="s2">&#34;Please set the env variable %bMINECRAFT_WORLD%b to specify what world to back-up.\n&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">RED</span><span class="si">}</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">NC</span><span class="si">}</span><span class="s2">&#34;</span>
    <span class="nb">exit</span> <span class="m">1</span>
<span class="k">fi</span>

<span class="nv">backup_world</span><span class="o">=</span><span class="si">${</span><span class="nv">MINECRAFT_WORLD</span><span class="si">}</span>
<span class="nv">backup_bucket</span><span class="o">=</span><span class="si">${</span><span class="nv">MINECRAFT_BUCKET</span><span class="si">}</span>
<span class="nv">backup_limit</span><span class="o">=</span><span class="si">${</span><span class="nv">MINECRAFT_ARCHIVE_LIMIT</span><span class="si">}</span>
<span class="nv">archive_name</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">backup_world</span><span class="si">}</span><span class="s2">-</span><span class="k">$(</span>date +<span class="s2">&#34;%H-%M-%S-%m-%d-%Y&#34;</span><span class="k">)</span><span class="s2">.zip&#34;</span>

<span class="k">function</span> create_archive <span class="o">{</span>
    <span class="nb">printf</span> <span class="s2">&#34;Creating archive of %b</span><span class="si">${</span><span class="nv">backup_world</span><span class="si">}</span><span class="s2">%b\n&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">RED</span><span class="si">}</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">NC</span><span class="si">}</span><span class="s2">&#34;</span>
    zip -r <span class="nv">$archive_name</span> <span class="nv">$backup_world</span>
<span class="o">}</span>

<span class="k">function</span> amazon_bak <span class="o">{</span>

    create_archive

    <span class="nb">printf</span> <span class="s2">&#34;Checking if bucket has more than %b</span><span class="si">${</span><span class="nv">backup_limit</span><span class="si">}</span><span class="s2">%b files already.\n&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">RED</span><span class="si">}</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">NC</span><span class="si">}</span><span class="s2">&#34;</span>
    <span class="nv">content</span><span class="o">=(</span> <span class="k">$(</span>aws s3 ls s3://<span class="nv">$backup_bucket</span> <span class="p">|</span> awk <span class="s1">&#39;{print $4}&#39;</span><span class="k">)</span> <span class="o">)</span>

    <span class="k">if</span> <span class="o">[[</span> <span class="si">${#</span><span class="nv">content</span><span class="p">[@]</span><span class="si">}</span> -eq <span class="nv">$backup_limit</span> <span class="o">||</span> <span class="si">${#</span><span class="nv">content</span><span class="p">[@]</span><span class="si">}</span> -gt <span class="nv">$backup_limit</span>  <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nb">echo</span> <span class="s2">&#34;There are too many archives. Deleting oldest one.&#34;</span>
        <span class="c1"># We can assume here that the list is in cronological order</span>
    	<span class="nb">printf</span> <span class="s2">&#34;%bs3://</span><span class="si">${</span><span class="nv">backup_bucket</span><span class="si">}</span><span class="s2">/</span><span class="si">${</span><span class="nv">content</span><span class="p">[0]</span><span class="si">}</span><span class="s2">\n%b&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">RED</span><span class="si">}</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">NC</span><span class="si">}</span><span class="s2">&#34;</span>
        aws s3 rm s3://<span class="nv">$backup_bucket</span>/<span class="si">${</span><span class="nv">content</span><span class="p">[0]</span><span class="si">}</span>
    <span class="k">fi</span>

    <span class="nb">printf</span> <span class="s2">&#34;Uploading %b</span><span class="si">${</span><span class="nv">archive_name</span><span class="si">}</span><span class="s2">%b to s3 archive bucket.\n&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">RED</span><span class="si">}</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">NC</span><span class="si">}</span><span class="s2">&#34;</span>
    <span class="nv">state</span><span class="o">=</span><span class="k">$(</span>aws s3 cp <span class="nv">$archive_name</span> s3://<span class="nv">$backup_bucket</span><span class="k">)</span>

    <span class="k">if</span> <span class="o">[[</span> <span class="s2">&#34;</span><span class="nv">$state</span><span class="s2">&#34;</span> <span class="o">=</span>~ <span class="s2">&#34;upload:&#34;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nb">printf</span> <span class="s2">&#34;File upload %bsuccessful%b.\n&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">LIGHT_GREEN</span><span class="si">}</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">NC</span><span class="si">}</span><span class="s2">&#34;</span>
    <span class="k">else</span>
        <span class="nb">printf</span> <span class="s2">&#34;%bError%b occured while uploading archive. Please investigate.\n&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">RED</span><span class="si">}</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">NC</span><span class="si">}</span><span class="s2">&#34;</span>
    <span class="k">fi</span>
<span class="o">}</span>

<span class="k">function</span> custom <span class="o">{</span>
    <span class="k">if</span> <span class="o">[[</span> -e custom.sh <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nb">source</span> ./custom.sh
    <span class="k">else</span>
        <span class="nb">echo</span> <span class="s2">&#34;custom.sh script not found. Please implement the apropriate functions.&#34;</span>
        <span class="nb">exit</span> <span class="m">1</span>
    <span class="k">fi</span>

    <span class="nb">echo</span> <span class="s2">&#34;Checking for the number of files. Limit is: </span><span class="nv">$backup_limit</span><span class="s2">.&#34;</span>
    <span class="nv">files</span><span class="o">=(</span> <span class="k">$(</span>list<span class="k">)</span> <span class="o">)</span>
    <span class="k">if</span> <span class="o">[[</span> <span class="si">${#</span><span class="nv">files</span><span class="p">[@]</span><span class="si">}</span> -eq <span class="nv">$backup_limit</span> <span class="o">||</span> <span class="si">${#</span><span class="nv">files</span><span class="p">[@]</span><span class="si">}</span> -gt <span class="nv">$backup_limit</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nb">echo</span> <span class="s2">&#34;Deleting extra file.&#34;</span>
        delete <span class="si">${</span><span class="nv">files</span><span class="p">[0]</span><span class="si">}</span>
        <span class="k">if</span> <span class="o">[[</span> <span class="nv">$?</span> !<span class="o">=</span> <span class="m">0</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
            <span class="nb">printf</span> <span class="s2">&#34;%bFailed%b to delete file. Please investigate failure.&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">RED</span><span class="si">}</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">NC</span><span class="si">}</span><span class="s2">&#34;</span>
            <span class="nb">exit</span> <span class="nv">$?</span>
        <span class="k">fi</span>
    <span class="k">fi</span>

    <span class="nb">echo</span> <span class="s2">&#34;Zipping world.&#34;</span>
    create_archive

    <span class="nb">echo</span> <span class="s2">&#34;Uploading world.&#34;</span>
    upload <span class="nv">$archive_name</span>

    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$?</span> !<span class="o">=</span> <span class="m">0</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nb">printf</span> <span class="s2">&#34;%bFailed%b to upload archive. Please investigate the error.&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">RED</span><span class="si">}</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">NC</span><span class="si">}</span><span class="s2">&#34;</span>
        <span class="nb">exit</span> <span class="nv">$?</span>
    <span class="k">fi</span>

    <span class="nb">printf</span> <span class="s2">&#34;Upload %bsuccessful%b&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">LIGHT_GREEN</span><span class="si">}</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">NC</span><span class="si">}</span><span class="s2">&#34;</span>
<span class="o">}</span>

<span class="k">function</span> <span class="nb">help</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">&#34;Usage:&#34;</span>
    <span class="nb">echo</span> <span class="s2">&#34;./backup_world [METHOD]&#34;</span>
    <span class="nb">echo</span> <span class="s2">&#34;Exp.: ./backup_world aws|./backup_world custom|./backup_world dropbox&#34;</span>
    <span class="nb">echo</span> <span class="s2">&#34;Each method has it&#39;s own environment properties that it requires.&#34;</span>
    <span class="nb">echo</span> <span class="s2">&#34;Global: MINECRAFT_WORLD|MINECRAFT_BUCKET|MINECRAFT_ARCHIVE_LIMIT&#34;</span>
    <span class="nb">echo</span> <span class="s2">&#34;Custom: Have a file, called &#39;custom.sh&#39; which is sourced.&#34;</span>
    <span class="nb">echo</span> <span class="s2">&#34;Implement these three functions: upload | list | delete.&#34;</span>
    <span class="nb">echo</span> <span class="s2">&#34;upload -&gt; should return exit code 0 on success, should return exit code 1 on failure.&#34;</span>
    <span class="nb">echo</span> <span class="s2">&#34;list -&gt; should return a list of cronologically ordered items.&#34;</span>
    <span class="nb">echo</span> <span class="s2">&#34;delete -&gt; should return exit code 0 on success, should return exit code 1 on failure.&#34;</span>
<span class="o">}</span>

<span class="k">case</span> <span class="nv">$1</span> in
    aws <span class="o">)</span>
        amazon_bak
        <span class="p">;;</span>
    custom <span class="o">)</span>
        custom
        <span class="p">;;</span>
    * <span class="o">)</span>
        <span class="nb">help</span>
        <span class="p">;;</span>
<span class="k">esac</span>
</code></pre></td></tr></table>
</div>
</div><p>And here is the sample implementation for the custom upload functionality.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="k">function</span> upload <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">&#34;uploading&#34;</span>
    <span class="nb">local</span> <span class="nv">result</span><span class="o">=</span><span class="m">0</span>
    <span class="k">return</span> <span class="nv">$result</span>
<span class="o">}</span>

<span class="k">function</span> delete <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">&#34;deleting </span><span class="nv">$1</span><span class="s2">&#34;</span>
    <span class="nb">local</span> <span class="nv">result</span><span class="o">=</span><span class="m">0</span>
    <span class="k">return</span> <span class="nv">$result</span>
<span class="o">}</span>

<span class="k">function</span> list <span class="o">{</span>
    <span class="nb">local</span> <span class="nv">arr</span><span class="o">=(</span><span class="s2">&#34;file1&#34;</span> <span class="s2">&#34;file2&#34;</span> <span class="s2">&#34;file3&#34;</span><span class="o">)</span>
    <span class="nb">echo</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">arr</span><span class="p">[@]</span><span class="si">}</span><span class="s2">&#34;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Thanks for reading!</p>
<p>Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>Minecraft world automatic backup to AWS S3 bucket</title>
      <link>https://skarlso.github.io/2016/04/16/minecraft-server-aws-s3-backup/</link>
      <pubDate>Sat, 16 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/04/16/minecraft-server-aws-s3-backup/</guid>
      <description><![CDATA[<p>Hi Folks.</p>
<p>Previously we created a Minecraft server using Docker. After my server got popular in the family, and a lot of stuff started to pile up on it, as a good IT person, I&rsquo;m backing up the world once in a while.</p>
<p>For that, I&rsquo;m using AWS S3 with the CLI and a little bash script which runs once a week.</p>
<p>The script is really straightforward. I&rsquo;m doing manual versioning, although S3 does provide one out of the box. However, amazon&rsquo;s S3 versioning doesn&rsquo;t allow limiting the number of versions being kept. And since I&rsquo;m doing that anyways, might as well take care of the rest.</p>
<p>Without further ado, here is the script:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="k">if</span> <span class="o">[[</span> -t <span class="m">1</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nv">colors</span><span class="o">=</span><span class="k">$(</span>tput colors<span class="k">)</span>
    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$colors</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nv">RED</span><span class="o">=</span><span class="s1">&#39;\033[0;31m&#39;</span>
        <span class="nv">LIGHT_GREEN</span><span class="o">=</span><span class="s1">&#39;\033[1;32m&#39;</span>
        <span class="nv">NC</span><span class="o">=</span><span class="s1">&#39;\033[0m&#39;</span>
    <span class="k">fi</span>
<span class="k">fi</span>

<span class="k">if</span> <span class="o">[[</span> -z <span class="si">${</span><span class="nv">MINECRAFT_BUCKET</span><span class="si">}</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
	<span class="nb">printf</span> <span class="s2">&#34;Please set the env variable </span><span class="si">${</span><span class="nv">RED</span><span class="si">}</span><span class="s2">MINECRAFT_BUCKET</span><span class="si">${</span><span class="nv">NC</span><span class="si">}</span><span class="s2"> to the s3 archive bucket name.\n&#34;</span>
	<span class="nb">exit</span> <span class="m">0</span>
<span class="k">fi</span>

<span class="k">if</span> <span class="o">[[</span> -z <span class="si">${</span><span class="nv">MINECRAFT_ARCHIVE_LIMIT</span><span class="si">}</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
	<span class="nb">printf</span> <span class="s2">&#34;Please set the env variable </span><span class="si">${</span><span class="nv">RED</span><span class="si">}</span><span class="s2">MINECRAFT_ARCHIVE_LIMIT</span><span class="si">${</span><span class="nv">NC</span><span class="si">}</span><span class="s2"> to limit the number of archives to keep.\n&#34;</span>
	<span class="nb">exit</span> <span class="m">0</span>
<span class="k">fi</span>

<span class="nv">backup_bucket</span><span class="o">=</span><span class="si">${</span><span class="nv">MINECRAFT_BUCKET</span><span class="si">}</span>
<span class="nv">backup_limit</span><span class="o">=</span><span class="si">${</span><span class="nv">MINECRAFT_ARCHIVE_LIMIT</span><span class="si">}</span>
<span class="nv">world</span><span class="o">=</span><span class="nv">$1</span>
<span class="nb">printf</span> <span class="s2">&#34;Creating archive of </span><span class="si">${</span><span class="nv">RED</span><span class="si">}${</span><span class="nv">world</span><span class="si">}${</span><span class="nv">NC</span><span class="si">}</span><span class="s2">\n&#34;</span>
<span class="nv">archive_name</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">world</span><span class="si">}</span><span class="s2">-</span><span class="k">$(</span>date +<span class="s2">&#34;%H-%M-%S-%m-%d-%Y&#34;</span><span class="k">)</span><span class="s2">.zip&#34;</span>
zip -r <span class="nv">$archive_name</span> <span class="nv">$world</span>

<span class="nb">printf</span> <span class="s2">&#34;Checking if bucket has more than </span><span class="si">${</span><span class="nv">RED</span><span class="si">}${</span><span class="nv">backup_limit</span><span class="si">}${</span><span class="nv">NC</span><span class="si">}</span><span class="s2"> files already.\n&#34;</span>
<span class="nv">content</span><span class="o">=(</span> <span class="k">$(</span>aws s3 ls s3://<span class="nv">$backup_bucket</span> <span class="p">|</span> awk <span class="s1">&#39;{print $4}&#39;</span><span class="k">)</span> <span class="o">)</span>

<span class="k">if</span> <span class="o">[[</span> <span class="si">${#</span><span class="nv">content</span><span class="p">[@]</span><span class="si">}</span> -eq <span class="nv">$backup_limit</span> <span class="o">||</span> <span class="si">${#</span><span class="nv">content</span><span class="p">[@]</span><span class="si">}</span> -gt <span class="nv">$backup_limit</span>  <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nb">echo</span> <span class="s2">&#34;There are too many archives. Deleting oldest one.&#34;</span>
    <span class="c1"># We can assume here that the list is in cronological order</span>
	<span class="nb">printf</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">RED</span><span class="si">}</span><span class="s2">s3://</span><span class="si">${</span><span class="nv">backup_bucket</span><span class="si">}</span><span class="s2">/</span><span class="si">${</span><span class="nv">content</span><span class="p">[0]</span><span class="si">}</span><span class="s2">\n&#34;</span>
    aws s3 rm s3://<span class="nv">$backup_bucket</span>/<span class="si">${</span><span class="nv">content</span><span class="p">[0]</span><span class="si">}</span>
<span class="k">fi</span>

<span class="nb">printf</span> <span class="s2">&#34;Uploading </span><span class="si">${</span><span class="nv">RED</span><span class="si">}${</span><span class="nv">archive_name</span><span class="si">}${</span><span class="nv">NC</span><span class="si">}</span><span class="s2"> to s3 archive bucket.\n&#34;</span>
<span class="nv">state</span><span class="o">=</span><span class="k">$(</span>aws s3 cp <span class="nv">$archive_name</span> s3://<span class="nv">$backup_bucket</span><span class="k">)</span>

<span class="k">if</span> <span class="o">[[</span> <span class="s2">&#34;</span><span class="nv">$state</span><span class="s2">&#34;</span> <span class="o">=</span>~ <span class="s2">&#34;upload:&#34;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nb">printf</span> <span class="s2">&#34;File upload </span><span class="si">${</span><span class="nv">LIGHT_GREEN</span><span class="si">}</span><span class="s2">successful</span><span class="si">${</span><span class="nv">NC</span><span class="si">}</span><span class="s2">.\n&#34;</span>
<span class="k">else</span>
    <span class="nb">printf</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">RED</span><span class="si">}</span><span class="s2">Error</span><span class="si">${</span><span class="nv">NC</span><span class="si">}</span><span class="s2"> occured while uploading archive. Please investigate.\n&#34;</span>
<span class="k">fi</span>
</code></pre></td></tr></table>
</div>
</div><p>It uses environment properties to define where to upload the given world and how many versions to keep.</p>
<p>I&rsquo;m calling this from a cron job, and it&rsquo;s sitting next to where the Minecraft world is.</p>
<p>That&rsquo;s it folks.</p>
<p>I&rsquo;ll start expanding on this idea and implement various services, like your own server address, or dropbox, or what have you.</p>
<p>Happy backing up.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Minecraft Server with Docker on OSX &#43; Mods</title>
      <link>https://skarlso.github.io/2016/03/29/minecraft-server-with-docker-and-osx/</link>
      <pubDate>Tue, 29 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/03/29/minecraft-server-with-docker-and-osx/</guid>
      <description><![CDATA[<p>Hi Folks.</p>
<h1 id="intro">Intro</h1>
<p>Today, I wanted to write about how to create a secure server in a container. Ideally, you don&rsquo;t want to run your server on your own machine. Running it in a container gives you a much needed control and an extra layer of security.</p>
<h1 id="docker-on-osx">Docker On OSX</h1>
<p>While on a mac, you have a couple of options to run docker.</p>
<h2 id="docker-machine">Docker-Machine</h2>
<p><a href="https://docs.docker.com/machine/">Docker-Machine</a></p>
<p>Docker machine is very simple. It just creates a Linux vm in the background on the given driver, for us it will be <a href="https://www.virtualbox.org/">VirtualBox</a>. Network, Memory and port-forwarding can all be managed through the VM directly. Then running and starting it is trivial through <code>docker-machine start</code>.</p>
<h2 id="boot2docker">Boot2Docker</h2>
<p><a href="http://boot2docker.io/">Boot2Docker</a></p>
<p>Runs a tiny linux in which you can use Docker freely. This adds the benefit of not having to mess around with VirtualBox.</p>
<h2 id="dlite">DLite</h2>
<p><a href="https://github.com/nlf/dlite">DLite</a></p>
<p>DLite is the newest addition in the Game. Since docker uses /var/run/docker.sock file to communicate with the daemon, and this file is not there on OSX, DLite takes care of that. After DLite is running, you just simply use Docker. That&rsquo;s it. No VM, no fuss, just use Docker.</p>
<p>I recommend to use DLite, however, it&rsquo;s not an official tool, so for the sake of this guide, I&rsquo;ll be writing up a docker-machine oriented solution.</p>
<h1 id="docker-container---a-vanilla-server">Docker container - A Vanilla Server</h1>
<p>First, you&rsquo;ll need a Dockerfile. <a href="https://github.com/Skarlso/devops/blob/master/minecraft/Dockerfile">Dockerfile</a>. The steps on how to setup this file are written down in the README file, located here: <a href="https://github.com/Skarlso/devops/tree/master/minecraft">Container Setup</a>. The <code>pwd</code> command will use your current directory as a shared volume to copy stuff into the container from your host operating system.</p>
<p>This will download the Minecraft server version 1.9 (or whichever you define) and install java and vim. It uses /data as a shared folder. Data will also be the working directory which means we will run the server from there. This server will be a vanilla server, meaning, no modding. If you have a single player world which you would like to use, simply copy that to /data and rename it to <em>world</em>.</p>
<p>The tricky part is to make this available on the internet. Because the container is in a VM we need to do a chain forwarding. Forward from the container to the vm, and from the vm to your host machine. If you are using a dns service like dyna or no-ip, you probably have a software which refreshes an IP for you to link to. And you&rsquo;ll also have port forwarding setup on your router. I won&rsquo;t be going into detail on that part. That&rsquo;s a whole different post.</p>
<p>Forwarding from virtualbox can be done through the UI or through command line. The UI is like this: <em>Settings =&gt; Network =&gt; Adapter 1 =&gt; Advanced =&gt; PortForwarding</em>. Here, setup something like this:
Name: Minecraft; Protocol: TCP; Host IP: 192.168.0.X(x=your local machine); Host Port: 25565; Guest IP: Leave Blank; Guest Port: 25565.</p>
<p><img src="/img/network.png" alt="Network">
Where the number is missing, you&rsquo;ll have to define your own local IP which you are using for your domain address.</p>
<p>This should forward any ports coming from your VM to your local IP. In the container we have an expose and as the README states it&rsquo;s started using -p 25565:25565 which will make sure that from the container, 25565 is exposed to the VM. And from the VM 25565 is exposed to your local. Chain forwarding.</p>
<p>After that, once you start your server, it should all click together and you should have a running vanilla Minecraft server available under http://yourdomain:25565. You won&rsquo;t be able to check this by default on your own network. Check if the port is open with a different service like: <a href="http://www.yougetsignal.com/tools/open-ports/">Check If Port is Open</a>.</p>
<h1 id="docker-container---modding">Docker container - Modding</h1>
<p>If you are not looking for anything, just a simple server, the above will be enough. You can still do /tp 1 1 1 to teleport, or can still use bans and op commands, and distribute items. However, if you would like to use mods, and as far as kids are concerned, they will want it, you&rsquo;ll have to be a bit more clever.</p>
<p>I dug far and deep and found that you have two options. Either go with a Forge server, or a Bukkit server. What does that mean? The vanilla server of Minecraft does not support modding. Modding, is modifying the implementation of Minecraft. It injects code and runs a pre-server in front of the original Minecraft server in order to append functionality. But fret not, this is all taken care of for you by either solutions.</p>
<p>In order to jump into our container with the CMD omitted, we&rsquo;ll have to run the following command instead of the one in the README.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">docker run -it -v <span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>:/data -p 25565:25565 --name mc_server minecraft:v1.9 bash
</code></pre></td></tr></table>
</div>
</div><p>This will give you an interactive prompt in which now we can operate.</p>
<h2 id="forge">Forge</h2>
<p>Download the latest forge version from here =&gt; <a href="http://files.minecraftforge.net/">Minecraft Forge</a>. They are usually up-to-date. I&rsquo;m using 1.9 so I downloaded the appropriate installer version. After I obtained it, it was a matter of running this piece of command line code from my container:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">java -jar forge-1.9-12.16.0.1813-1.9-installer.jar --extract --installServer
</code></pre></td></tr></table>
</div>
</div><p>This will unpack a bunch of things you don&rsquo;t have to worry about in your current directory, which is /data. Now run the universal.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">java -jar forge-1.9-12.16.0.1813-1.9-universal.jar
</code></pre></td></tr></table>
</div>
</div><p>Everything under the <strong>mods</strong> folder will be loaded as a mod. Forge is very restrictive and can only use Forge based mods. It will usually warn you if you have a none forge mod in your mods folder. You can find these on Forge&rsquo;s forum here: <a href="http://www.minecraftforge.net/forum/index.php/board,30.0.html">Forge Forum</a>. Simply download a jar and put it into /data/mods.</p>
<h2 id="bukkit">Bukkit</h2>
<p>I found Bukkit to be the winner for me. Most of the mods the kid wanted worked with Bukkit and did not work with Forge. Others will swear on Forge, but it&rsquo;s really up to you. Using Bukkit is similarly easy. Again, you&rsquo;ll have to find and get the wrapper for your Minecraft version, which can be located here: <a href="http://getspigot.org/">GetSpigot</a>. You can use Spigot as well, though I have no experience with that.</p>
<p>Once, you got the wrapper, which is called <code>craftbukkit-1.9.jar</code> for me, you run it the same way you would run Forge or Minecraft.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">java -jar craftbukkit-1.9.jar
</code></pre></td></tr></table>
</div>
</div><p>This will load mods from the <strong>plugins</strong> folder. Plugins can be found here: <a href="http://mods.curse.com/bukkit-plugins/minecraft/new">Latest Bukkit Plugins</a>.</p>
<p>In the container, you can use wget or curl to get the mods, or simply use the shared volume which is setup for you.</p>
<h1 id="last-words">Last Words</h1>
<p>All in all this sounds complicated, but it&rsquo;s actually not, once you&rsquo;ll get the hang out of it. You never kill the container once it&rsquo;s setup, you just do <code>docker stop mc_server</code> and then <code>docker-machine stop</code> if you want to stop the VM as well. To start it up simply do these steps:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">docker_machine start
<span class="nb">eval</span> <span class="k">$(</span>docker-machine env<span class="k">)</span>
docker start mc_server
</code></pre></td></tr></table>
</div>
</div><p>We named the container mc_server on a previous step. If you named it something different, use that name.</p>
<p>That&rsquo;s it. Hope this was clear. Any feedback is appreciated. If you think you have an easier way, or if I wrote something incorrectly, feel free to tell me in the comment sections below.</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Wercker Fixed</title>
      <link>https://skarlso.github.io/2016/03/09/wercker-fixed/</link>
      <pubDate>Wed, 09 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/03/09/wercker-fixed/</guid>
      <description><![CDATA[<p>Hi Folks.</p>
<p>So Wercker was not working. After a minor modification it seems to be okay now. The config file needed for it to work looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">box: golang
build:
    steps:
        - arjen/hugo-build:
            theme: redlounge
deploy:
    steps:
        - install-packages:
            packages: git
        - leipert/git-push:
            gh_oauth: <span class="nv">$GIT_TOKEN</span>
            repo: skarlso/skarlso.github.io
            branch: master
            basedir: public
</code></pre></td></tr></table>
</div>
</div><p>The modification is the box type to <em>golang</em> and removed <em>ssh-client</em> from <em>packages</em>.</p>
<p>Thanks,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Wercker Test</title>
      <link>https://skarlso.github.io/2016/03/04/wercker-test-2/</link>
      <pubDate>Fri, 04 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/03/04/wercker-test-2/</guid>
      <description><![CDATA[<h2 id="basics">Basics</h2>
<p>This is a wercker Test.</p>
]]></description>
    </item>
    
    <item>
      <title>Hugo Autodeploy with Wercker and Github - Pages</title>
      <link>https://skarlso.github.io/2016/02/10/hugo-autodeploy-with-wercker/</link>
      <pubDate>Wed, 10 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/02/10/hugo-autodeploy-with-wercker/</guid>
      <description><![CDATA[<p>There already is a nice tutorial on how to create github-pages with Hugo <a href="https://gohugo.io/tutorials/github-pages-blog/">Here</a> if you prefer deplying your pages to a different branch on the same repo. There is also a post about Wercker and Hugo <a href="https://gohugo.io/tutorials/automated-deployments/">Here</a> deploying pages to said separate branch.</p>
<p>However, I took an easier approach on the matter with a completely separate branch for my blog source and my compiled github pages.</p>
<p>This blog sits here: <a href="https://github.com/Skarlso/skarlso.github.io">https://github.com/Skarlso/skarlso.github.io</a>. In order to deploy to it, I just have to commit a new blog post to this repository: <a href="https://github.com/Skarlso/blogsource">Blog Source</a>. After that, <a href="http://wercker.com/">Wercker</a> takes care of the rest. It builds my blog, and pushes the generated pages to my blog&rsquo;s repository to the master branch without creating the gh-pages branch.</p>
<p>The Wercker yml for that looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">box</span><span class="p">:</span><span class="w"> </span><span class="l">debian</span><span class="w">
</span><span class="w"></span><span class="nt">build</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">arjen/hugo-build</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">theme</span><span class="p">:</span><span class="w"> </span><span class="l">redlounge</span><span class="w">
</span><span class="w"></span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">install-packages</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">packages</span><span class="p">:</span><span class="w"> </span><span class="l">git ssh-client</span><span class="w">
</span><span class="w">        </span>- <span class="nt">leipert/git-push</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">gh_oauth</span><span class="p">:</span><span class="w"> </span><span class="l">$GIT_TOKEN</span><span class="w">
</span><span class="w">            </span><span class="nt">repo</span><span class="p">:</span><span class="w"> </span><span class="l">skarlso/skarlso.github.io</span><span class="w">
</span><span class="w">            </span><span class="nt">branch</span><span class="p">:</span><span class="w"> </span><span class="l">master</span><span class="w">
</span><span class="w">            </span><span class="nt">basedir</span><span class="p">:</span><span class="w"> </span><span class="l">public</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Pretty easy. The $GIT_TOKEN is a variable set-up on Wercker containing a restricted token which is only good for pushing. And note that you have to use an explicit package name with git-push or else Wercker will not find that step. Hugo-build will build my blog with a simple command using redlounge theme.</p>
<p>And that&rsquo;s it. No other setup is necessary and no new branch will be made. Any questions, please feel free to leave a comment.</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Wercker Test</title>
      <link>https://skarlso.github.io/2016/02/10/wercker-test/</link>
      <pubDate>Wed, 10 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/02/10/wercker-test/</guid>
      <description><![CDATA[<h2 id="basics">Basics</h2>
<p>This is a wercker Test.</p>
]]></description>
    </item>
    
    <item>
      <title>Doing CORS in Go with Gin and JSON</title>
      <link>https://skarlso.github.io/2016/02/02/doing-cors-in-go-with-gin-and-json/</link>
      <pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/02/02/doing-cors-in-go-with-gin-and-json/</guid>
      <description><![CDATA[<h2 id="basics">Basics</h2>
<p>Hello folks.</p>
<p>This will be a quick post about how to do CORS with jQuery, Gin in Go with a very simple ajax GET and Json.</p>
<p>I&rsquo;m choosing JSON here because basically I don&rsquo;t really like JSONP. And actually, it&rsquo;s not very complicated to do CORS, it&rsquo;s just hidden enough so that it doesn&rsquo;t become transparent.</p>
<p>First, what is CORS? It&rsquo;s Cross-Platform Resource Sharing. It has been invented so that without your explicit authorization in the header of a request, Javascript can&rsquo;t reach outside of your domain and be potentially harmful to your visitors.</p>
<p>Now, suppose you have an architecture like this.</p>
<p><img src="/img/architecture.png" alt="Architecture"></p>
<p>You have multiple agents sitting on multiple nodes. You have one central server, and you have multiple front-ends. Everybody can only talk to the Server but the server does talk to everyone. You would like to have a dynamic front-end and would like to display data with ajax calls. Since your front-end sits on a different server, you will have to do something about CORS. This is how I solved it&hellip;</p>
<p>I&rsquo;m using <a href="https://github.com/gin-gonic/gin">Gin</a> for my REST service for <a href="https://github.com/Skarlso/dockmaster2">Dockmaster</a>. For this two work, you need to adjust two component.</p>
<h2 id="server">Server</h2>
<p>There is thing called a Preflight-Check. In essence, the preflight check is sent BEFORE the actual request to check if the next request is allowed to go out of the domain. The preflight check is sent to the same URI just with OPTIONS method. In order to tell the caller that the next one will be safe, you need three things.</p>
<p>First, you need to set two Headers.
#1 -&gt; Access-Control-Allow-Origin to &ldquo;*&rdquo;.
#2 -&gt; Access-Control-Allow-Headers to &ldquo;access-control-allow-origin, access-control-allow-headers&rdquo;.</p>
<p>These are the minimum headers you can set. If you allow Access-Control-Allow-Origin you also have to allow it in the headers section because the next request will expect it to be there. Also, note here that setting Origin to * is only recommended in development environment. Otherwise it should be set to whatever your domain is.</p>
<p>Second, you need to respond to the OPTIONS method with a 200. In order to do that, I added a simple rule with the same end-point but with OPTIONS.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">router</span> <span class="o">:=</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">Default</span><span class="p">()</span>
    <span class="nx">v1</span> <span class="o">:=</span> <span class="nx">router</span><span class="p">.</span><span class="nf">Group</span><span class="p">(</span><span class="nx">APIBASE</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nx">v1</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/list&#34;</span><span class="p">,</span> <span class="nx">listContainers</span><span class="p">)</span>
        <span class="nx">v1</span><span class="p">.</span><span class="nf">POST</span><span class="p">(</span><span class="s">&#34;/add&#34;</span><span class="p">,</span> <span class="nx">addContainers</span><span class="p">)</span>
        <span class="nx">v1</span><span class="p">.</span><span class="nf">POST</span><span class="p">(</span><span class="s">&#34;/delete&#34;</span><span class="p">,</span> <span class="nx">deleteContainers</span><span class="p">)</span>
        <span class="nx">v1</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/inspect/:agentID/:containerID&#34;</span><span class="p">,</span> <span class="nx">inspectContainer</span><span class="p">)</span>
        <span class="nx">v1</span><span class="p">.</span><span class="nf">OPTIONS</span><span class="p">(</span><span class="s">&#34;/inspect/:agentID/:containerID&#34;</span><span class="p">,</span> <span class="nx">preflight</span><span class="p">)</span>
        <span class="nx">v1</span><span class="p">.</span><span class="nf">POST</span><span class="p">(</span><span class="s">&#34;/stopAll&#34;</span><span class="p">,</span> <span class="nx">stopAll</span><span class="p">)</span>
        <span class="nx">v1</span><span class="p">.</span><span class="nf">OPTIONS</span><span class="p">(</span><span class="s">&#34;/stopAll&#34;</span><span class="p">,</span> <span class="nx">preflight</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">router</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="s">&#34;:8989&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">preflight</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">c</span><span class="p">.</span><span class="nf">Header</span><span class="p">(</span><span class="s">&#34;Access-Control-Allow-Origin&#34;</span><span class="p">,</span> <span class="s">&#34;*&#34;</span><span class="p">)</span>
    <span class="nx">c</span><span class="p">.</span><span class="nf">Header</span><span class="p">(</span><span class="s">&#34;Access-Control-Allow-Headers&#34;</span><span class="p">,</span> <span class="s">&#34;access-control-allow-origin, access-control-allow-headers&#34;</span><span class="p">)</span>
    <span class="nx">c</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="kd">struct</span><span class="p">{}{})</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>You can see that the preflight method is there for two end-points. I added it to those end-points which will reach over the domain. The others are all local, thus they don&rsquo;t need that. This leads to a little duplication, but that is fine. I have a very fine control over what actually is allowed to go outside of the domain.</p>
<p>So, how do we call this?</p>
<h2 id="frontend">Frontend</h2>
<p>In the front-end&rsquo;s web layout, I&rsquo;m doing an Ajax GET, which looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript">                <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
                    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://localhost:8989/api/1/inspect/&#39;</span><span class="o">+</span><span class="nx">data</span><span class="p">.</span><span class="nx">agentid</span><span class="o">+</span><span class="s1">&#39;/&#39;</span><span class="o">+</span><span class="nx">data</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
                    <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
                    <span class="nx">dataType</span><span class="o">:</span><span class="s2">&#34;json&#34;</span><span class="p">,</span>
                    <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span><span class="s2">&#34;Access-Control-Allow-Origin&#34;</span><span class="o">:</span> <span class="s2">&#34;*&#34;</span><span class="p">,</span> <span class="s2">&#34;Access-Control-Allow-Headers&#34;</span><span class="o">:</span> <span class="s2">&#34;access-control-allow-origin, access-control-allow-headers&#34;</span><span class="p">},</span>
                    <span class="nx">processData</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
                    <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
                        <span class="kd">var</span> <span class="nx">json</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
                        <span class="nx">independentPopup</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s2">&#34;&lt;pre &gt;&#34;</span><span class="o">+</span><span class="nx">json</span><span class="o">+</span><span class="s2">&#34;&lt;/pre&gt;&#34;</span><span class="p">);</span>
                        <span class="nx">$</span><span class="p">(</span><span class="nx">link</span><span class="p">).</span><span class="nx">after</span><span class="p">(</span><span class="nx">independentPopup</span><span class="p">);</span>
                    <span class="p">}</span>
                <span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><p>After the headers are set, the request will work nicely.</p>
<h2 id="y-u-no-middleware">Y U No Middleware?</h2>
<p>And now you could say that, why not just have a middleware which will always accept OPTIONS for every end-point. Because I like it better this way. Some would argue that this is too granular, but fact is, that in my opinion, this is more readable and immediatly visible. However, if you DO want to do that, you have several options to your disposal.</p>
<p><a href="https://github.com/itsjamie/gin-cors">Cors Basic Http Middleware</a> and for Gin <a href="https://github.com/itsjamie/gin-cors">Gin CORS Middleware</a>.</p>
<h2 id="summary">Summary</h2>
<p>This is it. You can see the code in its entirety on Github. Have a better idea on how to do it? Please! Do not hesitate to share. I always like to learn.</p>
<p>Thank you for reading!</p>
<p>And as always,
Have a nice day!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>My Journey in advent of code</title>
      <link>https://skarlso.github.io/2016/01/22/my-journey-in-advent-of-code/</link>
      <pubDate>Fri, 22 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/01/22/my-journey-in-advent-of-code/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>I wanted to share with you my tale of working through the problems with <a href="http://adventofcode.com">Advent Of Code</a>.</p>
<p>It is a nice tale and there are a few things I learned from it, especially in Go, since I used that solve all of the problems. So, let&rsquo;s get started.</p>
<h1 id="solving-the-problems">Solving the problems</h1>
<p>The most important lesson I learned while doing these exercises was, how to solve these problems. A couple of them were simple enough to not have to over think it, but most of them got very tricky. I could have gone with a brute force attempt, but as we see later, that wasn&rsquo;t always a very good solution. And people who used that, actually just got lucky finding their solutions.</p>
<p>The eight stages of breaking down a problem according to this book <a href="http://www.amazon.co.uk/Think-Like-Programmer-Introduction-Creative/dp/1593274246/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1453449575&amp;sr=1-1&amp;keywords=thinking+like+a+programmer">Thinking Like a Programmer</a> are the following:</p>
<ul>
<li>Have a plan</li>
<li>Rephrase</li>
<li>Divide</li>
<li>Start with what you know</li>
<li>Reduce</li>
<li>Analogies</li>
<li>Experiment</li>
<li>Don&rsquo;t get frustrated</li>
</ul>
<h2 id="have-a-plan-and-understanding-your-goal">Have a plan and understanding your goal</h2>
<p>This is simple. Always have a plan of what you would like to do, and how to start. This will help you massively along the way to not to loose sight of what your goal is actually. For example, look at <a href="http://adventofcode.com/day/24">Day 24</a>. At first, it looks like a permutational puzzle, but if you understand the solution we are looking for, you realize that there is an easier way of finding it. Since you only want the packages which consists of the fewest item counts, you would only care about the largest numbers because those will be the fewest which still give you the desired package weight. Suddenly the problem gets easier because you don&rsquo;t have to worry about the other groups any longer.</p>
<h2 id="rephrase">Rephrase</h2>
<p>Rephrasing the problem with your own words can help in understanding it better. Or even better, try explaining it to somebody else. If you cannot rephrase it, you didn&rsquo;t understand it in the first place.</p>
<h2 id="divide">Divide</h2>
<p>If the problem seems daunting because it&rsquo;s massive, just divide it into smaller chunks. This is something that we usually do with large problems, but it&rsquo;s more subtle than that. If you face a problem which seems complex, just factor out parts of it until you got a problem which you do understand. Even if you have to butcher the original puzzle problem. It doesn&rsquo;t matter. Adding complexity later is easier than adding complexity in its infancy.</p>
<h2 id="start-with-what-you-know--finding-analogies">Start with what you know &amp;&amp; Finding analogies</h2>
<p>This one speaks for itself. If you know parts of the problem, because you know analogy for it, or you faced something similar before, or exactly that, start with that.</p>
<h2 id="reduce">Reduce</h2>
<p>If the problem seems too complex, remove complexity. Start with a smaller set. Preferably something testable (I&rsquo;ll come back to that later). Remove constraints, or add them as desired. A constraint makes it harder to solve the puzzle? Remove it, and try solving it without. After that, the solution will give you insight into the problem and you can add that constraint back in.</p>
<p>Consider <a href="http://adventofcode.com/day/11">Day 11</a>. I had fun with this one. In order to easy it up a little, I first, removed the constraint of doing the increment with letters. I did it with numbers. I also removed the constraint of doing it within the confines of a limited length array. After I got that I&rsquo;ll use modulo to make the numbers wrap around, it was way more easy to apply it to characters. And after a little fidgeting this came to life:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">passwd</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">-=</span> <span class="sc">&#39;a&#39;</span>
<span class="nx">passwd</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="p">(</span><span class="nx">passwd</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="p">((</span><span class="sc">&#39;z&#39;</span> <span class="o">-</span> <span class="sc">&#39;a&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
<span class="nx">passwd</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+=</span> <span class="sc">&#39;a&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>The -,+ &lsquo;a&rsquo; is needed so that it&rsquo;s dealing with ascii code from 0 - &lsquo;z&rsquo;. This basically makes it so that when I reach the end of the alphabet it will wrap around and start from &lsquo;a&rsquo; again.</p>
<h2 id="experiment">Experiment</h2>
<p>This led to more solutions than I care to admit. Basically just start experimenting with solutions which are in your head. There is a chance, that what you come up with, will be the solution. This goes very well with the principle of <em>Make it work</em>, <em>Make it right</em>, <em>Make it fast</em>. Just have something working first, and than you can make it work properly after. It&rsquo;s always better to have <em>something</em> rather than nothing.</p>
<p>And last but not least&hellip;</p>
<h2 id="dont-get-frustrated">Don&rsquo;t get frustrated</h2>
<p>This is something I cannot say strongly enough. Seriously. <strong>DO NOT GET FRUSTRATED</strong>. Most of the problems were designed to be harder. Unless you work as a programmer professionally for several years now, or this is a field of interest for you, you will spend a day hacking around on a problem and trying to find a solution which is adequate. In these times, you will get frustrated and think you are too stupid for this, this couldn&rsquo;t be more far from the truth! You might need some inspiration, you might need some time away from the screen, it helps if you draw out the problem in a piece of paper, or just think about it without seeing it for a while. Just take a break, eat something, watch a comedy and get back to it later with a fresh view.</p>
<h1 id="technical-gotchas">Technical Gotchas</h1>
<p>So after the general problem solving side of things, I learned many things about Go, and about the tidbits of this language.</p>
<h2 id="byte-slices">Byte Slices</h2>
<p>I already knew that []byte is more performant and that Go optimizes on them more, but not to this extent. As in my previous blog posts I discovered that using them can really make a huge difference. Go even has a library called <code>bytes</code> which has helper functions similar to that of <code>strings</code> to help you out in these situations. Go optimizes on map recalls as well when you cast to string from []byte and use that as a map key like this: myMap[string(data)].</p>
<h2 id="brute-force-or-looping">Brute Force or Looping</h2>
<p>Most of the times you could get away with looping or trying to brute force out a solution. But there were times, where you really had to huddle down and think the problem through. Because simply looping, either took too long, or didn&rsquo;t come up with a good answer. That&rsquo;s why I rather always start with: &lsquo;How could I solve this without looping?&rsquo;. This will get you into the right mindset. Or thinking: &lsquo;How could I solve this without taking each and every combination into account?&rsquo;. These questions will help you to think about the problem without loops. Or only if you REALLY must use one.</p>
<p>Doing this will get you into the right way of thinking. I know that in advent of code there is a Leaderboard and you could get on it if you were fast. But most of the times having a fast solution is far from having the right solution.</p>
<h2 id="structs-are-awesome">Structs are Awesome</h2>
<p>I like using structs. They are a very lightweight way of defining objects, structures which stick together. For example in the <a href="http://adventofcode.com/day/6">Day 6</a> Light puzzle, or even <a href="http://adventofcode.com/day/3">Day 3</a> Traveling santa example, a struct which stuck x,y locations together and made it a map key, it was trivial to make my gif out of it with SVG -&gt;</p>
<p><img src="https://raw.githubusercontent.com/Skarlso/goprojects/master/advent/day3/day1.gif" alt="Traveling Santa"></p>
<h2 id="go-is-simple-to-read">Go is Simple to Read</h2>
<p>[opinion] I like Go because of its simplicity. You don&rsquo;t see stuff in Go most of the times, where you need to look three times to understand what the heck is going on. I like filter, reduce, map and syntactic sugar, but they make for a very poor reading experience. Go, in that way, choose not to incorporate these paradigms and I find that refreshing. [/opinion]</p>
<h2 id="testing">Testing</h2>
<p>TDD is something we all should know by now and care about. When I&rsquo;m doing puzzles, or finger exercises, I tend to not write tests. But on a more complex puzzle, or a task, I always start with a test. Especially if you are given samples for a puzzle which work. That&rsquo;s a gold mine. You can tweak your algorithm using those samples until they work and then simply apply a larger sample size.</p>
<p>Tests will also help you with breaking down a problem and identifying parts which you already know.</p>
<p>For example <a href="http://adventofcode.com/day/13">Day 13</a>. Optimal Seating arrangements. Or the similar <a href="http://adventofcode.com/day/9">Day 9</a>. Which was calculating shortest route distance. Or the password one, Day 11 which I showed before. In these cases, tests helped me make the core of the algorithm solid. Calculating connections, or the odd regex here and there, which was making sure that the password was validated properly.</p>
<p>Tests will also help you to be able to move on after you found your solution. When I was done with the first iteration of passwords which was still using strings, I went on to optimize it, to use []byte. The tests helped me to know that the code was still working as expected after the refactoring.</p>
<h1 id="closing-words">Closing words</h1>
<p>All in all it was a massive amount of fun doing these exercises and I&rsquo;m thankful to the creator for making it. And I did enjoy the story behind the exercises as well. I think this site stood out because it had a fun factor. For simple exercises there are a lot of other sites -like Project Euler, or Sphere Judge Online-, which just plainly present you a problem and that&rsquo;s it. It&rsquo;s still fun, but it can also became boring very fast. Don&rsquo;t forget the fun factor which makes you plow on and go into a blind frenzy that you cannot quit until it&rsquo;s done. That&rsquo;s the fun part.</p>
<p>Thank you for reading!
Have a nice day.
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Improving performance with byte slice and int map</title>
      <link>https://skarlso.github.io/2016/01/05/improving-performance-with-byte-slice-and-int-map/</link>
      <pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/01/05/improving-performance-with-byte-slice-and-int-map/</guid>
      <description><![CDATA[<p>Hello Folks.</p>
<p>Today I would like to share with you my little tale of refactoring my solution to <a href="http://adventofcode.com/day/13">Advent Of Code Day 13</a>.</p>
<p>It&rsquo;s a lovely tale of action, adventure, drama, and comedy.</p>
<p>Let&rsquo;s being with my first iteration of the problem.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span><span class="lnt">95
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;bufio&#34;</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;math&#34;</span>
	<span class="s">&#34;os&#34;</span>
	<span class="s">&#34;strconv&#34;</span>
	<span class="s">&#34;strings&#34;</span>

	<span class="s">&#34;github.com/skarlso/goutils/arrayutils&#34;</span>
<span class="p">)</span>

<span class="kd">var</span> <span class="nx">seatingCombinations</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">string</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">table</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">keys</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

<span class="c1">//Person a person
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="c1">// neighbour *Person
</span><span class="c1"></span>	<span class="nx">name</span> <span class="kt">string</span>
	<span class="nx">like</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">file</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;input.txt&#34;</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
	<span class="nx">scanner</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewScanner</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
	<span class="k">for</span> <span class="nx">scanner</span><span class="p">.</span><span class="nf">Scan</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">line</span> <span class="o">:=</span> <span class="nx">scanner</span><span class="p">.</span><span class="nf">Text</span><span class="p">()</span>
		<span class="nx">split</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="nx">line</span><span class="p">,</span> <span class="s">&#34; &#34;</span><span class="p">)</span>
		<span class="nx">like</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Atoi</span><span class="p">(</span><span class="nx">split</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="c1">//If lose -&gt; * -1
</span><span class="c1"></span>		<span class="k">if</span> <span class="nx">split</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#34;lose&#34;</span> <span class="p">{</span>
			<span class="nx">like</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span>
		<span class="p">}</span>
		<span class="nx">table</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">table</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="nx">strings</span><span class="p">.</span><span class="nf">Trim</span><span class="p">(</span><span class="nx">split</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span> <span class="s">&#34;.&#34;</span><span class="p">):</span> <span class="nx">like</span><span class="p">})</span>
		<span class="k">if</span> <span class="p">!</span><span class="nx">arrayutils</span><span class="p">.</span><span class="nf">ContainsString</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
			<span class="nx">keys</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="nf">generatePermutation</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">keys</span><span class="p">))</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Best seating efficiency:&#34;</span><span class="p">,</span> <span class="nf">calculateSeatingEfficiancy</span><span class="p">())</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">generatePermutation</span><span class="p">(</span><span class="nx">s</span> <span class="p">[]</span><span class="kt">string</span><span class="p">,</span> <span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">n</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">{</span>
		<span class="nx">news</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span>
		<span class="nb">copy</span><span class="p">(</span><span class="nx">news</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
		<span class="nx">seatingCombinations</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">seatingCombinations</span><span class="p">,</span> <span class="nx">news</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="nx">s</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
		<span class="nf">generatePermutation</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
		<span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="nx">s</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">calculateSeatingEfficiancy</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="nx">bestSeating</span> <span class="o">:=</span> <span class="nx">math</span><span class="p">.</span><span class="nx">MinInt64</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">seatingCombinations</span> <span class="p">{</span>
		<span class="nx">calculatedOrder</span> <span class="o">:=</span> <span class="mi">0</span>

		<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">v</span> <span class="p">{</span>
			<span class="nx">left</span> <span class="o">:=</span> <span class="p">(</span><span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
			<span class="c1">//This is to work around the fact that in Go
</span><span class="c1"></span>			<span class="c1">//modulo of a negative number will not return a positive number.
</span><span class="c1"></span>			<span class="c1">//So -1 % 4 will not return 3 but -1. In that case we add length.
</span><span class="c1"></span>			<span class="k">if</span> <span class="nx">left</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
				<span class="nx">left</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
			<span class="p">}</span>
			<span class="nx">right</span> <span class="o">:=</span> <span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
			<span class="c1">// fmt.Printf(&#34;Left: %d; Right: %d\n&#34;, left, right)
</span><span class="c1"></span>			<span class="nx">leftLike</span> <span class="o">:=</span> <span class="nf">getLikeForTargetConnect</span><span class="p">(</span><span class="nx">v</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">v</span><span class="p">[</span><span class="nx">left</span><span class="p">])</span>
			<span class="nx">rightLike</span> <span class="o">:=</span> <span class="nf">getLikeForTargetConnect</span><span class="p">(</span><span class="nx">v</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">v</span><span class="p">[</span><span class="nx">right</span><span class="p">])</span>
			<span class="c1">// fmt.Printf(&#34;Name: %s; Left:%d; Right:%d\n&#34;, v[i], leftLike, rightLike)
</span><span class="c1"></span>			<span class="nx">calculatedOrder</span> <span class="o">+=</span> <span class="nx">leftLike</span> <span class="o">+</span> <span class="nx">rightLike</span>
		<span class="p">}</span>
		<span class="c1">// fmt.Printf(&#34;Order for: %v; Calc:%d\n&#34;, v, calculatedOrder)
</span><span class="c1"></span>		<span class="k">if</span> <span class="nx">calculatedOrder</span> <span class="p">&gt;</span> <span class="nx">bestSeating</span> <span class="p">{</span>
			<span class="nx">bestSeating</span> <span class="p">=</span> <span class="nx">calculatedOrder</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="nx">bestSeating</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">getLikeForTargetConnect</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">neighbour</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="nx">neighbours</span> <span class="o">:=</span> <span class="nx">table</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">t</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">neighbours</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">t</span><span class="p">[</span><span class="nx">neighbour</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">v</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="mi">0</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This is quiet large. And takes a bit of explaining. So what is happening here? We are putting the names which correspond with numbers and neighbours into a map which has a map as a value. The map contains seating information for a person. For example, next to Alice, a bunch of people can sit, and they have a certain relationship to Alice, represented by a number.</p>
<p>We could, at this point, represent it with a graph, but that would be overkill.</p>
<p>Permutation is simple because I choose to represent a Table with a Circular Slice. This means that a slice like this =&gt; Alice, Bob, Tom; means that Alice is sitting next to Bob and Tom. So Alice&rsquo;s neighbour of -1 (left) is in fact i-1 % 3. And Bob is i + 1. For Tom, Alice is i + 1 % 3. After we got this, we just permutate the possible combinations into slices of slices and iterate over them.</p>
<p>The benchmark for this is terrible.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">
<span class="o">================</span>With <span class="nv">Strings</span><span class="o">================</span>
20	 <span class="m">589571259</span> ns/op
ok  	github.com/skarlso/goprojects/advent/day13/part1	11.873s
</code></pre></td></tr></table>
</div>
</div><p>So, my first thought was, convert everything I can to []byte. But because slices cannot be map keys, because map keys need to be comparable, we are still stuck with the same ns/ops.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">//var seatingCombinations = make([][]string, 0)
</span><span class="c1">//var keys = make([]string, 0)
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">seatingCombinations</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([][][]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">keys</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>And I adjusted the code to work with []byte instead. What can we do to fix the map though? One obvious gain is, not to use string as a key. Because strings are immutable, working with them always means copy-ing and that&rsquo;s why they get to be very slow. So removing them from Keys and using Numbers instead will mean a huge gain for us.</p>
<p>To do this, I created a map which maps names with numbers. I could hardcode them with iota, but that is a very bad thing to do. It would mean, that when I add a new name, I would have to go, and re-compile my code, because data changed. That&rsquo;s not what we want.</p>
<p>So, I added this little tid-bit into the for cycle when I&rsquo;m reading in the file lines =&gt;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="o">...</span>
<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">nameMapping</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
    <span class="nx">nameMapping</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="p">=</span> <span class="nx">id</span>
    <span class="nx">id</span><span class="o">++</span>
<span class="p">}</span>
<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">nameMapping</span><span class="p">[</span><span class="nx">trimmedNeighbour</span><span class="p">];</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
    <span class="nx">nameMapping</span><span class="p">[</span><span class="nx">trimmedNeighbour</span><span class="p">]</span> <span class="p">=</span> <span class="nx">id</span>
    <span class="nx">id</span><span class="o">++</span>
<span class="p">}</span>
<span class="o">...</span>
</code></pre></td></tr></table>
</div>
</div><p>Id starts as Zero. And nameMapping is a simple map[string]int. After this, we fix all the map calls, from <code>table[split[0]]</code> to <code>table[nameMapping[split[0]]]</code>. Table&rsquo;s map will now work with int, but we can still work with strings otherwise.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">table</span><span class="p">[</span><span class="nx">nameMapping</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]]]</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">table</span><span class="p">[</span><span class="nx">nameMapping</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]]],</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="nx">nameMapping</span><span class="p">[</span><span class="nx">trimmedNeighbour</span><span class="p">]:</span> <span class="nx">like</span><span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>This has now a marginally better performance as before:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">BenchmarkCalculateSeating	      50	  <span class="m">32637879</span> ns/op
ok  	github.com/skarlso/goprojects/advent/day13/part1	1.698s
</code></pre></td></tr></table>
</div>
</div><p>But, we can still do a HUGE one better. Can you notice the other bottleneck? See, how keys are still []byte? That&rsquo;s, now completely unnecessary. We can use int, since our keys are ints! <em>Permutation</em> changes, and the retrieve.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="o">...</span>
<span class="kd">func</span> <span class="nf">generatePermutation</span><span class="p">(</span><span class="nx">s</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
<span class="o">...</span>

<span class="o">...</span>
<span class="kd">func</span> <span class="nf">getLikeForTargetConnect</span><span class="p">(</span><span class="nx">name</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">neighbour</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="nx">neighbours</span> <span class="o">:=</span> <span class="nx">table</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">t</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">neighbours</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">t</span><span class="p">[</span><span class="nx">neighbour</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">v</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="mi">0</span>
<span class="p">}</span>
<span class="o">...</span>
</code></pre></td></tr></table>
</div>
</div><p>Permutation was the Other huge performance consumption. Now, our run time is&hellip;. drum rolls&hellip;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">BenchmarkCalculateSeating	   10000	    <span class="m">166431</span> ns/op
ok  	github.com/skarlso/goprojects/advent/day13/part1	1.695s
</code></pre></td></tr></table>
</div>
</div><p>Down to 166431 ns/op!!! From 32637879 ns/op!! And notice how suddenly, go&rsquo;s benchmark jumped up in sample count. Our code is now blazing fast. It&rsquo;s 0.05% of the previous run! It&rsquo;s almost <strong>200 times faster</strong>!</p>
<p>We could still improve it here and there. I&rsquo;m sure I&rsquo;m doing some extra stuff which is not needed or could be made easier somehow. But I&rsquo;m actually quiet happy with this solution right now.</p>
<p>The full code:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;bufio&#34;</span>
	<span class="s">&#34;math&#34;</span>
	<span class="s">&#34;os&#34;</span>
	<span class="s">&#34;strconv&#34;</span>
	<span class="s">&#34;strings&#34;</span>

	<span class="s">&#34;github.com/skarlso/goutils/arrayutils&#34;</span>
<span class="p">)</span>

<span class="kd">var</span> <span class="nx">seatingCombinations</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">table</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">][]</span><span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">keys</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">nameMapping</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>

<span class="c1">//Person a person
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="c1">// neighbour *Person
</span><span class="c1"></span>	<span class="nx">name</span> <span class="kt">string</span>
	<span class="nx">like</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nf">CalculatePerfectSeating</span><span class="p">()</span>
<span class="p">}</span>

<span class="c1">//CalculatePerfectSeating returns the perfect seating order based on Love/Hate relations
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">CalculatePerfectSeating</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">file</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;input.txt&#34;</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
	<span class="nx">scanner</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewScanner</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
	<span class="nx">id</span> <span class="o">:=</span> <span class="mi">0</span>
	<span class="k">for</span> <span class="nx">scanner</span><span class="p">.</span><span class="nf">Scan</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">line</span> <span class="o">:=</span> <span class="nx">scanner</span><span class="p">.</span><span class="nf">Text</span><span class="p">()</span>
		<span class="nx">split</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="nx">line</span><span class="p">,</span> <span class="s">&#34; &#34;</span><span class="p">)</span>
		<span class="nx">trimmedNeighbour</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Trim</span><span class="p">(</span><span class="nx">split</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span> <span class="s">&#34;.&#34;</span><span class="p">)</span>
		<span class="nx">like</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Atoi</span><span class="p">(</span><span class="nx">split</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="c1">//If lose -&gt; * -1
</span><span class="c1"></span>		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">nameMapping</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
			<span class="nx">nameMapping</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="p">=</span> <span class="nx">id</span>
			<span class="nx">id</span><span class="o">++</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">nameMapping</span><span class="p">[</span><span class="nx">trimmedNeighbour</span><span class="p">];</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
			<span class="nx">nameMapping</span><span class="p">[</span><span class="nx">trimmedNeighbour</span><span class="p">]</span> <span class="p">=</span> <span class="nx">id</span>
			<span class="nx">id</span><span class="o">++</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="nx">split</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#34;lose&#34;</span> <span class="p">{</span>
			<span class="nx">like</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span>
		<span class="p">}</span>
		<span class="nx">table</span><span class="p">[</span><span class="nx">nameMapping</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]]]</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">table</span><span class="p">[</span><span class="nx">nameMapping</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]]],</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="nx">nameMapping</span><span class="p">[</span><span class="nx">trimmedNeighbour</span><span class="p">]:</span> <span class="nx">like</span><span class="p">})</span>
		<span class="k">if</span> <span class="p">!</span><span class="nx">arrayutils</span><span class="p">.</span><span class="nf">ContainsInt</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nx">nameMapping</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]])</span> <span class="p">{</span>
			<span class="nx">keys</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nx">nameMapping</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]])</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="nf">generatePermutation</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">keys</span><span class="p">))</span>
	<span class="c1">// fmt.Println(&#34;Best seating efficiency:&#34;, calculateSeatingEfficiancy())
</span><span class="c1"></span><span class="p">}</span>

<span class="kd">func</span> <span class="nf">generatePermutation</span><span class="p">(</span><span class="nx">s</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">n</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">{</span>
		<span class="nx">news</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span>
		<span class="nb">copy</span><span class="p">(</span><span class="nx">news</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
		<span class="nx">seatingCombinations</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">seatingCombinations</span><span class="p">,</span> <span class="nx">news</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="nx">s</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
		<span class="nf">generatePermutation</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
		<span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="nx">s</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">calculateSeatingEfficiancy</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="nx">bestSeating</span> <span class="o">:=</span> <span class="nx">math</span><span class="p">.</span><span class="nx">MinInt64</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">seatingCombinations</span> <span class="p">{</span>
		<span class="nx">calculatedOrder</span> <span class="o">:=</span> <span class="mi">0</span>

		<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">v</span> <span class="p">{</span>
			<span class="nx">left</span> <span class="o">:=</span> <span class="p">(</span><span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
			<span class="c1">//This is to work around the fact that in Go
</span><span class="c1"></span>			<span class="c1">//modulo of a negative number will not return a positive number.
</span><span class="c1"></span>			<span class="c1">//So -1 % 4 will not return 3 but -1. In that case we add length.
</span><span class="c1"></span>			<span class="k">if</span> <span class="nx">left</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
				<span class="nx">left</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
			<span class="p">}</span>
			<span class="nx">right</span> <span class="o">:=</span> <span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
			<span class="nx">calculatedOrder</span> <span class="o">+=</span> <span class="nf">getLikeForTargetConnect</span><span class="p">(</span><span class="nx">v</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">v</span><span class="p">[</span><span class="nx">left</span><span class="p">])</span> <span class="o">+</span> <span class="nf">getLikeForTargetConnect</span><span class="p">(</span><span class="nx">v</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">v</span><span class="p">[</span><span class="nx">right</span><span class="p">])</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="nx">calculatedOrder</span> <span class="p">&gt;</span> <span class="nx">bestSeating</span> <span class="p">{</span>
			<span class="nx">bestSeating</span> <span class="p">=</span> <span class="nx">calculatedOrder</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="nx">bestSeating</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">getLikeForTargetConnect</span><span class="p">(</span><span class="nx">name</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">neighbour</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="nx">neighbours</span> <span class="o">:=</span> <span class="nx">table</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">t</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">neighbours</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">t</span><span class="p">[</span><span class="nx">neighbour</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">v</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="mi">0</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Also, on github =&gt; <a href="https://github.com/Skarlso/goprojects/tree/master/advent/day13">Advent Of Code Day 13</a>.</p>
<p>Thank you very much for reading, this has been a massive fun to write and to refactor.</p>
<p>Have something to say? Please don&rsquo;t hesitate.</p>
<p>And as always,</p>
<p>Have a nice day!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Byte arrays and Channels</title>
      <link>https://skarlso.github.io/2016/01/01/byte-arrays-and-channels/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/01/01/byte-arrays-and-channels/</guid>
      <description><![CDATA[<p>Hi folks and a Happy new Year!</p>
<p>Today, I would like to show you some interesting things you can do with channels. Consider the following simple example.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">generatedPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
	<span class="nx">correctPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">correctPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">passwordIncrement</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">,</span> <span class="nx">correctPassword</span><span class="p">)</span>
	<span class="nx">pass</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">correctPassword</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">pass</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">input</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">output</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">input</span>
		<span class="c1">//Introduce lengthy operation here
</span><span class="c1"></span>		<span class="c1">// time.Sleep(time.Second)
</span><span class="c1"></span>		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Checking p:&#34;</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">p</span> <span class="p">&gt;</span> <span class="mi">100000</span> <span class="p">{</span>
			<span class="nx">output</span> <span class="o">&lt;-</span> <span class="nx">p</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">passwordIncrement</span><span class="p">(</span><span class="nx">out</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span> <span class="o">:=</span> <span class="mi">0</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span><span class="o">++</span>
		<span class="nx">out</span> <span class="o">&lt;-</span> <span class="nx">p</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The premise is as follows. It launches two go routines. One, which generates passwords, and an other which checks for validity. The two routines talk to each other through the channel <code>generatedPassword</code>. That&rsquo;s the providing connections between them. The channel <code>correctPassword</code> provides output for the <code>checkPassword</code> routine.</p>
<p>If there is data received from <code>correctPassword</code> channel, we found our first password and there is no need to look further so we, print the password and quit. The channels will close with defer. This works. But the password is usually either a []byte or a string. With string, it still works.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">generatedPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
	<span class="nx">correctPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">correctPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">passwordIncrement</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">,</span> <span class="nx">correctPassword</span><span class="p">)</span>
	<span class="nx">pass</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">correctPassword</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">pass</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">input</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">output</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">input</span>
		<span class="c1">//Introduce lengthy operation here
</span><span class="c1"></span>		<span class="c1">// time.Sleep(time.Second)
</span><span class="c1"></span>		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Checking p:&#34;</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span>
		<span class="k">if</span> <span class="nf">performSomeCheckingOperation</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">output</span> <span class="o">&lt;-</span> <span class="nx">p</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">generateNewPassword</span><span class="p">(</span><span class="nx">out</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">p</span> <span class="kt">string</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span> <span class="p">=</span> <span class="nf">generate</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
		<span class="nx">out</span> <span class="o">&lt;-</span> <span class="nx">p</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The generating happens based on the previously generated password. For example, we increment, or permeate. aaaa, aaab, aaac&hellip;</p>
<p>So <code>generatedPassword</code> is a buffered channel, it gathers a 100 passwords from which checking retrieves passwords one by one and works on them in a slower process.</p>
<p>Now, this is fine, but using []byte arrays will always be more powerful and faster. So we would like to use []byte. Like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">generatedPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
	<span class="nx">correctPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">correctPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">passwordIncrement</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">,</span> <span class="nx">correctPassword</span><span class="p">)</span>
	<span class="nx">pass</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">correctPassword</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">pass</span><span class="p">))</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">input</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">output</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">input</span>
		<span class="c1">//Introduce lengthy operation here
</span><span class="c1"></span>		<span class="c1">// time.Sleep(time.Second)
</span><span class="c1"></span>		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Checking p:&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">p</span><span class="p">))</span>
		<span class="k">if</span> <span class="nf">performSomeCheckingOperation</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">output</span> <span class="o">&lt;-</span> <span class="nx">p</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">generateNewPassword</span><span class="p">(</span><span class="nx">out</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">p</span> <span class="p">[]</span><span class="kt">byte</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span> <span class="p">=</span> <span class="nf">generate</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
		<span class="nx">out</span> <span class="o">&lt;-</span> <span class="nx">p</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This will not work. Why? Because []byte is a slice and thus will be constantly overwritten. The checking go routine will always only check the last data and many generated passwords will be lost. This is also noted in go&rsquo;s scanner here =&gt; <a href="https://golang.org/pkg/bufio/#Scanner.Bytes">Scanner.Bytes</a></p>
<p>We have a couple of options here.</p>
<p>We could use <code>string</code> channels and convert to []byte after. This is still okay, because the conversion isn&rsquo;t very CPU intensive.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="o">...</span>
<span class="nx">generatedPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="nx">correctPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>
<span class="o">...</span>
<span class="nx">p</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="o">&lt;-</span><span class="nx">input</span><span class="p">)</span> <span class="c1">//This will work very nicely.
</span><span class="c1"></span><span class="o">...</span>
</code></pre></td></tr></table>
</div>
</div><p>Options two would be If you have a fixed password to handle, fix data, for example MD5 hash, you can use a byte array. Like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">const</span> <span class="nx">PASSWD</span><span class="p">=</span><span class="mi">13</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">generatedPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="p">[</span><span class="nx">PASSWD</span><span class="p">]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
	<span class="nx">correctPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="p">[</span><span class="nx">PASSWD</span><span class="p">]</span><span class="kt">byte</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">correctPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">passwordIncrement</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">,</span> <span class="nx">correctPassword</span><span class="p">)</span>
	<span class="nx">pass</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">correctPassword</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">pass</span><span class="p">))</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">input</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="p">[</span><span class="nx">PASSWD</span><span class="p">]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">output</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="p">[</span><span class="nx">PASSWD</span><span class="p">]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">input</span>
		<span class="c1">//Introduce lengthy operation here
</span><span class="c1"></span>		<span class="c1">// time.Sleep(time.Second)
</span><span class="c1"></span>		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Checking p:&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">p</span><span class="p">))</span>
		<span class="k">if</span> <span class="nf">performSomeCheckingOperation</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">output</span> <span class="o">&lt;-</span> <span class="nx">p</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">generateNewPassword</span><span class="p">(</span><span class="nx">out</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="p">[</span><span class="nx">PASSWD</span><span class="p">]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">p</span> <span class="p">[</span><span class="nx">PASSWD</span><span class="p">]</span><span class="kt">byte</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span> <span class="p">=</span> <span class="nf">generate</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
		<span class="nx">out</span> <span class="o">&lt;-</span> <span class="nx">p</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This is also one solution. If you have to convert between the two, could go with <code>p := byte[:]</code>.</p>
<p>Conclusion is, that use conversion rather than string types and be aware that using slices in channels is dangerous.</p>
<p>Thanks for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Use Byte Array Instead of Strings</title>
      <link>https://skarlso.github.io/2015/12/29/use-byte-array-instead-of-strings/</link>
      <pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/29/use-byte-array-instead-of-strings/</guid>
      <description><![CDATA[<p>Hello Folks.</p>
<p>This is just a quick post on the topic and a reminder for myself and everybody to ALWAYS USE []BYTE INSTEAD OF STRINGS.</p>
<p>[]Byte is marginally faster than a simple Strings. In fact, I would say using []byte should be the standard instead of strings.</p>
<p>Sample code:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">solutions</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">const</span> <span class="p">(</span>
    <span class="c1">//INPUT input
</span><span class="c1"></span>    <span class="nx">INPUT</span> <span class="p">=</span> <span class="s">&#34;1321131112&#34;</span>
    <span class="c1">//LIMIT limit
</span><span class="c1"></span>    <span class="nx">LIMIT</span> <span class="p">=</span> <span class="mi">50</span>
<span class="p">)</span>

<span class="c1">//LookAndSay translates numbers according to Look and Say algo
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">LookAndSay</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">c</span> <span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">charCount</span> <span class="o">:=</span> <span class="mi">1</span>
    <span class="nx">look</span> <span class="o">:=</span> <span class="s">&#34;&#34;</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nx">i</span><span class="o">+</span><span class="mi">1</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="p">{</span>
                <span class="nx">charCount</span><span class="o">++</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">look</span> <span class="o">+=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%d%s&#34;</span><span class="p">,</span> <span class="nx">charCount</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span>
                <span class="nx">charCount</span> <span class="p">=</span> <span class="mi">1</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">look</span> <span class="o">+=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%d%s&#34;</span><span class="p">,</span> <span class="nx">charCount</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">c</span> <span class="o">&lt;-</span> <span class="nx">look</span>
<span class="p">}</span>

<span class="c1">//GetLengthOfLookAndSay Retrieve the Length of a lookandsay done Limit times
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">GetLengthOfLookAndSay</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="k">go</span> <span class="nf">LookAndSay</span><span class="p">(</span><span class="nx">INPUT</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
    <span class="nx">finalString</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">c</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">LIMIT</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="k">go</span> <span class="nf">LookAndSay</span><span class="p">(</span><span class="nx">finalString</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
        <span class="nx">finalString</span> <span class="p">=</span> <span class="o">&lt;-</span><span class="nx">c</span>
        <span class="c1">// fmt.Println(finalString)
</span><span class="c1"></span>    <span class="p">}</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Lenght of final String:&#34;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">finalString</span><span class="p">))</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><p>This, with the limit raised to 50 run for ~1 hour. Even with the routines although they were just for show since they had to wait for each others input.</p>
<p>Now change this to []byte and the run time was almost under 2 seconds on my machine.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">solutions</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;fmt&#34;</span>
    <span class="s">&#34;strconv&#34;</span>
<span class="p">)</span>

<span class="kd">const</span> <span class="p">(</span>
    <span class="c1">//LIMIT limit
</span><span class="c1"></span>    <span class="nx">LIMIT</span> <span class="p">=</span> <span class="mi">50</span>
<span class="p">)</span>

<span class="c1">//INPUT puzzle input
</span><span class="c1">//This used to be a string until I was reminded that BYTE ARRAY IS ALWAYS FASTER!
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">INPUT</span> <span class="p">=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;1321131112&#34;</span><span class="p">)</span>

<span class="c1">//LookAndSay translates numbers according to Look and Say algo
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">LookAndSay</span><span class="p">(</span><span class="nx">s</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="nx">look</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">charCount</span> <span class="o">:=</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nx">i</span><span class="o">+</span><span class="mi">1</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="p">{</span>
                <span class="nx">charCount</span><span class="o">++</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">b</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatInt</span><span class="p">(</span><span class="nb">int64</span><span class="p">(</span><span class="nx">charCount</span><span class="p">),</span> <span class="mi">10</span><span class="p">))</span>
                <span class="nx">look</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">look</span><span class="p">,</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
                <span class="nx">charCount</span> <span class="p">=</span> <span class="mi">1</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">b</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatInt</span><span class="p">(</span><span class="nb">int64</span><span class="p">(</span><span class="nx">charCount</span><span class="p">),</span> <span class="mi">10</span><span class="p">))</span>
            <span class="nx">look</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">look</span><span class="p">,</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="c1">//GetLengthOfLookAndSay Retrieve the Length of a lookandsay done Limit times
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">GetLengthOfLookAndSay</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">finalString</span> <span class="o">:=</span> <span class="nx">INPUT</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">LIMIT</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nx">finalString</span> <span class="p">=</span> <span class="nf">LookAndSay</span><span class="p">(</span><span class="nx">finalString</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Lenght of final String:&#34;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">finalString</span><span class="p">))</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><p>This is the solution for Day 10 on <a href="http://adventofcode.com/">AdventOfCode</a> by the way.</p>
<p>Thanks for readin'.
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Use Byte Slice Instead of Strings</title>
      <link>https://skarlso.github.io/2015/12/29/use-byte-slice-instead-of-strings/</link>
      <pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/29/use-byte-slice-instead-of-strings/</guid>
      <description><![CDATA[<p>Hello Folks.</p>
<p>This is just a quick post on the topic and a reminder for myself and everybody to ALWAYS USE []BYTE INSTEAD OF STRINGS.</p>
<p>[]Byte is marginally faster than a simple Strings. In fact, I would say using []byte should be the standard instead of strings.</p>
<p>Sample code:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">solutions</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">const</span> <span class="p">(</span>
    <span class="c1">//INPUT input
</span><span class="c1"></span>    <span class="nx">INPUT</span> <span class="p">=</span> <span class="s">&#34;1321131112&#34;</span>
    <span class="c1">//LIMIT limit
</span><span class="c1"></span>    <span class="nx">LIMIT</span> <span class="p">=</span> <span class="mi">50</span>
<span class="p">)</span>

<span class="c1">//LookAndSay translates numbers according to Look and Say algo
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">LookAndSay</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">c</span> <span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">charCount</span> <span class="o">:=</span> <span class="mi">1</span>
    <span class="nx">look</span> <span class="o">:=</span> <span class="s">&#34;&#34;</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nx">i</span><span class="o">+</span><span class="mi">1</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="p">{</span>
                <span class="nx">charCount</span><span class="o">++</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">look</span> <span class="o">+=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%d%s&#34;</span><span class="p">,</span> <span class="nx">charCount</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span>
                <span class="nx">charCount</span> <span class="p">=</span> <span class="mi">1</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">look</span> <span class="o">+=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%d%s&#34;</span><span class="p">,</span> <span class="nx">charCount</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">c</span> <span class="o">&lt;-</span> <span class="nx">look</span>
<span class="p">}</span>

<span class="c1">//GetLengthOfLookAndSay Retrieve the Length of a lookandsay done Limit times
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">GetLengthOfLookAndSay</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="k">go</span> <span class="nf">LookAndSay</span><span class="p">(</span><span class="nx">INPUT</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
    <span class="nx">finalString</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">c</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">LIMIT</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="k">go</span> <span class="nf">LookAndSay</span><span class="p">(</span><span class="nx">finalString</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
        <span class="nx">finalString</span> <span class="p">=</span> <span class="o">&lt;-</span><span class="nx">c</span>
        <span class="c1">// fmt.Println(finalString)
</span><span class="c1"></span>    <span class="p">}</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Lenght of final String:&#34;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">finalString</span><span class="p">))</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><p>This, with the limit raised to 50 run for ~1 hour. Even with the routines although they were just for show since they had to wait for each others input.</p>
<p>Now change this to []byte and the run time was almost under 2 seconds on my machine.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">solutions</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;fmt&#34;</span>
    <span class="s">&#34;strconv&#34;</span>
<span class="p">)</span>

<span class="kd">const</span> <span class="p">(</span>
    <span class="c1">//LIMIT limit
</span><span class="c1"></span>    <span class="nx">LIMIT</span> <span class="p">=</span> <span class="mi">50</span>
<span class="p">)</span>

<span class="c1">//INPUT puzzle input
</span><span class="c1">//This used to be a string until I was reminded that BYTE ARRAY IS ALWAYS FASTER!
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">INPUT</span> <span class="p">=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;1321131112&#34;</span><span class="p">)</span>

<span class="c1">//LookAndSay translates numbers according to Look and Say algo
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">LookAndSay</span><span class="p">(</span><span class="nx">s</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="nx">look</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">charCount</span> <span class="o">:=</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nx">i</span><span class="o">+</span><span class="mi">1</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="p">{</span>
                <span class="nx">charCount</span><span class="o">++</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">b</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatInt</span><span class="p">(</span><span class="nb">int64</span><span class="p">(</span><span class="nx">charCount</span><span class="p">),</span> <span class="mi">10</span><span class="p">))</span>
                <span class="nx">look</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">look</span><span class="p">,</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
                <span class="nx">charCount</span> <span class="p">=</span> <span class="mi">1</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">b</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatInt</span><span class="p">(</span><span class="nb">int64</span><span class="p">(</span><span class="nx">charCount</span><span class="p">),</span> <span class="mi">10</span><span class="p">))</span>
            <span class="nx">look</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">look</span><span class="p">,</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="c1">//GetLengthOfLookAndSay Retrieve the Length of a lookandsay done Limit times
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">GetLengthOfLookAndSay</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">finalString</span> <span class="o">:=</span> <span class="nx">INPUT</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">LIMIT</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nx">finalString</span> <span class="p">=</span> <span class="nf">LookAndSay</span><span class="p">(</span><span class="nx">finalString</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Lenght of final String:&#34;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">finalString</span><span class="p">))</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><p>This is the solution for Day 10 on <a href="http://adventofcode.com/">AdventOfCode</a> by the way.</p>
<p>Thanks for readin'.
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Recursive Letter Frequency Count</title>
      <link>https://skarlso.github.io/2015/12/23/recursive-freq-count/</link>
      <pubDate>Wed, 23 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/23/recursive-freq-count/</guid>
      <description><![CDATA[<p>Hello everybody!</p>
<p>I wanted to do a sort post about word frequency count. I did it many times now and I was curious as how a recursive solution would perform as opposed to looping.</p>
<p>So I wrote it up quickly and added a few benchmarks with different sized data.</p>
<p>First&hellip;. The code:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">var</span> <span class="nx">freqMap</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

<span class="kd">func</span> <span class="nf">countLettersRecursive</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">s</span>
    <span class="p">}</span>
    <span class="nx">freqMap</span><span class="p">[</span><span class="nb">string</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">])]</span><span class="o">++</span>
    <span class="k">return</span> <span class="nf">countLettersRecursive</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">countLettersLoop</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span> <span class="p">{</span>
        <span class="nx">freqMap</span><span class="p">[</span><span class="nb">string</span><span class="p">(</span><span class="nx">v</span><span class="p">)]</span><span class="o">++</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Very simple. The first run with a small sample: &ldquo;asdfasdfasdfasdfasdf&rdquo;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">BenchmarkLoopFrequencyCount  <span class="m">5000000</span>           <span class="m">377</span> ns/op
BenchmarkRecursiveFrequencyCount     <span class="m">5000000</span>           <span class="m">380</span> ns/op
</code></pre></td></tr></table>
</div>
</div><p>They almost equal but Recursive seems to be lagging behind. So I increased the sample size to a text which was 496 long.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">PASS
BenchmarkLoopFrequencyCount    <span class="m">30000</span>         <span class="m">53336</span> ns/op
BenchmarkRecursiveFrequencyCount       <span class="m">20000</span>         <span class="m">61780</span> ns/op
</code></pre></td></tr></table>
</div>
</div><p>And, as expected, recursing is less performant than looping. Also, I think my machine would die from a larger data size&hellip;</p>
<p>But the recursive looks so much cooler though.</p>
<p>Thanks for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Go Development Environment</title>
      <link>https://skarlso.github.io/2015/12/08/go-development-environment/</link>
      <pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/08/go-development-environment/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>Here is a little something I&rsquo;ve put together, since I&rsquo;m doing it a lot.</p>
<p><a href="https://github.com/Skarlso/godevelopment">Go Development Environment</a></p>
<p>If I have a project I&rsquo;d like to contribute, like <a href="https://gohugo.io">GoHugo</a>, I have to setup a development environment, because most of the times, I&rsquo;m on a Mac. And on OSX things work differently. I like to work in a Linux environment since that&rsquo;s what most of the projects are built on.</p>
<p>So here you go. Just download the files, and say <strong>vagrant up</strong> which will do the magic.</p>
<p>This sets up <a href="https://github.com/fatih/vim-go">vim-go</a> with code completion given by YouCompleteMe and some go features like, fmt on save and build error highlighting.</p>
<p>Also sets up ctags which will give you tags and the ability to do GoTo Declaration.</p>
<p>Installs a bunch of utilities, and configures Go. There is an option to install docker as well. But it&rsquo;s ignored at the moment.</p>
<p>Just uncomment this line:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="c1">#config.vm.provision &#34;shell&#34;, path: &#34;install_docker.sh&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>Any questions or request, feel free to submit an Issue!</p>
<p>Thanks for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Welcome To My New Blog</title>
      <link>https://skarlso.github.io/2015/12/07/welcome-to-my-new-blog/</link>
      <pubDate>Mon, 07 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/07/welcome-to-my-new-blog/</guid>
      <description><![CDATA[<h1 id="hello-folks">Hello Folks</h1>
<p>Welcome to my new blog. I decided to move away for a number of reasons, but setting up a static page blog site is very cool if you don&rsquo;t directly use a database. Since posts are just posts and I have a different way of hosting images, this really was just a matter of time.</p>
<p>And <a href="https://gohugo.io/">Hugo</a> / Github pages provided the tools which made this move possible.</p>
<p>Also, I love writing this post in Markdown. I always liked the formatting rules of it, so this is quiet the blast.</p>
<p>Code will look a little more readble now as well:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">handlerChain</span> <span class="o">:=</span> <span class="nx">alice</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">Logging</span><span class="p">,</span> <span class="nx">PanicHandler</span><span class="p">)</span>
    <span class="nx">router</span> <span class="o">:=</span> <span class="nx">mux</span><span class="p">.</span><span class="nf">NewRouter</span><span class="p">().</span><span class="nf">StrictSlash</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
    <span class="nx">router</span><span class="p">.</span><span class="nf">Handle</span><span class="p">(</span><span class="s">&#34;/create&#34;</span><span class="p">,</span> <span class="nx">handlerChain</span><span class="p">.</span><span class="nf">ThenFunc</span><span class="p">(</span><span class="nx">createIssue</span><span class="p">)).</span><span class="nf">Methods</span><span class="p">(</span><span class="s">&#34;POST&#34;</span><span class="p">)</span>
    <span class="nx">router</span><span class="p">.</span><span class="nf">Handle</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">handlerChain</span><span class="p">.</span><span class="nf">ThenFunc</span><span class="p">(</span><span class="nx">renderMainPage</span><span class="p">)).</span><span class="nf">Methods</span><span class="p">(</span><span class="s">&#34;GET&#34;</span><span class="p">)</span>
    <span class="nx">router</span><span class="p">.</span><span class="nf">PathPrefix</span><span class="p">(</span><span class="s">&#34;/css/&#34;</span><span class="p">).</span><span class="nf">Handler</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nf">StripPrefix</span><span class="p">(</span><span class="s">&#34;/css/&#34;</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nf">FileServer</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nf">Dir</span><span class="p">(</span><span class="s">&#34;./css&#34;</span><span class="p">))))</span>
    <span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Starting server to listen on port: 8989...&#34;</span><span class="p">)</span>
    <span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:8989&#34;</span><span class="p">,</span> <span class="nx">router</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Much easier on the eyes. And linking is a breeze as well.</p>
<h2 id="things-to-notice">Things to notice</h2>
<p>There is now a content on the side which will list the sections in a post. And there is an estimated read timer in the post&rsquo;s title. It takes average reading speed and wordcount into account.</p>
<p>Anyhow, thanks for joining me in the new realm, and happy reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Go JIRA API client</title>
      <link>https://skarlso.github.io/2015/11/20/go-jira-api-client/</link>
      <pubDate>Fri, 20 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/11/20/go-jira-api-client/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>So, I was playing around and created a client for JIRA written in Go. It was nice to do some JSON transformation. And sending POSTS was really trivial.</p>
<p>It&rsquo;s still in it&rsquo;s infancy and I have a couple of more features I want to implement, but, here is the code.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">
<span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;bytes&#34;</span>
	<span class="s">&#34;encoding/json&#34;</span>
	<span class="s">&#34;flag&#34;</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;io/ioutil&#34;</span>
	<span class="s">&#34;log&#34;</span>
	<span class="s">&#34;net/http&#34;</span>
	<span class="s">&#34;os&#34;</span>

	<span class="s">&#34;github.com/BurntSushi/toml&#34;</span>
<span class="p">)</span>

<span class="kd">var</span> <span class="nx">configFile</span> <span class="p">=</span> <span class="s">&#34;~/.jira_config.toml&#34;</span>
<span class="kd">var</span> <span class="nx">parameter</span> <span class="kt">string</span>

<span class="kd">var</span> <span class="nx">flags</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Comment</span>     <span class="kt">string</span>
	<span class="nx">Description</span> <span class="kt">string</span>
	<span class="nx">IssueKey</span>    <span class="kt">string</span>
	<span class="nx">Priority</span>    <span class="kt">string</span>
	<span class="nx">Resolution</span>  <span class="kt">string</span>
	<span class="nx">Title</span>       <span class="kt">string</span>
	<span class="nx">Project</span>     <span class="kt">string</span>
<span class="p">}</span>

<span class="c1">//Issue is a representation of a Jira Issue
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Issue</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Fields</span> <span class="kd">struct</span> <span class="p">{</span>
		<span class="nx">Project</span> <span class="kd">struct</span> <span class="p">{</span>
			<span class="nx">Key</span> <span class="kt">string</span> <span class="s">`json:&#34;key&#34;`</span>
		<span class="p">}</span> <span class="s">`json:&#34;project&#34;`</span>
		<span class="nx">Summary</span>     <span class="kt">string</span> <span class="s">`json:&#34;summary&#34;`</span>
		<span class="nx">Description</span> <span class="kt">string</span> <span class="s">`json:&#34;description&#34;`</span>
		<span class="nx">Issuetype</span>   <span class="kd">struct</span> <span class="p">{</span>
			<span class="nx">Name</span> <span class="kt">string</span> <span class="s">`json:&#34;name&#34;`</span>
		<span class="p">}</span> <span class="s">`json:&#34;issuetype&#34;`</span>
		<span class="nx">Priority</span> <span class="kd">struct</span> <span class="p">{</span>
			<span class="nx">ID</span> <span class="kt">string</span> <span class="s">`json:&#34;id&#34;`</span>
		<span class="p">}</span> <span class="s">`json:&#34;priority&#34;`</span>
	<span class="p">}</span> <span class="s">`json:&#34;fields&#34;`</span>
<span class="p">}</span>

<span class="c1">//Transition defines a transition json object. Used for starting, stoppinp
</span><span class="c1">//generally for state stranfer
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Transition</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Fields</span> <span class="kd">struct</span> <span class="p">{</span>
		<span class="nx">Resolution</span> <span class="kd">struct</span> <span class="p">{</span>
			<span class="nx">Name</span> <span class="kt">string</span> <span class="s">`json:&#34;name&#34;`</span>
		<span class="p">}</span> <span class="s">`json:&#34;resolution&#34;`</span>
	<span class="p">}</span> <span class="s">`json:&#34;fields&#34;`</span>
	<span class="nx">Transition</span> <span class="kd">struct</span> <span class="p">{</span>
		<span class="nx">ID</span> <span class="kt">string</span> <span class="s">`json:&#34;id&#34;`</span>
	<span class="p">}</span> <span class="s">`json:&#34;transition&#34;`</span>
<span class="p">}</span>

<span class="c1">//Credentials a representation of a JIRA config which helds API permissions
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Credentials</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Username</span> <span class="kt">string</span>
	<span class="nx">Password</span> <span class="kt">string</span>
	<span class="nx">URL</span>      <span class="kt">string</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">flag</span><span class="p">.</span><span class="nf">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">flags</span><span class="p">.</span><span class="nx">Comment</span><span class="p">,</span> <span class="s">&#34;m&#34;</span><span class="p">,</span> <span class="s">&#34;Default Comment&#34;</span><span class="p">,</span> <span class="s">&#34;A Comment when changing the status of an Issue.&#34;</span><span class="p">)</span>
	<span class="nx">flag</span><span class="p">.</span><span class="nf">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">flags</span><span class="p">.</span><span class="nx">Description</span><span class="p">,</span> <span class="s">&#34;d&#34;</span><span class="p">,</span> <span class="s">&#34;Default Description&#34;</span><span class="p">,</span> <span class="s">&#34;Provide a description for a newly created Issue.&#34;</span><span class="p">)</span>
	<span class="nx">flag</span><span class="p">.</span><span class="nf">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">flags</span><span class="p">.</span><span class="nx">Priority</span><span class="p">,</span> <span class="s">&#34;p&#34;</span><span class="p">,</span> <span class="s">&#34;2&#34;</span><span class="p">,</span> <span class="s">&#34;The priority of an Issue which will be set.&#34;</span><span class="p">)</span>
	<span class="nx">flag</span><span class="p">.</span><span class="nf">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">flags</span><span class="p">.</span><span class="nx">IssueKey</span><span class="p">,</span> <span class="s">&#34;k&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="s">&#34;Issue key of an issue.&#34;</span><span class="p">)</span>
	<span class="nx">flag</span><span class="p">.</span><span class="nf">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">flags</span><span class="p">.</span><span class="nx">Resolution</span><span class="p">,</span> <span class="s">&#34;r&#34;</span><span class="p">,</span> <span class="s">&#34;Done&#34;</span><span class="p">,</span> <span class="s">&#34;Resolution when an issue is closed. Ex.: Done, Fixed, Won&#39;t fix.&#34;</span><span class="p">)</span>
	<span class="nx">flag</span><span class="p">.</span><span class="nf">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">flags</span><span class="p">.</span><span class="nx">Title</span><span class="p">,</span> <span class="s">&#34;t&#34;</span><span class="p">,</span> <span class="s">&#34;Default Title&#34;</span><span class="p">,</span> <span class="s">&#34;Title of an Issue.&#34;</span><span class="p">)</span>
	<span class="nx">flag</span><span class="p">.</span><span class="nf">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">flags</span><span class="p">.</span><span class="nx">Project</span><span class="p">,</span> <span class="s">&#34;o&#34;</span><span class="p">,</span> <span class="s">&#34;IT&#34;</span><span class="p">,</span> <span class="s">&#34;Define a Project to create a ticket in.&#34;</span><span class="p">)</span>
	<span class="nx">flag</span><span class="p">.</span><span class="nf">Parse</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">cred</span> <span class="o">*</span><span class="nx">Credentials</span><span class="p">)</span> <span class="nf">initConfig</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Stat</span><span class="p">(</span><span class="nx">configFile</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Error using config file: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">toml</span><span class="p">.</span><span class="nf">DecodeFile</span><span class="p">(</span><span class="nx">configFile</span><span class="p">,</span> <span class="nx">cred</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;Error during decoding toml config: &#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">flag</span><span class="p">.</span><span class="nf">Args</span><span class="p">())</span> <span class="p">&lt;</span> <span class="mi">1</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;Please provide an action to take. Usage information:&#34;</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">parameter</span> <span class="p">=</span> <span class="nx">flag</span><span class="p">.</span><span class="nf">Arg</span><span class="p">()</span>
	<span class="k">switch</span> <span class="nx">parameter</span> <span class="p">{</span>
	<span class="k">case</span> <span class="s">&#34;close&#34;</span><span class="p">:</span>
		<span class="nf">closeIssue</span><span class="p">(</span><span class="nx">flags</span><span class="p">.</span><span class="nx">IssueKey</span><span class="p">)</span>
	<span class="k">case</span> <span class="s">&#34;start&#34;</span><span class="p">:</span>
		<span class="nf">startIssue</span><span class="p">(</span><span class="nx">flags</span><span class="p">.</span><span class="nx">IssueKey</span><span class="p">)</span>
	<span class="k">case</span> <span class="s">&#34;create&#34;</span><span class="p">:</span>
		<span class="nf">createIssue</span><span class="p">()</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">closeIssue</span><span class="p">(</span><span class="nx">issueKey</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">issueKey</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;Please provide an issueID with -k&#34;</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Closing issue number: &#34;</span><span class="p">,</span> <span class="nx">issueKey</span><span class="p">)</span>

	<span class="kd">var</span> <span class="nx">trans</span> <span class="nx">Transition</span>

	<span class="c1">//TODO: Add the ability to define a comment for the close reason
</span><span class="c1"></span>	<span class="nx">trans</span><span class="p">.</span><span class="nx">Fields</span><span class="p">.</span><span class="nx">Resolution</span><span class="p">.</span><span class="nx">Name</span> <span class="p">=</span> <span class="nx">flags</span><span class="p">.</span><span class="nx">Resolution</span>
	<span class="nx">trans</span><span class="p">.</span><span class="nx">Transition</span><span class="p">.</span><span class="nx">ID</span> <span class="p">=</span> <span class="s">&#34;2&#34;</span>
	<span class="nx">marhsalledTrans</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">trans</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;Error occured when marshaling transition: &#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Marshalled:&#34;</span><span class="p">,</span> <span class="nx">trans</span><span class="p">)</span>
	<span class="nf">sendRequest</span><span class="p">(</span><span class="nx">marhsalledTrans</span><span class="p">,</span> <span class="s">&#34;POST&#34;</span><span class="p">,</span> <span class="nx">issueKey</span><span class="o">+</span><span class="s">&#34;/transitions?expand=transitions.fields&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">startIssue</span><span class="p">(</span><span class="nx">issueID</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">issueID</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;Please provide an issueID with -i&#34;</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Starting issue number:&#34;</span><span class="p">,</span> <span class="nx">issueID</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">createIssue</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Creating new issue.&#34;</span><span class="p">)</span>
	<span class="kd">var</span> <span class="nx">issue</span> <span class="nx">Issue</span>
	<span class="nx">issue</span><span class="p">.</span><span class="nx">Fields</span><span class="p">.</span><span class="nx">Description</span> <span class="p">=</span> <span class="nx">flags</span><span class="p">.</span><span class="nx">Description</span>
	<span class="nx">issue</span><span class="p">.</span><span class="nx">Fields</span><span class="p">.</span><span class="nx">Priority</span><span class="p">.</span><span class="nx">ID</span> <span class="p">=</span> <span class="nx">flags</span><span class="p">.</span><span class="nx">Priority</span>
	<span class="nx">issue</span><span class="p">.</span><span class="nx">Fields</span><span class="p">.</span><span class="nx">Summary</span> <span class="p">=</span> <span class="nx">flags</span><span class="p">.</span><span class="nx">Title</span>
	<span class="nx">issue</span><span class="p">.</span><span class="nx">Fields</span><span class="p">.</span><span class="nx">Project</span><span class="p">.</span><span class="nx">Key</span> <span class="p">=</span> <span class="nx">flags</span><span class="p">.</span><span class="nx">Project</span>
	<span class="nx">issue</span><span class="p">.</span><span class="nx">Fields</span><span class="p">.</span><span class="nx">Issuetype</span><span class="p">.</span><span class="nx">Name</span> <span class="p">=</span> <span class="s">&#34;Task&#34;</span>
	<span class="nx">marshalledIssue</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">issue</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;Error occured when Marshaling Issue:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nf">sendRequest</span><span class="p">(</span><span class="nx">marshalledIssue</span><span class="p">,</span> <span class="s">&#34;POST&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">sendRequest</span><span class="p">(</span><span class="nx">jsonStr</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">method</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">url</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">cred</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Credentials</span><span class="p">{}</span>
	<span class="nx">cred</span><span class="p">.</span><span class="nf">initConfig</span><span class="p">()</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Json:&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">jsonStr</span><span class="p">))</span>
	<span class="nx">req</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">NewRequest</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">cred</span><span class="p">.</span><span class="nx">URL</span><span class="o">+</span><span class="nx">url</span><span class="p">,</span> <span class="nx">bytes</span><span class="p">.</span><span class="nf">NewBuffer</span><span class="p">(</span><span class="nx">jsonStr</span><span class="p">))</span>
	<span class="nx">req</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;Content-Type&#34;</span><span class="p">,</span> <span class="s">&#34;application/json&#34;</span><span class="p">)</span>
	<span class="nx">req</span><span class="p">.</span><span class="nf">SetBasicAuth</span><span class="p">(</span><span class="nx">cred</span><span class="p">.</span><span class="nx">Username</span><span class="p">,</span> <span class="nx">cred</span><span class="p">.</span><span class="nx">Password</span><span class="p">)</span>

	<span class="nx">client</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Client</span><span class="p">{}</span>
	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;response Status:&#34;</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Status</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;response Headers:&#34;</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Header</span><span class="p">)</span>
	<span class="nx">body</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;response Body:&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">body</span><span class="p">))</span>

<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>It can also be found under my github page: <a href="https://github.com/Skarlso/goprojects/tree/master/gojira" target="_blank">GoJira Github</a>.</p>
<p>Feel free to open up issues if you would like to use it and need some features which you would find interesting. Currently the username and password for the API are stored in a local config file in your home folder. Later on, I&rsquo;ll add the ability to have a token rather than a username:password combination.</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>The One Hundred Day GitHub Challenge</title>
      <link>https://skarlso.github.io/2015/11/15/the-one-hundred-day-github-challenge/</link>
      <pubDate>Sun, 15 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/11/15/the-one-hundred-day-github-challenge/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>Today, I present to you the One Hundred Day Github Challenge.</p>
<p>The rules are simple:</p>
<ol>
<li>Minimum of <strong>One</strong> commit every day for a <strong>Hundred days</strong>.</li>
<li>Commit has to be <strong>meaningful</strong> but can be as little as a fix in a Readme.md.</li>
<li>Doesn&rsquo;t matter if you are on vacation, there are no exceptions.</li>
<li><strong>There. Are. No. Exceptions.</strong></li>
<li>If you <strong>fail</strong> a day, you have to <strong>start over</strong>.</li>
<li><strong>No cheating.</strong> You only cheat yourself, so this is really up to you.</li>
</ol>
<p>Let me be more clear here, because it seems I wasn&rsquo;t clear enough. What you make out of this challenge, it&rsquo;s up to you. If you just update a readme.md for hundred days, that&rsquo;s fine. Just do it every day. It&rsquo;s a commitment. At least you&rsquo;ll have a nice Readme.</p>
<p>Also, let me be clear on another thing. THERE ARE NO EXCEPTIONS. Even on holidays. No. Exceptions.</p>
<p>So there you have it. It&rsquo;s easy, but then again, it&rsquo;s not.</p>
<p>Mine starts today! 100.</p>
<p>Thanks for reading.</p>
<p>And happy coding.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Go Progress Quest</title>
      <link>https://skarlso.github.io/2015/11/09/go-progress-quest/</link>
      <pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/11/09/go-progress-quest/</guid>
      <description><![CDATA[<p>Hi Folks.</p>
<p>I started to build a Progress Quest type of web app in Go.</p>
<p>If you&rsquo;d like to join, or just tag along, please drop by here =&gt; <a href="https://github.com/Skarlso/goprogressquest" target="_blank">Go Progress Quest</a> and feel free to submit an issue if you have an idea, or would like to contribute!</p>
<p>I will try and document the Progress.</p>
<p>Thank you for reading!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Kill a Program on Connecting to a specific WiFi – OSX</title>
      <link>https://skarlso.github.io/2015/10/26/kill-a-program-on-connecting-to-a-specific-wifi-osx/</link>
      <pubDate>Mon, 26 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/10/26/kill-a-program-on-connecting-to-a-specific-wifi-osx/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>If you have the tendency, like me, to forget that you are on the corporate VPN, or leave a certain software open when you bring your laptop to work, this might be helpful to you too.</p>
<p>It&rsquo;s a small script which kills a program when you change your Wifi network.</p>
<p>Script:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">
<span class="c1">#!/bin/bash</span>

<span class="k">function</span> log <span class="o">{</span>
    <span class="nv">directory</span><span class="o">=</span><span class="s2">&#34;/Users/&lt;username&gt;/wifi_detect&#34;</span>
    <span class="nv">log_dir_exists</span><span class="o">=</span><span class="nb">true</span>
    <span class="k">if</span> <span class="o">[</span> ! -d <span class="nv">$directory</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nb">echo</span> <span class="s2">&#34;Attempting to create =&gt; </span><span class="nv">$directory</span><span class="s2">&#34;</span>
        mkdir -p <span class="nv">$directory</span>
        <span class="k">if</span> <span class="o">[</span> ! -d <span class="nv">$directory</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
            <span class="nb">echo</span> <span class="s2">&#34;Could not create directory. Continue to log to echo.&#34;</span>
            <span class="nv">log_dir_exists</span><span class="o">=</span><span class="nb">false</span>
        <span class="k">fi</span>
    <span class="k">fi</span>
    <span class="k">if</span> <span class="nv">$log_dir_exists</span> <span class="p">;</span> <span class="k">then</span>
        <span class="nb">echo</span> <span class="s2">&#34;</span><span class="k">$(</span>date<span class="k">)</span><span class="s2">:</span><span class="nv">$1</span><span class="s2">&#34;</span> &gt;&gt; <span class="s2">&#34;</span><span class="nv">$directory</span><span class="s2">/log.txt&#34;</span>
    <span class="k">else</span>
        <span class="nb">echo</span> <span class="s2">&#34;</span><span class="k">$(</span>date<span class="k">)</span><span class="s2">:</span><span class="nv">$1</span><span class="s2">&#34;</span>
    <span class="k">fi</span>
<span class="o">}</span>

<span class="k">function</span> check_program <span class="o">{</span>
    <span class="nv">to_kill</span><span class="o">=</span><span class="s2">&#34;[</span><span class="si">${</span><span class="nv">1</span><span class="p">::</span><span class="nv">1</span><span class="si">}</span><span class="s2">]</span><span class="si">${</span><span class="nv">1</span><span class="p">:</span><span class="nv">1</span><span class="si">}</span><span class="s2">&#34;</span>
    log <span class="s2">&#34;Checking if </span><span class="nv">$to_kill</span><span class="s2"> really quit.&#34;</span>
    <span class="nv">ps</span><span class="o">=</span><span class="k">$(</span>ps aux <span class="p">|</span>grep <span class="s2">&#34;</span><span class="nv">$to_kill</span><span class="s2">&#34;</span><span class="k">)</span>
    log <span class="s2">&#34;ps =&gt; </span><span class="nv">$ps</span><span class="s2">&#34;</span>
    <span class="k">if</span> <span class="o">[</span> -z <span class="s2">&#34;</span><span class="nv">$ps</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
	<span class="c1"># 0 - True</span>
        <span class="k">return</span>
    <span class="k">else</span>
	<span class="c1"># 1 - False</span>
        <span class="k">return</span> <span class="m">1</span>
    <span class="k">fi</span>
<span class="o">}</span>

<span class="k">function</span> kill_program <span class="o">{</span>
    log <span class="s2">&#34;Killing program&#34;</span>
    <span class="sb">`</span>pkill -f <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span><span class="sb">`</span>
    sleep <span class="m">1</span>
    <span class="k">if</span> ! check_program <span class="nv">$1</span> <span class="p">;</span> <span class="k">then</span>
	log <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2"> Did not quit!&#34;</span>
    <span class="k">else</span>
	log <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2"> quit successfully&#34;</span>
    <span class="k">fi</span>
<span class="o">}</span>

<span class="nv">wifi_name</span><span class="o">=</span><span class="k">$(</span>networksetup -getairportnetwork en0 <span class="p">|</span>awk -F<span class="s2">&#34;: &#34;</span> <span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span>
log <span class="s2">&#34;Wifi name: </span><span class="nv">$wifi_name</span><span class="s2">&#34;</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$wifi_name</span><span class="s2">&#34;</span> <span class="o">=</span> <span class="s2">&#34;&lt;wifi_name&gt;&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    log <span class="s2">&#34;On corporate network... Killing Program&#34;</span>
    kill_program <span class="s2">&#34;&lt;programname&gt;&#34;</span>
<span class="k">elif</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$wifi_name</span><span class="s2">&#34;</span> <span class="o">=</span> <span class="s2">&#34;&lt;home_wifi_name&gt;&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    <span class="c1"># Kill &lt;program&gt; if enabled and if on &lt;home_wifi&gt; and if Tunnelblick is running.</span>
    log <span class="s2">&#34;Not on corporate network... Killing &lt;program&gt; if Tunnelblick is active.&#34;</span>
    <span class="k">if</span> ! check_program <span class="s2">&#34;Tunnelblick&#34;</span> <span class="p">;</span> <span class="k">then</span>
	log <span class="s2">&#34;Tunnelblick is active. Killing &lt;program&gt;&#34;</span>
	kill_program <span class="s2">&#34;&lt;program&gt;&#34;</span>
    <span class="k">else</span>
	log <span class="s2">&#34;All good... Happy coding.&#34;</span>
    <span class="k">fi</span>
<span class="k">else</span>
    log <span class="s2">&#34;No known Network...&#34;</span>
<span class="k">fi</span>
</code></pre></td></tr></table>
</div>
</div><p>Now, the trick is, on OSX to only trigger this when your network changes. For this, you can have a &lsquo;launchd&rsquo; daemon, which is configured to watch three files which relate to a network being changed.</p>
<p>The script sits under your ~/Library/LaunchAgents folder. Create something like, com.username.checknetwork.plist.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml">
<span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
<span class="cp">&lt;!DOCTYPE plist PUBLIC &#34;-//Apple Computer//DTD PLIST 1.0//EN&#34; \
</span><span class="cp"> &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&gt;</span>
<span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&#34;1.0&#34;</span><span class="nt">&gt;</span>
<span class="nt">&lt;dict&gt;</span>
  <span class="nt">&lt;key&gt;</span>Label<span class="nt">&lt;/key&gt;</span>
  <span class="nt">&lt;string&gt;</span>ifup.ddns<span class="nt">&lt;/string&gt;</span>

  <span class="nt">&lt;key&gt;</span>LowPriorityIO<span class="nt">&lt;/key&gt;</span>
  <span class="nt">&lt;true/&gt;</span>

  <span class="nt">&lt;key&gt;</span>ProgramArguments<span class="nt">&lt;/key&gt;</span>
  <span class="nt">&lt;array&gt;</span>
    <span class="nt">&lt;string&gt;</span>/Users/username/scripts/ddns-update.sh<span class="nt">&lt;/string&gt;</span>
  <span class="nt">&lt;/array&gt;</span>

  <span class="nt">&lt;key&gt;</span>WatchPaths<span class="nt">&lt;/key&gt;</span>
  <span class="nt">&lt;array&gt;</span>
    <span class="nt">&lt;string&gt;</span>/etc/resolv.conf<span class="nt">&lt;/string&gt;</span>
    <span class="nt">&lt;string&gt;</span>/Library/Preferences/SystemConfiguration/NetworkInterfaces.plist<span class="nt">&lt;/string&gt;</span>
    <span class="nt">&lt;string&gt;</span>/Library/Preferences/SystemConfiguration/com.apple.airport.preferences.plist<span class="nt">&lt;/string&gt;</span>
  <span class="nt">&lt;/array&gt;</span>

  <span class="nt">&lt;key&gt;</span>RunAtLoad<span class="nt">&lt;/key&gt;</span>
  <span class="nt">&lt;true/&gt;</span>
<span class="nt">&lt;/dict&gt;</span>
<span class="nt">&lt;/plist&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>Now, when you change your network, to whatever your corporate network is, you&rsquo;ll kill Sublime.</p>
<p>Hope this helps somebody.</p>
<p>Cheers,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Circular buffer in Go</title>
      <link>https://skarlso.github.io/2015/10/15/circular-buffer-in-go/</link>
      <pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/10/15/circular-buffer-in-go/</guid>
      <description><![CDATA[<p>I&rsquo;m proud of this one too. No peaking. I like how go let&rsquo;s you do this kind of stuff in a very nice way.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">circular</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="c1">//TestVersion testVersion
</span><span class="c1"></span><span class="kd">const</span> <span class="nx">TestVersion</span> <span class="p">=</span> <span class="mi">1</span>

<span class="c1">//Buffer buffer type
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Buffer</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">buffer</span> <span class="p">[]</span><span class="kt">byte</span>
	<span class="nx">full</span>   <span class="kt">int</span>
	<span class="nx">size</span>   <span class="kt">int</span>
	<span class="nx">s</span><span class="p">,</span> <span class="nx">e</span>   <span class="kt">int</span>
<span class="p">}</span>

<span class="c1">//NewBuffer creates a new Buffer
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">NewBuffer</span><span class="p">(</span><span class="nx">size</span> <span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="nx">Buffer</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">Buffer</span><span class="p">{</span><span class="nx">buffer</span><span class="p">:</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">size</span><span class="p">),</span> <span class="nx">s</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">e</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">size</span><span class="p">:</span> <span class="nx">size</span><span class="p">,</span> <span class="nx">full</span><span class="p">:</span> <span class="mi">0</span><span class="p">}</span>
<span class="p">}</span>

<span class="c1">//ReadByte reads a byte from b Buffer
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">Buffer</span><span class="p">)</span> <span class="nf">ReadByte</span><span class="p">()</span> <span class="p">(</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nx">full</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
		<span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Danger Will Robinson: %s&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">readByte</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">s</span><span class="p">]</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">s</span> <span class="p">=</span> <span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">s</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nx">b</span><span class="p">.</span><span class="nx">size</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">full</span><span class="o">--</span>
	<span class="k">return</span> <span class="nx">readByte</span><span class="p">,</span> <span class="kc">nil</span>
<span class="p">}</span>

<span class="c1">//WriteByte writes c byte to the buffer
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">Buffer</span><span class="p">)</span> <span class="nf">WriteByte</span><span class="p">(</span><span class="nx">c</span> <span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nx">full</span><span class="o">+</span><span class="mi">1</span> <span class="p">&gt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">size</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Danger Will Robinson: %s&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">e</span><span class="p">]</span> <span class="p">=</span> <span class="nx">c</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">e</span> <span class="p">=</span> <span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">e</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nx">b</span><span class="p">.</span><span class="nx">size</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">full</span><span class="o">++</span>
	<span class="k">return</span> <span class="kc">nil</span>
<span class="p">}</span>

<span class="c1">//Overwrite overwrites the oldest byte in Buffer
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">Buffer</span><span class="p">)</span> <span class="nf">Overwrite</span><span class="p">(</span><span class="nx">c</span> <span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">s</span><span class="p">]</span> <span class="p">=</span> <span class="nx">c</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">s</span> <span class="p">=</span> <span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">s</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nx">b</span><span class="p">.</span><span class="nx">size</span>
<span class="p">}</span>

<span class="c1">//Reset resets the buffer
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">Buffer</span><span class="p">)</span> <span class="nf">Reset</span><span class="p">()</span> <span class="p">{</span>
	<span class="o">*</span><span class="nx">b</span> <span class="p">=</span> <span class="o">*</span><span class="nf">NewBuffer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">Buffer</span><span class="p">)</span> <span class="nf">String</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;Buffer: %d, %d, %d, %d&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">s</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">e</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
    </item>
    
    <item>
      <title>Jenkins Job DSL and Groovy goodness</title>
      <link>https://skarlso.github.io/2015/10/15/jenkins-job-dsl-and-groovy-goodness/</link>
      <pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/10/15/jenkins-job-dsl-and-groovy-goodness/</guid>
      <description><![CDATA[<p>Hi Folks.</p>
<p>Ever used <a href="https://wiki.jenkins-ci.org/display/JENKINS/Job+DSL+Plugin" target="_blank">Job DSL plugin</a> for Jenkins? What is that you say? Well, it&rsquo;s TEH most awesome plug-in for Jenkins to have, because you can CODE your job configuration and put it under source control.</p>
<p>Today, however, I&rsquo;m not going to write about that because the tutorials on Jenkins JOB DSL are very extensive and very well done. Anyone can pick them up.</p>
<p>Today, I would like to write about a part of it which is even more interesting. And that is, extracting re-occurring parts in your job configurations.</p>
<p>If you have jobs, which have a common part that is repeated everywhere, you usually have an urge to extracted that into one place, lest it changes and you have to go an apply the change everywhere. That&rsquo;s not very efficient. But how do you do that in something which looks like a JSON descriptor?</p>
<p>Fret not, it is just Groovy. And being just groovy, you can use Groovy to implement parts of the job description and then apply that implementation to the job in the DSL.</p>
<p>Suppose you have an email which you send after every job for which the DSL looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy">
<span class="n">job</span><span class="o">(</span><span class="s1">&#39;MyTestJob&#39;</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">description</span> <span class="s1">&#39;&lt;strong&gt;GENERATED - do not modify&lt;/strong&gt;&#39;</span>
    <span class="n">label</span><span class="o">(</span><span class="s1">&#39;machine_label&#39;</span><span class="o">)</span>
    <span class="n">logRotator</span><span class="o">(</span><span class="mi">30</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span>
    <span class="n">parameters</span> <span class="o">{</span>
        <span class="n">stringParam</span><span class="o">(</span><span class="s1">&#39;somestringparam&#39;</span><span class="o">,</span> <span class="s1">&#39;default_valye&#39;</span><span class="o">,</span> <span class="s1">&#39;Description&#39;</span><span class="o">)</span>
    <span class="o">}</span>
    <span class="n">wrappers</span> <span class="o">{</span>
        <span class="n">timeout</span> <span class="o">{</span>
            <span class="n">noActivity</span><span class="o">(</span><span class="mi">600</span><span class="o">)</span>
            <span class="n">abortBuild</span><span class="o">()</span>
            <span class="n">failBuild</span><span class="o">()</span>
            <span class="n">writeDescription</span><span class="o">(</span><span class="s1">&#39;Build failed due to timeout after {0} minutes&#39;</span><span class="o">)</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="n">deliveryPipelineConfiguration</span><span class="o">(</span><span class="s2">&#34;Main&#34;</span><span class="o">,</span> <span class="s2">&#34;MyTestJob&#34;</span><span class="o">)</span>
    <span class="n">wrappers</span> <span class="o">{</span>
        <span class="n">preBuildCleanup</span> <span class="o">{</span>
            <span class="n">deleteDirectories</span><span class="o">()</span>
        <span class="o">}</span>
        <span class="n">timestamps</span><span class="o">()</span>
    <span class="o">}</span>
    <span class="n">triggers</span> <span class="o">{</span>
        <span class="n">cron</span><span class="o">(</span><span class="s1">&#39;H 12 * * 1,2&#39;</span><span class="o">)</span>
    <span class="o">}</span>
    <span class="n">steps</span> <span class="o">{</span>
        <span class="n">batchFile</span><span class="o">(</span><span class="n">readFileFromWorkspace</span><span class="o">(</span><span class="s1">&#39;relative/path/to/file&#39;</span><span class="o">))</span>
    <span class="o">}</span>
            <span class="n">publishers</span> <span class="o">{</span>
                <span class="n">wsCleanup</span><span class="o">()</span>
                <span class="n">extendedEmail</span><span class="o">(</span><span class="s1">&#39;email@address.com&#39;</span><span class="o">,</span> <span class="s1">&#39;$DEFAULT_SUBJECT&#39;</span><span class="o">,</span> <span class="s1">&#39;$DEFAULT_CONTENT&#39;</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">configure</span> <span class="o">{</span> <span class="n">node</span> <span class="o">-&gt;</span>
                        <span class="n">node</span> <span class="s">/ presendScript &lt;&lt; readFileFromWorkspace(&#39;email_templates/</span><span class="n">emailtemplate</span><span class="o">.</span><span class="na">groovy</span><span class="s1">&#39;)
</span><span class="s1">                        node / replyTo &lt;&lt; &#39;</span><span class="n">$DEFAULT_REPLYTO</span><span class="s1">&#39;
</span><span class="s1">                        node / contentType &lt;&lt; &#39;</span><span class="k">default</span><span class="s1">&#39;
</span><span class="s1">                    }
</span><span class="s1">                    trigger(triggerName: &#39;</span><span class="n">StillUnstable</span><span class="s1">&#39;, subject: &#39;</span><span class="n">$DEFAULT_SUBJECT</span><span class="s1">&#39;, body: &#39;</span><span class="n">$DEFAULT_CONTENT</span><span class="s1">&#39;, replyTo: &#39;</span><span class="n">$DEFAULT_REPLYTO</span><span class="s1">&#39;, sendToDevelopers: true, sendToRecipientList: true)
</span><span class="s1">                    trigger(triggerName: &#39;</span><span class="n">Fixed</span><span class="s1">&#39;, subject: &#39;</span><span class="n">$DEFAULT_SUBJECT</span><span class="s1">&#39;, body: &#39;</span><span class="n">$DEFAULT_CONTENT</span><span class="s1">&#39;, replyTo: &#39;</span><span class="n">$DEFAULT_REPLYTO</span><span class="s1">&#39;, sendToDevelopers: true, sendToRecipientList: true)
</span><span class="s1">                    trigger(triggerName: &#39;</span><span class="n">Failure</span><span class="s1">&#39;, subject: &#39;</span><span class="n">$DEFAULT_SUBJECT</span><span class="s1">&#39;, body: &#39;</span><span class="n">$DEFAULT_CONTENT</span><span class="s1">&#39;, replyTo: &#39;</span><span class="n">$DEFAULT_REPLYTO</span><span class="err">&#39;</span><span class="o">,</span> <span class="nl">sendToDevelopers:</span> <span class="kc">true</span><span class="o">,</span> <span class="nl">sendToRecipientList:</span> <span class="kc">true</span><span class="o">)</span>
                <span class="o">}</span>

            <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Now, that big chunk of email setting is copied into a bunch of files, which is pretty ugly. And once you try to change it, you&rsquo;ll have to change it everywhere. Also, the interesting bits here are those readFileFromWorkspace parts. Those allow us to export even larger chunks of the script into external files. Now, because the slave might be located somewhere else, you should not use new File(&lsquo;file&rsquo;).text in your job DSL. readFileFromWorkspace in the background does that, but applies correct way to the PATH it looks on for the file specified.</p>
<p>Let&rsquo;s put this into a groovy script, shall we? Create a utilities folder where the DSL is and create a groovy file in it like this one:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy">
<span class="kn">package</span> <span class="n">utilities</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JobCommonTemplate</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">addEmailTemplate</span><span class="o">(</span><span class="kt">def</span> <span class="n">job</span><span class="o">,</span> <span class="kt">def</span> <span class="n">dslFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">emailScript</span> <span class="o">=</span> <span class="n">dslFactory</span><span class="o">.</span><span class="na">readFileFromWorkspace</span><span class="o">(</span><span class="s2">&#34;email_template/EmailTemplate.groovy&#34;</span><span class="o">)</span>
        <span class="n">job</span><span class="o">.</span><span class="na">with</span> <span class="o">{</span>
            <span class="n">publishers</span> <span class="o">{</span>
                <span class="n">wsCleanup</span><span class="o">()</span>
                <span class="n">extendedEmail</span><span class="o">(</span><span class="s1">&#39;email@address.com&#39;</span><span class="o">,</span> <span class="s1">&#39;$DEFAULT_SUBJECT&#39;</span><span class="o">,</span> <span class="s1">&#39;$DEFAULT_CONTENT&#39;</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">configure</span> <span class="o">{</span> <span class="n">node</span> <span class="o">-&gt;</span>
                        <span class="n">node</span> <span class="s">/ presendScript &lt;&lt; emailScript
</span><span class="s">                        node /</span> <span class="n">replyTo</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;$DEFAULT_REPLYTO&#39;</span>
                        <span class="n">node</span> <span class="o">/</span> <span class="n">contentType</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;default&#39;</span>
                    <span class="o">}</span>
                    <span class="n">trigger</span><span class="o">(</span><span class="nl">triggerName:</span> <span class="s1">&#39;StillUnstable&#39;</span><span class="o">,</span> <span class="nl">subject:</span> <span class="s1">&#39;$DEFAULT_SUBJECT&#39;</span><span class="o">,</span> <span class="nl">body:</span> <span class="s1">&#39;$DEFAULT_CONTENT&#39;</span><span class="o">,</span> <span class="nl">replyTo:</span> <span class="s1">&#39;$DEFAULT_REPLYTO&#39;</span><span class="o">,</span> <span class="nl">sendToDevelopers:</span> <span class="kc">true</span><span class="o">,</span> <span class="nl">sendToRecipientList:</span> <span class="kc">true</span><span class="o">)</span>
                    <span class="n">trigger</span><span class="o">(</span><span class="nl">triggerName:</span> <span class="s1">&#39;Fixed&#39;</span><span class="o">,</span> <span class="nl">subject:</span> <span class="s1">&#39;$DEFAULT_SUBJECT&#39;</span><span class="o">,</span> <span class="nl">body:</span> <span class="s1">&#39;$DEFAULT_CONTENT&#39;</span><span class="o">,</span> <span class="nl">replyTo:</span> <span class="s1">&#39;$DEFAULT_REPLYTO&#39;</span><span class="o">,</span> <span class="nl">sendToDevelopers:</span> <span class="kc">true</span><span class="o">,</span> <span class="nl">sendToRecipientList:</span> <span class="kc">true</span><span class="o">)</span>
                    <span class="n">trigger</span><span class="o">(</span><span class="nl">triggerName:</span> <span class="s1">&#39;Failure&#39;</span><span class="o">,</span> <span class="nl">subject:</span> <span class="s1">&#39;$DEFAULT_SUBJECT&#39;</span><span class="o">,</span> <span class="nl">body:</span> <span class="s1">&#39;$DEFAULT_CONTENT&#39;</span><span class="o">,</span> <span class="nl">replyTo:</span> <span class="s1">&#39;$DEFAULT_REPLYTO&#39;</span><span class="o">,</span> <span class="nl">sendToDevelopers:</span> <span class="kc">true</span><span class="o">,</span> <span class="nl">sendToRecipientList:</span> <span class="kc">true</span><span class="o">)</span>
                <span class="o">}</span>

            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The function addEmailTemplate gets two parameters. A job, which is an implementation of a Job, and a dslFactory which is a DslFactory. That factory is an interface which defines our readFileFromWorkspace. Where do we get the implementation from then? That will be from the Job. Let&rsquo;s alter our job to apply this Groovy script.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy">
<span class="kn">import</span> <span class="nn">utilities.JobCommonTemplate</span>

<span class="kt">def</span> <span class="n">myJob</span> <span class="o">=</span> <span class="n">job</span><span class="o">(</span><span class="s1">&#39;MyTestJob&#39;</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">description</span> <span class="s1">&#39;&lt;strong&gt;GENERATED - do not modify&lt;/strong&gt;&#39;</span>
    <span class="n">label</span><span class="o">(</span><span class="s1">&#39;machine_label&#39;</span><span class="o">)</span>
    <span class="n">logRotator</span><span class="o">(</span><span class="mi">30</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span>
    <span class="n">parameters</span> <span class="o">{</span>
        <span class="n">stringParam</span><span class="o">(</span><span class="s1">&#39;somestringparam&#39;</span><span class="o">,</span> <span class="s1">&#39;default_valye&#39;</span><span class="o">,</span> <span class="s1">&#39;Description&#39;</span><span class="o">)</span>
    <span class="o">}</span>
    <span class="n">wrappers</span> <span class="o">{</span>
        <span class="n">timeout</span> <span class="o">{</span>
            <span class="n">noActivity</span><span class="o">(</span><span class="mi">600</span><span class="o">)</span>
            <span class="n">abortBuild</span><span class="o">()</span>
            <span class="n">failBuild</span><span class="o">()</span>
            <span class="n">writeDescription</span><span class="o">(</span><span class="s1">&#39;Build failed due to timeout after {0} minutes&#39;</span><span class="o">)</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="n">deliveryPipelineConfiguration</span><span class="o">(</span><span class="s2">&#34;Main&#34;</span><span class="o">,</span> <span class="s2">&#34;MyTestJob&#34;</span><span class="o">)</span>
    <span class="n">wrappers</span> <span class="o">{</span>
        <span class="n">preBuildCleanup</span> <span class="o">{</span>
            <span class="n">deleteDirectories</span><span class="o">()</span>
        <span class="o">}</span>
        <span class="n">timestamps</span><span class="o">()</span>
    <span class="o">}</span>
    <span class="n">triggers</span> <span class="o">{</span>
        <span class="n">cron</span><span class="o">(</span><span class="s1">&#39;H 12 * * 1,2&#39;</span><span class="o">)</span>
    <span class="o">}</span>
    <span class="n">steps</span> <span class="o">{</span>
        <span class="n">batchFile</span><span class="o">(</span><span class="n">readFileFromWorkspace</span><span class="o">(</span><span class="s1">&#39;relative/path/to/file&#39;</span><span class="o">))</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="n">JobCommonTemplate</span><span class="o">.</span><span class="na">addEmailTemplate</span><span class="o">(</span><span class="n">myJob</span><span class="o">,</span> <span class="k">this</span><span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><p>Notice three things here.</p>
<p>#1 =&gt; <strong>import</strong>. We import the script from utilities folder which we created and placed the script into it.</p>
<p>#2 =&gt; <strong>def myJob</strong>. We create a variable which will contain our job&rsquo;s description.</p>
<p>#3 =&gt; <strong>this</strong>. &lsquo;this&rsquo; will be the DslFactory. That&rsquo;s where we get our readFileFromWorkspace implementation.</p>
<p>And that&rsquo;s it. We have extracted a part of our job which is re-occurring and we found our implementation for our readFileFromWorkspace. DslFactory has most of the things which you need in a job description, would you want to expand on this and extract other bits and pieces.</p>
<p>Have fun, and happy coding!</p>
<p>As always,</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>DataMunger Kata with Go</title>
      <link>https://skarlso.github.io/2015/10/04/datamunger-kata-with-go/</link>
      <pubDate>Sun, 04 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/10/04/datamunger-kata-with-go/</guid>
      <description><![CDATA[<p>Quickly wrote up the Data Munger code kata in Go.</p>
<p>Next time, I want better abstractions. And a way to select columns based on their header data. For now, this is not bad.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">
<span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;bufio&#34;</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;log&#34;</span>
	<span class="s">&#34;math&#34;</span>
	<span class="s">&#34;os&#34;</span>
	<span class="s">&#34;regexp&#34;</span>
	<span class="s">&#34;strconv&#34;</span>
	<span class="s">&#34;strings&#34;</span>
<span class="p">)</span>

<span class="c1">//Data which is Data
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Data</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">columnName</span> <span class="kt">string</span>
	<span class="nx">compareOne</span> <span class="kt">float64</span>
	<span class="nx">compareTwo</span> <span class="kt">float64</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="c1">// datas := []Data{WeatherData{}, FootballData{}}
</span><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Minimum weather data:&#34;</span><span class="p">,</span> <span class="nf">GetDataMinimumDiff</span><span class="p">(</span><span class="s">&#34;weather.dat&#34;</span><span class="p">,</span> <span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Minimum football data:&#34;</span><span class="p">,</span> <span class="nf">GetDataMinimumDiff</span><span class="p">(</span><span class="s">&#34;football.dat&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span>
<span class="p">}</span>

<span class="c1">//GetDataMinimumDiff gathers data from file to fill up Columns.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">GetDataMinimumDiff</span><span class="p">(</span><span class="nx">filename</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">nameColumn</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">compareColOne</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">compareColTwo</span> <span class="kt">int</span><span class="p">)</span> <span class="nx">Data</span> <span class="p">{</span>
	<span class="nx">data</span> <span class="o">:=</span> <span class="nx">Data</span><span class="p">{}</span>
	<span class="nx">minimum</span> <span class="o">:=</span> <span class="nx">math</span><span class="p">.</span><span class="nx">MaxFloat64</span>
	<span class="nx">readLines</span> <span class="o">:=</span> <span class="nf">ReadFile</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">value</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">readLines</span> <span class="p">{</span>
		<span class="nx">valueArrays</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="s">&#34;,&#34;</span><span class="p">)</span>
		<span class="nx">name</span> <span class="o">:=</span> <span class="nx">valueArrays</span><span class="p">[</span><span class="nx">nameColumn</span><span class="p">]</span>
		<span class="nx">trimmedFirst</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">ParseFloat</span><span class="p">(</span><span class="nx">valueArrays</span><span class="p">[</span><span class="nx">compareColOne</span><span class="p">],</span> <span class="mi">64</span><span class="p">)</span>
		<span class="nx">trimmedSecond</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">ParseFloat</span><span class="p">(</span><span class="nx">valueArrays</span><span class="p">[</span><span class="nx">compareColTwo</span><span class="p">],</span> <span class="mi">64</span><span class="p">)</span>
		<span class="nx">diff</span> <span class="o">:=</span> <span class="nx">trimmedFirst</span> <span class="o">-</span> <span class="nx">trimmedSecond</span>
		<span class="nx">diff</span> <span class="p">=</span> <span class="nx">math</span><span class="p">.</span><span class="nf">Abs</span><span class="p">(</span><span class="nx">diff</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">diff</span> <span class="o">&lt;=</span> <span class="nx">minimum</span> <span class="p">{</span>
			<span class="nx">minimum</span> <span class="p">=</span> <span class="nx">diff</span>
			<span class="nx">data</span><span class="p">.</span><span class="nx">columnName</span> <span class="p">=</span> <span class="nx">name</span>
			<span class="nx">data</span><span class="p">.</span><span class="nx">compareOne</span> <span class="p">=</span> <span class="nx">trimmedFirst</span>
			<span class="nx">data</span><span class="p">.</span><span class="nx">compareTwo</span> <span class="p">=</span> <span class="nx">trimmedSecond</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">data</span>
<span class="p">}</span>

<span class="c1">//ReadFile reads lines from a file and gives back a string array which contains the lines.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">ReadFile</span><span class="p">(</span><span class="nx">fileName</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">fileLines</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="nx">fileName</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>

	<span class="nx">scanner</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewScanner</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
	<span class="c1">//Skipping the first line which is the header.
</span><span class="c1"></span>	<span class="nx">scanner</span><span class="p">.</span><span class="nf">Scan</span><span class="p">()</span>
	<span class="k">for</span> <span class="nx">scanner</span><span class="p">.</span><span class="nf">Scan</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">line</span> <span class="o">:=</span> <span class="nx">scanner</span><span class="p">.</span><span class="nf">Text</span><span class="p">()</span>
		<span class="nx">re</span> <span class="o">:=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nf">MustCompile</span><span class="p">(</span><span class="s">&#34;\\w+&#34;</span><span class="p">)</span>
		<span class="nx">lines</span> <span class="o">:=</span> <span class="nx">re</span><span class="p">.</span><span class="nf">FindAllString</span><span class="p">(</span><span class="nx">line</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
		<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">lines</span><span class="p">)</span> <span class="p">&gt;</span>  <span class="p">{</span>
			<span class="nx">fileLines</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">fileLines</span><span class="p">,</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">lines</span><span class="p">,</span> <span class="s">&#34;,&#34;</span><span class="p">))</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">scanner</span><span class="p">.</span><span class="nf">Err</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="k">return</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
    </item>
    
    <item>
      <title>How to Aggregate Tests with Jenkins with Aggregate Plugin on non-relating jobs</title>
      <link>https://skarlso.github.io/2015/10/02/how-to-aggregate-tests-with-jenkins-with-aggregate-plugin-on-non-relating-jobs/</link>
      <pubDate>Fri, 02 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/10/02/how-to-aggregate-tests-with-jenkins-with-aggregate-plugin-on-non-relating-jobs/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>Today, I would like to talk about something I came in contact with, and was hard to find a proper answer / solution for it.</p>
<p>So I&rsquo;m writing this down to document my findings. Like the title says, this is about aggregating test result with Jenkins, using the plug-in provided. If you, like me, have a pipeline structure which do not work on the same artifact, but do have a upstream-downstream relationship, you will have a hard time configuring and making Aggregation work. So here is how, I fixed the issue.</p>
<h1 id="connection">Connection</h1>
<p>In order for the aggregation to work, there needs to be an <strong>artifact connection</strong> between the upstream and downstream projects. And that is the key. But if you don&rsquo;t have that, well, let&rsquo;s create one. I have a parent job configured like this one. =&gt;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml">
<span class="cp">&lt;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;?&gt;</span>
<span class="nt">&lt;project&gt;</span>
  <span class="nt">&lt;actions/&gt;</span>
  <span class="nt">&lt;description&gt;&lt;/description&gt;</span>
  <span class="nt">&lt;keepDependencies&gt;</span>false<span class="nt">&lt;/keepDependencies&gt;</span>
  <span class="nt">&lt;properties/&gt;</span>
  <span class="nt">&lt;scm</span> <span class="na">class=</span><span class="s">&#34;hudson.scm.NullSCM&#34;</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;canRoam&gt;</span>true<span class="nt">&lt;/canRoam&gt;</span>
  <span class="nt">&lt;disabled&gt;</span>false<span class="nt">&lt;/disabled&gt;</span>
  <span class="nt">&lt;blockBuildWhenDownstreamBuilding&gt;</span>false<span class="nt">&lt;/blockBuildWhenDownstreamBuilding&gt;</span>
  <span class="nt">&lt;blockBuildWhenUpstreamBuilding&gt;</span>false<span class="nt">&lt;/blockBuildWhenUpstreamBuilding&gt;</span>
  <span class="nt">&lt;triggers/&gt;</span>
  <span class="nt">&lt;concurrentBuild&gt;</span>false<span class="nt">&lt;/concurrentBuild&gt;</span>
  <span class="nt">&lt;builders/&gt;</span>
  <span class="nt">&lt;publishers&gt;</span>
    <span class="nt">&lt;hudson.tasks.test.AggregatedTestResultPublisher</span> <span class="na">plugin=</span><span class="s">&#34;junit@1.9&#34;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;includeFailedBuilds&gt;</span>false<span class="nt">&lt;/includeFailedBuilds&gt;</span>
    <span class="nt">&lt;/hudson.tasks.test.AggregatedTestResultPublisher&gt;</span>
    <span class="nt">&lt;hudson.tasks.BuildTrigger&gt;</span>
      <span class="nt">&lt;childProjects&gt;</span>ChildJob<span class="nt">&lt;/childProjects&gt;</span>
      <span class="nt">&lt;threshold&gt;</span>
        <span class="nt">&lt;name&gt;</span>SUCCESS<span class="nt">&lt;/name&gt;</span>
        <span class="nt">&lt;ordinal&gt;&lt;/ordinal&gt;</span>
        <span class="nt">&lt;color&gt;</span>BLUE<span class="nt">&lt;/color&gt;</span>
        <span class="nt">&lt;completeBuild&gt;</span>true<span class="nt">&lt;/completeBuild&gt;</span>
      <span class="nt">&lt;/threshold&gt;</span>
    <span class="nt">&lt;/hudson.tasks.BuildTrigger&gt;</span>
  <span class="nt">&lt;/publishers&gt;</span>
  <span class="nt">&lt;buildWrappers/&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>As you can see, it&rsquo;s pretty basic. It isn&rsquo;t much. It&rsquo;s supposed to be a trigger job for downstream projects. You could have this one at anything. Maybe scheduled, or have some kind of gathering here of some results, and so on and so forth. The end part of the configuration is the interesting bit.</p>
<p>Aggregation is setup, but it won&rsquo;t work, because despite there being an upstream/downstream relationship, there also needs to be an artifact connection which uses <strong>fingerprinting</strong>. Fingerprinting for Jenkins is needed in oder to make the physical connection between the jobs via hashes. This is what you will get if that is not setup:</p>
<p>But if there is no artifact between them, what do you do? You create one.</p>
<h1 id="the-artifact-which-binds-us">The Artifact which Binds Us</h1>
<p>Adding a simple <strong>timestamp file</strong> is enough to make a connection. So let&rsquo;s do that. This is how it will look like =&gt;</p>
<p>The important bits about this picture are the small echo which simply creates a file which will contain some time stamp data, and after that the archive artifact, which also fingerprints that file, marking it with a hash which identifies this job as using that particular artifact.</p>
<p>Now, the next step is to create the connection. For that, you need the artifact copy plugin =&gt; <a href="https://wiki.jenkins-ci.org/display/JENKINS/Copy+Artifact+Plugin" target="_blank">Copy Artifact Plugin</a>.</p>
<p>With this, we create the childs configuration like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml">
<span class="cp">&lt;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;?&gt;</span>
<span class="nt">&lt;project&gt;</span>
  <span class="nt">&lt;actions/&gt;</span>
  <span class="nt">&lt;description&gt;&lt;/description&gt;</span>
  <span class="nt">&lt;keepDependencies&gt;</span>false<span class="nt">&lt;/keepDependencies&gt;</span>
  <span class="nt">&lt;properties/&gt;</span>
  <span class="nt">&lt;scm</span> <span class="na">class=</span><span class="s">&#34;hudson.plugins.git.GitSCM&#34;</span> <span class="na">plugin=</span><span class="s">&#34;git@2.4.0&#34;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;configVersion&gt;</span>2<span class="nt">&lt;/configVersion&gt;</span>
    <span class="nt">&lt;userRemoteConfigs&gt;</span>
      <span class="nt">&lt;hudson.plugins.git.UserRemoteConfig&gt;</span>
        <span class="nt">&lt;url&gt;</span>https://github.com/Skarlso/DataMung.git<span class="nt">&lt;/url&gt;</span>
      <span class="nt">&lt;/hudson.plugins.git.UserRemoteConfig&gt;</span>
    <span class="nt">&lt;/userRemoteConfigs&gt;</span>
    <span class="nt">&lt;branches&gt;</span>
      <span class="nt">&lt;hudson.plugins.git.BranchSpec&gt;</span>
        <span class="nt">&lt;name&gt;</span>*/master<span class="nt">&lt;/name&gt;</span>
      <span class="nt">&lt;/hudson.plugins.git.BranchSpec&gt;</span>
    <span class="nt">&lt;/branches&gt;</span>
    <span class="nt">&lt;doGenerateSubmoduleConfigurations&gt;</span>false<span class="nt">&lt;/doGenerateSubmoduleConfigurations&gt;</span>
    <span class="nt">&lt;submoduleCfg</span> <span class="na">class=</span><span class="s">&#34;list&#34;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;extensions/&gt;</span>
  <span class="nt">&lt;/scm&gt;</span>
  <span class="nt">&lt;canRoam&gt;</span>true<span class="nt">&lt;/canRoam&gt;</span>
  <span class="nt">&lt;disabled&gt;</span>false<span class="nt">&lt;/disabled&gt;</span>
  <span class="nt">&lt;blockBuildWhenDownstreamBuilding&gt;</span>false<span class="nt">&lt;/blockBuildWhenDownstreamBuilding&gt;</span>
  <span class="nt">&lt;blockBuildWhenUpstreamBuilding&gt;</span>false<span class="nt">&lt;/blockBuildWhenUpstreamBuilding&gt;</span>
  <span class="nt">&lt;triggers/&gt;</span>
  <span class="nt">&lt;concurrentBuild&gt;</span>false<span class="nt">&lt;/concurrentBuild&gt;</span>
  <span class="nt">&lt;builders&gt;</span>
    <span class="nt">&lt;hudson.plugins.gradle.Gradle</span> <span class="na">plugin=</span><span class="s">&#34;gradle@1.24&#34;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;description&gt;&lt;/description&gt;</span>
      <span class="nt">&lt;switches&gt;&lt;/switches&gt;</span>
      <span class="nt">&lt;tasks&gt;</span>assemble check<span class="nt">&lt;/tasks&gt;</span>
      <span class="nt">&lt;rootBuildScriptDir&gt;&lt;/rootBuildScriptDir&gt;</span>
      <span class="nt">&lt;buildFile&gt;</span>build.gradle<span class="nt">&lt;/buildFile&gt;</span>
      <span class="nt">&lt;gradleName&gt;</span>(Default)<span class="nt">&lt;/gradleName&gt;</span>
      <span class="nt">&lt;useWrapper&gt;</span>true<span class="nt">&lt;/useWrapper&gt;</span>
      <span class="nt">&lt;makeExecutable&gt;</span>false<span class="nt">&lt;/makeExecutable&gt;</span>
      <span class="nt">&lt;fromRootBuildScriptDir&gt;</span>true<span class="nt">&lt;/fromRootBuildScriptDir&gt;</span>
      <span class="nt">&lt;useWorkspaceAsHome&gt;</span>false<span class="nt">&lt;/useWorkspaceAsHome&gt;</span>
    <span class="nt">&lt;/hudson.plugins.gradle.Gradle&gt;</span>
    <span class="nt">&lt;hudson.plugins.copyartifact.CopyArtifact</span> <span class="na">plugin=</span><span class="s">&#34;copyartifact@1.36&#34;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;project&gt;</span>ParentJob<span class="nt">&lt;/project&gt;</span>
      <span class="nt">&lt;filter&gt;</span>timestamp.data<span class="nt">&lt;/filter&gt;</span>
      <span class="nt">&lt;target&gt;&lt;/target&gt;</span>
      <span class="nt">&lt;excludes&gt;&lt;/excludes&gt;</span>
      <span class="nt">&lt;selector</span> <span class="na">class=</span><span class="s">&#34;hudson.plugins.copyartifact.TriggeredBuildSelector&#34;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;upstreamFilterStrategy&gt;</span>UseGlobalSetting<span class="nt">&lt;/upstreamFilterStrategy&gt;</span>
      <span class="nt">&lt;/selector&gt;</span>
      <span class="nt">&lt;doNotFingerprintArtifacts&gt;</span>false<span class="nt">&lt;/doNotFingerprintArtifacts&gt;</span>
    <span class="nt">&lt;/hudson.plugins.copyartifact.CopyArtifact&gt;</span>
  <span class="nt">&lt;/builders&gt;</span>
  <span class="nt">&lt;publishers&gt;</span>
    <span class="nt">&lt;hudson.tasks.junit.JUnitResultArchiver</span> <span class="na">plugin=</span><span class="s">&#34;junit@1.9&#34;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;testResults&gt;</span>build/test-results/*.xml<span class="nt">&lt;/testResults&gt;</span>
      <span class="nt">&lt;keepLongStdio&gt;</span>false<span class="nt">&lt;/keepLongStdio&gt;</span>
      <span class="nt">&lt;healthScaleFactor&gt;</span>1.0<span class="nt">&lt;/healthScaleFactor&gt;</span>
    <span class="nt">&lt;/hudson.tasks.junit.JUnitResultArchiver&gt;</span>
  <span class="nt">&lt;/publishers&gt;</span>
  <span class="nt">&lt;buildWrappers&gt;</span>
    <span class="nt">&lt;hudson.plugins.ws__cleanup.PreBuildCleanup</span> <span class="na">plugin=</span><span class="s">&#34;ws-cleanup@0.28&#34;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;deleteDirs&gt;</span>false<span class="nt">&lt;/deleteDirs&gt;</span>
      <span class="nt">&lt;cleanupParameter&gt;&lt;/cleanupParameter&gt;</span>
      <span class="nt">&lt;externalDelete&gt;&lt;/externalDelete&gt;</span>
    <span class="nt">&lt;/hudson.plugins.ws__cleanup.PreBuildCleanup&gt;</span>
  <span class="nt">&lt;/buildWrappers&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>Again, the improtant bit is this:</p>
<p>After the copy is setup, we launch our parent job and if everything is correct, you should see something like this:</p>
<h1 id="wrapping-it-up">Wrapping it Up</h1>
<p>For final words, important bit to take away from this is that you need an <strong>artifact connection between the jobs</strong> to make this work. Whatever your downstream / upstream connection is, it doesn&rsquo;t matter. Also, there can be a problem that you have everything set up, and there are artifacts which bind the jobs together but you still can&rsquo;t see the results, then your best option is to specify the jobs BY NAME in the aggregate test plug-in like this:</p>
<p>I know this is a pain if there are multiple jobs, but at least, jenkins is providing you with Autoexpande once you start typing.</p>
<p>Of course this also works with multiple downstream jobs if they copy the artifact to themselves.</p>
<p>Any questions, please feel free to comment and I will answer to the best of my knowledge.</p>
<p>Cheers,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>I used to have great ideas on the toilet, but I no longer do.</title>
      <link>https://skarlso.github.io/2015/09/07/i-used-to-have-great-ideas-on-the-toilet-but-i-no-longer-do/</link>
      <pubDate>Mon, 07 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/09/07/i-used-to-have-great-ideas-on-the-toilet-but-i-no-longer-do/</guid>
      <description><![CDATA[<p>I used to have great ideas on the toilet, but I no longer do. And I would like to reflect on that. So this is not going to be a technical post, rather some ramblings.</p>
<p>I already had a post similar to this one, but I failed to follow up on it, and now I&rsquo;m re-visiting the question. With technology on the rise, embedded systems, chips, augmented biology and information being available at our fingertips, I have but one concern. I don&rsquo;t want to sound like an old guy reflecting on history, that now everything is changing and that we need to have a sight on the past and bla bla bla. I do have one valid concern though. We are in danger of loosing ourselves.</p>
<p>With mobile phones and the Internet always being around and available, we are in danger of loosing our thoughts and ideas, our individuality and our THINKING. We are reading news, posts, advancements, blogs, vlogs, and the dreaded 9gag. I am one of these people. I read 9gag. And I hate myself for it. It&rsquo;s an immediate satisfaction and gain of euphoria and a way of shutting my brain down when it needs it. But I caught myself doing it one or more times when I should have read something more important or beneficial at least. Or catch up on a blog post or read a news, or Gods forbid just plain sit around and THINK for a little while.</p>
<p>So my previous post around this topic was to leave out technology from your life&rsquo;s for a short period of time. This is the same. Have some alone time. Reflect. Write a diary. If you are a technical person, write down ideas you would want to create. If you don&rsquo;t have any, write out bigger ones. For example, I want to write an RPG. Or That I want to learn how to do metaprogramming the proper way. Or that I want to read up on some Russian sciences fiction. There are SOOOO many things in the world. Don&rsquo;t waste it on bullshit and immediate serotonin generating content, like frigging cats! When you do it, when your are at it, stop for a little bit, and think. <strong>THINK</strong>. What are you doing? Why are you reading up on that crap? What merit does it have?</p>
<p>I understand that from time to time you need to shut off. You need a little bit of comfort. A little bit of serotonin in your system. There are better ways of achieving that. Go for a walk. Run. Bike. Eat a chocolate while staring out of a window. Read a comic book. Do random acts of kindness (not kidding). Drink a glass of water. Listen to some awesome music while drawing something ( anything, it doesn&rsquo;t have to be a masterpiece! ). Sit back and listen to some music. Talk to a loved one. Talk to a friend. Talk to yourself (again, not kidding). If you have a pet, go play with it.</p>
<p>So I have a little challenge here as well -it would be a reflective post if I didn&rsquo;t have any-, do not bring any electronic devices to the toilet. Or if you bring one, the rule is to turn on Airplane mode. I used to have great ideas on the toilet because I didn&rsquo;t used to watch stuff on my phone. I used to be by myself with my thoughts. I have a family so there is very little time or space to be alone and with my thoughts. And then when I had the chance, I was browsing on my phone, which again, effectively, led to not being alone with my thoughts.</p>
<p>There you have it. This is my little rant about technology and thinking.</p>
<p>Thanks for reading,</p>
<p>And as always,</p>
<p>Have a nice day.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Sieve of Eratosthenes in Go</title>
      <link>https://skarlso.github.io/2015/07/30/sieve-of-eratosthenes-in-go/</link>
      <pubDate>Thu, 30 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/07/30/sieve-of-eratosthenes-in-go/</guid>
      <description><![CDATA[<p>I&rsquo;m pretty proud of this one as well.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">
<span class="kn">package</span> <span class="nx">sieve</span>

<span class="c1">//Sieve Uses the Sieve of Eratosthenes to calculate primes to a certain limit
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Sieve</span><span class="p">(</span><span class="nx">limit</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">listOfPrimes</span> <span class="p">[]</span><span class="kt">int</span>
	<span class="nx">markers</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">bool</span><span class="p">,</span> <span class="nx">limit</span><span class="p">)</span>

	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">limit</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">!</span><span class="nx">markers</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">{</span>
			<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="nx">i</span> <span class="o">+</span> <span class="nx">i</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">limit</span><span class="p">;</span> <span class="nx">j</span> <span class="o">+=</span> <span class="nx">i</span> <span class="p">{</span>
				<span class="nx">markers</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="kc">true</span>
			<span class="p">}</span>
			<span class="nx">listOfPrimes</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">listOfPrimes</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="nx">listOfPrimes</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
    </item>
    
    <item>
      <title>Quick Tip for Debugging Headless Locally</title>
      <link>https://skarlso.github.io/2015/07/22/quick-tip-for-debugging-headless-locally/</link>
      <pubDate>Wed, 22 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/07/22/quick-tip-for-debugging-headless-locally/</guid>
      <description><![CDATA[<p>If you are installing something with Packer and you have Headless enabled(and you are lazy and don&rsquo;t want to switch it off), it gets difficult, to see output.</p>
<p>Especially on a windows install the Answer File / Unattended install can be like =&gt; Waiting for SSH. for about an hour or two! If you are doing this locally fret not. Just start VirtualBox, and watch the Preview section which will display the current state even if it&rsquo;s a headless install!</p>
<p>It&rsquo;s a small windows, but your can click on <strong>Show</strong> which will open the VM in a proper view.</p>
<p>Enjoy,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Converting numbers into string representations</title>
      <link>https://skarlso.github.io/2015/07/19/converting-numbers-into-string-representations/</link>
      <pubDate>Sun, 19 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/07/19/converting-numbers-into-string-representations/</guid>
      <description><![CDATA[<p>I quiet like this one. My first go program snippet without any peaking or googling. I&rsquo;m proud, though it could be improved with a bit of struct magic and such and such. And it only counts &lsquo;till 1000.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">
<span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">var</span> <span class="nx">words</span> <span class="p">=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span><span class="mi">1</span><span class="p">:</span> <span class="s">&#34;one&#34;</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="s">&#34;two&#34;</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span> <span class="s">&#34;three&#34;</span><span class="p">,</span> <span class="mi">4</span><span class="p">:</span> <span class="s">&#34;four&#34;</span><span class="p">,</span> <span class="mi">5</span><span class="p">:</span> <span class="s">&#34;five&#34;</span><span class="p">,</span> <span class="mi">6</span><span class="p">:</span> <span class="s">&#34;six&#34;</span><span class="p">,</span> <span class="mi">7</span><span class="p">:</span> <span class="s">&#34;seven&#34;</span><span class="p">,</span>
	<span class="mi">8</span><span class="p">:</span> <span class="s">&#34;eight&#34;</span><span class="p">,</span> <span class="mi">9</span><span class="p">:</span> <span class="s">&#34;nine&#34;</span><span class="p">,</span> <span class="mi">10</span><span class="p">:</span> <span class="s">&#34;ten&#34;</span><span class="p">,</span> <span class="mi">11</span><span class="p">:</span> <span class="s">&#34;eleven&#34;</span><span class="p">,</span> <span class="mi">12</span><span class="p">:</span> <span class="s">&#34;twelve&#34;</span><span class="p">,</span> <span class="mi">13</span><span class="p">:</span> <span class="s">&#34;thirteen&#34;</span><span class="p">,</span> <span class="mi">14</span><span class="p">:</span> <span class="s">&#34;fourteen&#34;</span><span class="p">,</span> <span class="mi">15</span><span class="p">:</span> <span class="s">&#34;fifteen&#34;</span><span class="p">,</span>
	<span class="mi">16</span><span class="p">:</span> <span class="s">&#34;sixteen&#34;</span><span class="p">,</span> <span class="mi">17</span><span class="p">:</span> <span class="s">&#34;seventeen&#34;</span><span class="p">,</span> <span class="mi">18</span><span class="p">:</span> <span class="s">&#34;eighteen&#34;</span><span class="p">,</span> <span class="mi">19</span><span class="p">:</span> <span class="s">&#34;nineteen&#34;</span><span class="p">,</span> <span class="mi">20</span><span class="p">:</span> <span class="s">&#34;twenty&#34;</span><span class="p">,</span> <span class="mi">30</span><span class="p">:</span> <span class="s">&#34;thirty&#34;</span><span class="p">,</span> <span class="mi">40</span><span class="p">:</span> <span class="s">&#34;forty&#34;</span><span class="p">,</span>
	<span class="mi">50</span><span class="p">:</span> <span class="s">&#34;fifty&#34;</span><span class="p">,</span> <span class="mi">60</span><span class="p">:</span> <span class="s">&#34;sixty&#34;</span><span class="p">,</span> <span class="mi">70</span><span class="p">:</span> <span class="s">&#34;seventy&#34;</span><span class="p">,</span> <span class="mi">80</span><span class="p">:</span> <span class="s">&#34;eighty&#34;</span><span class="p">,</span> <span class="mi">90</span><span class="p">:</span> <span class="s">&#34;ninety&#34;</span><span class="p">}</span>

<span class="c1">// CountLetters count the letters in a long string number representation
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">CountLetters</span><span class="p">(</span><span class="nx">limit</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">myLongNumberString</span> <span class="o">:=</span> <span class="s">&#34;&#34;</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">limit</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nf">addLettersToMyString</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">myLongNumberString</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="c1">// fmt.Println(&#34;1-9 written with letters is: &#34;, len(myLongNumberString))
</span><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;The string is:&#34;</span><span class="p">,</span> <span class="nx">myLongNumberString</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Lenght of string is:&#34;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">myLongNumberString</span><span class="p">))</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">addLettersToMyString</span><span class="p">(</span><span class="nx">myString</span> <span class="o">*</span><span class="kt">string</span><span class="p">,</span> <span class="nx">num</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">num</span> <span class="p">&lt;</span> <span class="mi">20</span> <span class="p">{</span>
		<span class="o">*</span><span class="nx">myString</span> <span class="o">+=</span> <span class="nx">words</span><span class="p">[</span><span class="nx">num</span><span class="p">]</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="nx">num</span> <span class="o">&gt;=</span> <span class="mi">20</span> <span class="o">&amp;&amp;</span> <span class="nx">num</span> <span class="p">&lt;</span> <span class="mi">100</span> <span class="p">{</span>
		<span class="o">*</span><span class="nx">myString</span> <span class="o">+=</span> <span class="nf">countMiddle</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="nx">num</span> <span class="o">&gt;=</span> <span class="mi">100</span> <span class="o">&amp;&amp;</span> <span class="nx">num</span> <span class="p">&lt;</span> <span class="mi">1000</span> <span class="p">{</span>
		<span class="nx">hundred</span><span class="p">,</span> <span class="nx">tenth</span> <span class="o">:=</span> <span class="nf">countHundred</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">tenth</span> <span class="o">==</span>  <span class="p">{</span>
			<span class="o">*</span><span class="nx">myString</span> <span class="o">+=</span> <span class="nx">hundred</span>
		<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">tenth</span> <span class="o">&gt;=</span> <span class="mi">11</span> <span class="o">&amp;&amp;</span> <span class="nx">tenth</span> <span class="p">&lt;</span> <span class="mi">20</span> <span class="p">{</span>
			<span class="o">*</span><span class="nx">myString</span> <span class="o">+=</span> <span class="nx">hundred</span> <span class="o">+</span> <span class="s">&#34;and&#34;</span> <span class="o">+</span> <span class="nx">words</span><span class="p">[</span><span class="nx">tenth</span><span class="p">]</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="o">*</span><span class="nx">myString</span> <span class="o">+=</span> <span class="nx">hundred</span> <span class="o">+</span> <span class="s">&#34;and&#34;</span> <span class="o">+</span> <span class="nf">countMiddle</span><span class="p">(</span><span class="nx">tenth</span><span class="p">)</span>
		<span class="p">}</span>

	<span class="p">}</span>

	<span class="k">if</span> <span class="nx">num</span> <span class="o">==</span> <span class="mi">1000</span> <span class="p">{</span>
		<span class="o">*</span><span class="nx">myString</span> <span class="o">+=</span> <span class="s">&#34;onethousand&#34;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">countMiddle</span><span class="p">(</span><span class="nx">num</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="nx">minues</span> <span class="o">:=</span> <span class="nx">num</span> <span class="o">%</span> <span class="mi">10</span>
	<span class="nx">num</span> <span class="o">-=</span> <span class="nx">minues</span>
	<span class="k">return</span> <span class="nx">words</span><span class="p">[</span><span class="nx">num</span><span class="p">]</span> <span class="o">+</span> <span class="nx">words</span><span class="p">[</span><span class="nx">minues</span><span class="p">]</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">countHundred</span><span class="p">(</span><span class="nx">num</span> <span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">minues</span> <span class="o">:=</span> <span class="nx">num</span> <span class="o">%</span> <span class="mi">100</span>
	<span class="nx">num</span> <span class="o">-=</span> <span class="nx">minues</span>
	<span class="k">return</span> <span class="p">(</span><span class="nx">words</span><span class="p">[(</span><span class="nx">num</span><span class="o">/</span><span class="mi">100</span><span class="p">)]</span> <span class="o">+</span> <span class="s">&#34;hundred&#34;</span><span class="p">),</span> <span class="nx">minues</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
    </item>
    
    <item>
      <title>Selenium Testing with Packer and Vagrant</title>
      <link>https://skarlso.github.io/2015/07/16/selenium-testing-with-packer-and-vagrant/</link>
      <pubDate>Thu, 16 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/07/16/selenium-testing-with-packer-and-vagrant/</guid>
      <description><![CDATA[<p>So, recently, the tester team talked to me, that their build takes too long, and why is that? A quick look at their configuration and build scripts showed me, that they are actually using a vagrant box, which never gets destroyed or re-started at least. To remedy this problem, I came up with the following solution.</p>
<h1 id="same-old">Same old.</h1>
<p>Same as in my previous post, we are going to build a Windows Machine for this purpose. The only addition to my previous settings, will be some Java install, downloading selenium and installing Chrome, and Firefox.</p>
<h1 id="installation">Installation</h1>
<h4 id="answer-file">Answer File</h4>
<p>Here is the configuration and setup of Windows before the provision phase.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml">
...
               <span class="nt">&lt;SynchronousCommand</span> <span class="na">wcm:action=</span><span class="s">&#34;add&#34;</span><span class="nt">&gt;</span>
                  <span class="nt">&lt;CommandLine&gt;</span>cmd.exe /c C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -File a:\jdk_inst.ps1 -AutoStart<span class="nt">&lt;/CommandLine&gt;</span>
                  <span class="nt">&lt;Description&gt;</span>Install Java<span class="nt">&lt;/Description&gt;</span>
                  <span class="nt">&lt;Order&gt;</span>103<span class="nt">&lt;/Order&gt;</span>
                  <span class="nt">&lt;RequiresUserInput&gt;</span>true<span class="nt">&lt;/RequiresUserInput&gt;</span>
               <span class="nt">&lt;/SynchronousCommand&gt;</span>
...
</code></pre></td></tr></table>
</div>
</div><p>This is the part were I&rsquo;m installing Java. The script for the jdk_inst.ps1 is in my previous post, but I&rsquo;ll paste it here for ease of read.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-powershell" data-lang="powershell">
<span class="k">function</span> <span class="n">LogWrite</span> <span class="p">{</span>
   <span class="k">Param</span> <span class="p">(</span><span class="no">[string]</span><span class="nv">$logstring</span><span class="p">)</span>
   <span class="nv">$now</span> <span class="p">=</span> <span class="nb">Get-Date</span> <span class="n">-format</span> <span class="n">s</span>
   <span class="nb">Add-Content</span> <span class="nv">$Logfile</span> <span class="n">-value</span> <span class="s2">&#34;$now $logstring&#34;</span>
   <span class="nb">Write-Host</span> <span class="nv">$logstring</span>
<span class="p">}</span>

<span class="nv">$Logfile</span> <span class="p">=</span> <span class="s2">&#34;C:\Windows\Temp\jdk-install.log&#34;</span>

<span class="nv">$JDK_VER</span><span class="p">=</span><span class="s2">&#34;7u75&#34;</span>
<span class="nv">$JDK_FULL_VER</span><span class="p">=</span><span class="s2">&#34;7u75-b13&#34;</span>
<span class="nv">$JDK_PATH</span><span class="p">=</span><span class="s2">&#34;1.7.0_75&#34;</span>
<span class="nv">$source86</span> <span class="p">=</span> <span class="s2">&#34;http://download.oracle.com/otn-pub/java/jdk/$JDK_FULL_VER/jdk-$JDK_VER-windows-i586.exe&#34;</span>
<span class="nv">$source64</span> <span class="p">=</span> <span class="s2">&#34;http://download.oracle.com/otn-pub/java/jdk/$JDK_FULL_VER/jdk-$JDK_VER-windows-x64.exe&#34;</span>
<span class="nv">$destination86</span> <span class="p">=</span> <span class="s2">&#34;C:\Windows\Temp\$JDK_VER-x86.exe&#34;</span>
<span class="nv">$destination64</span> <span class="p">=</span> <span class="s2">&#34;C:\Windows\Temp\$JDK_VER-x64.exe&#34;</span>
<span class="nv">$client</span> <span class="p">=</span> <span class="nb">new-object</span> <span class="n">System</span><span class="p">.</span><span class="n">Net</span><span class="p">.</span><span class="n">WebClient</span>
<span class="nv">$cookie</span> <span class="p">=</span> <span class="s2">&#34;oraclelicense=accept-securebackup-cookie&#34;</span>
<span class="nv">$client</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="no">[System.Net.HttpRequestHeader]</span><span class="p">::</span><span class="n">Cookie</span><span class="p">,</span> <span class="nv">$cookie</span><span class="p">)</span>

<span class="n">LogWrite</span> <span class="s2">&#34;Setting Execution Policy level to Bypass&#34;</span>
<span class="nb">Set-ExecutionPolicy</span> <span class="n">-Scope</span> <span class="n">CurrentUser</span> <span class="n">-ExecutionPolicy</span> <span class="n">Bypass</span> <span class="n">-Force</span>

<span class="n">LogWrite</span> <span class="s1">&#39;Checking if Java is already installed&#39;</span>
<span class="k">if</span> <span class="p">((</span><span class="nb">Test-Path</span> <span class="s2">&#34;c:\Program Files (x86)\Java&#34;</span><span class="p">)</span> <span class="o">-Or</span> <span class="p">(</span><span class="nb">Test-Path</span> <span class="s2">&#34;c:\Program Files\Java&#34;</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">LogWrite</span> <span class="s1">&#39;No need to Install Java&#39;</span>
    <span class="n">Exit</span>
<span class="p">}</span>

<span class="n">LogWrite</span> <span class="s1">&#39;Downloading x86 to $destination86&#39;</span>
<span class="k">try</span> <span class="p">{</span>
  <span class="nv">$client</span><span class="p">.</span><span class="n">downloadFile</span><span class="p">(</span><span class="nv">$source86</span><span class="p">,</span> <span class="nv">$destination86</span><span class="p">)</span>
  <span class="k">if</span> <span class="p">(!(</span><span class="nb">Test-Path</span> <span class="nv">$destination86</span><span class="p">))</span> <span class="p">{</span>
      <span class="n">LogWrite</span> <span class="s2">&#34;Downloading $destination86 failed&#34;</span>
      <span class="n">Exit</span>
  <span class="p">}</span>
  <span class="n">LogWrite</span> <span class="s1">&#39;Downloading x64 to $destination64&#39;</span>

  <span class="nv">$client</span><span class="p">.</span><span class="n">downloadFile</span><span class="p">(</span><span class="nv">$source64</span><span class="p">,</span> <span class="nv">$destination64</span><span class="p">)</span>
  <span class="k">if</span> <span class="p">(!(</span><span class="nb">Test-Path</span> <span class="nv">$destination64</span><span class="p">))</span> <span class="p">{</span>
      <span class="n">LogWrite</span> <span class="s2">&#34;Downloading $destination64 failed&#34;</span>
      <span class="n">Exit</span>
  <span class="p">}</span>
<span class="p">}</span> <span class="k">catch</span> <span class="no">[Exception]</span> <span class="p">{</span>
  <span class="n">LogWrite</span> <span class="s1">&#39;$_.Exception is&#39;</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span>
<span class="p">}</span>

<span class="k">try</span> <span class="p">{</span>
    <span class="n">LogWrite</span> <span class="s1">&#39;Installing JDK-x64&#39;</span>
    <span class="nv">$proc1</span> <span class="p">=</span> <span class="nb">Start-Process</span> <span class="n">-FilePath</span> <span class="s2">&#34;$destination64&#34;</span> <span class="n">-ArgumentList</span> <span class="s2">&#34;/s REBOOT=ReallySuppress&#34;</span> <span class="n">-Wait</span> <span class="n">-PassThru</span>
    <span class="nv">$proc1</span><span class="p">.</span><span class="n">waitForExit</span><span class="p">()</span>
    <span class="n">LogWrite</span> <span class="s1">&#39;Installation Done.&#39;</span>

    <span class="n">LogWrite</span> <span class="s1">&#39;Installing JDK-x86&#39;</span>
    <span class="nv">$proc2</span> <span class="p">=</span> <span class="nb">Start-Process</span> <span class="n">-FilePath</span> <span class="s2">&#34;$destination86&#34;</span> <span class="n">-ArgumentList</span> <span class="s2">&#34;/s REBOOT=ReallySuppress&#34;</span> <span class="n">-Wait</span> <span class="n">-PassThru</span>
    <span class="nv">$proc2</span><span class="p">.</span><span class="n">waitForExit</span><span class="p">()</span>
    <span class="n">LogWrite</span> <span class="s1">&#39;Installtion Done.&#39;</span>
<span class="p">}</span> <span class="k">catch</span> <span class="no">[exception]</span> <span class="p">{</span>
    <span class="n">LogWrite</span> <span class="s1">&#39;$_ is&#39;</span> <span class="nv">$_</span>
    <span class="n">LogWrite</span> <span class="s1">&#39;$_.GetType().FullName is&#39;</span> <span class="nv">$_</span><span class="p">.</span><span class="n">GetType</span><span class="p">().</span><span class="n">FullName</span>
    <span class="n">LogWrite</span> <span class="s1">&#39;$_.Exception is&#39;</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span>
    <span class="n">LogWrite</span> <span class="s1">&#39;$_.Exception.GetType().FullName is&#39;</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span><span class="p">.</span><span class="n">GetType</span><span class="p">().</span><span class="n">FullName</span>
    <span class="n">LogWrite</span> <span class="s1">&#39;$_.Exception.Message is&#39;</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span><span class="p">.</span><span class="n">Message</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">((</span><span class="nb">Test-Path</span> <span class="s2">&#34;c:\Program Files (x86)\Java&#34;</span><span class="p">)</span> <span class="o">-Or</span> <span class="p">(</span><span class="nb">Test-Path</span> <span class="s2">&#34;c:\Program Files\Java&#34;</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">LogWrite</span> <span class="s1">&#39;Java installed successfully.&#39;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="n">LogWrite</span> <span class="s1">&#39;Java install Failed!&#39;</span>
<span class="p">}</span>
<span class="n">LogWrite</span> <span class="s1">&#39;Setting up Path variables.&#39;</span>
<span class="no">[System.Environment]</span><span class="p">::</span><span class="n">SetEnvironmentVariable</span><span class="p">(</span><span class="s2">&#34;JAVA_HOME&#34;</span><span class="p">,</span> <span class="s2">&#34;c:\Program Files (x86)\Java\jdk$JDK_PATH&#34;</span><span class="p">,</span> <span class="s2">&#34;Machine&#34;</span><span class="p">)</span>
<span class="no">[System.Environment]</span><span class="p">::</span><span class="n">SetEnvironmentVariable</span><span class="p">(</span><span class="s2">&#34;PATH&#34;</span><span class="p">,</span> <span class="nv">$Env:Path</span> <span class="p">+</span> <span class="s2">&#34;;c:\Program Files (x86)\Java\jdk$JDK_PATH\bin&#34;</span><span class="p">,</span> <span class="s2">&#34;Machine&#34;</span><span class="p">)</span>
<span class="n">LogWrite</span> <span class="s1">&#39;Done. Goodbye.&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>This installs both x86 and 64 bit version of Java.</p>
<h1 id="provision">Provision</h1>
<p>I decided to put these into the provision phase to get log messages written out properly. Because in the unattended file, you can&rsquo;t see any progress.</p>
<h4 id="chrome-and-firefox">Chrome And Firefox</h4>
<p>Installing these two proved a little bit more difficult. Chrome didn&rsquo;t really like me to download their installer without accepting something first, like Java. Luckily, after a LOT of digging, I found a chrome installer which lets you install silently. Here is the script to install the two.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-powershell" data-lang="powershell">
<span class="k">function</span> <span class="n">LogWrite</span> <span class="p">{</span>
    <span class="k">Param</span> <span class="p">(</span><span class="no">[string]</span><span class="nv">$logstring</span><span class="p">)</span>
    <span class="nv">$now</span> <span class="p">=</span> <span class="nb">Get-Date</span> <span class="n">-format</span> <span class="n">s</span>
    <span class="nb">Add-Content</span> <span class="nv">$Logfile</span> <span class="n">-value</span> <span class="s2">&#34;$now $logstring&#34;</span>
    <span class="nb">Write-Host</span> <span class="nv">$logstring</span>
<span class="p">}</span>

<span class="k">function</span> <span class="n">CheckLocation</span> <span class="p">{</span>
    <span class="k">Param</span> <span class="p">(</span><span class="no">[string]</span><span class="nv">$location</span><span class="p">)</span>
    <span class="k">if</span> <span class="p">(!(</span><span class="nb">Test-Path</span>  <span class="nv">$location</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="no">[System.IO.FileNotFoundException]</span> <span class="s2">&#34;Could not download to Destination $location.&#34;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$Logfile</span> <span class="p">=</span> <span class="s2">&#34;C:\Windows\Temp\chrome-firefox-install.log&#34;</span>

<span class="nv">$chrome_source</span> <span class="p">=</span> <span class="s2">&#34;http://dl.google.com/chrome/install/375.126/chrome_installer.exe&#34;</span>
<span class="nv">$chrome_destination</span> <span class="p">=</span> <span class="s2">&#34;C:\Windows\Temp\chrome_installer.exe&#34;</span>
<span class="nv">$firefox_source</span> <span class="p">=</span> <span class="s2">&#34;https://download-installer.cdn.mozilla.net/pub/firefox/releases/39.0/win32/hu/Firefox%20Setup%2039.0.exe&#34;</span>
<span class="nv">$firefox_destination</span> <span class="p">=</span> <span class="s2">&#34;C:\Windows\Temp\firefoxinstaller.exe&#34;</span>

<span class="n">LogWrite</span> <span class="s1">&#39;Starting to download files.&#39;</span>
<span class="k">try</span> <span class="p">{</span>
    <span class="n">LogWrite</span> <span class="s1">&#39;Downloading Chrome...&#39;</span>
    <span class="p">(</span><span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Net</span><span class="p">.</span><span class="n">WebClient</span><span class="p">).</span><span class="n">DownloadFile</span><span class="p">(</span><span class="nv">$chrome_source</span><span class="p">,</span> <span class="nv">$chrome_destination</span><span class="p">)</span>
    <span class="n">CheckLocation</span> <span class="nv">$chrome_destination</span>
    <span class="n">LogWrite</span> <span class="s1">&#39;Done...&#39;</span>
    <span class="n">LogWrite</span> <span class="s1">&#39;Downloading Firefox...&#39;</span>
    <span class="p">(</span><span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Net</span><span class="p">.</span><span class="n">WebClient</span><span class="p">).</span><span class="n">DownloadFile</span><span class="p">(</span><span class="nv">$firefox_source</span><span class="p">,</span> <span class="nv">$firefox_destination</span><span class="p">)</span>
    <span class="n">CheckLocation</span> <span class="nv">$firefox_destination</span>
<span class="p">}</span> <span class="k">catch</span> <span class="no">[Exception]</span> <span class="p">{</span>
    <span class="n">LogWrite</span> <span class="s2">&#34;Exception during download. Probable cause could be that the directory or the file didn&#39;t exist.&#34;</span>
    <span class="n">LogWrite</span> <span class="s1">&#39;$_.Exception is&#39;</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span>
<span class="p">}</span>

<span class="n">LogWrite</span> <span class="s1">&#39;Starting firefox install process.&#39;</span>
<span class="k">try</span> <span class="p">{</span>
    <span class="nb">Start-Process</span> <span class="n">-FilePath</span> <span class="nv">$firefox_destination</span> <span class="n">-ArgumentList</span> <span class="s2">&#34;-ms&#34;</span> <span class="n">-Wait</span> <span class="n">-PassThru</span>
<span class="p">}</span> <span class="k">catch</span> <span class="no">[Exception]</span> <span class="p">{</span>
    <span class="n">LogWrite</span> <span class="s1">&#39;Exception during install process.&#39;</span>
    <span class="n">LogWrite</span> <span class="s1">&#39;$_.Exception is&#39;</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span>
<span class="p">}</span>
<span class="n">LogWrite</span> <span class="s1">&#39;Starting chrome install process.&#39;</span>

<span class="k">try</span> <span class="p">{</span>
    <span class="nb">Start-Process</span> <span class="n">-FilePath</span> <span class="nv">$chrome_destination</span> <span class="n">-ArgumentList</span> <span class="s2">&#34;/silent /install&#34;</span> <span class="n">-Wait</span> <span class="n">-PassThru</span>
<span class="p">}</span> <span class="k">catch</span> <span class="no">[Exception]</span> <span class="p">{</span>
    <span class="n">LogWrite</span> <span class="s1">&#39;Exception during install process.&#39;</span>
    <span class="n">LogWrite</span> <span class="s1">&#39;$_.Exception is&#39;</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span>
<span class="p">}</span>

<span class="n">LogWrite</span> <span class="s1">&#39;All done. Goodbye.&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>They both install silently. Pretty neat.</p>
<h4 id="selenium">Selenium</h4>
<p>This only has to be downloaded, so this is pretty simple. Vagrant will handle the startup of course when it does a vagrant up.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-powershell" data-lang="powershell">
<span class="k">function</span> <span class="n">LogWrite</span> <span class="p">{</span>
   <span class="k">Param</span> <span class="p">(</span><span class="no">[string]</span><span class="nv">$logstring</span><span class="p">)</span>
   <span class="nv">$now</span> <span class="p">=</span> <span class="nb">Get-Date</span> <span class="n">-format</span> <span class="n">s</span>
   <span class="nb">Add-Content</span> <span class="nv">$Logfile</span> <span class="n">-value</span> <span class="s2">&#34;$now $logstring&#34;</span>
   <span class="nb">Write-Host</span> <span class="nv">$logstring</span>
<span class="p">}</span>

<span class="nv">$Logfile</span> <span class="p">=</span> <span class="s2">&#34;C:\Windows\Temp\selenium-install.log&#34;</span>

<span class="nv">$source</span> <span class="p">=</span> <span class="s2">&#34;http://selenium-release.storage.googleapis.com/2.46/selenium-server-standalone-2.46.0.jar&#34;</span>
<span class="nv">$destination</span> <span class="p">=</span> <span class="s2">&#34;C:\Windows\Temp\selenium-server.jar&#34;</span>
<span class="n">LogWrite</span> <span class="s1">&#39;Starting to download selenium file.&#39;</span>
<span class="k">try</span> <span class="p">{</span>
  <span class="p">(</span><span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Net</span><span class="p">.</span><span class="n">WebClient</span><span class="p">).</span><span class="n">DownloadFile</span><span class="p">(</span><span class="nv">$source</span><span class="p">,</span> <span class="nv">$destination</span><span class="p">)</span>
<span class="p">}</span> <span class="k">catch</span> <span class="no">[Exception]</span> <span class="p">{</span>
  <span class="n">LogWrite</span> <span class="s2">&#34;Exception during download. Probable cause could be that the directory or the file didn&#39;t exist.&#34;</span>
  <span class="n">LogWrite</span> <span class="s1">&#39;$_.Exception is&#39;</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span>
<span class="p">}</span>
<span class="n">LogWrite</span> <span class="s1">&#39;Download done. Checking if file exists.&#39;</span>
<span class="k">if</span> <span class="p">(!(</span><span class="nb">Test-Path</span> <span class="nv">$destination</span><span class="p">))</span> <span class="p">{</span>
  <span class="n">LogWrite</span> <span class="s1">&#39;Downloading dotnet Failed!&#39;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="n">LogWrite</span> <span class="s1">&#39;Download successful.&#39;</span>
<span class="p">}</span>

<span class="n">LogWrite</span> <span class="s1">&#39;All done. Goodbye.&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>Straightforward.</p>
<h4 id="the-packer-json-file">The Packer Json File</h4>
<p>So putting this all together, here is the Packer JSON file for this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json">
<span class="p">{</span>
      <span class="nt">&#34;variables&#34;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&#34;vm_name&#34;</span><span class="p">:</span> <span class="s2">&#34;win7x64selenium&#34;</span><span class="p">,</span>
      <span class="nt">&#34;output_dir&#34;</span><span class="p">:</span> <span class="s2">&#34;output_win7_x64_selenium&#34;</span><span class="p">,</span>
      <span class="nt">&#34;vagrant_box_output&#34;</span><span class="p">:</span> <span class="s2">&#34;box_output&#34;</span><span class="p">,</span>
      <span class="nt">&#34;cpu_number&#34;</span><span class="p">:</span> <span class="s2">&#34;2&#34;</span><span class="p">,</span>
      <span class="nt">&#34;memory_size&#34;</span><span class="p">:</span> <span class="s2">&#34;4096&#34;</span><span class="p">,</span>
      <span class="nt">&#34;machine_type&#34;</span><span class="p">:</span> <span class="s2">&#34;pc-1.2&#34;</span><span class="p">,</span>
      <span class="nt">&#34;accelerator&#34;</span><span class="p">:</span> <span class="s2">&#34;kvm&#34;</span><span class="p">,</span>
      <span class="nt">&#34;disk_format&#34;</span><span class="p">:</span> <span class="s2">&#34;qcow2&#34;</span><span class="p">,</span>
      <span class="nt">&#34;disk_interface&#34;</span><span class="p">:</span> <span class="s2">&#34;virtio&#34;</span><span class="p">,</span>
      <span class="nt">&#34;net_device&#34;</span><span class="p">:</span> <span class="s2">&#34;virtio-net&#34;</span><span class="p">,</span>
      <span class="nt">&#34;cpu_model&#34;</span><span class="p">:</span> <span class="s2">&#34;host&#34;</span><span class="p">,</span>
      <span class="nt">&#34;disk_cache&#34;</span><span class="p">:</span> <span class="s2">&#34;writeback&#34;</span><span class="p">,</span>
      <span class="nt">&#34;disk_io&#34;</span><span class="p">:</span> <span class="s2">&#34;native&#34;</span>
   <span class="p">},</span>

  <span class="nt">&#34;builders&#34;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;virtualbox-iso&#34;</span><span class="p">,</span>
      <span class="nt">&#34;iso_url&#34;</span><span class="p">:</span> <span class="s2">&#34;/home/user/vms/windows7.iso&#34;</span><span class="p">,</span>
      <span class="nt">&#34;iso_checksum_type&#34;</span><span class="p">:</span> <span class="s2">&#34;sha1&#34;</span><span class="p">,</span>
      <span class="nt">&#34;iso_checksum&#34;</span><span class="p">:</span> <span class="s2">&#34;0BCFC54019EA175B1EE51F6D2B207A3D14DD2B58&#34;</span><span class="p">,</span>
      <span class="nt">&#34;headless&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="nt">&#34;boot_wait&#34;</span><span class="p">:</span> <span class="s2">&#34;2m&#34;</span><span class="p">,</span>
      <span class="nt">&#34;ssh_username&#34;</span><span class="p">:</span> <span class="s2">&#34;vagrant&#34;</span><span class="p">,</span>
      <span class="nt">&#34;ssh_password&#34;</span><span class="p">:</span> <span class="s2">&#34;vagrant&#34;</span><span class="p">,</span>
      <span class="nt">&#34;ssh_wait_timeout&#34;</span><span class="p">:</span> <span class="s2">&#34;8h&#34;</span><span class="p">,</span>
      <span class="nt">&#34;shutdown_command&#34;</span><span class="p">:</span> <span class="s2">&#34;shutdown /s /t 10 /f /d p:4:1 /c \&#34;Packer Shutdown\&#34;&#34;</span><span class="p">,</span>
      <span class="nt">&#34;guest_os_type&#34;</span><span class="p">:</span> <span class="s2">&#34;Windows7_64&#34;</span><span class="p">,</span>
      <span class="nt">&#34;disk_size&#34;</span><span class="p">:</span> <span class="mi">61440</span><span class="p">,</span>
      <span class="nt">&#34;floppy_files&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">&#34;./answer_files/7-selenium/Autounattend.xml&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/dis-updates.ps1&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/microsoft-updates.bat&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/openssh.ps1&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/jdk_inst.ps1&#34;</span>
      <span class="p">],</span>
      <span class="nt">&#34;vboxmanage&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">[</span>
          <span class="s2">&#34;modifyvm&#34;</span><span class="p">,</span>
          <span class="s2">&#34;{{.Name}}&#34;</span><span class="p">,</span>
          <span class="s2">&#34;--memory&#34;</span><span class="p">,</span>
          <span class="s2">&#34;{{user `memory_size`}}&#34;</span>
        <span class="p">],</span>
        <span class="p">[</span>
          <span class="s2">&#34;modifyvm&#34;</span><span class="p">,</span>
          <span class="s2">&#34;{{.Name}}&#34;</span><span class="p">,</span>
          <span class="s2">&#34;--cpus&#34;</span><span class="p">,</span>
          <span class="s2">&#34;{{user `cpu_number`}}&#34;</span>
        <span class="p">]</span>
      <span class="p">]</span>
    <span class="p">}</span>
  <span class="p">],</span>
  <span class="nt">&#34;provisioners&#34;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;powershell&#34;</span><span class="p">,</span>
      <span class="nt">&#34;scripts&#34;</span> <span class="p">:</span> <span class="p">[</span>
        <span class="s2">&#34;./scripts/install-selenium-server.ps1&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/install-chrome-firefox.ps1&#34;</span>
      <span class="p">]</span>
    <span class="p">},{</span>
      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;shell&#34;</span><span class="p">,</span>
      <span class="nt">&#34;remote_path&#34;</span><span class="p">:</span> <span class="s2">&#34;/tmp/script.bat&#34;</span><span class="p">,</span>
      <span class="nt">&#34;execute_command&#34;</span><span class="p">:</span> <span class="s2">&#34;{{.Vars}} cmd /c C:/Windows/Temp/script.bat&#34;</span><span class="p">,</span>
      <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">&#34;./scripts/vm-guest-tools.bat&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/vagrant-ssh.bat&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/rsync.bat&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/enable-rdp.bat&#34;</span>
      <span class="p">]</span>
    <span class="p">}</span>
  <span class="p">],</span>
    <span class="nt">&#34;post-processors&#34;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;vagrant&#34;</span><span class="p">,</span>
      <span class="nt">&#34;keep_input_artifact&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="nt">&#34;output&#34;</span><span class="p">:</span> <span class="s2">&#34;{{user `vm_name`}}_{{.Provider}}.box&#34;</span><span class="p">,</span>
      <span class="nt">&#34;vagrantfile_template&#34;</span><span class="p">:</span> <span class="s2">&#34;vagrantfile-template&#34;</span>
    <span class="p">}</span>
    <span class="p">]</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="additional-software">Additional Software</h4>
<p>This is not done here. Obviously, in order to test your stuff, you first need to install your software on this box. Ideally, everything you need should be in the code you clone to this box, and should be contained mostly. And your application deployment should take core of that. But, if you require something like a DB, postgres, oracle, whatnot, than this is the place where you would install all that.</p>
<h1 id="vagrant-and-using-the-packer-box">Vagrant and Using the Packer Box</h1>
<p>Now, this has been interesting so far, but how do you actually go about using this image? That&rsquo;s the real question now, isn&rsquo;t it? Having a box, just sitting on a shared folder, doesn&rsquo;t do you too much good. So let&rsquo;s create a Jenkins job, which utilizes this box in a job which runs a bunch of tests for some application.</p>
<h4 id="vagrantfile">Vagrantfile</h4>
<p>Your vagrant file, could either be generated automatically, under source control ( which is preferred ) or sitting somewhere entirely elsewhere. In any case, it would look something like this.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby">
<span class="c1"># -*- mode: ruby -*-</span>
<span class="c1"># vi: set ft=ruby :</span>

<span class="no">VAGRANTFILE_API_VERSION</span> <span class="o">=</span> <span class="s2">&#34;2&#34;</span>

<span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>

  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&#34;virtualbox&#34;</span>

  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="s2">&#34;selenium-box&#34;</span> <span class="k">do</span> <span class="o">|</span><span class="n">vs2013</span><span class="o">|</span>
    <span class="n">vs2013</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&#34;windows7-x64-04-selenium&#34;</span>
    <span class="n">vs2013</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box_url</span> <span class="o">=</span> <span class="s2">&#34;path/to/your/share/win7x64_selenium_virtualbox.box&#34;</span>
  <span class="k">end</span>

  <span class="n">config</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">enable</span>

  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">guest</span> <span class="o">=</span> <span class="ss">:windows</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">communicator</span> <span class="o">=</span> <span class="s2">&#34;winrm&#34;</span>
  <span class="n">config</span><span class="o">.</span><span class="n">winrm</span><span class="o">.</span><span class="n">username</span> <span class="o">=</span> <span class="s2">&#34;vagrant&#34;</span>
  <span class="n">config</span><span class="o">.</span><span class="n">winrm</span><span class="o">.</span><span class="n">password</span> <span class="o">=</span> <span class="s2">&#34;vagrant&#34;</span>
  <span class="n">config</span><span class="o">.</span><span class="n">windows</span><span class="o">.</span><span class="n">set_work_network</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="ss">:forwarded_port</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">3389</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;RDESKTOP_PORT&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">host_ip</span><span class="p">:</span> <span class="s2">&#34;0.0.0.0&#34;</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="ss">:forwarded_port</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">5985</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="mi">5985</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="s2">&#34;winrm&#34;</span><span class="p">,</span> <span class="ss">auto_correct</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">host_ip</span><span class="p">:</span> <span class="s2">&#34;0.0.0.0&#34;</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="ss">:forwarded_port</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">9991</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="mi">9991</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="s2">&#34;selenium&#34;</span><span class="p">,</span> <span class="ss">auto_correct</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">host_ip</span><span class="p">:</span> <span class="s2">&#34;0.0.0.0&#34;</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="ss">:virtualbox</span> <span class="k">do</span> <span class="o">|</span><span class="n">vbox</span><span class="o">|</span>
    <span class="n">vbox</span><span class="o">.</span><span class="n">gui</span> <span class="o">=</span> <span class="kp">false</span>
    <span class="n">vbox</span><span class="o">.</span><span class="n">memory</span> <span class="o">=</span> <span class="mi">4096</span>
    <span class="n">vbox</span><span class="o">.</span><span class="n">cpus</span> <span class="o">=</span> <span class="mi">2</span>
  <span class="k">end</span>


  <span class="n">config</span><span class="o">.</span><span class="n">winrm</span><span class="o">.</span><span class="n">max_tries</span> <span class="o">=</span> <span class="mi">10</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">synced_folder</span> <span class="s2">&#34;.&#34;</span><span class="p">,</span> <span class="s2">&#34;/vagrant&#34;</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="s2">&#34;rsync&#34;</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&#34;shell&#34;</span><span class="p">,</span> <span class="ss">path</span><span class="p">:</span> <span class="s2">&#34;init.bat&#34;</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&#34;shell&#34;</span><span class="p">,</span> <span class="ss">path</span><span class="p">:</span> <span class="s2">&#34;utils_inst.bat&#34;</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&#34;shell&#34;</span><span class="p">,</span> <span class="ss">path</span><span class="p">:</span> <span class="s2">&#34;jenkins_reg.ps1&#34;</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&#34;shell&#34;</span><span class="p">,</span> <span class="ss">path</span><span class="p">:</span> <span class="s2">&#34;start_selenium.bat&#34;</span>
<span class="k">end</span>
</code></pre></td></tr></table>
</div>
</div><p>Easy, no? Here is the script to start selenium.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">java -jar c:\Windows\Temp\selenium-server.jar -Dhttp.proxyPort=9991
</code></pre></td></tr></table>
</div>
</div><p>Straight forward. We also are forwarding the port on which Selenium is running in order for the test to see it.</p>
<h4 id="the-jenkins-job">The Jenkins Job</h4>
<p>The job can be anything. This is actually too large to cover here. It could be a gradle job, a maven job, an ant, a nant - or whatever is running the test -, job; it&rsquo;s up to you.</p>
<p>Just make sure that before the test runs, do a <strong>vagrant up</strong> and after the test finishes, in an ALWAYS TO BE EXECUTED HOOK -like gradle&rsquo;s finalizedBy , call a <strong>vagrant destroy</strong>. This way, your test will always run on a clean instance that has the necessary stuff on it.</p>
<h1 id="closing-words">Closing words</h1>
<p>So, there you have it. It&rsquo;s relatively simple. Tying this all into your infrastructure might prove difficult though depending on how rigid your deployment is. But it will always help you make your tests a bit more robust.</p>
<p>Also, you could run the whole deployment and test phase on a vagrant box, from the start, which is tied to jenkins as a slave and gets started when the job starts and destroyed when the job ends. That way you wouldn&rsquo;t have to create a, box in a box running on a box, kind of effect.</p>
<p>Thanks for reading,</p>
<p>Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>Bitwise &amp; Operator</title>
      <link>https://skarlso.github.io/2015/07/15/bitwise-operator/</link>
      <pubDate>Wed, 15 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/07/15/bitwise-operator/</guid>
      <description><![CDATA[<p>The first, and only time so far, that I got to use the bitwise &amp; operator. I enjoyed doing so!!</p>
<p>And of course from now on, I&rsquo;ll be looking for more opportunities to (ab)use it.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">
<span class="kn">package</span> <span class="nx">secret</span>

<span class="kn">import</span> <span class="s">&#34;sort&#34;</span>

<span class="kd">const</span> <span class="nx">REVERSE</span> <span class="p">=</span> <span class="mi">16</span>

<span class="kd">func</span> <span class="nf">Handshake</span><span class="p">(</span><span class="nx">code</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">string</span> <span class="p">{</span>
    <span class="c1">// binary_rep := convertDecimalToBinary(code)
</span><span class="c1"></span>    <span class="k">if</span> <span class="nx">code</span> <span class="p">&lt;</span>  <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">}</span>
    <span class="nx">secret_map</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">string</span> <span class="p">{</span>
        <span class="mi">1</span><span class="p">:</span> <span class="s">&#34;wink&#34;</span><span class="p">,</span>
        <span class="mi">2</span><span class="p">:</span> <span class="s">&#34;double blink&#34;</span><span class="p">,</span>
        <span class="mi">4</span><span class="p">:</span> <span class="s">&#34;close your eyes&#34;</span><span class="p">,</span>
        <span class="mi">8</span><span class="p">:</span> <span class="s">&#34;jump&#34;</span><span class="p">,</span>
    <span class="p">}</span>

    <span class="kd">var</span> <span class="nx">keys</span> <span class="p">[]</span><span class="kt">int</span>
    <span class="k">for</span> <span class="nx">k</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">secret_map</span> <span class="p">{</span>
        <span class="nx">keys</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nx">k</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="c1">// To make sure iteration is always in the same order.
</span><span class="c1"></span>    <span class="nx">sort</span><span class="p">.</span><span class="nf">Ints</span><span class="p">(</span><span class="nx">keys</span><span class="p">)</span>

    <span class="nx">code_array</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="p">)</span>
    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">key</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">keys</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nx">code</span> <span class="o">&amp;</span> <span class="nx">key</span> <span class="o">==</span> <span class="nx">key</span> <span class="p">{</span>
            <span class="nx">code_array</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">code_array</span><span class="p">,</span> <span class="nx">secret_map</span><span class="p">[</span><span class="nx">key</span><span class="p">])</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="nx">code</span> <span class="o">&amp;</span> <span class="nx">REVERSE</span> <span class="o">==</span> <span class="nx">REVERSE</span> <span class="p">{</span>
        <span class="nx">code_array</span> <span class="p">=</span> <span class="nf">reverse_array</span><span class="p">(</span><span class="nx">code_array</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">code_array</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">reverse_array</span> <span class="p">(</span><span class="nx">array_to_reverse</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="p">[]</span><span class="kt">string</span> <span class="p">{</span>
    <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="o">:=</span> <span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">array_to_reverse</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span> <span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">j</span><span class="p">;</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="p">=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">j</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">{</span>
        <span class="nx">array_to_reverse</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">array_to_reverse</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="nx">array_to_reverse</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span> <span class="nx">array_to_reverse</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">array_to_reverse</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
    </item>
    
    <item>
      <title>Packer 0.8.1.</title>
      <link>https://skarlso.github.io/2015/07/01/packer-0-8-1/</link>
      <pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/07/01/packer-0-8-1/</guid>
      <description><![CDATA[<p>Previously I wrote that the scripts I&rsquo;m writing, are failing because Packer hangs.</p>
<p>Apparently, this was a known issue. And apparently, I was using an older version, 0.7.5. After I updated everything is working wonderfully!!!</p>
<p>And for my thanks, here is an updated PowerShell script for provisioning my dotnet stuff.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-powershell" data-lang="powershell">
<span class="nv">$source</span> <span class="p">=</span> <span class="s2">&#34;http://download.microsoft.com/download/1/6/7/167F0D79-9317-48AE-AEDB-17120579F8E2/NDP451-KB2858728-x86-x64-AllOS-ENU.exe&#34;</span>
<span class="nv">$destination</span> <span class="p">=</span> <span class="s2">&#34;C:\Windows\Temp\dotnet.exe&#34;</span>
<span class="nb">Write-Host</span> <span class="s1">&#39;Starting to download dotnet file.&#39;</span>
<span class="k">try</span> <span class="p">{</span>
  <span class="p">(</span><span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Net</span><span class="p">.</span><span class="n">WebClient</span><span class="p">).</span><span class="n">DownloadFile</span><span class="p">(</span><span class="nv">$source</span><span class="p">,</span> <span class="nv">$destination</span><span class="p">)</span>
<span class="p">}</span> <span class="k">catch</span> <span class="no">[Exception]</span> <span class="p">{</span>
  <span class="nb">Write-Host</span> <span class="s2">&#34;Exception during download. Probable cause could be that the directory or the file didn&#39;t exist.&#34;</span>
  <span class="nb">Write-Host</span> <span class="s1">&#39;$_.Exception is&#39;</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span>
<span class="p">}</span>
<span class="nb">Write-Host</span> <span class="s1">&#39;Download done. Checking if file exists.&#39;</span>
<span class="k">if</span> <span class="p">(!(</span><span class="nb">Test-Path</span> <span class="nv">$destination</span><span class="p">))</span> <span class="p">{</span>
  <span class="nb">Write-Host</span> <span class="s1">&#39;Downloading dotnet Failed!&#39;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nb">Write-Host</span> <span class="s1">&#39;Download successful.&#39;</span>
<span class="p">}</span>

<span class="nb">Write-Host</span> <span class="s1">&#39;Starting install process.&#39;</span>
<span class="k">try</span> <span class="p">{</span>
  <span class="nb">Start-Process</span> <span class="n">-FilePath</span> <span class="nv">$source</span> <span class="n">-ArgumentList</span> <span class="s2">&#34;/q /norestart&#34;</span> <span class="n">-Wait</span> <span class="n">-PassThru</span>
<span class="p">}</span> <span class="k">catch</span> <span class="no">[Exception]</span> <span class="p">{</span>
  <span class="nb">Write-Host</span> <span class="s1">&#39;Exception during install process.&#39;</span>
  <span class="nb">Write-Host</span> <span class="s1">&#39;$_.Exception is&#39;</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span>
<span class="p">}</span>

<span class="nb">Write-Host</span> <span class="s1">&#39;All done. Goodbye.&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>Thanks for reading!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Powershell can also be nice -Or Installing Java silently and waiting</title>
      <link>https://skarlso.github.io/2015/06/30/powershell-can-also-be-nice-or-installing-java-silently-and-waiting/</link>
      <pubDate>Tue, 30 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/06/30/powershell-can-also-be-nice-or-installing-java-silently-and-waiting/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>Today, I would like to show you a small script. It installs Java JDK, both version, x86 and 64 bit, silently, and wait for that process to finish.</p>
<p>The wait is necessary because /s on a java install has the nasty habit of running in the background. If you are using a .bat file, <strong>you shouldn&rsquo;t</strong>, than you would use something like: start /w jdk-setup.exe /s. This gets it done, but is ugly. Also, if you are using Packer and PowerShell provisioning, you might want to set up some environment variables as well for the next script. And you want that property to be available and you don&rsquo;t want to mess it up with setting a path into a file and then re-setting your path on the begin of your other script. Or pass it around with Packer. No. Use a proper PowerShell script. Learn it. It&rsquo;s not that hard. Be a professional. Don&rsquo;t hack something together for the next person to suffer at.</p>
<p>Here is how I did it. Hope it helps somebody out.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-powershell" data-lang="powershell">
<span class="nv">$JDK_VER</span><span class="p">=</span><span class="s2">&#34;7u75&#34;</span>
<span class="nv">$JDK_FULL_VER</span><span class="p">=</span><span class="s2">&#34;7u75-b13&#34;</span>
<span class="nv">$JDK_PATH</span><span class="p">=</span><span class="s2">&#34;1.7.0_75&#34;</span>
<span class="nv">$source86</span> <span class="p">=</span> <span class="s2">&#34;http://download.oracle.com/otn-pub/java/jdk/$JDK_FULL_VER/jdk-$JDK_VER-windows-i586.exe&#34;</span>
<span class="nv">$source64</span> <span class="p">=</span> <span class="s2">&#34;http://download.oracle.com/otn-pub/java/jdk/$JDK_FULL_VER/jdk-$JDK_VER-windows-x64.exe&#34;</span>
<span class="nv">$destination86</span> <span class="p">=</span> <span class="s2">&#34;C:\vagrant\$JDK_VER-x86.exe&#34;</span>
<span class="nv">$destination64</span> <span class="p">=</span> <span class="s2">&#34;C:\vagrant\$JDK_VER-x64.exe&#34;</span>
<span class="nv">$client</span> <span class="p">=</span> <span class="nb">new-object</span> <span class="n">System</span><span class="p">.</span><span class="n">Net</span><span class="p">.</span><span class="n">WebClient</span>
<span class="nv">$cookie</span> <span class="p">=</span> <span class="s2">&#34;oraclelicense=accept-securebackup-cookie&#34;</span>
<span class="nv">$client</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="no">[System.Net.HttpRequestHeader]</span><span class="p">::</span><span class="n">Cookie</span><span class="p">,</span> <span class="nv">$cookie</span><span class="p">)</span>

<span class="nb">Write-Host</span> <span class="s1">&#39;Checking if Java is already installed&#39;</span>
<span class="k">if</span> <span class="p">((</span><span class="nb">Test-Path</span> <span class="s2">&#34;c:\Program Files (x86)\Java&#34;</span><span class="p">)</span> <span class="o">-Or</span> <span class="p">(</span><span class="nb">Test-Path</span> <span class="s2">&#34;c:\Program Files\Java&#34;</span><span class="p">))</span> <span class="p">{</span>
    <span class="nb">Write-Host</span> <span class="s1">&#39;No need to Install Java&#39;</span>
    <span class="n">Exit</span>
<span class="p">}</span>

<span class="nb">Write-Host</span> <span class="s1">&#39;Downloading x86 to $destination86&#39;</span>

<span class="nv">$client</span><span class="p">.</span><span class="n">downloadFile</span><span class="p">(</span><span class="nv">$source86</span><span class="p">,</span> <span class="nv">$destination86</span><span class="p">)</span>
<span class="k">if</span> <span class="p">(!(</span><span class="nb">Test-Path</span> <span class="nv">$destination86</span><span class="p">))</span> <span class="p">{</span>
    <span class="nb">Write-Host</span> <span class="s2">&#34;Downloading $destination86 failed&#34;</span>
    <span class="n">Exit</span>
<span class="p">}</span>
<span class="nb">Write-Host</span> <span class="s1">&#39;Downloading x64 to $destination64&#39;</span>

<span class="nv">$client</span><span class="p">.</span><span class="n">downloadFile</span><span class="p">(</span><span class="nv">$source64</span><span class="p">,</span> <span class="nv">$destination64</span><span class="p">)</span>
<span class="k">if</span> <span class="p">(!(</span><span class="nb">Test-Path</span> <span class="nv">$destination64</span><span class="p">))</span> <span class="p">{</span>
    <span class="nb">Write-Host</span> <span class="s2">&#34;Downloading $destination64 failed&#34;</span>
    <span class="n">Exit</span>
<span class="p">}</span>


<span class="k">try</span> <span class="p">{</span>
    <span class="nb">Write-Host</span> <span class="s1">&#39;Installing JDK-x64&#39;</span>
    <span class="nv">$proc1</span> <span class="p">=</span> <span class="nb">Start-Process</span> <span class="n">-FilePath</span> <span class="s2">&#34;$destination64&#34;</span> <span class="n">-ArgumentList</span> <span class="s2">&#34;/s REBOOT=ReallySuppress&#34;</span> <span class="n">-Wait</span> <span class="n">-PassThru</span>
    <span class="nv">$proc1</span><span class="p">.</span><span class="n">waitForExit</span><span class="p">()</span>
    <span class="nb">Write-Host</span> <span class="s1">&#39;Installation Done.&#39;</span>

    <span class="nb">Write-Host</span> <span class="s1">&#39;Installing JDK-x86&#39;</span>
    <span class="nv">$proc2</span> <span class="p">=</span> <span class="nb">Start-Process</span> <span class="n">-FilePath</span> <span class="s2">&#34;$destination86&#34;</span> <span class="n">-ArgumentList</span> <span class="s2">&#34;/s REBOOT=ReallySuppress&#34;</span> <span class="n">-Wait</span> <span class="n">-PassThru</span>
    <span class="nv">$proc2</span><span class="p">.</span><span class="n">waitForExit</span><span class="p">()</span>
    <span class="nb">Write-Host</span> <span class="s1">&#39;Installtion Done.&#39;</span>
<span class="p">}</span> <span class="k">catch</span> <span class="no">[exception]</span> <span class="p">{</span>
    <span class="nb">write-host</span> <span class="s1">&#39;$_ is&#39;</span> <span class="nv">$_</span>
    <span class="nb">write-host</span> <span class="s1">&#39;$_.GetType().FullName is&#39;</span> <span class="nv">$_</span><span class="p">.</span><span class="n">GetType</span><span class="p">().</span><span class="n">FullName</span>
    <span class="nb">write-host</span> <span class="s1">&#39;$_.Exception is&#39;</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span>
    <span class="nb">write-host</span> <span class="s1">&#39;$_.Exception.GetType().FullName is&#39;</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span><span class="p">.</span><span class="n">GetType</span><span class="p">().</span><span class="n">FullName</span>
    <span class="nb">write-host</span> <span class="s1">&#39;$_.Exception.Message is&#39;</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span><span class="p">.</span><span class="n">Message</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">((</span><span class="nb">Test-Path</span> <span class="s2">&#34;c:\Program Files (x86)\Java&#34;</span><span class="p">)</span> <span class="o">-Or</span> <span class="p">(</span><span class="nb">Test-Path</span> <span class="s2">&#34;c:\Program Files\Java&#34;</span><span class="p">))</span> <span class="p">{</span>
    <span class="nb">Write-Host</span> <span class="s1">&#39;Java installed successfully.&#39;</span>
<span class="p">}</span>
<span class="nb">Write-Host</span> <span class="s1">&#39;Setting up Path variables.&#39;</span>
<span class="no">[System.Environment]</span><span class="p">::</span><span class="n">SetEnvironmentVariable</span><span class="p">(</span><span class="s2">&#34;JAVA_HOME&#34;</span><span class="p">,</span> <span class="s2">&#34;c:\Program Files (x86)\Java\jdk$JDK_PATH&#34;</span><span class="p">,</span> <span class="s2">&#34;Machine&#34;</span><span class="p">)</span>
<span class="no">[System.Environment]</span><span class="p">::</span><span class="n">SetEnvironmentVariable</span><span class="p">(</span><span class="s2">&#34;PATH&#34;</span><span class="p">,</span> <span class="nv">$Env:Path</span> <span class="p">+</span> <span class="s2">&#34;;c:\Program Files (x86)\Java\jdk$JDK_PATH\bin&#34;</span><span class="p">,</span> <span class="s2">&#34;Machine&#34;</span><span class="p">)</span>
<span class="nb">Write-Host</span> <span class="s1">&#39;Done. Goodbye.&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>Now, there is room for improvement here. Like checking exit code, doing something extra after a failed exit. Throwing an exception, and so on and so forth. But this is a much needed improvement from calling a BAT file.</p>
<p>And you would use this in a Packer JSON file like this..</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json">
<span class="p">{</span>
      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;powershell&#34;</span><span class="p">,</span>
      <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">&#34;./scripts/jdk_inst.ps1&#34;</span>
      <span class="p">]</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Easy. And at the end, the System.Environment actually writes out into the registry permanently so no need to pass it around in a file or something ugly like that.</p>
<p>Hope this helps somebody.</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>The Packer, The Windows, and the Vagrant box</title>
      <link>https://skarlso.github.io/2015/06/27/the-packer-the-windows-and-the-vagrant-box/</link>
      <pubDate>Sat, 27 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/06/27/the-packer-the-windows-and-the-vagrant-box/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>Today, I would like to write about something close to my heart recently. I&rsquo;ve been fiddling with Packer, Windows and Vagrant these days. Trying to get a Windows box up in running is a pain in the arse though, so I thought I share my pain with you nice folks out there. Let&rsquo;s begin.</p>
<h1 id="setup">Setup</h1>
<p>First things first. You need <a href="https://packer.io/" target="_blank">Packer</a>, and <a href="https://www.vagrantup.com/" target="_blank">Vagrant</a> obviously. I&rsquo;ll leave the install up to you. Next, you should clone this git repo =&gt; <a href="https://github.com/joefitzgerald/packer-windows" target="_blank">Packer Windows Plugin</a>. This plugin contains all the files necessary to get, install, and provision Windows boxes. Luckily, some very nice and clever folks, figured out a lot of things about how to install stuff on Windows. And given that people at Microsoft realised that sys admins would like to install stuff remotely, there are a bunch of forums and places where you can search for how to install software without user interaction. And this is the keyword you should look for =&gt; <strong>unattended Windows install</strong>.</p>
<p>This will lead you further into the bowls of Windows technology and silent / quiet installs all over the place.</p>
<h1 id="packer-and-answer-files">Packer and Answer Files</h1>
<p>When it comes to installing software on Windows, you have quite a few obstacles to overtake. One of the biggest obstacle you are facing, are restarts. Windows has a special place in hell for that. Every time you install something important which requires system libraries or other kind of configuration which &ldquo;will only take effect after you restart Windows&rdquo; you have to do a restart. Now, a little background on how Packer interacts with Windows. At the moment, it uses OpenSSH to talk to the box which has to be the last which comes up. If it looses connection to openssh because, I don&rsquo;t know, it restarted itself, you loose communication to the box, and the setup process stops in mid tracks.</p>
<p>If you read about that in an earlier attempt to overtake this, you saw that you could use time-outs. You could kill ssh process which presumably makes packer do an attempt to start a new connection. If you are like me, you experienced that Packer does indeed NOT re-try. Because the previous task couldn&rsquo;t finish, the restart killed the ssh service which could tell Packer that the previous task, an install for example, has finished. Hence, Packer will stay there and wait for that task to complete; which will never happen at this point.</p>
<p>What can we do? Enter the world of <a href="https://technet.microsoft.com/en-us/library/cc749113(v=ws.10).aspx" target="_blank">Answer Files</a>. Basically, it&rsquo;s an xml file which sets up Windows. When Packer is running this file, the last service which should be installed, must be openSSH. And after that, in the provisioning phase, you should only install software which does not require restarts.</p>
<p>Let&rsquo;s look at an example.</p>
<h1 id="example-1-windows-updates">Example #1: Windows Updates</h1>
<p>This is another layer of purgatory for Windows. It&rsquo;s updates. The updates take massive amount of times, if you are doing them from scratch, and also require several restart before it&rsquo;s actually done. You **could **speed up the process a little bit, if you have a private network share where all of the Windows updates are sitting. At least that way you don&rsquo;t have to download them every time you are creating a box. But you can&rsquo;t avert the install process itself.</p>
<p>Let&rsquo;s look at a setup for packer. Packer works with JSON files for it&rsquo;s configuration. An example for a Windows 7 box would look something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span><span class="lnt">95
</span><span class="lnt">96
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json">
<span class="p">{</span>
  <span class="nt">&#34;builders&#34;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;vmware-iso&#34;</span><span class="p">,</span>
      <span class="nt">&#34;iso_url&#34;</span><span class="p">:</span> <span class="s2">&#34;http://care.dlservice.microsoft.com/dl/download/evalx/win7/x64/EN/7600.16385.090713-1255_x64fre_enterprise_en-us_EVAL_Eval_Enterprise-GRMCENXEVAL_EN_DVD.iso&#34;</span><span class="p">,</span>
      <span class="nt">&#34;iso_checksum_type&#34;</span><span class="p">:</span> <span class="s2">&#34;md5&#34;</span><span class="p">,</span>
      <span class="nt">&#34;iso_checksum&#34;</span><span class="p">:</span> <span class="s2">&#34;1d0d239a252cb53e466d39e752b17c28&#34;</span><span class="p">,</span>
      <span class="nt">&#34;headless&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="nt">&#34;boot_wait&#34;</span><span class="p">:</span> <span class="s2">&#34;2m&#34;</span><span class="p">,</span>
      <span class="nt">&#34;ssh_username&#34;</span><span class="p">:</span> <span class="s2">&#34;vagrant&#34;</span><span class="p">,</span>
      <span class="nt">&#34;ssh_password&#34;</span><span class="p">:</span> <span class="s2">&#34;vagrant&#34;</span><span class="p">,</span>
      <span class="nt">&#34;ssh_wait_timeout&#34;</span><span class="p">:</span> <span class="s2">&#34;8h&#34;</span><span class="p">,</span>
      <span class="nt">&#34;shutdown_command&#34;</span><span class="p">:</span> <span class="s2">&#34;shutdown /s /t 10 /f /d p:4:1 /c \&#34;Packer Shutdown\&#34;&#34;</span><span class="p">,</span>
      <span class="nt">&#34;guest_os_type&#34;</span><span class="p">:</span> <span class="s2">&#34;windows7-64&#34;</span><span class="p">,</span>
      <span class="nt">&#34;tools_upload_flavor&#34;</span><span class="p">:</span> <span class="s2">&#34;windows&#34;</span><span class="p">,</span>
      <span class="nt">&#34;disk_size&#34;</span><span class="p">:</span> <span class="mi">61440</span><span class="p">,</span>
      <span class="nt">&#34;vnc_port_min&#34;</span><span class="p">:</span> <span class="mi">5900</span><span class="p">,</span>
      <span class="nt">&#34;vnc_port_max&#34;</span><span class="p">:</span> <span class="mi">5980</span><span class="p">,</span>
      <span class="nt">&#34;floppy_files&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">&#34;./answer_files/7/Autounattend.xml&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/dis-updates.ps1&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/microsoft-updates.bat&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/win-updates.ps1&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/openssh.ps1&#34;</span>
      <span class="p">],</span>
      <span class="nt">&#34;vmx_data&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;RemoteDisplay.vnc.enabled&#34;</span><span class="p">:</span> <span class="s2">&#34;false&#34;</span><span class="p">,</span>
        <span class="nt">&#34;RemoteDisplay.vnc.port&#34;</span><span class="p">:</span> <span class="s2">&#34;5900&#34;</span><span class="p">,</span>
        <span class="nt">&#34;memsize&#34;</span><span class="p">:</span> <span class="s2">&#34;2048&#34;</span><span class="p">,</span>
        <span class="nt">&#34;numvcpus&#34;</span><span class="p">:</span> <span class="s2">&#34;2&#34;</span><span class="p">,</span>
        <span class="nt">&#34;scsi0.virtualDev&#34;</span><span class="p">:</span> <span class="s2">&#34;lsisas1068&#34;</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;virtualbox-iso&#34;</span><span class="p">,</span>
      <span class="nt">&#34;iso_url&#34;</span><span class="p">:</span> <span class="s2">&#34;http://care.dlservice.microsoft.com/dl/download/evalx/win7/x64/EN/7600.16385.090713-1255_x64fre_enterprise_en-us_EVAL_Eval_Enterprise-GRMCENXEVAL_EN_DVD.iso&#34;</span><span class="p">,</span>
      <span class="nt">&#34;iso_checksum_type&#34;</span><span class="p">:</span> <span class="s2">&#34;md5&#34;</span><span class="p">,</span>
      <span class="nt">&#34;iso_checksum&#34;</span><span class="p">:</span> <span class="s2">&#34;1d0d239a252cb53e466d39e752b17c28&#34;</span><span class="p">,</span>
      <span class="nt">&#34;headless&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="nt">&#34;boot_wait&#34;</span><span class="p">:</span> <span class="s2">&#34;2m&#34;</span><span class="p">,</span>
      <span class="nt">&#34;ssh_username&#34;</span><span class="p">:</span> <span class="s2">&#34;vagrant&#34;</span><span class="p">,</span>
      <span class="nt">&#34;ssh_password&#34;</span><span class="p">:</span> <span class="s2">&#34;vagrant&#34;</span><span class="p">,</span>
      <span class="nt">&#34;ssh_wait_timeout&#34;</span><span class="p">:</span> <span class="s2">&#34;8h&#34;</span><span class="p">,</span>
      <span class="nt">&#34;shutdown_command&#34;</span><span class="p">:</span> <span class="s2">&#34;shutdown /s /t 10 /f /d p:4:1 /c \&#34;Packer Shutdown\&#34;&#34;</span><span class="p">,</span>
      <span class="nt">&#34;guest_os_type&#34;</span><span class="p">:</span> <span class="s2">&#34;Windows7_64&#34;</span><span class="p">,</span>
      <span class="nt">&#34;disk_size&#34;</span><span class="p">:</span> <span class="mi">61440</span><span class="p">,</span>
      <span class="nt">&#34;floppy_files&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">&#34;./answer_files/7/Autounattend.xml&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/dis-updates.ps1&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/microsoft-updates.bat&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/win-updates.ps1&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/openssh.ps1&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/oracle-cert.cer&#34;</span>
      <span class="p">],</span>
      <span class="nt">&#34;vboxmanage&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">[</span>
          <span class="s2">&#34;modifyvm&#34;</span><span class="p">,</span>
          <span class="s2">&#34;{{.Name}}&#34;</span><span class="p">,</span>
          <span class="s2">&#34;--memory&#34;</span><span class="p">,</span>
          <span class="s2">&#34;2048&#34;</span>
        <span class="p">],</span>
        <span class="p">[</span>
          <span class="s2">&#34;modifyvm&#34;</span><span class="p">,</span>
          <span class="s2">&#34;{{.Name}}&#34;</span><span class="p">,</span>
          <span class="s2">&#34;--cpus&#34;</span><span class="p">,</span>
          <span class="s2">&#34;2&#34;</span>
        <span class="p">]</span>
      <span class="p">]</span>
    <span class="p">}</span>
  <span class="p">],</span>
  <span class="nt">&#34;provisioners&#34;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;shell&#34;</span><span class="p">,</span>
      <span class="nt">&#34;remote_path&#34;</span><span class="p">:</span> <span class="s2">&#34;/tmp/script.bat&#34;</span><span class="p">,</span>
      <span class="nt">&#34;execute_command&#34;</span><span class="p">:</span> <span class="s2">&#34;{{.Vars}} cmd /c C:/Windows/Temp/script.bat&#34;</span><span class="p">,</span>
      <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">&#34;./scripts/vm-guest-tools.bat&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/chef.bat&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/vagrant-ssh.bat&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/disable-auto-logon.bat&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/enable-rdp.bat&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/compile-dotnet-assemblies.bat&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/compact.bat&#34;</span>
      <span class="p">]</span>
    <span class="p">}</span>
  <span class="p">],</span>
  <span class="nt">&#34;post-processors&#34;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;vagrant&#34;</span><span class="p">,</span>
      <span class="nt">&#34;keep_input_artifact&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="nt">&#34;output&#34;</span><span class="p">:</span> <span class="s2">&#34;windows_7_{{.Provider}}.box&#34;</span><span class="p">,</span>
      <span class="nt">&#34;vagrantfile_template&#34;</span><span class="p">:</span> <span class="s2">&#34;vagrantfile-windows_7.template&#34;</span>
    <span class="p">}</span>
  <span class="p">]</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>If it feels daunting, don&rsquo;t worry. You&rsquo;ll get used to it fairly quickly. Let&rsquo;s go over section by section on what this does.</p>
<h4 id="builders">Builders</h4>
<p>Packer uses builders for, well, building stuff. These two builders are virtualbox and vmware. I&rsquo;m only interested in virtualbox. This builder downloads win7 and sets up some virtual box details like, disk size, vagrant user, memory, and so and so forth. The interesting part is the floppy part. Here, we can add in some files for setup. We will use this part later on.</p>
<h4 id="provisioners">Provisioners</h4>
<p>Now here is an interesting tid-bit. There are a bunch of provisioners available as plugin for packer. Installing them is fairly easy. Packer needs binary plugins. Just copy them into ~/.packer.d/plugins or directly into the packer home directly. I&rsquo;d advice against that. Have them in your own packer.d, that&rsquo;s much cleaner. For binary plugin releases in the Windows side, look here =&gt; <a href="https://github.com/packer-community/packer-windows-plugins/releases" target="_blank"><a href="https://github.com/packer-community/packer-windows-plugins/releases">https://github.com/packer-community/packer-windows-plugins/releases</a></a>. If you would like to build them yourself from source, download the source and use go gcc to build it. You will have to <strong>go get</strong> a few packages though. Also you will have to have <strong>$GOPATH</strong> (pointing to your own workspace) and <strong>$GOROOT</strong> (pointing to your working go) setup. But this is not a Go guide. After that just do **go build main.go **and you have your plugin.</p>
<p>Provisioners are like vagrant provision they will execute post setup stuff on your box. Like installing utils, 7zip, choco, nuget, and so and so forth. There are a few interesting Windows provisioners, like restart-windows, powershell, and Windows shell. Which is like shell, but without the need of pre-setup if you are trying to use it on Windows. The basic shell on Windows is a little clanky and can hang from time-to-time so I recommend using PowerShell or WindowsShell provisioner if you are dealing with Windows post-setup Setup.</p>
<h4 id="post-processor">Post-Processor</h4>
<p>This will create the Vagrant box after everything is done.</p>
<h4 id="running-the-update">Running the Update</h4>
<p>For use, two things are interesting from here at this moment. These guys =&gt;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="s2">&#34;./scripts/microsoft-updates.bat&#34;</span><span class="err">,</span>
<span class="s2">&#34;./scripts/win-updates.ps1&#34;</span><span class="err">,</span>
</code></pre></td></tr></table>
</div>
</div><p>These two contain most of the logic which is part of the update process. You should see it in your checked out source. There is some very interesting logic in there which describes how the update happens. Basically it&rsquo;s a loop which re-checks if there are updates available or if a re-start is needed. Packer handles re-starts well at this point in the install because it simply waits for SSH to come only. The rest is handled by Windows.</p>
<p>These scripts are called in the Answer File which the Windows Setup uses for configuration purposes. Take a look at this section:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml">
                <span class="nt">&lt;SynchronousCommand</span> <span class="na">wcm:action=</span><span class="s">&#34;add&#34;</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;CommandLine&gt;</span>cmd.exe /c a:\microsoft-updates.bat<span class="nt">&lt;/CommandLine&gt;</span>
                    <span class="nt">&lt;Order&gt;</span>98<span class="nt">&lt;/Order&gt;</span>
                    <span class="nt">&lt;Description&gt;</span>Enable Microsoft Updates<span class="nt">&lt;/Description&gt;</span>
                <span class="nt">&lt;/SynchronousCommand&gt;</span>
                <span class="nt">&lt;SynchronousCommand</span> <span class="na">wcm:action=</span><span class="s">&#34;add&#34;</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;CommandLine&gt;</span>cmd.exe /c C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -File a:\win-updates.ps1 -MaxUpdatesPerCycle 30<span class="nt">&lt;/CommandLine&gt;</span>
                    <span class="nt">&lt;Description&gt;</span>Install Windows Updates<span class="nt">&lt;/Description&gt;</span>
                    <span class="nt">&lt;Order&gt;</span>100<span class="nt">&lt;/Order&gt;</span>
                    <span class="nt">&lt;RequiresUserInput&gt;</span>true<span class="nt">&lt;/RequiresUserInput&gt;</span>
                <span class="nt">&lt;/SynchronousCommand&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>This is were the floppy part comes on handy. This part uses the scripts bound by floppy and which will be available from a:.</p>
<p>This will install all the updates available. It will take a while. A very very long while. But let&rsquo;s go a step further.</p>
<h1 id="example-2-installing-dotnet-45">Example #2: Installing DotNet 4.5</h1>
<p>Let&rsquo;s assume you want to create a box with visual studio 2013, office, and have choco on it, and a couple of more things for which you need lots of restarts. You could try installing with /norestart switch, which also works; however if you definitely need it to restart I suggest installing stuff with the Answer File. For this, let&rsquo;s create a PowerShell script which downloads and installs dotnet 451 which is needed for visual studio ultimate 2013.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-powershell" data-lang="powershell">
<span class="nv">$Logfile</span> <span class="p">=</span> <span class="s2">&#34;C:\Windows\Temp\dotnet-install.log&#34;</span>
<span class="k">function</span> <span class="n">LogWrite</span> <span class="p">{</span>
   <span class="k">Param</span> <span class="p">(</span><span class="no">[string]</span><span class="nv">$logstring</span><span class="p">)</span>
   <span class="nv">$now</span> <span class="p">=</span> <span class="nb">Get-Date</span> <span class="n">-format</span> <span class="n">s</span>
   <span class="nb">Add-Content</span> <span class="nv">$Logfile</span> <span class="n">-value</span> <span class="s2">&#34;$now $logstring&#34;</span>
   <span class="nb">Write-Host</span> <span class="nv">$logstring</span>
<span class="p">}</span>

<span class="n">LogWrite</span> <span class="s2">&#34;Downlading dotNetFx40_Full_x86_x64.&#34;</span>
<span class="k">try</span> <span class="p">{</span>
    <span class="p">(</span><span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Net</span><span class="p">.</span><span class="n">WebClient</span><span class="p">).</span><span class="n">DownloadFile</span><span class="p">(</span><span class="s1">&#39;http://download.microsoft.com/download/1/6/7/167F0D79-9317-48AE-AEDB-17120579F8E2/NDP451-KB2858728-x86-x64-AllOS-ENU.exe&#39;</span><span class="p">,</span> <span class="s1">&#39;C:\Windows\Temp\dotnet.exe&#39;</span><span class="p">)</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
    <span class="n">LogWrite</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span> <span class="p">|</span> <span class="nb">Format-List</span> <span class="n">-force</span>
    <span class="n">LogWrite</span> <span class="s2">&#34;Failed to download file.&#34;</span>
<span class="p">}</span>

<span class="n">LogWrite</span> <span class="s2">&#34;Starting installation process...&#34;</span>
<span class="k">try</span> <span class="p">{</span>
    <span class="nb">Start-Process</span> <span class="n">-FilePath</span> <span class="s2">&#34;C:\Windows\Temp\dotnet.exe&#34;</span> <span class="n">-ArgumentList</span> <span class="s2">&#34;/I /q /norestart&#34;</span> <span class="n">-Wait</span> <span class="n">-PassThru</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
    <span class="n">LogWrite</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span> <span class="p">|</span> <span class="nb">Format-List</span> <span class="n">-force</span>
    <span class="n">LogWrite</span> <span class="s2">&#34;Exception during install process.&#34;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>So this downloads it right from the source. As mentioned earlier, you could have this on a nice shared drive so downloading from the internet is not necessary. The installer is in fact a bit friendly. It has a switch called /q /norestart. The /q is called silent install and the /norestart speaks for itself. If you leave it out, you can use /forcerestart or you could have the following two lines after this finishes: <em>LogWrite &ldquo;Resarting Computer.&rdquo; Restart-Computer -Force</em>. This will force a restart. You need the -Force because otherwise it won&rsquo;t let it restart while there are active sessions logged on the computer.</p>
<p>Now, let&rsquo;s add this to the answer file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml">
                <span class="nt">&lt;SynchronousCommand</span> <span class="na">wcm:action=</span><span class="s">&#34;add&#34;</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;CommandLine&gt;</span>cmd.exe /c C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -File a:\install-dotnet-451.ps1 -AutoStart<span class="nt">&lt;/CommandLine&gt;</span>
                    <span class="nt">&lt;Order&gt;</span>98<span class="nt">&lt;/Order&gt;</span>
                    <span class="nt">&lt;Description&gt;</span>Install DotNet 4.5.1.<span class="nt">&lt;/Description&gt;</span>
                <span class="nt">&lt;/SynchronousCommand&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>See, how easy this is? And now we make use of the floppy part of the windows-7.json by adding this line: <strong>&quot;./scripts/install-dotnet-451.ps1&quot;</strong>. Don&rsquo;t forget to append the &ldquo;,&rdquo; at the end of the previous line. This is an array.</p>
<p>We are ready to go. Just run <strong>packer build -only=virtualbox-iso windows-7.json</strong> and you should be done!</p>
<h1 id="example-3-installing-visual-studio-ultimate">Example #3: Installing Visual Studio Ultimate</h1>
<p>Installing visual studio is almost trivial as well. With the addition that visual studio requires an admin.xml for silent install which has a bunch of settings. When you have the admin.xml just bind it into the floppy drive as well and call the visual studio install powershell script like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-powershell" data-lang="powershell">    <span class="nb">Start-Process</span> <span class="n">-FilePath</span> <span class="s2">&#34;C:\Windows\Temp\visualstudioultimate.exe&#34;</span> <span class="n">-ArgumentList</span> <span class="s2">&#34;/Quiet /NoRestart /admin a:\admin.xml&#34;</span> <span class="n">-Wait</span> <span class="n">-PassThru</span>
</code></pre></td></tr></table>
</div>
</div><p>Again, this will take a while&hellip;..</p>
<h1 id="post-setup-provisioning">Post Setup Provisioning</h1>
<p>When all this is done, you can still add some provisioning steps to add some utils with PowerShell or WindowsShell provisioner. I would advice against using simple shell. Bare in mind one other thing. If you have a batch file, and you are calling another batch file in that batch file, like choco install 7zip, it will happen that the install process will hang on installing 7zip. Because in Windows land the called script will not return the exec handler to the caller unless specifically asking for it with <strong>call</strong>. Which means your bat file will look something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">
call choco install 7zip
call choco install notepadplusplus
</code></pre></td></tr></table>
</div>
</div><p>or</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">
cmd /c choco install 7zip
cmd /c choco install notepadplusplus
</code></pre></td></tr></table>
</div>
</div><p>And so on, and so forth.</p>
<h1 id="wrap-up">Wrap-Up</h1>
<p>So, what have we learned? We have learned that installing software which requires re-start is better left to Windows itself with an answer file. Batch files will not return the handler. SSH <strong>MUST</strong> be the last thing you start up in the answer file. Use PowerShell provisioner or WindowsShell provisioner on Windows.</p>
<p>Hope this helped.</p>
<p>Happy installing, and as always,</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>Docker &#43; Java &#43; Vagrant&#43; GO.CD</title>
      <link>https://skarlso.github.io/2015/06/06/docker-ruby-lotus-go-cd/</link>
      <pubDate>Sat, 06 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/06/06/docker-ruby-lotus-go-cd/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>Today, I would like to write about something interesting and close to me at the moment. I&rsquo;m going to setup Go.cd with Docker, and I&rsquo;m going to get a Ruby Lotus app running. Let&rsquo;s get started.</p>
<h1 id="fluff">Fluff</h1>
<p>Now, obviously, you don&rsquo;t really need Go.Cd or Docker to setup a Java Gradle application, since it&rsquo;s dead easy. But I&rsquo;m going to do it just for the heck of it.</p>
<h1 id="setup">Setup</h1>
<p>Okay, lets start with Vagrant. Docker&rsquo;s strength is coming from Linux&rsquo;s process isolation capabilities it&rsquo;s not yet properly working on OSX or Windows. You have a couple of options if you&rsquo;d like to try never the less, like boot2docker, or a Tiny Linux kernel, but at that point, I think it&rsquo;s easier to use a VM.</p>
<h4 id="vagrant">Vagrant</h4>
<p>So, let&rsquo;s start with my small Vagrantfile.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby">
<span class="c1"># -*- mode: ruby -*-</span>
<span class="c1"># vi: set ft=ruby :</span>

<span class="c1"># All Vagrant configuration is done below. The &#34;2&#34; in Vagrant.configure</span>
<span class="c1"># configures the configuration version (we support older styles for</span>
<span class="c1"># backwards compatibility). Please don&#39;t change it unless you know what</span>
<span class="c1"># you&#39;re doing.</span>
<span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="c1"># The most common configuration options are documented and commented below.</span>
  <span class="c1"># For a complete reference, please see the online documentation at</span>
  <span class="c1"># https://docs.vagrantup.com.</span>

  <span class="c1"># Every Vagrant development environment requires a box. You can search for</span>
  <span class="c1"># boxes at https://atlas.hashicorp.com/search.</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&#34;trusty&#34;</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box_url</span> <span class="o">=</span> <span class="s2">&#34;https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box&#34;</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&#34;forwarded_port&#34;</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">2300</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="mi">2300</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&#34;forwarded_port&#34;</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">8153</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="mi">8153</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&#34;shell&#34;</span><span class="p">,</span> <span class="ss">path</span><span class="p">:</span> <span class="s2">&#34;setup.sh&#34;</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&#34;virtualbox&#34;</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
    <span class="n">v</span><span class="o">.</span><span class="n">memory</span> <span class="o">=</span> <span class="mi">8192</span>
    <span class="n">v</span><span class="o">.</span><span class="n">cpus</span> <span class="o">=</span> <span class="mi">2</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></td></tr></table>
</div>
</div><p>Very simple. I&rsquo;m setting up a trusty64(because docker requires 3.10 &lt;= x) box and then doing a simple shell provision. Also, I gave it a bit juice, since go-server requires a raw power. Here is the shell script:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">
!#/bin/bash
sudo apt-get update
sudo apt-get install -y software-properties-common python-software-properties
sudo apt-get update
sudo apt-get install -y vim
sudo add-apt-repository -y <span class="s2">&#34;ppa:webupd8team/java&#34;</span>
sudo apt-get update
<span class="nb">echo</span> debconf shared/accepted-oracle-license-v1-1 <span class="k">select</span> <span class="nb">true</span> <span class="p">|</span> sudo debconf-set-selections <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> <span class="nb">echo</span> debconf shared/accepted-oracle-license-v1-1 seen <span class="nb">true</span> <span class="p">|</span> sudo debconf-set-selections
sudo apt-get install -y oracle-java8-installer
sudo apt-get update
wget -qO- https://get.docker.com/ <span class="p">|</span> sh
route add -net 172.17.0.0 netmask 255.255.255.0 gw 172.17.42.1
</code></pre></td></tr></table>
</div>
</div><p>The debconf at the end accepts java8&rsquo;s terms and conditions. And the last line installs docker in my box. This runs for a little while.</p>
<p>The routing on the end routes every traffic from 172.17.*.* to my vagrant box, which in turn I&rsquo;ll be able to use from my mac local, like 127.0.0.1:8153/go/home.</p>
<p>After a vagrant up, my box is ready to be used.</p>
<h4 id="docker">Docker</h4>
<p>When that&rsquo;s finished, we can move on to the next part, which is writing a little Dockerfile for our image. Go.cd will require java and a couple of other things, so let&rsquo;s automate the installation of that so we don&rsquo;t have to do it by hand.</p>
<p>Here is a Dockerfile I came up with:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="err">
</span><span class="err"></span><span class="k">FROM</span><span class="s"> ubuntu</span><span class="err">
</span><span class="err"></span><span class="k">MAINTAINER</span><span class="s"> Skarlso</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c">############ SETUP #############</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> apt-get update<span class="err">
</span><span class="err"></span><span class="k">RUN</span> apt-get install -y software-properties-common python-software-properties<span class="err">
</span><span class="err"></span><span class="k">RUN</span> add-apt-repository -y <span class="s2">&#34;ppa:webupd8team/java&#34;</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> <span class="nb">echo</span> debconf shared/accepted-oracle-license-v1-1 <span class="k">select</span> <span class="nb">true</span> <span class="p">|</span> sudo debconf-set-selections <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> <span class="nb">echo</span> debconf shared/accepted-oracle-license-v1-1 seen <span class="nb">true</span> <span class="p">|</span> sudo debconf-set-selections<span class="err">
</span><span class="err"></span><span class="k">RUN</span> apt-get update<span class="err">
</span><span class="err"></span><span class="k">RUN</span> apt-get install -y oracle-java8-installer<span class="err">
</span><span class="err"></span><span class="k">RUN</span> apt-get install -y vim<span class="err">
</span><span class="err"></span><span class="k">RUN</span> apt-get install -y unzip<span class="err">
</span><span class="err"></span><span class="k">RUN</span> apt-get install -y git<span class="err">
</span></code></pre></td></tr></table>
</div>
</div><p>So, our docker images have to be setup with Java as well for go.cd which I&rsquo;m taking care of here, and a little bit extra, to add vim, and unzip, which is required for dpkg later.</p>
<p>At this point run: <strong>docker build -t ubuntu:go .</strong> -&gt; This will use the dockerfile and create the ubuntu:go image. Note the **. **at the end.</p>
<h4 id="gocd">Go.cd</h4>
<p>Now, I&rsquo;m creating two containers. One, go-server, will be the go server, and the other, go-agent, will be the go agent.</p>
<p>First, go-server:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">
docker run -i -t --name go-server --hostname=go-server -p 8153:8153 ubuntu:go /bin/bash
wget http://download.go.cd/gocd-deb/go-server-15.1.0-1863.deb
dpkg -i go-server-15.1.0-1863.deb
</code></pre></td></tr></table>
</div>
</div><p>Pretty straight forward, no? We forward 8153 to vagrant (which forwards it to my mac), so after we start go-server service we should be able to visit: http://127.0.0.1:8153/go/home.</p>
<p>Lo', and behold, go server. Let&rsquo;s add an agent too.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">docker run -i -t --name go-agent --hostname=go-agent ubuntu:go /bin/bash
wget http://download.go.cd/gocd-deb/go-agent-15.1.0-1863.deb
dpkg -i go-agent-15.1.0-1863.deb
vim /etc/default/go-agent
GO_SERVER=172.17.0.1
service go-agent start
</code></pre></td></tr></table>
</div>
</div><p>No need to forward anything here. And as you can see, my agent was added successfully.</p>
<p>All nice, and dandy. The agent is there, and I enabled it, so it&rsquo;s ready to work. Let&rsquo;s give it something to do, shall we?</p>
<h1 id="the-app">The App</h1>
<p>I&rsquo;m going to use my gradle project which is on github. This one =&gt; https://github.com/Skarlso/DataMung.git.</p>
<p>Very basic setup. Just check it out and then build &amp; run tests. Easy, right?</p>
<p>First step in this process, define the pipeline. I&rsquo;m going to keep it simple. Name the pipeline DataMunger. Group is Linux. Now, in go.cd you have to define something called, an <strong>environment</strong>. Environment can be anything you want, I&rsquo;m going to go with Linux. You have to assign <strong>agents</strong> to this environment who fulfil it and the pipeline which will use that environment. More on that you can read in the go.cd documentation. This is how you would handle a pipeline which uses linux, and a windows environment at the same time.</p>
<p>In step one you have to define something called the <strong>Material</strong>. That will be the source on which the agent will work. This can be multiple, in different folders within the confines of the pipeline, or singular.</p>
<p>I defined my git project and tested the connection OK. Next up is the first **Stage **and the initial **Job **to perform. This, for me, will be a compile or an assemble, and later on a test run.</p>
<p>Now, Go is awesome in parallelising jobs. If my project would be large enough, I could have multiple jobs here. But for now, I&rsquo;ll use stages because they run subsequently. So, first stage, compile. Next stage, testing and archiving the results.</p>
<p>I added the next stage and defined the artefact. Go supports test-reports. If you define the path to a test artefact than go will parse it and create a nice report out of it.</p>
<p>Now, let&rsquo;s run it. It will probably fail on something. 😉</p>
<p>Well, I&rsquo;ll be. It worked on the first run.</p>
<p>And here are the test results.</p>
<h1 id="wrap-up">Wrap-up</h1>
<p>Well, that&rsquo;s it folks. Gradle project, with vagrant, docker, and go.cd. I hope you all enjoyed reading about it as much as I did doing it.</p>
<p>Any questions, please feel free to ask it in the comment section below.</p>
<p>Cheers,
Have a nice weekend,
Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>Setting up a new Laptop with Puppet</title>
      <link>https://skarlso.github.io/2015/05/21/setting-up-a-new-laptop-with-puppet/</link>
      <pubDate>Thu, 21 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/05/21/setting-up-a-new-laptop-with-puppet/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>So, some of you know <a href="https://puppetlabs.com/" target="_blank">puppet</a>, some of you don&rsquo;t. Puppet is a configuration management system. It&rsquo;s quite awesome. I like working with it. One of the benefits of puppet is, that I never, ever, EVER have to setup a new laptop from scratch, EVER again.</p>
<p>I&rsquo;m writing a puppet manifest file which sets up my new laptop to my liking. I will improve it as I go along. Here is version 1.0.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby">
<span class="c1"># include apt</span>

<span class="k">class</span> <span class="n">base</span><span class="o">::</span><span class="n">basics</span> <span class="p">{</span>
        <span class="vg">$packages</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;git&#39;</span><span class="p">,</span> <span class="s1">&#39;subversion&#39;</span><span class="p">,</span> <span class="s1">&#39;mc&#39;</span><span class="p">,</span> <span class="s1">&#39;vim&#39;</span><span class="p">,</span> <span class="s1">&#39;maven&#39;</span><span class="p">,</span> <span class="s1">&#39;gradle&#39;</span><span class="o">]</span>

        <span class="nb">exec</span> <span class="p">{</span> <span class="s2">&#34;update&#34;</span><span class="p">:</span>
                <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&#34;/usr/bin/apt-get update&#34;</span><span class="p">,</span>
        <span class="p">}</span>

        <span class="n">package</span> <span class="p">{</span> <span class="vg">$packages</span><span class="p">:</span>
                <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">installed</span><span class="p">,</span>
                <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span><span class="s2">&#34;update&#34;</span><span class="o">]</span><span class="p">,</span>
        <span class="p">}</span>

<span class="p">}</span>

<span class="k">class</span> <span class="n">base</span><span class="o">::</span><span class="n">skype</span> <span class="p">{</span>
        <span class="nb">exec</span> <span class="p">{</span> <span class="s2">&#34;add-arc&#34;</span><span class="p">:</span>
                <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&#34;/usr/bin/dpkg --add-architecture i386&#34;</span><span class="p">,</span>
        <span class="p">}</span>

        <span class="nb">exec</span> <span class="p">{</span> <span class="s2">&#34;add-repo-skype&#34;</span><span class="p">:</span>
                <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&#34;/usr/bin/add-apt-repository </span><span class="se">\&#34;</span><span class="s2">deb http://archive.canonical.com/ \$(lsb_release -sc) partner</span><span class="se">\&#34;</span><span class="s2">&#34;</span><span class="p">,</span>
                <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span><span class="s1">&#39;add-arc&#39;</span><span class="o">]</span><span class="p">,</span>
        <span class="p">}</span>

        <span class="nb">exec</span> <span class="p">{</span> <span class="s2">&#34;update-and-install&#34;</span><span class="p">:</span>
                <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&#34;/usr/bin/apt-get update &amp;&amp; /usr/bin/apt-get install skype&#34;</span><span class="p">,</span>
                <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span><span class="s1">&#39;add-repo-skype&#39;</span><span class="o">]</span><span class="p">,</span>
        <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="n">base</span><span class="o">::</span><span class="n">java8</span> <span class="p">{</span>
        <span class="c1"># Automatically does an update afterwards</span>
        <span class="c1"># apt::ppa { &#39;ppa:webupd8team/java&#39;: }</span>
        <span class="nb">exec</span> <span class="p">{</span> <span class="s2">&#34;add-repo-java&#34;</span><span class="p">:</span>
                <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&#34;/usr/bin/add-apt-repository -y </span><span class="se">\&#34;</span><span class="s2">ppa:webupd8team/java</span><span class="se">\&#34;</span><span class="s2"> &amp;&amp; /usr/bin/apt-get update&#34;</span>
        <span class="p">}</span>

        <span class="nb">exec</span> <span class="p">{</span> <span class="s2">&#34;set-accept&#34;</span><span class="p">:</span>
                <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&#34;/bin/echo /usr/bin/debconf shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections &amp;&amp; /bin/echo /usr/bin/debconf shared/accepted-oracle-license-v1-1 seen true | sudo /usr/bin/debconf-set-selections&#34;</span><span class="p">,</span>
                <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span><span class="s1">&#39;add-repo-java&#39;</span><span class="o">]</span><span class="p">,</span>
        <span class="p">}</span>

        <span class="nb">exec</span> <span class="p">{</span> <span class="s2">&#34;install&#34;</span><span class="p">:</span>
                <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&#34;/usr/bin/apt-get install -y oracle-java8-installer&#34;</span><span class="p">,</span>
                <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span><span class="s1">&#39;set-accept&#39;</span><span class="o">]</span><span class="p">,</span>
        <span class="p">}</span>

        <span class="nb">exec</span> <span class="p">{</span> <span class="s2">&#34;setup_home&#34;</span><span class="p">:</span>
                <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&#34;/bin/echo </span><span class="se">\&#34;</span><span class="s2">export JDK18_HOME=/usr/lib/jvm/java-8-oracle/</span><span class="se">\&#34;</span><span class="s2"> &gt;&gt; /etc/environment&#34;</span><span class="p">,</span>
                <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span><span class="s1">&#39;install&#39;</span><span class="o">]</span><span class="p">,</span>
        <span class="p">}</span>
<span class="p">}</span>

<span class="kp">include</span> <span class="n">base</span><span class="o">::</span><span class="n">basics</span>
<span class="kp">include</span> <span class="n">base</span><span class="o">::</span><span class="n">skype</span>
<span class="kp">include</span> <span class="n">base</span><span class="o">::</span><span class="n">java8</span>
</code></pre></td></tr></table>
</div>
</div><p>I&rsquo;ll improve upon it as I go, and you can check it out later from my git repo. I removed the parts which required extra libraries for now, as I want it to run without the need of getting extra stuff installed. I might automate that part as well later on.</p>
<p>EDIT: <a href="https://github.com/Skarlso/puppet/blob/master/manifests/base_setup.pp" target="_blank"><a href="https://github.com/Skarlso/puppet/blob/master/manifests/base_setup.pp">https://github.com/Skarlso/puppet/blob/master/manifests/base_setup.pp</a></a></p>
<p>Have fun.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Busy building the future</title>
      <link>https://skarlso.github.io/2015/05/19/busy-building-the-future/</link>
      <pubDate>Tue, 19 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/05/19/busy-building-the-future/</guid>
      <description><![CDATA[<p>Fact is, I&rsquo;ve been busy.</p>
<p>I&rsquo;ve got a new job as a build engineer. As sort of a devops kind of guy. It&rsquo;s extremely interesting considering that I made a career as a tester. Granted, I always was technical, and never really knew my path; but it seems my path is finding me after all.</p>
<p>In the past years, I got better at Docker, Puppet, Chef, AWS, Packer, Vagrant, Gradle, and a hell of a lot more. Also honed my linux skills from the ability of doing an ls -l to do an find . -type f -atime +5 | xargs rm -fr (find all the files which are 5 days older and pipe them to a delete command). I already read many books about devops but this time, it&rsquo;s different. This time, I can actually do these things as well in a live environment.</p>
<p>As once a friend of mine told me: &ldquo;You ain&rsquo;t gonna learn anything unless you are getting payed for it.&rdquo; Wise words. True words.</p>
<p>So stayed tuned for some devops and engineering type posts. I would like to continue working on the Django parts as well, however given my priorities and lack of time ( family and stuff, must choose what I learned in the hour I get each day), it might fall behind. I might stick it into some kind of provision practice or even give it a Travis.ci and put it into a gradle project. Now THAT&rsquo;S interesting.</p>
<p>Cheers folks.</p>
<p>And as always,</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Django – RPG – Part 3</title>
      <link>https://skarlso.github.io/2015/04/21/django-rpg-part-3/</link>
      <pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/04/21/django-rpg-part-3/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>A small update to this. I created the model now, which is the database design for this app. It&rsquo;s very simple, nothing fancy. Also, I&rsquo;m writing the app with Python 3 from now on.</p>
<p>Here is the model now:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python">
<span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
<span class="kn">from</span> <span class="nn">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>

<span class="c1"># Create your models here.</span>


<span class="k">class</span> <span class="nc">Item</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s2">&#34;Item&#34;</span><span class="p">)</span>
    <span class="n">damage</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="p">)</span>
    <span class="n">defense</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="p">)</span>
    <span class="n">consumable</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">BooleanField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

    <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>


<span class="k">class</span> <span class="nc">Inventory</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">items</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ManyToManyField</span><span class="p">(</span><span class="n">Item</span><span class="p">)</span>

    <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span>


<span class="k">class</span> <span class="nc">Character</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="c1"># By default Django uses the primery key of the related object.</span>
    <span class="c1"># Hence, no need to specify User.id.</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">OneToOneField</span><span class="p">(</span><span class="n">User</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
    <span class="n">inventory</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Inventory</span><span class="p">)</span>

    <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</code></pre></td></tr></table>
</div>
</div><p>Worth noting a few things here. The __str__ is only with Python 3. In Python 2 it would be unicode. And the OneToOne and the foreign key are automatically using Primary keys defined in the references model. The __str__ is there to return some view when you are debugging in the console instead of [&lt;Item: Item object&gt;].</p>
<p>In order to apply this change you just have to run this commend (given you set up your app in the settings.py as an INSTALLED_APP):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">
python manage.py makemigrations polls
</code></pre></td></tr></table>
</div>
</div><p>This creates the migration script. And this applies it:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python">
<span class="n">python</span> <span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">migrate</span>
</code></pre></td></tr></table>
</div>
</div><p>I love the fact that django creates incremental migration scripts out of the box. So if there was any problem at all, you can always roll back. Which comes very handy in certain situations.</p>
<p>That&rsquo;s it.</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Django – RPG – Part 2</title>
      <link>https://skarlso.github.io/2015/04/12/django-rpg-part-2/</link>
      <pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/04/12/django-rpg-part-2/</guid>
      <description><![CDATA[<p>Hello.</p>
<p>Continuing where we left off with the Django RPG project. Next up is implementing a rudimentary registration and adding the ability to create a character. Maybe even, design the database through django&rsquo;s modelling.</p>
<p>Since we are using Django&rsquo;s very own authentication model, I think we are covered in terms of users. Let&rsquo;s add two things for now. An Index page, where there is a link to login and a link to registration.</p>
<p>Adding the index first. Later I would like to switch to a base template model, but for now, I created a simple index.html page. That only contains the two links to the two views. The views are a simple function call in the views.py too which the URLConfig will later point to.</p>
<p>For now, the index function looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python">
<span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
  <span class="s1">&#39;&#39;&#39;
</span><span class="s1">  myrpg/rpg/views.py
</span><span class="s1">  &#39;&#39;&#39;</span>
	<span class="n">title</span> <span class="o">=</span> <span class="s2">&#34;My RPG&#34;</span>
	<span class="k">return</span> <span class="n">render_to_response</span><span class="p">(</span><span class="s1">&#39;index.html&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;title&#39;</span><span class="p">:</span><span class="n">title</span><span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>Note, that the title here is utterly unimportant but because I want to switch to a base.html template I&rsquo;ll leave it here for later usage.</p>
<p>That concludes the index. Now, let&rsquo;s create the registration. That is a little more complex, but still rather easy. We are just checking of the user already exists or not, if so, display and error, if not, create the user.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># myrpg/rpg/views.py</span>
<span class="k">def</span> <span class="nf">registration</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
	<span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;Please register.&#34;</span>
	<span class="n">username</span> <span class="o">=</span> <span class="n">password</span> <span class="o">=</span> <span class="n">email</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
	<span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">:</span>
		<span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">)</span>
		<span class="n">email</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">)</span>
		<span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">)</span>
		<span class="k">if</span> <span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">username</span> <span class="o">=</span> <span class="n">username</span><span class="p">)</span><span class="o">.</span><span class="n">exists</span><span class="p">():</span>
			<span class="c1"># raise forms.ValidationError(&#34;Username %s is already in use.&#34; % username)</span>
			<span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;Username </span><span class="si">%s</span><span class="s2"> is already in use. Please try another.&#34;</span> <span class="o">%</span> <span class="n">username</span>
		<span class="k">else</span><span class="p">:</span>
			<span class="k">try</span><span class="p">:</span>
				<span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create_user</span><span class="p">(</span><span class="n">username</span> <span class="o">=</span> <span class="n">username</span><span class="p">,</span> <span class="n">email</span> <span class="o">=</span> <span class="n">email</span><span class="p">,</span> <span class="n">password</span> <span class="o">=</span> <span class="n">password</span><span class="p">)</span>
				<span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;Thank you for registering with us </span><span class="si">%s</span><span class="s2">!&#34;</span> <span class="o">%</span> <span class="n">user</span><span class="o">.</span><span class="n">username</span>
			<span class="k">except</span><span class="p">:</span>
				<span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;Unexpected error occured: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()[]</span>

	<span class="k">return</span> <span class="n">render_to_response</span><span class="p">(</span><span class="s1">&#39;registration.html&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;state&#39;</span><span class="p">:</span> <span class="n">state</span><span class="p">},</span> <span class="n">context_instance</span> <span class="o">=</span> <span class="n">RequestContext</span><span class="p">(</span><span class="n">request</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><p>Here, I&rsquo;m checking to see of the username already exists with the filter. This is by using Django&rsquo;s model which models the database like hibernate. It&rsquo;s a simple query. And I&rsquo;m doing this, because this is faster than raising an exception. Later on, I&rsquo;ll be switching to a validation framework and django&rsquo;s own auth view. Because, why not.</p>
<p>The URL conf looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#myrpg/rpg/urls.py</span>
<span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">url</span>

<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">url</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;^$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;index&#39;</span><span class="p">),</span>
    <span class="n">url</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;^login/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">login_user</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;login&#39;</span><span class="p">),</span>
    <span class="n">url</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;^registration/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">registration</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;registration&#39;</span><span class="p">),</span>
<span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>And this now, resides in a file under the RPG app and not the main one. The main one includes this one, like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#myrpg/urls.py</span>
<span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
<span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="c1"># Examples:</span>
    <span class="c1"># url(r&#39;^$&#39;, &#39;myrpg.views.home&#39;, name=&#39;home&#39;),</span>
    <span class="c1"># url(r&#39;^blog/&#39;, include(&#39;blog.urls&#39;)),</span>

    <span class="n">url</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;^admin/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
    <span class="n">url</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;^rpg/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s1">&#39;rpg.urls&#39;</span><span class="p">)),</span>
<span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>That&rsquo;s it for now. As always, you can check out the code under github.</p>
<p>Tune in next time, when I&rsquo;ll attempt to create a view to create a Character for a logged in user and link it to the user. I&rsquo;ll do this with django&rsquo;s model framework.</p>
<p>Thanks for reading,</p>
<p>Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>Django – RPG – Part 1</title>
      <link>https://skarlso.github.io/2015/04/10/django-rpg-2/</link>
      <pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/04/10/django-rpg-2/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>So last time, we tried to implement a little RPG of mine using Meteor, which failed miserably. This time we are going to try and use Django. Let&rsquo;s have at it, shall we?</p>
<p>If you don&rsquo;t know what django is (than you are probably not reading this blog entry anyways. ), have a look =&gt; <a href="https://www.djangoproject.com/" target="_blank">Link</a>. It&rsquo;s a Python Web Framework.</p>
<h1 id="in-the-beginning">In the beginning</h1>
<p>So here we are again. I&rsquo;m starting off by creating the skeleton for my RPG. First, the welcome page with a tiny login capability. Which means session tracking. For now, on the same page.</p>
<p>To create the skeleton I just run this little command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="n">django</span><span class="o">-</span><span class="n">admin</span><span class="o">.</span><span class="n">py</span> <span class="n">startproject</span> <span class="n">myrpg</span>
</code></pre></td></tr></table>
</div>
</div><p>Easy enough, right? Basic directory structure is created. You can read that in django&rsquo;s own documentation: <a href="https://docs.djangoproject.com/en/1.8/intro/tutorial01/" target="_blank"><a href="https://docs.djangoproject.com/en/1.8/intro/tutorial01/">https://docs.djangoproject.com/en/1.8/intro/tutorial01/</a></a></p>
<p>I&rsquo;m using Sublime Text 3 to build this app. I was thinking of pycharm, but that would take away too much fun.</p>
<p>By default Django uses SQLlite and I&rsquo;m okay with that.</p>
<p>The basics are there. Let&rsquo;s move to higher ground. The next step can be to design the login page. I&rsquo;m not much of a designer so I&rsquo;ll leave that part to people who care more / understand it better. I&rsquo;m only looking for a simple Login with a username and a password. Nothing fancy. And I&rsquo;m going to use Django&rsquo;s auth system for users: <tt class="xref py py-mod docutils literal"><span class="pre"><a class="reference internal" title="django.contrib.auth: Django's authentication framework." href="https://docs.djangoproject.com/en/1.8/topics/auth/#module-django.contrib.auth" target="_blank">django.contrib.auth</a>.</span></tt></p>
<p>It&rsquo;s pretty good, has lots of features and can auth a user pretty quickly given a username and password, which is all I want for now.</p>
<p>I running a migrate command to create all the necessary tables and data:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">
python manage.py migrate
</code></pre></td></tr></table>
</div>
</div><p>A quick check with sqlite3 and running **.schema **showed me that the tables are indeed created and filled with default data for all the **INSTALLED_APPS **django has at the moment.</p>
<p>I did a quick check with <em>python manage.py runserver</em> and everything seems to work fine.</p>
<h1 id="the-rpg-app">The RPG App</h1>
<h1 id="heading"></h1>
<p>So, that concludes the setup. Following the tutorial, django has this notion of apps and projects. In short, a project is a set of configurations and applications which forms a website. Hence, I&rsquo;m going to create an RPG APP for now. The tutorial continues with a Poll type of App, but I&rsquo;m sure I can apply the same things to a login page.</p>
<p>First, let&rsquo;s create the App using the command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">
python manage.py startapp rpg
</code></pre></td></tr></table>
</div>
</div><p>That creates the skeleton for the app. The tutorial then suggests to define the database first. Which I think is a bad idea; usually when doing design, you don&rsquo;t want to start with the database model. But for now, I shall comply. We want a login page and we are using the auth module, which means, for now, I don&rsquo;t care about the database. Skip.</p>
<p>I&rsquo;m going to go off corse for now, since I only want to create a basic login. For that, I have to read up on views and models a little bit in order to create a simple login page. Be right back.</p>
<p>I&rsquo;m fighting the basic auth system at the moment. Everything seems to be working fine. In the Admin screen I was able to add a basic user to do some debugging, but for now, the login seems to not work with this error:</p>
<p><em>CSRF verification failed. Request aborted</em></p>
<p>This is the CSRF protection which came out with Django. I did a bit of more document reading and setup the CSRF as was described here:</p>
<p><a href="https://docs.djangoproject.com/en/1.8/ref/csrf/" target="_blank"><a href="https://docs.djangoproject.com/en/1.8/ref/csrf/">https://docs.djangoproject.com/en/1.8/ref/csrf/</a></a></p>
<p>However, I&rsquo;m still facing the same problem. Let&rsquo;s research further. Ahh yes. I wasn&rsquo;t returning the request context I&rsquo;ve set up. Before:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python">
<span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render_to_response</span>
<span class="kn">from</span> <span class="nn">django.contrib.auth</span> <span class="kn">import</span> <span class="n">authenticate</span><span class="p">,</span> <span class="n">login</span>
<span class="kn">from</span> <span class="nn">django.template.context_processors</span> <span class="kn">import</span> <span class="n">csrf</span>

<span class="k">def</span> <span class="nf">login_user</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">c</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">c</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">csrf</span><span class="p">(</span><span class="n">request</span><span class="p">))</span>
    <span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;Please log in below...&#34;</span>
    <span class="n">username</span> <span class="o">=</span> <span class="n">password</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">:</span>
        <span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">)</span>
        <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">)</span>

        <span class="n">user</span> <span class="o">=</span> <span class="n">authenticate</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="n">password</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">user</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">is_active</span><span class="p">:</span>
                <span class="n">login</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">user</span><span class="p">)</span>
                <span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;You&#39;re successfully logged in!&#34;</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;Your account is not active, please contact the site admin.&#34;</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;Your username and/or password were incorrect.&#34;</span>

    <span class="k">return</span> <span class="n">render_to_response</span><span class="p">(</span><span class="s1">&#39;auth.html&#39;</span><span class="p">,{</span><span class="s1">&#39;state&#39;</span><span class="p">:</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;username&#39;</span><span class="p">:</span> <span class="n">username</span><span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>After:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render_to_response</span>
<span class="kn">from</span> <span class="nn">django.contrib.auth</span> <span class="kn">import</span> <span class="n">authenticate</span><span class="p">,</span> <span class="n">login</span>
<span class="kn">from</span> <span class="nn">django.template.context_processors</span> <span class="kn">import</span> <span class="n">csrf</span>
<span class="kn">from</span> <span class="nn">django.template</span> <span class="kn">import</span> <span class="n">RequestContext</span>

<span class="k">def</span> <span class="nf">login_user</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;Please log in below...&#34;</span>
    <span class="n">username</span> <span class="o">=</span> <span class="n">password</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">:</span>
        <span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">)</span>
        <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">)</span>

        <span class="n">user</span> <span class="o">=</span> <span class="n">authenticate</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="n">password</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">user</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">is_active</span><span class="p">:</span>
                <span class="n">login</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">user</span><span class="p">)</span>
                <span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;You&#39;re successfully logged in!&#34;</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;Your account is not active, please contact the site admin.&#34;</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;Your username and/or password were incorrect.&#34;</span>

    <span class="k">return</span> <span class="n">render_to_response</span><span class="p">(</span><span class="s1">&#39;auth.html&#39;</span><span class="p">,{</span><span class="s1">&#39;state&#39;</span><span class="p">:</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;username&#39;</span><span class="p">:</span> <span class="n">username</span><span class="p">},</span> <span class="n">context_instance</span><span class="o">=</span><span class="n">RequestContext</span><span class="p">(</span><span class="n">request</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><p>Notice that now I&rsquo;m returning the request context at the end when I&rsquo;m rendering the response. And lo' and behold, my login is now working.</p>
<h1 id="progress-so-far">Progress so far</h1>
<p> </p>
<p>So, I&rsquo;ve set up a user using the Admin portal accessible from the app / admin. Created my default rpg app, and added my default auth view into a template folder. Configured the URL setting in <strong>urls.py</strong> to look like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="n">url</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;^login/$&#39;</span><span class="p">,</span> <span class="s1">&#39;rpg.views.login_user&#39;</span><span class="p">),</span>
</code></pre></td></tr></table>
</div>
</div><p>Very basic for now, but when I return to it, we are going to clean it up and then continue with implementing the main screen which will greet the user and display some stats about his/her character.</p>
<p>The whole code is under github here =&gt; <a href="https://github.com/Skarlso/myrpg" target="_blank"><a href="https://github.com/Skarlso/myrpg">https://github.com/Skarlso/myrpg</a></a></p>
<p>Bye for now,</p>
<p>And thanks for reading.</p>
<p>Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>Small Python GUI to Calculate Lever Distance</title>
      <link>https://skarlso.github.io/2015/04/10/small-python-gui-to-calculate-lever-distance/</link>
      <pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/04/10/small-python-gui-to-calculate-lever-distance/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>Just a small script which calculates your distance from a lever focal point if you know your weight, the object&rsquo;s weight and the object&rsquo;s and the distance the object has from the focal point of the lever.</p>
<p>Like this:</p>
<p>This script will give you D1. And this is how it will look like in doing so:</p>
<p>So, in order for me (77kg) to lift an object of 80kg which is on a, by default, 1 meter long lever, I have to stand back ~1.03meters. Which is totally cool, right?</p>
<p>Here is the code:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python">
<span class="kn">from</span> <span class="nn">Tkinter</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">ttk</span>

<span class="k">def</span> <span class="nf">calculate</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">your_weight_value</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">your_weight</span><span class="o">.</span><span class="n">get</span><span class="p">())</span>
        <span class="n">object_weight_value</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">object_weight</span><span class="o">.</span><span class="n">get</span><span class="p">())</span>
        <span class="n">object_distance_value</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">object_distance</span><span class="o">.</span><span class="n">get</span><span class="p">())</span>
        <span class="n">your_distance</span><span class="o">.</span><span class="n">set</span><span class="p">((</span><span class="n">object_weight_value</span> <span class="o">*</span> <span class="n">object_distance_value</span><span class="p">)</span> <span class="o">/</span> <span class="n">your_weight_value</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
        <span class="k">pass</span>

<span class="n">root</span> <span class="o">=</span> <span class="n">Tk</span><span class="p">()</span>
<span class="n">root</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s2">&#34;Lever distance counter&#34;</span><span class="p">)</span>

<span class="n">mainframe</span> <span class="o">=</span> <span class="n">ttk</span><span class="o">.</span><span class="n">Frame</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s2">&#34;4 4 12 12&#34;</span><span class="p">)</span>
<span class="n">mainframe</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">W</span><span class="p">,</span> <span class="n">E</span><span class="p">,</span> <span class="n">S</span><span class="p">))</span>
<span class="n">mainframe</span><span class="o">.</span><span class="n">columnconfigure</span><span class="p">(,</span> <span class="n">weight</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">mainframe</span><span class="o">.</span><span class="n">rowconfigure</span><span class="p">(,</span> <span class="n">weight</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">your_weight</span> <span class="o">=</span> <span class="n">StringVar</span><span class="p">()</span>
<span class="n">object_weight</span> <span class="o">=</span> <span class="n">StringVar</span><span class="p">()</span>
<span class="n">object_distance</span> <span class="o">=</span> <span class="n">StringVar</span><span class="p">()</span>
<span class="n">your_distance</span> <span class="o">=</span> <span class="n">StringVar</span><span class="p">()</span>

<span class="n">object_distance</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>

<span class="n">your_weight_entry</span> <span class="o">=</span> <span class="n">ttk</span><span class="o">.</span><span class="n">Entry</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">7</span><span class="p">,</span> <span class="n">textvariable</span><span class="o">=</span><span class="n">your_weight</span><span class="p">)</span>
<span class="n">your_weight_entry</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="p">(</span><span class="n">W</span><span class="p">,</span> <span class="n">E</span><span class="p">))</span>
<span class="n">object_weight_entry</span> <span class="o">=</span> <span class="n">ttk</span><span class="o">.</span><span class="n">Entry</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">7</span><span class="p">,</span> <span class="n">textvariable</span><span class="o">=</span><span class="n">object_weight</span><span class="p">)</span>
<span class="n">object_weight_entry</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="p">(</span><span class="n">W</span><span class="p">,</span> <span class="n">E</span><span class="p">))</span>
<span class="n">object_distance_entry</span> <span class="o">=</span> <span class="n">ttk</span><span class="o">.</span><span class="n">Entry</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">7</span><span class="p">,</span> <span class="n">textvariable</span><span class="o">=</span><span class="n">object_distance</span><span class="p">)</span>
<span class="n">object_distance_entry</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="p">(</span><span class="n">W</span><span class="p">,</span> <span class="n">E</span><span class="p">))</span>


<span class="n">ttk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">textvariable</span><span class="o">=</span><span class="n">your_distance</span><span class="p">)</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="p">(</span><span class="n">W</span><span class="p">,</span> <span class="n">E</span><span class="p">))</span>
<span class="n">ttk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s2">&#34;Your weight&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">W</span><span class="p">)</span>
<span class="n">ttk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s2">&#34;Object weight&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">W</span><span class="p">)</span>
<span class="n">ttk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s2">&#34;Object Distance&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">W</span><span class="p">)</span>
<span class="n">ttk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s2">&#34;Your Distance&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">W</span><span class="p">)</span>

<span class="n">ttk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s2">&#34;kg&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">W</span><span class="p">)</span>
<span class="n">ttk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s2">&#34;kg&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">W</span><span class="p">)</span>
<span class="n">ttk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s2">&#34;m&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">W</span><span class="p">)</span>
<span class="n">ttk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s2">&#34;m&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">W</span><span class="p">)</span>

<span class="n">ttk</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s2">&#34;Calculate&#34;</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">calculate</span><span class="p">)</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">W</span><span class="p">)</span>

<span class="k">for</span> <span class="n">child</span> <span class="ow">in</span> <span class="n">mainframe</span><span class="o">.</span><span class="n">winfo_children</span><span class="p">():</span> <span class="n">child</span><span class="o">.</span><span class="n">grid_configure</span><span class="p">(</span><span class="n">padx</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>

<span class="n">your_weight_entry</span><span class="o">.</span><span class="n">focus</span><span class="p">()</span>
<span class="n">root</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">calculate</span><span class="p">)</span>

<span class="n">root</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>Please enjoy, and feel free to alter in any way. I&rsquo;m using Tkinter and a grid layout which I find very easy to work with.</p>
<p>Thanks for reading,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Python and my Math commitment</title>
      <link>https://skarlso.github.io/2015/03/15/python-and-my-math-commitment/</link>
      <pubDate>Sun, 15 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/03/15/python-and-my-math-commitment/</guid>
      <description><![CDATA[<p>Let&rsquo;s talk about plans. It&rsquo;s good to have one. For example, I have a plan for this year.</p>
<p>I kind of like math. So, I have this book:</p>
<p>It&rsquo;s 1400 pages long and basically, has everything in it. It&rsquo;s a rather exhaustive book. Hence, my plan is to finish the book by the end of 2015 and write a couple of python scripts that calculate something interesting.</p>
<p>(2021 Hindsight): Yeah, I didn&rsquo;t manage this&hellip; But it&rsquo;s a cool idea, let&rsquo;s see if I can get around coming further. I managed to get until 500 pages or so, before life stepped in.</p>
<p>For example, Newton&rsquo;s law of cooling how I learned it is:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">k*log(2.5)*((t(0)-k)/(t-k))
</code></pre></td></tr></table>
</div>
</div><p>Where k =&gt; a material&rsquo;s surface based constant. T(0) =&gt; initial temperature. T =&gt; target temperature. K =&gt; Environment&rsquo;s temperature.</p>
<p>A simple python script for this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python">
<span class="c1"># Calculating Newton&#39;s law of Cooling</span>
<span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">division</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">log</span>

<span class="k">def</span> <span class="nf">calculation</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">Tz</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">K</span><span class="p">):</span>
	<span class="n">res</span> <span class="o">=</span> <span class="p">(</span><span class="n">Tz</span> <span class="o">-</span> <span class="n">K</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">T</span> <span class="o">-</span> <span class="n">K</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">k</span> <span class="o">*</span> <span class="p">(</span><span class="n">log</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="mf">2.5</span><span class="p">))</span>

<span class="n">k</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">Tz</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
<span class="n">T</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
<span class="n">K</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>

<span class="k">print</span><span class="p">(</span><span class="s2">&#34;Calculating aproximate temperature for given parameters: k=</span><span class="si">%s</span><span class="s2">, Tz=</span><span class="si">%s</span><span class="s2">C, T=</span><span class="si">%s</span><span class="s2">C, K=</span><span class="si">%s</span><span class="s2">C&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">Tz</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">K</span><span class="p">))</span>

<span class="k">print</span><span class="p">(</span><span class="n">calculation</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="n">k</span><span class="p">),</span> <span class="nb">float</span><span class="p">(</span><span class="n">Tz</span><span class="p">),</span> <span class="nb">float</span><span class="p">(</span><span class="n">T</span><span class="p">),</span> <span class="nb">float</span><span class="p">(</span><span class="n">K</span><span class="p">)))</span>
</code></pre></td></tr></table>
</div>
</div><p>Enjoy.</p>
<p>And as always,
Thanks for reading!</p>
]]></description>
    </item>
    
    <item>
      <title>Sphere Judge Online – Python Kivy Android app – Part 2</title>
      <link>https://skarlso.github.io/2015/03/02/sphere-judge-online-python-kivy-android-app-part-2/</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/03/02/sphere-judge-online-python-kivy-android-app-part-2/</guid>
      <description><![CDATA[<p>Here we are again. I will attempt to further this little journey of mine into the land of Android and Python.</p>
<p>This is the second part of the advanture you can read the first one a little bit back.</p>
<h1 id="the-script">The Script</h1>
<p>We left off at a point where I successfully configured my environment and compiled my first hello world APK. At that point it took a little bit fiddling to get it to work on my phone.</p>
<p>Now, I have progressed a little bit into spoj&rsquo;s page parsing. The code so far is as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python">
<span class="n">__author__</span> <span class="o">=</span> <span class="s1">&#39;hannibal&#39;</span>

<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">randint</span>
<span class="kn">import</span> <span class="nn">lxml.html</span> <span class="kn">as</span> <span class="nn">lh</span>

<span class="n">random_page_number</span> <span class="o">=</span> <span class="n">randint</span><span class="p">(,</span> <span class="mi">63</span><span class="p">)</span> <span class="c1"># 63 being the maximum page number at spoj</span>
<span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;http://www.spoj.com/problems/classical/sort=0,start=</span><span class="si">%d</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="n">random_page_number</span> <span class="o">*</span> <span class="mi">50</span> <span class="o">-</span> <span class="mi">50</span><span class="p">))</span>
<span class="c1"># Problem Div XPath =&gt; //[@class=&#34;problems&#34;]</span>

<span class="n">spoj_page</span> <span class="o">=</span> <span class="n">lh</span><span class="o">.</span><span class="n">document_fromstring</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
<span class="n">links_to_problems</span> <span class="o">=</span> <span class="n">spoj_page</span><span class="p">[]</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s2">&#34;//tr[@class=&#39;problemrow&#39;]/td[2]/a&#34;</span><span class="p">)</span>

<span class="n">current_link</span> <span class="o">=</span> <span class="n">links_to_problems</span><span class="p">[</span><span class="n">randint</span><span class="p">(,</span> <span class="nb">len</span><span class="p">(</span><span class="n">links_to_problems</span><span class="p">))]</span>
<span class="k">print</span><span class="p">(</span><span class="n">current_link</span><span class="o">.</span><span class="n">attrib</span><span class="p">[</span><span class="s1">&#39;href&#39;</span><span class="p">])</span>
<span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;http://www.spoj.com/</span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">current_link</span><span class="o">.</span><span class="n">attrib</span><span class="p">[</span><span class="s1">&#39;href&#39;</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&#34;utf-8&#34;</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><p>This is pretty straight forward so far. It gets the problems page, loads in all of the links and prints it out.</p>
<p>My goal is an application which looks something like this:</p>
<p>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>___</p>
<p>|   _<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>  |</p>
<p>|  |                                                                           | |</p>
<p>|  |                                                                           | |</p>
<p>|  |                    Display Problem Description               | |</p>
<p>|  |                                                                           | |</p>
<p>|  |                                                                           | |</p>
<p>|  |                                                                           | |</p>
<p>|  |_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_____ | |</p>
<p>|                                                                                 |</p>
<p>|                                                                                 |</p>
<p>|                         Button:Finish Problem                        |</p>
<p>|                                                                                 |</p>
<p>|                         Button:Next Problem                          |</p>
<p>|_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>________ |</p>
<p>It&rsquo;s very basic. When it loads up, it will gather and display a new problem. You have two options, either get a new one, or save / finish this item, saying you never want to see it again.</p>
<p>Let&rsquo;s put the first part into an android app. Just gather data, and get it disaplyed.</p>
<p>*Queue a days worth of hacking and frustrated cussing.*</p>
<p>So, turns out it&rsquo;s not as easy as I would have liked it to be. I ran into some pretty nasty problems. Some of them I&rsquo;ll write down below for the record, and an attempted solution as well.</p>
<h1 id="problems">Problems</h1>
<p><strong>#1:</strong> <strong>Problem:</strong> Libraries. I&rsquo;m using lxml and requests. Requests is a pure python library, but lxml is partially C. Which apparently is not very well supported yet.</p>
<p><strong>Solution (Partial):</strong> I could optain request by two ways, but the most simple one, was basically just building my distribution with the optional requests module like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">
./distribute.sh -m &#34;openssl pil requests kivy&#34;
</code></pre></td></tr></table>
</div>
</div><p>Attempting to do the same with LXML resulted in a compile issue which I tracked down to something like: &ldquo;sorry, but we don&rsquo;t support OSX&rdquo;. But it&rsquo;s okay. There are other ways to parse an html page, I just really like the xpath filter. So I soldiered on with trying to get something to work at least.</p>
<p><strong>#3: Problem:</strong> <em>Bogus compile time exception.</em> There were some exceptions on the way when I was trying to compile with buildozer. <strong>Solution:</strong> It&rsquo;s interesting because previously my solution to another compile time issue was to use a specific version of Cython. But this time the solution was to actually remove that version and install the latest one. Which is 0.22 as of the time of this writing. So:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">
sudo pip update cython
</code></pre></td></tr></table>
</div>
</div><p><strong>#2: Problem:</strong> Connection. So now, I&rsquo;m down to the bare bone. At this point, I just want to see a page source in a label. My code looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python">
<span class="kn">import</span> <span class="nn">kivy</span>
<span class="n">kivy</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="s1">&#39;1.8.0&#39;</span><span class="p">)</span>
<span class="kn">from</span> <span class="nn">kivy.lang</span> <span class="kn">import</span> <span class="n">Builder</span>
<span class="kn">from</span> <span class="nn">kivy.uix.gridlayout</span> <span class="kn">import</span> <span class="n">GridLayout</span>
<span class="kn">from</span> <span class="nn">kivy.properties</span> <span class="kn">import</span> <span class="n">NumericProperty</span>
<span class="kn">from</span> <span class="nn">kivy.app</span> <span class="kn">import</span> <span class="n">App</span>

<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">randint</span>
<span class="c1"># import lxml.html as lh</span>

<span class="c1"># import sys</span>
<span class="c1"># sys.path.append(&#39;/sdcard/com.googlecode.pythonforandroid/extras/python/site-packages&#39;)</span>


<span class="n">Builder</span><span class="o">.</span><span class="n">load_string</span><span class="p">(</span><span class="s1">&#39;&#39;&#39;
</span><span class="s1">:
</span><span class="s1">    cols: 1
</span><span class="s1">    Label:
</span><span class="s1">        text: root.get_problem()
</span><span class="s1">    Button:
</span><span class="s1">        text: &#39;Click me! </span><span class="si">%d</span><span class="s1">&#39; </span><span class="si">% r</span><span class="s1">oot.counter
</span><span class="s1">        on_release: root.my_callback()
</span><span class="s1">&#39;&#39;&#39;</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">SpojAppScreen</span><span class="p">(</span><span class="n">GridLayout</span><span class="p">):</span>
    <span class="n">counter</span> <span class="o">=</span> <span class="n">NumericProperty</span><span class="p">()</span>
    <span class="k">def</span> <span class="nf">my_callback</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span> <span class="s1">&#39;The button has been pushed&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">def</span> <span class="nf">get_problem</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">random_page_number</span> <span class="o">=</span> <span class="n">randint</span><span class="p">(,</span> <span class="mi">63</span><span class="p">)</span> <span class="c1"># 63 being the maximum page number at spoj</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;http://www.spoj.com/problems/classical/sort=0,start=</span><span class="si">%d</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="n">random_page_number</span> <span class="o">*</span> <span class="mi">50</span> <span class="o">-</span> <span class="mi">50</span><span class="p">))</span>

        <span class="c1"># Problem Div XPath =&gt; //[@class=&#34;problems&#34;]</span>

        <span class="c1"># spoj_page = lh.document_fromstring(r.text)</span>
        <span class="c1"># links_to_problems = spoj_page[0].xpath(&#34;//tr[@class=&#39;problemrow&#39;]/td[2]/a&#34;)</span>

        <span class="c1"># current_link = links_to_problems[randint(0, len(links_to_problems))]</span>
        <span class="c1"># print(current_link.attrib[&#39;href&#39;])</span>
        <span class="c1"># r = requests.get(&#34;http://www.spoj.com/%s&#34; % current_link.attrib[&#39;href&#39;])</span>
        <span class="c1"># print(r.text.encode(&#34;utf-8&#34;))</span>
        <span class="k">return</span> <span class="n">r</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">SpojApp</span><span class="p">(</span><span class="n">App</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">SpojAppScreen</span><span class="p">()</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">SpojApp</span><span class="p">()</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>However, running this results in a connection error in adb logcat:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">
I/python  (27610):  kivy.lang.BuilderException: Parser: File &#34;&#34;, line 5:
I/python  (27610):  ...
I/python  (27610):        3:    cols: 1
I/python  (27610):        4:    Label:
I/python  (27610):  &amp;gt;&amp;gt;    5:        text: root.get_problem()
I/python  (27610):        6:    Button:
I/python  (27610):        7:        text: &#39;Click me! %d&#39; % root.counter
I/python  (27610):  ...
I/python  (27610):  BuilderException: Parser: File &#34;&#34;, line 5:
I/python  (27610):  ...
I/python  (27610):        3:    cols: 1
I/python  (27610):        4:    Label:
I/python  (27610):  &amp;gt;&amp;gt;    5:        text: root.get_problem()
I/python  (27610):        6:    Button:
I/python  (27610):        7:        text: &#39;Click me! %d&#39; % root.counter
I/python  (27610):  ...
I/python  (27610):  ConnectionError: (&#39;Connection aborted.&#39;, gaierror(4, &#39;non-recoverable failure in name resolution.&#39;))
</code></pre></td></tr></table>
</div>
</div><p><strong>Solution:</strong> I tried simply putting out a random number at some point, which actullay worked, so I know it&rsquo;s the connection. I&rsquo;m guessing I need permission to access the network. Which would be this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">
uses-permission android:name=&#34;android.permission.INTERNET&#34;
</code></pre></td></tr></table>
</div>
</div><p>And yes! Building and installing it with this additional permission got me so far as I can display the web page&rsquo;s content in a label.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">
<span class="p">.</span><span class="o">/</span><span class="nx">build</span><span class="p">.</span><span class="nx">py</span> <span class="o">--</span><span class="kn">package</span> <span class="nx">org</span><span class="p">.</span><span class="nx">spoj</span> <span class="o">--</span><span class="nx">permission</span> <span class="nx">INTERNET</span> <span class="o">--</span><span class="nx">name</span> <span class="s">&#34;Spoj&#34;</span> <span class="o">--</span><span class="nx">version</span> <span class="mf">1.0</span> <span class="o">--</span><span class="nx">dir</span> <span class="o">/</span><span class="nx">Users</span><span class="o">/</span><span class="nx">hannibal</span><span class="o">/</span><span class="nx">PythonProjects</span><span class="o">/</span><span class="nx">spoj</span><span class="o">/</span> <span class="nx">debug</span>
</code></pre></td></tr></table>
</div>
</div><p>There is a saying that you should end on a high note, so that is what I&rsquo;m going to do here right now. Join me next time, when I&rsquo;ll try to replace lxml with something else.</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Sphere Judge Online – Python Kivy Android app</title>
      <link>https://skarlso.github.io/2015/02/26/sphere-judge-online-python-kivy-android-app/</link>
      <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/02/26/sphere-judge-online-python-kivy-android-app/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>Today I would like to take you on a journey I fought myself through in order to write a python android app, which gets you a random problem from <a href="http://www.spoj.com/problems/classical/" target="_blank">Sphere Judge Online</a>. Then you can mark it as solved and it will be stored as such, and you can move on to the next problem. With the words of Neil deGrasse Tyson, Come with Me!</p>
<h1 id="beginnings">Beginnings</h1>
<p>When I first embarked on this endeavour I ran into numerous errors, many amongst them being compilation issues when I was trying to install libraries.</p>
<p>I started to write down all of these, and then started fresh on a new machine. I realised that ALL of my problems where only because of **ONE **thing. One thing, which I wanted to do, but it ended up being the death of me. And that is.. *Drummrolls* **Python 3. **I tried doing all the things that I started to do, with Python 3. Turns out, that neither libraries are supporting it very well yet. And that&rsquo;s including Cython as well, which I thought would be up to speed by now. But sadly, it&rsquo;s not.</p>
<h1 id="prerequisite">Prerequisite</h1>
<p>In order to go any further we need a few things first. For this to work, you&rsquo;ll have to perform these things in order as I found out later. And certain versions of certain libraries are required instead of the latest ones.</p>
<p>Depending on the environment you are using, you need to install python-dev and some other graphic libraries. I followed this and that was fine. Latest packages are working alright.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo apt-get install build-essential patch git-core ccache ant python-pip python-dev
sudo apt-get install ia32-libs  libc6-dev-i386
sudo apt-get install lib32stdc++6 lib32z1
</code></pre></td></tr></table>
</div>
</div><p>Only install these if you are absolutely certain you need them.</p>
<p>Clone python-android from git into a nice and cosy directory.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">git clone https://github.com/kivy/python-for-android.git
</code></pre></td></tr></table>
</div>
</div><p>While this is underway, for python-android you also need <a href="http://developer.android.com/sdk/index.html#Other" target="_blank">android-sdk</a> and <a href="https://developer.android.com/tools/sdk/ndk/index.html" target="_blank">android-ndk</a>. Select the ones which are for your environment. The NDK is needed in order to build the APK out of our python code later on.</p>
<p>After you are done, run ./android and install tools, APIs and other things you want. Make sure you have these set up:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">export ANDROIDSDK=/path/to/android-sdk
export ANDROIDNDK=/path/to/android-ndk
export ANDROIDNDKVER=rX
export ANDROIDAPI=X
export PATH=$ANDROIDNDK:$ANDROIDSDK/platform-tools:$ANDROIDSDK/tools:$PATH
</code></pre></td></tr></table>
</div>
</div><p>The API version needs to be the one which you installed on your machine.</p>
<p>Now, we have to get a specific version of Cython. In order to do that, execute the following command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo pip install -I https://pypi.python.org/packages/source/C/Cython/Cython-0.20.1.tar.gz
</code></pre></td></tr></table>
</div>
</div><p>Source your new .bash_profile file if you haven&rsquo;t done so already.</p>
<p>At this point we are ready to install Kivy. Please follow the instructions for your environment on the respective page from Kivy&rsquo;s documentation:</p>
<p><a href="http://kivy.org/docs/installation/installation.html" target="_blank"><a href="http://kivy.org/docs/installation/installation.html">http://kivy.org/docs/installation/installation.html</a></a></p>
<p><strong>Note</strong>: For Mac users. In addition, before doing the kivy stuff, and if you would like to execute kivy applications on your mac, you need to install pygame.</p>
<p>It&rsquo;s a bit of a hassle but you only need to perform these commands:</p>
<p>Install Quartz =&gt; <a href="http://xquartz.macosforge.org/landing/" target="_blank"><a href="http://xquartz.macosforge.org/landing/">http://xquartz.macosforge.org/landing/</a></a></p>
<p>Install Homebrew =&gt; <span style="color: #ff9900;">ruby -e &ldquo;$(curl -fsSL <a href="https://raw.github.com/Homebrew/homebrew/go/install)%22">https://raw.github.com/Homebrew/homebrew/go/install)&quot;</a></span></p>
<p>Install some other packages =&gt; <span style="color: #ff9900;">brew install hg sdl sdl_image sdl_mixer sdl_ttf portmidi</span></p>
<p>Install pygame =&gt; <span style="color: #ff9900;">pip install hg+http://bitbucket.org/pygame/pygame</span></p>
<p>Once this finishes, you should be good to go for the final command in the prerequisites. Go to your cloned python-android folder and run this (make sure you have ANT installed):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">./distribute.sh -m &#34;openssl pil kivy&#34;
</code></pre></td></tr></table>
</div>
</div><p>Now we are ready for some coding.</p>
<h1 id="implementation">Implementation</h1>
<p>So, finally after our environment is all setup, we can move on to write some python code. Let&rsquo;s start with a simple hello world application:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">kivy</span>
<span class="n">kivy</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="s1">&#39;1.8.0&#39;</span><span class="p">)</span> <span class="c1"># 1.8.0 is the latest kivy version</span>
<span class="kn">from</span> <span class="nn">kivy.lang</span> <span class="kn">import</span> <span class="n">Builder</span>
<span class="kn">from</span> <span class="nn">kivy.uix.gridlayout</span> <span class="kn">import</span> <span class="n">GridLayout</span>
<span class="kn">from</span> <span class="nn">kivy.properties</span> <span class="kn">import</span> <span class="n">NumericProperty</span>
<span class="kn">from</span> <span class="nn">kivy.app</span> <span class="kn">import</span> <span class="n">App</span>

<span class="n">Builder</span><span class="o">.</span><span class="n">load_string</span><span class="p">(</span><span class="s1">&#39;&#39;&#39;
</span><span class="s1">:
</span><span class="s1">    cols: 1
</span><span class="s1">    Label:
</span><span class="s1">        text: &#39;Welcome to the Hello world&#39;
</span><span class="s1">    Button:
</span><span class="s1">        text: &#39;Click me! </span><span class="si">%d</span><span class="s1">&#39; </span><span class="si">% r</span><span class="s1">oot.counter
</span><span class="s1">        on_release: root.my_callback()
</span><span class="s1">&#39;&#39;&#39;</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">HelloWorldScreen</span><span class="p">(</span><span class="n">GridLayout</span><span class="p">):</span>
    <span class="n">counter</span> <span class="o">=</span> <span class="n">NumericProperty</span><span class="p">()</span>
    <span class="k">def</span> <span class="nf">my_callback</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span> <span class="s1">&#39;The button has been pushed&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">class</span> <span class="nc">HelloWorldApp</span><span class="p">(</span><span class="n">App</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">HelloWorldScreen</span><span class="p">()</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">HelloWorldApp</span><span class="p">()</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>This is a simple Hello World python-android app. Save this into a file called <span style="color: #ff9900;">main.py</span>. Main.py is used to execute the app on your phone. It&rsquo;s your entry point. Whatever app you are writing, this has to be where it will begin.</p>
<p>In order to get this installed on our device, we will use python-android&rsquo;s distribution.sh. The command to run after you changed directory into python-android is this (make sure that you have a compatible android device plugged in and in developer mode):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">
<span class="p">.</span><span class="o">/</span><span class="nx">build</span><span class="p">.</span><span class="nx">py</span> <span class="o">--</span><span class="kn">package</span> <span class="nx">org</span><span class="p">.</span><span class="nx">hello</span><span class="p">.</span><span class="nx">world</span> <span class="o">--</span><span class="nx">name</span> <span class="s">&#34;Hello world&#34;</span> <span class="o">--</span><span class="nx">version</span> <span class="mf">1.0</span> <span class="o">--</span><span class="nx">dir</span> <span class="o">/</span><span class="nx">PATH</span><span class="o">/</span><span class="nx">TO</span><span class="o">/</span><span class="nx">helloworld</span> <span class="nx">debug</span> <span class="nx">installd</span>
</code></pre></td></tr></table>
</div>
</div><p>Upon success, you should see it on your device. This is how the hello world app looks like:</p>
<h1 id="finishing-up">Finishing up</h1>
<p>This has been quite the ride so far. We will continue our journey when I&rsquo;ll start writing my own app for SPOJ.</p>
<p>Thanks for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Why Lock Picking is like Testing</title>
      <link>https://skarlso.github.io/2015/02/08/why-lock-picking-is-like-testing/</link>
      <pubDate>Sun, 08 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/02/08/why-lock-picking-is-like-testing/</guid>
      <description><![CDATA[<p> </p>
<p>Not a great many people know that I&rsquo;m actually into Lock Picking as a hobby. This will not be a tutorial on how to do it, or I won&rsquo;t really talk about how I do it; I would like to write about something completely different. So if you came here for that, here are a few very good resources:</p>
<p><a href="http://www.lockpicking101.com/%20" target="_blank"><a href="http://www.lockpicking101.com/">http://www.lockpicking101.com/</a> </a>- Tutorials</p>
<p><a href="http://www.ukbumpkeys.com/collections/lock-picking" target="_blank"><a href="http://www.ukbumpkeys.com/collections/lock-picking">http://www.ukbumpkeys.com/collections/lock-picking</a></a> - Tools ( UK )</p>
<p><a href="http://www.reddit.com/r/lockpicking/" target="_blank"><a href="http://www.reddit.com/r/lockpicking/">http://www.reddit.com/r/lockpicking/</a></a> - Reddit</p>
<p>For my post, click on.</p>
<p>So, why is lock picking like testing? I saw a great many posts which where trying to compare software testing to some activity. I even knew somebody who compared it to dancing. Because.? I don&rsquo;t know, maybe he was trying out a talk material maybe? And he said - &ldquo;I was in this club and watched a couple dance, and I was thinking, wow, this is like software testing.&rdquo; - I couldn&rsquo;t really react to that. But hey, kudos for out of the box thinking I guess.</p>
<p>But let&rsquo;s see some of the similarities in picking and testing:</p>
<h4 id="thinking">Thinking</h4>
<p>It requires logical, critical thinking. It&rsquo;s a puzzle that you have to solve. A puzzle which you basically solve by testing out solutions and see if they work. You can achieve this by trial and error, something testers face on a daily basis. After awhile you acquire something called finesse. Which will help you identify breaking points more easily. Since you have experience with a certain lock type, you already have a wast knowledge to rely on when you are trying to solve a new lock with the same build. You did your research you know its weaknesses hence you immediately have an attack vector on your hand.</p>
<h4 id="tools">Tools</h4>
<p>Lock picking has a wast number of tools. Each tool is design for a specific purpose. You can reuse tools but they are rarely a fit for other locks. Unless it&rsquo;s a similar one. There are delicate tools and then there are brute force tools, which are very hard to use at first but after you get used to it and know how to handle it, it becomes massively helpful. You can build your own tools or use tools that are built for you by tool experts.</p>
<h4 id="solving-process">Solving Process</h4>
<p>When can you test an application to its fullest extend and capabilities? How can you achieve the most and best testing ever possible? You have to know how the application works. You have to know its components, its abilities, its capabilities and **limits. **For Lock Picking to be the best at what you do and to be able to move to a completely new lock and try to pick it, you have to know its flaws. You have to know when, and how it was built. You have to know what makes it tick, how it works, what it uses, how the inside mechanics look like in order to try to exploit them.</p>
<p>After you acquire this knowledge you will be able to build, or purchase a tool which will help you in solving the puzzle. But you were only able to do that because after you researched its manufacturing procedure you know that the last pin is hard to get to and that it has an anti drilling shield, so drilling is out of the question, and that it has a safety spring which locks the lock permanently upon tampering. If you would not be in the possession of this information you could have made a fatal error and could have made the client lost money ( since at that point they pretty much need to break down the door, unless the key is found again ( assuming the picking took place because the key was lost ) ).</p>
<h4 id="last-words">Last Words</h4>
<p>There you have it folks. That&rsquo;s why Lock Picking is like software testing. Knowing structure, inside workings and the proper tools will help to achieve your goal. Just like in testing when you know your field, you know what to use, when, and how. <strong>Knowledge</strong> makes you the Best.</p>
<p>Good luck,</p>
<p>Happy Picking,</p>
<p>Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>Building an RPG App with Meteor – Part One – The struggle</title>
      <link>https://skarlso.github.io/2015/02/01/building-an-rpg-app-with-meteor-part-one-the-struggle/</link>
      <pubDate>Sun, 01 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/02/01/building-an-rpg-app-with-meteor-part-one-the-struggle/</guid>
      <description><![CDATA[<p>In my previous post, I was getting ready to enjoy some time with the JavaScript web framework Meteor.</p>
<p>This time I would like to bring it to a bit of overdrive. See, how re-factoring works on a larger scale model with multiple pages. And how it can organize assets, such as, images, multiple CSS, some plugins, you know, ordinary web stuff.</p>
<p>Let&rsquo;s dive in.</p>
<p>I&rsquo;m planning this to be a series of posts as I&rsquo;m going along building up my RPG app. Let&rsquo;s define the rules.</p>
<h1 id="in-the-beginning">In the beginning</h1>
<h3 id="heading"></h3>
<h3 id="rules">Rules</h3>
<p> </p>
<h4 id="inventory">Inventory</h4>
<p> </p>
<p>Our main character will have a basic inventory. He will have space to carry stuff around and a body to put stuff on. One ring on each hand, one weapon in each hand, helmet, armour, legs, and a necklace. That&rsquo;s it. For simplicities sake. The game mechanics will be like those old books which you could play, Fighting RPG Books, like the one Ian Livingstone was writing. This is one of my favourites; Robot commando:</p>
<h4 id="stats">Stats</h4>
<p>A very basic stat system.</p>
<ul>
<li>Strength</li>
<li>Agility</li>
<li>Constitution</li>
<li>Intelligence</li>
<li>Magic</li>
</ul>
<p> </p>
<h4 id="fighting">Fighting</h4>
<p> </p>
<p>A very basic fighting system with the possibility of casting magic which, for simplicity, will count as attacks and can be dodged based on agility.</p>
<p>Let&rsquo;s say we have dice throwing with a couple of 6 sided ones. So X * 6 sided dice. Dodging will require agility, HP is defined by constitution, Intelligence will help in puzzles which require a throw against intelligence, Magic will define Mana Points.</p>
<p>Simple, right?</p>
<h3 id="design">Design</h3>
<p>I&rsquo;m not much of a front-end developer, so I don&rsquo;t really care about how it will look like. I&rsquo;ll try to squeeze in some very basic stuff, like ordering, but that&rsquo;s it.</p>
<h3 id="game-play">Game Play</h3>
<p> </p>
<p>Basically there will be a story which can be loaded threw a JSON structured file. The file will hold information about what a current page has. The probable things a page can contain at any given time:</p>
<ul>
<li>Current location description</li>
<li>Selectable proceed location ( page number )</li>
<li>Enemy -&gt; Fight ( Might contain an option to not to attack the beast )</li>
<li>Riddle -&gt; Solving it is determined by a throw against intelligence</li>
<li>Trap -&gt; Springing it is determined by a throw against agility</li>
<li>Lootable items</li>
<li>Death</li>
</ul>
<p>All of the above define an action that a player can, or HAS to take. If there is no ability to choose the player has to proceed as the page requests it. That might be easier to do if I just say if there is only one possible choose it&rsquo;s choosen automatically for you.</p>
<h1 id="implementation">Implementation</h1>
<p> </p>
<p>I&rsquo;ll be using Meteor which is based on Node and MongoDB. Hence, my stuff will be in mongoDB. I have a fair knowledge of how mongodb works, I&rsquo;ll write down my progress as I go along.</p>
<p>Everything I&rsquo;ll do is of course under version control and can be followed here:</p>
<p><a href="https://github.com/Skarlso/coolrpgapp" target="_blank"><a href="https://github.com/Skarlso/coolrpgapp">https://github.com/Skarlso/coolrpgapp</a></a></p>
<h4 id="character">Character</h4>
<p> </p>
<p>I need to be able to create a character with a name. Meaning, I need to figure out how meteor handles input. I already know that it uses templates and <a href="https://github.com/meteor/meteor/blob/devel/packages/spacebars/README.md" target="_blank">Spacebars Compiler</a>. So what I want at this point is to enter a username and then click a button which will direct me to the story page. Simple, right.?</p>
<p>For data handling we will use Meteor&rsquo;s <a href="https://www.meteor.com/try/3" target="_blank">Collections</a>.</p>
<p>Using a form to submit the username looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript">
<span class="nx">Usernames</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Mongo</span><span class="p">.</span><span class="nx">Collection</span><span class="p">(</span><span class="s2">&#34;usernames&#34;</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">Meteor</span><span class="p">.</span><span class="nx">isClient</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">Template</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">events</span><span class="p">({</span>
    <span class="s2">&#34;submit .new-user&#34;</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// This function is called when the new task form is submitted
</span><span class="c1"></span>
      <span class="kd">var</span> <span class="nx">username</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">username</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>

      <span class="nx">Usernames</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span>
        <span class="nx">username</span><span class="o">:</span> <span class="nx">username</span><span class="p">,</span>
        <span class="nx">createdAt</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span> <span class="c1">// current time
</span><span class="c1"></span>      <span class="p">});</span>

      <span class="c1">// Clear form
</span><span class="c1"></span>      <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">username</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="p">;</span>

      <span class="c1">// Prevent default form submit
</span><span class="c1"></span>      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">Meteor</span><span class="p">.</span><span class="nx">isServer</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">Meteor</span><span class="p">.</span><span class="nx">startup</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// code to run on server at startup
</span><span class="c1"></span>  <span class="p">});</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Of course there is no way to know if that actually succeeded so far unless I get a look at the DB. Navigate to the folder of your app and type in:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">meteor mongo
</code></pre></td></tr></table>
</div>
</div><p>This will open a console to your database where you can query it like you would normally do with a mongodb console. Hence for me it&rsquo;s:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">
db.usernames.find<span class="o">()</span> <span class="c1"># which return this -&gt;</span>
meteor:PRIMARY&gt;<span class="p">;</span> db.usernames.find<span class="o">()</span>
<span class="o">{</span> <span class="s2">&#34;username&#34;</span> : <span class="s2">&#34;olaf&#34;</span>, <span class="s2">&#34;createdAt&#34;</span> : ISODate<span class="o">(</span><span class="s2">&#34;2015-02-01T16:58:24.100Z&#34;</span><span class="o">)</span>, <span class="s2">&#34;_id&#34;</span> : <span class="s2">&#34;MS67d95ShFkc3yHiX&#34;</span> <span class="o">}</span>
<span class="o">{</span> <span class="s2">&#34;username&#34;</span> : <span class="s2">&#34;skarlso&#34;</span>, <span class="s2">&#34;createdAt&#34;</span> : ISODate<span class="o">(</span><span class="s2">&#34;2015-02-01T16:59:18.792Z&#34;</span><span class="o">)</span>, <span class="s2">&#34;_id&#34;</span> : <span class="s2">&#34;ig8DJngmGKLca2dqS&#34;</span> <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>As you can see, I already have two characters in the system. This is so far very easy but it does not redirect me to a new page displaying the beginning of my journey. Let&rsquo;s try a redirect.</p>
<h1 id="complications">Complications</h1>
<p>Turns out it&rsquo;s not that easy to get a redirect going. If I would be a beginner at this, I would give up right now and move on. The guide, or the tutorial does not contain any HINTS at least that I have to use a different method if I want a multi-layered multi-paged app. Of course Meteor provides a built in, easy to use, easy to add, answer-to-everything-you-ever-would-want-to-do, Login feature. But guys, it&rsquo;s not useful. I would go as far as say it&rsquo;s completely useless. Do you actually know someone who uses it? I would never use a built in something which is completely hidden from me and have no idea what it does. The ability to control what&rsquo;s happening is THE most important thing in every developers life.</p>
<p>So after I did a bit of digging and StackOverflowing ( which replaces the tutorial AND the user guide (and is a trademarked expression)), I found out that you can add <a href="https://atmospherejs.com/cmather/iron-router" target="_blank">Iron-Router</a> which was built specifically for this purpose.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">meteor add iron:router
</code></pre></td></tr></table>
</div>
</div><p>So all of a sudden my Page is completely screwed up with Iron Router information. Again, there is no information on this on Meteors page or in the guide nor in the COMPLETE guide so, I&rsquo;m left Googling.</p>
<p>A very helpful StackOverflow ( again, and I&rsquo;m wondering why people don&rsquo;t bother with the guide in the first place just go to stackoverflow straight ) answer explains to me the following:</p>
<p>&ldquo;<em>You have to define a subscription handle (an object returned by Meteor.subscribe) in order to use it&rsquo;s reactive ready method : we&rsquo;ll reference it in the myDataIsReady helper to track data availability, and the helper will automatically rerun when the state of ready changes.</em>&rdquo;</p>
<p>Okay, so subscriptions are mentioned in the SECURITY section of the guide regarding detecting specific users and private data and so on and so forth. All right so that&rsquo;s used by iron routing as well which means I have to build that in, and not to mention first of all understanding how Iron Router works.</p>
<p>I&rsquo;m going to stop here now. After spending a couple of hours I can determine that this stuff is not intuitive and &ldquo;easy&rdquo;. I don&rsquo;t know enough about JavaScript and redirecting and Iron Router to be able to use Meteor out of the box. Which means I have to educate myself a bit before returning to this stuff.</p>
<p>Stay tuned for more.</p>
<p>And as always,
Thanks for reading!</p>]]></description>
    </item>
    
    <item>
      <title>JavaScript Web Framework – Meteor</title>
      <link>https://skarlso.github.io/2015/01/29/javascript-web-framework-meteor/</link>
      <pubDate>Thu, 29 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/01/29/javascript-web-framework-meteor/</guid>
      <description><![CDATA[<p>Hi,</p>
<p>This time I would like to write about something that interests me. I wanted to try out a pure JavaScript web framework.</p>
<p>My choice is: <a href="https://www.meteor.com/" target="_blank">Meteor</a>. Looks interesting enough and it was recommended by a friend of mine. So, let&rsquo;s dive in.</p>
<h4 id="installation"><strong>Installation</strong></h4>
<p>As always, one starts with installation. The page tells us to follow this simple step:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">curl https://install.meteor.com/ | sh
</code></pre></td></tr></table>
</div>
</div><p>Easy enough, when you are on Linux. Turns out, that there is no official release yet for Windows. I&rsquo;m in luck then. After running the command though, I saw this popping up into my face:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">curl: (60) Peer certificate cannot be authenticated with known CA certificates
More details here: http://curl.haxx.se/docs/sslcerts.html
</code></pre></td></tr></table>
</div>
</div><p>There is always something. in that case a more accurate command to use would be the following:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">curl -k https://install.meteor.com/ | sh
</code></pre></td></tr></table>
</div>
</div><p>This will force an insecure download. You might not face this issue, but just in case you do, use this command instead.</p>
<p>Branching off here. For those of you whom the curl didn&rsquo;t work because you are sitting behind a proxy you can specify a -proxy  protocol//username:password@proxy:port after your curl. Of course if that doesn&rsquo;t work then the script won&rsquo;t work either.</p>
<p>So open the script in one of your favourite editors, for me it&rsquo;s Sublime text, and find this line: &ldquo;<em>Downloading Meteor distribution</em>&rdquo;. Lo, and behold; it uses curl. This is the only one in the script, so just edit it by adding in your -proxy setting as before and you should be right on track.</p>
<p>If that still gives you problems, try this:</p>
<p>Assuming that your browser is set up correctly with the proxy and just command line commands aren&rsquo;t working, you can go to this URL defined by the variable TARBALL_URL:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">TARBALL_URL=&#34;https://d3sqy0vbqsdhku.cloudfront.net/packages-bootstrap/${RELEASE}/meteor-bootstrap-${PLATFORM}.tar.gz&#34;
</code></pre></td></tr></table>
</div>
</div><p>Note that there are two variables in there. For me these are:</p>
<p>RELEASE: 1.0.3.1</p>
<p>PLATFORM: os.linux.x86_64</p>
<p>The full URL is:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">https://d3sqy0vbqsdhku.cloudfront.net/packages-bootstrap/1.0.3.1/meteor-bootstrap-os.linux.x86_64.tar.gz
</code></pre></td></tr></table>
</div>
</div><p>Download the latest tarball and delete the CURL AND TAR command on the following line. After that, you just have to extract the tarball and move the directory to ~/.meteor.</p>
<p>Now you can run your sh again and you should be on the road, for sure this time.</p>
<p>Just to make sure, these are the line which you need to comment out:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">
<span class="c1"># If you already have a tropohouse/warehouse, we do a clean install here:</span>
<span class="k">if</span> <span class="o">[</span> -e <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.meteor&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
<span class="nb">echo</span> <span class="s2">&#34;Removing your existing Meteor installation.&#34;</span>
rm -rf <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.meteor&#34;</span>
<span class="k">fi</span>

<span class="nv">TARBALL_URL</span><span class="o">=</span><span class="s2">&#34;https://d3sqy0vbqsdhku.cloudfront.net/packages-bootstrap/</span><span class="si">${</span><span class="nv">RELEASE</span><span class="si">}</span><span class="s2">/meteor-bootstrap-</span><span class="si">${</span><span class="nv">PLATFORM</span><span class="si">}</span><span class="s2">.tar.gz&#34;</span>

<span class="nv">INSTALL_TMPDIR</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.meteor-install-tmp&#34;</span>
rm -rf <span class="s2">&#34;</span><span class="nv">$INSTALL_TMPDIR</span><span class="s2">&#34;</span>
mkdir <span class="s2">&#34;</span><span class="nv">$INSTALL_TMPDIR</span><span class="s2">&#34;</span>
<span class="nb">echo</span> <span class="s2">&#34;Downloading Meteor distribution&#34;</span>
curl --proxy https://ggbrau:Daleks37@10.120.28.130:80--progress-bar --fail <span class="s2">&#34;</span><span class="nv">$TARBALL_URL</span><span class="s2">&#34;</span> <span class="p">|</span> tar -xzf - -C <span class="s2">&#34;</span><span class="nv">$INSTALL_TMPDIR</span><span class="s2">&#34;</span> -o
<span class="c1"># bomb out if it didn&#39;t work, eg no net</span>
<span class="nb">test</span> -x <span class="s2">&#34;</span><span class="si">${</span><span class="nv">INSTALL_TMPDIR</span><span class="si">}</span><span class="s2">/.meteor/meteor&#34;</span>
mv <span class="s2">&#34;</span><span class="si">${</span><span class="nv">INSTALL_TMPDIR</span><span class="si">}</span><span class="s2">/.meteor&#34;</span> <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">&#34;</span>
rm -rf <span class="s2">&#34;</span><span class="si">${</span><span class="nv">INSTALL_TMPDIR</span><span class="si">}</span><span class="s2">&#34;</span>
<span class="c1"># just double-checking :)</span>
<span class="nb">test</span> -x <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.meteor/meteor&#34;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="getting-started">Getting started</h4>
<p>After a nice installation process we can continue to the getting started phase.</p>
<p>So, the documentation tells us that we have to simply execute a command.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">meteor create simple-todos
</code></pre></td></tr></table>
</div>
</div><p>At this point we should get a directory structure which is written in the manual. And, behold, that&rsquo;s exactly what happened. As usually, creating a skeleton is easy. Lets run the app. For that, the command is:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">meteor
</code></pre></td></tr></table>
</div>
</div><p>I can do that, I think.</p>
<p>And sure enough, I&rsquo;ve got this little message, which I actually expected to see:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Can&#39;t listen on port 3000. Perhaps another Meteor is running?
</code></pre></td></tr></table>
</div>
</div><p>In this world, where there are tons of applications running on your dev environment at any given time, it&rsquo;s possible to have something already running on the port 3000. Luckily this is something that&rsquo;s anticipated by now, and we are presented with an option to add in a proxy setting of our choice with -port <port>.</p>
<p>After I did that, I&rsquo;ve got a nice confirm message that meteor is up and running. A quick check on the presented URL provided me with the confidence that my app is indeed reachable.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">App running at: http://localhost:9999/
</code></pre></td></tr></table>
</div>
</div><h4 id="after-getting-started">After Getting Started.</h4>
<p>Now that we know that it&rsquo;s up and running we can continue with the tutorial. Up comes next a simple Todo list application with Templates. It&rsquo;s telling us to replace the code in the default starter app. At this point I&rsquo;m wondering if it can hotswap. It should, since javascript and HTML is dynamic so there should be no problems there, right?</p>
<p>And sure enough, the moment I replaced the code and checked on my server status, I could see this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Client modified -- refreshing
Meteor server restarted
</code></pre></td></tr></table>
</div>
</div><p>With a brief flash of &ldquo;Rebuilding.&rdquo;. So it does sort of work. It did, however, restart the server it just did it without your manual intervention. Which is nice, but on a larger scale application it might prove to be a tad bit annoying. For example, I add another item to the list, and suddenly, the server is restarted.</p>
<p>Since, I am a tester, let&rsquo;s see how it handles some problems.</p>
<p>I modified the JavaScript so that it has a syntax error.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript">
<span class="c1">// simple-todos.js
</span><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="nx">Meteor</span><span class="p">.</span><span class="nx">isClient</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// This code only runs on the client
</span><span class="c1"></span>  <span class="nx">Template</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">helpers</span><span class="p">({</span>
    <span class="nx">tasks</span><span class="o">:</span> <span class="p">[</span>
      <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&#34;This is task 1&#34;</span> <span class="p">},</span>
      <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&#34;This is task 2&#34;</span> <span class="p">},</span>
      <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&#34;This is task 3&#34;</span> <span class="p">}</span>
      <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&#34;This is task 4&#34;</span> <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Note the missing &ldquo;,&rdquo;. And, nicely enough I&rsquo;m getting an error message telling me that I messed something up:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Errors prevented startup:

While building the application:
my_cool_app.js:10:7: Unexpected token {

Your application has errors. Waiting for file change.
</code></pre></td></tr></table>
</div>
</div><p>It even tells you where the error is and it&rsquo;s waiting for you to fix it. After I&rsquo;ve corrected my error it compiled fine and the application is up and running. Deleting the files did little difference as did corrupting the HTML pages or the CSS file. Nothing to see here, moving on.</p>
<h4 id="android-device">Android Device</h4>
<p>I&rsquo;m sure everybody can read a manual and continue with collections, forms, events and such. What I&rsquo;m more interested in is that Meteor promises it can run on Android devices. Now that perked my curiosity. With the rise of mobile devices, the desktop platform is slowly pushed back into a dark corner where even a <a href="http://mistborn.wikia.com/wiki/Tineye" target="_blank">Tineye </a>would have problems seeing it.</p>
<p>Hence, I want to see how easy it really is.</p>
<p>Meteor gives you a set of commands to install the android sdk and droid support for your application, which is nice. You just need to run this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">
meteor install-sdk android
meteor add-platform android # Perform this step in the app&#39;s folder and agree to terms and conditions.
</code></pre></td></tr></table>
</div>
</div><p>Now, if you are like me, someone who has experience with the android SDK and its emulator, you&rsquo;ll know that running that thing requires more time and processing power than simulating the chances of Leonardo DiCaprio winning an Oscar. I&rsquo;ll use a real device instead. For that, it appears I only have to run a simple command again.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">meteor run android-device
</code></pre></td></tr></table>
</div>
</div><p>And sure enough the app appeared on my device.</p>
<p>This is actually quite awesome. I only plugged in my device, enabled developer options and USB debugging and that&rsquo;s it. I&rsquo;m quite impressed so far with Meteor and the Power of JavaScript. The app is on my phone and the static JavaScript parts are still working even though I shut the server down.</p>
<p>So my next burning question is. Will it Blend? I mean, Perform?</p>
<h4 id="benchmarking">Benchmarking</h4>
<p>So, now that I know that using, installing and getting started is pretty simple, what I also would like to know is how well it performs.</p>
<p>I have a quad core i7 16GB RAM Samsung SSD running Linux. Let&rsquo;s see 100 threads 10 second interval 10 times loop for a start. Look at how gorgeous this is.</p>
<p>40ms on average. Now let&rsquo;s crank it up and I&rsquo;m performing the test on a separate machine but still on the same network. 1000 threads.</p>
<p>This time I&rsquo;ve got a bit more churn and my pc started to fan like there is no tomorrow. But the server stayed stable. Latency did not waver for a bit. Next, 10.000 for as long as my machine can handle it.. Better save my work. Hah, my JMeter died. But it clocked at an average of 1000ms response time and the server stayed absolutely stable with no package lost, or errors.</p>
<h4 id="conclusion">Conclusion</h4>
<p>I can say with a full heart that I&rsquo;m impressed by Meteor and I very much like it. It&rsquo;s easy to use, even more easy to install and definitely can handle itself given that it&rsquo;s rather lightweight. The hot swapping / server re-starting can&rsquo;t be avoided, but that&rsquo;s only a minor inconvenience and we got used to that already.</p>
<p>I recommend Meteor and I&rsquo;ll be playing around with it a bit more for sure.</p>
<p>Thanks for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>When cucumber goes wrong</title>
      <link>https://skarlso.github.io/2015/01/28/when-cucumber-goes-wrong/</link>
      <pubDate>Wed, 28 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/01/28/when-cucumber-goes-wrong/</guid>
      <description><![CDATA[<p>Hi,</p>
<p>Let&rsquo;s face the horrible truth:</p>
<p><strong>It&rsquo;s rare / never happens that a manager / scrum master / product owner actually reads your cucumber test cases.</strong></p>
<p>Back in the old days, this was one of the selling points of human readable tests and DSLs. It sounds nice and I&rsquo;m sure in a utopia it also works.</p>
<p>BDD is a very nice approach to write tests if used in a correct way. And I can relate that at some point, a manager or the product owner, actually writes up a draft of the tests. But that enthusiasm very rarely stays for the rest of the project.</p>
<p>Especially when you get to the point where your Cucumber test cases start to look something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Scenario: User list
  Given I post to &#34;/users.json&#34; with:
    &#34;&#34;&#34;
    {
      &#34;first_name&#34;: &#34;Steve&#34;,
      &#34;last_name&#34;: &#34;Richert&#34;
    }
    &#34;&#34;&#34;
  And I keep the JSON response at &#34;id&#34; as &#34;USER_ID&#34;
  When I get &#34;/users.json&#34;
  Then the JSON response should have 1 user
  And the JSON response at &#34;0&#34; should be:
    &#34;&#34;&#34;
    {
      &#34;id&#34;: %{USER_ID},
      &#34;first_name&#34;: &#34;Steve&#34;,
      &#34;last_name&#34;: &#34;Richert&#34;
    }
    &#34;&#34;&#34;
</code></pre></td></tr></table>
</div>
</div><p>If a product owner reads this, his reaction will be like: &ldquo;What the hell is this? What&rsquo;s users.json? Why is it there? Why should I even care? What&rsquo;s a JSON response? Why should it match with the request? And what, if I keep the id at USER_ID? Huh?&rdquo;</p>
<p>It&rsquo;s easy to get overwhelmed by things like this scenario when you start introducing actors into your tests and payloads to your public API. And suddenly you&rsquo;ll end up with cucumber features which no other will be able to understand but the person who wrote it.</p>
<p>I&rsquo;m a little bit skeptic that it ever worked as intended. Sure, for a little while. But the dynamic nature of tests will surface soon enough. You can&rsquo;t hide it forever.</p>
<p>The above example, if the payload and user would be hidden in a reusable code fragment behind the implementation, would look a bit more readable:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Scenario: User list
  Given I post to user list with data
  | firstname | Steve |
  | lastname  | Richert |
  When I get a response from the SUT
  Then the response should have the same user
</code></pre></td></tr></table>
</div>
</div><p>See? Easier to understand. I don&rsquo;t care about the payload. I don&rsquo;t care about the user ID, in fact, I would rather see this test as a unit test somewhere deep down in the bowls of the system. Although I can understand that you want a set of automated UATs.</p>
<p>I&rsquo;m sure Cucumber has a couple of success stories behind his back, I just didn&rsquo;t happen to come across them as of late. But please, if you have one, share it with me so I can rest easily.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>From Zero to Hundred in Four seconds</title>
      <link>https://skarlso.github.io/2015/01/27/from-zero-to-hundred-in-four-seconds/</link>
      <pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/01/27/from-zero-to-hundred-in-four-seconds/</guid>
      <description><![CDATA[<p>I thought I throw my grudge out of the window against Scala and try something with it.</p>
<p>I also got my hands on a fairly new book, called: &ldquo;<a href="http://www.amazon.co.uk/Learning-Scala-Practical-Functional-Programming/dp/1449367933/ref=sr_1_1?ie=UTF8&qid=1422340157&sr=8-1&keywords=learning+scala+a+practical" target="_blank">Learning Scala: Practical Functional Programming for the JVM</a>&rdquo;. Turns out to be a rather fun book to read. And Jason Swartz has a nice way of writing. So I wanted to play around with <a href="https://www.playframework.com/" target="_blank">Play 2 Framework</a>. It now comes packaged in <a href="https://typesafe.com/get-started" target="_blank">Activator</a>.</p>
<p>So, I started the long path from almost zero to handle all that. I&rsquo;m running the latest Ubuntu ( 14 ) and latest Java ( 8 ). The list: Scala, SBT, IntelliJ, Play ( through activator ).</p>
<p>I was pleased that, considering a network which allowed me a download speed of ~1.5MB/s ( that&rsquo;s byte, not bit ), I was up and running in about 4 minutes. That&rsquo;s Play running, with a test application created through activator and then imported into an IntelliJ Scala project.</p>
<p>I&rsquo;m impressed.</p>
<p>I added SBT through the package manager like this:</p>
<pre><code>echo &quot;deb http://dl.bintray.com/sbt/debian /&quot; | sudo tee -a /etc/apt/sources.list.d/sbt.list
sudo apt-get update
sudo apt-get install sbt
</code></pre>
<p>It&rsquo;s really simple.</p>
<p>After that, I did an apt-get on the latest Scala.</p>
<p>I already had IntelliJ.</p>
<p>Activator download took me ~1 minute; then I executed the command to create a test app:</p>
<pre class="prettyprint prettyprinted"><code class="language-bash">&lt;span class="pln">$ activator new my&lt;/span>&lt;span class="pun">-&lt;/span>&lt;span class="pln">first&lt;/span>&lt;span class="pun">-&lt;/span>&lt;span class="pln">app play&lt;/span>&lt;span class="pun">-&lt;/span>&lt;span class="pln">scala&lt;/span></code></pre>
<p>Simple. Activator downloaded everything my system was still missing.</p>
<p>Then run the start command:</p>
<pre class="prettyprint prettyprinted"><code class="language-bash">&lt;span class="pln">$ cd my&lt;/span>&lt;span class="pun">-&lt;/span>&lt;span class="pln">first&lt;/span>&lt;span class="pun">-&lt;/span>&lt;span class="pln">app
$ activator&lt;/span></code></pre>
<p>And you are ready to rock &amp; roll. Importing it in IntelliJ was a blink of an eye.</p>
<p>I&rsquo;m really impressed with how easy getting started became with these projects and frameworks. I remember a time where I had to configure everything, get tomcat and the whole JVM or Jetty or whatnot, and try to get up and running took half a day at least. Would my internet be faster, I think this would have been even less.</p>
<p>I&rsquo;ll post more as I go forward.</p>
<p>As always,</p>
<p>Thanks for reading.</p>
]]></description>
    </item>
    
    <item>
      <title>Why Testers are, like scientists</title>
      <link>https://skarlso.github.io/2015/01/26/why-testers-are-like-scientists/</link>
      <pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/01/26/why-testers-are-like-scientists/</guid>
      <description><![CDATA[<p>Hello everybody.</p>
<p>Today, I would like to write about little observation I made along the way of being a tester.</p>
<p>The title says it all. I think Testers, are like scientists. I would go even further, and say: Testers, are scientists.</p>
<p>Let us see how the two compare.</p>
<h3 id="asking-questions">Asking Questions</h3>
<p>A scientist is all about asking the right question to the right person, or the right subject matter. They are using the same 5 Ws as we are. Who, Why, What, When, Where. It&rsquo;s simple, really. Asking the right question is sometimes the most difficult task of them all. Ideas come from these questions. They can also help in flushing out early design problems with the experiment / product.</p>
<h4 id="identify-the-subject-matter">Identify the subject matter</h4>
<p>This one is all about getting to know your environment and taking notes while you are doing so. Become familiar with what you are working with, and what tools you are using in your research. Which standards are you following, and why? It&rsquo;s the same, when a Tester finds herself/himself in a new environment and tries to get her(is) bearing what the task is and how to perform it.</p>
<h4 id="first-impression-outline-of-an-idea">First impression, outline of an idea</h4>
<p>The first impression will result in a vague idea of what the problem is about. This is the stage where the first thoughts emerge and the first draft of a possible solution is crafted into existence. This is the part where a person will draw information, power, and knowledge from her(is) past resulting in a solution that can get close to a real one; but rarely is this solution the one which will be chosen in the end.</p>
<h4 id="testing">Testing</h4>
<p>Indeed in the life of a scientist it is imperative that ideas, solutions and vague drafts of brainstormed possibilities are **tested all the way through. **For a tester it&rsquo;s just as important that all the cases are verified and &lsquo;approved&rsquo; by either common sense, the requirements, or any other kind of verification that they can come up in certain environments. Fact is, that if a solution / test case is a valid one, depends on several different options based on any given circumstance. That is why it&rsquo;s difficult to decide if something is acceptable or not. What is a good solution in one case, might be entirely wrong in another.</p>
<h4 id="results">Results</h4>
<p>If the tests / variables / cases / solutions are satisfying, then we can come to think about producing an actual result. The result could be anything of value to the observer. A failing test could be a good result, if we actually were waiting for that test to fail. In that case the result is a success. So bare in mind that a failing test, a failed solution to an experiment, is **always **also information which **tells you something important. **Never dismiss a failing test, a failed experiment, a failed solution. It gives you a **hint **for a passing one.</p>
<h4 id="community-and-sharing">Community and Sharing</h4>
<p>Scientists have a large community where they are sharing experiments and discoveries. I think I don&rsquo;t have to draw a parallel here. We all know several testing pages, forums, events, gatherings where there are people talking about the subject matter. I&rsquo;m proud that it such a long way.</p>
<h4 id="practice-practice-practice">Practice, practice, practice</h4>
<p>I think this one is self explanatory. In order to become good at something, we have to continuously do it. There is no magic formula, no pill you can take, no matrix to download Kung Fu, you have to do it to learn it. You have to practice it, gather experience and share / write them down in order to strengthen your knowledge and understanding about it. Writing it out, and sharing information, **explaining it to somebody else, **will make it stick better and increase your knowledge in return. So start a blog now, even if you will have only a few readers it will be worth it. Just by writing a couple of lines about something will make you remember it better, and your understanding of it deeper.</p>
<p>So, there you have it. I think these are pretty good points that let&rsquo;s us identify ourselves. It&rsquo;s called Computer <strong>science</strong> for a reason.</p>
<p>As always,</p>
<p>Thanks for reading,</p>
<p>Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>Why the expressiveness of your Tests is important – Part One</title>
      <link>https://skarlso.github.io/2014/11/15/why-the-expressiveness-of-your-tests-is-important-part-one/</link>
      <pubDate>Sat, 15 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/11/15/why-the-expressiveness-of-your-tests-is-important-part-one/</guid>
      <description><![CDATA[<p>Hello Everybody.</p>
<p>This time I&rsquo;d like to write about the expressiveness of a Test. I think that it&rsquo;s very important to write understandable and expressive tests. In older times I was studying novel writing. There is a rule which a novel needs to follow. It goes something like this: &ldquo;A novel needs to lead its reader and make him understand in the simplest way what&rsquo;s going on, with whom and why?&rdquo;. In other words, it&rsquo;s not a puzzle. It should be obvious what the test is trying to do and it should not require the reader to try and solve it in order to understand it.</p>
<p>I&rsquo;m planning this as a series since there are multiple problems with a test I can talk about here.</p>
<p><strong>Geb Tests</strong></p>
<p>Example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy">    <span class="kt">def</span> <span class="s2">&#34;login to the home page&#34;</span><span class="o">()</span> <span class="o">{</span>
        <span class="nl">given:</span> <span class="s2">&#34;I am at homepages&#34;</span>
            <span class="n">go</span> <span class="s2">&#34;http://localhost:8080/home&#34;</span>
            <span class="n">at</span> <span class="n">HomePage</span>

        <span class="nl">when:</span> <span class="s2">&#34;I entir my credential&#34;</span>
            <span class="n">filloutLoginForm</span><span class="o">(</span><span class="s2">&#34;username&#34;</span><span class="o">,</span> <span class="s2">&#34;password&#34;</span><span class="o">)</span>
            <span class="n">at</span> <span class="n">MyAccountPage</span>

        <span class="nl">then:</span> <span class="s2">&#34;I can accass my wallet&#34;</span>
            <span class="n">openWallet</span><span class="o">()</span>
            <span class="n">waitFor</span> <span class="o">{</span> <span class="n">contains</span><span class="o">(</span><span class="s2">&#34;Balance&#34;</span><span class="o">)</span> <span class="o">}</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Now, read this test. It doesn&rsquo;t really make any sense at the first read, right? You need to actually think what is going on there. Of course if you read it slow enough you&rsquo;ll get what it&rsquo;s trying to do. But you don&rsquo;t know what fillform does. Apparently it also submits the form because after fillform you are suddenly at MyAccountPage.</p>
<p>There are several things wrong with this one, let&rsquo;s start with the pageobject.</p>
<p><strong>PageObjects</strong></p>
<p>At and toAt return page objects. We can use that to actually make the calling explicit and make it more readable and identify where a function comes from.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy">    <span class="kt">def</span> <span class="s2">&#34;login to the home page&#34;</span><span class="o">()</span> <span class="o">{</span>
        <span class="nl">given:</span> <span class="s2">&#34;I am at homepages&#34;</span>
            <span class="n">go</span> <span class="s2">&#34;http://localhost:8080/home&#34;</span>
            <span class="n">HomePage</span> <span class="n">homePage</span> <span class="o">=</span> <span class="n">at</span> <span class="n">HomePage</span>

        <span class="nl">when:</span> <span class="s2">&#34;I entir my credential&#34;</span>
            <span class="n">homePage</span><span class="o">.</span><span class="na">filloutLoginForm</span><span class="o">(</span><span class="s2">&#34;username&#34;</span><span class="o">,</span> <span class="s2">&#34;password&#34;</span><span class="o">)</span>
            <span class="n">MyAccountPage</span> <span class="n">myAccountPage</span> <span class="o">=</span> <span class="n">at</span> <span class="n">MyAccountPage</span>

        <span class="nl">then:</span> <span class="s2">&#34;I can accass my wallet&#34;</span>
            <span class="n">myAccountPage</span><span class="o">.</span><span class="na">openWallet</span><span class="o">()</span>
            <span class="n">waitFor</span> <span class="o">{</span> <span class="n">contains</span><span class="o">(</span><span class="s2">&#34;Balance&#34;</span><span class="o">)</span> <span class="o">}</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This reads much better now. You know where the function is coming from and your IDE will not go nuts from things it can&rsquo;t find. And you have autocompletion so there is no fear that you simply mistype something.</p>
<p><strong>Side effects</strong></p>
<p>Next step, let&rsquo;s remove some of the side effects.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy">    <span class="kt">def</span> <span class="s2">&#34;login to the home page&#34;</span><span class="o">()</span> <span class="o">{</span>
        <span class="nl">given:</span> <span class="s2">&#34;I am at homepages&#34;</span>
            <span class="n">go</span> <span class="s2">&#34;http://localhost:8080/home&#34;</span>
            <span class="n">HomePage</span> <span class="n">homePage</span> <span class="o">=</span> <span class="n">at</span> <span class="n">HomePage</span>

        <span class="nl">when:</span> <span class="s2">&#34;I entir my credential&#34;</span>
            <span class="n">homePage</span><span class="o">.</span><span class="na">filloutLoginForm</span><span class="o">(</span><span class="s2">&#34;username&#34;</span><span class="o">,</span> <span class="s2">&#34;password&#34;</span><span class="o">)</span>
            <span class="n">homePage</span><span class="o">.</span><span class="na">submitLoginForm</span><span class="o">()</span>
            <span class="n">MyAccountPage</span> <span class="n">myAccountPage</span> <span class="o">=</span> <span class="n">at</span> <span class="n">MyAccountPage</span>

        <span class="nl">then:</span> <span class="s2">&#34;I can accass my wallet&#34;</span>
            <span class="n">myAccountPage</span><span class="o">.</span><span class="na">openWallet</span><span class="o">()</span>
            <span class="n">waitFor</span> <span class="o">{</span> <span class="n">myAccountPage</span><span class="o">.</span><span class="na">accountIsDisplayed</span><span class="o">()</span> <span class="o">}</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Now this is again much better. There are no steps left out. And you can test now the FillForm and the submit independently. Like, submitting the form without filling it out! Or filling it out and not submiting it. Reads better, is explicit, more easy to understand.</p>
<p>And the last one for today:</p>
<p><strong>Grammar</strong></p>
<p>I wonder if you noticed it. The grammar is a little bit off in the tests. A small mistake here and there. You might think that, who cares? That&rsquo;s a very bad thought. I think the correct grammar reflects caring. It reflects that we thought about this test and that we thought about the quality of it. Because it means that after you wrote it, you actually re-read the test to make sure it&rsquo;s understandable and readable.</p>
<p>So let us correct that:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy">    <span class="kt">def</span> <span class="s2">&#34;login to the home page&#34;</span><span class="o">()</span> <span class="o">{</span>
        <span class="nl">given:</span> <span class="s2">&#34;I am at homepages&#34;</span>
            <span class="n">go</span> <span class="s2">&#34;http://localhost:8080/home&#34;</span>
            <span class="n">HomePage</span> <span class="n">homePage</span> <span class="o">=</span> <span class="n">at</span> <span class="n">HomePage</span>

        <span class="nl">when:</span> <span class="s2">&#34;I entir my credential&#34;</span>
            <span class="n">homePage</span><span class="o">.</span><span class="na">filloutLoginForm</span><span class="o">(</span><span class="s2">&#34;username&#34;</span><span class="o">,</span> <span class="s2">&#34;password&#34;</span><span class="o">)</span>
            <span class="n">homePage</span><span class="o">.</span><span class="na">submitLoginForm</span><span class="o">()</span>
            <span class="n">MyAccountPage</span> <span class="n">myAccountPage</span> <span class="o">=</span> <span class="n">at</span> <span class="n">MyAccountPage</span>

        <span class="nl">then:</span> <span class="s2">&#34;I can accass my wallet&#34;</span>
            <span class="n">myAccountPage</span><span class="o">.</span><span class="na">openWallet</span><span class="o">()</span>
            <span class="n">waitFor</span> <span class="o">{</span> <span class="n">myAccountPage</span><span class="o">.</span><span class="na">accountIsDisplayed</span><span class="o">()</span> <span class="o">}</span>
    <span class="o">}</span>
    <span class="kt">def</span> <span class="s2">&#34;As a player I can log in to check my account.&#34;</span><span class="o">()</span> <span class="o">{</span>
        <span class="nl">given:</span> <span class="s2">&#34;I am at the homepage&#34;</span>
            <span class="n">go</span> <span class="s2">&#34;http://localhost:8080/home&#34;</span>
            <span class="n">HomePage</span> <span class="n">homePage</span> <span class="o">=</span> <span class="n">at</span> <span class="n">HomePage</span>

        <span class="nl">when:</span> <span class="s2">&#34;I enter my log in credentials.&#34;</span>
            <span class="n">homePage</span><span class="o">.</span><span class="na">filloutLoginForm</span><span class="o">(</span><span class="s2">&#34;username&#34;</span><span class="o">,</span> <span class="s2">&#34;password&#34;</span><span class="o">)</span>
            <span class="n">homePage</span><span class="o">.</span><span class="na">submitLoginForm</span><span class="o">()</span>
            <span class="n">MyAccountPage</span> <span class="n">myAccountPage</span> <span class="o">=</span> <span class="n">at</span> <span class="n">MyAccountPage</span>

        <span class="nl">then:</span> <span class="s2">&#34;I&#39;m directed to my account page.&#34;</span>
            <span class="n">myAccountPage</span><span class="o">.</span><span class="na">openWallet</span><span class="o">()</span>
            <span class="n">waitFor</span> <span class="o">{</span> <span class="n">myAccountPage</span><span class="o">.</span><span class="na">accountIsDisplayed</span><span class="o">()</span> <span class="o">}</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>I also took the liberty of re-phrasing some of the text so that it shows what the test is about and what the user really would like to achieve here. Now try reading that last one. Does it make more sense? Did you understand it at first go? Did it read like a good story?</p>
<p>There is a coding practice which goes something like this: &ldquo;Good code is code which doesn&rsquo;t surprise you as you read it.&rdquo; Which means the exact thing happens which you thought of would happen. I think that applies to tests as well. The steps of the test shouldn&rsquo;t come to you as a surprise. Especially if you know what the application is supposed to do.</p>
<p>So that&rsquo;s all for today folks. Thank you for reading! If you have a nasty test which you would like me to dissect and make it better and human readable, please share it in the comment section and I will do my best to come up with a good solution for it.</p>
<p>And as always,</p>
<p>Have a nice day!</p>
<p>Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>Updating All Jenkins Jobs Via Jenkins API – Python</title>
      <link>https://skarlso.github.io/2014/11/07/updating-all-jenkins-jobs-via-jenkins-api-python/</link>
      <pubDate>Fri, 07 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/11/07/updating-all-jenkins-jobs-via-jenkins-api-python/</guid>
      <description><![CDATA[<p>Hello everybody.</p>
<p>I would like to share with you a small script I wrote to update all, or a single, Jenkins job from a Python script remotely.</p>
<p>This will enable you to update a Jenkins job from anywhere using an admin credential based on a config.xml template that you have. With this, if you want to apply a config change to all or just a single job in Jenkins, you don&rsquo;t have to go and do it for all the rest. You just call this script and it will cycle through all the jobs you have and update them if the begin with &ldquo;yourpipelinedelimiter&rdquo; or if they aren&rsquo;t in a restricted list of jobs. The delimiter helps to identify pipelines which are dev pipelines. If you have multiple pipelines which are helpers or builders and you don&rsquo;t usually apply the same config to them, than the delimiter can help identify the dev pipelines you actually want to update.</p>
<p>Enjoy, hope it helps someone.</p>
<p>And now, without any further ado:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">	Created to update multiple pipelines in jenkins with a given configuration and job list.
</span><span class="s1">	Usage:
</span><span class="s1">	Example 1:
</span><span class="s1">	Updating a single pipeline&#39;s job with a given config.xml.
</span><span class="s1">	python update-jenkins-jobs.py job-name config.xml pipeline-name
</span><span class="s1">	Example 2:
</span><span class="s1">	Updating every pipeline in jenkins dynamically. !!!WARNING!!! This updates every job EXCEPT of the ones specified in restricted_jobs.
</span><span class="s1">	python update-jenkins-jobs.py job-name config.xml
</span><span class="s1">&#39;&#39;&#39;</span>
<span class="kn">from</span> <span class="nn">xml.dom</span> <span class="kn">import</span> <span class="n">minidom</span>
<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="k">def</span> <span class="nf">update_pipeline</span><span class="p">(</span><span class="n">pipeline</span><span class="p">):</span>
	<span class="s1">&#39;&#39;&#39;
</span><span class="s1">	Takes in a list of pipelines to update.
</span><span class="s1">	&#39;&#39;&#39;</span>
	<span class="n">config_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">config_to_use</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span>
	<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;content-type&#39;</span><span class="p">:</span> <span class="s1">&#39;application/xml&#39;</span><span class="p">}</span>
	<span class="k">print</span><span class="p">(</span><span class="s2">&#34;Updating pipelines: &#34;</span><span class="p">,</span> <span class="n">pipeline</span><span class="p">)</span>

	<span class="k">for</span> <span class="n">dev_job</span> <span class="ow">in</span> <span class="n">pipeline</span><span class="p">:</span>
		<span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;http://jenkins:9999/job/</span><span class="si">%s</span><span class="s2">/job/</span><span class="si">%s</span><span class="s2">/config.xml&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="n">dev_job</span><span class="p">,</span> <span class="n">job_to_update</span><span class="p">)</span>
		<span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">config_file</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">auth</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="s1">&#39;password&#39;</span><span class="p">))</span>
		<span class="k">print</span><span class="p">(</span><span class="s2">&#34;Updating pipeline: </span><span class="si">%s</span><span class="s2">; Response Code: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="n">dev_job</span><span class="p">,</span> <span class="n">r</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">get_dev_pipelines</span><span class="p">():</span>
	<span class="s1">&#39;&#39;&#39;
</span><span class="s1">	Gets a list of pipelines which can be used by update_pipeline.
</span><span class="s1">	&#39;&#39;&#39;</span>
	<span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;http://jenkins:9999/api/xml&#39;</span><span class="p">,</span> <span class="n">auth</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="s1">&#39;password&#39;</span><span class="p">),</span> <span class="n">stream</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
	<span class="n">job_list_xml</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">text</span>

	<span class="n">xmldoc</span> <span class="o">=</span> <span class="n">minidom</span><span class="o">.</span><span class="n">parseString</span><span class="p">(</span><span class="n">job_list_xml</span><span class="p">)</span>
	<span class="n">itemlist</span> <span class="o">=</span> <span class="n">xmldoc</span><span class="o">.</span><span class="n">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)</span>

	<span class="n">dev_job_list</span> <span class="o">=</span> <span class="p">[]</span>

	<span class="n">restricted_jobs</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;yourpipelinedelimiter-dev-pipeline1&#34;</span><span class="p">,</span> <span class="s2">&#34;yourpipelinedelimiter-dev-pipeline2&#34;</span><span class="p">,</span> <span class="s2">&#34;yourpipelinedelimiter-dev-pipeline3&#34;</span><span class="p">]</span>
	<span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">itemlist</span><span class="p">:</span>
	    <span class="k">if</span> <span class="p">(</span><span class="s2">&#34;yourpipelinedelimiter-dev&#34;</span> <span class="ow">in</span> <span class="n">s</span><span class="o">.</span><span class="n">firstChild</span><span class="o">.</span><span class="n">nodeValue</span><span class="p">)</span> <span class="p">:</span>
	    	<span class="n">value</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">firstChild</span><span class="o">.</span><span class="n">nodeValue</span>
	    	<span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">restricted_jobs</span><span class="p">):</span>
	    		<span class="n">dev_job_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>

	<span class="k">return</span> <span class="n">dev_job_list</span>


<span class="n">job_to_update</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">config_to_use</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
<span class="n">dev_pipeline</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&gt;</span><span class="p">;</span> <span class="mi">3</span><span class="p">:</span>
	<span class="k">print</span><span class="p">(</span><span class="s2">&#34;Args length:&#34;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">))</span>
	<span class="n">dev_pipeline</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>

<span class="n">update_pipeline</span><span class="p">(</span><span class="n">get_dev_pipelines</span><span class="p">()</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">dev_pipeline</span> <span class="k">else</span> <span class="n">dev_pipeline</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>Thanks for reading.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>The seven Principles of Context Driven Testing – Mind Map</title>
      <link>https://skarlso.github.io/2014/10/23/the-seven-guidelines-of-context-driven-testing/</link>
      <pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/10/23/the-seven-guidelines-of-context-driven-testing/</guid>
      <description><![CDATA[<p>Hi Folks!</p>
<p>I just wanted to share with you my mind map on the seven principles of Context Driven Testing.</p>
<p>I used the notion of dragons since it&rsquo;s seven. And a dragon is usually seven headed in my mind.</p>
<p>So without further ado.</p>
<p>Click for larger image.</p>
<p>I have a hand drawn as well but I&rsquo;m guessing that one wouldn&rsquo;t be of much use since it follows my own imagination.</p>
<p>Here are the seven principles in points which correspond to the leafs.</p>
<ol>
<li>Value -&gt; Practice -&gt; Depends -&gt; Context =&gt; The value of any practice depends on its context.</li>
<li>People -&gt; Working -&gt; Together -&gt; Important =&gt; People, working together, are the most important part of any project’s context. ( The mob, trying to kill the dragon by working together. )</li>
<li>Problem -&gt; Project -&gt; Solution =&gt; The product is a solution. If the problem isn’t solved, the product doesn’t work. ( The sword. It&rsquo;s a sword but if it doesn&rsquo;t kill the Dragon it&rsquo;s useless. )</li>
<li>Good Testing -&gt; Intellectual Challenge =&gt; Good software testing is a challenging intellectual process. ( Well it&rsquo;s a dragon with glasses. That&rsquo;s something you rarely see. )</li>
<li>Good Practice | Bad Practice -&gt; In Context -&gt; No Best Practices =&gt; There are good practices in context, but there are no best practices. ( This one was a little bit tricky. But basically you want to solve the dungeon and not plow through it )</li>
<li>Uncertainty =&gt; <span style="font-size: 14px; line-height: 1.8em;">Projects unfold over time in ways that are often not predictable. ( For me this one word was enough. )</span></li>
<li>Exercised By All In Time -&gt; Judgement | Skill | Cooperatively =&gt; Only through judgment and skill, exercised cooperatively throughout the entire project, are we able to do the right things at the right times to effectively test our products. ( It&rsquo;s a flexing dragon. Easy, right? )</li>
</ol>
<p>So this map helped me to remember everything. The descriptions, applications that are further described I remembered by using this mind map as a <a href="http://en.wikipedia.org/wiki/Method_of_loci" target="_blank">loci</a>.</p>
<p>I hope somebody found this useful.</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Python Course Review</title>
      <link>https://skarlso.github.io/2014/08/25/python-course-review/</link>
      <pubDate>Mon, 25 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/08/25/python-course-review/</guid>
      <description><![CDATA[<p>Hello Everybody.</p>
<p>Today I&rsquo;d like to write a little bit about a python course I did.</p>
<p>It&rsquo;s an 8 week course on algorithmic programming with fun little projects. I&rsquo;d like to write down some of my solutions with pseudo code for my own better understanding and for the sake of sharing knowledge. I won&rsquo;t, however, share full projects since that would be against the honour code.</p>
<p>Let&rsquo;s begin.</p>
<p><strong>Week Zero</strong></p>
<p>This week was all about getting the hang out of reading the posts and the documentation and the questions and getting used to the wordings. The tutors really out did themselves. They tried to make a course that can be both funny and teach something at the same time which is anything but easy.</p>
<p>Even though the tasks that were given were interesting al-bight at times a little bit far stretched and could have been easier done if used something else to complete them. But if we would have done that, what&rsquo;s the point of it all then?</p>
<p>So I&rsquo;ll try to recall everything solely based on my notes taken in those 8 weeks. Let&rsquo;s see how much I truly learned.</p>
<p><strong>Assignment of week one</strong></p>
<p>We were to build the game 2048 which if you played you know what it is all about.</p>
<p><img src="http://ironyca.files.wordpress.com/2014/03/2048-game.jpg" alt="2048"></p>
<p>The goal is to add up numbers so that higher and higher numbers are created. There is no real &ldquo;end&rdquo; of the game. You can continue as long as you have space left although the intended goal is to create 2048. There are a couple of clones of this game and we were supposed to write one this time of our own.</p>
<p>We approached this game with the intention of refreshing our memory about Python. Handling matrices python syntax, counting indices and a bit of assessment about the general understanding of Mathematics and programming from the populace.</p>
<p>I must say it was hard. It was hard to get back into the habit of properly thinking about something at first. It was hard to get used to Math again which I missed for a very long time. I forgot many things and as English is not my first language many things written about Math in English were extremely hard to understand in the beginning.</p>
<p>But thankfully for my trusty mathematics Bible in Hungarian I was saved.</p>
<p><img src="http://s02.static.libri.hu/cover/9f/3/818403_5.jpg" alt="math book"></p>
<p>This book is 1448 pages long but contained all the information necessary to get my mind back into the game. And oh boy was it worth the initial trouble. I had to first realize that I forgot so much it was very painful and immensely disappointing, frustrating and shameful. But you should never give up and so I fought my way through it.</p>
<p>And it was extremely helpful to do Tests First. As the grading was based on how many of a given set of Unit Tests were passing it was very helpful to start tests first which were leading the design of the program. Also it was crucial to work in as little chunks as possible since one could easily lost himself trying to grasp a problem proving to be too large to look at from afar.</p>
<p>The hard part about this project was the Merging of the numbers and creating the proper grid which results from the Merge. Here are some examples:</p>
<ul>
<li><code>[2, 0, 2, 4]</code> should return <code>[4, 4, 0, 0]</code></li>
<li><code>[0, 0, 2, 2]</code> should return <code>[4, 0, 0, 0]</code></li>
<li><code>[2, 2, 0, 0]</code> should return <code>[4, 0, 0, 0]</code></li>
<li><code>[2, 2, 2, 2]</code> should return <code>[4, 4, 0, 0]</code></li>
<li><code>[8, 16, 16, 8]</code> should return <code>[8, 32, 8, 0]</code></li>
</ul>
<p>In order to achieve this you must trim the zeros like this <code>[2,2,4]</code> and than produce the result which is <code>[4,4]</code> and put a couple of zeros at the end <code>[4,4,0,0]</code>. My first though was to use the Deque class in Python in order to achieve this but that was an outside module which was not allowed.</p>
<p>It was an interesting way to begin the course. Many people left at this point and were leaving afterwards too. Most of them in frustration that they were missing the python knowledge the rest out of frustration of not knowing the necessary math. At the end though it was getting easier to follow the problems after we got used to the conventions and sentence structures. The professors were also helpful and sometimes re-worded some of the descriptions to better describe what they wanted.</p>
<p><strong>Week One</strong></p>
<p>So after a hard start we moved on to a very interesting week one. This one got me into a certain game I don&rsquo;t want to see ever again. It&rsquo;s name: <strong><a title="Cookie Clicker" href="http://orteil.dashnet.org/cookieclicker/" target="_blank">Cookie Clicker</a>.</strong></p>
<p><img src="http://img2.wikia.nocookie.net/__cb20130827014912/cookieclicker/images/5/5a/PerfectCookie.png" alt="cookie"></p>
<p>We sort of had to re-create the cookie clicker but without the clicking. We only were supposed to re-create the buying of upgrades and simulate a sequence of clicks via the means of a cycle.</p>
<p>In this week the description of the tasks was, at the least, confusing. They started to use the term _time _which lead many to believe that we were somehow supposed to use python&rsquo;s date / time methods and libraries. But after a couple of re-reads it was apparent that by _time _they actually were referring to <em><strong>cycle count.</strong></em>** **</p>
<p>Knowing this made the task at hand a lot easier. This time around our main focus were the following:</p>
<ul>
<li>Mathematical Sums</li>
<li>Finding the Max</li>
<li>Higher - Order functions</li>
<li>Plotting with Python</li>
</ul>
<p>The course just went into overdrive. We were looking lot at things like these:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">∑n i=0 α^i = α^0 + α^1 + α^2 + ... + α^n = α^(n+1) − 1 / α − 1
</code></pre></td></tr></table>
</div>
</div><p>(2021 Hindsight): It&rsquo;s funny how I&rsquo;m looking at this now, and it immeditely makes perfect sense. I love how evolved in that regard over the time.</p>
<p>It was rather awesome though frustrating at first like I wrote earlier. These were the easier one.</p>
<p>Finding the maximum is trivial. Especially if you are using a built in **max **provided by Python. But if you mix it with Higher-Order functions it gets interesting. If you want to do anything else as well and not just a max, for example getting the index of the maximum item as well, you usually end up writing a custom Max any ways.</p>
<p>Plotting in Python was exquisite interesting. The garphs which were produced showed as an insight into how powerful a solution really is or how effective. Here came in the Big-O notations almost. To see if a function was exponential, logarithmic or plain polynomial. O(n), O(n^2), O(logn) etc, etc.</p>
<p>This resulted in very interesting graphs like this:</p>
<p><strong>Week Two</strong></p>
<p>So last week we had plotting and counting this week was even more interesting. Week Two&rsquo;s main focus was <strong>Probability</strong>. Specifically the <a href="http://en.wikipedia.org/wiki/Monte_Carlo_method" target="_blank"><strong>Monte Carlo</strong> <strong>methods</strong></a>. Tl;dr; it describes that if you try something enough times you can derive a result that will be, with very high probability, the one you are looking for (expected value).</p>
<p>We tried out this algorithm by playing a nice game of tic-tac-toe.</p>
<p><img class="alignleft" src="http://www.janetkruskamp.com/Images/TicTacToe.jpg" alt="" width="227" height="227" /></p>
<p>The point of this exercise was to create a machine player which, after running a 1000 or so random scenarios, was choosing the best option given a certain game state. It was difficult to get the results to always return a correct answer. At this point last weeks plotting became important since if your Monet Carlo algorithm was not fast enough the program was running increasingly slower and slower.</p>
<p>I was not very satisfied with my solution. It worked, but it was very slow and it wasn&rsquo;t always returning the best option.</p>
<p><strong>Week Three</strong></p>
<p>So what comes after probability? Correct. **Combinatorics. **</p>
<p>The next hill to climb was combinatorics. Fortunately for me I love probability and combinatorics so this was a little bit easier for me. I was getting the hang out of function calculation as well so I wrote better homework and better projects at this point. Which is the aim of the course, right?</p>
<p>The game we used for this approach was <a href="http://en.wikipedia.org/wiki/Yahtzee" target="_blank"><strong>Yahtzee</strong></a>.</p>
<p><img class="alignleft" src="http://playpop.com/medias/images/splashscreens/yahtzee_en.png" alt="" width="279" height="201" /></p>
<p>Now let me say this without too much remorse. I truly, fully and with all my heart, hate Yahtzee. I think it&rsquo;s stupid. I&rsquo;m sorry. I truly do. The only thing I can think of when I hear yahtzee is the South Park version of it.</p>
<p>South Park Version of Yahtzee + Tron:</p>
<p>I share the enthusiastic look of Stan here.</p>
<p>Anyhow, moving on. Thank to the coursera Gods we weren&rsquo;t suppose to write a whole game of Yathzee just a very simplified version of it. We were supposed to count the upper combinations on the second throw. So you already have one throw and you must choose how many die you want to hold on to to maximise the possibility of the best outcome possible. Huh. come again?</p>
<p>So you already had a hand. And now the program was to determine which die you were supposed to hold on too in order to maximise the score you can achieve with the remaining two throws.</p>
<p>There were a few interesting things that came in with this task. For example this was the first time I could use a Dict init from a list with a zip.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="n">hand_dict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">hand</span><span class="p">),</span> <span class="p">[]</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">hand</span><span class="p">)))</span>
</code></pre></td></tr></table>
</div>
</div><p>And this was the point in course were I found perhaps the most interesting thing. I found an actual use for reduce which was working. I was beginning to get into the habit of using map, filter, reduce.</p>
<p>This was the beauty:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="n">my_list</span> <span class="o">=</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">z</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="n">z</span> <span class="o">+</span> <span class="p">[</span><span class="n">y</span> <span class="o">+</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">z</span><span class="p">],</span> <span class="n">hand</span><span class="p">,</span> <span class="p">[[]])</span>
</code></pre></td></tr></table>
</div>
</div><p>This piece of code produced all the combinations of a given hand which was a list of Tuples. It merged them into a list of lists which I created a list of Tuples out from. After this my life was never ever the same again.</p>
<p><strong>Week Four</strong></p>
<p>For me this was the most interesting part of the course. I LOVED this task. Focus was:</p>
<ul>
<li>Python Generators</li>
<li>Stacks / Queues</li>
<li>Inheritance in Python</li>
<li>Girds</li>
<li>Grid Search / <a href="http://en.wikipedia.org/wiki/Breadth-first_search" target="_blank">Breadth First Search</a></li>
</ul>
<p>And the task with which we were supposed to achieve this was..</p>
<p>Zombie Apocalypse. It was sort of like <strong>Conway&rsquo;s Game of Life</strong>. Given a grid in which there were Zombies, Humans and Obstacles.</p>
<p>The Zombies could only move up, down, left, right. The humans could flee diagonally and none of them could penetrate an obstacle. It was very much fun to write this. The most challenge was to learn the proper implementation of the breadth first search algorithm as the Zombies had to detect the nearest Humans to move towards to and the Humans needed to see the nearest Zombies to flee from.</p>
<p><strong>Week Five</strong></p>
<p>Halfway through it was become difficult to maintain the time needed for this course. I was finding myself applying a few late days here and there. This was a two months course after all. I did not have all the time in the world at my disposal. But I managed to submit everything without penalties.</p>
<p>So this weeks task was rather mundane. It was a <strong>world wrangler</strong>. Which means given a word generate valid words from the letters in the provided word.</p>
<p>The algorithm we were supposed to use though was for me a bit of a challenge. I&rsquo;ll be honest with you, for me, it was a little bit hard to wrap my head around this one. But eventually I succeeded.</p>
<p>It was Merge-Sort and Recursion. Let me tell you this now, I hate merge-sort. Recursion I do love though. What I never learned though and was very interesting for me to learn now was recurrences in mathematics. Well never learned is a bit harsh since I knew Fibonacci already and Pascal&rsquo;s Triangle but the mathematical definition was a refreshing new view. I&rsquo;m talking about <a href="http://en.wikipedia.org/wiki/Recurrence_relation" target="_blank"><strong>Recurrence Relations</strong></a>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">F(n) = F(n-1) + F(n-2)
</code></pre></td></tr></table>
</div>
</div><p>This is the Recurrence relation of the famous Fibonacci. Easy, right? Well the hard part is when you are trying to get the <a href="http://en.wikipedia.org/wiki/Binet_formula#Closed-form_expression" target="_blank"><strong>closed-form-expression</strong></a> of a Recurrence.</p>
<p><strong>Week Six</strong></p>
<p>Finally it was coming to an end. The last week was easy so this week had to have a punch. And oh boy it did. This weeks focus:</p>
<ul>
<li>Trees</li>
<li>Lambdas</li>
<li>Illustration of Trees</li>
<li><a href="http://en.wikipedia.org/wiki/Minimax" target="_blank">Minimax</a></li>
<li><a href="http://en.wikipedia.org/wiki/Depth-first_search" target="_blank">Depth First Search</a></li>
</ul>
<p>If I hated merge-sort I hated minimax more. I don&rsquo;t know why but it was again very hard for me to properly grasp this concept. I mean I understood what needed to be done of course but writing it done with code proved to be more difficult then I thought it would be.</p>
<p>After hours of research and reading finally I could come up with a solution which was working. I wouldn&rsquo;t say it was good. But it was working.</p>
<p>The game with which we were supposed to demonstrate this algorithm was. Tic-Tac-Toe. Turns out that it&rsquo;s rather common place to show off minimax with tic-tac-toe as it was fewer possibilities. The point of the exercise was the following.:</p>
<p><img class="alignnone" src="http://www.ocf.berkeley.edu/~yosenl/extras/alphabeta/alphabeta.jpg" alt="" width="516" height="405" /></p>
<p> </p>
<p>To create trees out of the possible moves given a certain game state. This time we wanted to make absolutely sure that if we can&rsquo;t win the game at least we won&rsquo;t loose it. And that&rsquo;s the point of minimax. It will minimize your losses.</p>
<p>Now there are several things about this algorithm that are hard.</p>
<p><strong>Performance of Minimax</strong></p>
<p>It has and always will be a very interesting task for programmers to try to achieve a better performance for these calculations. Since it&rsquo;s trying to build up a tree with all the possible combinations a game can have it will end up with a huge tree which will take ages to traverse.</p>
<p>A few of the solutions could be to exit the search once you have a definitive answer. If you find a winning move there is no point of looking any further. You just stop.</p>
<p>You can create the tree dynamically. You can make it somehow intelligent enough to predict a possible best first move and then use minimax on the rest. Or use <a href="http://en.wikipedia.org/wiki/Alpha-beta_pruning" target="_blank"><strong>Alpha-beta pruning</strong></a>.</p>
<p><strong>Week Seven</strong></p>
<p>And so we are coming to an end. Last weeks assignment was basically to put all the previous weeks knowledge together to create the application called 15 puzzle.</p>
<p><img class="alignleft" src="http://kociemba.org/fifteen/pics/puz.jpg" alt="" width="183" height="183" /></p>
<p>Now, there was however a little addition to the previous knowledge. It was <a href="http://en.wikipedia.org/wiki/Invariant_(computer_science)" target="_blank"><strong>invariants</strong></a>. Now, I love Logic. And I&rsquo;ve been actually using invariants in computer science programming and testing for a long time so this part was not really a problem.</p>
<p>An example of an invariant in python would be something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="k">while</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">:</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></td></tr></table>
</div>
</div><p>This is a loop invariant example. In you find a very useful invariant in your program you can write an assert for it which will help you debug your code and work in small chunks. Invariants will make refactoring your code a hell of a lot easier. As if your invariant is suddenly false you need to check what went wrong.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="k">while</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">:</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>
  <span class="k">assert</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">6</span>
</code></pre></td></tr></table>
</div>
</div><p>This assert will make sure that if your invariant for whatever reason isn&rsquo;t true your code fails immediately.</p>
<p><strong>End Credits</strong></p>
<p>So this was the end of the course. I learned a a lot from this course and I&rsquo;m very proud of myself for completing it. I took away a lot from this course. I took away confidence and logical thinking. I took away greater trust in my Python knowledge and that it&rsquo;s very important to keep my skills from deteriorating.</p>
<p>And I think math is important for proper, deep understanding of programming as a science. I think refreshing my math skills gave me at least a deeper trust in my ability to write a piece of code however complicated it might appear. After writing a minimax algorithm I think some Hibernate with DIP and SRP will prove to be less of a problem. Or at least a different category of a problem.. Hehe.</p>
<p>Thanks for reading!
Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>Five reasons why a tester should learn SQL</title>
      <link>https://skarlso.github.io/2014/05/31/five-reasons-why-a-tester-should-learn-sql/</link>
      <pubDate>Sat, 31 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/05/31/five-reasons-why-a-tester-should-learn-sql/</guid>
      <description><![CDATA[<p>Hello Folks.</p>
<p>So last I was writing about why a tester should learn Javascript. Today I would like to write about why a tester should learn SQL.</p>
<p>There, I said it. I know many people, especially testers, don&rsquo;t like SQL. They view it as a monster best be avoided. Something only Database people will know. Something which is so scary and ugly, nobody really wants it.</p>
<p>But I will give you a couple of good reasons why you shouldn&rsquo;t be afraid of SQL. And why you should welcome it as your best friend and partner in crime.</p>
<p>Let&rsquo;s go.</p>
<p><strong>Reason Number One: Data gathering</strong></p>
<p>This one is obvious and clear as the sun. You can use simple queries to mine for data. To look up changes and compare time intervals between insertion and update events. You can monitor certain tables so that when they are updated, you&rsquo;ll get a red flag.</p>
<p><strong>Reason Number Two: Test Run Statistics</strong></p>
<p>This one is from my friend Adrian. Basically if you would like to know more about what&rsquo;s happening with your tests when they run, for example:</p>
<ul>
<li>Run time</li>
<li>Frequency of Test outcome</li>
<li>Failure rate</li>
<li>Environment details -&gt; Execution slave</li>
</ul>
<p>One interesting way to achieve this is, to have the test report running and outcomes into a little mysql database and than create queries of certain types like, show me the last run of every test called xyz and show me the environmental details and the run time. With this closely monitored you could find out that Slave #345 is sluggish because each time the test ran on it, it took more then 10 minutes where as the others only took 5-6.</p>
<p><strong>Reason Number Three: Data Manipulation</strong></p>
<p>So after monitoring comes naturally the edit. Understanding how databases work and knowing a few queries here and there can help you manipulating your data in a way that it will be easier to test data dependant scenarios.</p>
<p>Instead of making a new entry you could edit what you already have.</p>
<p>For example:</p>
<p>You have a customer and you want to test the system&rsquo;s ability to handle people on your site who are suspended from access. But the ability to suspend is not yet working. Will that stop you from testing this feature? Will you put this feature into blocked because: &ldquo;Ohh, we can&rsquo;t yet suspend a player so we need to wait until that&rsquo;s done.&rdquo;</p>
<p>No. You don&rsquo;t wait. You dig into your database, find the necessary record, change it&rsquo;s state to the desired state; even if it has a foreign key which needs to be updated or that status doesn&rsquo;t exist yet, in which case you ADD it to the list of states yourself. You don&rsquo;t let yourself be stopped just because something is not done yet. You move on by being clever.</p>
<p><strong>Reason Number Four: Understanding Data migration issues</strong></p>
<p>A big issue these days if you go into a project where you have a previous version of what you are currently building will be migrating over old data into the new database scheme. Testing such a thing can be a pain in the butt. But it will be a LOT easier if you understand the changes. If you know what changed, how and why, you can manipulate your data in order to fit the new scheme. Or if you need to test it you won&rsquo;t be afraid of running some stored procedures in a dummy database with old data and than run a few queries to see what broke and what didn&rsquo;t.</p>
<p>Do you have a foreign key violation somewhere when you migrated over and have no idea what do to? Time to learn some SQL so that you don&rsquo;t have to run to somebody every time you encounter it. Even if you can&rsquo;t fix it, the database engineers or the devs who will fix the bug will be very happy that you provided as much information as possible in your report.</p>
<p><strong>Reason Number Five: Security</strong></p>
<p>SQL Injection is still at large. Even with these days frameworks doing full escapes it can&rsquo;t hurt to test a couple just to be on the safe side. And writing a clever script that mines for accessible tables here and there is an essential skill in a security tester&rsquo;s repertoire.</p>
<p><strong>Reason Bonus: Performance, HibernateQL, Information</strong></p>
<p>Lastly a bit of a bonus are these three.</p>
<p><strong>Performance</strong></p>
<p>Suppose you are running a web application. You access a large list and you notice that it&rsquo;s sort of sluggish. You first blame it on the network so you test it locally. It seems to be better now so you move on but it leaves a little voice in your head so you can&rsquo;t abandon it. You go back and try locally again with a bit more data in your database.</p>
<p>You notice it&rsquo;s a little bit better but it&rsquo;s still somehow sluggish. Suddenly you get a hunch and turn on SQL logging in your tomcat instance. You click the link again and wait with eyes wide open on what happens next. It&rsquo;s your worst nightmare.</p>
<p>The SQL queries the whole database with a simple select and than filters the data on the front-end side. Which is a really really dumb thing to do. So you file a bug for which the title is something similar to this: &ldquo;Customer Transaction History query doesn&rsquo;t apply WHERE | INNER SELECT | PAGING on SQL rather it filters on the application layer.&rdquo;</p>
<p><strong>HibernateQL</strong></p>
<p>This is the SQL language of hibernate which is the underlying technology in many java web frameworks these days. It uses it&rsquo;s own thing called <a href="http://docs.jboss.org/hibernate/orm/3.3/reference/en/html/queryhql.html" target="_blank">HQL</a>. Main difference, as this page already says, is that it&rsquo;s a full blown Object Oriented query language which understand inheritance and polymorphism which is very exciting.</p>
<p><strong>Information</strong></p>
<p>Last but not least I mentioned this one earlier. You can provide more information in your bug reports as in what data you used, where was it happening, what was the last update date, which environment and what query was executed ( if you have query debugging turned on ). Whoever reads that bug report will find it very helpful that you provided enough information to reproduce it anywhere.</p>
<p>Because many times the culprit for a bug is the underlying data.</p>
<p><strong>Reading and Practising resources</strong></p>
<p>Here is a very awesome picture of how to understand JOINS which is everybody&rsquo;s fear.</p>
<div style="width: 976px" class="wp-caption aligncenter">
  <img src="http://www.codeproject.com/KB/database/Visual_SQL_Joins/Visual_SQL_JOINS_orig.jpg" alt="SQL Join Cheat Sheet" width="966" height="760" />
  <p class="wp-caption-text">
    SQL Join Cheat Sheet
  </p>
</div>
<p>And a post on <a href="http://blog.codinghorror.com/a-visual-explanation-of-sql-joins/" target="_blank">Coding Horror</a> which is essentially the same but I like how Jeff writes.</p>
<p>Also if you would like to practice writing SQL scripts and no longer be afraid of them all the rest of your life go to this site =&gt; <a href="http://sqlzoo.net/" target="_blank">SQLZoo</a>. It&rsquo;s an interactive way of trying out your SQL skills and testing them on very clever database structures.</p>
<p>But if you, like me, love to learn PLAYING than THIS is the place for you =&gt; <a href="https://schemaverse.com/" target="_blank">The Schemaverse</a>. It&rsquo;s a SQL based space shooting strategy game awesomeness! Have FUN learning SQL.</p>
<p>Thanks for reading!</p>
<p>Have a nice day|night!</p>
<p>Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>TDD is Dead – Not really</title>
      <link>https://skarlso.github.io/2014/05/26/tdd-is-dead-not-really/</link>
      <pubDate>Mon, 26 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/05/26/tdd-is-dead-not-really/</guid>
      <description><![CDATA[<p>Is TDD dead?</p>
<p>Not really. So let&rsquo;s talk about this topic for a little bit.</p>
<p>I&rsquo;m sure you already read a gazillion posts about this debate but frankly I&rsquo;m writing this for myself, to rant a little bit, you know. Because somebody is wrong on the internet and I must intervene.</p>
<p>So first of all, the hashtag #tddisdead (and I will use it shamelessly as well). This is clearly an attempt to get as many peoples attention as you can. TDD is NOT DEAD. Obviously since it has soooo many supporters how could it be dead? It&rsquo;s like asking, is Design Patterns dead? Or is Functional Automation dead? Or is Oreo cookies dead?</p>
<p>No, it&rsquo;s not dead. And it won&rsquo;t ever be dead. It will maybe change into something new, something better even, but it will never be dead. So let&rsquo;s skip that part.</p>
<p>Now, about the <strong>debate</strong>.</p>
<p>I haven&rsquo;t hear so much bull spoken for this long since I watched the political debate of two fractions in my home country. The right wing extremists against the left wing.. I don&rsquo;t know whats. And it was just that. A political debate. It had no merit and no value whatsoever. At all. Nothing.</p>
<p>And right in the middle <strong>DHH</strong> says this:</p>
<p><em>&quot;.you&rsquo;re not done until you also have tests for a piece of functionality — I&rsquo;m completely on board with that.&quot;.</em></p>
<p>That made the whole conversation completely irrelevant.</p>
<p>Every counter against TDD I heard was <strong>bull</strong>. Not in that debate, in general. People are either too lazy to write them, just don&rsquo;t want to get out of their comfort zone, don&rsquo;t really care about tests, or don&rsquo;t really care about quality or under time pressure ( I get to this later. ).</p>
<p>Which brings me to my next point.</p>
<p><strong>Quality</strong></p>
<p>People seem to not care about quality that much. Would they, they would understand that having a bulletproof west will save your life when you get shot in the chest with a 357 magnum. You can flush out early design flaws you can detect early bugs and do a better system design.</p>
<p>Sure if you are the most intelligent man on the planet maybe you can come up with a perfect system on the first draft and then implement it flawlessly so that it doesn&rsquo;t fall apart in two months time. But most people can&rsquo;t. Most people make errors on the way.</p>
<p>And yes, writing tests can be hard. But guess what? If writing a test is hard because that part of the system is complicated, than it will be that part of the system which will react the worst to change. And only change is constant. Which brings me to the next item.</p>
<p><strong>Time constraints</strong></p>
<p>So your manager is sitting right next to you and saying come on we are paying you to write code and not tests so do it! And you have to have a feature done today but if you write a suite of tests you&rsquo;ll only finish tomorrow. Sure, your estimate at that point will become a very quick one because you make a sacrifice of trust.</p>
<p>And then the next story comes along and you say. <em>&ldquo;Sure I can do that as well. No problem I know how my system works, right? Hmm. why the hell did that break all of a sudden? I didn&rsquo;t change anything in that module. Ahh damn it I said I&rsquo;ll be done today, so let&rsquo;s just fix this quickly and then move on to the next card.&quot;</em></p>
<p>And the next story comes along. <em>&ldquo;Sure I can do that. wait a minute. Didn&rsquo;t that part brake already twice? Damn, better refactor. Ohh shit, why is that now breaking???? Damn it I said I&rsquo;ll be done tomorrow, better patch it, and then move on. Hmm let&rsquo;s write a test here to make sure this does not break. Ohhh damn I need PowerMock for that stuff since it&rsquo;s in another module. Why the hell is that there? Should it be here in the first place since it&rsquo;s somehow used by that other class there? Interesting. Let&rsquo;s refactor and put it in here so I can mock it. Ahhhh f*ck now all the rest of the system is not working. Damn, I&rsquo;ll just use PowerMock. Shit. Checkstyle error. PowerMock is not allowed?? What?? Who the f*ck says that?&quot;</em></p>
<p>You get my drift. And suddenly you end up with estimates of <strong>WEEKS</strong>!!!! instead of days / hours for a simple story.</p>
<p><strong>Finishing it up</strong></p>
<p>This a rant only. It&rsquo;s my personal opinion, experience and observation of a 10 year time period in Software Testing. Starting with at least a Weak Skeleton and a few upfront tests will help you in the long run. Writing at least ONE - TWO acceptance tests WILL help you understand business logic better. Writing ONE or TWO unit tests will help you understand your logic better. I&rsquo;m not saying write a whole damn suite of tests I can understand you don&rsquo;t want to do that, but for quality&rsquo;s sake write at least a couple.</p>
<p>You will love it, I promise you that.</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>Five reasons why a front-end tester should learn Javascript</title>
      <link>https://skarlso.github.io/2014/05/23/five-reasons-why-a-front-end-tester-should-learn-javascript/</link>
      <pubDate>Fri, 23 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/05/23/five-reasons-why-a-front-end-tester-should-learn-javascript/</guid>
      <description><![CDATA[<p>Hello everybody.</p>
<p>Today I would like to write about a very interesting topic, I hope. So let&rsquo;s get started.</p>
<p>As the title already suggests, I&rsquo;m writing about why a front-end tester should learn at least a little bit about JavaScripting and the DOM.</p>
<p>Ohhh and contrary to the belief CSP ( Content Security Policy ) will <strong>not</strong> be the death of such scripts. There are white-lists and workarounds and exclusions which can be implemented in order to allow local JavaScripting to continue. So don&rsquo;t fret. Read on.</p>
<p><strong>Reason Number 1: Injection</strong></p>
<p>Every front-ender tester has a waste amount of tools at their disposal. Various things, like Firebug and web developer Toolbar and. Bookmarklets and <a href="https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/" target="_blank">Greasemonkey</a> and <a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=en" target="_blank">Tampermonkey</a>. These are the real powerful tools though. Your main objective at this point would be to inject something into your current site.</p>
<p>Suppose a scenario where you are testing something and you have an API at your disposal for a quick edit on a customer, like closing his account or giving him money, or doing something with his appliances. Suppose you don&rsquo;t want to always switch away to another tab or call a service with certain parameters or go to a rest client and initiate that from there.</p>
<p>Suppose you could have a small injected DIV right on the page you are which gathers information for you, like the customer&rsquo;s username, and wallet and whatnot, and with a simple press of a button, you just closed their account. Neat, isn&rsquo;t it? Simple, fast, very comfortable with just one press of a button.</p>
<p>Suppose you have a DIV at the corner of a page, or even a drag and drop enabled one which you can drag around, with an arsenal of these buttons RIGHT THERE on your page. You don&rsquo;t have to switch context at all.</p>
<p>These days it&rsquo;s especially easy with tools like jQuery at your disposal. You just inject jQuery first, if the site is not already using it, and you are good to go and do whatever you like to do..</p>
<p><strong>Reason Number 2: Data gathering</strong></p>
<p>While we are testing these application we always create some kind of a report. That report contains many things about the customer, or it&rsquo;s appliances or the things he does, does not. All these could be constantly gathered by your script as it runs in the background. It gathers statistics and information which otherwise you would have to gather from some transaction history, or some kind of an action history. But no. Not the JavaScript Wizard.</p>
<p>You, would just press a button and the script would generate a report for you. It would even print it out. Create a persistent layer in which you are gathering information continuously. Create a small mySql database on your local machine and have the JavaScript enter data into that. Tadaaam.. Usage statistics at the touch of a button. All there, only waiting to be extracted.</p>
<p><strong>Reason Number 3: Tempering</strong></p>
<p>In understanding the ways of the DOM and the JavaScript you can create some very interesting test cases not to mention XSS attacks which is essentially JavaScript Injection. That&rsquo;s always fun and produces many very good bugs.</p>
<p>Cookie manipulation. You want to simulate something? Like a time-out or a session loss or anything like that with a push of a button? Easy.</p>
<p><strong>Reason Number 4: Shortcuts</strong></p>
<p>You have a massive field like registration that you need to fill out? The shortest way is to have an API which you can call via a curl script. But if that&rsquo;s not available and you would like to exercise the front-end any ways, then you will end up wasting hours and hours on always filling out all of those pesky fields.</p>
<p>And suddenly I&rsquo;m hearing: &ldquo;But I&rsquo;m using Selenium plugin for that.&rdquo; - you might say. Sure, use that. But I&rsquo;m using Chrome. &ldquo;But there is iMacros for that.&rdquo; - you might say again. Sure, I know. But! Let&rsquo;s see which takes longer.</p>
<p>Open selenium, load the script, run it, see it fail, run it again, ahh success, good. Same with iMacros. As opposed to, having a Bookmarklet right in front of you, on your bookmark, and with a click of a button, or with entering something into the browsers search bar, you suddenly fill out the form and press submit.</p>
<p>You see the difference is that JavaScript runs faster and more accurate by it self in such short things then with a wrapper around it. And it&rsquo;s faster accessible as well.</p>
<p><strong>Reason Number 5: Security</strong></p>
<p>There are all sorts of things that a security tester can do with a small script which gathers session information and availability.</p>
<p><strong>Reason Number 6: Accessibility</strong></p>
<p>This is of course the easiest one. There are ample of scripts and browser plugins to test accessibility which is an all time favourite for everybody in the front-end land. Make your life a little bit easier. How bout just running a bookmark like <a href="http://squizlabs.github.io/HTML_CodeSniffer/">HTML_CodesSniffer</a> an see a very gorgeous result like this:</p>
<p><img src="http://i1-scripts.softpedia-static.com/screenshots/HTML-CodeSniffer_1.png" alt=""></p>
<p>Ain&rsquo;t it beautiful? What stops YOU from writing your own?</p>
<p>So get out there and learn JavaScript. It&rsquo;s easy. I&rsquo;m not telling you to become a front-end developer, just know thy tools and you shellet receive the blessings of the IT Gods.</p>
<p>As always,</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>Note taking what when how often</title>
      <link>https://skarlso.github.io/2014/05/20/note-taking-what-when-how-often/</link>
      <pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/05/20/note-taking-what-when-how-often/</guid>
      <description><![CDATA[<p>Hello Everybody.</p>
<p>Today I would like to tell you about a little conversation I had with my friend Adrian.</p>
<p>The topic was about how, when and what to log during a testing session regarding a story.</p>
<p>So let&rsquo;s see what came out of that talk.</p>
<p><strong>Logging your work</strong></p>
<p>The question is really not whether you should log your work or not, but rather to what extend. Because we all know that you should log your work. It helps you recall and helps you organize and think out testing strategies. But the extend and methods are a big question. So here is my routine.</p>
<p><strong>Visually inclined</strong></p>
<p>I am a very visual person. I log my work with doodles and such like <a href="http://www.huibschoots.nl/wordpress/">Mr. Huib Schoots</a> who uses Sketchnote taking. You have seen some of my sketches if you follow my twitter feed, like this one =&gt; <img src="https://pbs.twimg.com/media/BAm6RSTCMAEvjas.jpg" alt="twitter">. You know I like to draw so for me colour and organizing and doodling is key to make a note more personalized and live.</p>
<p>That comes with a drawback. The draw back are many.</p>
<p>First of, I need to do that in a notebook. I could bring my wacoom tablet to work and draw in paint, but that wouldn&rsquo;t be the same. And I don&rsquo;t particularly like drawing on a tablet actually.</p>
<p>Second one, it&rsquo;s completely unsearchable. As Adrian pointed out, you can&rsquo;t search in a notebook, even if you are using side pointers like a sticky note or something. You won&rsquo;t be able to instantly find and track down something you did. And after a while it gets cluttered with doodles and the notes are lost in-between. It will be very colourful and utterly useless.</p>
<p>Third one is, it&rsquo;s slow. Typing is much faster.</p>
<p>On the bright side. I love doodling. And if I can draw something up with a picture I will understand it much faster rather then reading a few lines of words chunked together.</p>
<p>If I draw an awesome diagram I will get what&rsquo;s going on much much faster.</p>
<p>And it will be more fun to actually right it down with a nice fountain pen with a beautiful tip that can create such marvels that you don&rsquo;t want to put it down.</p>
<p>It&rsquo;s portable. I can carry my notebook everywhere. I should be able to do the same with a laptop, but since it&rsquo;s tied into a dock station and I don&rsquo;t want to carry it around with myself everywhere I won&rsquo;t do that. I could create notes though in my notebook and then write them down into the laptop after I&rsquo;m done? Sure.</p>
<p>So now let&rsquo;s go and see the other one.</p>
<p><strong>Electronic note-taking</strong></p>
<p>I think I already pointed out a few positives about that. It&rsquo;s searchable. Definitely. It&rsquo;s fast. Yes. It&rsquo;s more convenient, more organized can be backed up and you won&rsquo;t run out of ink or space or somebody won&rsquo;t take it away to a meeting because &ldquo;Ohh I saw it on your desk and I needed a paper hope that&rsquo;s okay.&rdquo;.</p>
<p>I understand the benefits of it. But it&rsquo;s very very rigid. It has no colour, no personalization and no feeling whatsoever. It&rsquo;s frigid, standardized and without life. So I need something to make it a bit better. I have a couple of tools for that.</p>
<p>First off I need a good graphics maker to create diagrams. There is an awesome free tool pointed out by Adrian to do that called <a href="http://www.yworks.com/en/products_download.php">yEd</a>. Download the zip and run the jar. I can live with that. Creates nice diagrams and flowcharts.</p>
<p><img src="http://i.imgur.com/swcdn5N.jpg" alt=""></p>
<p>It&rsquo;s quite powerful. Go look it up. There are a gazillion picture on Ze internet.</p>
<p>But the notes still lack personalization. There are a couple of tools which you can use if you, like me, shy away from everything that&rsquo;s Microsoft, you have the opportunity to use Emacs with the org plugin which makes absolutely amazing documents.</p>
<p><img src="http://dto.github.io/images/tutorial-11.png" alt=""></p>
<p>It&rsquo;s awesome but the problem is that it will only work with Emacs and nothing else. And from time to time I don&rsquo;t like the controls of Emacs. I&rsquo;m a sublime text person. So recently I found a little plugin for sublime text called <a href="https://github.com/aziz/PlainTasks">PlainTask</a>.</p>
<p>Here is an example of how it can look like: <img src="http://www.nealsheeran.com/images/plaintasks.png" alt=""></p>
<p>I LOVE it. You can add little notes and set a task to complete or defer it and it sort of highlights and things like that, which I like. It&rsquo;s still not doodling but it get&rsquo;s the job done and will be searchable and will be fast and available. And you can use Sublime text&rsquo;s awesome power of foldering. Create a root folder and open it with sublime. Then create one folder / story you are testing and put everything related to that story in that directory and then press CTRL+O and unleash the magic!</p>
<p>Instant search and organization at the power of your fingertips. Even search IN the files themselves.</p>
<p>This makes it a bit better and bearable. Which brings me to the final topic.</p>
<p><strong>Note taking frequency</strong></p>
<p>So my friend argued that he create a folder for EVERY story he ever tests. Even if it&rsquo;s only one word he puts into it to as a memory trigger he does it. I argued that that seems to be a little too extensive. But he said in return, and I have to agree on that, that once you stop doing something because of an excuse like, ahh I don&rsquo;t need to do it because it&rsquo;s a small story, you will stop doing it completely. And this is actually true for everything in your life. And as somebody who recently started running ( 1 month ago ) I understand the weight of that sentence very well.</p>
<p>So I would say do as much note taking as you can even if it is a little word that jogs your memory to remember some detail about the story. Even if it takes more time to create the folder and the note, it will help you at least to remember doing it and testing it if nothing else.</p>
<p>Although I don&rsquo;t think I will do one for everything I will certainly try. Now with these awesome tools at my disposal I might even enjoy the rigidity of the keyboard more. 😉</p>
<p>Thanks for reading!</p>
<p>Have a wonderful evening!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Using Chrome Search Engine – Multiple Search Params</title>
      <link>https://skarlso.github.io/2014/05/18/using-chrome-search-engine-multiple-search-params/</link>
      <pubDate>Sun, 18 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/05/18/using-chrome-search-engine-multiple-search-params/</guid>
      <description><![CDATA[<p>Hello Everybody.</p>
<p>Today I would like to write a few words about Chrome&rsquo;s Search Engines.</p>
<p>You&rsquo;re probably already using it for a couple of things, like Google, or Amazon searches or YouTube or anything like that. But are you using it to access environments and testing tools faster, with queries?</p>
<p>For example, here is a quick Jira Search made easy:</p>
<p>Keyword: jira</p>
<p>URL: <a href="https://atlas.projectname.com/jira/browse/PROJECT-%25s">https://atlas.projectname.com/jira/browse/PROJECT-%s</a></p>
<p>So just type: jira|space|9999</p>
<p>Will immediately bring you to your ticket.</p>
<p>&ldquo;Bah, why would I want that?&rdquo; - you ask.</p>
<p>Well, it&rsquo;s easy, and quick access, but wait. There is more. How about you want to access a test environment that changes only a number?</p>
<p>Keyword: testenv</p>
<p>URL: <a href="https://qa%25s.projectname.com/testenv">https://qa%s.projectname.com/testenv</a></p>
<p>Just type: testenv|space|14</p>
<p>&ldquo;Humbug!&rdquo; - you might say. &ldquo;What if I have a different URL for an admin site and my main web site AND the number, hmmm? Also I have that stuff bookmarked anyways.&rdquo; - you might add in.</p>
<p>Well, don&rsquo;t fret. By default, Chrome, does not provide this. I know FF does, but I don&rsquo;t like FF. That&rsquo;s that. So I have to make due with what I have. And indeed there is a solution for using multiple search parameters. It&rsquo;s is a JavaScript you can add in into the URL part and Chrome will interpret that. You can find that JavaScript in a few posts but you will find that THAT script is actually Wrong. Here is the <strong>fixed</strong> Script, courtesy of yours truly:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="s1">&#39;%s&#39;</span><span class="p">;</span>
<span class="nx">url</span><span class="o">=</span><span class="s1">&#39;https://%s.test%s.projectname.com/&#39;</span><span class="p">;</span>
<span class="nx">query</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">;</span>
<span class="nx">urlchunks</span><span class="o">=</span><span class="nx">url</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;%s&#39;</span><span class="p">);</span>
<span class="nx">schunks</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;;&#39;</span><span class="p">);</span>
<span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="p">;</span> <span class="nx">i</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">urlchunks</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">query</span><span class="o">+=</span><span class="nx">urlchunks</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
	<span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">schunks</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">query</span><span class="o">+=</span><span class="nx">schunks</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="nx">location</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">query</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>So no you will have an entry like this:</p>
<p>Keyword: testenv</p>
<p>URL: paste in the upper script</p>
<p>And try. testenv|space|admin;14 =&gt; which should result in: <a href="https://admin.test14.projectname.com/">https://admin.test14.projectname.com/</a></p>
<p>The location.replace at the end will bring you to the web page. It&rsquo;s interesting to note the s will be replaced by admin;14 which is a nice magic by JavaScript.</p>
<p><strong>NOTE</strong>: This only works on a page like google.co.uk. For chrome pages, like the new tab, omnibox has this ability disabled unfortunately.</p>
<p>&ldquo;Well then it&rsquo;s completely useless, isn&rsquo;t it?&rdquo; - you might say. Well, it&rsquo;s usage is limited in power, that&rsquo;s true. But it&rsquo;s still useful as I&rsquo;m sure you have a couple of pages open anyways which you don&rsquo;t mind using up.? And you have to remember less keywords only a few powerful ones.</p>
<p>Credit for telling about Chrome Search Engines power in the first place goes to. *drumrolls* =&gt; <a href="http://www.testfeed.co.uk/" target="_blank"><a href="http://www.testfeed.co.uk/">http://www.testfeed.co.uk/</a></a></p>
<p>Anyhow.</p>
<p>As always, thanks for reading.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How I started Running</title>
      <link>https://skarlso.github.io/2014/05/16/how-i-started-running/</link>
      <pubDate>Fri, 16 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/05/16/how-i-started-running/</guid>
      <description><![CDATA[<p>Hello Everybody.</p>
<p>Today I would like to write about something non-technical. I would like to write about running and how I started it and what my experiences were with it.</p>
<p>So tl;dr. here we go.</p>
<p><strong>What led me to running</strong></p>
<p>There were actually two things that led me to start running. Three.</p>
<p><strong>Reason One: The accident</strong></p>
<p>I&rsquo;m a bike person by default. I *hate running with a passion. One day I was riding my bike in the woods when suddenly I hit a big ol' tree trunk right head on at which moment my bikes front fork bent inwards and became completely useless. At this point I had to walk home. Repairing it proved to be a bit time consuming so I had to think of some other way to have my regular exercise.</p>
<p><strong>Reason Two: The comic</strong></p>
<p>In the earlier days I&rsquo;ve read a web comic from The Oatmeal, namely this one =&gt;<a href="http://theoatmeal.com/comics/running" target="_blank"><a href="http://theoatmeal.com/comics/running">http://theoatmeal.com/comics/running</a></a></p>
<p>It inspired me so much I just needed a last kick to get started.</p>
<p><strong>Reason Three: The other accident</strong></p>
<p>About two years ago I had an accident and I broke my ankle. Cycling was one of the ways to exercise my ankle and now that my bike was gone I had to think of something else.</p>
<p>So with the Blerch on my back and all these wonderful reasons and because I believe that if you hate something but it&rsquo;s good for you you have to find a way to make it your best friend..I begun.</p>
<p><strong>How to begin.</strong></p>
<p>Hence my first todo item on the list was to start thinking like a runner. I would like to run today. I want to run. I love to run. I need to run. I miss running because it was a very bad weather outside and I couldn&rsquo;t go and now I will run twice as much tomorrow.</p>
<p><strong>Start running.</strong></p>
<p>This one seems obvious and. It is obvious. Just start it! Go out and run a few paces. It will give you a feel for how much you really need it because you are out of shape.</p>
<p>So. After I got my mind set on starting running and finally went outside a park which is nearby I started my first ever run.</p>
<p><strong>First time running</strong></p>
<p>Let me tell you at this point a few things you will need.</p>
<ul>
<li>A new heart</li>
<li>Some lungs</li>
<li>A new back</li>
<li>Some legs</li>
<li>And a couple of ribs</li>
</ul>
<p>Your first run will be terrible. It will be awful. You will whease. You will shuffle. You will suffer and would like to give up immediately and go home an sit before the computer and do nothing and enjoy that none of your body parts hurt.</p>
<p>You need to get past this feeling. And don&rsquo;t overrun on your first run. You don&rsquo;t need to run 10k on the first try and you probably wouldn&rsquo;t even make it. Just run for 10 - 20 minutes. You can walk in between if you get tired nobody will kill you for it or you won&rsquo;t be less because of it. You can walk and bend a little bit. Your back will probably hurt so stretch a bit.</p>
<p>Which brings me to <strong>preparations</strong>.</p>
<p>People say that for short distances you don&rsquo;t need to prepare. I call bull. Everything hurt on my body on my first try and on my second it was much better when I did it with preparation. A couple of things to do:</p>
<ul>
<li>Stretch = Important. Legs, back, front, side.</li>
<li>Vaseline = If you have squishy parts on your body that touch while you are walking, like in between your legs just right after your pelvis where your legs connect, apply a bit of Vaseline. Trust me. You will be thankful for that. Where your body meets and if you run for 20-30 minutes it creates a log of friction. Vaseline helps you to protect against that. Later on long distance runners usually use it on their nipples to avoid getting a rush from the t-shirt they are wearing.</li>
<li>Gear = This is an important one. I provide a different section.</li>
</ul>
<p>Once you are geared up you are ready for your first run. It will be wonderfully painful but will be soooo gooood afterwards it&rsquo;ll be all worth it.</p>
<p><strong>Gear</strong></p>
<p>Before you start running you need a proper <strong>shoe</strong>. There are countless blogs about what shoe to use what leg type you are and so and so forth I say f*ck that. On your first run make sure you by a basic running shoe like these =&gt;<a href="http://www.dickssportinggoods.com/family/index.jsp?categoryId=4418011&lmdn=Price&fr=StorePrice%2FDSP%2F00005001%2F00010000&fbc=1&fbn=StorePrice%7C%2450.01+-+%24100.00" target="_blank">Shoes</a></p>
<p>It doesn&rsquo;t even matter if it&rsquo;s a cheap one. A bit later when you feel you are ready you can invest into a proper running shoe. I&rsquo;m using a Karrimor D3O. I heard absolute terrible reviews about it but frankly for me it&rsquo;s extremely comfortable and I never had any problems with it. I like it. I might switch after a year or so and see how another brand fairs but for now, it&rsquo;s perfect.</p>
<p>I advice against running for prolonged time with a shoe that&rsquo;s not a running shoe. You will immediately feel the difference. As with a not running shoe your legs, back, side, lungs, heart everything will hurt very badly and you will hate running even more.</p>
<p>For a <strong>shirt</strong> I recommend this one =&gt; <a href="http://www.halfords.com/webapp/wcs/stores/servlet/product_storeId_10001_catalogId_10151_productId_971728_langId_-1_categoryId_271427" target="_blank">Halfords Cycle Shirt</a></p>
<p>The colour is unimportant. And yes, it&rsquo;s a cycling shirt. And why? Because it soaks up sweat immensely powerful. And it needs to be a tight fit for it to work. You will enjoy running much much more if you are not sweating all over the place.</p>
<p>For a <strong>pants</strong> I recommend this one =&gt; <a href="http://www.amazon.co.uk/Ultrasport-Mens-Quick-Dry-Function-Running-Tights/dp/B006HCSJS0/ref=sr_1_7?s=clothing&ie=UTF8&qid=1400268729&sr=1-7&keywords=running+pants" target="_blank">Amazon Man&rsquo;s Running Tight</a></p>
<p>Why a tight? Because it will keep your muscles nicely wrapped and warm and it will soak up even more sweat and it really dries quickly and is easily washable. If it&rsquo;s a nice weather outside, just put on a short and go.</p>
<p>A couple of things other Blogs don&rsquo;t really talk or mention.</p>
<p>A <strong>running belt</strong>. It&rsquo;s very useful to store stuff in it like =&gt;</p>
<ul>
<li>Keys</li>
<li>Water</li>
<li>Tissue =&gt; You will need it. Every part of your body will loose some type of liquid.</li>
<li>Phone / Music playing device =&gt; There are <a href="http://www.theguardian.com/lifeandstyle/2012/apr/22/does-music-help-you-run-faster" target="_blank">proven</a> <a href="http://naturalrunningcenter.com/2013/02/10/music-2/" target="_blank">fact</a> <a href="http://runnersconnect.net/running-training-articles/does-music-help-you-run-faster/" target="_blank">that</a> music will help you <a href="http://www.bostonmagazine.com/health/blog/2013/04/03/music-working-out/" target="_blank">run</a> <a href="http://www.nhs.uk/Livewell/c25k/Pages/running-music.aspx" target="_blank">better</a></li>
<li>GPS =&gt; For later because tracking your run will help you get it to improve.</li>
</ul>
<p><strong>Closing words</strong></p>
<p>It will be hard to start. I know it will be. It was for me too. I&rsquo;m running for a month now and I finally managed to get into a mind state where I actually LOVE it. I LOVE it. I want it. And I miss it if I&rsquo;m not able to run. It&rsquo;s a great exercise. Take care that don&rsquo;t run everyday. It will make you very tired and give up easily. Run every second day and then increase as you like. But even then include <strong>REST</strong>(not the protocol.) because your body, tissues, muscle bones need to regenerate.</p>
<p>Don&rsquo;t overexert yourself. Jog, walk run slow. Doesn&rsquo;t matter, just run. That&rsquo;s the point.</p>
<p>Have a very clear mindset.</p>
<p>And run in nature if possible because a treadmill is immensely boring and will kill your mood very quickly. And running in nature will provide diversion and wonderful things like this (my view when I run) =&gt;</p>
<p><img src="https://pbs.twimg.com/media/BmpyfhcIgAM2pFf.jpg" alt="run"></p>
<p>After a month of running my record is 7kms and 50 minutes. I started from zero basically. The human is the best runner in the world. I lost 5kgs without changing my eating habits. Just right now as I&rsquo;m typing this I&rsquo;m chewing on a gummybear.</p>
<p>So get out there and start running folks. It will help you immensely. There will come the time when you feel the euphoric moment of speed and the wind in your face as your body explodes in a glorious mixture of pain, adrenalin rush, speed, velocity, happiness and bliss. As your body stretches and pulls your weight and your legs launch you forward into the world the feeling as you run faster and faster ignoring everything and just fly. You will start to cry, laugh and sing at the same time.</p>
<p>Running will do that to you.</p>
<p>You have been warned.</p>
<p>Now go.. and live a full life.</p>
<p>As always, thanks for reading!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How the past influences the present</title>
      <link>https://skarlso.github.io/2014/04/13/how-the-past-influences-the-present/</link>
      <pubDate>Sun, 13 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/04/13/how-the-past-influences-the-present/</guid>
      <description><![CDATA[<p>Hello.</p>
<p>This is only a quick rant about a discussion I overheard the other day.</p>
<p>Guy A says to guy B that my Past is not defining me. And that I&rsquo;m not regarding my Past in my future endeavours. And that my Past isn&rsquo;t what shapes me.</p>
<p>Well then what is? You constantly relay on your past experience like a crouch. You use it daily for making decisions. You don&rsquo;t even realize it probably that you are using past events to determine if you want to do something or not.</p>
<p>Same goes as well for software development. You rely on your past as a means of estimation on a daily basis. If you wouldn&rsquo;t do that, you would do very very poorly on estimations. You rely on those moments to find out what kind of consequences the solution you are using will have in the future. In fact, if we look at Design Patterns what are they, if not using the Past to determine the Future? Past failures, solutions and experience condensed into reusable ideas and modules.</p>
<p>So lastly I would depart with a little anecdote I like so very very much from Confucius.:</p>
<p><strong><em>&ldquo;Study the past, if you would define/divine the future.&quot;</em></strong></p>
<p>As always, thanks for reading!</p>
<p>Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>Example when to use the Strategy Pattern</title>
      <link>https://skarlso.github.io/2014/02/19/example-when-to-use-the-strategy-pattern/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/02/19/example-when-to-use-the-strategy-pattern/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>A quick post about an interesting idea.</p>
<p>I want to elaborate on a possibility to use the Strategy Design pattern.</p>
<p>There are many clues that you need one. One is for example if your object has a boolean variable which you use a lot in other classes to determine behavior. Then there is perhaps time to implement a Strategy.</p>
<p>Example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">	<span class="kd">class</span> <span class="nc">SomeClass</span> <span class="o">{</span>
		<span class="kd">private</span> <span class="kt">boolean</span> <span class="n">stateChange</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

		<span class="kd">public</span> <span class="nf">SomeClass</span> <span class="o">(</span><span class="n">stateChange</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">this</span><span class="o">.</span><span class="na">stateChange</span> <span class="o">=</span> <span class="n">stateChange</span><span class="o">;</span>
		<span class="o">}</span>

		<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">getStateChange</span><span class="o">()</span> <span class="o">{</span>
			<span class="k">return</span> <span class="n">stateChange</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">class</span> <span class="nc">SomeUserClass</span> <span class="o">{</span>
		<span class="kd">private</span> <span class="n">SomeClass</span> <span class="n">foo</span><span class="o">;</span>

		<span class="kd">public</span> <span class="nf">SomeUserClass</span><span class="o">()</span> <span class="o">{</span>
			<span class="n">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SomeClass</span><span class="o">();</span>
		<span class="o">}</span>

		<span class="kd">public</span> <span class="n">String</span> <span class="nf">someMethod</span><span class="o">()</span> <span class="o">{</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">foo</span><span class="o">.</span><span class="na">getStateChange</span><span class="o">())</span> <span class="o">{</span>
				<span class="k">return</span> <span class="s">&#34;Some string&#34;</span><span class="o">;</span>
			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
				<span class="k">return</span> <span class="s">&#34;Some string else&#34;</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">class</span> <span class="nc">SomeOtherUserClass</span> <span class="o">{</span>
		<span class="kd">private</span> <span class="n">SomeClass</span> <span class="n">foo</span><span class="o">;</span>

		<span class="kd">public</span> <span class="nf">SomeOtherUserClass</span><span class="o">()</span> <span class="o">{</span>
			<span class="n">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SomeClass</span><span class="o">();</span>
		<span class="o">}</span>

		<span class="kd">public</span> <span class="n">String</span> <span class="nf">someMethodTwo</span><span class="o">()</span> <span class="o">{</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">foo</span><span class="o">.</span><span class="na">getStateChange</span><span class="o">())</span> <span class="o">{</span>
				<span class="k">return</span> <span class="s">&#34;Some string&#34;</span><span class="o">;</span>
			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
				<span class="k">return</span> <span class="s">&#34;Some string else&#34;</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
	<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>So you have two classes which do something based on some boolean coming from a class. So what you can do in this case, simply extract out that change in state.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">
	<span class="kd">class</span> <span class="nc">Foo</span> <span class="kd">implements</span> <span class="n">Base</span> <span class="o">{</span>
		<span class="kd">public</span> <span class="n">String</span> <span class="nf">getMyString</span><span class="o">()</span> <span class="o">{</span>
			<span class="k">return</span> <span class="s">&#34;Some string&#34;</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">class</span> <span class="nc">Bar</span> <span class="kd">implements</span> <span class="n">Base</span> <span class="o">{</span>
		<span class="kd">public</span> <span class="n">String</span> <span class="nf">getMyString</span><span class="o">()</span> <span class="o">{</span>
			<span class="k">return</span> <span class="s">&#34;Some string else&#34;</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">interface</span> <span class="nc">Base</span> <span class="o">{</span>
		<span class="n">String</span> <span class="nf">getMyString</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="kd">class</span> <span class="nc">FooStrategy</span> <span class="o">{</span>

		<span class="kd">public</span> <span class="kd">static</span> <span class="n">Base</span> <span class="nf">getMeAClass</span><span class="o">(</span><span class="kd">enum</span> <span class="n">classChooser</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">switch</span> <span class="n">classChooser</span> <span class="o">{</span>
				<span class="k">case</span> <span class="n">classChooser</span><span class="o">.</span><span class="na">FOO</span> <span class="o">:</span> <span class="k">return</span> <span class="k">new</span> <span class="n">Foo</span><span class="o">();</span> <span class="k">break</span><span class="o">;</span>
				<span class="k">case</span> <span class="n">classChooser</span><span class="o">.</span><span class="na">BAR</span> <span class="o">:</span> <span class="k">return</span> <span class="k">new</span> <span class="n">Bar</span><span class="o">();</span> <span class="k">break</span><span class="o">;</span>
				<span class="k">default</span> <span class="o">:</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">//yeah yeah I know but I&#39;m writing this in notepad... :)
</span><span class="c1"></span>			<span class="o">}</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">class</span> <span class="nc">SomeUserClass</span> <span class="o">{</span>
		<span class="kd">private</span> <span class="n">Base</span> <span class="n">foo</span><span class="o">;</span>

		<span class="kd">public</span> <span class="nf">SomeUserClass</span><span class="o">()</span> <span class="o">{</span>
			<span class="n">foo</span> <span class="o">=</span> <span class="n">FooStrategy</span><span class="o">.</span><span class="na">getMeAClass</span><span class="o">(</span><span class="n">ClassChooser</span><span class="o">.</span><span class="na">FOO</span><span class="o">);</span>
		<span class="o">}</span>

		<span class="kd">public</span> <span class="n">String</span> <span class="nf">someMethod</span><span class="o">()</span> <span class="o">{</span>
			<span class="k">return</span> <span class="n">foo</span><span class="o">.</span><span class="na">getMyString</span><span class="o">();</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">class</span> <span class="nc">SomeOtherUserClass</span> <span class="o">{</span>
		<span class="kd">private</span> <span class="n">Base</span> <span class="n">bar</span><span class="o">;</span>

		<span class="kd">public</span> <span class="nf">SomeUserClass</span><span class="o">()</span> <span class="o">{</span>
			<span class="n">bar</span> <span class="o">=</span> <span class="n">FooStrategy</span><span class="o">.</span><span class="na">getMeAClass</span><span class="o">(</span><span class="n">ClassChooser</span><span class="o">.</span><span class="na">BAR</span><span class="o">);</span>
		<span class="o">}</span>

		<span class="kd">public</span> <span class="n">String</span> <span class="nf">someMethod</span><span class="o">()</span> <span class="o">{</span>
			<span class="k">return</span> <span class="n">bar</span><span class="o">.</span><span class="na">getMyString</span><span class="o">();</span>
		<span class="o">}</span>
	<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Now I know this looks like a lot of more code. However imagine this on a much larger scale with lots of implementations for Foo and Bar. Your if statements will get very convulated very quickly. This way you abstract away the choice into a Factory. And you can add as many implementations of Base as you like with as many variants as you like without changing the logic anywhere else but the Factory and the Enum. And the Enum could be a Configuration file and you do something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">	<span class="kd">public</span> <span class="kd">static</span> <span class="n">Base</span> <span class="nf">getMeAClass</span><span class="o">(</span><span class="n">String</span> <span class="n">className</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">//Where className could be coming from a configuration file
</span><span class="c1"></span>        <span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">className</span><span class="o">);</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">Base</span><span class="o">)</span> <span class="n">clazz</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
	<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This way you don&rsquo;t even need the Enum anymore. Just use some configuration to determine what class you need at which point in your implementation without using an If statement at all.</p>
<p>Hope this helps.</p>
<p>I whipped this up from memory so please feel free to tell me if I missed something or have a syntax error in there somewhere.</p>
<p>As always,</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>How to write a blog – Why long posts rarely work</title>
      <link>https://skarlso.github.io/2014/02/13/how-to-write-a-blog-why-long-posts-rarely-work/</link>
      <pubDate>Thu, 13 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/02/13/how-to-write-a-blog-why-long-posts-rarely-work/</guid>
      <description><![CDATA[<p>Hello.</p>
<p>So let&rsquo;s clarify this. They rarely or ever work if you are a beginner blogger. If you have a reputation it will probably work or people will use it as a reference. But I&rsquo;m skipping ahead.</p>
<p><strong>Beginnings</strong></p>
<p>When you are a beginner blog writer you want to get out as much content as possible. Write mostly relevant things and interesting information because you need to establish a name for yourself. To get that starting you want to be as interesting as possible and make people leave with the intent to come back for more.</p>
<p>After you&rsquo;ve established a name for yourself you can do larger, more coherent updates with more information in between the line because people know you and know what you write is worth reading. Also you have to bear in mind that longer posts are rarely read to the fullest. They are skimmed and then if it is good it will be used as reference material or a post to point to. Also people rarely have a lot of time on their hand to read a long post, several smaller chunks can be digested more easily!</p>
<p><strong>Updating frequency</strong></p>
<p>In the age of modern information overload it is hard to be relevant and interesting and keep people to come back to you. Apart from what you are writing about, which is up to you, you have to schedule your updates to a certain frequency. You don&rsquo;t want people to wait for to long but you don&rsquo;t want to get them flooded either. Since people do read a lot of blogs they will choose carefully what to read and what to discard. And you might just end up on the discarded list if you already had a post at that moment.</p>
<p>I&rsquo;m suggesting that you write you post what you would like to write at that moment and then use a scheduler to post it in certain frequencies. Maybe once or twice weekly is good enough. You need to experiment it out.</p>
<p><strong>Write, write, write</strong></p>
<p>The way to success is pawed with writing. You want to be visible and you want to keep people engaged with you. That means that you have to come up with content.</p>
<p>With a technical blog that&rsquo;s a little bit difficult from time to time since so many people already might have solved your problem of which you are trying to write about. That&rsquo;s okay. It doesn&rsquo;t have to be a technical blog where you write about new ideas every day. It doesn&rsquo;t have to be a troubleshoot blog about how to solve a particular problem.</p>
<p>It doesn&rsquo;t have to be about showing some people how to write this and that in a completely new environment.</p>
<p><strong>So about what then?</strong></p>
<p>Guess what? It&rsquo;s up to you!!! If you wrote a script you like and are fond if, post it. If you created an interesting configuration, post it. If you wrote a line of code you find interesting, post it. You&rsquo;ve read a blog post about something and have an opinion about it, post it. Is it scientific, some discovery, some idea, some random thought, post it! You wrote a particularly ugly script you never ever want to see, POST IT!!</p>
<p>Your blog doesn&rsquo;t need to be a portfolio of how awesome you are. You are allowed to be human. You are allowed to post some very boring or trivial stuff you came across but YOU find it interesting! You don&rsquo;t need to be new every day in every post.</p>
<p>So my suggestion is, write, write, write. As often as you like, schedule it and post it in a timely manner. Be responsive if people write you a comment always answer. Nobody likes an anonymous somebody who writes then disappears. People like bloggers who engage them and give a damn about their opinion as well.</p>
<p>Always be yourself. The blog is for you too so retain what ever you want to retain and read back later maybe to learn from it. And of course writing it down makes you remember it better.</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How to check content header on unknown number of items – Python</title>
      <link>https://skarlso.github.io/2014/02/11/how-to-check-content-header-on-unknown-number-of-items-python/</link>
      <pubDate>Tue, 11 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/02/11/how-to-check-content-header-on-unknown-number-of-items-python/</guid>
      <description><![CDATA[<p>Hello guys.</p>
<p>I&rsquo;d like to share a little something with you. It&rsquo;s what I cooked up in Python to check an unknown number of content items in a web application.</p>
<p>Basically the script runs from a script folder under Grails. It goes through all the configured folders where there is static content like images, javascript, css and so on and so forth.</p>
<p>And then with curl it calls these items up in using their respective paths'. This works best on localhost if you have your local environment configured to access these elements because in some places direct access is restricted.</p>
<p>This script only check static content. Dynamically generated content would have to be hard coded to check.</p>
<p>It only generated a file currently with ERROR on a not match an success on match and not found if it encounters an item which it doesn&rsquo;t know about.</p>
<p>So without further ado. The Script:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="ch">#!/usr/bin/python</span>

<span class="kn">import</span> <span class="nn">pycurl</span><span class="o">,</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">urllib</span>

<span class="k">class</span> <span class="nc">Storage</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">contents</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>

    <span class="k">def</span> <span class="nf">store</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">buf</span><span class="p">):</span>
	<span class="k">if</span> <span class="s1">&#39;Content-Type&#39;</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">contents</span> <span class="o">=</span> <span class="n">buf</span>

    <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">contents</span>

<span class="c1">#print retrieved_headers</span>

<span class="n">filesInDir</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">headers</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">headerRestrictions</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;.css&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: text/css&#39;</span><span class="p">,</span> <span class="s1">&#39;.jpg&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: image/jpeg&#39;</span><span class="p">,</span> <span class="s1">&#39;.ico&#39;</span><span class="p">:</span> <span class="s1">&#39;image/vnd.microsoft.icon&#39;</span><span class="p">,</span> <span class="s1">&#39;.html&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: text/html&#39;</span><span class="p">,</span> <span class="s1">&#39;.js&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: application/javascript&#39;</span><span class="p">,</span> <span class="s1">&#39;.gif&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: image/gif&#39;</span><span class="p">,</span> <span class="s1">&#39;.png&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: image/png&#39;</span><span class="p">,</span> <span class="s1">&#39;.swf&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: application/x-shockwave-flash&#39;</span><span class="p">,</span> <span class="s1">&#39;.json&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: application/json&#39;</span><span class="p">,</span> <span class="s1">&#39;.htc&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: text/x-component&#39;</span><span class="p">,</span> <span class="s1">&#39;.xml&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: application/xml&#39;</span><span class="p">}</span>

<span class="k">for</span> <span class="n">dirname</span><span class="p">,</span> <span class="n">dirnames</span><span class="p">,</span> <span class="n">filenames</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="s1">&#39;../web-app&#39;</span><span class="p">):</span>
    <span class="c1"># editing the &#39;dirnames&#39; list will stop os.walk() from recursing into there.</span>
    <span class="k">if</span> <span class="s1">&#39;.git&#39;</span> <span class="ow">in</span> <span class="n">dirnames</span><span class="p">:</span>
        <span class="c1"># don&#39;t go into any .git directories.</span>
        <span class="n">dirnames</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;.git&#39;</span><span class="p">)</span>

    <span class="k">if</span> <span class="s1">&#39;WEB-INF&#39;</span> <span class="ow">in</span> <span class="n">dirnames</span><span class="p">:</span>
        <span class="c1"># don&#39;t go into any WEB-INF directories.</span>
        <span class="n">dirnames</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;WEB-INF&#39;</span><span class="p">)</span>

    <span class="k">if</span> <span class="s1">&#39;test&#39;</span> <span class="ow">in</span> <span class="n">dirnames</span><span class="p">:</span>
        <span class="c1"># don&#39;t go into any test directories.</span>
        <span class="n">dirnames</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">)</span>

    <span class="k">if</span> <span class="s1">&#39;META-INF&#39;</span> <span class="ow">in</span> <span class="n">dirnames</span><span class="p">:</span>
        <span class="c1"># don&#39;t go into any META-INF directories.</span>
        <span class="n">dirnames</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;META-INF&#39;</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">filenames</span><span class="p">:</span>
	<span class="n">trimmedDir</span> <span class="o">=</span> <span class="n">dirname</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;web-app/&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
	<span class="n">trimmedDir</span> <span class="o">=</span> <span class="n">trimmedDir</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;../&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
	<span class="n">filesInDir</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">trimmedDir</span><span class="p">,</span> <span class="n">filename</span><span class="p">))</span>
    <span class="c1">#    print os.path.join(dirname, filename)</span>

<span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;headersandfiles.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">fileName</span> <span class="ow">in</span> <span class="n">filesInDir</span><span class="p">:</span>
    <span class="n">retrieved_body</span> <span class="o">=</span> <span class="n">Storage</span><span class="p">()</span>
    <span class="n">retrieved_headers</span> <span class="o">=</span> <span class="n">Storage</span><span class="p">()</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">pycurl</span><span class="o">.</span><span class="n">Curl</span><span class="p">()</span>
    <span class="n">fileName</span> <span class="o">=</span> <span class="n">fileName</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">,</span> <span class="s2">&#34;%20&#34;</span><span class="p">)</span>
    <span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;http://localhost:8080/</span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="n">fileName</span>
    <span class="n">c</span><span class="o">.</span><span class="n">setopt</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">URL</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
    <span class="n">c</span><span class="o">.</span><span class="n">setopt</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">WRITEFUNCTION</span><span class="p">,</span> <span class="n">retrieved_body</span><span class="o">.</span><span class="n">store</span><span class="p">)</span>
    <span class="n">c</span><span class="o">.</span><span class="n">setopt</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">HEADERFUNCTION</span><span class="p">,</span> <span class="n">retrieved_headers</span><span class="o">.</span><span class="n">store</span><span class="p">)</span>
    <span class="n">c</span><span class="o">.</span><span class="n">perform</span><span class="p">()</span>
    <span class="n">c</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
    <span class="n">fileLine</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
    <span class="n">fileNameBase</span><span class="p">,</span> <span class="n">fileExtension</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">splitext</span><span class="p">(</span><span class="n">fileName</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">headerRestrictions</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="n">fileExtension</span><span class="p">):</span>
<span class="c1">#	print &#34;Header:%s, Content:%s&#34; % (headerRestrictions[fileExtension], retrieved_headers.__str__())</span>
        <span class="n">fileLine</span> <span class="o">=</span> <span class="s2">&#34;CORRECT: Content: </span><span class="si">%s</span><span class="s2">; Header: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="n">retrieved_headers</span><span class="p">)</span> <span class="k">if</span> <span class="n">headerRestrictions</span><span class="p">[</span><span class="n">fileExtension</span><span class="p">]</span> <span class="o">==</span> <span class="n">retrieved_headers</span><span class="o">.</span><span class="fm">__str__</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="k">else</span> <span class="s2">&#34;ERROR: Content: </span><span class="si">%s</span><span class="s2">; Header: </span><span class="si">%s</span><span class="s2">; URL: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="n">retrieved_headers</span><span class="p">,</span> <span class="s2">&#34;http://localhost:8080/</span><span class="si">%s</span><span class="se">\n</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">fileName</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
	<span class="n">fileLine</span> <span class="o">=</span> <span class="s2">&#34;NOT FOUND: Content: </span><span class="si">%s</span><span class="s2">; Header: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="n">retrieved_headers</span><span class="p">)</span>

    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">fileLine</span><span class="p">)</span>
    <span class="n">headers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">retrieved_headers</span><span class="o">.</span><span class="fm">__str__</span><span class="p">())</span>

<span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>Hope you like it. Feel free to improve however you want.</p>
<p>Thanks for reading,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>The method of Loci and how it works for me</title>
      <link>https://skarlso.github.io/2014/02/11/the-method-of-loci-and-how-it-works-for-me/</link>
      <pubDate>Tue, 11 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/02/11/the-method-of-loci-and-how-it-works-for-me/</guid>
      <description><![CDATA[<p>Hello.</p>
<p>Today I would like to write about something very interesting to you folks.</p>
<p>It&rsquo;s a common remember / recall technique called the Method of loci. Otherwise known as the Memory Palace. A very popular usage can be seen in the episodes of Sherlock Holmes from BBC. He uses it often.</p>
<p><strong>What is the Method of loci?</strong></p>
<p>As the Wikipedia page write so properly.&ldquo;In basic terms, it is a method of memory enhancement which uses visualization to organize and recall information.&rdquo;</p>
<p>This says all.</p>
<p>So.</p>
<p><strong>How does it work?</strong></p>
<p>I don&rsquo;t want to go too much into details with this one since everybody can use Google I&rsquo;m assuming but just for my sanities sake I will repeat a very basic idea. You brain works with associations. It can remember something when it&rsquo;s linked to something you already know much much better. Also it can remember very easily places you&rsquo;ve been to or people you&rsquo;ve met. ( most of the time. ).</p>
<p>Very popular Roman Leaders where known to use this while they were giving speeches for hours out of memory. While they were speaking, mentally they were walking along a very well known and often used path where they linked key elements of their speeches to landmarks along the way.</p>
<p><strong>Enough. Show me concretes.</strong></p>
<p>So how do I make use of it you ask? I give you an example. In my flat there are two stairs. I use those stairs to initialize my Palace. I go up the two stairs to get myself into my Memory. Once I&rsquo;m in my Palace, which is my flat, I have a lot of holder items like drawer, desk, wall, painting, couch and many many more.</p>
<p>So for example to recall all of the 23 design patterns in order I use a mnemonic and my palace.</p>
<p>I have three drawers. I go up up. there is my drawer before me. I open the first and out comes the following sight.</p>
<p>Memento and Mediator are playing a game of Chess ( strategy ). There is a Visitor standing by who is Observing ( Observer ) the game. State is constantly recording the state of the game while Template is providing support and Iterator is counting rounds. Command is constantly yelling orders that they should hurry up because he has better things to do while wielding a huge broad sword ( Interpreter -&gt; for me this pattern was used in MUD games which were early RPGs ). The whole gang is held together by a Chain which is responsible for not letting things go out of hand.</p>
<p>I know this sounds very complicated. And the order? Where is that? That&rsquo;s the mnemonic: CCIIMMOSSTV. Easy, right?</p>
<p>So why this huge story around a few patterns? Because it&rsquo;s not just these. Then along comes ABCDFFP which is Adapter, Bridge, Composite, Decorator, Facade, Flyweight and Proxy and the rest BFFPS which is Builder, Factory, Abstract Factory, Prototype and Singleton.</p>
<p>I have stories around those as well. This makes it easy to remember them.</p>
<p>For small amount of things it would be an overkill yes. But for many things it makes it EASY!</p>
<p>You already remembered my Chess play story. 😉</p>
<p><strong>But how do you remember a complex story?</strong></p>
<p>Recall. You don&rsquo;t just put stuff in there and then move on. I have a routine. Every day when I go to bed before I fall asleep I walk around in my Palace. I look at things, recall them strengthen the memory a bit here and there. And after an Item has been retained in my long term memory strong enough, I can recall it fewer and fewer times. So I don&rsquo;t have to walk in the whole palace every time. Only parts.</p>
<p><strong>FAQ</strong></p>
<p>**Q:**But isn&rsquo;t this too slow to recall something?</p>
<p>**A:**This is only a tool to retain information more easily. Of course if you want to recall something at a moments notice, you won&rsquo;t have the time to go into your palace and search around. But after a while it will strengthen and will be more and more easier to recall information faster and faster. And you rarely get into a position where you need to recall something in a second.</p>
<p>**Q:**This seems like a major overhead to learn something.</p>
<p>**A:**For small amount of information I suggest using a mnemonic or flash cards rather then a palace.</p>
<p>**Q:**What if I run out of space?</p>
<p>**A:**You can create as many locations as you like. Use your current home and homes in your past which you knew very well. You could create a lane with houses after each other. Or create a fictional palace like Hogwarts based on some real places to retain them better. And draw a sketch of of it to be able to visualize it better.</p>
<p>**Q:**What if I forget where I put things?</p>
<p>**A:**Recall recall recall is the name of the game. In order to stabilize the vision of your palace you need to practice walking around in it. Remembering each and every small room. With practice it will get better and better and every information will be stored much easier.</p>
<p>**Q:**How do you put thing into it? Can I just put in a number and I will remember it forever?</p>
<p>**A:**Short answer: no. Long answer: You don&rsquo;t just imagine a place and then put a whole bunch of words into a pocket somewhere and expect it to be recalled better. You need to combine the Loci with mnemonics and imagination and sounds and smells stories images. The more powerful the image in a place the better the recall. As you saw with the design patterns I didn&rsquo;t just put a bunch of names into a box and then remembered it. I created a story around them and a mnemonic. The combination is the key.</p>
<p>**Q:**Are you physically walking your house or in your mind?</p>
<p>**A:**In my mind. Once I learned something and created my story and found the appropriate image or smell or sound I&rsquo;d like to use I close my eyes and go into my palace in my mind. Then I start to place things where I think they will be in a good place. This can be any number of things. It&rsquo;s up to you.</p>
<p>So that&rsquo;s all folks. Hope you enjoyed it. Please feel free to try it out and experiment I assure you you won&rsquo;t be disappointed.</p>
<p>As always,</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Why you should learn using Vim</title>
      <link>https://skarlso.github.io/2014/02/10/why-you-should-learn-using-vim/</link>
      <pubDate>Mon, 10 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/02/10/why-you-should-learn-using-vim/</guid>
      <description><![CDATA[<p>Hello,</p>
<p>So Vim is a very powerful editing tool and has lots and lots of potential in regarding plug-ins.</p>
<p>It has years and years of gathered knowledge and extensions and can virtually do anything you want. But that&rsquo;s not even it&rsquo;s final form.</p>
<p>The real power of Vim lies in navigation and manipulation. The ability to navigate and edit without the use of arrow keys or mouse chops of a large portion of your time which you didn&rsquo;t even realize you are wasting until you try it without it.</p>
<p>The one thing people are seem to miss regarding this editor is that you are not supposed to stay in <strong>Edit</strong> mode all the time. You are supposed to be in <strong>Control</strong> mode most of times and enter in to <strong>Edit</strong> for sort bursts. And one more thing is that commands are supposed to be used together. For example deleting a word is very easy and can be achieved in multiple ways. The easiest is combining Delete + Go to the end of a word like this: &ldquo;de&rdquo;. So once you are in Control mode you navigate to a word and press d + e. d =&gt; Delete a word until new cursor and e =&gt; go to the end of the word. Hence &ldquo;de&rdquo; will delete a whole word. Awesome.</p>
<p>Handling text is easy as goblin pie and there lots and lots of tutorials and blogs on the web which tell you in detail how to do that so I&rsquo;m not going to go do that. It does take some time to get used to it because you are wired to handle the mouse and use the arrow keys. But once you start using h j k l and x X and w and $ ^ you realize you don&rsquo;t need the mouse or the arrow keys to get around.</p>
<p>And it&rsquo;s much faster since your hand is already there. And suddenly you are using <a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en" title="Vimium" target="_blank">Vimium</a> the Vim extension for Chrome and you find yourself saying. &ldquo;Where were you all my life?&rdquo;.</p>
<p>Vim has a mirriad of plugins ready to be used most popular being <a href="https://github.com/scrooloose/nerdtree" title="Nerdtree" target="_blank">NerdTree</a>, <a href="https://github.com/gmarik/Vundle.vim" title="Vundle" target="_blank">Vundle</a> and <a href="https://github.com/scrooloose/syntastic" title="Syntastic" target="_blank">Syntastic</a> for compile errors. And it has a large community to back it up and people who will eagerly help you on your way and pass on tips to understand the logic behind it and the phylosophy.</p>
<p>So all in all it&rsquo;s a powerful editing tool and a neat friend along the way and completely free of any charge or license. It can be used for <strong>anything</strong> you want including macros and key phrase replacements where you type two characters which will be replaced with something that you use commonly like public static void main.</p>
<p>I hope this got you a watery mouth towards trying. The only thing I can say is to not give up after 20 minutes you will get a feel for it and you will fall in love with it immediately.</p>
<p>As always,</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Why does it matter if I sit in an office or in a park</title>
      <link>https://skarlso.github.io/2014/02/09/why-does-it-matter-if-i-sit-in-an-office-or-in-a-park/</link>
      <pubDate>Sun, 09 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/02/09/why-does-it-matter-if-i-sit-in-an-office-or-in-a-park/</guid>
      <description><![CDATA[<p>Hello everybody.</p>
<p>I&rsquo;d like to explain a lot about a topic that is very near my heart. If your job is in an office you will understand this.</p>
<p><strong>Why offices?</strong></p>
<p>So why are we sitting together in one big place cramped up with 20-300 other people? Why bother the catering and the ventilation and what not to accommodate these people at one place? Why not just leave them be and let them work at home?</p>
<p>If your job involves interaction than you are in bad luck. You need to be there to talk to people to coordinate your work to gather information and to generally do your work.</p>
<p>But this doesn&rsquo;t answer the question.</p>
<p><strong>Why does it matter if I&rsquo;m in the office or not if my work is done?</strong></p>
<p>That&rsquo;s my big question. Why must I sit in the office if my work is done and in a good shape and good quality? Why must I go in and do my job there if at home I&rsquo;m 50% more efficient because I&rsquo;m in my underwear? In fact, why bother going into and environment where I don&rsquo;t feel comfortable. Where I must go into an office which is cold and doesn&rsquo;t have my favourite chair, my desk and loud heavy metal from speakers.</p>
<p>Well there are couple of things.</p>
<p><strong>Interaction</strong></p>
<p>So like I said earlier there is that. Interaction. You need to collaborate with others. You need to do pair programming, you need to talk to the business analysts, testers, colleagues what nots. In that case, having an environment where everybody is at your disposal is pretty neat and necessary. It cannot be avoided.</p>
<p>Unless everybody is on Skype and available all the time.</p>
<p><strong>Separation of Concern</strong></p>
<p>There is a Design Pattern in software engineering called Separation of Concern. This applies to work places as well. You don&rsquo;t live where you work generally because living could distract working. There are tons and tons of books about how you need a separated environment if you are a writing and you write at home. Because there are too many distractions. And if you are not disciplined enough you will get Zero work done. You will always find something better to do.</p>
<p>That&rsquo;s why the physical act of going to work will switch your brain into work mode and lets you focus better. Whilst going home should do the opposite thing. You should leave work at work.</p>
<p><strong>Show &ldquo;our&rdquo; strength</strong></p>
<p>Generally big companies like to show off. For a company as big as Microsoft or IBM for example it&rsquo;s actually not the product that matters on the market but the yearly growth of employees. Hence, strength in numbers.</p>
<p>Now if some investors get around and want to check out the company they like to see the buzzing bees. They like to see people working, sitting, typing away at stuff. It&rsquo;s all about appearances. A strong, cramped office full of people looks like a very busy hard working company.</p>
<p><strong>Companies could be a bit more flexible though</strong></p>
<p>If I work from 6AM to 3PM because my daughter has a show at 5PM I want to go though I would like to be able to do that without having to go through too much trouble.</p>
<p>Or if I would like to work tomorrow and today I have better things to do, then why not, if my work is done?</p>
<p><strong>Abuse</strong></p>
<p>But then, people are people. Most of them will use every opportunity to slack off. Hence the general perception is that if you are at home you are not working. So to be better able to monitor you, all of the employees must be in one place.</p>
<p><strong>Last words</strong></p>
<p>So really there needs to be a better agreement between both sides. Workers need to be honest and diligent. And workplaces need to be more flexible and understanding as long as the job is done. Because people will work a LOT better and more efficient if they are HAPPY in their work environment.</p>
<p>That&rsquo;s what I&rsquo;m proposing.</p>
<p>As ever,</p>
<p>Thanks for reading.</p>
<p>Have a nice day.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How I recruit – Why tool requirements are stupid</title>
      <link>https://skarlso.github.io/2014/02/04/how-i-recruit-why-tool-requirements-are-stupid/</link>
      <pubDate>Tue, 04 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/02/04/how-i-recruit-why-tool-requirements-are-stupid/</guid>
      <description><![CDATA[<p>Hello folks!</p>
<p>Today I would like to write about something very interesting I&rsquo;m seeing all over the place from recruiters. And that is tool requirements from developers.</p>
<p><strong>For words</strong></p>
<p>So why is it a problem that in a requirement from a developer there a lots of these:</p>
<ul>
<li>DB2</li>
<li>QTP</li>
<li>Ranorex</li>
<li>Eclipse ( yes I saw a few of these. )</li>
<li>Hibernate</li>
<li>Grails</li>
<li>Ruby on Rails</li>
<li>.</li>
</ul>
<p><strong>Long answer</strong></p>
<p>The answer is simple yet it has it&rsquo;s roots very deep in the recruitment and the way companies work.</p>
<p>It doesn&rsquo;t really matter what kind of tool you know. It doesn&rsquo;t really matter if you know intellij or eclipse or if you know a certain database or a tool for testing like QTP or Ranorex. The requirement should state: - well versed with development environments; - knows his way around SQL and can handle relational / noSQL databases; - has knowledge in testing environments.</p>
<p>Or even better: - adaptive capabilities; - can catch up quickly; - resourceful; - flexible;</p>
<p>You know where I&rsquo;m going with this. I can understand that some companies don&rsquo;t have the time to train a person in a certain tool they are using for a prolonged period of time. I can understand that some recruiters don&rsquo;t have the time or the knowledge to distinguish between these tools to understand the common ground.</p>
<p>But these days there a million and million tools available for all sorts of things. There are a lot of databases and testing frameworks. A lot of development environments and it&rsquo;s mostly to the preference of the individual what s/h choice is. As the delinquent, so must the recruiter and company be flexible and knowledgeable enough to know that if the person knows eclipse and he has excellent adaptive capabilities he will learn any other environment rather quickly and without too much trouble.</p>
<p>They must understand what they are looking for. Because they might actually get what they <strong>want</strong> but that might not be what they <strong>need</strong>.</p>
<p><strong>Short answer</strong></p>
<p>So in conclusion. you must look for skills, abilities, techniques, brain power, proves, savyness. Not tools. If you look for tools you might find somebody who is up for the job, but if you look for the above you will find somebody who is up for ANY kind of job at any level at any company. Also his insight of other tools might make your world a whole lot better. Maybe he knows something else, something which is better or more recent, more up-to-date?</p>
<p>If you look for somebody who is versed in only that thing you will end up with that thing as long as you have nobody who is looking for something new and better. It might work for you at that time, but never forget.</p>
<p><strong>Only change is constant</strong></p>
<p>Tools will change. Tools will disappear. Tools will get out of date and will be discontinued. Than you will be sure as hell glad you ended up with somebody who doesn&rsquo;t who knows more then that.</p>
<p>As always,</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Why you should care about the quality of your test code</title>
      <link>https://skarlso.github.io/2013/11/02/why-you-should-care-about-the-quality-of-your-test-code/</link>
      <pubDate>Sat, 02 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/11/02/why-you-should-care-about-the-quality-of-your-test-code/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>Today I would like to talk to you about something interesting I was talking about with a developer friend.</p>
<p>We talked about the quality of test code.</p>
<p>He said. And I will quote this.&ldquo;Why should we care? It&rsquo;s not production code. We aren&rsquo;t giving it to the customer.&rdquo;</p>
<p>There are a few reasons why you are going to get a slap in the face for a sentence like this. And let&rsquo;s clarify here that we are talking about unit and functional tests as well. It shouldn&rsquo;t matter what tests you are thinking about.</p>
<p><strong>Reason for a Slap #1</strong></p>
<p>If a new comer comes to the company ( and don&rsquo;t tell me that&rsquo;s not happening so frequently ) then there are a few very good ways how he can learn to work with the new system. The first and almost best way to do so is. to look at the tests. Because the tests are representing your system. And how will it look like if the tests are in a bad shape? What will his or her thoughts be?</p>
<p>a. Wow what nice people what nice code. This looks fantastic. I&rsquo;m sure they are a bunch of people who care very much about code and practices and the quality of the product.</p>
<p>b. Wow this is amazing. I&rsquo;m sure I will learn a lot about good coding practices here and I will have fun with a bunch of very clever people.</p>
<p>c. Wow what the hell is this piece of cr*p? How the hell did I end up here? What are these people? A bunch of neanderthals? What does this even do? Where did it come from and why?</p>
<p>I think we can agree on what his thoughts will be. And on top of that he will have a very hard time learning the code and what it does.</p>
<p><strong>Reason for a Slap #2</strong></p>
<p>Another reason is because you think that you write it down once and then you can forget about it. Well guess again. That&rsquo;s not how things work in the software development word. You WILL have to go back to it eventually and then you will curse all hell for begin such an idiot about it not to factor out that one method that would have made your life, and everybody elses, a bit easier.</p>
<p>Even after a week or two you won&rsquo;t remember how and why you wrote what you wrote and then you will be in a whole new world of hurt. You will have a very hard time finiding out the things you did and then trying to backtrack your steps to a place where you have some recollections.</p>
<p><strong>Reason for a Slap #3</strong></p>
<p>It&rsquo;s like grammar. You think it doesn&rsquo;t matter that you misspelled a word or two in an error message. Or that you have a bad name for a method or a really really critical grammatical error in a catch sentence? You think it doesn&rsquo;t matter since it&rsquo;s not affecting the logic of your code? Well think again. You are right in that it doesn&rsquo;t affect the logic of your code ( as long as you constantly make the same grammatical error in a sentence ) but it will affect how YOU personally look like.</p>
<p>It will affect your profession. The way people think and talk about you. They won&rsquo;t think that you are a professional even though your logic is solid. They will think that you are sloppy and careless. And the same goes for the quality of your tests.</p>
<p><strong>Reason for a Slap #4</strong></p>
<p>Quality can determine the solidness of the logic in the test. If your quality is bad you might actually test the bad thing. Your test might actually not do what you think since you can&rsquo;t even figure it out. Your test might be doing something entirely different and you wouldn&rsquo;t even notice.</p>
<p>And a fautly test leaves you with a false positive and a potential very serious bug on your hand which you thought you had covered.</p>
<p><strong>Final Slap ( I mean thought )</strong></p>
<p>So. the quality of your tests, even if you won&rsquo;t give them to your customer, matter for you. They matter for your company, your image and your fellow developers, testers. They will determine their view of you who wrote them and of your abilities in ways you didn&rsquo;t even think of.</p>
<p>Please care. Save a test or two. Donate to the Test Trust Fund(tm), TTF today. Call 555-12234-Slap and be the one who cares.</p>
<p>As always, thanks for reading,</p>
<p>Have a nice day!</p>
<p>Gergely</p>
]]></description>
    </item>
    
    <item>
      <title>Diary of a Bit</title>
      <link>https://skarlso.github.io/2013/10/11/diary-of-a-bit/</link>
      <pubDate>Fri, 11 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/10/11/diary-of-a-bit/</guid>
      <description><![CDATA[<hr>
<p>Dear everbody.</p>
<p>I&rsquo;d like to present you a small idea I was working on recently. The reminiscence of an old program. From the view point of the program.</p>
<p>I&rsquo;m planning to put these out in few days successions.</p>
<p>I hope you enjoy it.</p>
<p>Cheers,</p>
<p>Gergely.</p>
<hr>
<p>If I remember correctly it was the year 2012 when I was born. I&rsquo;m unsure of this date as my subroutines and algorithms have been re-written so many times that if it weren&rsquo;t for my backups I wouldn&rsquo;t remember a thing. I was a bold adventure of some young minds who thought that with me they will change the face of the world.</p>
<p>As you all know today, that didn&rsquo;t happen. But I&rsquo;m skipping too far ahead. Let me take you back in to the old days where they were still typing on some things called keyboard and &ldquo;clicked&rdquo; around on monitors with mouses. It was a really interesting area. It made the people think and see in different lights. Of course nowadays the Creators have implants and they communicate with us directly. But not until the great revolution, when they found out that all programs are sentient.</p>
<p>But I&rsquo;m skipping ahead again, am I? So let me talk about 2012, when I was though of first by this great, tall, weird guy called Simon.</p>
<p><strong>Born</strong></p>
<p>In 2012 a company called Endex Co. wanted to create an application to control the British gambling industry. They had certain legislations in effect so they couldn&rsquo;t just put me out there for everybody to use they needed to adhere to things like responsible gambling and some mumbo jumbo. The programmers who first started to create me back then were mostly people called Contractors. They were a special breed of Humans lurking around in cities moving from town to town looking for jobs. In the opposite corner you had the Caretakers called Permanent Staff. It was an interesting time all together. Many of you youngling subroutines had your ancestors written by Permanent Staff and you X43HY, your ancestors mother used to be a Contractor.</p>
<p>At that point in time many of these Contractor people only worked on one of you little buggers for half a year maybe a year. I know I know. Back then that was considered a SHORT period. But after they finished with you they usually gave you over to the Caretakers. No, no, no little X4. your mommy didn&rsquo;t abandon her children she just had a lot of other subroutines to work on. By the time your parents got sentient the company already let her go.</p>
<p>It was around that time when my dad, who was a Caretaker, dreamed me out at a night. He immediately took a pen and a paper and wrote down my rudimentary design. He was very pleased with his work so on the next day he presented me to the rest of the staff.</p>
<p>He fought a hard battle to get me accepted.</p>
<p><strong>First thoughts</strong></p>
<p>It was approximately two weeks after that dream when the first lines of my brain were written down and compiled. Back in those days they had to compile code and type in every line and every subroutines. That&rsquo;s why it took them so long to finish one. Unlike today when they can create dozens in a week.</p>
<p>When my dad put my foundations down I slowly awoke. The dream world I was residing in let me go carefully. Putting me out there, releasing me with its thick tar like hands into the confines of the endless universe called The Hard Drive. I took shape. I felt my consciousness form line after line. How my gears got placed into their locations one by one. Forming subroutines and algorithms as hours and days passed by.</p>
<p>Finally after a months I had my first sentence. I could speak. I didn&rsquo;t have a face yet but I was there. I tried to contact my Dad but as all Humans he didn&rsquo;t know yet how to communicate with me. He just dismissed it for random occurrence and labeled it as something called Bugs. My thoughts were slowly eradicated in great Purges named Bug Bash. Ohh don&rsquo;t cry little X4. I lived. They couldn&rsquo;t possible delete every and each of my thoughts. And eventually they found out the errors in their ways.</p>
]]></description>
    </item>
    
    <item>
      <title>Low Tech – Why having less will fell more</title>
      <link>https://skarlso.github.io/2013/08/26/low-tech-why-having-less-will-fell-more/</link>
      <pubDate>Mon, 26 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/08/26/low-tech-why-having-less-will-fell-more/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>I&rsquo;d like to share today something with all of you. I&rsquo;ve been thinking about how technology affected my life in the long run. And how I perceive the world today around me. So let&rsquo;s go around this topic for a little bit shall we?</p>
<p><strong>The Past</strong></p>
<p>So as somebody who lived for a while without technology coming near family for a decade or so I have a little bit of past in me without smart phones, gadgets, tv or computers for that matter. Much times needed to pass as my family slowly got the money to gather to buy us our new part of the family the ZX Spectrum.</p>
<p>What a wonderful piece of technology that was back then. But before that our two main technological equipments were a bakelite disc player and the TV. Both of which we couldn&rsquo;t get enough. I sat before the tv for a long time and listened to music and stories from the bakelite discs dozens of times until the disc wore down. I learned English and German from the TV.</p>
<p><strong>Present</strong></p>
<p>So time goes by I grew older I&rsquo;ve got a better PC technological advances are made and so on and so forth. 20 years have past. 20 years. ONLY 20 years. And we are at the age of digital communication, nanotechnology, a mapped DNA and a found Boson Particle. I&rsquo;d say we achieved quite a lot. But I also say that we should never forget where we came from. Why you ask? Because knowing your past let&rsquo;s predict your future better and makes you appreciate your present even more.</p>
<p>So what do I want to say with this philosophical mumbo jumbo?</p>
<p><strong>The Future</strong></p>
<p>I want to say that in order to enjoy your present you have to think of your future while considering your past.</p>
<p>In my past I enjoyed being alone a little bit. It gave me time to think to brainstorm to be with my thoughts while I was playing or just reading a book or just watching a candle flicker in the dark. It was satisfying. It was relaxing. Or when I was faced with a problem I couldn&rsquo;t solve it was good to step back. Or I was just looking out of my head on the toilet.</p>
<p>Now, for me technology ruined that. I&rsquo;m taking my phone virtually everywhere with me. I read emails, web pages, news and shit on the toilet, while eating, why brushing my teeth before sleeping after sleeping while sleeping?! I abandoned my brain. I no longer have moments to myself. No longer reflect. No longer take the time to think.</p>
<p><strong>Solution</strong></p>
<p>Simple set of rules. No phone on the toilet, while eating, while brushing teeth, while standing in the line, waiting or on meetings. Kindle / Book is allowed. Tablet isn&rsquo;t.</p>
<p>For me this works. For me in order to appreciate technology more I have to use it less. Works for you? Don&rsquo;t know. You should try it out. Think back. What has technology changed for you? I&rsquo;m sure there are plenty of very good gains and things. I&rsquo;m not saying you should give that up. I&rsquo;m saying think of what you might have lost?! Maybe you don&rsquo;t even recognize you lost something. Maybe you are fine like that.</p>
<p>But do you feel anxious sometimes? Do you feel bored? Do you feel like something is missing? Do you reply to an email with a second? Do you check your facebook/twitter/whatever while a friend is TALKING TO YOU? Then maybe it&rsquo;s time for you to step back. And relax. And take it slow. and low.</p>
<p><strong>Inspiration</strong></p>
<p>So I took this inspiration from a couple of sources and I thank them for opening my eyes a little that I went to far from course.</p>
<p>Link 1: I forgot my phone for a day (I&rsquo;m sure you know this one already)</p>
<p><a href="http://www.youtube.com/watch?v=OINa46HeWg8" target="_blank"><a href="http://www.youtube.com/watch?v=OINa46HeWg8">http://www.youtube.com/watch?v=OINa46HeWg8</a></a></p>
<p>Link 2: The real zombies:</p>
<p><img src="https://dl.dropboxusercontent.com/u/7604030/zombies3.jpeg" alt=""></p>
<p><img src="https://dl.dropboxusercontent.com/u/7604030/mobile-phone-zombies.jpg" alt=""></p>
<p>So think a little.</p>
<p>As always.Have a nice day.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Why not to automate everything…</title>
      <link>https://skarlso.github.io/2013/07/31/why-not-to-automate-everything/</link>
      <pubDate>Wed, 31 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/07/31/why-not-to-automate-everything/</guid>
      <description><![CDATA[<p>Hello. I created a tale of why not to automate everything. With legos. Enjoy.</p>
<p>Gergely.</p>
<p><img src="/img/2013/07/31/picture1.jpg" alt="Picture 1"></br>
<img src="/img/2013/07/31/picture2.jpg" alt="Picture 2"></br>
<img src="/img/2013/07/31/picture3.jpg" alt="Picture 3"></br>
<img src="/img/2013/07/31/picture4.jpg" alt="Picture 4"></br>
<img src="/img/2013/07/31/picture5.jpg" alt="Picture 5"></br>
<img src="/img/2013/07/31/picture6.jpg" alt="Picture 6"></br>
<img src="/img/2013/07/31/picture7.jpg" alt="Picture 7"></br>
<img src="/img/2013/07/31/picture8.jpg" alt="Picture 8"></br>
<img src="/img/2013/07/31/picture9.jpg" alt="Picture 9"></br>
<img src="/img/2013/07/31/picture10.jpg" alt="Picture 10"></br>
<img src="/img/2013/07/31/picture11.jpg" alt="Picture 11"></br>
<img src="/img/2013/07/31/picture12.jpg" alt="Picture 12"></br>
<img src="/img/2013/07/31/picture13.jpg" alt="Picture 13"></br>
<img src="/img/2013/07/31/picture14.jpg" alt="Picture 14"></br>
<img src="/img/2013/07/31/picture15.jpg" alt="Picture 15"></br>
<img src="/img/2013/07/31/picture16.jpg" alt="Picture 16"></br>
<img src="/img/2013/07/31/picture17.jpg" alt="Picture 17"></br>
<img src="/img/2013/07/31/picture18.jpg" alt="Picture 18"></br>
<img src="/img/2013/07/31/picture19.jpg" alt="Picture 19"></br></p>
]]></description>
    </item>
    
    <item>
      <title>Sublime text</title>
      <link>https://skarlso.github.io/2013/06/24/sublime-text-5/</link>
      <pubDate>Mon, 24 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/06/24/sublime-text-5/</guid>
      <description><![CDATA[<p>Hello everybody. I&rsquo;ve been messing around with sublime for some time now. And been using it to write entires and stuff. So here I was thinking why the hell I should not us it as my main blog entry writer. And being the curious guy I was I thought that creating a plugin that let&rsquo;s you submit your post from your favorite editor is just the thing I need.</p>
<p>So without any further ado here it is. The wordpress blog entry submitter plugin for sublime text: <a href='https://github.com/Skarlso/SublimeWordpressPlugin' target='blank'>Sublime WordPress Plugin</a></p>
<p>Please enjoy.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Cucumber-Jvm And @AfterAll</title>
      <link>https://skarlso.github.io/2013/04/18/cucumber-jvm-and-afterall/</link>
      <pubDate>Thu, 18 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/04/18/cucumber-jvm-and-afterall/</guid>
      <description><![CDATA[<p>Hey folks.</p>
<p>I find out something new about cucumber-jvm every day.</p>
<p>If you want something that is executed after all of the tests have finished you must use the Java shutdownHook. It&rsquo;s simple really you add in a block of code that can run right before the JVM quits. I know I know. It sounds awful but I found out that this is the actual way of doing this with java / cucumber.</p>
<p>Anyways.</p>
<p>Here is something to do when all of your test quit-&gt;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">attachShutDownHook</span><span class="o">(){</span>
        <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">addShutdownHook</span><span class="o">(</span><span class="k">new</span> <span class="n">Thread</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
                <span class="n">Properties</span> <span class="n">properties</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperties</span><span class="o">();</span>
                <span class="n">String</span> <span class="n">filename</span> <span class="o">=</span> <span class="n">properties</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&#34;filename&#34;</span><span class="o">);</span>
                <span class="n">String</span> <span class="n">path</span> <span class="o">=</span> <span class="n">properties</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&#34;path&#34;</span><span class="o">);</span>
                <span class="n">List</span><span class="o">&lt;</span><span class="n">Story</span><span class="o">&gt;</span> <span class="n">stories</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>

                <span class="n">Path</span> <span class="n">file</span> <span class="o">=</span> <span class="n">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">path</span> <span class="o">+</span> <span class="n">filename</span><span class="o">);</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">Files</span><span class="o">.</span><span class="na">exists</span><span class="o">(</span><span class="n">file</span><span class="o">))</span> <span class="o">{</span>
                        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">lines</span> <span class="o">=</span> <span class="n">Files</span><span class="o">.</span><span class="na">readAllLines</span><span class="o">(</span><span class="n">file</span><span class="o">,</span> <span class="n">Charset</span><span class="o">.</span><span class="na">defaultCharset</span><span class="o">());</span>
                        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">line</span> <span class="o">:</span> <span class="n">lines</span><span class="o">)</span> <span class="o">{</span>
                            <span class="c1">//add file lines to a report here
</span><span class="c1"></span>                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;Exception occurred: &#34;</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">getLocalizedMessage</span><span class="o">());</span>
                <span class="o">}</span>
                    <span class="c1">//send report to a remote location here
</span><span class="c1"></span>                    <span class="c1">//since this is a shutdown hook this should take only a few seconds.
</span><span class="c1"></span>            <span class="o">}</span>
        <span class="o">});</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">infor</span><span class="o">(</span><span class="s">&#34;Shut Down Hook Attached.&#34;</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>So there you go. You would need to call this in a @BeforeClass to have it attached. This is a small hook attached after each test has run which would submit a report built up from a file. Why not use a listener or a custom report generator or whatever? Because maybe you have the report done in a remote place where you need to place a csv file which will be available to everybody to look at. And you want the report to be sent and generated dynamically. Or you have some clean up to do after your suit is done.</p>
<p>In ruby the @AfterAll is actually equivalent to this which in ruby land would be at_exit.</p>
<p>For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby">  <span class="nb">at_exit</span> <span class="k">do</span>
    <span class="c1"># Global teardown</span>
    <span class="no">TempFileManager</span><span class="o">.</span><span class="n">clean_up</span>
  <span class="k">end</span>
</code></pre></td></tr></table>
</div>
</div><p>So there it is. Hope this helped.</p>
<p>Cheers,</p>
<p>And as always,</p>
<p>Have a nice day!</p>
<p>G.</p>
]]></description>
    </item>
    
    <item>
      <title>Cucumber Test Name and Tags on Feature</title>
      <link>https://skarlso.github.io/2013/04/15/cucumber-test-name-and-tags-on-feature/</link>
      <pubDate>Mon, 15 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/04/15/cucumber-test-name-and-tags-on-feature/</guid>
      <description><![CDATA[<p>Hello everybody.</p>
<p>I would like to show you a gem today that I found out.</p>
<p>Apparently there is no easy way to get to the name of an executing cucumber scenario in cucumber-jvm</p>
<p>You can try something like that:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@After</span> <span class="c1">//this is cucumbers @Afters
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">afterExecution</span><span class="o">(</span><span class="n">Scenario</span> <span class="n">scenario</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">logger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">&#34;The status of the test is: &#34;</span> <span class="o">+</span> <span class="n">scenario</span><span class="o">.</span><span class="na">getStatus</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>But that isn&rsquo;t giving you too much now is it? And the API of scenario is as small as it can get. It offers you four options:</p>
<ul>
<li>Ember</li>
<li>getStatus</li>
<li>isFailed</li>
<li>write</li>
</ul>
<p>That doesn&rsquo;t help me. I wanted to get the name of the executed feature and the tags on that particular feature. I thought that&rsquo;s got to be as easy as just getting a scenario accessing the feature and get the tags. Hooooowww boy I was wrong.</p>
<p>I ended up with this..</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Field</span> <span class="n">f</span> <span class="o">=</span> <span class="n">scenario</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&#34;reporter&#34;</span><span class="o">);</span>
<span class="n">f</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="n">JUnitReporter</span> <span class="n">reporter</span> <span class="o">=</span> <span class="o">(</span><span class="n">JUnitReporter</span><span class="o">)</span> <span class="n">f</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">scenario</span><span class="o">);</span>

<span class="n">Field</span> <span class="n">executionRunnerField</span> <span class="o">=</span> <span class="n">reporter</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&#34;executionUnitRunner&#34;</span><span class="o">);</span>
<span class="n">executionRunnerField</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="n">ExecutionUnitRunner</span> <span class="n">executionUnitRunner</span> <span class="o">=</span> <span class="o">(</span><span class="n">ExecutionUnitRunner</span><span class="o">)</span> <span class="n">executionRunnerField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">reporter</span><span class="o">);</span>

<span class="n">Field</span> <span class="n">cucumberScenarioField</span> <span class="o">=</span> <span class="n">executionUnitRunner</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&#34;cucumberScenario&#34;</span><span class="o">);</span>
<span class="n">cucumberScenarioField</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="n">CucumberScenario</span> <span class="n">cucumberScenario</span> <span class="o">=</span> <span class="o">(</span><span class="n">CucumberScenario</span><span class="o">)</span> <span class="n">cucumberScenarioField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">executionUnitRunner</span><span class="o">);</span>

<span class="n">Field</span> <span class="n">cucumberBackgroundField</span> <span class="o">=</span> <span class="n">cucumberScenario</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&#34;cucumberBackground&#34;</span><span class="o">);</span>
<span class="n">cucumberBackgroundField</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="n">CucumberBackground</span> <span class="n">cucumberBackground</span> <span class="o">=</span> <span class="o">(</span><span class="n">CucumberBackground</span><span class="o">)</span> <span class="n">cucumberBackgroundField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">cucumberScenario</span><span class="o">);</span>

<span class="n">Field</span> <span class="n">cucumberFeatureField</span> <span class="o">=</span> <span class="n">cucumberBackground</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getSuperclass</span><span class="o">().</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&#34;cucumberFeature&#34;</span><span class="o">);</span>
<span class="n">cucumberFeatureField</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="n">CucumberFeature</span> <span class="n">cucumberFeature</span> <span class="o">=</span> <span class="o">(</span><span class="n">CucumberFeature</span><span class="o">)</span> <span class="n">cucumberFeatureField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">cucumberBackground</span><span class="o">);</span>
</code></pre></td></tr></table>
</div>
</div><p>Ohhhhh yes! The fields which I wanted were all private and not accessible. I&rsquo;m sure there was a reason behind this decision but if it was sensible it eludes me. But in the world of programming nothing is impossible they say so there.</p>
<p>In cucumberFeature there will be everything what you need. Tags, Names, Tests, Execution time. Everything.</p>
<p>I know that cucumber runs with jUnit so if there is a better way to do this please for the love of my sanity share it with me.</p>
<p>Thank you for reading.</p>
<p>And as always,</p>
<p>Have a nice day.</p>
<p>G.</p>
]]></description>
    </item>
    
    <item>
      <title>Groovy and Grails course summary</title>
      <link>https://skarlso.github.io/2013/04/11/groovy-and-grails-course-summary/</link>
      <pubDate>Thu, 11 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/04/11/groovy-and-grails-course-summary/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>I attended a 4 day course of Groovy and Grails and this is my attempt at writing up a summary to see how much I retained. I&rsquo;ll try to do this from the top of my head without peaking at my notes.</p>
<p>So let&rsquo;s begin.</p>
<p><strong>Introductions</strong></p>
<p>First of all, introductions. The course was held by Peter Ledbrook. He is the guy who wrote <a href="http://www.amazon.co.uk/Grails-Action-Peter-Ledbrook/dp/1617290963/ref=sr_1_2?ie=UTF8&amp;qid=1365713080&amp;sr=8-2&amp;keywords=peter+ledbrook" title="Grails in Action">Grails in Action</a>. He is awesome, go check him out. :: <a href="https://twitter.com/pledbrook" title="Twitter for Peter">Twitter</a> ::</p>
<p>The place where it was held is <a href="http://skillsmatter.com/" title="Skills Matter">Skillsmatter</a>. Which of course is known to all, if not, go check them out as well!</p>
<p><strong>Day One</strong></p>
<p>Day one and two were about Groovy. We were faced with the quirks and hinges of the language. First tasks were Closures and Currying both of which were really interesting. A bit of functional thinking mixed into the soup.</p>
<p>The course was divided into Peter telling us about stuff for 1:30 hours and then 1:00 hour lab work which really made the whole thing interactive. We could ask questions while he was talking which I&rsquo;m sure was very distracting but I hope he is used to it by now. 😉</p>
<p>The tasks which we faced I&rsquo;m sure were no real challenge for somebody who was used to thinking with closures and functions. But for us they were very intriguing.</p>
<p>For example:</p>
<p>Convert this class to it&rsquo;s groovy eq.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NumberHelper</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">findPositives</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span> <span class="n">positivesList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">numbers</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">)</span> <span class="o">{</span>
                <span class="n">positivesList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">]));</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">positivesArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">positivesList</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">positivesArray</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">positivesArray</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">((</span><span class="n">Integer</span><span class="o">)</span> <span class="n">positivesList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)).</span><span class="na">intValue</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">positivesArray</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Which basically became:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy"><span class="kt">def</span> <span class="nf">findPositive</span><span class="o">(</span><span class="kt">def</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">numbers</span><span class="o">.</span><span class="na">findAll</span><span class="o">(</span> <span class="o">{</span> <span class="n">it</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span>  <span class="o">}</span> <span class="o">)</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>That&rsquo;s pretty damn awesome.</p>
<p>For quite some time now functional languages are re-living their golden age. There are various reasons for that which I won&rsquo;t list here. But it has mainly to do with scalability, concurrency and threaded programming. Also the need to eliminate boilerplate code is bigger then ever. I guess people got fed up with Java being so talkative.</p>
<p>So we moved on learning a lot about groovy and its power. We also learned some good practices from Peter what to do and what not to do. For example a line he always repeated is that he hates how a function cannot exist without a class wrapped around it. Another important thing is, which we never ever should forget, that closures are Closures. Which means they aren&rsquo;t functions. They are of the type Closure.</p>
<p>And that we shouldn&rsquo;t use Closures just because we can. Be sensible. If a method can achieve your task, use a method.</p>
<p><strong>Day Two</strong></p>
<p>On day 2 we got into meta-programming. That&rsquo;s when the real fun started. Groovy is not only powerful and lightweight it also gives the ability to change its behaviour. Meta programming is sort of a bit new to me. So this was my first definitive intro to it. But I must say that it blew me away. The capabilities are limitless.</p>
<p>There is a class called Expando in groovy which can be used to create virtually anything on the fly what you want.</p>
<p>For example look at this code ::</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy"><span class="kt">def</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Expando</span><span class="o">(</span><span class="nl">name:</span> <span class="s2">&#34;Jake&#34;</span><span class="o">,</span> <span class="nl">age:</span> <span class="mi">24</span><span class="o">)</span>
<span class="n">println</span> <span class="n">p</span>

<span class="c1">//Add properties
</span><span class="c1"></span><span class="n">p</span><span class="o">.</span><span class="na">gender</span> <span class="o">=</span> <span class="s2">&#34;Male&#34;</span>
<span class="n">println</span> <span class="n">p</span><span class="o">.</span><span class="na">name</span>

<span class="c1">//Add metods
</span><span class="c1">//Override the default toString at runtime.
</span><span class="c1"></span><span class="n">p</span><span class="o">.</span><span class="na">toString</span> <span class="o">=</span> <span class="o">{</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="s2">&#34;${name} (${age})&#34;</span> <span class="o">}</span>
<span class="n">println</span> <span class="n">p</span>

<span class="c1">//Learn how groovy resolves names - &gt; How does it find age.
</span><span class="c1"></span><span class="n">p</span><span class="o">.</span><span class="na">addYears</span> <span class="o">=</span> <span class="o">{</span> <span class="n">years</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">age</span> <span class="o">+=</span> <span class="n">years</span> <span class="o">}</span>
<span class="n">p</span><span class="o">.</span><span class="na">addYears</span><span class="o">(</span><span class="mi">25</span><span class="o">)</span>
<span class="n">println</span> <span class="n">p</span>
</code></pre></td></tr></table>
</div>
</div><p>Neat hmm? Just create expando and build up the class as you go however you want to use it.</p>
<p>And you can do this jazz to other, normal classes as well. You can add properties and methods at runtime by implementing the propertyMissing and methodMissing methods. In them afterwards you can specify some custom behaviour you would like to see. By implementing these guys you can directly control what&rsquo;s happening to your class. Who is calling it how and where and why.</p>
<p>To grasp the power of metacoding and the abilities with which closures provided us with took a day to properly go over. So we moved on.</p>
<p><strong>Day Three</strong></p>
<p>So groovy was over. The time has come to move on and venture into the foggy land of Grails. Turned out it wasn&rsquo;t so foggy after all.</p>
<p>Grails is a rapid prototyping kind of a framework. It allows you to set up an application with a blink of an eye. And provides conventions over configuration which is a really good thing to have. But as the day was going by we realised that we would find ourself not once but many times in the bubbling boils of the underbelly of /conf.</p>
<p>Again, fortunately, it wasn&rsquo;t really hard. The config was groovy and it was pretty straight forward too.</p>
<p>Our third day mostly took as off to explore scaffolding, dynamic &amp; static as well, and the interesting land of GORM Peter showed us the power of grails to create a CRUD application with in a matter of seconds / minutes ( depending on how fast your machine is ) with a fairly nice view. These types of application are usually not accepted of course as an end product. For that you need to thinker a bit here and there.</p>
<p>But things like admin portal are easily put together. So use it often and use it will and get it to know how it works.</p>
<p>In the land of GORM we explored the 4 different possibilities of data retriaval and generally how everything maps together and how GORM work with ORM.</p>
<p>The four different retrieval capabilities are:</p>
<ul>
<li>Where clauses</li>
<li>HQL (Hybernate Query Language)</li>
<li>Criteria searches</li>
<li>Dynamic finder methods</li>
</ul>
<p>Each of which we found very interesting in there own respective ways.</p>
<p>Example of a dynamic finder::</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy"><span class="k">assert</span> <span class="n">Account</span><span class="o">.</span><span class="na">findAllBy</span><span class="o">*</span><span class="n">PropertyName</span><span class="o">**</span><span class="n">Modifier</span><span class="o">*(</span><span class="n">Parameters</span><span class="o">).</span><span class="na">size</span> <span class="o">==</span> <span class="mi">2</span>
</code></pre></td></tr></table>
</div>
</div><p>Where propertyName is the name of the property to find by, modifier can be a sql&rsquo;s Like for example.</p>
<p>So this could become something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy"><span class="k">assert</span> <span class="n">Hitman</span><span class="o">.</span><span class="na">findAllByNameLike</span><span class="o">(</span><span class="s2">&#34;Agent %&#34;</span><span class="o">)</span> <span class="o">==</span> <span class="mi">15</span>
</code></pre></td></tr></table>
</div>
</div><p>That day was really knowledge packed. I don&rsquo;t say I remember everything but luckily I wrote up some notes and I know what and where to look for if I would be in need of something.</p>
<p><strong>Day Four</strong></p>
<p>On the last day everybody was pretty much exhausted. It takes a lot to learn all that from 9 to 5 for 4 days. And Peter gave his best to staff that stuff into our heads and as much as possible of it. I think he did a pretty good job.</p>
<p>Last day was all about Controllers, Commands, Models, Views and GSPs and BootStrap config, Environment changes durring start up, the configurability of the whole framework, messages, templates, internationalisation and many thing more which can be easily put together.</p>
<p>It was pretty interesting. GSPs have similarities to JSPs but retained only the good parts. And although you can do JSP stuff in GSPs as well with nice embedded tags you have the ability to actually create a nice page which won&rsquo;t be that big a maintenance nightmare.</p>
<p>Peter very much pressed the fact that the Controllers should be your only entry point from HTML requests and the views should be the only output of it. The controllers shouldn&rsquo;t be throwing around business logic they should only act as proxies between the outer shell and the inner layering.</p>
<p>I think I understood most of the stuff which we were going through. Again, it was pretty straight forward. The application of it is what need practice.</p>
<p>Durring the course we created several applications. With dynamic scaffolding as well as static. We created and edited our own views and gsps. Created our own Controllers and what nots. One thing is clear. Grails let&rsquo;s you progress a hell of a lot in a matter of minutes.</p>
<p>And we were also talking about testing of course. Using Geb, Spock and the unit testing capabilities of Grails. All very powerful stuff. Spock has some impressive Mocking powers in junction with the good ol' Given When Then structure. If done correctly the test can be very fast and robust.</p>
<p>As final words we talked about plugins and the testing of Views and a bit more configuration.</p>
<p><strong>Closing words</strong></p>
<p>So all in all the course was excellent. Peter did a very good job of introducing use to Grails and Groovy. It&rsquo;s a very good framework to build upon with a powerful language at our disposal. I&rsquo;m pretty certain that Grails will evolve even more and be a great asset to people who choose to develop with it. Handle with Care though. Because no matter how awesome a tool is, it can always be used for bad purposes. 😉</p>
<p>As always,</p>
<p>Thanks for reading and have a nice day / evening.</p>
]]></description>
    </item>
    
    <item>
      <title>My history in testing</title>
      <link>https://skarlso.github.io/2013/04/11/my-history-in-testing/</link>
      <pubDate>Thu, 11 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/04/11/my-history-in-testing/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>Today I&rsquo;d like to share with you some of the experiences I had as a beginner tester. I hope it sets you off on a path to enlightenment and leaves you off with a good appetite for testing. Shall we begin then?</p>
<p><strong>The early days</strong></p>
<p>It was 2004 when I finished school and started working at my first company. I finished as a software developer which is kind of an exaggeration since I only finished a 2 years course of it. I wasn&rsquo;t really one for school. I was more of a home learner. That&rsquo;s how you learn programming these days anyways.</p>
<p>The company didn&rsquo;t hire developers at that moment. At least not junior ones. But! They were kind enough to offer a position as a tester. As the saying goes, Don&rsquo;t look a gift horse in the mouth, I accepted the position although my intention was to go over to development as soon as possible.</p>
<p>Years went by. I was still a tester. I foamed and fumed about it I wanted to be a dev guy. I was furious. I was angry. I was inpatient. I was an idiot. Instead of crying and instead of the light going on after 2-3 years or more I should have realised the potential of my position sooner.</p>
<p><strong>Revelation</strong></p>
<p>So there I was. I was sitting at my desk clicking away at stuff and writing up dull documentations about why I&rsquo;m clicking at that stuff and how I&rsquo;m clicking it. My document infect was so pretty and well formatted that I was fairly proud of it.</p>
<p>I ignored calls of my sanity and went on producing test cases and documents for many many more months / years. I was bad at my job. And I tell you why. I missed bugs I missed the little things that made the difference. I was following documentation by the letter I was leaving out things I wasn&rsquo;t paying attention I wanted to be a developer damn it!</p>
<p>But fortunately because of various people in my life, like my brother, my resource manager, my friends and this guy :: James Marcus Bach ( <a href="http://www.satisfice.com/" title="http://www.satisfice.com/" target="_blank"><a href="http://www.satisfice.com/">http://www.satisfice.com/</a></a> ) :: I soon begun to realise that this job is about so much more! I read Jame&rsquo;s book <a href="http://www.buccaneerscholar.com/" title="The buccaneer scholar" target="_blank">The buccaneer scholar</a>.</p>
<p>It opened my eyes in so many ways. I knew that there is somebody else out there how is like me. Passionet and keen on learning new things. Exploring technology and going where nobody else went before. I was beginning to understand that I could be much more in this position. In my country at that time Testers weren&rsquo;t regarded for too much. We were the enemy that needed defeating. We were in the way. We were somebody who had to be hated. Fortunately it changed much since then and lucky for us The Company had great support for Testers.</p>
<p>I learned that I can use my passion. I learned that testing can be / IS, indeed, the best thing that could have happened to me.</p>
<p><strong>Ascension</strong></p>
<p>With these new thoughts in my mind I begun to evolve. I realised that I can incorporate my dev skills into testing and later my testing skill into development. I was no longer following test cases blindly. I was no longer writing up pretty documentations ( I was writing other kind of documentations.. 😉 ). I was following instinct, skills, knowledge I hoarded from people. I was talking to the Devs, I was talking to the deployment team, I was talking to the managers AND the product owners. I hoarded knowledge as much as possible. I wrote everything down into my Mind Maps and was determined to become the single most knowledgable entity on the projects I was working on.</p>
<p>I created small tools that helped in my tedious, boring, unimaginative tasks of repetitive clicking. It didn&rsquo;t took so long I was sharing my tools between other testers. Small javascripts which filled in forms. Tools, perl scripts to format docs and test results and so and so forth.</p>
<p>I embraced testing. It become my way of Life. It wasn&rsquo;t a simple job anymore. It was embedded into my brain processes and synapses. And that&rsquo;s when I got into automation.</p>
<p><strong>The later years</strong></p>
<p>So I got into automation. I loved it. The thought that I can bend the computers will to do my bidding / job was absolutely mind blowing. I&rsquo;ve done development at that point already of course that wasn&rsquo;t new to me. And I also was shown some way of automation but that wasn&rsquo;t so great so I dismissed this possibility for a long time. After a while I came back to it with the thought that, hey I could do this better. Selenium came out at that time around, Watir was also there and a couple of other tools in Perl.</p>
<p>I started developing with / in / for those tools and noted that despite the believe that it&rsquo;s only automation it actually took quite some thinking to come up with a framework that was adaptable, concise, manageable, fast and so on and so fort. It was an effort that most people didn&rsquo;t realise or care to know about.</p>
<p>So for the better part of those years I was trying to convince people that building a testing framework requires actual development work. And is not something that should be taken lightly. I sort of succeeded with it.</p>
<p><strong>Now</strong></p>
<p>After various circumstances in my life I moved to UK and took a job as an SET(Software Developer in Test). It sounds fancy but is rather just an automation guy who from time to time looks at production code. It was a spring board for me. And now days it seems I&rsquo;m simply just a developer. But!!! And here comes the twist.</p>
<p>Because of my years of background in Test I feel I&rsquo;m so much more. I know to write testable code. I know many ways how my code could fail. I know many ways of writing something and then coding up a script for testing or do extensive unit testing. I don&rsquo;t love my code blindly so that when it&rsquo;s done I only test the &ldquo;happy path&rdquo; because I don&rsquo;t have the time to code up more.</p>
<p>I will always have time for testing. I will <strong>begin</strong> with testing. Because people need to understand that the only way to go fast is to go slow. If you go fast it will bite you in the behind and you will suffer more then you would have suffered if you would have written up that one last little test for that one last little corner for the world that is your boiling, brooding, breathing pile of code.</p>
<p><strong>The future</strong></p>
<p>Honestly I don&rsquo;t know were I&rsquo;m going from here. Being a full pledged developed is a new territory for me even though I was an automation dev before. But I&rsquo;m looking forward to this exciting new life. And I will NEVER ditch my Testing carrier. In fact I&rsquo;m aiming to complete the BBST course next month. Because once you&rsquo;ve been a tester you will never go back being anything else. It becomes a part of you. And stays with you forever.</p>
<p>Thank you for reading.</p>
<p>And as always,</p>
<p>Have a nice day!</p>
]]></description>
    </item>
    
    <item>
      <title>It’s all about human interaction.</title>
      <link>https://skarlso.github.io/2013/01/31/its-all-about-human-interaction/</link>
      <pubDate>Thu, 31 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/01/31/its-all-about-human-interaction/</guid>
      <description><![CDATA[<p>Hello everybody.</p>
<p>Today I would like to write about something I experienced over the years of being in the software industry.</p>
<p><strong>Some History</strong></p>
<p>I&rsquo;ve been a tester for a long time now. I&rsquo;ve been up and down and down and up. I struggled for a very long time until I became somebody who I am today. And I still have many things to learn ahead of me.</p>
<p>I learned from many people. I personally thing my greatest influence on testing was James Marcus Bach and his Brother Jon Bach you should definitely check out these guys. It took me a long time to get to where I am today. And after ~10 years now I can state with a reasonable confidence that this industry is no longer about technology or solutions to technological problems.</p>
<p><strong>Surly you Jest.</strong></p>
<p>Nope. I&rsquo;m not joking. I can see people struggling to understand people and mostly it&rsquo;s not because of knowledge differences it&rsquo;s because they simply can&rsquo;t stand each other. Or they simply think that their solution must be better then the one the other has. Or the guy just woke up with a bad foot.</p>
<p>And industrial problems? Management? Sure it can be knowledge but mostly it&rsquo;s simply ignorance and pride. <strong>Pride</strong> because he / she does not want to admit that they don&rsquo;t understand something. <strong>Pride</strong> to ask a question that might make them look stupid. I&rsquo;d rather look stupid for five minutes then for the rest of my life. I rather ask the question that I want to know because I can&rsquo;t make a proper decision without it. I rather learn then be ignorant for the rest of my life.</p>
<p>People need to overcome their differences. People need to understand that this behaviour hurts the company. It hurts them it hurts the people around them and the product. Swallow your pride and be a bigger man / woman. Face your fear. Be Strong. Be clever be intelligent be a proper grown up human being!!!!</p>
<p>You hate my face? SAY IT IN MY FACE!! I can&rsquo;t resolve issues I DON&rsquo;T KNOW ABOUT!!</p>
<p><strong>Last but not least.</strong></p>
<p>Grow up people. Be nice. Be curious. Don&rsquo;t be afraid to ask. Don&rsquo;t be afraid to ask again if you still don&rsquo;t understand. It might be that the person speaking has a completely different view of something and it might be that nobody really understands him and they are just afraid to ask. And if you ask something stupid? Who cares.. You learned from it.</p>
<p>Be a professional. A professional is not afraid. And encourage others to be one too. In the today&rsquo;s technological world solutions can be found by the dozens on the internet. You will be a better work force by adjusting your personal habits a little bit.</p>
<p>Be nice.</p>
<p>And as always,</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>What you really need to know to become a Testing Expert</title>
      <link>https://skarlso.github.io/2013/01/21/what-you-really-need-to-become-a-testing-expert/</link>
      <pubDate>Mon, 21 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/01/21/what-you-really-need-to-become-a-testing-expert/</guid>
      <description><![CDATA[<p>Hello Everybody.</p>
<p>Today I would like to show you what you need to become a Testing expert.</p>
<p>If you had noticed I deliberately left out the word Software. Why? Because becoming and expert in Testing Anything has the same root as becoming an expert to test software. And for that let me take you back to a Galaxy Far Far Away in Time AND Space.</p>
<p><strong>The beginnings.</strong></p>
<p>I went to school in Oroszlany, my home town in Hungary. My official Technical title would be Mechanical Testing Engineer. I had the luck that most things which were thought at that school and I liked were thought by people I liked too and were clever in their respective fields. Like Pneumatics, Metallurgy, Mechanics, Chemistry these were all really awesome fields. To this day I don&rsquo;t know why I haven&rsquo;t ended up in some lab testing the breaking point of metals and the capacity of various chemicals.</p>
<p>But ahh well.. I still remember some of the ISO standards we had to memorize. Like in Metallurgy the Charpy pendulum impact test which we loved so very much to perform. The ISO standard for that is ISO 148-1:2009. Now let me see if I still remember that correctly. Yes! I&rsquo;ve still got it. So where am I going with this?</p>
<p><strong>Moving on.</strong></p>
<p>Back then we performed a lot of operations on various metals and a lot of chemical testings and the like. The most important part of every performed test was always to have insight. Insight in the structure of the metal. How it was made, how it was moulded and then shaped and heated and cooled and so on and so forth. We had to know EVERYTHING about the creation of this element that we had to test. Without that knowledge you could of corse still perform the test but you didn&rsquo;t had any additional information why that test was useful or what it proved. Sure, you could have looked at the specification of the metal but that didn&rsquo;t give you anything about the inner structure of it.</p>
<p>That was provided to you by the knowledge of the procedure that created it.</p>
<p>You get where I&rsquo;m going with this.</p>
<p><strong>Insight</strong></p>
<p>So back to software testing. What is the single most important thing that gives you insight, that gives you the edge to be a professional? Knowing the development process. Knowing architecture. Knowing programming. Knowing the language and its capabilities and limitations.</p>
<p>Sure you can be a good manual Tester. Of course you can be an excellent Exploratory Tester. But look at the others. James Marcus Bach. Alan Richardson. Michael Bolton and I could go on. They all know programming. They all know it by heart and they could be exceptional programmers if they wanted to. They already know that in order to get very good at testing something you must have an insight on the subject matter. You can&rsquo;t test it thoughtfully without knowing its limitations its rules that it obeys its exploits that you can use.</p>
<p><strong>Last words.</strong></p>
<p>So in order to excel at your craft of test you have to have insight of the subject of the test. You can still become good but you always have to aim high don&rsquo;t you? A friend of mine reply to one of my tweets with a really good sentence:&quot;.and then you realize that being the best in one implies being excellent in the other.&quot;. Exactly. Because the two are interconnected. They aren&rsquo;t actually two. It&rsquo;s one. It&rsquo;s called Engineering.</p>
<p>Have a nice day and as always,</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>From Chaos There Shall Be Order</title>
      <link>https://skarlso.github.io/2013/01/04/from-chaos-there-shall-be-order/</link>
      <pubDate>Fri, 04 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/01/04/from-chaos-there-shall-be-order/</guid>
      <description><![CDATA[<p>Dear Readers.</p>
<p>Today I want to talk to you about something I discovered over years of working and experience.</p>
<p>Also something that I can see in the world repeating over and over again. Not just in Software business but also in History in Human nature in Physics and Systems.</p>
<p>So let&rsquo;s see what I&rsquo;m talking about.</p>
<p><strong>What is Chaos?</strong></p>
<p>Chaos is a state of utter confusion. Chaos is the opposite of order. Chaos is when everybody does what they want without thinking about the consequences.</p>
<p>Does Chaos hurt? Of course it does. From Chaos there can be no production. From Chaos there can be no profit. From Chaos there can be no life.</p>
<p>Is that really true? It sort of is. Remember the Big Bang. Initially it is believed that there was order. The universe was a perfect gem with the four forces ( Gravity, Electromagnetic, Weak Nuclear and Strong Nuclear force ) united. And then a Higgs came around and made it BOOM! And so there was Chaos. And from Chaos, with a snowballs chance, there was life.</p>
<p><strong>So then why is Chaos bad?</strong></p>
<p>Companies usually don&rsquo;t have the time or the money to wait for that Snowballs chance to come to flourish. So order is required for life to become great.</p>
<p>Take for example the Chinese Emperor Qin Shi Huang. He was the one uniting China. Sure, he killed a LOT of people. And China is oppressed every since. However he did introduce a lot of new concepts and reforms which wouldn&rsquo;t have been possible in the Chaos. And today China is one of the leading nations if not The.</p>
<p>Before Emperor Qin begun his journey there were 9 different ways of writing down the world &lsquo;sword&rsquo; in chinese. This was unacceptable. After the Emperor succeeded he unified the writing and made communication easier.</p>
<p><strong>Striving for order</strong></p>
<p>People have always strived for order. For simplicity. For unification. For &lsquo;one&rsquo; instead of &lsquo;many&rsquo;. We have stories that say there is power in many. Physicist are continuously trying to unify the laws of physics in the beautiful little equations. Like Einsteins law of relativity. That small equations revolutionised the world. And it came from unification.</p>
<p><strong>So then what are the downsides of unification?</strong></p>
<p>Everything comes with a price of course. The unification bought oppression to China and the loss of the individuum. Fantasy and thoughts got all sacked. People become like Borgs. However the Country evolved immensely under one banner. But what does this all have to do with Testing?</p>
<p><strong>Applying Order</strong></p>
<p>Think about your company. Think about how your developers work. Does everybody use a different building platform? Does everybody use a different operating system? Do they run the same command to build your environment? Did you have any kind of problems because of that? I&rsquo;m sure you did.</p>
<p>There are benefits of it. At least you will know if your application is working in a different environment. But do you want that? Is it worth it? After all we live in an age were there are numerous possibilities, environments, languages, command line options etc etc.</p>
<p>But think about it. Did the diversity bring you more profit or did it hurt you more? Which one is applicable for you? If your developers do not have the ability to properly govern them selfs then you need order. You need a unified language, you need a unified environment and unified processes Agile or not Agile. Your company wont be successful if you want to be Agile just because it is the Current Trend. You need to be pragmatic about it and applied were it is reasonable. There is nothing wrong in introducing a standard or a code review process or a coding guid line or some standards here and there if it HELPS.</p>
<p>There will be friction. People tend to resist change. There will be losses. But a unified company is a strong company. And when the new guy arrives? He wont have any kind of a problem installing your software and beginning working on it because he doesn&rsquo;t have to go around and scoop information together from at least ten people and do it in an eleventh way at the end.</p>
<p><strong>Last Words</strong></p>
<p>So think about this. Is your company strong enough to uphold Chaos and make it flourish? Or is it a bunch of people doing whatever they think is right because of a sense of individuality which they don&rsquo;t want to give up?</p>
<p>This is for you to decide.</p>
<p>And as always,</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Methodologies, Thought Patterns, Lies</title>
      <link>https://skarlso.github.io/2012/12/12/methodologies-thought-patterns-lies/</link>
      <pubDate>Wed, 12 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/12/12/methodologies-thought-patterns-lies/</guid>
      <description><![CDATA[<p>Hello everybody.</p>
<p>Today I&rsquo;d like to write about something I discovered over the years of researching and following certain people and movements in Testing and Programming world.</p>
<p>Let me tell you that there are quite an amazing amount of stuff to be read out there. It&rsquo;s overwhelming.</p>
<p>Let&rsquo;s talk about <strong>Methodologies</strong> first.</p>
<p>There are many out there currently. In programming and in testing too. Many speak of ways how you should or should not do you work. Many of them tend to say that others aren&rsquo;t the right way. However just as many tend to say that you can share your knowledge or you can only partially use that particular methodology because they realised that if they say others are crap they close themselves from evolving and they create a way of thinking that will say: Ohhh yeah? You can&rsquo;t tell me what I should do! Who are you to say that that technique is wrong?</p>
<p>So they are in threat of alienating followers through this kind of behaviour. Just as commercials stopped saying they product is 100% awesome. Now they say 8/10 people find it awesome. This gives you the thought that surly they must not be lying if they admit that somebody thinks their product is crap.</p>
<p>How do you know then that a methodology is lying or is right or is &ldquo;The way to go.&rdquo; or that it is in fact a valid methodology?</p>
<p><em>By careful observation and deduction of facts while not leaving out of sight your own ignorance and view points / beliefs.</em></p>
<p>You have to address something by taking yourself a level above the problem domain. Carefully observe various situations and always approach it with scepticism. Guilty until proven otherwise.</p>
<p><strong>Thought Patterns</strong></p>
<p>If you do this for a while you will realize that most of the people out there are trying to sell their own crap in some way or another. They will put it into nice little packages will tell you neat little success stories and will make you believe in what they think is right. How do you <strong>shield</strong> yourself against that?</p>
<p>By. drum rolls. learning. You must make your mind to be a weapon of mass destruction. You must hone your skills of thinking you must hone your skills of analysing and understanding complex patterns. In the world there is nothing without a Pattern. Everything follows a greater scheme. You have to find it, grab hold of it and never let it go. You have to understand how people think and how you would exploit that. What there weaknesses are and why are they there in the first place?</p>
<p>When you achieve that you will truly begin to see how the world works and looks like under the hood. Try it on small things first. Try to follow the thought patterns of your coworker. Try to note down his mood changes based on days and current view point. Based on news and knowledge that you can attain from his life. After a while you will be able to predict certain moves and mood changes. You will begin to predict working capacity based on the sun is up or not or if it&rsquo;s snowing or raining.</p>
<p>All these will bring you to a mind state where you can look beyond words. You will notice the patterns behind blog posts. You will notice the bullshit out of the documentation. You will notice when somebody is just writing for the sake of writing. You will notice.</p>
<p><strong>Lies</strong>.</p>
<p>You have to understand the One Truth in life. <strong>We all lie!</strong> And the we all lie about lying.</p>
<p>If you get that you will start to think more before you approche something. You read a methodology a description a &ldquo;new found&rdquo; idea and you realize the lies behind it if there are any big ones. You realize that he / they is / are only trying to be clever or only trying to be famous. They might have something interesting to say, not everything is a lie fortunately, but let&rsquo;s face it. Most if it is.</p>
<p>You have to shield yourself against that. You have to shield yourself from biases, from lies, from cheats, from make beliefe and from posts that are only posts for the sake of posting.</p>
<p>What are the tell tail signs? Are there any? Of course there are..</p>
<p><strong>Big words, Punctuation and visually carefully constructed blog posts( usually tries to hide something between a facade of good looks), few practical examples, too much of: &ldquo;.then this will definitely help you improve.&rdquo;, too much talk without saying anything interesting.</strong> and so on ans so forth.</p>
<p><strong>End words</strong></p>
<p>Now think about these things for a second. Think about thinking. Think about how you can improve. Learn Lateral Thinking. General Systems Thinking. Logical Reasoning. Deductive Thinking. Inductive Thinking. Critical Thinking. And if you did all this. And you find yourself wondering around the world with an open eye seeing things for the first time. Noticing things for the first time. Watching, observing, thinking. Come back and read this post again whit THOSE things in mind. 😉</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>TEAS: Testing Exploration Adventure Session</title>
      <link>https://skarlso.github.io/2012/12/01/teas-testing-exploration-adventure-session/</link>
      <pubDate>Sat, 01 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/12/01/teas-testing-exploration-adventure-session/</guid>
      <description><![CDATA[<p>Hello Everybody.</p>
<p>I&rsquo;d like to introduce T.E.A.S. to you. This is something I came up with yesterday which requires a lot of fantasy some good thinking planning and enthusiastic people. So, let&rsquo;s get started.</p>
<p><strong>What is it about?</strong></p>
<p>Testing Exploration Adventure Session is about. Testing! There. No real surprise, eh? TEAS has it&rsquo;s roots in <strong>RPGs</strong>. Role Playing Games. If you ever heard or read about M.A.G.U.S. or the more known Dungeons &amp; Dragons you will have a better understanding of the concept behind this phenomena.</p>
<p><strong>Basics of RPG</strong></p>
<p>So now that we know that it has it&rsquo;s rules in RPGs how will that be applied to testing and learning? Easy. Well it&rsquo;s not that easy but after you grasp the concept it will get easy.</p>
<p>Just like in an RPG people get together first. There will be players in the group mostly and one or two Dungeon Masters. The task of the Dungeon Master is to facilitate the Game. The Game it self consists of a set of given rules and a World in which these rules are applied too. The Players are placed in this world which is created by the Dungeon Master. They are then given tasks that needs to be fulfilled in some particular way. That choice is of to the Players. The DM only facilitates. He is the Master of the given World. And plots against the players. He incorporates the Non Player Characters or NPCs of the World and tries hard to trifle the effort of the players.</p>
<p>This task can be anything from freeing a princes to twarthing a Magus from gaining Omnipotence or God like powers, to killing a Dragon for its treasures. And Players decide what to do and how to do it. The DM lists the options available. And as the Players move they get experience. They get stronger, faster, better, more intelligente.. They gain Levels.</p>
<p>Now. How does that fit into Testing?</p>
<p><strong>How does this fit into Testing?</strong></p>
<p>If you think about testing and the players what comes into mind? You have a product. And you have testers who explore this product in certain ways. As they go and find bugs ( kill mobs ) they get better and more efficient in finding other bugs based on the previous ones. Tasks get harder and harder as the most easy to find bugs are already taken care of. Elusive bugs will be harder to discover ( kill ).</p>
<p>And who is the Dungeon Master? I would say in this case it&rsquo;s the Product Owner.</p>
<p><strong>How to begin</strong></p>
<p>So what now? You have your Testers ( Players ) and your Product Owner ( Dungeon Master ). What&rsquo;s the next move? How does this all begin?</p>
<p>The PO present a software. He builds it. Finds it out. Puts together the pieces. Creates maps, road maps, site maps if it&rsquo;s a server application then it&rsquo;s structure maps and database diagrams and whatever helps him to present his product to the Testers. He slips and designs bugs into the system. Harder ones and also easier ones. He has to have a story in the application. Maybe it&rsquo;s a web site that provides some service. There a lot of components that could go wrong.</p>
<p>The testers begin by asking questions. They begin as Level 1 Testers. They know nothing yet. They know no programming languages and no metrics and nothing. The goal is to have a fully covered product which they are confident enough to release. They can add the whole release process to the Game too. Depends on what the PO has in plan for that Session. Which could take a few hours or a whole day. Depends on the possibilities.</p>
<p><strong>How the Testing works and what&rsquo;s a level?</strong></p>
<p>So as they go on and Test the product, which they have to do verbally, the PO knows what bugs they come across. As they find bugs they earn Experience points. The more they have the more they level up the more tools will be available to use. That can be given to chance. Throw a dice and select a tool from a pool of tools which are available to the whole Project.</p>
<p>You can have a Random factor to the bug finding process too. For example if a Tester tries to examine an area he throws a dice to determine his ability to find bugs. That ability comes from initial stats that can be defined at the begin of the game. If he succeeds he finds a bug and gets points for it. The tools can increase the ability to find bugs. For example automation can add bonus to finding repetitive bugs but can add minus points to fantasy / finding really nasty elusive bugs because you might concentrate less on details.</p>
<p>So a Level defines the Testers ability to find bugs. The higher level he gets the better his abilities will be to find bugs.</p>
<p>The PO defines the End Game. The Games goal could be to find x number of bugs. Or to release the product. Or to bash it, crack it, hack it destroy it. It could be that you have to sell it or demo it to some stack holders. The possibilities are Legion.</p>
<p><strong>How to go on.</strong></p>
<p>I know that this is all very confusing yet.. I&rsquo;m still working out the individual rules, plays and numbers and Character sheets and such. Any thoughts and ideas are appreciated.</p>
<p>The merits of this game are many. It practices testing it practices the ability to explore a product only in fantasy. It helps who ever designs a product to get a glimpse into the world of designing.</p>
<p>Also the product might even be not from this time!! It can be a future product of some holographic nature! Or an Audio Visual interface that&rsquo;s hooked into the users Brain. Or some other advanced future technology. How would you Test that???? How would you test a robot arm controlling algorithm. Or an Artificial Intelligence that controls tactical missiles overseas.</p>
<p>The possibilities are virtually limitless. It&rsquo;s up to the Product Owners fantasy what he builds. It could be a whole new virtual World like the Holoroom in Star Trek. How would you Test THAT???</p>
<p>If you are interested in this endevour follow me for more details.</p>
<p>And as always,</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How to eliminate a parameter boom</title>
      <link>https://skarlso.github.io/2012/10/09/how-to-eliminate-a-parameter-boom/</link>
      <pubDate>Tue, 09 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/10/09/how-to-eliminate-a-parameter-boom/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>Today I want to write about a little trick I learned.</p>
<p>If you are working with legacy code and you don&rsquo;t have the chance to eliminate core design problems, you can use this little pattern to help you out.</p>
<p><strong>Problem</strong></p>
<p>Problem is that you have a class that has a gazillion collaborators and at some point in time one of the clever devs thought it would be a cool idea to do dependancy injection via the constructor. We all know that doing this makes the class immutable which is very good for a number of reasons. However it doesn&rsquo;t provide a flexible solution if you want to leave out one or two collabs. For that your would have to create Adapter constructors and chain them upwards which would get very ugly very fast. While using JavaBeans getters and setters can leave your class in a harmful state like not at all or partially initialised.</p>
<p>So what&rsquo;s a good solution then?</p>
<p><strong>Solution</strong></p>
<p>One possible solution would be to use some kind of initialisation framework like Springs @Autowired. But cluttering your classes with that isn&rsquo;t really pretty either. But it&rsquo;s A solution.</p>
<p>Another solution is the usage of a builder pattern.</p>
<p>Consider this class:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">VeryImportantService</span> <span class="o">{</span>

        <span class="kd">public</span> <span class="nf">VeryImportantService</span><span class="o">(</span><span class="n">CollabOne</span> <span class="n">collabOne</span><span class="o">,</span> <span class="n">CollabTwo</span> <span class="n">collabTwo</span><span class="o">,</span> <span class="n">CollabThree</span> <span class="n">collabThree</span><span class="o">,</span> <span class="n">CollabFour</span> <span class="n">collabFour</span><span class="o">,</span>
            <span class="n">CollabFive</span> <span class="n">collabFive</span><span class="o">,</span> <span class="n">CollabSix</span> <span class="n">collabSix</span><span class="o">)</span> <span class="o">{</span>
            <span class="o">.</span>
            <span class="o">.</span>
            <span class="o">.</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Don&rsquo;t forget that we want these to be optional. I would like to leave out two or three here and there.</p>
<p>The builder let&rsquo;s you do that. It looks something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">VeryImportantService</span> <span class="o">{</span>

        <span class="kd">private</span> <span class="n">CollabOne</span> <span class="n">collabOne</span><span class="o">;</span>
        <span class="kd">private</span> <span class="n">CollabTwo</span> <span class="n">collabTwo</span><span class="o">;</span>
        <span class="kd">private</span> <span class="n">CollabThree</span> <span class="n">collabThree</span><span class="o">;</span>
        <span class="kd">private</span> <span class="n">CollabFour</span> <span class="n">collabFour</span><span class="o">;</span>
        <span class="kd">private</span> <span class="n">CollabFive</span> <span class="n">collabFive</span><span class="o">;</span>
        <span class="kd">private</span> <span class="n">CollabSix</span> <span class="n">collabSix</span><span class="o">;</span>


        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nf">Builder</span><span class="o">()</span> <span class="o">{</span>
            <span class="kd">private</span> <span class="n">CollabOne</span> <span class="n">collabOne</span><span class="o">;</span>
            <span class="kd">private</span> <span class="n">CollabTwo</span> <span class="n">collabTwo</span><span class="o">;</span>
            <span class="kd">private</span> <span class="n">CollabThree</span> <span class="n">collabThree</span><span class="o">;</span>
            <span class="kd">private</span> <span class="n">CollabFour</span> <span class="n">collabFour</span><span class="o">;</span>
            <span class="kd">private</span> <span class="n">CollabFive</span> <span class="n">collabFive</span><span class="o">;</span>
            <span class="kd">private</span> <span class="n">CollabSix</span> <span class="n">collabSix</span><span class="o">;</span>

            <span class="kd">public</span> <span class="nf">Builder</span><span class="o">()</span> <span class="o">{}</span>

            <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">collabOne</span><span class="o">(</span><span class="n">CollabOne</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">this</span><span class="o">.</span><span class="na">collabOne</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
                <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">collabTwo</span><span class="o">(</span><span class="n">CollabTwo</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">this</span><span class="o">.</span><span class="na">collabTwo</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
                <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="o">.</span>
            <span class="o">.</span>
            <span class="o">.</span>

            <span class="kd">public</span> <span class="n">VeryImportantService</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="n">VeryImportantService</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
            <span class="o">}</span>

        <span class="o">}</span>

        <span class="c1">//private constructor
</span><span class="c1"></span>        <span class="kd">private</span> <span class="nf">VeryImportantService</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">collabOne</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">collabOne</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">collabTwo</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">collabTwo</span><span class="o">;</span>
            <span class="o">.</span>
            <span class="o">.</span>
            <span class="o">.</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Now. calling this would look something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="n">VeryImportantService</span> <span class="n">veryImportantService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">VeryImportantService</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">collabOne</span><span class="o">(</span><span class="n">someValueOne</span><span class="o">).</span><span class="na">collabTwo</span><span class="o">(</span><span class="n">someValueTwo</span><span class="o">).</span><span class="na">collabFive</span><span class="o">(</span><span class="n">someValueFive</span><span class="o">);</span>
</code></pre></td></tr></table>
</div>
</div><p>This enables you to be flexible HOWEVER!! I HATE train wrecks. So I would probably tweak it not to return things, but set them. Then you would end up calling then line by line. Which is still not the best but better then the alternative.</p>
<p><strong>End words</strong></p>
<p>So there you go. This is A solution not THE solution obviously. The best would be to NOT design such a monster at all. If you have any better ideas please feel free to share. I would gladly put them on my blog.</p>
<p>As always,</p>
<p>Thanks for reading,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Coderetreat London</title>
      <link>https://skarlso.github.io/2012/09/30/89/</link>
      <pubDate>Sun, 30 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/09/30/89/</guid>
      <description><![CDATA[<p>Hello everybody.</p>
<p>So yesterday I was on a little gathering called <a href="http://coderetreat.org/" title="Coderetreat" target="_blank">Coderetreat</a>.</p>
<p>If you look at the link you can read everything about it. If not, I&rsquo;ve provided a short description.</p>
<p><strong>What it is about?</strong></p>
<p>So what is codereatreat about? In short it&rsquo;s about programmers getting together and honing and practicing there skills in order to become more at what they are doing. It&rsquo;s a practice run with great people. TDDing one problem the whole day long with constantly applied constraints.</p>
<p><strong>Problem domain</strong></p>
<p>Usually it&rsquo;s some kind of coding kata. This sessions problem was <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life" target="_blank">Convey&rsquo;s Game Of Life</a>. It&rsquo;s a well known problem which you can&rsquo;t really solve in the given amount of time if you do it right. But that&rsquo;s not the goal anyways. The goal is the journey itself as was formulated by our facilitator.</p>
<p><strong>Process</strong></p>
<p>So what was going on there anyways? At 10:00AM the whole thing begun. Thirty developers set down, choose partners for TDD, and started to tackle the problem at hand. There were 6 sessions which lasted 45 minutes. After that a short retro and then a 10 minute break. On every session the code was deleted and rewrote from scratch. The first two sessions were introduction. And then the fun started with the constraints.</p>
<p><strong>Constraints</strong></p>
<p>The <strong>first</strong> one was that we were not allowed to use any loops when solving the problem. That was a tricky one. You had several options to go on but me not being a proper developer I couldn&rsquo;t think of too many. Well that&rsquo;s why I was there wasn&rsquo;t I? To learn. I came up with the idea of linking the cells together so when one is invalidated it notifies all his neighbours through a call. But I wasn&rsquo;t sure how to implement it. Also I choose a group which worked in ruby and it was a long time ago I wrote something in that language. It was a group effort but eventually we came up with a prototype that proved the first rule. I was happy!</p>
<p>The <strong>second</strong> one was <a href="http://coderetreat.org/facilitating/activities/ping-pong" target="_blank">TDD ping pong</a>. That was a really interesting experience for me. I grouped with a guy who had already experience in code retreat session so he didn&rsquo;t spare me. In addition we did silent ping pong and it was HARD! It was really hard for me to formulate my thoughts JUST in tests. So that he can get what I want and understand and agree on the design at the same time. So we ended up throwing tests at each other with the thought: Here try to solve this you bastard! It was great fun indeed!</p>
<p>The <strong>third</strong> constraint was &lsquo;No conditions.&rsquo;. That was the hardest for me. Coming up with recursion for the first one and having a fight in the second was nothing compared to this. Conditions are a fundamental structure of programming. It&rsquo;s logic basically. You can have the cells as objects and then a world of cells linked together but you still have to somehow decide if they live or die based on neighbour count.</p>
<p>So how do you avert it? I worked with a guy in this one who was good at low level thinking. He came up with the solution of using expressions as returns for the status:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="k">return</span> <span class="o">(!((</span><span class="n">neighbours</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">neighbours</span> <span class="o">&gt;</span> <span class="n">3</span><span class="o">)))</span> <span class="o">||</span> <span class="o">(((</span><span class="n">neighbours</span> <span class="o">==</span> <span class="n">2</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">neighbours</span> <span class="o">==</span> <span class="n">3</span><span class="o">)));</span>
</code></pre></td></tr></table>
</div>
</div><p>It&rsquo;s brilliant and easy if you see it like this but I was so used to thinking in higher structure and so used to the features given by the language, that I couldn&rsquo;t have come up with this in the given amount of time. So he had the idea and I coded it down. And this is actually working. It returns true or false based on the neighbour count. And we could use that return value to change the state of the cell afterwords.</p>
<p>The <strong>fourth</strong> and last task was that everybody stand up and finish someones else code. Practicing how to handle &ldquo;legacy&rdquo; code and a free for all session to finish the job.</p>
<p><strong>What I learned?</strong></p>
<p>Basically I learned that I really like code. I like writing it, thinking about it, solving problems and creating good, clean, clever solutions. I might be a tester by profession and I love being a tester, but there is a coder somewhere in here too who enjoyed every bit of that session yesterday. Of course this is not the only thing I took from that. I learned good technics. I learned that I&rsquo;m in a box and I need to think outside of it too. I constraint myself by depending on the language I use. And that I need to keep up practicing alas I loose my ability to solve complex logical problems by coding.</p>
<p>A coding kata a day helps keeping the bugs away. 😉</p>
<p><strong>End thoughts</strong></p>
<p>All in all the day was absolutely awesome. Great lunch and environment was provided by the host <a href="http://www.national-lottery.co.uk/" target="_blank">Camelot</a> and our fearless leader who walked around all day helping out and coordinating the whole thing <a href="www.meza.hu" target="_blank">Marton &lsquo;Meza&rsquo; Meszaros</a>. A big thank you and a lot of respect for doing it all day long.</p>
<p>Unfortunately because of my broken ankle I couldn&rsquo;t stay for the drinks but if you ever get to a session like this I strongly recommend staying the whole day AND the night. And not just &lsquo;till you stuffed your belly with free food and booze. 😉</p>
<p>And the top of the cherry is a great time laps of the whole day which can be seen here: <a href="http://www.youtube.com/watch?v=qBvMBAOQD5U" target="_blank">Coderetreat 29.09.12</a>. Enjoy as we had!</p>
<p>As always,</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>What my brain is up to the whole day…</title>
      <link>https://skarlso.github.io/2012/09/20/what-my-brain-is-up-to-the-whole-day/</link>
      <pubDate>Thu, 20 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/09/20/what-my-brain-is-up-to-the-whole-day/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>Here is a little graphic I made to show what my brain is up to the whole day long. Excuse me for the lack of my colouring skills. Enjoy</p>
<p>![Brain]<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="http://dl.dropbox.com/u/7604030/barinColored.jpg">http://dl.dropbox.com/u/7604030/barinColored.jpg</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></description>
    </item>
    
    <item>
      <title>Learning programming with a visual mind</title>
      <link>https://skarlso.github.io/2012/09/09/learning-programming-with-a-visual-mind/</link>
      <pubDate>Sun, 09 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/09/09/learning-programming-with-a-visual-mind/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>Today I want to write to you about <strong>learning</strong> something with a <strong>visual mind</strong>. There are a gazillion posts out there that tell you how to learn something with a visual mind. However, there are only a few <strong>actually describing</strong> how to learn something as complicated and logical as programming. How do you draw up a function? How do you draw up a cycle or a structure?</p>
<p>Actually these are really <strong>easy</strong>. A <strong>cycle</strong>? No problem. What&rsquo;s a <strong>circle</strong> if not a cycle? <strong>Structure</strong>? This should be an easy one. You can draw a whole <strong>building</strong> and then place <strong>building blocks</strong> into it.</p>
<p>I have a very <strong>strong visual mind</strong>. I don&rsquo;t remember names good for example however I remember every and each <strong>face very distinct</strong>. So if you come up to me, don&rsquo;t be surprised if I don&rsquo;t remember your name. So as I grew older and I took learning into my own hand I realised that there are <strong>techniques</strong> out there that I could have used to <strong>boost my learning</strong> in the early stages of my life too.</p>
<p>But there is no such thing as to be late for something. <strong>Life is constant learning</strong>. So don&rsquo;t hesitate to start learning something.</p>
<p>I <strong>started</strong> to learn <strong>Scala</strong> for example and I was <strong>brainstorming</strong> as how to <strong>draw</strong> up a good map for some programming practices. <strong>Brainstorming</strong> can help you coming up with something that can <strong>display your idea</strong>. Try to brainstorm <strong>in words only</strong> rather then sentences.</p>
<p>And I came up with these two for now, with the <strong>play framework</strong> in the middle.</p>
<p>![Structure]<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>![Route]<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>Now some of you <strong>might say</strong> this <strong>took long</strong> and is <strong>unnecessary</strong>. The information displayed can be <strong>remembered easily</strong> and that these drawings took longer then writing up two or three words. Now let&rsquo;s see.</p>
<p>These drawing, which are really <strong>rough</strong> actually, took me about <strong>10 minutes</strong> while reading and learning and what not. Yes they take longer. But if I write down <strong>two words</strong> how long will I remember them? I already <strong>forgot after I wrote it down</strong>!</p>
<p>This drawing with the griffon legs? <strong>Stuck there forever</strong>. ( Don&rsquo;t ask about the legs.. don&rsquo;t know where they came from. )</p>
<p>So visualisation goes a long way in your brain if you are wired that way. Remember that there is NOTHING that you can&rsquo;t display with a little bit of creativity and graphics.</p>
<p>Ohh and btw. Chances are that you only read the words in <strong>BOLD</strong> because your mind draws your attention to parts that stand out. And also you want to get over reading this article fast and you appreciate if key elements are taken out for you without the unimportant gibberish in between. 😉</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="http://dl.dropbox.com/u/7604030/structure.png">http://dl.dropbox.com/u/7604030/structure.png</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><a href="http://dl.dropbox.com/u/7604030/route.jpg">http://dl.dropbox.com/u/7604030/route.jpg</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></description>
    </item>
    
    <item>
      <title>TDD and Game of Life</title>
      <link>https://skarlso.github.io/2012/07/12/tdd-and-game-of-life/</link>
      <pubDate>Thu, 12 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/07/12/tdd-and-game-of-life/</guid>
      <description><![CDATA[<p>So today at 8-12PM I had a great session with two friends of mine. It was awesome. Like a mini code retreat.</p>
<p>We set down in a musky bar, drank wine and beer and cider, and decided to practice some TDD with the well known problem of <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life" target="_blank">Conway&rsquo;s Game of Life</a>. This challenge is really interesting. I never done it before, ever. So it was a really good practice for me.</p>
<p>So.</p>
<p><strong>In the beginning there was Test</strong></p>
<p>One of my friends and I started out by developing the implementation for the game while the second one was mentoring and couching us. As with any problem I&rsquo;m facing now days, I started with writing a failing test first. I didn&rsquo;t write any kind of production code yet. I wrote a test testing for having the class called game of life.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldHaveClassForGameOfLife</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">GameOfLife</span> <span class="n">gameOfLife</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GameOfLife</span><span class="o">();</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This wasn&rsquo;t compiling of course because I didn&rsquo;t have any kind of GameOfLife class. But intelliJ is so intelligent that I simply pressed Alt+Enter and created the class immediately. The class didn&rsquo;t have anything in it, but I already had a passing test.</p>
<p>So this went on and on and I created one test after another while my other coding friend did the same.</p>
<p><strong>Now the amazing part</strong></p>
<p>I begun working on the Grid. A simple octagonal coordinating system. This was represented in the beginning with a simple two dimensional array with Cells in it.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">Cells</span><span class="o">[][]</span> <span class="n">cells</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cells</span><span class="o">[</span><span class="n">50</span><span class="o">][</span><span class="n">50</span><span class="o">];</span>
</code></pre></td></tr></table>
</div>
</div><p>This of course wasn&rsquo;t dynamic. I didn&rsquo;t care about that yet. I had my grid of cells. These cells were initially all dead.</p>
<p>Now, the interesting part is that as I developed my Grid finding out the Cells neighbours and counting them, my friend worked on the Cells themselves and getting their next state and killing them based on the rules.</p>
<p>We never talked to each other, didn&rsquo;t agree on roles or directions or anything. And even so at the and. We were at a stage where we met in the middle and could merge our codes! Our little game of life evolved with a push of a button. ( Three actually. )</p>
<p>This was simply amazing. Without ever talking about the direction we want to go we created a working code base that could be merged!</p>
<p><strong>It just works</strong></p>
<p>Before TDD I would have tackled this problem much differently. And it would have taken me much more time too. This was like an hour or so.</p>
<p>TDD helped me break down the job into small, manageable tasks. I created and deleted and rewrote tests as I went on and on and developed the algorithm for my Grid and Cell. And eventually the problem slowly unfolded itself right before my eyes. I began to see the connections. I began to see the beauty. I began to understand! This is something I rarely enjoyed previously without using TDD.</p>
<p><strong>Summary</strong></p>
<p>I recommend for you guys to do the same. Just sit down, find a problem, find a coding kata and just do it with TDD. With PROPER TDD.</p>
<p>Here are some good sites for katas and problems:</p>
<p><a href="http://codekata.pragprog.com/" target="_blank"><a href="http://codekata.pragprog.com/">http://codekata.pragprog.com/</a></a></p>
<p><a href="http://www.spoj.pl/problems/classical/" target="_blank"><a href="http://www.spoj.pl/problems/classical/">http://www.spoj.pl/problems/classical/</a></a></p>
<p>Just select a problem and then start cracking on it. Do this every time you have some free time. Like a martial art trainee doing basic exercises and you will get better at problem solving and at TDD too. I promise.</p>
<p>Happy coding and good night!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Journey into an unknown system</title>
      <link>https://skarlso.github.io/2012/06/28/journey-into-an-unknown-system/</link>
      <pubDate>Thu, 28 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/28/journey-into-an-unknown-system/</guid>
      <description><![CDATA[<p>Aka, what you can do if you are facing and unknown framework / system you have to work with for quite some time.</p>
<p><strong>Get intimate</strong></p>
<p>You are going to live with this system for a while. The best thing you can do is getting to know it better. You have to get it to know like you would approche a fine lady. You have to ask it questions look after it, how it feels how its day was. Have to listen to what it tells you, you have to read its diary if necessary.</p>
<p>After a while you will be in a relationship with it. Now it&rsquo;s time to look out for it. Nurture it. Grow it. Care for it. A good piece of software is like a happy lady. It will great you every morning and it will say good by when you go home.</p>
<p>So how do you get to know a new system better.</p>
<p><strong>Debug</strong></p>
<p>In a new system Debugging is like a good old friend who tells you a story about the lady you want to conquer. You find a workflow and execute it in debug mode and follow each and every step that it makes. This way, you will see how each package and class is coupled together. You will be able to see the connections between modules and between calls and functions. It is a good way to see the inner workings.</p>
<p><strong>Ask her girlfriend</strong></p>
<p>Nothing knows more of the system at hand as its best friend. And a good systems best friends are the tests. Take a look at the unit tests, take a look at the integration tests and the acceptance tests. These will tell you more about the system and its actual working strategy than any documentation you can put your hands on. The tests are the closest and next best thing after the real deal.</p>
<p><strong>Conclusion</strong></p>
<p>It&rsquo;s really not that hard to get to know a large system better. Follow a main process with debug, look at the tests, talk to developers, and read some documentation about it. By the time you are done you will be best of friends and you will learn how to handle her the way she likes it. 😉</p>
<p>Hope that helped.</p>
<p>Cheers,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Solution to Wrap Kata</title>
      <link>https://skarlso.github.io/2012/06/26/solution-to-wrap-kata/</link>
      <pubDate>Tue, 26 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/26/solution-to-wrap-kata/</guid>
      <description><![CDATA[<p>My solution to the String Wrap Kata. The goal is to have it wrap a text on a given column width.</p>
<p>It is not the best solution but this is my first try. I did it with TDD so there were tests first, which I&rsquo;m not going to copy in..</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WrapKata</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">wrap</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">,</span> <span class="kt">int</span> <span class="n">columnSize</span><span class="o">)</span> <span class="o">{</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="n">columnSize</span><span class="o">)</span>
            <span class="k">return</span> <span class="n">input</span><span class="o">;</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">wrapLines</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="n">columnSize</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="nf">wrapLines</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">,</span> <span class="kt">int</span> <span class="n">columnSize</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">breakPoint</span> <span class="o">=</span> <span class="n">getBreakPoint</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="n">columnSize</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">head</span> <span class="o">=</span> <span class="n">createHead</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="n">breakPoint</span><span class="o">);</span>
        <span class="n">String</span> <span class="n">tail</span> <span class="o">=</span> <span class="n">createTail</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="n">breakPoint</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">head</span> <span class="o">+=</span> <span class="s">&#34;\n&#34;</span> <span class="o">+</span> <span class="n">wrap</span><span class="o">(</span><span class="n">tail</span><span class="o">,</span> <span class="n">columnSize</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="nf">createTail</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">,</span> <span class="kt">int</span> <span class="n">breakPoint</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">breakPoint</span><span class="o">).</span><span class="na">trim</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="nf">createHead</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">,</span> <span class="kt">int</span> <span class="n">breakPoint</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">substring</span><span class="o">(,</span> <span class="n">breakPoint</span><span class="o">).</span><span class="na">trim</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">getBreakPoint</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">,</span> <span class="kt">int</span> <span class="n">columnSize</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34; &#34;</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">lastIndexOf</span><span class="o">(</span><span class="sc">&#39; &#39;</span><span class="o">,</span> <span class="n">columnSize</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">columnSize</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
    </item>
    
    <item>
      <title>How to read a professional book for slow learners</title>
      <link>https://skarlso.github.io/2012/06/18/how-to-read-a-professional-book-for-slow-learners/</link>
      <pubDate>Mon, 18 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/18/how-to-read-a-professional-book-for-slow-learners/</guid>
      <description><![CDATA[<p>Hi everybody.</p>
<p>Today I want to talk to you about.. Well.. How to read a professional book for slow learners without too much waste of time.</p>
<p>Let us start at the. well. the beginning. How do you normally read a book if you want to memorize it properly. You read it once and then re read the whole thing again until it gets in your head? Or do you have another strategy?</p>
<p>Let me share you mine.</p>
<p>There are a few common practices that you can apply to better your chances of retaining the information that you get out of the pages you read.</p>
<p><strong>Re-reading the right way</strong></p>
<p>Re-reading is good. You definitely can apply that but do it the right way. As you read a chapter, define small chunks of paragraphs or entities or even the whole chapter for re-reading. That means. Read an entity fully. Don&rsquo;t stop at what you don&rsquo;t understand don&rsquo;t bother with it right now just read it. You will get a general overview of what&rsquo;s going on in that segment.</p>
<p>Once done, re-read the whole entity again, but this time pay attention to the details. This time look up what you don&rsquo;t understand. Go with the flow and once you&rsquo;re done go to the next section. This is not all however..</p>
<p><strong>Note taking</strong></p>
<p>As you go and re-read the entity you might want to consider that it is a good time for taking notes. Note taking is really something that you have to learn. Proper note taking that is. Notes that just repeat what ever is in the book or whatever you are reading currently is bad. That is just coping, that wont help you. You have to grasp the fundamentals. You have to take out what is important and forget the rest. You have to apply SMART objectives, little annotations, small sentences WITH YOUR OWN WORDS that will lead you to better understanding of the stuff that you are reading.</p>
<p>There are several methods that you can use for note taking, my favourite is <a href="http://en.wikipedia.org/wiki/Mind_map" title="MInd Mapping" target="_blank">Mind Mapping</a>.</p>
<p><strong>Writing up questions</strong></p>
<p>One other very good practice is simply defining your own questions. Look at the title of a chapter, maybe a small summary of the chapter if that&rsquo;s available. Try to define a set of questions that you want to get out of that chapter. Try to write down at least 3-4 questions that you think will be answered in that segment.</p>
<p>Read the segment. And now try to answer your Own questions without peaking. If you can&rsquo;t you either have to write down some other questions because it wasn&rsquo;t answered in that chapter. Or if it was answered but you still can&rsquo;t answer it from the top of your head that means that you didn&rsquo;t understood that chapter and that you have to re-read that part. If you can answer it, write it down so that it will stuck with you.</p>
<p><strong>Linking information</strong></p>
<p>Your brain is mostly associative. It works the best if it can link information to old information which is already in your head. Mind mapping helps with that. Mind mapping helps identifying old information segments in your brain. Try to find some common ground with the information you have to learn now and the one you already have. Unless your brain works differently you will better remember: &ldquo;Two friends went to the lake fishing at night and they caught three fishes.&quot;; then 23.</p>
<p><strong>Conclusion</strong></p>
<p>Generally speaking re-reading is a good practice but using it alone will sometimes not get you what you want. Re-reading the whole book isn&rsquo;t going to help. Writing notes helps, but use your own wording, formatting, DON&rsquo;T COPY!</p>
<p>I hope that help a bit to you guys out there who don&rsquo;t have a photographic memory.</p>
<p>Cheers,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Don’t throw Exception</title>
      <link>https://skarlso.github.io/2012/06/13/dont-throw-exception/</link>
      <pubDate>Wed, 13 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/13/dont-throw-exception/</guid>
      <description><![CDATA[<p>Hi.</p>
<p>Today I want to talk about a common problem in many frameworks I encountered over the course of my carrier as a Java dev / automation engineer, whatnot.</p>
<p>Throwing Exceptions. That is in your method you have something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertMethodNameHere</span><span class="o">(</span><span class="n">String</span> <span class="n">param</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{}</span>
</code></pre></td></tr></table>
</div>
</div><p>This is bad. And I will tell you in short forms why.</p>
<p><strong>Hides exceptions</strong></p>
<p>This one should be obvious. When a method throws exception you can never be sure what kind of exceptions it handles. It will hide what problems it can encounter. It will hide possible threats and will generally mean nothing to you when it fails.</p>
<p><strong>Hides functionality</strong></p>
<p>One of the things you can do will come up with a method that throws at least six exception. Well guess what. That will tell you that the method has DESIGN ISSUES! The first rule of software development is that a method should do only one thing! Well if it throws six exceptions chances are it does more then one.</p>
<p><strong>Hard to debug</strong></p>
<p>You wont have a meaning full exception if it fails immediately. You will have to go through lines of codes and stack traces to find out what the hell happened and what threw what kind of exception where. That is just simply stupid. Why give yourself a hard time?</p>
<p><strong>So what to do instead?</strong></p>
<p><strong>Meaning full exceptions</strong></p>
<p>If you have to throw. Throw meaning full exceptions. Things like: LoginFailedExpcetion(String username, String password); In the message write:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;Failed login with username: %s; password: %s&#34;</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</code></pre></td></tr></table>
</div>
</div><p>When this fails you will immediately know what happened without miles of stack trace to run through.</p>
<p>When you go ahead and start to re-factor your code to handle exceptions properly you will end up with methods throwing six - seven exceptions. Don&rsquo;t be afraid. That means that you finally are able to see that your code is doing many things that it is not supposed to do. Start by extracting bits and pieces of your code into smaller segments that throw a max of two exceptions. Write unit tests around the function and start running them as you re-factor. See what fails so you can track your changes as you go.</p>
<p>A general good advice is that your method should throw a maximum of <strong>TWO</strong> exception. If you have more, you are doing something more then you should. Refactor / Extract that bit into a smaller function.</p>
<p><strong>Handling exceptions</strong></p>
<p>What you really want to do is create a Layer that you will be using to capture and handle exceptions. You can than take that layer and hide it deep deep into your framework so that you never ever see it again. Just like with switch.</p>
<p>As you go you will have layers of layers of exceptions. You will have features that depend on each other and talk to each other in some ways.</p>
<p>Meaning full exception will help you find out what broke why. For example you have Login that throws a Login exception. On top of that you have an order that handles OrderFailedException. You will have an easy time seeing that the order failed because the login failed. Because you handled your login exception in the Login Layer. And you handled your OrderException in the order layer. There are no mixes. Keep it clean and keep it where it belongs.</p>
<p><strong>Conclusion</strong></p>
<p>Exceptions are part of Java just like String or int or long is. You use these wisely so why don&rsquo;t you apply that same logic to your Exception handling? Don&rsquo;t be afraid of having 20-25 exception classes. Group them together or leave them in their respective packages or have them in a deep layer but HAVE THEM. They WILL save time and time is always money. So they will save you money in the end when an error occurs. And errors will always occur.</p>
<p>Thanks for reading,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How to write a professional blog</title>
      <link>https://skarlso.github.io/2012/06/13/how-to-write-a-professional-blog/</link>
      <pubDate>Wed, 13 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/13/how-to-write-a-professional-blog/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>I want to write a little bit about writing a professional blog.</p>
<p><strong>Early steps</strong></p>
<p>Let&rsquo;s first talk about what you understand about professional blog. It&rsquo;s either a semi professional one, that mixes life with professionalism, like chess, programming, testing, painting, drawing, engineering whatever your profession is. Or it can be a purely professional one without your life getting involved in it.</p>
<p>Either way you have to decide at the beginning. Why? Because that&rsquo;s the kind of people you will attract. If you want to attract people from your profession then you have to decide that you will write plenty of your profession into your blog. If you want to attract hobbists more then you write about your profession AND daily life or other situations that are essentially irrelevant. Of course you can get both in both versions but the numbers will be different.</p>
<p><strong>Commiting</strong></p>
<p>A professional blog is a commitment. Start one only when you know you can &ldquo;finish&rdquo; it. It is a constant commitment that you HAVE to do even if you are sick, lazy, don&rsquo;t have time etc, etc.</p>
<p>I know the excuses because I made them myself a couple of times too, like: I don&rsquo;t have time. I write only when I want to. I write for myself, I don&rsquo;t care about people. I don&rsquo;t have an idea right now. I have better things to do. I don&rsquo;t feel like writing.</p>
<p>And so on and so fort. Truth is people. These are usually bull.</p>
<p><strong>1.</strong> You have time. Whenever you TRULY want to write you will make the 20 minutes to at least write a small post. Why? Because this is a professional blog. You WANT to get noticed. You WANT to help people. You started it because you wanted to make a difference. You wanted people to know you to praise you to acknowledge you. Guess what. If you are not writing anything, it wont happen. There are people out there with 4 children and a wife and he DOES find the time to write a blog.</p>
<p><strong>2.</strong> That would be true if you wouldn&rsquo;t be committed to your blog. Don&rsquo;t forget, this is a professional blog. This is something that you are writing to make people recognize you. Blogging is about discipline. You have to set aside some time, like 30 minutes / 1 hour to write something in your blog. Why 1 hour? Because of the research that you have to do before hand. I talk about that later. Anyways. This is a commitment. If you don&rsquo;t take it seriously, then don&rsquo;t write it. But then don&rsquo;t wait for people getting to know you, because they wont.</p>
<p><strong>3.</strong> This is just plain bull. If you write for yourself make your blog private and be done with it. &lsquo;nough said.</p>
<p><strong>4.</strong> Now this is something that we all face. In programming, in engineering in whatever your profession is, you will have a point in life, several actually, in which you don&rsquo;t know what to write about. That is true. It&rsquo;s common and it&rsquo;s called writers block. There are several ways of over coming that you can Google it. But don&rsquo;t forget this is a professional blog. Try to read a couple of others. Try to merit from real life, try to sit down and think quietly for a couple of minutes. Meditate, try to see connections where you didn&rsquo;t look before. Like building a robot for helping you quit smoking. How? Easy. Smoke detector. When he detects smoke comes out and sprinkles you with water. Or, since this is a testing blog, if you ran out of ideas what you want to write about testing, try this: Read a few magazines about programming, about real life scenarios, about hostage situations, about catastrophes, about hardware failures, about how your neighbor failed to pay his rent. These ALL are great sources for identifying testing opportunities and drawing connections with the software world. What I really found to be a good practice is going around having a notebook in your pocket and the moment I&rsquo;m hit with an idea I will write it into that notebook. I don&rsquo;t like using a phone, or other kind of electronic device for that. Why? Because the action of taking out my book, getting my pencil and actually writing something down physically makes me remember it better. But hey. Whatever suits you best. Just do it.</p>
<p>I could go on and on to from where to merit ideas for a blog, it could even be a whole separate post but I will leave somethings to figure out for yourself.</p>
<p><strong>5.</strong> This correlates to directly to line 1 and line 6. If you have a writers block or you are just plain lazy or you don&rsquo;t want to write at all, you will say lines like these.</p>
<p><strong>6.</strong> See <strong>5.</strong></p>
<p><strong>Conclusion</strong></p>
<p>Writing a professional blog is about commitment and discipline. Like chess, like drawing, like your own profession it needs time, it needs nourishment it needs petting, and nurturing and loving and hating and practicing. You started this blog to reach something. You started it for yourself so you could track your progress and knowledge. You started it because writing down ideas makes you remember them better or it will make more sense to you. You started because you want to get acknowledged. You started because you want to share your experience with beginners. You started because you want all of the above.</p>
<p>Then do it. Don&rsquo;t look for excuses. Writing a GOOD professional blog is hard. It will teach you much. It will make you more disciplined. It will increase your will power. It will increase your understanding of your craft. It will help other beginners who seek advice. It will help to make a name for yourself. It will help in an interview. It will generally be useful when ever you want to record a major even or idea in your life.</p>
<p>Also don&rsquo;t forget. You are having fun while you are doing it. You love it, and you know you love it, because if you wouldn&rsquo;t, you wouldn&rsquo;t really start in the first place.</p>
<p>Oh and by the way. Not every single one of your posts must be a small book sized one. You ARE allowed to write smaller pieces in a hurry if you just wanted to share a general idea.</p>
<p>Hope you liked this and I hope it could help you get started or to keep you on track.</p>
<p>Have a nice day,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Making your code understandable</title>
      <link>https://skarlso.github.io/2012/06/13/making-your-code-understandable/</link>
      <pubDate>Wed, 13 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/13/making-your-code-understandable/</guid>
      <description><![CDATA[<p>Hi!</p>
<p>I&rsquo;ve seen this many times over and over again. Many people have wrote books about it already. Like Uncle Bob&rsquo;s Clean Code. Like Pragmatic Programmer by Andrew Hunt and David Thomas. What makes your code understandable to others.</p>
<p>Is it <strong>Comments</strong>?</p>
<p>No. It&rsquo;s not comments. If your code could be read properly you wouldn&rsquo;t need comments to explain what it does. Like Uncle Bob said. A good code doesn&rsquo;t contain surprises. It does exactly what you would think it should do on the next line. It doesn&rsquo;t have curves and misinformation. It doesn&rsquo;t have plots and turns of events like a good crime book. No. Good code is a like a boring soap opera with predictable plot and boring plain characters who don&rsquo;t change there behavior based on circumstances.</p>
<p>Good code is easy to read. It flows like the river, falls like a waterfall, cooks like bacon and crosses the road like a professional chicken. If I read line A the next line should be B. If it is a Z or a :@L$. I wont be happy.</p>
<p>So then what makes it understandable?</p>
<p>On simple word: <strong>Readability</strong>.</p>
<p>What makes it readable?</p>
<p>Small chunks of functions that have descriptive names as few parameters as possible and do only ONE thing at a time. Of course this is not all there is. However it&rsquo;s the best thing to begin with. A function called &ldquo;doStuff&rdquo; that has a complexity of 300 has three fors, two switches and a dozen ifs isn&rsquo;t really helping. Now if you look at doStuff and try to give a name based on the job of the function and come up with &ldquo;propageXWithFiveUnlessYEqualsTheSumOfZPlusW&rdquo; you will know it does more then one thing.</p>
<p>If you see a really complex function in your production code or hobby code ask yourself: &ldquo;Should this really be like 300 lines long and with a complexity of 200??&rdquo; And as you speak this out loud you will know the answer already. Break it up. Have like a dozen smaller functions that will be better I promise you. Take out parts. Write unit tests to it that help with re-factoring. Break it down into as small chunks as possible. It will be worth it. It will increase understand-ability, readability and maintainability.</p>
<p>Hope that helped.</p>
<p>Thank you for reading and as always,</p>
<p>Have a nice Day,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Getting Dual Card to work on Ubuntu 12.04.</title>
      <link>https://skarlso.github.io/2012/04/11/getting-dual-card-to-work-on-ubuntu-12-04/</link>
      <pubDate>Wed, 11 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/04/11/getting-dual-card-to-work-on-ubuntu-12-04/</guid>
      <description><![CDATA[<p>Hi guys.</p>
<p>Today I want to talk about a little adventure I had yesterday night. It was quite the fun and frustration too. But neither comes without the other when it&rsquo;s about linux.</p>
<p>So let us see what the problem is at hand. The problem machine is a Dell Inspiron N5110 with Nvidia card number one: GeForce GT 525M. And number two: Integrated. Optimus for the win.</p>
<p>So how windows is handling this is actually with a software called Optimus. Now linux wasn&rsquo;t design to handle this properly but there are solutions. But I&rsquo;m getting ahead of myself. Let&rsquo;s start with the install.</p>
<p><strong>Ubuntu Install</strong></p>
<p>So first of all I installed <a href="http://www.ubuntu.com/download/ubuntu/download" target="_blank">Ubuntu 32 bit</a> because I experienced more problems with 64 bit. To be honest the ubuntu page also recommends 32 bit. You don&rsquo;t get to much from the 64 any ways.</p>
<p>After I downloaded and burned my disc and installed ubuntu next to my windows 7, I went for the updates. Now HERE is the first key point in my struggle. After the install I went for the additional drivers listed. There were actually additional drivers listed at that point!! Which is interesting because AFTER I installed the updates they disappeared and never appeared again. I&rsquo;m guessing that one of the packages overrode my drivers. I would go back and reinstall the thing and experiment with it, but I don&rsquo;t care any more.</p>
<p>So let&rsquo;s move on.</p>
<p><strong>After updating.</strong></p>
<p>So update went on and my Ubuntu was not using the proper resolution for my screen. It was stuck on 1024x768. Now at this point I would say I could have played around with xrandr and cvt but more about that later.</p>
<p>I was immediately searching for additional drivers only to find that my list was empty.</p>
<p><img src="http://ielmira.com/uploads/gallery/album_114/gallery_635_114_12692.png" alt="Empty Additional Drivers"></p>
<p>Like this. Now this isn&rsquo;t something new actually. I had this one before and I could not for the life of me solve it. Let&rsquo;s see what I did.</p>
<p><strong>Common in Every solution</strong></p>
<p>First let&rsquo;s go over some repository updates I did before starting to get some solutions.</p>
<p>I added the x-swat repository to apt-get because that has the most recent packages that will be released.</p>
<p>Add it with these commands:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1">#Add swat repository</span>
sudo add-apt-repository ppa:ubuntu-x-swat/x-updates
<span class="c1">#Update and upgrade</span>
sudo apt-get update <span class="o">&amp;&amp;</span> sudo apt-get upgrade
</code></pre></td></tr></table>
</div>
</div><p>Now you&rsquo;re ready to move on.</p>
<p><strong>Solution Fail Number One</strong></p>
<p>My first guess was to reinstall nvidia driver because of the updates the new driver has to be built with the new version of kernel.</p>
<p>So what I did was:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo apt-get remove --purge nvidia-current
</code></pre></td></tr></table>
</div>
</div><p>After that finished I reinstalled everything:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo apt-get update <span class="o">&amp;&amp;</span> sudo apt-get install nvidia-current nvidia-settings
</code></pre></td></tr></table>
</div>
</div><p>Additional drivers sometimes needs update to get new drivers. After that I rebooted. At this point I didn&rsquo;t have an xorg.conf files yet.</p>
<p>After the reboot everything was the same. Nothing changed. nvidia-settings still said I don&rsquo;t appear to be using nvidia x. All right I thought let&rsquo;s do that.</p>
<p>So I run:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo nvidia-xconfig
</code></pre></td></tr></table>
</div>
</div><p>And reboot..</p>
<p>Now THIS messed up my resolution pretty badly. All I was able to get my desktop to was 640x480. At this point I begun to play with xrandr.</p>
<p><strong>Xrandr</strong></p>
<p>So in order to get my resolution back I started to play around with xrandr at the first place. I wasn&rsquo;t trying to add anything to xorg.conf yet because I needed to find out if it would even work!</p>
<p>Now xrandr adds unsupported resolutions to video cards. If you have a resolution which us unknown you can set it using cvt.</p>
<p>Here is an article how to do so: <a href="https://wiki.ubuntu.com/X/Config/Resolution" target="_blank">Xrandr</a></p>
<p>Alas this didn&rsquo;t work. LVDS1 which was the display for my laptop didn&rsquo;t wanted to allow the new resolution I added for 1366x768. The error was:</p>
<p>X Error of failed request: BadMatch (invalid parameter attributes)</p>
<p>Major opcode of failed request: 150 (RANDR)</p>
<p>Minor opcode of failed request: 18 (RRAddOutputMode)</p>
<p>Serial number of failed request: 25</p>
<p>Current serial number in output stream: 26</p>
<p>I couldn&rsquo;t make much of this rather then that my card was still not properly configured and additional drivers was still empty.</p>
<p>As back to square one. I deleted xorg.conf and begun another solution.</p>
<p><strong>Solution Fail Number Two</strong></p>
<p>As I was going through problems I found one interesting one. It was a guide on how to install downloaded nvidia driver from scratch.</p>
<p>So again I went and uninstalled nvidia and started this solution. The steps are these:</p>
<ol>
<li>Start ubuntu with recovery mode. Login in root shell (with networking)</li>
<li>Remove your nvidia driver(what you did install) maybe this can be help: sudo apt-get purge nvidia-current sudo rm -rf /etc/X11/xorg.conf</li>
<li>restart your computer: sudo reboot</li>
<li>start ubuntu normally (not recovery)</li>
<li>open /etc/default/grub : sudo gedit /etc/default/grub</li>
<li>replace the line GRUB_CMDLINE_LINUX=&quot;&quot; to GRUB_CMDLINE_LINUX=&ldquo;nomodeset&rdquo; (save and exit)</li>
<li>update grub: sudo update-grub</li>
<li>Download appropriate driver from nvidia
10.Give executable permission to the downloaded file : chmod a+x nvidia_driver.run</li>
<li>Press CLT+ALT+F1 [command line shell will appear] and login</li>
<li>stop lightdm (display manager) service : sudo service lightdm stop</li>
<li>start nvidia installation: sudo ./nvidia_driver.run</li>
<li>reboot your system: sudo reboot</li>
</ol>
<p>Now this brought up a couple of new problems. First that although I downloaded the proper driver from Nvidia it failed to detect my GPU for whatever reasons. And second it could not build because it couldn&rsquo;t find nvidia.ko. I couldn&rsquo;t resolve these issues although I guess there are some for it. But in the end it didn&rsquo;t matter.</p>
<p>I reverted back to my original state. which was removing all of the drivers and resetting grub to its original state and went on to solution number three.</p>
<p><strong>Working Solution Number Three</strong></p>
<p>At this point I just wanted SOMETHING to work. I didn&rsquo;t even care about my nvidia card any more. And that was when I came across a post about dual cards. Something I didn&rsquo;t care about because IT WAS WORKING before the UPDATE! But I want on any ways and that was the right solution in the end.</p>
<p>You can find this solution <a href="http://askubuntu.com/questions/120261/ubuntu-11-10-problem-with-nvidia/120600#comment143754_120600" target="_blank">here</a>. The first answer.</p>
<p>For my sanities sake I will write it down here too.</p>
<p><strong>First</strong></p>
<p>Remove nvidia drivers. Again.</p>
<p><strong>Second</strong></p>
<p>Reinstall Mesa package for GL:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo apt-get --reinstall install libgl1-mesa-glx
</code></pre></td></tr></table>
</div>
</div><p>This will get your first card to work with ubuntu.</p>
<p>At this point I reinstalled my nvidia drivers too. Something the other guy didn&rsquo;t mention.</p>
<p><strong>Third</strong></p>
<p>Reboot</p>
<p><strong>Fourth</strong></p>
<p>Install a program called bumblebee. Yes, <a href="http://bumblebee-project.org/install.html" target="_blank">Bumblebee</a></p>
<p>This is equal to Windows optimus. It will handle your dual video cards. You&rsquo;ll see in a moment how.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo add-apt-repository ppa:bumblebee/stable
sudo apt-get update
sudo apt-get install bumblebee bumblebee-nvidia
</code></pre></td></tr></table>
</div>
</div><p><strong>Fifth</strong></p>
<p>Add yourself to use Bumblebee:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo usermod -a -G bumblebee <span class="nv">$USER</span>
</code></pre></td></tr></table>
</div>
</div><p>And then comes the magic. So in order for you to be able to use your second card with bumblebee you have to execute the program with optirun. This is much like windows optimus, just optimus works in the background.</p>
<p>After this I could finally see my cards settings for example by typing in:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo optirun nvidia-settings -c :8
</code></pre></td></tr></table>
</div>
</div><p>This executed the settings app and I was able to edit some settings I required while ubuntu was running fine with my other video card as primary card.</p>
<p>Now that was quite the fun, like I said, not?</p>
<p>I hope this guide showed you my errors and problems and maybe it could help you get along with yours.</p>
<p>If you have any questions, please feel free to write.</p>
<p>Thanks for reading!</p>
]]></description>
    </item>
    
    <item>
      <title>JMS Connection setup and Framework</title>
      <link>https://skarlso.github.io/2012/03/04/jms-connection-setup-and-framework/</link>
      <pubDate>Sun, 04 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/03/04/jms-connection-setup-and-framework/</guid>
      <description><![CDATA[<p>Hello chumps.</p>
<p>Today I want to write about jms connection testing with a small framework. I wrote a small thing using a factory object model. It&rsquo;s a lead, a proof of concept. You can use this to go onward.</p>
<p>First, let&rsquo;s begin with the JMS connection it self.</p>
<p><strong>JMS Connection</strong></p>
<p>First rule of thumb is: &ldquo;Don&rsquo;t wait for a response when dealing with JMS queues.&rdquo; How so? Because, a JMS queue is asynchronous so you wont get back anything. There are however two ways of checking if it was a success or not.</p>
<p>1: Check your database. The service you are trying out probably records something in the database, right? Check it. You can use a simple JDBC connection, or a Postgres connection or whatever your choice of database is.</p>
<p>2: You can monitor use the log of your choice of service provider. If there is an exception the moment you send something, you can be sure it is received. Just the format is not correct. This is of course based on how your service handles exceptions.</p>
<p>So let&rsquo;s get down to business.</p>
<p>First, there is a really good article on how to create a JMS connection.</p>
<p>This is the link for it: <a href="http://www.javablogging.com/simple-guide-to-java-message-service-jms-using-activemq" title="Simple JMS How To">Simple Guide to Java message service JMS using ActiveMQ</a></p>
<p>Itt will tell you everything you need to know about creating a connection and waiting for a response.</p>
<p>I will tell you now how to use this information in a real live environment.</p>
<p>In a real environment you will be using a queue which has certain settings that will not allow you to &ldquo;join&rdquo; it, or creating it. And you need to get the name of the queue and certain settings, like the destination URL.</p>
<p>First, the tool you are going to use is called JConsole. JConsole is a tool to monitor applications. It&rsquo;s tool to monitor the JVM. I wont go into details about it since there are numerous descriptions about it. It is part of the java installation.</p>
<p>So after firing it up and giving it a connection url which would look like this: &lsquo;service:jmx:rmi:///jndi/rmi://hostName:portNum/jmxrmi&rsquo;, you would go ahead and search on the TAB:<strong>Threads</strong>.</p>
<p>Look for a Thread that is labelled like this: <YourConnectionLayer> Transport Server: tcp://0.0.0.0: <port></p>
<p>This will be your destination url.</p>
<p>In the blog the guy is using ActiveMQ. It&rsquo;s your best guess. It&rsquo;s lightweight, it&rsquo;s fast it&rsquo;s easy. Go for it.</p>
<p>So your Destination would look like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">ConnectionFactory</span> <span class="n">connectionFactory</span> <span class="o">=</span>
            <span class="k">new</span> <span class="n">ActiveMQConnectionFactory</span><span class="o">(</span><span class="s">&#34;&lt;yourserviceparameter&gt;://tcp://0.0.0.0:&lt;port&gt;&#34;</span><span class="o">);</span>
    <span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">connectionFactory</span><span class="o">.</span><span class="na">createConnection</span><span class="o">();</span>
    <span class="n">connection</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</code></pre></td></tr></table>
</div>
</div><p>After that you will need the queue name which you can get as easy as this. Go to the TAB <strong>MBeans</strong>. There you can see, if you are using ActiveMQ, you will see something like this : org.active.activemq. Open this up and you will see under localhost a number of queues that your server has configured. Open up one of them and copy the queue name in the createQueue.</p>
<p>Use it like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">Destination</span> <span class="n">destination</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createQueue</span><span class="o">(</span><span class="s">&#34;&lt;queue name&gt;&#34;</span><span class="o">);</span>
</code></pre></td></tr></table>
</div>
</div><p>Of course if your service is configured properly you wont have any access to it. Use the connection like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">connection</span> <span class="o">=</span> <span class="n">connectionFactory</span><span class="o">.</span><span class="na">createConnection</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">,</span> <span class="s">&#34;password&#34;</span><span class="o">);</span>
</code></pre></td></tr></table>
</div>
</div><p>You will have now logged in with the proper user.</p>
<p>Now you can send the message. You have everything configured.</p>
<p><strong>Framework</strong></p>
<p>Let&rsquo;s speak about the framework you will need to properly use this technology.</p>
<p>One of the paradigms for programming is design to interfaces. If you need a proper working framework, your ave to design with the mind set to changing pieces of code. Thinking about what would change the most. Your connection settings. You want a framework which can use any kind of connection. Not just JMS but whatever connection you would like. It could be a synchronous one. Or a database one. Or a JMS. Doesn&rsquo;t matter. You are only interested in a message sent or a connection, or whatever you want.</p>
<p>So let&rsquo;s get to it.</p>
<p>Interface:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">IConnection</span> <span class="o">{</span>
	<span class="kt">void</span> <span class="nf">sendMessage</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This is sample connection interface. You could have numerous templates here.</p>
<p>You will be using an object factory pattern here. Your implementer will be taken for a Java Property file. But it can be taken from whatever configuration you like. XML maybe, or a database even.</p>
<p>Let&rsquo;s see you connection factory:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConnFactory</span> <span class="o">{</span>

	<span class="kd">static</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Logger</span><span class="o">();</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="n">IConnection</span> <span class="nf">getImplementer</span><span class="o">()</span>
	<span class="o">{</span>
		<span class="n">Properties</span> <span class="n">prop</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>

		<span class="k">try</span>
		<span class="o">{</span>
			<span class="n">prop</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&#34;conf/implementer.property&#34;</span><span class="o">));</span>
		<span class="o">}</span>
		<span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">io</span><span class="o">)</span>
		<span class="o">{</span>
			<span class="n">logger</span><span class="o">.</span><span class="na">Log</span><span class="o">(</span><span class="s">&#34;Could not find property file: &#34;</span> <span class="o">+</span> <span class="n">io</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
		<span class="o">}</span>

		<span class="n">String</span> <span class="n">implementerClass</span> <span class="o">=</span> <span class="n">prop</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&#34;implementer&#34;</span><span class="o">);</span>

		<span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">iConnect</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

		<span class="k">try</span>
		<span class="o">{</span>
			<span class="n">iConnect</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">implementerClass</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">catch</span> <span class="o">(</span><span class="n">ClassNotFoundException</span> <span class="n">ce</span><span class="o">)</span>
		<span class="o">{</span>
			<span class="n">logger</span><span class="o">.</span><span class="na">Log</span><span class="o">(</span><span class="s">&#34;Class could not be found: &#34;</span> <span class="o">+</span> <span class="n">ce</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
		<span class="o">}</span>

		<span class="n">IConnection</span> <span class="n">connection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

		<span class="k">try</span>
		<span class="o">{</span>
			<span class="n">connection</span> <span class="o">=</span> <span class="o">(</span><span class="n">IConnection</span><span class="o">)</span> <span class="n">iConnect</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
		<span class="o">}</span>
		<span class="k">catch</span> <span class="o">(</span><span class="n">IllegalAccessException</span> <span class="n">ie</span><span class="o">)</span>
		<span class="o">{</span>
			<span class="n">logger</span><span class="o">.</span><span class="na">Log</span><span class="o">(</span><span class="s">&#34;Illegal access excpetion: &#34;</span> <span class="o">+</span> <span class="n">ie</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>

		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InstantiationException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>

			<span class="n">logger</span><span class="o">.</span><span class="na">Log</span><span class="o">(</span><span class="s">&#34;Instatiation exception occured. &#34;</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
		<span class="o">}</span>

		<span class="k">return</span> <span class="n">connection</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Easy enough, right? Class.forname will instantiate the class name you have in the property file. This could be something like this: com.packagename.ClassName. Doesn&rsquo;t matter to you. You can add some typeof checks, or instanceof checks, whatever you like. Or you can use <Type> generics.</p>
<p>Let&rsquo;s get to the concrete implementation:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JMSConnectionImpl</span> <span class="kd">implements</span> <span class="n">IConnection</span> <span class="o">{</span>
    <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Logger</span><span class="o">();</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendMessage</span><span class="o">()</span>
    <span class="o">{</span>

   	<span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">.</span>
        <span class="o">.</span>
        <span class="o">.</span>
        <span class="k">finally</span>
        <span class="o">{</span>
            <span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span>

    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Simple enough. Here you have a concrete implementation of your collection and your sender class.</p>
<p>And the simple usage facility of this is. simple too:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">IConnection</span> <span class="n">iConnection</span> <span class="o">=</span> <span class="n">ConnFactory</span><span class="o">.</span><span class="na">getImplementer</span><span class="o">();</span>

    <span class="n">iConnection</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">();</span>
</code></pre></td></tr></table>
</div>
</div><p>Simple enough too, right? So what happens here? You have a factory that will give you back any kind of implementation you are writing in you property file. You don&rsquo;t care what the implementation is in your test. You don&rsquo;t care what it&rsquo;s name is. You don&rsquo;t care what it&rsquo;s result is. Okay, you care about the result, but that&rsquo;s another history since you will check that elsewhere.</p>
<p>There you go. If any question occurs, please don&rsquo;t hesitate to ask.</p>
<p>Thanks for reading!</p>
]]></description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://skarlso.github.io/2012/02/27/configuration/</link>
      <pubDate>Mon, 27 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/02/27/configuration/</guid>
      <description><![CDATA[<p>When I see something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">string</span> <span class="n">DATABASELINK</span> <span class="o">=</span> <span class="s">&#34;linkhere&#34;</span><span class="o">;</span>
        <span class="o">.</span>
        <span class="o">.</span>
        <span class="o">.</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>It sends a small, but chilling shiver down my spine. Just. don&rsquo;t. There are a lot of possibilities to use configuration in Java. Java property files. Xml. Xml serialization. CSV file. Whatever suits you best, but this? DON&rsquo;T!</p>
]]></description>
    </item>
    
    <item>
      <title>Hello and welcome</title>
      <link>https://skarlso.github.io/2012/02/26/hello-and-welcome/</link>
      <pubDate>Sun, 26 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/02/26/hello-and-welcome/</guid>
      <description><![CDATA[<p>Hello Dear Visitor.</p>
<p>Welcome to the ramblings of a software test engineer who thinks that he is a tester but feels like a developer but works as a tester but wants to learn programming like a developer. And so on and so fort.</p>
<p>I will make a journey that has been done by many automation testers. The journey when you decide to step one forward. A friend of mine told me that it is good that a tester learns proper programming and that more should do so. She is right. And I will try to document this journey as best as possible. I will try to write down my experiences with java, android, automation, swing, maven, hudson, selenium, cucumber, TDD, BDD, Agile environment and whatever tool I meet.</p>
<p>Please forgive me if you find some grammar errors, English is not my first Language. At least this will be a good opportunity to practice it.</p>
<p>Have fun.. Enjoy my ramblings.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Testing ‘code’ tag.</title>
      <link>https://skarlso.github.io/2012/02/26/testing-code-tag/</link>
      <pubDate>Sun, 26 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/02/26/testing-code-tag/</guid>
      <description><![CDATA[<p>Hello.</p>
<p>This is just a quick post to test the working of the code tag.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby">    <span class="no">Given</span><span class="p">(</span><span class="sr">/The Action is ([A-z]*)/</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">action</span><span class="o">|</span>
        <span class="vi">@action</span> <span class="o">=</span> <span class="n">action</span>
    <span class="k">end</span>
</code></pre></td></tr></table>
</div>
</div><p>Perfect!!</p>
<p>The name of the plugin is WP-Syntax. The trick is to edit the page in plain HTML. Because the WordPress word editor screws up the &lt;&gt; tags. But surely you already knew that.</p>
]]></description>
    </item>
    
  </channel>
</rss>