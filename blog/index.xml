<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/blog/</link>
    <description>Recent content in Blog on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Wed, 21 Apr 2021 01:01:00 +0100</lastBuildDate>
    <atom:link href="https://skarlso.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Reader&#39;s Digest 2021-04</title>
      <link>https://skarlso.github.io/2021/04/21/readers-digest/</link>
      <pubDate>Wed, 21 Apr 2021 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2021/04/21/readers-digest/</guid>
      <description>&lt;h1 id=&#34;readers-digest&#34;&gt;Reader&amp;rsquo;s Digest&lt;/h1&gt;
&lt;p&gt;I thought it would a cool idea if I kept a summary of the things I&amp;rsquo;ve read or listened to on a monthly
basis. Here is April of 2021 so far. Enjoy.&lt;/p&gt;
&lt;h2 id=&#34;invincible&#34;&gt;Invincible&lt;/h2&gt;
&lt;p&gt;After seeing it air on Amazon Prime, I had to go and read the comic. It&amp;rsquo;s quite a lot, but I assure you it&amp;rsquo;s worth it.
Some spoiler alerts&amp;hellip;&lt;/p&gt;
&lt;p&gt;Okay, so we follow this guy, Mark Grayson. He&amp;rsquo;s Invincible. He is also and alien, called a Viltrumite. I can hardly
summaries over 3000 pages of comic books so I&amp;rsquo;ll try to be brief.&lt;/p&gt;
&lt;p&gt;The Viltrumites are a race of warrior people who wants to conquer the whole galaxy. They also have the power to do so.
They are virtually immortal, live for thousands of years and are very durable. They can fly, have super strength and
a bunch of other things. The stories are insane. We follow all kinds of people across multiverses, a lot of villains and
heroes. There is gore, sex, violance and immature jokes all around. It&amp;rsquo;s fantastic.&lt;/p&gt;
&lt;p&gt;There are better episodes and there are boring episodes as it goes with these things. The one thing that bothered me a lot
is that the Viltrumites, of course, have a weak spot. You have to remember that these are people who want to be eliminated
by a lot of other people in the whole galaxy. There is a literal coalition of planets who want to kill them.&lt;/p&gt;
&lt;p&gt;And there are two main things which can kill / incapacitate them. The first one is a virus, which was developed by a
traiter Viltrumite which killed like 99.9% of them. And the other is the same weakness as the things have in the movie
called The quiet place. It&amp;rsquo;s specific frequency sound. Granted, some very specific frequency, but it&amp;rsquo;s sound. Because Viltrumites have a
delicate equilibrium because of their flying ability, if there is a specific frequency sound being emitted in close proximity
it can incapacitate or even kill a Viltrumite.&lt;/p&gt;
&lt;p&gt;Which makes me wonder that for thousands of years in multiple, parallel universes and with thousands of alien races,
nobody even thought of doing that? It had to be Earth and Humans ( and a Dinosaur ) who came up with it? That&amp;rsquo;s just
implausible really. And after being used only a couple of times, they don&amp;rsquo;t use it again on a global scale!&lt;/p&gt;
&lt;p&gt;Anyways. The story is still incredible and it has a lot of amazing content so I encourage comic lovers to read it all!&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;That&amp;rsquo;s it for this month. Some lengthy blog posts and Invincible pretty much took up my reading time.&lt;/p&gt;
&lt;p&gt;And as always,
Thanks for reading,
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reader&#39;s Digest 2021-03</title>
      <link>https://skarlso.github.io/2021/03/23/readers-digest/</link>
      <pubDate>Tue, 23 Mar 2021 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2021/03/23/readers-digest/</guid>
      <description>&lt;h1 id=&#34;readers-digest&#34;&gt;Reader&amp;rsquo;s Digest&lt;/h1&gt;
&lt;p&gt;I thought it would a cool idea if I kept a summary of the things I&amp;rsquo;ve read or listened to on a monthly
basis. Here is March of 2021 so far. Enjoy.&lt;/p&gt;
&lt;h2 id=&#34;the-aurora-database-paper&#34;&gt;The Aurora Database paper&lt;/h2&gt;
&lt;p&gt;The paper about Aurora database from AWS can be found here: &lt;a href=&#34;http://nil.csail.mit.edu/6.824/2020/papers/aurora.pdf&#34;&gt;Paper&lt;/a&gt;.
It details the design decision taken to support a highly available, fault tolerant, fast replicating
database. They take the following approach&amp;hellip; They modified mysql database such as that they only send
around the redo log and the redo log is enough to recover / replicate in order to achieve write and
read consistency. They separate the data into Protected Groups and speed up terabytes of recovery by
doing 10 Gigabyte segments in parallel. The database IS the logs. By only replicating the log instead
of the data and the data page, they save millions in networks costs. The main gain however, is that
the storage was modified to understand the application. Instead of using General store they use a storage
which understand the data. In this case, decoupling storage from the database, as so many do, was actually
a drawback.&lt;/p&gt;
&lt;h2 id=&#34;gcatch-paper&#34;&gt;GCatch paper&lt;/h2&gt;
&lt;p&gt;This paper is a static concurrency bug analyser for Go found here &lt;a href=&#34;https://songlh.github.io/paper/gcatch.pdf&#34;&gt;Paper&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s ingenious! It&amp;rsquo;s a static analyser which finds mostly blocking bugs using channels in Go. In Go, it&amp;rsquo;s
really easy to write concurrent software using something called &lt;a href=&#34;https://tour.golang.org/concurrency/2&#34;&gt;Channels&lt;/a&gt;.
They are basically coroutines multiplexed onto kernel threads and thus you can have a million of them
running around doing stuff. Go effectively made IO operators CPU bound with them. Coroutines aren&amp;rsquo;t new,
however, it&amp;rsquo;s really easy to mess up code with channels in subtle ways. Analyzers exist, however, GCatch
argues that they can&amp;rsquo;t find the most subtle of bugs, only some surface bugs really.&lt;/p&gt;
&lt;p&gt;This paper proposes a tool which does inter-procedural, path-sensitive analysis and uses Z3 to find paths
which can lead to deadlocks in code that uses locking primitives and channels. It also contains five other
prominent tools. It converts mutexes into channels internally with buffer size zero and sends on it on
Lock and reads from it on Unlock, then performs a bunch of path combinations and goes through those
suspicious paths and performs its analysis.&lt;/p&gt;
&lt;p&gt;They found a hundred and something bugs in Docker and Kubernetes. Things like, sending on a channel in
&lt;code&gt;select&lt;/code&gt; when in fact, a timeout already returned, thus that Go routine is not indefinitely stuck. Since
it can&amp;rsquo;t send its output on the channel, the program didn&amp;rsquo;t quit so it&amp;rsquo;s not GC-d. A simple fix is to
make the channel of size 1 so even if there is a chance that the scope quit it can still send and quit.
Like Exec.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s an interesting read and the tool is awesome, however&amp;hellip;. It was written with Go 14 and it&amp;rsquo;s proving to
be difficult to port to current version using modules. I would hate to see this tool getting left behind
because it can&amp;rsquo;t be turned into a linter.&lt;/p&gt;
&lt;h2 id=&#34;rhythm-of-war---brandon-sanderson&#34;&gt;Rhythm of War - Brandon Sanderson&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/Rhythm-War-Stormlight-Archive-Book-ebook/dp/B0826NKZHR&#34;&gt;Amazon&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An epic continuation of this saga with over a 1000 pages long and 54 hours of listening time on Audible.
This story has been ongoing for a while now. Brandon Sanderson came out with the first book back in 2010.
This is the continuation of the Stormlight Archive series. These are massive master pieces. I first came
along Brandon Sanderson when I read the Mistborn series. That was another epic novel. I love reading
Sanderson because he comes up with some unique ways of magic or magic like abilities which have some
divine sense in the end, or have some interesting explanation. And their abilities are almost always
used in interesting ways.&lt;/p&gt;
&lt;p&gt;For example, a simple ability to pull or push metal. Turns out that results in things like, shooting
coins, or literally flying as the person tosses a coin to the ground and pushes on it, pushing themselves
upwards in the end.&lt;/p&gt;
&lt;p&gt;I could write many many pages about each and every fantastic novel, but I&amp;rsquo;m going to stick to this one
expecting that people know about the series.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve listened to this one as I&amp;rsquo;m insane busy, I couldn&amp;rsquo;t have read a 1000 something pages book.
The fantastic work of Micheal Kramer and Kate Reading is always a treat to listen too. They are both
excellent readers always making the characters live through their words.&lt;/p&gt;
&lt;p&gt;SPOILERS:&lt;/p&gt;
&lt;p&gt;This time we mostly follow Eshonai&amp;rsquo;s and Venli&amp;rsquo;s but we finally also get what we wanted all these years.
Finally, Kaladin and Shallan face their inner demons. And even though they aren&amp;rsquo;t fully okay, Kaladin
speaks his fourth oat and Shallan remembers her past. As much as I love this story, I don&amp;rsquo;t believe I
would have been able to listen or read another 1000 pages without these two resolving their problems.
You root for them so hard, it&amp;rsquo;s exhausting.&lt;/p&gt;
&lt;p&gt;I won&amp;rsquo;t spoil everything but the twist at the end left me dumbstruck! It was such an amazing finish.&lt;/p&gt;
&lt;p&gt;The story follows the fused as they invade Urithiru. There is a side story for Navani and Jasna
doing their own thing and we do root for Navani and her fantastic discoveries regarding light and powers,
but Jasna is a side character in this story. Another main character is Witt. We finally get to know
who he is and where he comes from. We also understand now that the Fused are actually from another planet
in the same system and Odium just wants to get off this system and fight a holy war with some ancient Gods
somewhere. A lot of things which made no sense are revealed finally. I recommend it if you have the time
to listen or read it.&lt;/p&gt;
&lt;h2 id=&#34;how-to-take-smart-notes&#34;&gt;How to take smart notes&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/How-Take-Smart-Notes-Nonfiction-ebook/dp/B06WVYW33Y&#34;&gt;Amazon&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This one&amp;rsquo;s review will be condensed because it would be rather lengthy otherwise. It&amp;rsquo;s basically talking about
how to use the &lt;a href=&#34;https://zettelkasten.de/&#34;&gt;Zettelkasten&lt;/a&gt; system. But it does so much more then that. It challenges
the way you think, the way you learn the way things are taught in school and the way you process and store
information. Condensed I would say these are the main points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connect new information to existing information. Information without connection isn&amp;rsquo;t worth much and will be
remembered poorly or not at all.&lt;/li&gt;
&lt;li&gt;Always read with a pen in your hand and take notes about what you are reading.&lt;/li&gt;
&lt;li&gt;Always use your own words and never just copy blindly; by doing this, you will better understand what you just
read. The same goes to things like, writing a blog in which you explain something you think you know. It reveals
the black holes in your knowledge which you didn&amp;rsquo;t even know exist.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t try to group based on topics. That will result in forced connections and will leave you confined within
that topic. Topics should emerge from your notes and then gathered into indexes which contain links to related
notes and information.&lt;/li&gt;
&lt;li&gt;Tags are useful but don&amp;rsquo;t over do them. If you have a 1000 tags your information will be lost and hard to find
because things that are unrelated will show up in the searches. So go easy on the tags&lt;/li&gt;
&lt;li&gt;Note taking is a chore. It&amp;rsquo;s not something that you just do and it just works. Good note taking requires effort.
You take notes while you read then transcribe them into Zettelkasten and throw away the rest. Those are transient
notes. Zettelkasten notes focus on the gist of things. On the meat!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;And that&amp;rsquo;s all for this months. Rhythm of War, the papers and the note taking book pretty much took all my
time away, so not much else got done since January. But I still think this is a nice finish. Especially
considering Rhythm of War was such a huge epic.&lt;/p&gt;
&lt;p&gt;And as always,
Thanks for reading,
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reader&#39;s Digest 2021-01</title>
      <link>https://skarlso.github.io/2021/02/01/readers-digest/</link>
      <pubDate>Mon, 01 Feb 2021 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2021/02/01/readers-digest/</guid>
      <description>&lt;h1 id=&#34;readers-digest&#34;&gt;Reader&amp;rsquo;s Digest&lt;/h1&gt;
&lt;p&gt;I thought it would a cool idea if I kept a summary of the things I&amp;rsquo;ve read or listened to on a monthly
basis. Here is January of 2021 so far. Enjoy.&lt;/p&gt;
&lt;h2 id=&#34;all-systems-red---murderbot&#34;&gt;All systems red - Murderbot&lt;/h2&gt;
&lt;p&gt;This book is SHORT. It&amp;rsquo;s little over 3 hours of listening time. I&amp;rsquo;m listening at 1.30 so it&amp;rsquo;s just short of 2 hours.
But it&amp;rsquo;s entertaining. The murderbot series is following a rouge security bot which hacked its own governor module
and is self aware and free. But&amp;hellip; it kind of hates humans and interacting with them. It just calls itself murderbot
but has no intention of killing all humans. Instead, all its wants to do is basically&amp;hellip; watch movies and various series on something called a Feed. In the first book of the series, this one, we follow Murderbot protect a few humans
that it gets to short of like after an attempt on their lives.&lt;/p&gt;
&lt;p&gt;The narrator, Kevin R. Free, is doing a great job of impersonating the robot and you can feel the anxiety from his words when inevitably, the robot has to interact with humans. Whether it likes it or not&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;artificial-condition---murderbot&#34;&gt;Artificial Condition - Murderbot&lt;/h2&gt;
&lt;p&gt;Another short story following our Murderbot. This time, it wants to get to the bottom of a mystery involving its past.
In his past, the Murderbot, when it hacked its governor module, it went berserk and killed 80 people in the process. The company who owned it, covered it all up. Or so it thought. During its journey to find out what happened it met a new friend, Art. Art is a huge vessel capable of massive computing capacity, and happens to also love watching series.
They team up and help a rag-tag group of researchers while trying to find out what happened to Murderbot and those 80 people.&lt;/p&gt;
&lt;h2 id=&#34;rogue-protocol&#34;&gt;Rogue Protocol&lt;/h2&gt;
&lt;p&gt;Another fantastic episode of Murderbot. You can sense that the bot is slowly evolving into a more caring bot. Even though it&amp;rsquo;s saying repeatedly that it doesn&amp;rsquo;t case, it starts to care. This book was an action packed one. Lot&amp;rsquo;s of tension and fear inducing moments. Silence then all out war! We also meet Micky, who is a &amp;ldquo;pet bot&amp;rdquo; for some humans. Their relationship starts off as rocky but after a while, Murderbot comes to appreciate Micky for another free soul. There are some open question in there once the story finishes.&lt;/p&gt;
&lt;h2 id=&#34;the-vexed-generation---magician-20&#34;&gt;The vexed generation - Magician 2.0&lt;/h2&gt;
&lt;p&gt;Being a programmer, I followed Magician 2.0 with an interest. I listen to all of the books in the series. It was fun at first, but then started to get a bit low in quality and repetitive. I don&amp;rsquo;t really care about the people in it, and I don&amp;rsquo;t really care about what&amp;rsquo;s happening to them. And since they are effectively immortal there is no real danger to them at all. In this episode however, there was real danger at the end. And while the protagonist kids were kind of annoying, and it could have been narrated better and I felt like some of the characters weren&amp;rsquo;t fully utilized, the story kind of still was fun to read. Definitely better than the previous one about dragons.&lt;/p&gt;
&lt;h2 id=&#34;heavens-river---bobiverse&#34;&gt;Heaven&amp;rsquo;s River - Bobiverse&lt;/h2&gt;
&lt;p&gt;The latest addition to the Bobiverse universe. This time there is civil war amongst the Bobs and, of course, there is a new species to explore. The species was interesting, and the talk about mega-structures was also interesting, but I found that the lack of coding, and fighting and technical stuff ( what caught me on the first couple of Bob adventures ) left me wanting for more and left me with an empty feeling at the end. I really missed the proves of Bob and couldn&amp;rsquo;t care less about Starfleet.&lt;/p&gt;
&lt;h2 id=&#34;armada&#34;&gt;Armada&lt;/h2&gt;
&lt;p&gt;This one was interesting. It talks about the same premise as The Last Starfighter ( there is a reference to that in there ) which I found fascinating as a child. It is about the fact that an alien race uses video games to find the best soldier for a mission to save the universe. This time though the Earth is doing the recruiting and it is against an alien invasion. And much like Ender&amp;rsquo;s Game, it turns out that the threat is real and that all fighting on the video game that our protagonist did was preparing him for this situation. The twist was pretty good too.&lt;/p&gt;
&lt;h2 id=&#34;prometheus-up-and-running&#34;&gt;Prometheus Up And Running&lt;/h2&gt;
&lt;p&gt;This one has a larger post incoming.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all for this month.
Thanks for reading,
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to deploy a Go (Golang) backend with a React frontend separately on Kubernetes - Part One</title>
      <link>https://skarlso.github.io/2020/07/23/kubernetes-deploy-golang-react-apps-separately-part1/</link>
      <pubDate>Thu, 23 Jul 2020 21:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2020/07/23/kubernetes-deploy-golang-react-apps-separately-part1/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Welcome. This is a longer post about how to deploy a Go backend with a React frontend
on Kubernetes as separate entities. Instead of the usual compiled together single binary Go
application, we are going to separate the two. Why? Because usually a React frontend is just a &amp;ldquo;static&amp;rdquo;
SPA app with very little requirements in terms of resources, while the Go backend does most of the
leg work, requiring a lot more resources.&lt;/p&gt;
&lt;p&gt;Part two of this will contain scaling, utilization configuration, health probes, readiness probes,
and how to make sure our application can run multiple instances without stepping on each other&amp;rsquo;s toes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: This isn&amp;rsquo;t going to be a Kubernetes guide. Some knowledge is assumed.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/kube/short-version.png&#34; alt=&#34;Give me the short version&#34;&gt;&lt;/p&gt;
&lt;p&gt;This post details a complex setup of an infrastructure with a second part coming on scaling and how to make
your application scalable in the first place by doing idempotent transactions or dealing with locking and
several instances of the same application not stepping on each other&amp;rsquo;s foot.&lt;/p&gt;
&lt;p&gt;This, part one, details how to deploy traditional REST + Frontend based application in Go + React, but not bundled
together as a single binary, instead having the backend separate from the frontend. They key in doing so is explained
at the &lt;a href=&#34;#ingress&#34;&gt;Ingress&lt;/a&gt; section when talking about routing specific URIs to the backend and frontend services.&lt;/p&gt;
&lt;p&gt;If you are familiar with Kubernetes and infrastructure setup, feel free to skip ahead to that section. Otherwise, enjoy
the drawings or the writing or both.&lt;/p&gt;
&lt;h2 id=&#34;technology&#34;&gt;Technology&lt;/h2&gt;
&lt;p&gt;The SPA app will be handled by &lt;a href=&#34;https://www.npmjs.com/package/serve&#34;&gt;Serve&lt;/a&gt; while the Go backend
will use &lt;a href=&#34;https://echo.labstack.com/&#34;&gt;Echo&lt;/a&gt;. The database will be Postgres.&lt;/p&gt;
&lt;p&gt;We are going to apply some best practices using Network Policies to cordon off traffic that we don&amp;rsquo;t
want to go outside.&lt;/p&gt;
&lt;p&gt;We will set up HTTPS using cert-manager and let&amp;rsquo;s encrypt. We&amp;rsquo;ll be using nginx as ingress
provider.&lt;/p&gt;
&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/kube/architect.png&#34; alt=&#34;Let me show you the code&#34;&gt;&lt;/p&gt;
&lt;p&gt;All, or most of the code, including the application can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/staple-org&#34;&gt;Staple&lt;/a&gt;. The application is a simple reading list manager with
user handling, email sending and lots of database access.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get to it then!&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-provider&#34;&gt;Kubernetes Provider&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/kube/audition.png&#34; alt=&#34;Difficult Choice&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with the obvious one. Where do you would like to create your Kubernetes cluster?&lt;/p&gt;
&lt;p&gt;There are four major providers now-a-days. AWS &lt;a href=&#34;https://aws.amazon.com/eks/&#34;&gt;EKS&lt;/a&gt;, GCP &lt;a href=&#34;https://cloud.google.com/kubernetes-engine&#34;&gt;GKE&lt;/a&gt;,
Azure &lt;a href=&#34;https://azure.microsoft.com/en-us/services/kubernetes-service/&#34;&gt;AKS&lt;/a&gt; and DigitalOcean &lt;a href=&#34;https://www.digitalocean.com/products/kubernetes/&#34;&gt;DKE&lt;/a&gt;.
Personally, I prefer DO because, it&amp;rsquo;s a lot cheaper than the others. The downside is that DO only
provides ReadWriteOnce persistent volumes. This gets to be a problem when we are trying to update
and the new Pod can&amp;rsquo;t mount the volume because it&amp;rsquo;s already taken by the existing one. This can be
solved by a good ol NFS instance. But that&amp;rsquo;s another story.&lt;/p&gt;
&lt;p&gt;AWS&#39; was late to the party and their solution is quite fragile and the API is terrible. GCP is best in terms
of technicalities, api, handling, and updates. Azure is surprisingly good, however, the documentation is
most of the times out of date or even plain incorrect at some places.&lt;/p&gt;
&lt;h2 id=&#34;setup-basics&#34;&gt;Setup Basics&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/kube/owl.jpg&#34; alt=&#34;Owl&#34;&gt;&lt;/p&gt;
&lt;p&gt;To setup your Kubernetes instance, follow DigitalOcean&amp;rsquo;s Kubernetes Getting Started guide. It&amp;rsquo;s really simple.
When you have access to the cluster via kubectl I highly recommend using this tool: &lt;a href=&#34;https://github.com/derailed/k9s&#34;&gt;k9s&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a flexible and quite handy tool for quick observations, logs, shells to pods, edits and generally following what&amp;rsquo;s
happening to your cluster.&lt;/p&gt;
&lt;p&gt;Now that we are all set with our own little cluster, it&amp;rsquo;s time to have some people move in. First, we are going to
install cert-manager.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: I&amp;rsquo;m not going to use Helm because I think it&amp;rsquo;s unnecessary in this setting. We aren&amp;rsquo;t going to install
these things in a highly configurable way and updating with helm is a pain in the butt. For example, for cert-manager
the update with helm takes several steps, whilst updating with a plain yaml file is just applying the next version
of the yaml file.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not going to explain how to install cert-manager or nginx. I&amp;rsquo;ll link to their respective guides because frankly, they
are simple to follow and work out of the box.&lt;/p&gt;
&lt;p&gt;To install nginx, simply apply the yaml file located here: &lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/deploy/#digital-ocean&#34;&gt;DigitalOcean Nginx&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To install cert-manager follow this guide: &lt;a href=&#34;https://cert-manager.io/docs/installation/kubernetes/&#34;&gt;https://cert-manager.io/docs/installation/kubernetes/&lt;/a&gt;.
Follow the regular manifest install part, then ignore the Helm part and proceed with verification and then install
your issuer. I used a simple ACME/http01 issuer from here: &lt;a href=&#34;https://cert-manager.io/docs/configuration/acme/http01/&#34;&gt;https://cert-manager.io/docs/configuration/acme/http01/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: That acme configuration contains the &lt;strong&gt;staging&lt;/strong&gt; url. This is to test that things are working. Once you are
sure that everything is wired up correctly, switch that url to this one:
&lt;code&gt;https://acme-v02.api.letsencrypt.org/directory&lt;/code&gt; -&amp;gt; prod url. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;cert-manager.io/v1alpha2&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ClusterIssuer&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;letsencrypt-prod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;acme&lt;/span&gt;:
    &lt;span style=&#34;color:#75715e&#34;&gt;# The ACME server URL&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;https://acme-v02.api.letsencrypt.org/directory&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Email address used for ACME registration&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;your@email.com&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Name of a secret used to store the ACME account private key&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;privateKeySecretRef&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;letsencrypt-prod&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Enable the HTTP-01 challenge provider&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;solvers&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;http01&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;ingress&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;class&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;nginx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: I&amp;rsquo;m using a ClusterIssuer because I have multiple domains and multiple namespaces.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it. Cert-manager and nginx should be up and running. Later on, we will create our own
ingress rules.&lt;/p&gt;
&lt;h2 id=&#34;domain&#34;&gt;Domain&lt;/h2&gt;
&lt;p&gt;Next, you&amp;rsquo;ll need a domain to bind too. There are a gazillion domain providers out there like
no-ip, GoDaddy, HostGator, Shopify and so on. Choose one which is available to you or has the best
prices.&lt;/p&gt;
&lt;p&gt;There are some good guides on how to choose a domain and where to create it.
For example: &lt;a href=&#34;https://domains.google/learning-center/5-things-to-watch-out-for-when-buying-a-domain/&#34;&gt;5 things to watch out for when buying a domain&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;the-application&#34;&gt;The application&lt;/h1&gt;
&lt;p&gt;Alright, let&amp;rsquo;s put together the application.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/kube/assemble.png&#34; alt=&#34;Assemble&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;structure&#34;&gt;Structure&lt;/h2&gt;
&lt;p&gt;Every piece of our infrastructure will be laid out in yaml files. I believe in infrastructure as code.
If you run a command you will most likely forget about it, unless it&amp;rsquo;s logged and / or is replayable.&lt;/p&gt;
&lt;p&gt;This is the structure I&amp;rsquo;m using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── LICENSE
├── README.md
├── certificate_request
│   └── certificate_request.yml
├── configmaps
│   └── staple_initdb_script.yaml
├── database
│   ├── staple_db_deployment.yaml
│   ├── staple_db_network_policy.yaml
│   ├── staple_db_pvc.yaml
│   └── staple_db_service.yaml
├── namespace
│   └── staple_namespace.yaml
├── primer.sql
├── rbac
├── secrets
│   ├── staple_db_password.yaml
│   └── staple_mg_creds.yaml
├── staple-backend
│   ├── staple_deployment.yaml
│   └── staple_service.yaml
└── staple-frontend
    ├── staple_deployment.yaml
    └── staple_service.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;One other possible combination is, if you have multiple applications:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── README.md
├── applications
│   ├── confluence
│   │   ├── db
│   │   │   ├── db_deployment.yaml
│   │   │   └── db_service.yaml
│   │   ├── deployment
│   │   │   └── deployment.yaml
│   │   ├── pvc
│   │   │   └── confluence_app_pvc.yaml
│   │   └── service
│   │       └── service.yaml
│   ├── gitea
│   │   ├── config
│   │   │   ├── app.ini
│   │   │   └── gitea_config_map.yaml
│   │   ├── db
│   │   │   ├── gitea_db_deployment.yaml
│   │   │   ├── gitea_db_network_policy.yaml
│   │   │   ├── gitea_db_pvc.yaml
│   │   │   └── gitea_db_service.yaml
│   │   ├── deployment
│   │   │   └── gitea_deployment.yaml
│   │   ├── pvc
│   │   │   └── gitea_app_pvc.yaml
│   │   └── service
│   │       └── gitea_service.yaml
├── cronjobs
│   ├── cronjob1
│   │   ├── Dockerfile
│   │   ├── README.md
│   │   ├── go.mod
│   │   ├── go.sum
│   │   ├── cron.yaml
│   │   └── main.go
├── ingress
│   ├── example1
│   │   ├── example1_ingress_resource.yaml
│   │   └── gitea_ssh_configmap.yaml
│   ├── example2
│   │   └── example2_ingress_resource.yaml
│   ├── lets-encrypt-issuer.yaml
│   └── nginx
│       ├── nginx-ingress-controller-deployment.yaml
│       └── nginx-ingress-controller-service.yaml
└── namespaces
    ├── example1_namespace.yaml
    ├── example2_namespace.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;namespace&#34;&gt;Namespace&lt;/h2&gt;
&lt;p&gt;Before we begin, we&amp;rsquo;ll create a namespace for our application to properly partition all our entities.&lt;/p&gt;
&lt;p&gt;To create a namespace we&amp;rsquo;ll use this yaml &lt;code&gt;example_namespace.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Namespace&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;example&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Apply this with &lt;code&gt;kubectl -f apply example_namespace.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-database&#34;&gt;The Database&lt;/h2&gt;
&lt;p&gt;Deploying a Postgres database on Kubernetes is actually really easy. You need five things to have a basic, but
relatively secure installation.&lt;/p&gt;
&lt;h3 id=&#34;secret&#34;&gt;Secret&lt;/h3&gt;
&lt;p&gt;The secret contains our password and our database user. In postgres, if you define a user using &lt;code&gt;POSTGRES_USER&lt;/code&gt;
postgres will create the user and a database with the user&amp;rsquo;s name. This could come from Vault too, but
the Kubernetes secret is usually enough since it should be a closed environment anyways. But for important information
I would definitely use an admission policy and some vault secret goodness. (Maybe another post?)&lt;/p&gt;
&lt;p&gt;Our secret looks like this:
database_secret.yaml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Secret&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-db-password&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;data&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;POSTGRES_PASSWORD&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;cGFzc3dvcmQxMjM=&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# This creates a user and a db with the same name.&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;POSTGRES_USER&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;c3RhcGxl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To generate the base64 code for a password and a user, use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;echo -n &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password123&amp;#34;&lt;/span&gt; | base64
echo -n &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt; | base64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;and paste the result in the respective fields. Once done, apply with &lt;code&gt;kubectl -f apply database_secret.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;deployment&#34;&gt;Deployment&lt;/h3&gt;
&lt;p&gt;The deployment which configures our database. Looks something like this (database_deployment.yaml):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;apps/v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deployment&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-db&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;replicas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;matchLabels&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-db&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-db&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-db&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;postgres&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;postgres:11&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;POSTGRES_USER&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;POSTGRES_PASSWORD&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;valueFrom&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;secretKeyRef&lt;/span&gt;:
                &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-db-password&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;POSTGRES_PASSWORD&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/var/lib/postgresql/data&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;subPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# important so it gets mounted correctly&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-db-data&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/docker-entrypoint-initdb.d/staple_initdb.sql&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;subPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple_initdb.sql&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bootstrap-script&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-db-data&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;persistentVolumeClaim&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;claimName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;do-storage-staple-db&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bootstrap-script&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;configMap&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-initdb-script&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note the two volume mounts.&lt;/p&gt;
&lt;p&gt;The first one makes sure that our data isn&amp;rsquo;t lost when the database pod itself restarts. It creates a mount
to a persistent volume which is defined a few lines below by &lt;code&gt;persistentVolumeClaim&lt;/code&gt;. &lt;code&gt;subPath&lt;/code&gt; is important
in this case otherwise you&amp;rsquo;ll end up with a lost&amp;amp;found folder.&lt;/p&gt;
&lt;p&gt;The second mount is a postgres specific initialization file. Postgres will run that sql file when it
starts up. I&amp;rsquo;m using it to create my application&amp;rsquo;s schema.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;database&lt;/span&gt; staples;
&lt;span style=&#34;color:#66d9ef&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;table&lt;/span&gt; users (email varchar(&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;), password text, confirm_code text, max_staples int);
&lt;span style=&#34;color:#66d9ef&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;table&lt;/span&gt; staples (name varchar(&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;), id serial, content text, created_at &lt;span style=&#34;color:#66d9ef&#34;&gt;timestamp&lt;/span&gt;, archived bool, user_email varchar(&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And it comes from a configmap which looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ConfigMap&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-initdb-script&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;data&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;staple_initdb.sql&lt;/span&gt;:
    &lt;span style=&#34;color:#ae81ff&#34;&gt;create table users (email varchar(255), password text, confirm_code text, max_staples int);&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;create table staples (name varchar(255), id serial, content text, created_at timestamp, archived bool, user_email varchar(255));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;network-policy&#34;&gt;Network Policy&lt;/h3&gt;
&lt;p&gt;Network policies are important if you value your privacy. They restrict a PODs communication to a certain namespace
OR even to between applications only. By default I like to deny all traffic and then slowly open the valve until everything works.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/kube/szaffi.png&#34; alt=&#34;Szaffi&#34;&gt;
Kudos if you know who this is. (mind my terrible drawing capabilities)&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll use a basic network policy which will restrict the DB to talk to anything BUT the backend. Nothing else
will be able to talk to this Pod.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;NetworkPolicy&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-db-network-policy&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;podSelector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;matchLabels&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-db&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;policyTypes&lt;/span&gt;:
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;Ingress&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;Egress&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;ingress&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;podSelector&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;matchLabels&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;protocol&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;TCP&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5432&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;egress&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;to&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;podSelector&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;matchLabels&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;protocol&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;TCP&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5432&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The important bit here is the &lt;code&gt;podSelector&lt;/code&gt; part. The label will be the label used by the application deployment.
This will restrict the Pod&amp;rsquo;s incoming and outgoing traffic to that of the application Pod including denying internet
traffic.&lt;/p&gt;
&lt;h3 id=&#34;pvc&#34;&gt;PVC&lt;/h3&gt;
&lt;p&gt;The persistent volume claim definition is straight forward:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;PersistentVolumeClaim&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;do-storage-staple-db&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;accessModes&lt;/span&gt;:
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;ReadWriteOnce&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;requests&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;storage&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10Gi&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;storageClassName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;do-block-storage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;10 gigs should be enough anything.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/kube/gates.png&#34; alt=&#34;Gates&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;service&#34;&gt;Service&lt;/h3&gt;
&lt;p&gt;The service will expose the database deployment to our cluster.&lt;/p&gt;
&lt;p&gt;Our service is fairly basic:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Service&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-db-service&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5432&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-db&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;clusterIP&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s done with the database. Next up is the backend.&lt;/p&gt;
&lt;h2 id=&#34;the-backend&#34;&gt;The backend&lt;/h2&gt;
&lt;p&gt;The backend itself is written in a way that it doesn&amp;rsquo;t require a persistent storage so
we can skip that part. It only needs three pieces. A secret, a deployment definition and the
service exposing the deployment.&lt;/p&gt;
&lt;h3 id=&#34;secret-1&#34;&gt;Secret&lt;/h3&gt;
&lt;p&gt;First, we create a secret which contains Mailgun credentials.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Secret&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-mg-creds&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;data&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;MG_DOMAIN&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;cGFzc3dvcmQxMjM=&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;MG_API_KEY&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;cGFzc3dvcmQxMjM=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;database-connection&#34;&gt;Database connection&lt;/h3&gt;
&lt;p&gt;The connection settings are handled through the same secret which is used to spin up the DB itself.
We have to only mount that here too and we are good.&lt;/p&gt;
&lt;h3 id=&#34;deployment-1&#34;&gt;Deployment&lt;/h3&gt;
&lt;p&gt;Which brings us to the deployment. This is a bit more involved.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;apps/v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deployment&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-app&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;replicas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;matchLabels&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/instance&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;skarlso/staple:v0.1.0&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;imagePullPolicy&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;IfNotPresent&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;requests&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;memory&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;500Mi&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;cpu&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;250m&amp;#34;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;limits&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;memory&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1000Mi&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;cpu&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;500m&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;POD_NAMESPACE&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;valueFrom&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;fieldRef&lt;/span&gt;:
                &lt;span style=&#34;color:#f92672&#34;&gt;fieldPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;metadata.namespace&lt;/span&gt;
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;DB_PASSWORD&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;valueFrom&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;secretKeyRef&lt;/span&gt;:
                &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-db-password&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;POSTGRES_PASSWORD&lt;/span&gt;
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;MG_DOMAIN&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;valueFrom&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;secretKeyRef&lt;/span&gt;:
                &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-mg-creds&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;MG_DOMAIN&lt;/span&gt;
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;MG_API_KEY&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;valueFrom&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;secretKeyRef&lt;/span&gt;:
                &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-mg-creds&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;MG_API_KEY&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;args&lt;/span&gt;:
          - --&lt;span style=&#34;color:#ae81ff&#34;&gt;staple-db-hostname=staple-db-service.cronohub.svc.cluster.local:5432&lt;/span&gt;
          - --&lt;span style=&#34;color:#ae81ff&#34;&gt;staple-db-username=staple&lt;/span&gt;
          - --&lt;span style=&#34;color:#ae81ff&#34;&gt;staple-db-database=staple&lt;/span&gt;
          - --&lt;span style=&#34;color:#ae81ff&#34;&gt;staple-db-password=$(DB_PASSWORD)&lt;/span&gt;
          - --&lt;span style=&#34;color:#ae81ff&#34;&gt;mg-domain=$(MG_DOMAIN)&lt;/span&gt;
          - --&lt;span style=&#34;color:#ae81ff&#34;&gt;mg-api-key=$(MG_API_KEY)&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-port&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;containerPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;9998&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are a few important points here and I won&amp;rsquo;t explain them all, like the resource restrictions,
which you should be familiar with by now. I&amp;rsquo;m using a mix of 12factor app&amp;rsquo;s environment configuration
and command line arguments for the application configuration. The app itself is not using os.Environ
but the args.&lt;/p&gt;
&lt;p&gt;The args point to the cluster local dns of the database, some db settings, and the mailgun credentials.&lt;/p&gt;
&lt;p&gt;It also exposes the container port 9998 which is Echo&amp;rsquo;s default port.&lt;/p&gt;
&lt;p&gt;Now all we need is the service.&lt;/p&gt;
&lt;h3 id=&#34;service-1&#34;&gt;Service&lt;/h3&gt;
&lt;p&gt;Without much fanfare:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Service&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-service&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/instance&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/instance&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;service-port&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;9998&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;targetPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-port&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And with this, the backend is done.&lt;/p&gt;
&lt;h2 id=&#34;the-frontend&#34;&gt;The frontend&lt;/h2&gt;
&lt;p&gt;The frontend, similarly to the backend, does not require a persistent volume. We can skip that one too.&lt;/p&gt;
&lt;p&gt;In fact it only needs two things, a deployment and a service, and that&amp;rsquo;s all. It uses serve to host the
static files. Honestly, that could also be a Go application serving the static content or anything
that can serve static files.&lt;/p&gt;
&lt;h3 id=&#34;deployment-2&#34;&gt;Deployment&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;apps/v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deployment&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-frontend&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-frontend&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;replicas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;matchLabels&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-frontend&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-frontend&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-frontend&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/instance&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-frontend&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-frontend&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;skarlso/staple-frontend:v0.0.9&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;imagePullPolicy&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;IfNotPresent&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;requests&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;memory&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;500Mi&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;cpu&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;250m&amp;#34;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;limits&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;memory&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1000Mi&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;cpu&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;500m&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;POD_NAMESPACE&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;valueFrom&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;fieldRef&lt;/span&gt;:
                &lt;span style=&#34;color:#f92672&#34;&gt;fieldPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;metadata.namespace&lt;/span&gt;
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;REACT_APP_STAPLE_DEV_HOST&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-front&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;containerPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;service-2&#34;&gt;Service&lt;/h3&gt;
&lt;p&gt;And the service:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Service&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-front-service&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-frontend&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-frontend&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/instance&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-frontend&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-frontend&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-frontend&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/instance&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-frontend&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-front&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;targetPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-front&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And with that the backend and frontend are wired together and ready to receive traffic.&lt;/p&gt;
&lt;p&gt;All pods should be up and running without problems at this point. If you have any trouble deploying
things, please don&amp;rsquo;t hesitate to leave a question in the comments.&lt;/p&gt;
&lt;h2 id=&#34;ingress&#34;&gt;Ingress&lt;/h2&gt;
&lt;p&gt;Fantastic. Now, our application is running. We just need to expose it and route traffic to it.
The backend has the api route &lt;code&gt;/rest/api/v1/&lt;/code&gt;. The frontend has the route syntax &lt;code&gt;/login&lt;/code&gt;, &lt;code&gt;/register&lt;/code&gt;
and a bunch of others. The key here is that all of them are under the same domain name but based on the URI
we need to direct one request to the backend the other to the frontend.&lt;/p&gt;
&lt;p&gt;This is done via nginx&amp;rsquo;s routing logic using regex. In an nginx config this would be the &lt;code&gt;location&lt;/code&gt; part.
It&amp;rsquo;s imperative that the order of the routing is from more specific towards more general Because we need to catch
the specific URIs first.&lt;/p&gt;
&lt;h3 id=&#34;ingress-resource&#34;&gt;Ingress Resource&lt;/h3&gt;
&lt;p&gt;To do this, we will create something called an &lt;a href=&#34;https://docs.nginx.com/nginx-ingress-controller/configuration/ingress-resources/&#34;&gt;Ingress Resource&lt;/a&gt;.
Note that this is Nginx&amp;rsquo;s ingress resource and not Kubernetes&#39;. There is a difference.&lt;/p&gt;
&lt;p&gt;I suggest reading up on that link about the ingress resource because it reads quite well and will explain how it
works and fits into the Kubernetes environment.&lt;/p&gt;
&lt;p&gt;Got it? Good. We&amp;rsquo;ll create one for &lt;code&gt;staple.app&lt;/code&gt; domain:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;extensions/v1beta1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Ingress&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-app-ingress&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;annotations&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;kubernetes.io/ingress.class&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;cert-manager.io/cluster-issuer&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;letsencrypt-prod&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;cert-manager.io/acme-challenge-type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;http01&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;nginx.ingress.kubernetes.io/rewrite-target&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/$1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# this is important&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;tls&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;hosts&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;staple.app&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;secretName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-app-tls&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;rules&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple.app&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;http&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;paths&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;backend&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;serviceName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-service&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;servicePort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ss-port&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 9998&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/(rest/api/1.*)&lt;/span&gt;
  - &lt;span style=&#34;color:#f92672&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple.app&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;http&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;paths&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;backend&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;serviceName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staple-front-service&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;servicePort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;sfs-port&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 5000&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/(.*)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s take a look at what&amp;rsquo;s going on here. The first thing to catch the eye are the annotations.
These are configuration settings for nginx, cert-manager and Kubernetes.
We have the cluster issuer&amp;rsquo;s name. The challenge type, which we decided should be http01,
and the most important part, the rewrite-target setting. This will use the first capture group
as a base after the host.&lt;/p&gt;
&lt;p&gt;With this rewrite rule in place, the &lt;code&gt;paths&lt;/code&gt; values need to provide a capture group. The first in line will see
everything that goes to the urls like: &lt;code&gt;staple.app/rest/api/1/token&lt;/code&gt;, &lt;code&gt;staple.app/rest/api/1/staples&lt;/code&gt;,
&lt;code&gt;staple.app/rest/api/1/user&lt;/code&gt;, etc. The first part of the url is the host &lt;code&gt;staple.app&lt;/code&gt;, second part is &lt;code&gt;/(rest/api/1/.*)&lt;/code&gt;
for which the result is that group number one ($1) will be &lt;code&gt;rest/api/1/token&lt;/code&gt;. Nginx now sees that we
have a backend route for that and will send this URI along to the service. Our service picks it up
and will match that URI to the router configuration.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/kube/regex.png&#34; alt=&#34;Regex&#34;&gt;&lt;/p&gt;
&lt;p&gt;If there is a request like, &lt;code&gt;staple.app/login&lt;/code&gt;, which is our frontend&amp;rsquo;s job to pick up, the first rule
will not catch it because the regex isn&amp;rsquo;t matching, so it falls through to the second one, which
is the frontend service that is using a &amp;ldquo;catch all&amp;rdquo; regex. Like ip tables, we go from
specific to more general.&lt;/p&gt;
&lt;h1 id=&#34;ending-words&#34;&gt;Ending words&lt;/h1&gt;
&lt;p&gt;And that&amp;rsquo;s it. If everything works correctly, then the certificate service wired up the https certs and
we should be able ping the rest endpoint under &lt;code&gt;https://staple.app/rest/api/1/token&lt;/code&gt; and log in to the app
in the browser using &lt;code&gt;https://staple.app&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Stay tuned for the second part where we&amp;rsquo;ll scale the thing up!&lt;/p&gt;
&lt;p&gt;Thanks for reading!
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to do a good code review</title>
      <link>https://skarlso.github.io/2020/05/11/good-code-reviews/</link>
      <pubDate>Mon, 11 May 2020 21:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2020/05/11/good-code-reviews/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;This time, I would like to talk a little bit about code reviews.&lt;/p&gt;
&lt;p&gt;How do you do code reviews? Don&amp;rsquo;t hesitate to share it in the comments.&lt;/p&gt;
&lt;p&gt;How do I do code reviews? Well read on if you would like to know.&lt;/p&gt;
&lt;h1 id=&#34;the-top-down-approach&#34;&gt;The Top Down approach&lt;/h1&gt;
&lt;p&gt;If I&amp;rsquo;m dealing with a small code change, a couple of lines here and there in the odd file
first, I&amp;rsquo;ll try to understand why the review is there? What was it trying to achieve? What&amp;rsquo;s
the goal of the change? Is there a ticket/issue I can read for background info? Or an RFC?&lt;/p&gt;
&lt;p&gt;Understanding the goal of the change will let you know how to read the change. I usually also
scribble down some notes and my expectations to see if the change meets them or does something
completely different. And if it&amp;rsquo;s different, maybe my expectations were wrong.&lt;/p&gt;
&lt;p&gt;In any case, I will have a framework to start with. It&amp;rsquo;s important to understand why the change
is there in the first place. I cannot stress this enough.&lt;/p&gt;
&lt;h1 id=&#34;logical-follow&#34;&gt;Logical follow&lt;/h1&gt;
&lt;p&gt;If the change is large, the top down approach will simply not work. You will loose track of
why the change is and your logical big picture image will fade into nothingness after a hundred lines.&lt;/p&gt;
&lt;p&gt;In Github at least, what I would do to approach this, is close all views and just have a general sense first
how big the change is, and what files changed (after I understand why the change is there and what is it trying
to change and / or solve). Once I have a feel for the structure I would look for changes which are trivial.
For example parameter changes of a function. I would expect that in that case there will be a lot of changes at places
where that function was called. I would review those and then go on.&lt;/p&gt;
&lt;p&gt;If there is any, I would look for an entry point into the change. Is there a new handler? A new API?
A new method? Did an API change? If so, did that change propagate all the way through the API&amp;rsquo;s implementation?&lt;/p&gt;
&lt;p&gt;If it&amp;rsquo;s a huge number of deletes, I would look for the deleted code in the whole codebase. Did they miss something?
Was that code referenced in another section of the code or possibly in another service? In that case, do a search
on the whole organization on all repositories if you believe that that makes sense.&lt;/p&gt;
&lt;p&gt;If it&amp;rsquo;s concurrent code&amp;hellip; are they syncing it up at some point? Are they releasing the lock? Is the lock happening
at the right place? In Go for example, you can get a lock and then &lt;code&gt;defer w.Lock.Unlock()&lt;/code&gt; it. This makes
for a convenient way of &amp;ldquo;forgetting&amp;rdquo; about the lock acquire. But this is counterproductive in some cases.&lt;/p&gt;
&lt;p&gt;Imagine you have a function which acquires the lock in the begin. Then does a for loop which takes a couple of seconds
but doesn&amp;rsquo;t actually use the map or the value you were trying to protect. In that case you are taking the
lock but aren&amp;rsquo;t actually using it. There was no point in acquiring it at the beginning of the function.&lt;/p&gt;
&lt;h1 id=&#34;general-order&#34;&gt;General order&lt;/h1&gt;
&lt;p&gt;There are a LOT of things one can review in a PR. Minute things and a myriad if small to big logical
problems and ramifications. It&amp;rsquo;s not possible to list them all. So here are some general rules I would
follow:&lt;/p&gt;
&lt;h2 id=&#34;syntax&#34;&gt;Syntax&lt;/h2&gt;
&lt;p&gt;The first thing I would do is look through the syntax and follow this mnemonic: BUD.
B(ottleneck), U(nnecessary code), D(uplicate work). Spotting these is usually easy but it can happen
that the change is subtle. Bottlenecks are often embedded loops in loops or a very sneaky recursion.
Unnecessary code is sometimes harder to spot. This is duplicate code which could be extracted. It can be subtle
because it&amp;rsquo;s likely that only a small thing changes and at first glance it&amp;rsquo;s not trivial how to extract
the rest of the code around that small thing. Maybe it can be a function (if your language supports functions
as first class citizens) which could close over a value and change it multiple times.&lt;/p&gt;
&lt;p&gt;Duplicate work is when a loop is calculating something over and over but it&amp;rsquo;s actually the same thing or
we already have that information and it&amp;rsquo;s not likely that it would change so it can be reused. These kind of
problems are solved through caching or simply just do it once, store the result, then pass it around. Candidates
for this could be multiple calls to the same api for the same information which didn&amp;rsquo;t change in between.&lt;/p&gt;
&lt;h2 id=&#34;general-language-guidelines&#34;&gt;General language guidelines&lt;/h2&gt;
&lt;p&gt;General language syntax and guidelines adherence comes next. In Go this is trivial, since we have a plethora
of tools available to us, devs, in the form of static analyzers like, fmt, golint, goimport etc. But in the
absence there is usually a good guide at hand how a language is supposed to look like.&lt;/p&gt;
&lt;h2 id=&#34;workplace--project-guideline-adherence&#34;&gt;Workplace / Project guideline adherence&lt;/h2&gt;
&lt;p&gt;This could arguably come before the general adherence. Whichever suits you better. Or maybe your workplace / environment
the code is in (this could also be an open source project) is different from the general guidelines. That is okay, as
long as it&amp;rsquo;s sensible. You could try changing it if you think it&amp;rsquo;s too far from how a language is supposed to look like
but that usually doesn&amp;rsquo;t work. Especially if the in-place guidelines are already there for years.&lt;/p&gt;
&lt;p&gt;Generally though, it&amp;rsquo;s better to follow whatever style/code/whim the current environment is doing. If changing something
always look around how that looks like in the code you are working in and then follow that style. These could be things like,
variable naming, comment semantics, logical flow of the code, structuring (like where the code should go and how it should look
like (yes, look like(sometime aesthetics matter))).&lt;/p&gt;
&lt;h2 id=&#34;could-it-be-done-concurrently&#34;&gt;Could it be done concurrently&lt;/h2&gt;
&lt;p&gt;As a cherry on top, I would try to determine if the work that is being done, could be done in a thread / go routine. In Go, go routines
are cheap and very easy to make. It&amp;rsquo;s also easy to abuse them of course, but it doesn&amp;rsquo;t hurt to think asynchronously. Especially in
a distributed environment. Which brings me to the next point.&lt;/p&gt;
&lt;h2 id=&#34;in-a-distributed-environment-timing-is-key&#34;&gt;In a distributed environment timing is key&lt;/h2&gt;
&lt;p&gt;If this change is in an environment which has many services and is generally distributed your first though should immediately
be, how those this affect the rest of the services and what timing issues could arise. If there is a delete operation, what about
another service calling a create or a get on the same resource at the same time? What if it&amp;rsquo;s a create but another service also calls
create with the same values? Is the data eventually consistent or strongly consistent? How does that affect the runtime? Is the change
in a frequently called code segment which is usually under heavy load? Did the change change the way that is handled? Did it slow it down
or speed it up? Did it trade the slowdown for strong consistency? Is strong consistency really needed in that service which would
justify the slowdown?&lt;/p&gt;
&lt;p&gt;Like I said&amp;hellip; a myriad of things&amp;hellip;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll stop here for now.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I hope this made sense. If you disagree with this approach or have a different guideline of reviewing, please don&amp;rsquo;t hesitate it to share it!&lt;/p&gt;
&lt;p&gt;As always,
Thanks for reading!
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Make SPA refresh work with a Go backend</title>
      <link>https://skarlso.github.io/2020/02/17/making-spa-refresh-work-with-go-backend/</link>
      <pubDate>Mon, 17 Feb 2020 21:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2020/02/17/making-spa-refresh-work-with-go-backend/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Today I would like to share a quick &amp;ldquo;fix&amp;rdquo; for a problem I&amp;rsquo;ve seen popping up here and there.&lt;/p&gt;
&lt;p&gt;That is, if you have a react frontend which is a SPA app but you still want refresh to work.
What do I mean by that? Consider the following&amp;hellip;&lt;/p&gt;
&lt;h1 id=&#34;the-problem&#34;&gt;The problem&lt;/h1&gt;
&lt;p&gt;You have a SPA app with a react router which navigates the user around. The app calls to a backend
api which serves content of some kind. You have the following routes&amp;hellip;. login, signup, reset, archive.&lt;/p&gt;
&lt;p&gt;If your app is compiled with your backend, as it usually is, then something like: &lt;a href=&#34;https://app.com/login&#34;&gt;https://app.com/login&lt;/a&gt;
will not work unless it&amp;rsquo;s also defined on the backend serving some content.&lt;/p&gt;
&lt;p&gt;So but what should the content be in this case?&lt;/p&gt;
&lt;h1 id=&#34;the-structre&#34;&gt;The structre&lt;/h1&gt;
&lt;p&gt;For that, let&amp;rsquo;s first look at the strucute of the app. Consider the following directory tree:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── Dockerfile
├── LICENSE
├── Makefile
├── README.md
├── build
├── cmd
│   └── root.go
├── frontend
│   ├── LICENSE
│   ├── README.md
│   ├── build
│   ├── package-lock.json
│   ├── package.json
│   ├── public
│   ├── src
│   └── yarn.lock
├── go.mod
├── go.sum
├── img
├── internal
└── pkg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For this, the frontend contains a build dir in which the generated react frontend static files plus
compiled JavaScript libraries are. In this directory there also is a index.html file which does the actual
heavy lifting in terms of routing.&lt;/p&gt;
&lt;p&gt;The Go backend therefor must only route to index.html on certain endpoints.&lt;/p&gt;
&lt;p&gt;In Go to build and deploy a single binary containing the static assets here in, you can use something like
&lt;a href=&#34;https://github.com/GeertJohan/go.rice&#34;&gt;go.rice&lt;/a&gt; or &lt;a href=&#34;https://github.com/elazarl/go-bindata-assetfs&#34;&gt;assetfs&lt;/a&gt; which
generate a Go file for you which contains all the data in an easily accessible way.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll be using go.rice.&lt;/p&gt;
&lt;h1 id=&#34;the-solution&#34;&gt;The solution&lt;/h1&gt;
&lt;p&gt;To summarize, all you have to do is route every route in your router.js file to index.html in Go. But how? Well, like this&amp;hellip;&lt;/p&gt;
&lt;p&gt;Consider this appliction: &lt;a href=&#34;https://github.com/staple-org/staple&#34;&gt;Staple&lt;/a&gt;. This is a react frontend go backend application
which builds a frontend asset then packages it up with go.rice, builds a Docker container and deploys the whole thing to
a Kubernetes cluster. But this is the interesting part which handles the index routing:&lt;/p&gt;
&lt;p&gt;In routes.go (contains the mapped routes from under Router.js):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pkg&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// These routes must match the routes under frontend/Routes.js
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;routes&lt;/span&gt; = []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/archive&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/staples/new&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/reset&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/signup&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/settings&amp;#34;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we have a list of routes to map&amp;hellip;&lt;/p&gt;
&lt;p&gt;In server.go (which is starting up the server and generates the handlers&amp;hellip;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// ... code which sets up the api routes... after every handler has been estabilished...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// Setup front-end if not in production mode.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Opts&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;DevMode&lt;/span&gt; {
        &lt;span style=&#34;color:#75715e&#34;&gt;// This path needs to be relative from this files package&amp;#39;s location.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;staticAssets&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rice&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;FindBox&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../frontend/build&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot find assets in production&amp;#34;&lt;/span&gt;)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
		}

		&lt;span style=&#34;color:#75715e&#34;&gt;// Register handler for static assets
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;assetHandler&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;FileServer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;staticAssets&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HTTPBox&lt;/span&gt;())
        &lt;span style=&#34;color:#75715e&#34;&gt;// Open the index.html file as a *File for reading the content out of it.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// This is a virtual file handled by go.rice.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;staticAssets&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Open&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index.html&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Opts&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Err&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Msg&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed to find index.html content.&amp;#34;&lt;/span&gt;)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
		}

        &lt;span style=&#34;color:#75715e&#34;&gt;// Set up the main point as a static file server
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;echo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WrapHandler&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;assetHandler&lt;/span&gt;))
		&lt;span style=&#34;color:#75715e&#34;&gt;// Set up routes to index.html for all routes under Routes.js. Index.html will handle the routing any further.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;routes&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;indexServer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;))
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/favicon.ico&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;echo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WrapHandler&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;assetHandler&lt;/span&gt;))
		&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/site.webmanifest&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;echo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WrapHandler&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;assetHandler&lt;/span&gt;))
		&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/static/css/*&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;echo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WrapHandler&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StripPrefix&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;assetHandler&lt;/span&gt;)))
		&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/static/js/*&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;echo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WrapHandler&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StripPrefix&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;assetHandler&lt;/span&gt;)))
		&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/static/media/*&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;echo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WrapHandler&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StripPrefix&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;assetHandler&lt;/span&gt;)))
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What is &lt;code&gt;indexServer&lt;/code&gt; in this you might ask? Well, fret no longer, I shall show you:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// indexServer takes a name and the contents of the virtual file index.html gathered up by go.rice
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// and serves its content via http.ServeContent under the given name.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;indexServer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rice&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;File&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;echo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandlerFunc&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;echo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;stat&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Stat&lt;/span&gt;()
		&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ServeContent&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Writer&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;stat&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ModTime&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The key points are the name, which will be the route and the file which is the index.html content which contains
the logic to route based on the request. All that will be handled. And if a new route comes along,
simple add it to the list, recompile and you are done!&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In summary, you let your index.html file handle the routing as you would normally do. Just you need to make your
backend aware of that fact. Now refreshing the page will work as you&amp;rsquo;d expect.&lt;/p&gt;
&lt;p&gt;Thank you for reading,
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using a Kubernetes based Cluster for Various Services with auto HTTPS - Part 2</title>
      <link>https://skarlso.github.io/2019/10/15/kubernetes-cluster-part2/</link>
      <pubDate>Tue, 15 Oct 2019 21:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2019/10/15/kubernetes-cluster-part2/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;This is a continuation of the previous post about my Kubernetes infrastructure located &lt;a href=&#34;https://skarlso.github.io/2019/09/21/kubernetes-cluster/&#34;&gt;here&lt;/a&gt;. The two remaining points are to deploy Athens Go proxy and setting up monitoring.&lt;/p&gt;
&lt;h1 id=&#34;athens&#34;&gt;Athens&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/hosting/athens.png&#34; alt=&#34;Athens&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with &lt;a href=&#34;https://github.com/gomods/athens&#34;&gt;Athens&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First of all if you are a helm user, Athens has an awesome set of helm charts which you can use to deploy it in your cluster.
Located &lt;a href=&#34;https://github.com/gomods/athens/tree/master/charts/athens-proxy&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I prefer to deploy my own config files, but that&amp;rsquo;s me. So here is my preferred way of deploying Athens.&lt;/p&gt;
&lt;p&gt;Since this is also a subdomain of the previously created &lt;code&gt;powerhouse&lt;/code&gt; namespace we are going to use that.&lt;/p&gt;
&lt;h2 id=&#34;pvc&#34;&gt;PVC&lt;/h2&gt;
&lt;p&gt;We are going to need a PersistentVolumeClaim for Athens so it can store all the things forever.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;PersistentVolumeClaim&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;powerhouse&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-storage&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;accessModes&lt;/span&gt;:
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;ReadWriteOnce&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;requests&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;storage&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10Gi&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;storageClassName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;do-block-storage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Claim is very boring. Which means it just works.&lt;/p&gt;
&lt;h2 id=&#34;deployment&#34;&gt;Deployment&lt;/h2&gt;
&lt;p&gt;This is more interesting. Athens provides a lot of possibilities for the deployment. I&amp;rsquo;m just deploying the barest possible here. Which means, no user auth, no private repository support, ssh key configuration, etc&amp;hellip; It&amp;rsquo;s a plain proxy installation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;apps/v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deployment&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;powerhouse&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-app&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-proxy&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;replicas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;matchLabels&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-proxy&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-proxy&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-proxy&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/instance&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-proxy&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-proxy&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gomods/athens:v0.6.0&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;livenessProbe&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;httpGet&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/healthz&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;readinessProbe&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;httpGet&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/readyz&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ATHENS_GOGET_WORKERS&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ATHENS_STORAGE_TYPE&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;disk&amp;#34;&lt;/span&gt;
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ATHENS_DISK_STORAGE_ROOT&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/var/lib/athens&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
          - &lt;span style=&#34;color:#f92672&#34;&gt;containerPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-http&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-data&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/var/lib/athens&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;subPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-data&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;persistentVolumeClaim&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;claimName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-storage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fun fact. The name of the app must not be just plain &lt;code&gt;athens&lt;/code&gt; because that will result in an error: &lt;code&gt;too many colons in address&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The issue is here: &lt;a href=&#34;https://github.com/gomods/athens/issues/1038#issuecomment-457145658&#34;&gt;https://github.com/gomods/athens/issues/1038#issuecomment-457145658&lt;/a&gt; Basically it&amp;rsquo;s because of the name used for the environment properties inside the container.&lt;/p&gt;
&lt;h2 id=&#34;service&#34;&gt;Service&lt;/h2&gt;
&lt;p&gt;Now, let&amp;rsquo;s expose it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Service&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;powerhouse&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-service&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-proxy&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-proxy&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/instance&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-proxy&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-proxy&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-proxy&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/instance&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-proxy&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;targetPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ingress&#34;&gt;Ingress&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m using port 80 here because it&amp;rsquo;s convenient. But if you use any other port, don&amp;rsquo;t forget to alter your ingress to forward to that port and service.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;extensions/v1beta1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Ingress&lt;/span&gt;
...
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;tls&lt;/span&gt;:
...
  - &lt;span style=&#34;color:#f92672&#34;&gt;hosts&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;athens.powerhouse.com&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;secretName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-cronohub-tls&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;rules&lt;/span&gt;:
...
  - &lt;span style=&#34;color:#f92672&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens.powerhouse.com&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;http&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;paths&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;backend&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;serviceName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-service&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;servicePort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1234&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that&amp;rsquo;s it! If you now visit &lt;code&gt;https://athens.powerhouse.com&lt;/code&gt; it should say &lt;code&gt;&amp;quot;Welcome to The Athens Proxy&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, if you set this proxy with &lt;code&gt;export GOPROXY=https://athens.powerhouse.com&lt;/code&gt; it should start to cache modules. It&amp;rsquo;s a fantastic proxy with a lot of capabilities. I encourage you to check it out and drop by it&amp;rsquo;s slack channel on Gopher slack called Athens.&lt;/p&gt;
&lt;h1 id=&#34;monitoring&#34;&gt;Monitoring&lt;/h1&gt;
&lt;p&gt;Monitoring is a huge topic so I&amp;rsquo;m not going to talk about how to monitor or what. That is described in great many of posts. I especially recommend reading sysdig&amp;rsquo;s 6 part post on doing monitoring with Prometheus and Grafana and what to monitor and the four golden signals and whatnot. Starting &lt;a href=&#34;https://sysdig.com/blog/kubernetes-monitoring-prometheus/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://sysdig.com/blog/monitoring-kubernetes-with-sysdig-cloud/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;prometheus&#34;&gt;Prometheus&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m going to deploy &lt;a href=&#34;https://prometheus.io&#34;&gt;Prometheus&lt;/a&gt;. Prometheus is a monitoring tool which sits inside your cluster and gathers data about running pods, nodes, services, whatever you expose and wants to send data to it. It can also alert on things and can be integrated with tools like Graphana for nice front-end and metrics. Prometheus itself uses PromQL as its query language to gather data from different sources and do time series analytics and much much more.&lt;/p&gt;
&lt;p&gt;Please visit the website and documentation for more details. It&amp;rsquo;s the defacto monitoring tool for Kubernetes. Again, I&amp;rsquo;m going to do a very basic installation of Prometheus. So basic in fact, that I don&amp;rsquo;t even have a PVC for it, because I don&amp;rsquo;t care at this point about retaining data.&lt;/p&gt;
&lt;h3 id=&#34;namespace&#34;&gt;Namespace&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s create it&amp;rsquo;s own namespace.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Namespace&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;monitoring&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;monitoring&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;config&#34;&gt;Config&lt;/h3&gt;
&lt;p&gt;Prometheus Server config is massive. I don&amp;rsquo;t expect you to pick up on everything in this thing, but I would encourage you to at least try to find out what these setting do&amp;hellip; Our config yaml file contains the configuration file for Prometheus which we&amp;rsquo;ll later set up via a command line argument. It&amp;rsquo;s called &lt;code&gt;prometheus.yml&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ConfigMap&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prometheus-server-conf&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prometheus-server-conf&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;monitoring&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;data&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;prometheus.yml&lt;/span&gt;: |-&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    global:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      scrape_interval: 5s
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      evaluation_interval: 5s
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    scrape_configs:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - job_name: &amp;#39;kubernetes-apiservers&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        kubernetes_sd_configs:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - role: endpoints
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        scheme: https
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        tls_config:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        relabel_configs:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          action: keep
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          regex: default;kubernetes;https
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - job_name: &amp;#39;kubernetes-nodes&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        scheme: https
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        tls_config:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        kubernetes_sd_configs:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - role: node
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        relabel_configs:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - action: labelmap
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          regex: __meta_kubernetes_node_label_(.+)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - target_label: __address__
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          replacement: kubernetes.default.svc:443
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - source_labels: [__meta_kubernetes_node_name]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          regex: (.+)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          target_label: __metrics_path__
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          replacement: /api/v1/nodes/${1}/proxy/metrics
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - job_name: &amp;#39;kubernetes-pods&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        kubernetes_sd_configs:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - role: pod
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        relabel_configs:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          action: keep
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          regex: true
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          action: replace
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          target_label: __metrics_path__
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          regex: (.+)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          action: replace
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          regex: ([^:]+)(?::\d+)?;(\d+)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          replacement: $1:$2
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          target_label: __address__
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - action: labelmap
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          regex: __meta_kubernetes_pod_label_(.+)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - source_labels: [__meta_kubernetes_namespace]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          action: replace
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          target_label: kubernetes_namespace
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - source_labels: [__meta_kubernetes_pod_name]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          action: replace
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          target_label: kubernetes_pod_name
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - job_name: &amp;#39;kubernetes-cadvisor&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        scheme: https
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        tls_config:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        kubernetes_sd_configs:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - role: node
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        relabel_configs:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - action: labelmap
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          regex: __meta_kubernetes_node_label_(.+)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - target_label: __address__
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          replacement: kubernetes.default.svc:443
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - source_labels: [__meta_kubernetes_node_name]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          regex: (.+)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          target_label: __metrics_path__
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - job_name: &amp;#39;kubernetes-service-endpoints&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        kubernetes_sd_configs:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - role: endpoints
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        relabel_configs:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          action: keep
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          regex: true
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          action: replace
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          target_label: __scheme__
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          regex: (https?)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          action: replace
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          target_label: __metrics_path__
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          regex: (.+)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          action: replace
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          target_label: __address__
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          regex: ([^:]+)(?::\d+)?;(\d+)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          replacement: $1:$2
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - action: labelmap
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          regex: __meta_kubernetes_service_label_(.+)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - source_labels: [__meta_kubernetes_namespace]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          action: replace
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          target_label: kubernetes_namespace
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - source_labels: [__meta_kubernetes_service_name]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          action: replace
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          target_label: kubernetes_name&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Mostly it&amp;rsquo;s just setting up what Prometheus should monitor and how. The important bits are the &lt;code&gt;labels&lt;/code&gt;. How this is going to work is, that we will &lt;code&gt;annotate&lt;/code&gt; the resources we want Prometheus to see. Which is pretty cool. Basically we will just alter a pod to include an annotation and it will begin monitoring it. No need to install anything anywhere or restart anything. Just add an annotation and bamm, you&amp;rsquo;re done.&lt;/p&gt;
&lt;h2 id=&#34;rbac&#34;&gt;RBAC&lt;/h2&gt;
&lt;p&gt;Prometheus needs permissions to access resources in the cluster such as API end-points and gathering data about the cluster itself. We will provide it with this permission through &lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/rbac/&#34;&gt;Role Based Access Control&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll create a service account which Prometheus can use. We want it to access the whole cluster so we&amp;rsquo;ll use a &lt;code&gt;ClusterRole&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;rbac.authorization.k8s.io/v1beta1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ClusterRole&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prometheus&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;rules&lt;/span&gt;:
- &lt;span style=&#34;color:#f92672&#34;&gt;apiGroups&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;]
  &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;nodes&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;nodes/proxy&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;services&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;endpoints&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;pods&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;verbs&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;watch&amp;#34;&lt;/span&gt;]
- &lt;span style=&#34;color:#f92672&#34;&gt;apiGroups&lt;/span&gt;:
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;extensions&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;ingresses&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;verbs&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;watch&amp;#34;&lt;/span&gt;]
- &lt;span style=&#34;color:#f92672&#34;&gt;nonResourceURLs&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/metrics&amp;#34;&lt;/span&gt;]
  &lt;span style=&#34;color:#f92672&#34;&gt;verbs&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;]
---
&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;rbac.authorization.k8s.io/v1beta1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ClusterRoleBinding&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prometheus&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;roleRef&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;apiGroup&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ClusterRole&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prometheus&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;subjects&lt;/span&gt;:
- &lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ServiceAccount&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;default&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;monitoring&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will give access to monitor the following resources: nodes, nodes/proxy, services, endpoints and pods. The action are get, list, watch. No modifications.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll also allow Prometheus to watch ingresses for data traffic and allow it to do get requests to non-resource endpoint &lt;code&gt;/metrics&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;deployment-1&#34;&gt;Deployment&lt;/h2&gt;
&lt;p&gt;Now, the deployment is actually pretty easy.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;extensions/v1beta1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deployment&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prometheus-deployment&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;monitoring&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;replicas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prometheus-server&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prometheus&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prom/prometheus:v2.2.1&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;args&lt;/span&gt;:
            - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--config.file=/etc/prometheus/prometheus.yml&amp;#34;&lt;/span&gt;
            - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--storage.tsdb.path=/prometheus/&amp;#34;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
            - &lt;span style=&#34;color:#f92672&#34;&gt;containerPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;9090&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
            - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prometheus-config-volume&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/etc/prometheus/&lt;/span&gt;
            - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prometheus-storage-volume&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/prometheus/&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prometheus-config-volume&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;configMap&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;defaultMode&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;420&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prometheus-server-conf&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prometheus-storage-volume&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;emptyDir&lt;/span&gt;: {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The two interesting things here are the two arguments. The config file, which we include through the &lt;code&gt;configMap&lt;/code&gt; and the storage. Which I&amp;rsquo;m not bind mounting.&lt;/p&gt;
&lt;h2 id=&#34;service-1&#34;&gt;Service&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s expose Prometheus. Now, this may come as a surprise if you don&amp;rsquo;t know anything about Prometheus, but this is an in cluster monitoring tool. It&amp;rsquo;s usually not supposed to be accessed directly, but through tools like Graphana or used by tools like Alerting or traefik as a reverse proxy. As such, Prometheus does not support authentication or authorization or user management of any kind. That is usually taken care of by a reverse proxy or other means written about &lt;a href=&#34;https://prometheus.io/docs/operating/security/#authentication-authorization-and-encryption&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://prometheus.io/docs/guides/basic-auth/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As such, we can do a number of things. We can expose it as a NodePort service for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Service&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prometheus-service&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;monitoring&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;annotations&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;prometheus.io/scrape&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;true&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;prometheus.io/port&lt;/span&gt;:   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;9090&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prometheus-server&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;NodePort&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;targetPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;9090&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;nodePort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;30000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or we just port forward the pod like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;k port-forward pods/prometheus-deployment-6bf45557bd-qc6t6 9090:9090 -n monitoring
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And access it by simply opening the url: http://127.0.0.1:9090.&lt;/p&gt;
&lt;h2 id=&#34;prometheus-1&#34;&gt;Prometheus&lt;/h2&gt;
&lt;p&gt;Once you open it, you should see something like this, after running a small query:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/hosting/prometheus.png&#34; alt=&#34;prometheus.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;adding-in-resources-to-monitor&#34;&gt;Adding in Resources to monitor&lt;/h2&gt;
&lt;p&gt;In order to add a resource to monitor simply insert these annotations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;annotations&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;prometheus.io/scrape&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;true&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;prometheus.io/port&lt;/span&gt;:   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;9090&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Done.&lt;/p&gt;
&lt;h1 id=&#34;bonus-round----graphana&#34;&gt;Bonus Round &amp;ndash; Graphana&lt;/h1&gt;
&lt;p&gt;We deployed Athens and Prometheus to monitor our cluster. We don&amp;rsquo;t have anything before Prometheus that would be fancy, but installing Graphana is actually pretty easy. You can follow the instructions &lt;a href=&#34;https://prometheus.io/docs/visualization/grafana/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A very easy way of looking at some nice metrics without worrying about anything like users and such, is running a Graphana instance in docker on your local machine with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -d -p 3000:3000 grafana/grafana
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip; and while you are forwarding the Prometheus end-point you navigate to your Graphana instance by opening &lt;code&gt;127.0.0.1:3000&lt;/code&gt; and install a Prometheus data-point like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/hosting/graphana_config.png&#34; alt=&#34;graphana config&#34;&gt;&lt;/p&gt;
&lt;p&gt;After that navigate to a new dashboard and select a simple PromQL metric to see if it&amp;rsquo;s working. You should see something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/hosting/graphana.png&#34; alt=&#34;graphana&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now you can create a new dashboard add a PVC to our Prometheus instance and enjoy all the metrics you can store!&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;And this is it folks. Everything is installed and we can monitor things now. If you give Prometheus a PVC you can build some pretty awesome time series graphs too and see how your cluster behaves over time.&lt;/p&gt;
&lt;p&gt;Thank you for reading!
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Summary of Practical Go workshop from Dave Cheney</title>
      <link>https://skarlso.github.io/2019/10/10/practical-go-summary/</link>
      <pubDate>Thu, 10 Oct 2019 21:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2019/10/10/practical-go-summary/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;So there is &lt;a href=&#34;https://dave.cheney.net/practical-go/presentations/qcon-china.html&#34;&gt;this&lt;/a&gt; workshop from &lt;a href=&#34;https://twitter.com/davecheney&#34;&gt;Dave Cheney&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And I thought I&amp;rsquo;d draw a sort of summary of that workshop.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/practical_go.png&#34; alt=&#34;enjoy&#34;&gt;&lt;/p&gt;
&lt;p&gt;Right-click-&amp;gt;Open Image for higher resolution.&lt;/p&gt;
&lt;p&gt;Cheers,
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I killed my entire Kubernetes cluster</title>
      <link>https://skarlso.github.io/2019/10/01/killing-kubernetes-cluster/</link>
      <pubDate>Tue, 01 Oct 2019 21:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2019/10/01/killing-kubernetes-cluster/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;One morning I woke up and tried to access my gitea just to find that it wasn&amp;rsquo;t running.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/kube_dead.png&#34; alt=&#34;dead kube&#34;&gt;&lt;/p&gt;
&lt;p&gt;I checked my cluster and found that the whole thing was dead as meat. I quickly jumped in and ran &lt;code&gt;k get pods -A&lt;/code&gt; to see what&amp;rsquo;s
going on. None of my services worked.&lt;/p&gt;
&lt;p&gt;What immediately struck my eye was a 100+ pods of my fork_updater cronjob. The fork_updater cronjob which runs once a month, looks
like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;batch/v1beta1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;CronJob&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fork-updater&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fork-updater&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;schedule&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* * 1 * *&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;jobTemplate&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fork-updater-ssh-key&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;secret&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;secretName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fork-updater-ssh-key&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;defaultMode&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# yaml spec does not support octal mode&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fork-updater&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;imagePullPolicy&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;IfNotPresent&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;skarlso/repo-updater:1.0.4&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
              - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;:  &lt;span style=&#34;color:#ae81ff&#34;&gt;GIT_TOKEN&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;valueFrom&lt;/span&gt;:
                  &lt;span style=&#34;color:#f92672&#34;&gt;secretKeyRef&lt;/span&gt;:
                    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;:  &lt;span style=&#34;color:#ae81ff&#34;&gt;fork-updater-secret&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;:  &lt;span style=&#34;color:#ae81ff&#34;&gt;GIT_TOKEN&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
            - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fork-updater-ssh-key&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/secret&amp;#34;&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;readOnly&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;restartPolicy&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;OnFailure&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Inherently there is nothing wrong with this at first glance. But on a second glance, the problem is &lt;code&gt;restartPolicy: Always&lt;/code&gt;.
For whatever the reason, the cronjob died when it started up. The restart policy then&amp;hellip; restarted the cronjob, which failed again
really fast. Then it scheduled a new one and a new one and a new one&amp;hellip; and I had 100+ containers pending and running and
creating.&lt;/p&gt;
&lt;p&gt;At that point the cluster was basically DDOSd into oblivion. Once the other resources started to die ( since this was a private
cluster and I didn&amp;rsquo;t bother to set up restrictions on resources ) the cronjob hogged even more and it basically blocked everything
else from being able to run. It overwhelmed the scheduler.&lt;/p&gt;
&lt;p&gt;Lovevly that.&lt;/p&gt;
&lt;p&gt;This is how you could potentionally kill a cluster which doesn&amp;rsquo;t have any resource limits and restrictions set up.&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using a Kubernetes based Cluster for Various Services with auto HTTPS</title>
      <link>https://skarlso.github.io/2019/09/21/kubernetes-cluster/</link>
      <pubDate>Sat, 21 Sep 2019 21:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2019/09/21/kubernetes-cluster/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Today, I would like to show you how my infrastructure is deployed and managed. Spoiler alert, I&amp;rsquo;m using Kubernetes to do that.&lt;/p&gt;
&lt;p&gt;I know&amp;hellip; What a twist!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get to it.&lt;/p&gt;
&lt;h1 id=&#34;what&#34;&gt;What&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/hosting/kube-architecture.png&#34; alt=&#34;kube-architecture&#34;&gt;&lt;/p&gt;
&lt;p&gt;What services am I running exactly? Here is a list I&amp;rsquo;m running at the time of this writing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Athens Go Proxy&lt;/li&gt;
&lt;li&gt;Gitea&lt;/li&gt;
&lt;li&gt;The Lounge (IRC bouncer)&lt;/li&gt;
&lt;li&gt;Two CronJobs
&lt;ul&gt;
&lt;li&gt;Fork Updater&lt;/li&gt;
&lt;li&gt;IDLE RPG online checker&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;My WebSite (gergelybrautigam.com)&lt;/li&gt;
&lt;li&gt;Monitoring&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And it&amp;rsquo;s really simple to add more.&lt;/p&gt;
&lt;h1 id=&#34;where&#34;&gt;Where&lt;/h1&gt;
&lt;p&gt;My cluster is deployed at DigitalOcean using two droplets each 1vCPU and 2GB RAM.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/hosting/kube-on-digitalocean.png&#34; alt=&#34;kube-on-digitalocean&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;what-not&#34;&gt;What Not&lt;/h1&gt;
&lt;p&gt;This isn&amp;rsquo;t going to be a production grade cluster. What I don&amp;rsquo;t include in here:&lt;/p&gt;
&lt;h2 id=&#34;rbac-for-various-services-and-users&#34;&gt;RBAC for various services and users&lt;/h2&gt;
&lt;p&gt;Since I&amp;rsquo;m the only user of my cluster I didn&amp;rsquo;t create any kind of access limits / users or such. You are free to create them though. The only role based auth that&amp;rsquo;s going on is for Prometheus.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not using any third party things which require access to the API.&lt;/p&gt;
&lt;h2 id=&#34;resource-limitation&#34;&gt;Resource limitation&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m the sole user of my things. I&amp;rsquo;m not really scaling my gitea up or down based on usage and as such, I did not define things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Resource limits&lt;/li&gt;
&lt;li&gt;Nodes with certain capabilities&lt;/li&gt;
&lt;li&gt;Affinities and Taints &amp;ndash; which means, everything can run anywhere&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;readiness-liveliness&#34;&gt;Readiness Liveliness&lt;/h2&gt;
&lt;p&gt;Most of by deploys and services don&amp;rsquo;t have these except for Athens.&lt;/p&gt;
&lt;h1 id=&#34;how&#34;&gt;How&lt;/h1&gt;
&lt;p&gt;Okay, with that out of the way, let&amp;rsquo;s get into the hows of things&amp;hellip;&lt;/p&gt;
&lt;h1 id=&#34;beginning&#34;&gt;Beginning&lt;/h1&gt;
&lt;p&gt;The most important thing that you need to do in order to use Kubernetes is Containerizing all the things.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/hosting/containers.png&#34; alt=&#34;containers&#34;&gt;&lt;/p&gt;
&lt;p&gt;Since Kubernetes is a container orchestration tool, without containers it&amp;rsquo;s pretty useless.&lt;/p&gt;
&lt;p&gt;As a driver, I&amp;rsquo;m going to use Docker. Kubernetes can use anything that&amp;rsquo;s OCI compatible, which means if you would like to use runc as a container engine, you can do that. I&amp;rsquo;d like to keep my sanity though.&lt;/p&gt;
&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/hosting/fork-updater.png&#34; alt=&#34;fork-updater&#34;&gt;&lt;/p&gt;
&lt;p&gt;To show you what I mean&amp;hellip; I have a cronjob which is running every month. It gathers all my forks on github and updates them with the latest from their parents. This a small ruby script located here: &lt;a href=&#34;https://gist.github.com/Skarlso/fd5bd5971a78a5fa9760b31683de690e&#34;&gt;Fork Updater&lt;/a&gt;. How do we run this? It requires two things. First, a token. We pass that currently as an environment property. It could be in a file in a vault or a secret mounted in as a file it doesn&amp;rsquo;t matter. Currently, it&amp;rsquo;s an environment property. The second thing is more subtle.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m pushing the changes back into my remote forks. I&amp;rsquo;m doing this via SSH. So, we need a key in there too. How we&amp;rsquo;ll get that in there, I&amp;rsquo;ll talk about later when we are talking about how to set this cron job up. For now though, the container needs to look for a key in a specific location because we don&amp;rsquo;t want to over-mount &lt;code&gt;/root/.ssh/&lt;/code&gt; and we also don&amp;rsquo;t want to use an initContainer to copy over an SSH key (because it&amp;rsquo;s mounted in as a symlink (but that&amp;rsquo;s a different issue all together)). Also, we certianly do NOT want to have a key in the container.&lt;/p&gt;
&lt;p&gt;To achieve this, we simply set up a &lt;code&gt;config&lt;/code&gt; file for SSH like this one:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host github.com
    IdentityFile /etc/secret/id_rsa
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;/etc/secret&lt;/code&gt; will be the destination of the ssh key we create.&lt;/p&gt;
&lt;p&gt;And we also need to have a known_hosts file, otherwise git clone will complain. We also bake this into the container. Why? Why not generate that on the fly? Because I want it to fail in case there is something wrong or there is a MIMA going on etc.&lt;/p&gt;
&lt;p&gt;All this translated into a Dockerfile looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# We are using alpine for a minimalistic image&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; alpine:latest&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apk --no-cache add ca-certificates&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apk update&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Openssh is needed for the SSH command&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apk --no-cache add ruby vim curl git build-base ruby-dev openssh openssh-client&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Setup dependencies for the fork ruby file&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; gem install octokit logger multi_json json --no-ri --no-rdoc&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; mkdir /data&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /data&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Setup some data about the committer&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; git config --global user.name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fork Updater&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; git config --global user.email &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email@email.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; mkdir -p /root/.ssh&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Get the host config for github.com&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; ssh-keyscan github.com &amp;gt;&amp;gt; /root/.ssh/known_hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Setup the SSH config&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt; ./config /root/.ssh&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt; ./fork_updater.rb .&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CMD&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ruby&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/data/fork_updater.rb&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s it. Now our updater is containerized and ready to be deployed as a cronjob on a kube cluster. Oh, and we also need to create the SSH key like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl create secret generic ssh-key-secret --from-file=ssh-privatekey=/path/to/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;before-we-begin&#34;&gt;Before we Begin&lt;/h1&gt;
&lt;p&gt;There are two things we will need though to set up for our cluster before we even begin adding the first service. And that&amp;rsquo;s an ingress with a load-balancer and cert-manager.&lt;/p&gt;
&lt;h1 id=&#34;cert-manager&#34;&gt;Cert-Manager&lt;/h1&gt;
&lt;p&gt;Now, you have the option of installing cert-manager via helm, or via the provided kube config yaml file. I &lt;strong&gt;STRONGLY&lt;/strong&gt; recommend using the config yaml file because the upgrading process with helm is a hell of a lot dirtier / failure prone than simply applying a new yaml file with a different version in it.&lt;/p&gt;
&lt;p&gt;Either way, to install cert-manager follow this simple guide: &lt;a href=&#34;https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html#installing-with-regular-manifests&#34;&gt;Cert-manager Install Manual&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;ingress&#34;&gt;Ingress&lt;/h1&gt;
&lt;p&gt;An Ingress is a must. This is the component which manages external access to the services which we will define. Like a proxy before your http server. This component will handle the hostname based routing between our services.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m using nginx ingress, although there are a couple of implementations out there.&lt;/p&gt;
&lt;p&gt;To install nginx ingress, follow their guide here: &lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/deploy/&#34;&gt;Installing Nginx-Ingress&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;from-easy-to-complicated&#34;&gt;From Easy to Complicated&lt;/h1&gt;
&lt;p&gt;Alright. Now that we have the prereqs out of the way, let&amp;rsquo;s get our hands dirty. I&amp;rsquo;ll start with the easiest of them all, my web site, and then will progress towards the more complicated ones, like Gitea and Athens, which require a lot more fiddling and have more moving parts.&lt;/p&gt;
&lt;h2 id=&#34;my-website&#34;&gt;My Website&lt;/h2&gt;
&lt;p&gt;The site, located here: &lt;a href=&#34;https://gergelybrautigam.com&#34;&gt;Gergely&amp;rsquo;s Domain&lt;/a&gt;; is a really simple, static, &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; based website. It contains nothing fancy, no real Javascript magic, has a simple list of things I&amp;rsquo;ve done and who I am.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s powered / served by an nginx instance running on port 9090 define by a very simple Dockerfile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; golang:latest as builder&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apt-get update &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt install -y git make vim hugo&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; mkdir -p /opt/website&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; git clone https://github.com/Skarlso/gergelybrautigam /opt/website&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /opt/website&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; make&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; nginx:latest&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; mkdir -p /var/www/html/gergelybrautigam&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /var/www/html/gergelybrautigam&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt; --from&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;builder /opt/website/public .&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt; 01_gergelybrautigam /etc/nginx/sites-available/&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; mkdir -p /etc/nginx/sites-enabled/&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; ln -s /etc/nginx/sites-available/01_gergelybrautigam /etc/nginx/sites-enabled/01_gergelybrautigam&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Easy as goblin pie. Nginx has a command set like this &lt;code&gt;CMD [&amp;quot;nginx&amp;quot;, &amp;quot;-g&amp;quot;, &amp;quot;daemon off;&amp;quot;]&lt;/code&gt; and exposes port 80.&lt;/p&gt;
&lt;h3 id=&#34;the-deployment&#34;&gt;The deployment&lt;/h3&gt;
&lt;p&gt;In order to deploy this in the cluster, I created a deployment as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;apps/v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deployment&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gb-deployment&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gergely-brautigam&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gergelybrautigam&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;annotations&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;prometheus.io/scrape&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;true&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;prometheus.io/port&lt;/span&gt;:   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;9090&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;replicas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;matchLabels&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gergelybrautigam&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gergelybrautigam&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;annotations&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;prometheus.io/scrape&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;true&amp;#39;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;prometheus.io/port&lt;/span&gt;:   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;9090&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gergelybrautigam&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;skarlso/gergelybrautigam:v0.0.26&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;containerPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;9090&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The metadata section defines information about the deployment. It&amp;rsquo;s name is gb-deployment. The namespace in which this sits is called gergely-brautigam and it has some labels to it so Prometheus monitoring tool can discover the pod.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s running a single replica, has a bunch of more metadata and template settings, and finally the container spec which defines the image, and the exposed container port on which the application is running.&lt;/p&gt;
&lt;p&gt;Now we need a service to expose this deployment.&lt;/p&gt;
&lt;h3 id=&#34;the-service&#34;&gt;The service&lt;/h3&gt;
&lt;p&gt;The service is also simple. It looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Service&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gergely-brautigam&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gb-service&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gergelybrautigam&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;targetPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;9090&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, nothing fancy here, just a simple service exposing a port to a different port on the front-end side. This service will be picked up by our previously created routing facility.&lt;/p&gt;
&lt;h3 id=&#34;ingress-1&#34;&gt;Ingress&lt;/h3&gt;
&lt;p&gt;Now that we have the service we need to expose it to the domain. I have the domain gergelybrautigam.com and I already pointed it at the LoadBalancer&amp;rsquo;s IP which was created by the nginx ingress controller.&lt;/p&gt;
&lt;p&gt;We only want one LoadBalancer, but we have multiple hostnames. We can achieve that by creating an Ingress resource in the namespace our service is in like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;extensions/v1beta1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Ingress&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gergely-brautigam&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gergely-brautigam-ingress&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;annotations&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;kubernetes.io/ingress.class&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;certmanager.k8s.io/cluster-issuer&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;letsencrypt-prod&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;certmanager.k8s.io/acme-challenge-type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;http01&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;nginx.ingress.kubernetes.io/rewrite-target&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;tls&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;hosts&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;gergelybrautigam.com&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;secretName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gergelybrautigam-tls&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;rules&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gergelybrautigam.com&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;http&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;paths&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;backend&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;serviceName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gb-service&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;servicePort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Remember, we already have the nginx ingress resource in the default namespace when we installed the controller previously. That is the main entrypoint. We are taking advantage of the rewrite-target annotation. That is our key to success &lt;code&gt;nginx.ingress.kubernetes.io/rewrite-target: /&lt;/code&gt;. The rest is basic routing. We&amp;rsquo;ll have something like this in the other namespace to.&lt;/p&gt;
&lt;p&gt;And with that, our website is done and it should be working under HTTPS. Cert-manager should have picked it up and generated a certificate for it. Let&amp;rsquo;s check.&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;k get certs -n gergely-brautigam&lt;/code&gt; you should see something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; $ k get certs -n gergely-brautigam
NAME                   READY   SECRET                 AGE
gergelybrautigam-tls   True    gergelybrautigam-tls   86d
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If there is a problem, just describe the cert resource and look for the generated challenge and if it was successful or not. The challenge contains mostly good error messages.&lt;/p&gt;
&lt;h2 id=&#34;irc-bouncer&#34;&gt;IRC bouncer&lt;/h2&gt;
&lt;p&gt;That wasn&amp;rsquo;t too bad, right? Let&amp;rsquo;s do something a bit more complex this time. We are going to deploy &lt;a href=&#34;https://github.com/thelounge/thelounge&#34;&gt;The lounge&lt;/a&gt; irc bouncer.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s actually quite easy to do but can be daunting to look at at first.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/hosting/the-climb.png&#34; alt=&#34;easy&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;the-container&#34;&gt;The container&lt;/h3&gt;
&lt;p&gt;Lucky for us, the bouncer already provides a container located here: &lt;a href=&#34;https://hub.docker.com/r/thelounge/thelounge/&#34;&gt;The Lounge Docker Hub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We just need two things. To expose the port 9000 and to give it something called a PersistentVolume. What&amp;rsquo;s a persistent volume? Well, look it up here: &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/persistent-volumes/&#34;&gt;Kubernetes Persistent Volumes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;TL;DR: We need to preserve data. Containers are ephemeral in nature. Meaning if there is a problem we usually just delete the pod. Which means that all data will be lost. But we need persistence in this case because we&amp;rsquo;ll have user data and user information which we would like to persist between pods. That&amp;rsquo;s what a volume is for.&lt;/p&gt;
&lt;p&gt;It will be mounted into the pod so we can point the bouncer to use that location for data management.&lt;/p&gt;
&lt;h3 id=&#34;pvc&#34;&gt;PVC&lt;/h3&gt;
&lt;p&gt;With that, this is how our PersistentVolumeClaim will look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;PersistentVolumeClaim&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;powerhouse&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;do-storage-irc&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;accessModes&lt;/span&gt;:
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;ReadWriteOnce&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;requests&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;storage&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5Gi&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;storageClassName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;do-block-storage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;DigitalOcean provides a block storage implementation for this claim so we use that storage class &lt;code&gt;do-block-storage&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;deployment&#34;&gt;Deployment&lt;/h3&gt;
&lt;p&gt;With that, this is how the deployment will look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;apps/v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deployment&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;powerhouse&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;irc-app&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;irc&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;replicas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;matchLabels&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;irc&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;irc&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;irc&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/instance&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;irc&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;irc&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;thelounge/thelounge:3.1.1&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;containerPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;9000&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;irc-http&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/var/opt/thelounge&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;subPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;thelounge&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;irc-data&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;readOnly&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;irc-data&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;persistentVolumeClaim&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;claimName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;do-storage-irc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Short and sweet. The important bits are the labels, those are used by cert-manager and ingress to find the right deployment, and the &lt;code&gt;volumeMounts&lt;/code&gt;. We mount into the /var/opt/thelounge folder because that&amp;rsquo;s the main configuration location. The subPath is important for a correct mounting.&lt;/p&gt;
&lt;h3 id=&#34;the-service-1&#34;&gt;The service&lt;/h3&gt;
&lt;p&gt;Alright, with the deployment in place, let&amp;rsquo;s take a look at the service.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Service&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;powerhouse&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;irc&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;irc&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;irc&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/instance&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;irc&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;irc&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;irc&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/instance&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;irc&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;http&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;9000&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;targetPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;irc-http&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, very boring stuff. Boring is good. Boring is predictable. We expose port 9000 to the named targetPort called irc-http which we defined in the above deployment.&lt;/p&gt;
&lt;p&gt;Now, I have a domain in which these things are running, let&amp;rsquo;s call it &lt;code&gt;powerhouse.com&lt;/code&gt; (because I&amp;rsquo;m tired of example.com). And I have multiple services in this namespace too, so I&amp;rsquo;ll call the namespace here, powerhouse and put this irc service in there. This also means that the ingress resource for this namespace will contain a couple more routings, because my powerhouse namespace will also contain my gitea and Athens proxy installation.&lt;/p&gt;
&lt;p&gt;We can, however, take a peak at the ingress resource here and now&amp;hellip; because I hate suspense.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;extensions/v1beta1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Ingress&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;powerhouse&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;powerhouse-ingress&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;annotations&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;kubernetes.io/ingress.class&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;certmanager.k8s.io/cluster-issuer&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;letsencrypt-prod&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;certmanager.k8s.io/acme-challenge-type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;http01&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;nginx.ingress.kubernetes.io/rewrite-target&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;tls&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;hosts&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;irc.powerhouse.com&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;secretName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;irc-powerhouse-tls&lt;/span&gt;
  - &lt;span style=&#34;color:#f92672&#34;&gt;hosts&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea.powerhouse.com&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;secretName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-powerhouse-tls&lt;/span&gt;
  - &lt;span style=&#34;color:#f92672&#34;&gt;hosts&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;athens.powerhouse.com&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;secretName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-powerhouse-tls&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;rules&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;irc.powerhouse.com&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;http&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;paths&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;backend&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;serviceName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;irc&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;servicePort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;9000&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/&lt;/span&gt;
  - &lt;span style=&#34;color:#f92672&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea.powerhouse.com&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;http&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;paths&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;backend&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;serviceName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;servicePort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/&lt;/span&gt;
  - &lt;span style=&#34;color:#f92672&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens.powerhouse.com&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;http&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;paths&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;backend&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;serviceName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;athens-service&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;servicePort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see that I have multiple paths pointing to three different subdomains with different ports. These ports will be routed to by nginx ingress. Meaning you &lt;strong&gt;DO NOT OPEN THESE ON YOUR LOADBALANCER&lt;/strong&gt;. These will all be accessible from 443/HTTPS. Expect for gitea&amp;rsquo;s SSH port later on.&lt;/p&gt;
&lt;p&gt;With these in place, cert-manager should pick it up and provide a certificate for it.&lt;/p&gt;
&lt;h3 id=&#34;side-track----debugging&#34;&gt;Side track &amp;ndash; debugging&lt;/h3&gt;
&lt;p&gt;If there is a problem and we can&amp;rsquo;t reach TheLounge we need to debug. I use the following tool to access Kubernetes resources: &lt;a href=&#34;https://github.com/derailed/k9s&#34;&gt;K9S&lt;/a&gt;. It&amp;rsquo;s a neat CLI tool to look at kube resources in an interactive way and not having to type in a bunch of commands. Never the less, I will also paste those in here.&lt;/p&gt;
&lt;p&gt;To look at the pods that should have been created, type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;k get pods -n powerhouse
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Should see something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NAME                          READY   STATUS    RESTARTS   AGE
athens-app-857749c59c-lmjnb   1/1     Running   0          6d3h
gitea-app-6974fb995b-pn2vv    1/1     Running   0          9d
gitea-db-59758fbcd9-4562c     1/1     Running   0          9d
irc-app-5f87688f98-dqsvb      1/1     Running   0          9d
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can see that my other services are running fine. And there is IRC as well. Now if there would be any kind of problem we could access the Pods information be describing the pod with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;k describe pod/irc-app-5f87688f98-dqsvb -n powerhouse
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Which will provide a bunch of information about the pod. But the pod could be absolutely fine, yet our service could be down. (We didn&amp;rsquo;t define any liveliness or readiness probs after all).&lt;/p&gt;
&lt;p&gt;We can verify that by taking a peak in the container (also, check if our mounting was successful). Since this is just a container, exec works similar to docker exec.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; $ k exec -it irc-app-5f87688f98-dqsvb -n powerhouse /bin/bash
root@irc-app-5f87688f98-dqsvb:/#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Should give us a prompt. We can now look at logs, check out the configuration folder etc.&lt;/p&gt;
&lt;p&gt;In k9s you would simply select the right namespace, select the pod, hit &lt;code&gt;d&lt;/code&gt; for describe or &lt;code&gt;s&lt;/code&gt; for shell. Done.&lt;/p&gt;
&lt;h2 id=&#34;gitea&#34;&gt;Gitea&lt;/h2&gt;
&lt;p&gt;Now, we have IRC running. Let&amp;rsquo;s try deploying &lt;a href=&#34;https://gitea.io/en-us/&#34;&gt;Gitea&lt;/a&gt;. This takes a tiny bit more fiddling though.&lt;/p&gt;
&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;
&lt;p&gt;Gitea requires the following things to be present:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The gitea app configuration file (this can be done via environment properties though)&lt;/li&gt;
&lt;li&gt;A DB&lt;/li&gt;
&lt;li&gt;A PersistentVolume&lt;/li&gt;
&lt;li&gt;SSH Port for SSH based git clones instead of simple https&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;db&#34;&gt;DB&lt;/h4&gt;
&lt;p&gt;We shall begin with the simplest of them, the DB. At this point we could go with the DigitalOcean managed Postgres installation, but I didn&amp;rsquo;t want to put that on the bill as well. So I choose to simply put my DB into a container and deploy it within the cluster.&lt;/p&gt;
&lt;p&gt;This is actually quite simple. The DB will be a separate deployment / application in the same namespace as the Gitea app. It will also contain a network policy, since the DB doesn&amp;rsquo;t need internet access and the internet shouldn&amp;rsquo;t be able to access it.&lt;/p&gt;
&lt;p&gt;In fact the only thing that should be able to access the DB is the Gitea application itself which we will be able to restrict via the usage of&amp;hellip; Labels!&lt;/p&gt;
&lt;h5 id=&#34;deployment-1&#34;&gt;Deployment&lt;/h5&gt;
&lt;p&gt;But first, take a look at the deployment of a Postgres 11 pod:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;apps/v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deployment&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;powerhouse&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-db&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;replicas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;matchLabels&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-db&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-db&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-db&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;postgres&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;postgres:11&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;POSTGRES_USER&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea&lt;/span&gt;
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;POSTGRES_PASSWORD&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;valueFrom&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;secretKeyRef&lt;/span&gt;:
                &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-db-password&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;password&lt;/span&gt;
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;POSTGRES_DB&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/var/lib/postgresql/data&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;subPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# important so it gets mounted properly&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;git-db-data&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;git-db-data&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;persistentVolumeClaim&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;claimName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;do-storage-gitea-db&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Okay, there are a lot of things going on here, but the three things we need to note are the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-db&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our network policy will look for this label to identify the pods which fell under its rule.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;POSTGRES_PASSWORD&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;valueFrom&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;secretKeyRef&lt;/span&gt;:
                &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-db-password&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;password&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The database password will come from a secret.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/var/lib/postgresql/data&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;subPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# important so it gets mounted properly&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;git-db-data&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;git-db-data&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;persistentVolumeClaim&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;claimName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;do-storage-gitea-db&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We also need a persistent volume otherwise the data will be lost on each pod restart.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---
&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;PersistentVolumeClaim&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;powerhouse&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;do-storage-gitea-db&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;accessModes&lt;/span&gt;:
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;ReadWriteOnce&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;requests&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;storage&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10Gi&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;storageClassName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;do-block-storage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;service&#34;&gt;Service&lt;/h5&gt;
&lt;p&gt;We also need a Service so Gitea will be able to reach it. This isn&amp;rsquo;t public though so a NodePort is enough with no clusterIP.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Service&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;powerhouse&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-db-service&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5432&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-db&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;clusterIP&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to reach this DB we can use a URL like this now from the Gitea app: &lt;code&gt;gitea-db-service.powerhouse.svc.cluster.local:5432&lt;/code&gt;.&lt;/p&gt;
&lt;h5 id=&#34;networkpolicy&#34;&gt;NetworkPolicy&lt;/h5&gt;
&lt;p&gt;We want the Gitea app to be able to reach it. Which means in-out to the Gitea app and nothing else.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;NetworkPolicy&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-db-network-policy&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;powehouse&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;podSelector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;matchLabels&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-db&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;policyTypes&lt;/span&gt;:
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;Ingress&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;Egress&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;ingress&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;podSelector&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;matchLabels&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;protocol&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;TCP&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5432&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;egress&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;to&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;podSelector&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;matchLabels&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;protocol&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;TCP&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5432&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can test this now by exec-ing into the Pod of the DB deployment and trying to ping google.com for example. It should be denied. Yet later, when we deploy our Gitea app, that should be able to talk to the DB instance.&lt;/p&gt;
&lt;h5 id=&#34;secret&#34;&gt;Secret&lt;/h5&gt;
&lt;p&gt;Finally, we have a Secret which contains our db password base64 encoded.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Secret&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;cronohub&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-db-password&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Opaque&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;data&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;password&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Z2l0ZWE=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That says password123. To get it, you can run something like &lt;code&gt;echo -n &amp;quot;password123&amp;quot; | base64&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;gitea-app-ini&#34;&gt;Gitea App ini&lt;/h4&gt;
&lt;p&gt;Huh, with that done, we can go on with the application ini file. This can be configured via environment properties but once you get over a dozen configuration entries, it&amp;rsquo;s just easier to use an app.ini. My app ini is large, so I won&amp;rsquo;t post it here. I could mount it in as a file, but that proved to be difficult or not work at all properly because Gitea is running under a different user than root. Also, once the mount happened the fact the gitea was trying to write into it caused problems. Mounting as a different user didn&amp;rsquo;t work out either, so I&amp;rsquo;m using an &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/init-containers/&#34;&gt;InitContainer&lt;/a&gt; to do the job. They are there for that reason. And it was actually a hell of a lot simpler than doing file mounting.&lt;/p&gt;
&lt;p&gt;The app.ini is defined as a ConfigMap like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl create configmap gitea-app-ini --from-file=app.ini --namespace powerhouse
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This was done from the folder where my app.ini was residing.&lt;/p&gt;
&lt;h4 id=&#34;deployment-2&#34;&gt;Deployment&lt;/h4&gt;
&lt;p&gt;Now comes the big gun. The Gitea deployment file. This is how it looks like in all its glory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;apps/v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deployment&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;cronohub&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-app&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;replicas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;matchLabels&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/instance&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;initContainers&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;init-disk&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;busybox:latest&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;command&lt;/span&gt;:
        - &lt;span style=&#34;color:#ae81ff&#34;&gt;/bin/chown&lt;/span&gt;
        - &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# we set the gid and uid of the user for gitea.&lt;/span&gt;
        - &lt;span style=&#34;color:#ae81ff&#34;&gt;/data&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;git-data&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/data&amp;#34;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;readOnly&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;init-app-ini&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;busybox:latest&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;command&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sh&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mkdir -p /data/gitea/conf/; cp /data/app.ini /data/gitea/conf&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;git-data&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/data&amp;#34;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;readOnly&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-app-ini-conf&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/data/app.ini&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;subPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;app.ini&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;readOnly&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea/gitea:1.9.2&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;DB_PASSWD&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;valueFrom&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;secretKeyRef&lt;/span&gt;:
                &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-db-password&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;password&lt;/span&gt;
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;DB_TYPE&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;valueFrom&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;configMapKeyRef&lt;/span&gt;:
                &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-config-map&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;DB_TYPE&lt;/span&gt;
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;DB_HOST&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;valueFrom&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;configMapKeyRef&lt;/span&gt;:
                &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-config-map&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;DB_HOST&lt;/span&gt;
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;DB_NAME&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;valueFrom&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;configMapKeyRef&lt;/span&gt;:
                &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-config-map&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;DB_NAME&lt;/span&gt;
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;DB_USER&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;valueFrom&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;configMapKeyRef&lt;/span&gt;:
                &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-config-map&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;DB_USER&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;containerPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-http&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;containerPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-ssh&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/data&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;git-data&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;readOnly&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;git-data&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;persistentVolumeClaim&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;claimName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;do-storage-gitea&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-app-ini-conf&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;configMap&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-app-ini&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The important bit is the initContainer section. What&amp;rsquo;s happening here? We mount the app.ini file to the init container under /data. The awesome part about the initContainer is that the real container will have access to the file system the init container created.&lt;/p&gt;
&lt;p&gt;So we take that file, fix the permissions on it and copy it to the right location under &lt;code&gt;/data/gitea/conf&lt;/code&gt; for the Gitea app to work with.&lt;/p&gt;
&lt;p&gt;Done!&lt;/p&gt;
&lt;p&gt;And the configMap is simple:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ConfigMap&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;powerhouse&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-config-map&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;data&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;APP_COLOR&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;blue&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;APP_MOD&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prod&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;DB_TYPE&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;postgres&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;DB_HOST&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gitea-db-service.cronohub.svc.cluster.local:5432&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;DB_NAME&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;DB_USER&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;ssh&#34;&gt;SSH&lt;/h4&gt;
&lt;p&gt;Normally, Ingress only allows HTTP based traffic control. But what would an ingress be without also regular TCP based routing?&lt;/p&gt;
&lt;p&gt;But it&amp;rsquo;s not trivial. Nginx Ingress provides a documentation for this here: &lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/user-guide/exposing-tcp-udp-services/&#34;&gt;Exposing TCP and UDP services&lt;/a&gt;. What does that mean in practice?&lt;/p&gt;
&lt;p&gt;You see we are also exposing port 22 on the container:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;        - &lt;span style=&#34;color:#f92672&#34;&gt;containerPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-ssh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I choose to differentiate my SSH port for Gitea from port 22 because that&amp;rsquo;s just cumbersome to get done right. Gitea provides an explanation on how to do port 22 forwarding in a docker container with a custom git command which forwards commands to the container itself. This is all just plain too much to worry about.&lt;/p&gt;
&lt;p&gt;I have this in the app.ini:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SSH_PORT&lt;/span&gt;         &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;port of my choosing&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then this in the Service definition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Service&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;powerhouse&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/instance&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/instance&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;http&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;targetPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-http&lt;/span&gt;
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ssh&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;port of my choosing&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;targetPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitea-ssh&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;protocol&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;TCP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then, we edit the nginx-controller deployment like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl edit deployment.apps/nginx-ingress-controller
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And add this line &lt;code&gt;--tcp-services-configmap=cronohub/gitea-ssh-service&lt;/code&gt; to the container&amp;rsquo;s args field:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;args&lt;/span&gt;:
        - &lt;span style=&#34;color:#ae81ff&#34;&gt;/nginx-ingress-controller&lt;/span&gt;
        - --&lt;span style=&#34;color:#ae81ff&#34;&gt;default-backend-service=default/nginx-ingress-default-backend&lt;/span&gt;
        - --&lt;span style=&#34;color:#ae81ff&#34;&gt;election-id=ingress-controller-leader&lt;/span&gt;
        - --&lt;span style=&#34;color:#ae81ff&#34;&gt;ingress-class=nginx&lt;/span&gt;
        - --&lt;span style=&#34;color:#ae81ff&#34;&gt;configmap=default/nginx-ingress-controller&lt;/span&gt;
        - --&lt;span style=&#34;color:#ae81ff&#34;&gt;tcp-services-configmap=powerhouse/gitea-ssh-service&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One more thing is that we have to open that port on the load balancer as well to get traffic to it. To that end, edit the nginx ingress service as well:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl edit services/nginx-ingress-controller
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And add the exposed port:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ssh&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;port of my choosing&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;protocol&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;TCP&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;targetPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;port of my choosing&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There will probably be a nodePort section in there on the other ports. Ignore that for your change.&lt;/p&gt;
&lt;p&gt;Also, if you are doing the nginx installation by hand, just add this or save the yaml file from those deployments like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl get service/nginx-ingress-controller -o yaml &amp;gt; nginx-ingress-controller.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So you can deploy / modify it later on.&lt;/p&gt;
&lt;h4 id=&#34;finished-gitea&#34;&gt;Finished Gitea&lt;/h4&gt;
&lt;p&gt;And with that, visit &lt;code&gt;gitea.powerhouse.com&lt;/code&gt; and it should work including HTTPS and SSH!&lt;/p&gt;
&lt;p&gt;You can now clone repositories like this: &lt;code&gt;git clone ssh://git@gitea.powerhouse.com:1234/user/awesome_project.git&lt;/code&gt; after you created your user.&lt;/p&gt;
&lt;p&gt;User creation is done by using the gitea admin CLI tool described here: &lt;a href=&#34;https://docs.gitea.io/en-us/command-line/&#34;&gt;Gitea Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is important to note that we don&amp;rsquo;t use &lt;code&gt;latest&lt;/code&gt; anywhere. It&amp;rsquo;s just not good if you are trying to update a service later on. We could set ImagePolicy to AlwaysPull but that&amp;rsquo;s just not a good thing to do if you have a 2 gig image. Always use version and policy &lt;code&gt;imagePullPolicy: IfNotPresent&lt;/code&gt; to save yourself some bandwidth.&lt;/p&gt;
&lt;h2 id=&#34;idle-checker&#34;&gt;Idle Checker&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/hosting/idle-checker.png&#34; alt=&#34;idle-checker&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create a last resource, then we&amp;rsquo;ll call it a day.&lt;/p&gt;
&lt;p&gt;The idle RPG is a cool little game that you play by&amp;hellip; not playing. At all. If you play, you get penalties. Here is a cool resource to start: &lt;a href=&#34;https://idlerpg.lolhosting.net&#34;&gt;Idle RPG&lt;/a&gt;. It looks something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;21:56 &amp;lt;@IdleBot&amp;gt; Verily I say unto thee, the Heavens have burst forth, and the blessed hand of God carried ganome 0 days, 03:52:11 toward level 45.
21:56 &amp;lt;@IdleBot&amp;gt; ganome reaches next level in 0 days, 01:49:16.
22:02 &amp;lt;@IdleBot&amp;gt; himuraken, the level 77 Mage Of BitFlips, is now online from nickname himuraken. Next level in 11 days, 10:35:53.
22:14 &amp;lt;@IdleBot&amp;gt; Nechayev, Sundance, and simple [2011/2347] have team battled HeavyPodda, Sixbierehomme, and L [1417/2717] and won! 0 days, 06:14:54 is removed from their clocks.
22:18 &amp;lt;@IdleBot&amp;gt; canton7 saw an episode of Ally McBeal. This terrible calamity has slowed them 0 days, 05:10:53 from level 85.
22:18 &amp;lt;@IdleBot&amp;gt; canton7 reaches next level in 2 days, 00:21:36.
22:26 &amp;lt;@IdleBot&amp;gt; Tor [4/1142] has challenged Brainiac [232/817] in combat and lost! 3 days, 23:06:05 is added to Tor&#39;s clock.
22:26 &amp;lt;@IdleBot&amp;gt; Tor reaches next level in 39 days, 23:39:35.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It could happen that by some misfortune the bouncer gets restarted and it doesn&amp;rsquo;t log you back in. Or you simply just lose connection and you don&amp;rsquo;t re-connect. That is unacceptable because the point is to be present. Otherwise you don&amp;rsquo;t play. So you need an early warning in case you are offline. Luckily, IdleRPG provides an XML based endpoint to get which contains your status.&lt;/p&gt;
&lt;p&gt;From there, I&amp;rsquo;m using mailgun with a registered domain to send me an email in case my status is offline. For that, here is a small Go program &lt;a href=&#34;https://gist.github.com/Skarlso/318ddd6f8d71dbda8fbbd1a908fdb159&#34;&gt;IdleRPG Checker Go Code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To put that into a Docker container, here is a Dockerfile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; golang:latest as build&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; go get -v github.com/sirupsen/logrus &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    go get -v github.com/mailgun/mailgun-go&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt; ./main.go /code/&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /code&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; CGO_ENABLED&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; GOOS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;linux go build -a -installsuffix cgo -o /idlerpg-checker .&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; alpine:latest&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apk --no-cache add ca-certificates&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt; --from&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;build /idlerpg-checker /idlerpg-checker&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v0.0.1&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; .version&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/idlerpg-checker&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the corresponding cronjob resource definition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;batch/v1beta1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;CronJob&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;idle-checker&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;idle-checker&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;schedule&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*/20 * * * *&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;jobTemplate&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;idle-checker&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;skarlso/idle-checker&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;imagePullPolicy&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;IfNotPresent&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
              - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;:  &lt;span style=&#34;color:#ae81ff&#34;&gt;MG_API_KEY&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;valueFrom&lt;/span&gt;:
                  &lt;span style=&#34;color:#f92672&#34;&gt;secretKeyRef&lt;/span&gt;:
                    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;:  &lt;span style=&#34;color:#ae81ff&#34;&gt;idle-rpg-secret&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;:  &lt;span style=&#34;color:#ae81ff&#34;&gt;MG_API_KEY&lt;/span&gt;
              - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;:  &lt;span style=&#34;color:#ae81ff&#34;&gt;MG_DOMAIN&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;valueFrom&lt;/span&gt;:
                  &lt;span style=&#34;color:#f92672&#34;&gt;secretKeyRef&lt;/span&gt;:
                    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;:  &lt;span style=&#34;color:#ae81ff&#34;&gt;idle-rpg-secret&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;:  &lt;span style=&#34;color:#ae81ff&#34;&gt;MG_DOMAIN&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;args&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-username&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-email&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user@powerhouse.com&amp;#39;&lt;/span&gt;]
          &lt;span style=&#34;color:#f92672&#34;&gt;restartPolicy&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;OnFailure&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Aaaand, the secret for the API key:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Secret&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;idle-checker&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;idle-rpg-secret&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Opaque&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;data&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;MG_API_KEY&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;asdf=&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;MG_DOMAIN&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;asdf==&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Done. Huh. This will run every 20 minutes and check if the user with username &lt;code&gt;username&lt;/code&gt; is online. If not, it will send an email to the given email address. Your levels are safe.&lt;/p&gt;
&lt;h1 id=&#34;closing-words&#34;&gt;Closing words&lt;/h1&gt;
&lt;p&gt;Phew. This has been quite the ride. The post is now really long, so I will split the rest out into a Part 2. That is, Athens and Monitoring.&lt;/p&gt;
&lt;p&gt;Thank you for reading this far!&lt;/p&gt;
&lt;p&gt;Cheers,
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Updated Face-recog architecture drawing</title>
      <link>https://skarlso.github.io/2019/09/19/updated-face-recog-drawing/</link>
      <pubDate>Thu, 19 Sep 2019 13:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2019/09/19/updated-face-recog-drawing/</guid>
      <description>&lt;p&gt;I had a lot of fun using &lt;a href=&#34;https://procreate.art&#34;&gt;Procreate&lt;/a&gt; to re-draw the architecture image I&amp;rsquo;ve drawn for my distribute face recognition application detailed in this post &lt;a href=&#34;https://skarlso.github.io/2018/03/15/kubernetes-distributed-application/&#34;&gt;Distributed Face-Recognition App&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Without much fanfare, here is the drawing:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/kube/kube_architecture.png&#34; alt=&#34;kube_architecture.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Thanks,
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Efferent and Afferent metrics in Go</title>
      <link>https://skarlso.github.io/2019/04/21/efferent-and-afferent-metrics-in-go/</link>
      <pubDate>Sun, 21 Apr 2019 21:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2019/04/21/efferent-and-afferent-metrics-in-go/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks!&lt;/p&gt;
&lt;p&gt;Today I would like to write about a metric that I read in a book called Clean Architecture from Robert Cecil Martin ( Uncle Bob ).&lt;/p&gt;
&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;The metrics I mean are &lt;a href=&#34;https://en.wikipedia.org/wiki/Software_package_metrics&#34;&gt;Efferent&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Software_package_metrics&#34;&gt;Afferent&lt;/a&gt; coupling in packages. So you, dear reader, don&amp;rsquo;t have to navigate away from this page, here are the descriptions pasted in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Afferent couplings (Ca): The number of classes in other packages that depend upon classes within the package is an indicator of the package&amp;rsquo;s responsibility. Afferent couplings signal inward. (Affected by this package) (Fan-In).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Efferent couplings (Ce): The number of classes in other packages that the classes in this package depend upon is an indicator of the package&amp;rsquo;s dependence on externalities. Efferent couplings signal outward. (Effecting this package) (Fan-Out).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These metrics used together will indicate the stability / instability of each package in a project.&lt;/p&gt;
&lt;h1 id=&#34;metric-usage&#34;&gt;Metric Usage&lt;/h1&gt;
&lt;p&gt;What does it mean if the package is stable vs. unstable? Let&amp;rsquo;s take a closer look.&lt;/p&gt;
&lt;h2 id=&#34;unstable&#34;&gt;Unstable&lt;/h2&gt;
&lt;p&gt;If the instability metric comes out as 1 or close to 1, that means that the package is unstable. It means that there are only packages which this package is depending upon and nothing, or only 1 or 2, packages depend on it. This infers two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The package is easy to change since there is nothing depending on the behavior explicitly&lt;/li&gt;
&lt;li&gt;The package is volatile since it depends on a lot of out side things&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first one is self-explanatory. The second one has ramifications. These ramifications are that there are a lot of packages that could cause bugs in this package. Ideally, a package with instability 1 or high, requires a large test coverage to ensure that no bugs seep in.&lt;/p&gt;
&lt;h2 id=&#34;stable&#34;&gt;Stable&lt;/h2&gt;
&lt;p&gt;On the other spectrum lies the indicator for a stable package. If this metric is 0 or close to 0, the package is said to be stable. A stable package resists change because it has a lot of depending packages. The depending packages lock this package in place, meaning we can&amp;rsquo;t change the package easily. Ideally this is the package that would contain business logic for example, or code which does not change often.&lt;/p&gt;
&lt;h1 id=&#34;appliance-in-go-ecosystem&#34;&gt;Appliance in Go ecosystem&lt;/h1&gt;
&lt;p&gt;The book was using mostly Java or C/C++ for examples and dealt with classes describing these metrics. Especially the Abstractness of a package which calculates as ratio of abstract classes + interfaces vs concrete classes and implementations. This isn&amp;rsquo;t that easy to define in Go. Not impossible though and we could still get something close enough. Something like, count interfaces + structs vs implementations of said interfaces with function receivers and functions.&lt;/p&gt;
&lt;p&gt;The easier of these is the coupling metrics. I think we can define them since Go also has import statements. Go doesn&amp;rsquo;t have classes, but it&amp;rsquo;s enough if we calculate the number of packages that said package depends upon and are depended upon by. Should be close enough.&lt;/p&gt;
&lt;h1 id=&#34;tool&#34;&gt;Tool&lt;/h1&gt;
&lt;p&gt;If there is a project with a &lt;strong&gt;lot&lt;/strong&gt; of packages and files, it would be quite difficult to calculate things using your hands&amp;hellip; Hence, &lt;a href=&#34;https://github.com/Skarlso/effrit&#34;&gt;Effrit&lt;/a&gt;. This tool, at the writing of this post, only calculates the stability metric for now. If given a parameter like &lt;code&gt;-p effrit&lt;/code&gt; it will only calculate the Fan-Out metrics considering project packages. If no project name is given, it will also calculate not project packages (for example cobra or aws sdk) as Efferent. Usage is really simple. Navigate to the root of the project and run &lt;code&gt;effrit scan -p &amp;lt;projectname&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;applying-the-tool&#34;&gt;Applying the tool&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s see with a real example on using the tool and what to do with the metrics it provides.&lt;/p&gt;
&lt;p&gt;I have a project called &lt;a href=&#34;https://github.com/go-furnace/go-furnace&#34;&gt;Furnace&lt;/a&gt;. Running the tool on it I get the following stats:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/effrit/effrit1.png&#34; alt=&#34;furnace-before-tool&#34;&gt;.&lt;/p&gt;
&lt;p&gt;What do these means?&lt;/p&gt;
&lt;p&gt;It means, that hopefully, &lt;code&gt;command&lt;/code&gt; packages have a high coverage and that &lt;code&gt;config&lt;/code&gt; packages don&amp;rsquo;t require change that often. The coverage count for aws command package is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;coverage: 74.7% of statements&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That is pretty good. I think it&amp;rsquo;s covered well enough for now.&lt;/p&gt;
&lt;p&gt;On to the &lt;code&gt;config&lt;/code&gt; package. This is the whole file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;os/user&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;path/filepath&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/go-furnace/go-furnace/handle&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#75715e&#34;&gt;// Spinners is a collection os spinner types
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Spinners&lt;/span&gt; = []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;`←↖↑↗→↘↓↙`&lt;/span&gt;,
	&lt;span style=&#34;color:#e6db74&#34;&gt;`▁▃▄▅▆▇█▇▆▅▄▃`&lt;/span&gt;,
	&lt;span style=&#34;color:#e6db74&#34;&gt;`┤┘┴└├┌┬┐`&lt;/span&gt;,
	&lt;span style=&#34;color:#e6db74&#34;&gt;`◰◳◲◱`&lt;/span&gt;,
	&lt;span style=&#34;color:#e6db74&#34;&gt;`◴◷◶◵`&lt;/span&gt;,
	&lt;span style=&#34;color:#e6db74&#34;&gt;`◐◓◑◒`&lt;/span&gt;,
	&lt;span style=&#34;color:#e6db74&#34;&gt;`⣾⣽⣻⢿⡿⣟⣯⣷`&lt;/span&gt;,
	&lt;span style=&#34;color:#e6db74&#34;&gt;`|/-\`&lt;/span&gt;}

&lt;span style=&#34;color:#75715e&#34;&gt;// WAITFREQUENCY global wait frequency default.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WAITFREQUENCY&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// STACKNAME is the default name for a stack.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;STACKNAME&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FurnaceStack&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// SPINNER is the index of which spinner to use. Defaults to 7.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SPINNER&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Path retrieves the main configuration path.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// Get configuration path
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;usr&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Current&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filepath&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Join&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;usr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HomeDir&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.config&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;go-furnace&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Not a lot of stuff in there. But it&amp;rsquo;s using the &lt;code&gt;handle&lt;/code&gt; package. Hence the &lt;code&gt;0.2&lt;/code&gt;. Luckily, we also have some coverage to take care of that.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;handle&lt;/code&gt; is pretty stable. Let&amp;rsquo;s take a peak inside:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// LogFatalf is used to define the fatal error handler function. In unit tests, this is used to
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// mock out fatal errors so we can test for them.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LogFatalf&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Error extracts the if err != nil check. If the given error is not nil it will call
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// the defined fatal error handler function.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error occurred:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	}
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Fatal is a wrapper for LogFatalf function. It&amp;#39;s used to throw a Fatal in case it needs to.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;LogFatalf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Basic logic to take care of errors in Furnace. Last time I changed this file was&amp;hellip; a year ago. Yeah, I think it&amp;rsquo;s doing fine.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;And that&amp;rsquo;s it. Hopefully this is an interesting metric to use to define what packages may need refactoring, or need to be repurposed because they are too rigid. If a packages is stable, aka. hard to change but must undergo changes frequently, it may be time to refactor and introduce a mediator or a liaison package. If a package is unstable and has a lot of bugs, we might want to refactor it and inverse it&amp;rsquo;s dependencies. This is called the Dependency Inversion Principle, DIP. Which is also described in the same book. However it&amp;rsquo;s not always bad if a package is unstable. Maybe it contains code which needs to change frequently. It&amp;rsquo;s a database schema code. Or an algorithm which requires constant tweaking. And that is fine. Just make sure it&amp;rsquo;s covered well enough.&lt;/p&gt;
&lt;p&gt;The principles that these metrics are based on are: &lt;a href=&#34;http://wiki.c2.com/?StableAbstractionsPrinciple&#34;&gt;SAP&lt;/a&gt; and &lt;a href=&#34;https://www.smartics.eu/confluence/display/ADOC/Stable+Dependencies+Principle&#34;&gt;SDP&lt;/a&gt;. Stable Abstraction Principle and Stable Dependencies Principle. These are also described in the same book, Clean Architecture. A highly recommend it. Applying these principles could help maintain the project&amp;rsquo;s stability and it&amp;rsquo;s dependencies.&lt;/p&gt;
&lt;p&gt;Thank you for reading,
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Living with a new Parser for a year</title>
      <link>https://skarlso.github.io/2019/04/12/living-with-a-parser/</link>
      <pubDate>Fri, 12 Apr 2019 08:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2019/04/12/living-with-a-parser/</guid>
      <description>&lt;p&gt;Hi folks!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/parser/hi.jpg&#34; alt=&#34;hi&#34;&gt;&lt;/p&gt;
&lt;p&gt;Today’s post is a retrospective. I would like to gather some thoughts about living with the new parser that I wrote for &lt;a href=&#34;https://github.com/joshbuddy/jsonpath/&#34;&gt;JsonPath&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After a little over a year, some interesting problems surfaced that I thought I’d share for people who also would like to endeavor on this path. Let’s begin.&lt;/p&gt;
&lt;h1 id=&#34;previously&#34;&gt;Previously&lt;/h1&gt;
&lt;p&gt;About, two years ago, I took over managing / fixing / improving this ruby gem: &lt;a href=&#34;https://github.com/joshbuddy/jsonpath&#34;&gt;Json Parser&lt;/a&gt;. It&amp;rsquo;s a json parser in ruby. Amongst other problems, it used &lt;code&gt;eval&lt;/code&gt; in the background to evaluate expressions. It was a security risk to use this gem to its full extent. Something had to be done about that.&lt;/p&gt;
&lt;p&gt;I proceeded to write a semi-language parser which replaced eval that can be found here: &lt;a href=&#34;https://github.com/joshbuddy/jsonpath/blob/master/lib/jsonpath/parser.rb&#34;&gt;Parser&lt;/a&gt;. The basic intention was to replace the bare minimum of the eval behavior, and so, it was lacking some serious logic. That got improved as time went by.&lt;/p&gt;
&lt;p&gt;This is a one year retrospective on living with a self-written parser. Enjoy some of the quirks I faced so you don&amp;rsquo;t have to.&lt;/p&gt;
&lt;h1 id=&#34;ast&#34;&gt;AST&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/parser/ast.jpg&#34; alt=&#34;ast&#34;&gt;&lt;/p&gt;
&lt;p&gt;AST is short for &lt;a href=&#34;https://en.wikipedia.org/wiki/Abstract_syntax_tree&#34;&gt;Abstract Syntax Tree&lt;/a&gt;. It’s a data structure that is ideal for representing and parsing language syntax. All major lexers use some kind of AST in the background like this old Ruby language parser gem: &lt;a href=&#34;https://github.com/whitequark/parser&#34;&gt;Whitequark Parser&lt;/a&gt;. This parser is used by projects like Rubocop and line coverage reports. It&amp;rsquo;s usage is not trivial right out of the box. But as you move along you get a firm grasp of true potential.&lt;/p&gt;
&lt;p&gt;I decided to not use that parser a year ago mainly because I thought it’s too much for what I’m trying to accomplish. Maybe I was right, maybe not. I tried to play with Parser recently but it’s none trivial nature and lack of documentation makes it cumbersome to use.&lt;/p&gt;
&lt;h1 id=&#34;the-first-problems&#34;&gt;The first problems&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/parser/infinity.jpg&#34; alt=&#34;infinity&#34;&gt;&lt;/p&gt;
&lt;p&gt;What was then the first trouble that arose after I replaced eval? The parser back then was dumbed down a lot. The bug I faced was a simple infinite loop. The parser works like a lexer. It identifies tokens of certain type and tries to parse them into variables. This lexing had an error.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scanner&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scan(&lt;span style=&#34;color:#e6db74&#34;&gt;/(\s+)?&amp;#39;?(\w+)?[.,]?(\w+)?&amp;#39;?(\s+)?/&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# @TODO: At this point I should trim somewhere...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scanner&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scan(&lt;span style=&#34;color:#e6db74&#34;&gt;/(\s+)?&amp;#39;?.*&amp;#39;?(\s+)?/&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It was caught by this Json Path:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$.acceptNewTasks.[?(@.taskEndpoint == &amp;quot;mps/awesome&amp;quot;)].lastTaskPollTime
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The culprit was the &lt;code&gt;/&lt;/code&gt; character. The tokenizer wasn’t prepared…&lt;/p&gt;
&lt;p&gt;Eval would have no problem but the parser is using strict regex-s. This is where an AST would have had more luck.&lt;/p&gt;
&lt;h1 id=&#34;numbers&#34;&gt;Numbers&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/parser/twins1.jpg&#34; alt=&#34;twins1&#34;&gt;&lt;/p&gt;
&lt;p&gt;The second problem was the fact that the parser is using strings. Who would have thought that the string &lt;code&gt;2.0&lt;/code&gt; in fact does not equal to string &lt;code&gt;2&lt;/code&gt;? In Ruby the simplest way of making sure a variable is a Number is by casting the variable to Number or Float. In case it’s not a Number we rescue and move on.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;el &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Float(el) &lt;span style=&#34;color:#66d9ef&#34;&gt;rescue&lt;/span&gt; el
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Incidentally this also solved the problem where the json path contained a number but since everything is a string this, also did not equal: &lt;code&gt;&#39;1&#39; == 1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since first the string needed to be a Number.&lt;/p&gt;
&lt;h1 id=&#34;supporting-regexes&#34;&gt;Supporting regexes&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/parser/bouncer1.jpg&#34; alt=&#34;bouncer1&#34;&gt;&lt;/p&gt;
&lt;p&gt;Next came supported operators. The parser only supported the basic operators: &lt;code&gt;&amp;lt;&amp;gt;=&lt;/code&gt;. It was missing &lt;code&gt;=~&lt;/code&gt; from this. Which meant people who would use regexes to filter JSON would no longer be able to do so. This was only a tiny modification actually:&lt;/p&gt;
&lt;p&gt;First, the operator filter needed to be aware&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scanner&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scan(&lt;span style=&#34;color:#e6db74&#34;&gt;/(\s+)?[&amp;lt;&amp;gt;=][=&amp;lt;&amp;gt;]?(\s+)?/&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scanner&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scan(&lt;span style=&#34;color:#e6db74&#34;&gt;/(\s+)?[&amp;lt;&amp;gt;=][=~]?(\s+)?/&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With that done, we just &lt;code&gt;.to_regexp&lt;/code&gt; it with the power of ruby and &lt;code&gt;send&lt;/code&gt; would automatically pick it up. And of course test coverage.&lt;/p&gt;
&lt;h1 id=&#34;regression&#34;&gt;Regression&lt;/h1&gt;
&lt;p&gt;Once the parser was introduced I knew that it would create problems, since eval did many things that the parser could not handle. And they started to arrive slowly. One-by-one.&lt;/p&gt;
&lt;h2 id=&#34;booleans&#34;&gt;Booleans&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/parser/twins2.jpg&#34; alt=&#34;twins2&#34;&gt;&lt;/p&gt;
&lt;p&gt;Aka, the story of &lt;code&gt;true == &#39;true&#39;&lt;/code&gt;&amp;hellip; Inherently working with strings here makes it difficult to detect when the type boolean is meant or a string which happens to say &lt;code&gt;true&lt;/code&gt;. This one was easy to solve as well in the end:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;operand &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;true&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;false&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
            operator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=~&amp;#39;&lt;/span&gt; ? t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_regexp : t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gsub(&lt;span style=&#34;color:#e6db74&#34;&gt;%r{^&amp;#39;|&amp;#39;$}&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip &lt;span style=&#34;color:#75715e&#34;&gt;# We also handle regexp here.&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ignoring the regex part, this was all it needed.&lt;/p&gt;
&lt;h2 id=&#34;syntax&#34;&gt;Syntax&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/parser/bouncer3.jpg&#34; alt=&#34;bouncer3&#34;&gt;&lt;/p&gt;
&lt;p&gt;Some smaller tid-bits here and there also started to crop up. Things that eval did not mind at all, but my poor Parser couldn&amp;rsquo;t handle. The regex started out tightly tied. This meant that certain characters weren&amp;rsquo;t properly detected. Characters like the underscore, or &lt;code&gt;@&lt;/code&gt; or &lt;code&gt;/&lt;/code&gt;&amp;hellip; All these weren&amp;rsquo;t picked up by my tight regexp. I had to widen it a bit using .* at certain places.&lt;/p&gt;
&lt;h2 id=&#34;number-formatting&#34;&gt;Number formatting&lt;/h2&gt;
&lt;p&gt;Formatting and comparing numbers gave me a lot of headache. I had to detect whether I’m dealing with a number or a string parsed as a number or a number but that was converted into string or a string that happened to be a number. Geez…&lt;/p&gt;
&lt;p&gt;I ended up making it simple like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;el &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Float(el) &lt;span style=&#34;color:#66d9ef&#34;&gt;rescue&lt;/span&gt; el
operand &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Float(operand) &lt;span style=&#34;color:#66d9ef&#34;&gt;rescue&lt;/span&gt; operand
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Basically everything is a number. Doesn’t matter where it came from, what it was in the past… It’s a number if it can be converted. This, of course, also means that a test like this one fails:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_number_match&lt;/span&gt;
    json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
      &lt;span style=&#34;color:#e6db74&#34;&gt;channels&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
        {
          &lt;span style=&#34;color:#e6db74&#34;&gt;elem&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
        },
        {
          &lt;span style=&#34;color:#e6db74&#34;&gt;elem&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
        }
      &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    }&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_json

    assert_equal &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;elem&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; }&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;JsonPath&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;on(json, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$..channels[?(@.elem == 1)]&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Both will match… Even though you’d expect it only to match one. Luckily though… this is exactly how &lt;a href=&#34;http://jsonpath.com/&#34;&gt;http://jsonpath.com/&lt;/a&gt; works as well. An AST would detect that it’s a number type… But since I’m parsing strings here, that would be almost impossible a feat to accomplish in a nice manner.&lt;/p&gt;
&lt;h2 id=&#34;groups&#34;&gt;Groups&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/parser/bouncer2.jpg&#34; alt=&#34;bouncer2&#34;&gt;&lt;/p&gt;
&lt;p&gt;And finally, the biggest one… Groups in conditions. A query like this one for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$..book[?((@[&#39;author&#39;] == &#39;Evelyn Waugh&#39; || @[&#39;author&#39;] == &#39;Herman Melville&#39; &amp;amp;&amp;amp; (@[&#39;price&#39;] == 33 || @[&#39;price&#39;] == 9))]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Something like this was never parsed correctly. Since the parser didn’t understand grouping and order of evaluation. Let’s break it down. How do we get from a monstrous like that one above to something that can be handled? We take it one group at a time.&lt;/p&gt;
&lt;h3 id=&#34;parentheses&#34;&gt;Parentheses&lt;/h3&gt;
&lt;p&gt;As a first step, we make sure that the parentheses match. It’s possible that someone didn’t pay attention and left out a closing parentheses. Now, there are a couple of way of doing that in Ruby, but I went for the most plain blatant one.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_parenthesis_count&lt;/span&gt;(exp)
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; exp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;include?(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt;)
      depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
      exp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chars&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;
          depth &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;
          depth &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
      depth &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A basic depth counter. We do this first, to avoid parsing an invalid query.&lt;/p&gt;
&lt;h3 id=&#34;breaking-it-down&#34;&gt;Breaking it down&lt;/h3&gt;
&lt;p&gt;Next we break down this complex thing into a query that makes more sense to the parser. To do that, we take each group and extract the operation in them and replace it with the value they provide. Meaning a query like the one above essentially should look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;((false || false) &amp;amp;&amp;amp; (false || true))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Neat. This is handled by this code segment: &lt;a href=&#34;https://github.com/joshbuddy/jsonpath/blob/b2525b8e8c596ddf1c8b40982529300b5a98132b/lib/jsonpath/parser.rb#L112&#34;&gt;Parser&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The parsing function is called over and over again until there are no parentheses left in the expression. Aka, a single true or false or number remains.&lt;/p&gt;
&lt;p&gt;Now, who can spot an issue with that? The function &lt;code&gt;bool_or_exp&lt;/code&gt; is there to return a float or a boolean value. If it returns a float, we still &amp;amp;&amp;amp;= -it together with the result&amp;hellip; Thus, if there is a query like this one for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$..book[?(@.length-5 &amp;amp;&amp;amp; @.type == &#39;asdf&#39;)]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This would fail horribly. Which means, asking for a specific index in a json in a grouped expression is not supported at the moment.&lt;/p&gt;
&lt;h3 id=&#34;return-value&#34;&gt;Return Value&lt;/h3&gt;
&lt;p&gt;The parser doesn’t just return a bool value and call it a day. It also returns indexes like you read above. Indexes in cases when there is a query that returns the location of an item in the node and not if the node contains something or matches some data. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$..book[(@.length-5)]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Returns the length-5-th book.&lt;/p&gt;
&lt;h1 id=&#34;outstanding-issues&#34;&gt;Outstanding issues&lt;/h1&gt;
&lt;p&gt;Right now there are two outstanding issues. The one mentioned above, where you can’t nest indexes and true/false notations. And the other is a submitted issue in which it’s described that it’s not possible to use something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$.phoneNumbers[?(@[0].type == &#39;home&#39;)]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Which basically boils down to the fact that Jsonpath can’t handle nested lists like these:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;phoneNumbers&amp;#34;&lt;/span&gt;: [
    [{
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;  : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;iPhone&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0123-4567-8888&amp;#34;&lt;/span&gt;
    }],
    [{
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;  : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;home&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0123-4567-8910&amp;#34;&lt;/span&gt;
    }]
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That isn’t actually the problem of the parser, but Jsonpath itself.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Like a good marriage, living with a Parser is a lot of compromise and ironing out edges and working on making it better for both parties involved. I have no doubt that there are more bugs in this code, but I&amp;rsquo;m trying to keep it concise and clear to read as much as possible.&lt;/p&gt;
&lt;p&gt;I hope this was as fun to read as it was to write.&lt;/p&gt;
&lt;p&gt;Thank you for reading,&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploy a Hugo Blog Github Actions</title>
      <link>https://skarlso.github.io/2019/03/19/deploy-hugo-blog-github-actions/</link>
      <pubDate>Tue, 19 Mar 2019 22:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2019/03/19/deploy-hugo-blog-github-actions/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Today I thought I show you how you can use &lt;a href=&#34;https://github.com/features/actions&#34;&gt;Github Actions&lt;/a&gt; to deploy a hugo based blog like this one.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s dive in.&lt;/p&gt;
&lt;h1 id=&#34;actions&#34;&gt;Actions&lt;/h1&gt;
&lt;p&gt;What are actions? If you read the above linked document they are basically steps performed in containers based on some events that happened with your repository. Events can be such as pushing, creating a PR or creating/closing an issue etc.&lt;/p&gt;
&lt;p&gt;We need an even on a push.&lt;/p&gt;
&lt;p&gt;Actions is in beta right now so much of the documentation has some gaps but they are fairly okay. I recommend reading through this one carefully: &lt;a href=&#34;https://developer.github.com/actions/&#34;&gt;Developer Guide&lt;/a&gt;. This describes for example accessing the environment. That is important because we will need to access the generated content from one action in the next action.&lt;/p&gt;
&lt;h1 id=&#34;dockerfile&#34;&gt;Dockerfile&lt;/h1&gt;
&lt;p&gt;Each action requires a Dockerfile which will be used to create a container to run this particular action in. The Dockerfile uses LABELS to mark a container. It is recommended to create an ENTRYPOINT in the Dockerfile that can work with CMDs passed in from the action.&lt;/p&gt;
&lt;p&gt;For example my pusher container has the ability to push into any repository thanks to using arguments for the entrypoint.sh script.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll see that later on.&lt;/p&gt;
&lt;h1 id=&#34;blog-actions&#34;&gt;Blog actions&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s look at the two actions in detail which we&amp;rsquo;ll be using.&lt;/p&gt;
&lt;h2 id=&#34;builder&#34;&gt;Builder&lt;/h2&gt;
&lt;p&gt;First, we need to build the blog. This is accomplished pretty much the same as I wrote earlier in the travis blog part but with a little extra information.&lt;/p&gt;
&lt;p&gt;This is the Dockerfile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; golang:latest&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hugo Builder&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;maintainer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Gergely Brautigam &amp;lt;gergely@gergelybrautigam.com&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.github.actions.name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Go Builder&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.github.actions.description&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Build a hugo blog&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.github.actions.icon&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;package&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.github.actions.color&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#E0EBF5&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  apt-get update &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  apt-get install -y ca-certificates openssl git &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  update-ca-certificates &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  rm -rf /var/lib/apt&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; go get github.com/gohugoio/hugo&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt; entrypoint.sh /entrypoint.sh&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/entrypoint.sh&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pretty simple. The entrypoint script looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
set -e
set -x
set -o pipefail

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$GITHUB_WORKSPACE&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Set the GITHUB_WORKSPACE env variable.&amp;#34;&lt;/span&gt;
  exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$GITHUB_REPOSITORY&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Set the GITHUB_REPOSITORY env variable.&amp;#34;&lt;/span&gt;
  exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

root_path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$GITHUB_WORKSPACE&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Root path is: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;root_path&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
blog_path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$GITHUB_WORKSPACE&lt;span style=&#34;color:#e6db74&#34;&gt;/.blog&amp;#34;&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blog path is: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;blog_path&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
mkdir -p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$blog_path&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
mkdir -p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$root_path&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
cd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$root_path&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Preparing to build blog&amp;#34;&lt;/span&gt;
hugo --theme hermit
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Building is done. Copying over generated files&amp;#34;&lt;/span&gt;
cp -R public/* &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$blog_path&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;/
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Copy is done.&amp;#34;&lt;/span&gt;

exit &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The interesting parts here are &lt;code&gt;GITHUB_WORKSPACE&lt;/code&gt; and &lt;code&gt;GITHUB_REPOSITORY&lt;/code&gt;. The workspace is where the repository is located at.&lt;/p&gt;
&lt;p&gt;This is the place where we will copy our built blog files. Since this is a mount basically on the local build machine the next action which comes along will see the folder &lt;code&gt;.blog&lt;/code&gt;. This is how we pass artifacts between actions.&lt;/p&gt;
&lt;p&gt;This action can be found here: &lt;a href=&#34;https://github.com/Skarlso/blog-builder&#34;&gt;Hugo Blog Builder Action&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;publisher&#34;&gt;Publisher&lt;/h2&gt;
&lt;p&gt;Once the building finishes successfully we can push it to the new location.&lt;/p&gt;
&lt;p&gt;Dockerfile is similar to the one above in every regard. Except for the name and that it doesn&amp;rsquo;t need Hugo and the command&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; golang:latest&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hugo Pusher&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;maintainer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Gergely Brautigam &amp;lt;gergely@gergelybrautigam.com&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.github.actions.name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Go Pusher&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.github.actions.description&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Push a hugo blog&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.github.actions.icon&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;package&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.github.actions.color&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#E0EBF5&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  apt-get update &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  apt-get install -y ca-certificates openssl git &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  update-ca-certificates &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  rm -rf /var/lib/apt&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt; entrypoint.sh /entrypoint.sh&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/entrypoint.sh&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CMD&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Skarlso/skarlso.github.io.git&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Why do we require the CMD? Let&amp;rsquo;s take a look at the script.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
set -e
set -x

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$GITHUB_WORKSPACE&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Set the GITHUB_WORKSPACE env variable.&amp;#34;&lt;/span&gt;
  exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$GITHUB_REPOSITORY&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Set the GITHUB_REPOSITORY env variable.&amp;#34;&lt;/span&gt;
  exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

setup_git&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  repo&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$1
  git config --global user.email &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bot@github.com&amp;#34;&lt;/span&gt;
  git config --global user.name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Github Actions&amp;#34;&lt;/span&gt;
  git init
  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Starting to clone blog repository&amp;#34;&lt;/span&gt;
  git remote add origin https://&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PUSH_TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;@github.com/&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;repo&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &amp;gt; /dev/null 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  git pull origin master
  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cloning is done&amp;#34;&lt;/span&gt;
  ls -l
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

commit_website_files&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  git add .
  git commit -am &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Github Action Build &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;GITHUB_SHA&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

upload_files&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  git push --quiet --set-upstream origin master
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Beginning publishing workflow&amp;#34;&lt;/span&gt;
repo&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$1
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;repo&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Repo must be defined.&amp;#34;&lt;/span&gt;
    exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Using repository &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;repo&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; to push to&amp;#34;&lt;/span&gt;
mkdir /opt/publish &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd /opt/publish
blog_path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$GITHUB_WORKSPACE&lt;span style=&#34;color:#e6db74&#34;&gt;/.blog&amp;#34;&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blog is located at: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;blog_path&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
ls -l &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;blog_path&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Setting up git&amp;#34;&lt;/span&gt;
setup_git &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;repo&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
cp -R &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;blog_path&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;/* .
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Copied over generated content from blog path. Committing.&amp;#34;&lt;/span&gt;
commit_website_files
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Committed. Pushing.&amp;#34;&lt;/span&gt;
upload_files
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;All done.&amp;#34;&lt;/span&gt;
exit &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now this is a lot more involved. I&amp;rsquo;m leaving as many echos in here as possible for esae of debugging.&lt;/p&gt;
&lt;p&gt;The interesting part in here is the &lt;code&gt;repo=$1&lt;/code&gt;. This is why we need CMD specified. But this is what makes this Action a bit more flexible too. It can push anywhere it has access to.&lt;/p&gt;
&lt;p&gt;This action can be found here: &lt;a href=&#34;https://github.com/Skarlso/blog-publisher&#34;&gt;Hugo Blog Publisher Action&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-workflow-file&#34;&gt;The Workflow file&lt;/h2&gt;
&lt;p&gt;How does this all fit together? You have to create a workflow file which looks something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;workflow &amp;quot;Publish Blog&amp;quot; {
  on = &amp;quot;push&amp;quot;
  resolves = [&amp;quot;blog-publisher&amp;quot;]
}

action &amp;quot;blog-builder&amp;quot; {
  uses = &amp;quot;skarlso/blog-builder@master&amp;quot;
  secrets = [&amp;quot;GITHUB_TOKEN&amp;quot;]
}

action &amp;quot;blog-publisher&amp;quot; {
  uses = &amp;quot;skarlso/blog-publisher@master&amp;quot;
  needs = [&amp;quot;blog-builder&amp;quot;]
  secrets = [&amp;quot;GITHUB_TOKEN&amp;quot;, &amp;quot;PUSH_TOKEN&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is located in your repositroy under &lt;code&gt;.github/main.workdflow&lt;/code&gt;. Notice the secrets. GITHUB_TOKEN is created for you by Github. This is a basic token which lets you access the github API. But it can&amp;rsquo;t be used for pushing code. Thus, we need another token. This can be defined under your repository / settings / secrets. Once you have a token, add a new secret called PUSH_TOKEN and&amp;hellip; done.&lt;/p&gt;
&lt;p&gt;Everything should be ready to go.&lt;/p&gt;
&lt;h2 id=&#34;location-of-the-actions&#34;&gt;Location of the actions&lt;/h2&gt;
&lt;p&gt;Now, I read the doc and should have been possible to have these actions in the repositroy itself. However, I faced some problems with that setup so I ended up having actions in their respectice repository. That&amp;rsquo;s why &lt;code&gt;uses&lt;/code&gt; is set up to be &lt;code&gt;skarlso/&amp;lt;action-name&amp;gt;@branch&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;On a push now the blog is built and published. If a step fails it won&amp;rsquo;t be published. It&amp;rsquo;s actually a lot faster than my travis build was.&lt;/p&gt;
&lt;p&gt;Thank you for reading,&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cronohub: Archive from anywhere to anywhere</title>
      <link>https://skarlso.github.io/2019/03/19/cronohub/</link>
      <pubDate>Tue, 19 Mar 2019 21:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2019/03/19/cronohub/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Good afternoon folks.&lt;/p&gt;
&lt;p&gt;Today, I would like to talk a little bit about &lt;a href=&#34;https://github.com/cronohub/cronohub&#34;&gt;Cronohub&lt;/a&gt;. It&amp;rsquo;s a Python application
which you can use to archive anything from anywhere to anywhere. It uses plugins to archive this versatility.&lt;/p&gt;
&lt;p&gt;Let me show you some of its features.&lt;/p&gt;
&lt;h1 id=&#34;main-usage&#34;&gt;Main Usage&lt;/h1&gt;
&lt;p&gt;Cronohub is a python application which uses the power and ease of usage of Python to give the user a
framework. This Framework can then be used to implement concrete functionality in the form of plugins.&lt;/p&gt;
&lt;p&gt;The plugins provide the essential working logic for Cronohub. Cronohub itself, is basically a Hub for these
plugins.&lt;/p&gt;
&lt;p&gt;What can Cronohub be actually used for? Say, you have a gazillion Github repositories you would like to archive to a
S3 bucket. Or SCP to another server. Or to ownCloud&amp;hellip; You would use cronohub as such:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;❯ cronohub -s {github,gitlab} -t {s3,owncloud,scp}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is this simple. What&amp;rsquo;s going on here then? &lt;code&gt;-s&lt;/code&gt; tells Cronohub to use a source plugin called &lt;code&gt;github&lt;/code&gt; where as
&lt;code&gt;-t&lt;/code&gt; tells it to use a target plugin called &lt;code&gt;s3&lt;/code&gt; or &lt;code&gt;owncloud&lt;/code&gt; or an &lt;code&gt;scp&lt;/code&gt; operation.&lt;/p&gt;
&lt;h2 id=&#34;under-the-hood&#34;&gt;Under the hood&lt;/h2&gt;
&lt;p&gt;What happens then is that the source plugin downloads the repositories for a given user. The plugins themselves can
require certain configuration options to be provided. Like environment properties. To get the Help of a plugin you
can simply ask Cronohub like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;❯ cronohub help --source-help github
Help (github source plugin):
    - Environment Property:
        CRONO_GITHUB_TOKEN: a token with access to listing repositories for a given user.
    - File that filters the list of repositories to archive. If not present, all will be archived.
        ~/.config/cronohub/configurations/github/.repo_list
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It will display help information for that plugin.&lt;/p&gt;
&lt;p&gt;Once the source plugin finished downloading the requested repositories to a given location it will pass on a list
of files to the target plugin for archiving. The target plugin takes this list of files and will add a timestamp
to the file and upload them with the requested operation.&lt;/p&gt;
&lt;p&gt;The plugins take care of parallelization or threading if this makes it faster. For example the github plugin downloads
at most 5 archive files concurrently.&lt;/p&gt;
&lt;h1 id=&#34;plugins&#34;&gt;Plugins&lt;/h1&gt;
&lt;p&gt;What are plugins then? The plugins adhere to an ABC. An Abstract Base Class. This class defines the abilities and
structure of a plugin. It looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; abc &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ABCMeta, abstractmethod


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CronohubSourcePlugin&lt;/span&gt;(metaclass&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ABCMeta):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    This is the basic definition of a CronoHub plugin.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@abstractmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;validate&lt;/span&gt;(self):
        &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@abstractmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;help&lt;/span&gt;(self):
        &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@abstractmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch&lt;/span&gt;(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Returns a tuple (str, str) where there first parameter is the name of the
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        archive and the second is the location as a full path. Exp:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        (&amp;#34;my-project-12345&amp;#34;, &amp;#34;/home/user/projects/my-project/my-project.tar.gz&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Validation will be called before the plugin can be used. This method can be used to validate settings
for a plugin, for example if a token is provided for the github plugin. Or a bucket name is defined for the
S3 plugin etc.&lt;/p&gt;
&lt;p&gt;Help will display information just like we saw above and fetch will actually perform the downloading or
fetching of files to later archive.&lt;/p&gt;
&lt;p&gt;Plugins are located in this repository: &lt;a href=&#34;https://github.com/cronohub/plugins&#34;&gt;Cronohub plugins&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hopefully, at some point I&amp;rsquo;ll finish &lt;a href=&#34;https://cronohub.org&#34;&gt;https://cronohub.org&lt;/a&gt; and then there will be an online repository for these.&lt;/p&gt;
&lt;p&gt;Plugins are located at &lt;code&gt;~/.config/cronohub/plugins/{target,source}&lt;/code&gt;. Each plugin must take care of its own
dependencies via a &lt;code&gt;requirements.txt&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Right now, there are only a few plugins available.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Source Plugins&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Target Plugins&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Github&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;S3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Gitlab&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;SCP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Local&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ownCloud&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;No-Op&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;More are hopefully on the way. Local is simply gathering a list of files from a folder. And no-op is what it says. It&amp;rsquo;s good for debugging a source plugin as it doesn&amp;rsquo;t do anything else but displays the files it got from the source plugin.&lt;/p&gt;
&lt;h1 id=&#34;installation&#34;&gt;Installation&lt;/h1&gt;
&lt;p&gt;Installing is dead trivial. Simply run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;pip install cronohub
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;hellip; and that&amp;rsquo;s it. It&amp;rsquo;s published on pypi.org.&lt;/p&gt;
&lt;h1 id=&#34;contribution&#34;&gt;Contribution&lt;/h1&gt;
&lt;p&gt;Plugin contributions are heartily welcomed!&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s it.&lt;/p&gt;
&lt;p&gt;Thank you for reading,&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploy a Hugo Blog with Travis on Git Push</title>
      <link>https://skarlso.github.io/2019/03/18/hugo-blog-with-travis-deployment/</link>
      <pubDate>Mon, 18 Mar 2019 21:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2019/03/18/hugo-blog-with-travis-deployment/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been using the Hugo build for wercker for a long time now. Recent problems occurred though where I did not understand at first
what the problem was. It was quite difficult to debug since I did not have too much insight on the wercker build itself. Turned
out that I deleted the GITHUB token that the process was using. However, the error message was telling me that a function failed
to load some other function. Which was totally unrelated.&lt;/p&gt;
&lt;p&gt;Thus, I thought that I&amp;rsquo;m going to shift away from this outside medium to a different one that I&amp;rsquo;m already familiar with and have
greater control over.&lt;/p&gt;
&lt;p&gt;Hence, Travis. Incidentally, since I will no longer be dependend on a third party component (which was the image wercker was
using), I&amp;rsquo;ll be able to switch away from this build platform easily. For example, to CircleCI.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m using github pages, but without the whole convoluted submodule init, different branch stuff. I find that that simply adds unnecessary complexity to the whole thing. I&amp;rsquo;m keeping the source and the website in a different repository.&lt;/p&gt;
&lt;p&gt;The steps are simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get the source&lt;/li&gt;
&lt;li&gt;Generate the content locally using &lt;code&gt;hugo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Setup Git&lt;/li&gt;
&lt;li&gt;Get the source for the generated web site&lt;/li&gt;
&lt;li&gt;Copy in the newly generated code&lt;/li&gt;
&lt;li&gt;Push the code up to git&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sounds simple&amp;hellip; In fact it&amp;rsquo;s so simple, it&amp;rsquo;s three files.&lt;/p&gt;
&lt;h3 id=&#34;travis&#34;&gt;Travis&lt;/h3&gt;
&lt;p&gt;The travis modification is such:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;language&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;go&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;install&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;go get github.com/gohugoio/hugo&lt;/span&gt;
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;sudo apt-get install -y git&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;.travis/build.sh&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;after_success&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;cd ${TRAVIS_BUILD_DIR} &amp;amp;&amp;amp; .travis/push.sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Easy, it&amp;rsquo;s a standard Go based travis file. There are two things here which stand out. The &lt;code&gt;scripts&lt;/code&gt; section and the
&lt;code&gt;after_success&lt;/code&gt; section. Why &lt;code&gt;after_success&lt;/code&gt;? Because if we made a mistake, we don&amp;rsquo;t want to destroy the website. Thus we only
push in case build.sh was successful.&lt;/p&gt;
&lt;h3 id=&#34;building&#34;&gt;Building&lt;/h3&gt;
&lt;p&gt;In this light, building the blog is simple. In fact the whole script is such:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
set -e
set -x

mkdir /opt/blog
git clone --recurse-submodules https://github.com/Skarlso/blogsource.git /opt/app
echo Build started on &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;date&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
cd /opt/app
hugo --theme hermit
cp -R public/* /opt/blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For clone, &lt;code&gt;--recurse-submodules&lt;/code&gt; is required because the theme is a submodule. Once this script runs successfull,
we can push the new version of the site.&lt;/p&gt;
&lt;h3 id=&#34;pushing&#34;&gt;Pushing&lt;/h3&gt;
&lt;p&gt;Pushing is a bit more involved. There are four steps involved in this process.&lt;/p&gt;
&lt;h4 id=&#34;setup-git&#34;&gt;Setup git&lt;/h4&gt;
&lt;p&gt;First, we set up git to use some specific name so we know where the push came from.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;setup_git&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  git config --global user.email &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;travis@travis-ci.org&amp;#34;&lt;/span&gt;
  git config --global user.name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Travis CI&amp;#34;&lt;/span&gt;
  git init
  git remote add origin https://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;GITHUB_TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;@github.com/Skarlso/skarlso.github.io.git &amp;gt; /dev/null 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  git pull origin master
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Github token is a secret environment property. We also pull the blog source in this step.&lt;/p&gt;
&lt;h4 id=&#34;copy&#34;&gt;Copy&lt;/h4&gt;
&lt;p&gt;Then copy everything from the built site&amp;rsquo;s public folder (which was we already copied to /opt/blog) to this folder.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cp -R /opt/blog/* .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;commit-the-changes&#34;&gt;Commit the changes&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;commit_website_files&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  git add .
  git commit -am &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Travis build: &lt;/span&gt;$TRAVIS_BUILD_NUMBER&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is extracted for clarity.&lt;/p&gt;
&lt;h4 id=&#34;pushing-the-changes&#34;&gt;Pushing the changes&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;upload_files&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  git push --quiet --set-upstream origin master
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The script in it&amp;rsquo;s entirety here: &lt;a href=&#34;#push-sh&#34;&gt;push.sh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s it. The site is changed and updated. This can be executed in any environment and the only requirement is hugo and git being present. If you still prefer the branch method of Github pages, this is easily altered to checkout the right branch and push the changes from there.&lt;/p&gt;
&lt;p&gt;No dependency on anything. Just how I like my build processes.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
&lt;h1 id=&#34;appendix&#34;&gt;Appendix&lt;/h1&gt;
&lt;h2 id=&#34;pushsh&#34;&gt;push.sh&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
set -e
set -x

setup_git&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  git config --global user.email &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;travis@travis-ci.org&amp;#34;&lt;/span&gt;
  git config --global user.name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Travis CI&amp;#34;&lt;/span&gt;
  git init
  git remote add origin https://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;GITHUB_TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;@github.com/Skarlso/skarlso.github.io.git &amp;gt; /dev/null 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  git pull origin master
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

commit_website_files&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  git add .
  git commit -am &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Travis build: &lt;/span&gt;$TRAVIS_BUILD_NUMBER&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

upload_files&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  git push --quiet --set-upstream origin master
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

mkdir /opt/publish &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd /opt/publish
setup_git
cp -R /opt/blog/* .
commit_website_files
upload_files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Go SSH with Host Key Verification</title>
      <link>https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/</link>
      <pubDate>Sun, 17 Feb 2019 21:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/</guid>
      <description>&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Following a long search and reading lots of debates and possibilities of doing SSH within Go, I was shocked to see that not a great many tools and people use SSH with host key verification. What I usually see is this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;HostKeyCallback&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;ssh&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;InsecureIgnoreHostKey&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is terrible. Now, I realise that doing HostKeyVerification can be tedious, but don&amp;rsquo;t fear. It&amp;rsquo;s actually easy
now that the Go team provided the knownhosts subpackage in their crypto SSH package located here:
&lt;a href=&#34;https://godoc.org/golang.org/x/crypto/ssh/knownhosts&#34;&gt;KnownHosts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This part in particular is interesting: &lt;a href=&#34;https://godoc.org/golang.org/x/crypto/ssh/knownhosts#New&#34;&gt;New&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using new with a known_hosts file a code can be written like this one to verify host keys:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bytes&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;io/ioutil&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;golang.org/x/crypto/ssh&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;kh&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;golang.org/x/crypto/ssh/knownhosts&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;192.168.0.17&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uptime&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;9999&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ioutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ReadFile&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Users/user/.ssh/id_rsa&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unable to read private key: %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// Create the Signer for this private key.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;signer&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ssh&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ParsePrivateKey&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unable to parse private key: %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;hostKeyCallback&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kh&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Users/user/.ssh/known_hosts&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;could not create hostkeycallback function: &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ssh&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ClientConfig&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Auth&lt;/span&gt;: []&lt;span style=&#34;color:#a6e22e&#34;&gt;ssh&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;AuthMethod&lt;/span&gt;{
			&lt;span style=&#34;color:#75715e&#34;&gt;// Add in password check here for moar security.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;ssh&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PublicKeys&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;signer&lt;/span&gt;),
		},
		&lt;span style=&#34;color:#a6e22e&#34;&gt;HostKeyCallback&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;hostKeyCallback&lt;/span&gt;,
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// Connect to the remote server and perform the SSH handshake.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ssh&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Dial&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;address&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unable to connect: %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Close&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ss&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewSession&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unable to create SSH session: &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ss&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Close&lt;/span&gt;()
	&lt;span style=&#34;color:#75715e&#34;&gt;// Creating the buffer which will hold the remotly executed command&amp;#39;s output.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stdoutBuf&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ss&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Stdout&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stdoutBuf&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ss&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Run&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt;)
	&lt;span style=&#34;color:#75715e&#34;&gt;// Let&amp;#39;s print out the result of command.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;stdoutBuf&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is the whole thing as a &lt;a href=&#34;https://gist.github.com/Skarlso/34321a230cf0245018288686c9e70b2d&#34;&gt;Gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please try and avoid using Insecure host keys. It is easier, but can harm so much. Software like these:
&lt;a href=&#34;https://mitmproxy.org/&#34;&gt;Man in The Middle Proxy&lt;/a&gt; thrive in an environment that doesn&amp;rsquo;t do it, or doesn&amp;rsquo;t in other ways
mitigate this problem.&lt;/p&gt;
&lt;p&gt;Be wise and be safe.
Thanks for reading,
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Extensive tutorial on go-plugin.</title>
      <link>https://skarlso.github.io/2018/10/29/go-plugin-tutorial/</link>
      <pubDate>Mon, 29 Oct 2018 07:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2018/10/29/go-plugin-tutorial/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;If you don&amp;rsquo;t know what go-plugin is, don&amp;rsquo;t worry, here is a small introduction on the subject matter:&lt;/p&gt;
&lt;p&gt;Back in the old days when Go didn&amp;rsquo;t have the &lt;code&gt;plugin&lt;/code&gt; package, HashiCorp was desperately looking for a way to use plugins.&lt;/p&gt;
&lt;p&gt;In the old days, Lua plus Go wasn&amp;rsquo;t really a thing yet, and to be honest, nobody wants to write Lua ( joking!).&lt;/p&gt;
&lt;p&gt;And thus Mitchell had this brilliant idea of using RPC over the local network to serve a local interface as something that could easily be implemented with any other language that supported RPC. This sounds convoluted but has many benefits! For example, your code will never crash because of a plugin and the ability to use any language to implement a plugin. Not just Go.&lt;/p&gt;
&lt;p&gt;It has been a battle-hardened solution for years now and is being actively used by Terraform, Vault, Consule, and especially Packer. All using go-plugin in order to provide a much needed flexibility. Writing a plugin is easy. Or so they say.&lt;/p&gt;
&lt;p&gt;It can get complicated quickly, for example, if you are trying to use GRPC. You can lose sight of what exactly you&amp;rsquo;ll need to implement, where and why; or utilizing various languages or using go-plugins in your own project and extending your CLI with pluggable components.&lt;/p&gt;
&lt;p&gt;These are all nothing to sneeze at. Suddenly you&amp;rsquo;ll find yourself with hundreds of lines of code pasted from various examples and yet nothing works. Or worse, it DOES work but you have no idea how. Then you find yourself needing to extend it with a new capability, or you find an elusive bug and can&amp;rsquo;t trace its origins.&lt;/p&gt;
&lt;p&gt;Fear not. I&amp;rsquo;ll try to demystify things and draw a clear picture about how it works and how the pieces fit together.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start at the beginning.&lt;/p&gt;
&lt;h1 id=&#34;basic-plugin&#34;&gt;Basic plugin&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s start by writing a simple Go GRPC plugin. In fact, we can go through the basic example in the go-plugin’s repository which can be quite confusing when first starting out. We&amp;rsquo;ll go step-by-step, and the switch to GRPC will be much easier!&lt;/p&gt;
&lt;h2 id=&#34;basic-concepts&#34;&gt;Basic concepts&lt;/h2&gt;
&lt;h3 id=&#34;server&#34;&gt;Server&lt;/h3&gt;
&lt;p&gt;In the case of plugins, the Server is the one serving the plugin&amp;rsquo;s implementation. This means the server will have to provide the implementation to an interface.&lt;/p&gt;
&lt;h3 id=&#34;client&#34;&gt;Client&lt;/h3&gt;
&lt;p&gt;The Client calls the server in order to execute the desired behaviour. The underlying logic will connect to the server running on localhost on a random higher port, call the wanted function’s implementation and wait for a response. Once the response is received provide that back to the calling Client.&lt;/p&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;h3 id=&#34;the-main-function&#34;&gt;The main function&lt;/h3&gt;
&lt;h4 id=&#34;logger&#34;&gt;Logger&lt;/h4&gt;
&lt;p&gt;The plugins defined here use stdout in a special way. If you aren&amp;rsquo;t writing a Go based plugin, you will have to do that yourself by outputting something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1|1|tcp|127.0.0.1:1234|grpc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We&amp;rsquo;ll come back to this later. Suffice to say the framework will pick this up and will connect to the plugin based on the output. In order to get some output back, we must define a special logger:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// Create an hclog.Logger
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hclog&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hclog&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;LoggerOptions&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;:   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;plugin&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Stdout&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Level&lt;/span&gt;:  &lt;span style=&#34;color:#a6e22e&#34;&gt;hclog&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debug&lt;/span&gt;,
	})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;newclient&#34;&gt;NewClient&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// We&amp;#39;re a host! Start by launching the plugin process.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewClient&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ClientConfig&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;HandshakeConfig&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;handshakeConfig&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Plugins&lt;/span&gt;:         &lt;span style=&#34;color:#a6e22e&#34;&gt;pluginMap&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Cmd&lt;/span&gt;:             &lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Command&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./plugin/greeter&amp;#34;&lt;/span&gt;),
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Logger&lt;/span&gt;:          &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;,
	})
	&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Kill&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What is happening here? Let&amp;rsquo;s see one by one:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HandshakeConfig: handshakeConfig,&lt;/code&gt;: This part is the handshake configuration of the plugin. It has a nice comment as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// handshakeConfigs are used to just do a basic handshake between
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// a plugin and host. If the handshake fails, a user friendly error is shown.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// This prevents users from executing bad plugins or executing a plugin
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// directory. It is a UX feature, not a security feature.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handshakeConfig&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandshakeConfig&lt;/span&gt;{
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ProtocolVersion&lt;/span&gt;:  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;MagicCookieKey&lt;/span&gt;:   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BASIC_PLUGIN&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;MagicCookieValue&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;ProtocolVersion&lt;/code&gt; here is used in order to maintain compatibility with your current plugin versions. It&amp;rsquo;s basically like an API version. If you increase this, you will have two options. Don&amp;rsquo;t accept lower protocol versions nor switch to the version number and use a different client implementation for a lower version than for a higher version. This way you will maintain backwards compatibility.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;MagicCookieKey&lt;/code&gt; and &lt;code&gt;MagicCookieValue&lt;/code&gt; are used for a basic handshake which the comment is talking about. You have to set this &lt;strong&gt;ONCE&lt;/strong&gt; for your application. Never change it again, for if you do, your plugins will no longer work. For uniqueness sake, I suggest using UUID.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Cmd&lt;/code&gt; is one of the most important parts about a plugin. Basically how plugins work is that they boil down to a compiled binary which is executed and starts an RPC server. This is where you will have to define the binary which will be executed and does all this. Since this is all happening locally, (please keep in mind that Go-plugins only support localhost, and for a good reason), these binaries will most likely sit next to your application&amp;rsquo;s binary or in a pre-configured global location. Something like:  &lt;code&gt;~/.config/my-app/plugins&lt;/code&gt;. This is individual for each plugin of course. The plugins can be autoloaded via a discovery function given a path and a glob.&lt;/p&gt;
&lt;p&gt;And last but not least is the &lt;code&gt;Plugins&lt;/code&gt; map. This map is used in order to identify a plugin called &lt;code&gt;Dispense&lt;/code&gt;. This map is globally available and must stay consistent in order for all the plugins to work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// pluginMap is the map of plugins we can dispense.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pluginMap&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pluglin&lt;/span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;greeter&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;example&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterPlugin&lt;/span&gt;{},
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can see that the key is the name of the plugin and the value is the plugin.&lt;/p&gt;
&lt;p&gt;We then proceed to create an RPC client:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// Connect via RPC
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;rpcClient&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nothing fancy about this one&amp;hellip;&lt;/p&gt;
&lt;p&gt;Now comes the interesting part:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// Request the plugin
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;raw&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rpcClient&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Dispense&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;greeter&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What&amp;rsquo;s happening here? Dispense will look in the above created map and search for the plugin. If it cannot find it, it will throw an error at us. If it does find it, it will cast this plugin to an RPC or a GRPC type plugin. Then proceed to create an RPC or a GRPC client out of it.&lt;/p&gt;
&lt;p&gt;There is no call yet. This is just creating a client and parsing it to a respective representation.&lt;/p&gt;
&lt;p&gt;Now comes the magic:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// We should have a Greeter now! This feels like a normal interface
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// implementation but is in fact over an RPC connection.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;greeter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;raw&lt;/span&gt;.(&lt;span style=&#34;color:#a6e22e&#34;&gt;example&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Greeter&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;greeter&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Greet&lt;/span&gt;())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we are type asserting our raw GRPC client into our own plugin type. This is so we can call the respective function on the plugin! Once that&amp;rsquo;s done we will have a {client,struct,implementation} that can be called like a simple function.&lt;/p&gt;
&lt;p&gt;The implementation right now comes from greeter_impl.go, but that will change once protoc makes an appearance.&lt;/p&gt;
&lt;p&gt;Behind the scenes, go-plugin will do a bunch of hat tricks with multiplexing TCP connections as well as a remote procedure call to our plugin. Our plugin then will run the function, generate some kind of output, and will then send that back for the waiting client.&lt;/p&gt;
&lt;p&gt;The client will then proceed to parse the message into a given response type and will then return it back to the client’s callee.&lt;/p&gt;
&lt;p&gt;This concludes main.go for now.&lt;/p&gt;
&lt;h3 id=&#34;the-interface&#34;&gt;The Interface&lt;/h3&gt;
&lt;p&gt;Now let’s investigate the Interface. The interface is used to provide calling details. This interface will be what defines our plugins’ capabilities. How does our &lt;code&gt;Greeter&lt;/code&gt; look like?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Greeter is the interface that we&amp;#39;re exposing as a plugin.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Greeter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Greet&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is pretty simple. It defines a function which will return a string typed value.&lt;/p&gt;
&lt;p&gt;Now, we will need a couple of things for this to work. Firstly we need something which defines the RPC workings. go-plugin is working with &lt;code&gt;net/http&lt;/code&gt; inside. It also uses something called Yamux for connection multiplexing, but we needn’t worry about this detail.&lt;/p&gt;
&lt;p&gt;Implementing the RPC details looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Here is an implementation that talks over RPC
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterRPC&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rpc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterRPC&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Greet&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Call&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Plugin.Greet&amp;#34;&lt;/span&gt;, new(&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}), &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// You usually want your interfaces to return errors. If they don&amp;#39;t,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// there isn&amp;#39;t much other choice here.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here the GreeterRPC struct is an RPC specific implementation that will handle communication over RPC. This is Client in this setup.&lt;/p&gt;
&lt;p&gt;In case of gRPC, this would look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// GRPCClient is an implementation of KV that talks over RPC.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterGRPC&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{ &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;proto&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterClient&lt;/span&gt; }

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterGRPC&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Greet&lt;/span&gt;() (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Greet&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Background&lt;/span&gt;(), &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;proto&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Empty&lt;/span&gt;{})
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What is happening here? What&amp;rsquo;s Proto and what is GreeterClient? GRPC uses Google&amp;rsquo;s protoc library to serialize and unserialize data. &lt;code&gt;proto.GreeterClient&lt;/code&gt; is generated Go code by protoc. This code is a skeleton for which implementation detail will be replaced on run time. Well, the actual result will be used and not replaced as such.&lt;/p&gt;
&lt;p&gt;Back to our previous example. The RPC client calls a specific Plugin function called Greet for which the implementation will be provided by a Server that will be streamed back over the RPC protocol.&lt;/p&gt;
&lt;p&gt;The server is pretty easy to follow:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Here is the RPC server that GreeterRPC talks to, conforming to
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// the requirements of net/rpc
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterRPCServer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// This is the real implementation
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Impl&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Greeter&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Impl is the concrete implementation that will be called in the Server&amp;rsquo;s implementation of the Greet plugin. Now we must define Greet on the RPCServer in order for it to be able to call the remote code. This looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterRPCServer&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Greet&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}, &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt; {
	&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Impl&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Greet&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is all still boilerplate for the RPC works. Now comes plugin. For this, the comment is actually quite good too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// This is the implementation of plugin.Plugin so we can serve/consume this
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// This has two methods: Server must return an RPC server for this plugin
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// type. We construct a GreeterRPCServer for this.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Client must return an implementation of our interface that communicates
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// over an RPC client. We return GreeterRPC for this.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Ignore MuxBroker. That is used to create more multiplexed streams on our
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// plugin connection and is a more advanced use case.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterPlugin&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// Impl Injection
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Impl&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Greeter&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterPlugin&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MuxBroker&lt;/span&gt;) (&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterRPCServer&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Impl&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Impl&lt;/span&gt;}, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterPlugin&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MuxBroker&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rpc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;) (&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterRPC&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;}, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What does this mean? So, remember: &lt;code&gt;GreeterRPCServer&lt;/code&gt; is the one calling the actual implementation while Client is receiving the result of that call. The &lt;code&gt;GreeterPlugin&lt;/code&gt; has the &lt;code&gt;Greeter&lt;/code&gt; interface embedded just like the &lt;code&gt;RPCServer&lt;/code&gt;. We will use the &lt;code&gt;GreeterPlugin&lt;/code&gt; as a struct in the plugin map. This is the plugin that we will actually use.&lt;/p&gt;
&lt;p&gt;This is all still common stuff. These things will need to be visible for both. The plugin&amp;rsquo;s implementation will use the interface to see what it needs to implement. The Client will use it see what to call and what API is available. Like, &lt;code&gt;Greet&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;How does the implementation look like?&lt;/p&gt;
&lt;h3 id=&#34;the-implementation&#34;&gt;The Implementation&lt;/h3&gt;
&lt;p&gt;In a completely separate package, but which still has access to the interface definition, this plugin could be something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Here is a real implementation of Greeter
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterHello&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hclog&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Logger&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterHello&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Greet&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message from GreeterHello.Greet&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We create a struct and then add the function to it which is defined by the plugin&amp;rsquo;s interface. This interface, since it&amp;rsquo;s required by both parties, could well sit in a common package outside of both programs. Something like a SDK. Both code could import it and use it as a common dependency. This way we have separated the interface from the plugin &lt;strong&gt;and&lt;/strong&gt; the calling client.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;main&lt;/code&gt; function could look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hclog&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hclog&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;LoggerOptions&lt;/span&gt;{
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Level&lt;/span&gt;:      &lt;span style=&#34;color:#a6e22e&#34;&gt;hclog&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Trace&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;:     &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Stderr&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;JSONFormat&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
})

&lt;span style=&#34;color:#a6e22e&#34;&gt;greeter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterHello&lt;/span&gt;{
    &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;,
}
&lt;span style=&#34;color:#75715e&#34;&gt;// pluginMap is the map of plugins we can dispense.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pluginMap&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Plugin&lt;/span&gt;{
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;greeter&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;example&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterPlugin&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Impl&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;greeter&lt;/span&gt;},
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message from plugin&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Serve&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ServeConfig&lt;/span&gt;{
    &lt;span style=&#34;color:#a6e22e&#34;&gt;HandshakeConfig&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;handshakeConfig&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plugins&lt;/span&gt;:         &lt;span style=&#34;color:#a6e22e&#34;&gt;pluginMap&lt;/span&gt;,
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice two things that we need. One is the &lt;code&gt;handshakeConfig&lt;/code&gt;. You can either define it here, with the same cookie details as you defined in the client code, or you can extract the handshake information into the SDK. This is up to you.&lt;/p&gt;
&lt;p&gt;Then the next interesting thing is the &lt;code&gt;plugin.Serve&lt;/code&gt; method. This is where the magic happens. The plugins open up a RPC communication socket and over a hijacked &lt;code&gt;stdout&lt;/code&gt;, broadcasts its availability to the calling Client in this format:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;CORE-PROTOCOL-VERSION | APP-PROTOCOL-VERSION | NETWORK-TYPE | NETWORK-ADDR | PROTOCOL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For Go plugins, you don&amp;rsquo;t have to concern yourself with this. &lt;code&gt;go-plugin&lt;/code&gt; takes care of all this for you. For non-Go versions, we must take this into account. And before calling serve, we need to output this information to &lt;code&gt;stdout&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, a Python plugin must deal with this himself. Like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Output information&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1|1|tcp|127.0.0.1:1234|grpc&amp;#34;&lt;/span&gt;)
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stdout&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flush()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For GRPC plugins, it&amp;rsquo;s also mandatory to implement a HealthChecker.&lt;/p&gt;
&lt;p&gt;How would all this look like with GRPC?&lt;/p&gt;
&lt;p&gt;It gets slightly more complicated but not too much. We need to use &lt;code&gt;protoc&lt;/code&gt; to create a protocol description for our implementation, and then we will call that. Let&amp;rsquo;s look at this now by converting the basic greeter example into GRPC.&lt;/p&gt;
&lt;h1 id=&#34;grpc-basic-plugin&#34;&gt;GRPC Basic plugin&lt;/h1&gt;
&lt;p&gt;The example that&amp;rsquo;s under GRPC is quite elaborate and perhaps you don&amp;rsquo;t need the Python part. I will focus on the basic RPC example into a GRPC example. That should not be a problem.&lt;/p&gt;
&lt;h2 id=&#34;the-api&#34;&gt;The API&lt;/h2&gt;
&lt;p&gt;First and foremost, you will need to define an API to implement with &lt;code&gt;protoc&lt;/code&gt;. For our basic example, the protoc file could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-proto3&#34; data-lang=&#34;proto3&#34;&gt;syntax = &amp;quot;proto3&amp;quot;;
package proto;

message GreetResponse {
    string message = 1;
}

message Empty {}

service GreeterService {
    rpc Greet(Empty) returns (GreetResponse);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The syntax is quite simple and readable. What this defines is a message, which is a response, that will contain a &lt;code&gt;message&lt;/code&gt; with the type &lt;code&gt;string&lt;/code&gt;. The &lt;code&gt;service&lt;/code&gt; defines a service which has a method called &lt;code&gt;Greet&lt;/code&gt;. The service definition is basically an interface for which we will be providing the concrete implementation through the plugin.&lt;/p&gt;
&lt;p&gt;To read more about protoc, visit this page: &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;Google Protocol Buffer&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;generate-the-code&#34;&gt;Generate the code&lt;/h2&gt;
&lt;p&gt;Now, with the protoc definition in hand, we need to generate the stubs that the local client implementation can call. That client call will then, through the remote procedure call, call the right function on the server which will have the concrete implementation at the ready. Run it and return the result in the specified format. Because the stub needs to be available by both parties, (the client AND the server), this needs to live in a shared location.&lt;/p&gt;
&lt;p&gt;Why? Because the client is calling the stub and the server is implementing the stub. Both need it in order to know what to call/implement.&lt;/p&gt;
&lt;p&gt;To generate the code, run this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;protoc -I proto/ proto/greeter.proto --go_out&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;plugins&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;grpc:proto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I encourage you to read the generated code. Much will make little sense at first. It will have a bunch of structs and defined things that the GRPC package will use in order to server the function. The interesting bits and pieces are:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GreetResponse&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;GetMessage&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which will get use the message inside the response.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterServiceClient&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Greet&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Empty&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;opts&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;grpc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CallOption&lt;/span&gt;) (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GreetResponse&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is our ServiceClient interface which defines the Greet function’s topology.&lt;/p&gt;
&lt;p&gt;And lastly, this guy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RegisterGreeterServiceServer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;grpc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;srv&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterServiceServer&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RegisterService&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_GreeterService_serviceDesc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;srv&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which we will need in order to register our implementation for the server. We can ignore the rest.&lt;/p&gt;
&lt;h2 id=&#34;the-interface-1&#34;&gt;The interface&lt;/h2&gt;
&lt;p&gt;Much like the RPC, we need to define an interface for the client and server to use. This must be in a shared place as both the server and the client need to know about it. You could put this into an SDK and your peers could just get the SDK and implement some function for define and done. The interface definition in the GRPC land could look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Greeter is the interface that we&amp;#39;re exposing as a plugin.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Greeter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Greet&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// This is the implementation of plugin.GRPCPlugin so we can serve/consume this.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterGRPCPlugin&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// GRPCPlugin must still implement the Plugin interface
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Plugin&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// Concrete implementation, written in Go. This is only used for plugins
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// that are written in Go.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Impl&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Greeter&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterGRPCPlugin&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;GRPCServer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;broker&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GRPCBroker&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;grpc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;proto&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RegisterGreeterServer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GRPCServer&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Impl&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Impl&lt;/span&gt;})
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterGRPCPlugin&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;GRPCClient&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;broker&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GRPCBroker&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;grpc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ClientConn&lt;/span&gt;) (&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GRPCClient&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;proto&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewGreeterClient&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;)}, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this we have the Plugin&amp;rsquo;s implementation for hashicorp what needed to be done. The plugin will call the underlying implementation and serve/consume the plugin. We can now write the GRPC part of it.&lt;/p&gt;
&lt;p&gt;Please note that &lt;code&gt;proto&lt;/code&gt; is a shared library too where the protocol stubs reside. That needs to be somewhere on the path or in a separate SDK of some sort, but it must be visible.&lt;/p&gt;
&lt;h2 id=&#34;writing-the-grpc-client&#34;&gt;Writing the GRPC Client&lt;/h2&gt;
&lt;p&gt;Firstly we define the grpc client struct:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// GRPCClient is an implementation of Greeter that talks over RPC.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GRPCClient&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{ &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;proto&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterClient&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we define how the client will call the remote function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GRPCClient&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Greet&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Greet&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Background&lt;/span&gt;(), &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;proto&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Empty&lt;/span&gt;{})
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will take the &lt;code&gt;client&lt;/code&gt; in the &lt;code&gt;GRPCClient&lt;/code&gt; and will call the method on it. Once that&amp;rsquo;s done we will return to the result &lt;code&gt;Message&lt;/code&gt; property which will be &lt;code&gt;Hello!&lt;/code&gt;. &lt;code&gt;proto.Empty&lt;/code&gt; is an empty struct; we use this if there is no parameter for a defined method or no return value. We can&amp;rsquo;t just leave it blank. &lt;code&gt;protoc&lt;/code&gt; needs to be told explicitly that there is no parameter or return value.&lt;/p&gt;
&lt;h2 id=&#34;writing-the-grpc-server&#34;&gt;Writing the GRPC Server&lt;/h2&gt;
&lt;p&gt;The server implementation will also be similar. We call &lt;code&gt;Impl&lt;/code&gt; here which will have our concrete plugin implementation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Here is the gRPC server that GRPCClient talks to.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GRPCServer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// This is the real implementation
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Impl&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Greeter&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GRPCServer&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Greet&lt;/span&gt;(
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;proto&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Empty&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;proto&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterResponse&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Impl&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Greet&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;proto&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterResponse&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we will use the &lt;code&gt;protoc&lt;/code&gt; defined message response. &lt;code&gt;v&lt;/code&gt; will have the response from &lt;code&gt;Greet&lt;/code&gt; which will be &lt;code&gt;Hello!&lt;/code&gt; provided by the concrete plugin&amp;rsquo;s implementation. We then transform that into a protoc type by setting the &lt;code&gt;Message&lt;/code&gt; property on the &lt;code&gt;GreeterResponse&lt;/code&gt; struct provided by the automatically generated protoc stub code.&lt;/p&gt;
&lt;p&gt;Easy, right?&lt;/p&gt;
&lt;h2 id=&#34;writing-the-plugin-itself&#34;&gt;Writing the plugin itself&lt;/h2&gt;
&lt;p&gt;The whole thing looks much like the RPC implementation with just a few small modifications and changes. This can sit completely outside of everything, or can even be provided by a third party implementor.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Here is a real implementation of KV that writes to a local file with
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// the key name and the contents are the value of the key.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Greeter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;Greeter&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Greet&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Serve&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ServeConfig&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;HandshakeConfig&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;shared&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handshake&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Plugins&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Plugin&lt;/span&gt;{
			&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;greeter&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;shared&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GreeterGRPCPlugin&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Impl&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Greeter&lt;/span&gt;{}},
		},

		&lt;span style=&#34;color:#75715e&#34;&gt;// A non-nil value here enables gRPC serving for this plugin...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;GRPCServer&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;DefaultGRPCServer&lt;/span&gt;,
	})
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;calling-it-all-in-the-main&#34;&gt;Calling it all in the main&lt;/h2&gt;
&lt;p&gt;Once all that is done, the &lt;code&gt;main&lt;/code&gt; function looks the same as RPC&amp;rsquo;s main but with some small modifications.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// We&amp;#39;re a host. Start by launching the plugin process.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewClient&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ClientConfig&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;HandshakeConfig&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;shared&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handshake&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Plugins&lt;/span&gt;:         &lt;span style=&#34;color:#a6e22e&#34;&gt;shared&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PluginMap&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Cmd&lt;/span&gt;:             &lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Command&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./plugin/greeter&amp;#34;&lt;/span&gt;),
		&lt;span style=&#34;color:#a6e22e&#34;&gt;AllowedProtocols&lt;/span&gt;: []&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Protocol&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProtocolGRPC&lt;/span&gt;},
	})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;NewClient&lt;/code&gt; now defines &lt;code&gt;AllowedProtocols&lt;/code&gt; to be &lt;code&gt;ProtocolGRPC&lt;/code&gt;. The rest is the same as before calling &lt;code&gt;Dispense&lt;/code&gt; and value hinting the plugin to the correct type then calling &lt;code&gt;Greet()&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This is it. We made it! Now our plugin works over GRPC with a defined API by protoc. The plugin&amp;rsquo;s implementation can live where ever we want it to, but it needs some shared data. These are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The generated code by &lt;code&gt;protoc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The defined plugin interface&lt;/li&gt;
&lt;li&gt;The GRPC Server and Client&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These need to be visible by both the Client and the Server. The Server here is the plugin. If you are planning on making people be able to extend your application with go-plugin, you should make these available as a separate SDK. So people won&amp;rsquo;t have to include your whole project just to implement an interface and use protoc. In fact, you could also extract the &lt;code&gt;protoc&lt;/code&gt; definition into a separate repository so that your SDK can also pull it in.&lt;/p&gt;
&lt;p&gt;You will have three repositories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your application;&lt;/li&gt;
&lt;li&gt;The SDK providing the interface and the GRPC Server and Client implementation;&lt;/li&gt;
&lt;li&gt;The protoc definition file and generated skeleton ( for Go based plugins).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other languages will have to generate their own protoc code, and includ it into the plugin; like the Python implementation example located here: &lt;a href=&#34;https://github.com/hashicorp/go-plugin/tree/master/examples/grpc/plugin-python&#34;&gt;Go-plugin Python Example&lt;/a&gt;. Also, read this documentation carefully: &lt;a href=&#34;https://github.com/hashicorp/go-plugin/blob/master/docs/guide-plugin-write-non-go.md&#34;&gt;non-go go-plugin&lt;/a&gt;. This document will also clarify what &lt;code&gt;1|1|tcp|127.0.0.1:1234|grpc&lt;/code&gt; means and will dissipate the confusion around how plugins work.&lt;/p&gt;
&lt;p&gt;Lastly, if you would like to have an in-depth explanation about how go-plugin came to be, watch this video by Mitchell:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=SRvm3zQQc1Q&#34;&gt;go-plugin explanation video&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I must warn you though- it&amp;rsquo;s an hour long. But worth the watch!&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it. I hope this has helped to clear the confusion around how to use go-plugin.&lt;/p&gt;
&lt;p&gt;Happy plugging!&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Furnace with a new Plugin System</title>
      <link>https://skarlso.github.io/2018/09/17/furnace-plugin-update/</link>
      <pubDate>Mon, 17 Sep 2018 07:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2018/09/17/furnace-plugin-update/</guid>
      <description>&lt;p&gt;Hi.&lt;/p&gt;
&lt;p&gt;A quick update, but a very important and interesting one hopefully. Furnace just got a massive boost to its plugin system.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m using &lt;a href=&#34;https://github.com/hashicorp/go-plugin&#34;&gt;HashiCorp&amp;rsquo;s Go-Plugins&lt;/a&gt; system now to handle plugins. This means one of
two things that are interesting to the plugin author.&lt;/p&gt;
&lt;p&gt;One, plugins can be written in any language which is supported by Furnace and supports GRPC. Currently this means that
plugins can be written in the following languages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Go&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ruby&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adding new plugins is easy and I&amp;rsquo;m open for suggestions in which language to provide next if the need arrises.&lt;/p&gt;
&lt;p&gt;To find out more, please read the README on Furnace about plugins located here: &lt;a href=&#34;https://github.com/go-furnace/go-furnace/blob/master/README.md#plugins&#34;&gt;Furnace Plugin
System&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hope to see a bunch of nice plugins pop up here and there if please are interested in writing them. I&amp;rsquo;m listing a couple of
possibilities like, notification after create, or resource cleanup or even preventing the stack from creating in the first place
with a pre-create check for permissions / resource availability / funds constraints.&lt;/p&gt;
&lt;p&gt;Have fun writing plugins and making Furnace more powerful then ever.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m planning on providing some basic plugins that could be used out of the box. Those will probably be in Go though.&lt;/p&gt;
&lt;p&gt;Thanks,
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TOTP generator with account handling for multiple tokens</title>
      <link>https://skarlso.github.io/2018/09/13/gotp/</link>
      <pubDate>Thu, 13 Sep 2018 08:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2018/09/13/gotp/</guid>
      <description>&lt;p&gt;Hi.&lt;/p&gt;
&lt;p&gt;Today, I would like to write about a little tool I put together in Rust.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s called &lt;a href=&#34;https://github.com/Skarlso/totp&#34;&gt;gotp&lt;/a&gt;. I&amp;rsquo;m calling it gotp mainly
because of crates.io. I published it there as well, you can find it under this
link: &lt;a href=&#34;https://crates.io/crates/gotp&#34;&gt;crates.io/gotp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The purpose is clear. It&amp;rsquo;s a totp generator I wrote a while ago in C++ but now
it&amp;rsquo;s in rust. It can generate a token and save it into an account file that is
AES encrypted. The password is never saved, so it&amp;rsquo;s secure enough to use it.&lt;/p&gt;
&lt;p&gt;One of it&amp;rsquo;s properties it will have over the c++ implementation is it&amp;rsquo;s safe,
it uses a proper IV and once I&amp;rsquo;m done, it will also support encryption via PGP.&lt;/p&gt;
&lt;p&gt;That way a password will no longer be asked, but the gpg-agent will be used instead.&lt;/p&gt;
&lt;p&gt;This will give a much needed usability boost in which a password will no longer be
asked for constantly.&lt;/p&gt;
&lt;p&gt;There is also a possibility to place the account file into DropBox or Google Drive
and share it between your own devices. This way your home laptop will also have
the same account as your work laptop making it essentially an Authy like service
on the CLI.&lt;/p&gt;
&lt;p&gt;Enjoy, and keep an eye out for the PGP update. For more information in usage, please
read the README.&lt;/p&gt;
&lt;p&gt;Thank you!
Gergely.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
