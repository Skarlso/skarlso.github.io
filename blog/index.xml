<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/blog/</link>
    <description>Recent content in Blogs on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 25 May 2021 01:01:00 +0100</lastBuildDate><atom:link href="https://skarlso.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Blog refactor</title>
      <link>https://skarlso.github.io/2021/05/25/blog-refactor/</link>
      <pubDate>Tue, 25 May 2021 01:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2021/05/25/blog-refactor/</guid>
      <description><![CDATA[<h1 id="blog-refactor">Blog Refactor</h1>
<p>Finally, I went back and fixed a lot of old posts and old code entries. I tried to fix and repair links and images, but some are lost forever on some obscure WordPress blog which I used to use.</p>
<p>I&rsquo;m glad though that the code is intact and I could re-read a lot of my old stuff. It&rsquo;s interesting to see how much I evolved, how much my writing evolved. I used to write a lot of groovy and python and java and bash and ruby.</p>
<p>I&rsquo;ve been writing this blog for a long time now and I would like to write even more! For example, I&rsquo;m planning on a new series called, Things for People in a hurry, where I&rsquo;ll explain concepts and technologies in as less detail as possible, but still relevant and understandable. For people who just want to be in loop, but don&rsquo;t care / have time for an in-depth read ATM.</p>
<p>Hopefully I learn a lot of things while writing those sections and I hope that people will enjoy them and give me stuff they are interested about but don&rsquo;t have time to look up.</p>
<p>I&rsquo;m interested in all technology and concepts, such as Quantum computing too!</p>
<p>In any case,
Thanks for staying with me all these years, and here&rsquo;s to much much more!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Reader&#39;s Digest 2021-04</title>
      <link>https://skarlso.github.io/2021/04/21/readers-digest/</link>
      <pubDate>Wed, 21 Apr 2021 01:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2021/04/21/readers-digest/</guid>
      <description><![CDATA[<h1 id="readers-digest">Reader&rsquo;s Digest</h1>
<p>I thought it would a cool idea if I kept a summary of the things I&rsquo;ve read or listened to on a monthly
basis. Here is April of 2021 so far. Enjoy.</p>
<h2 id="invincible">Invincible</h2>
<p>After seeing it air on Amazon Prime, I had to go and read the comic. It&rsquo;s quite a lot, but I assure you it&rsquo;s worth it.
Some spoiler alerts&hellip;</p>
<p>Okay, so we follow this guy, Mark Grayson. He&rsquo;s Invincible. He is also and alien, called a Viltrumite. I can hardly
summaries over 3000 pages of comic books so I&rsquo;ll try to be brief.</p>
<p>The Viltrumites are a race of warrior people who wants to conquer the whole galaxy. They also have the power to do so.
They are virtually immortal, live for thousands of years and are very durable. They can fly, have super strength and
a bunch of other things. The stories are insane. We follow all kinds of people across multiverses, a lot of villains and
heroes. There is gore, sex, violance and immature jokes all around. It&rsquo;s fantastic.</p>
<p>There are better episodes and there are boring episodes as it goes with these things. The one thing that bothered me a lot
is that the Viltrumites, of course, have a weak spot. You have to remember that these are people who want to be eliminated
by a lot of other people in the whole galaxy. There is a literal coalition of planets who want to kill them.</p>
<p>And there are two main things which can kill / incapacitate them. The first one is a virus, which was developed by a
traiter Viltrumite which killed like 99.9% of them. And the other is the same weakness as the things have in the movie
called The quiet place. It&rsquo;s specific frequency sound. Granted, some very specific frequency, but it&rsquo;s sound. Because Viltrumites have a
delicate equilibrium because of their flying ability, if there is a specific frequency sound being emitted in close proximity
it can incapacitate or even kill a Viltrumite.</p>
<p>Which makes me wonder that for thousands of years in multiple, parallel universes and with thousands of alien races,
nobody even thought of doing that? It had to be Earth and Humans ( and a Dinosaur ) who came up with it? That&rsquo;s just
implausible really. And after being used only a couple of times, they don&rsquo;t use it again on a global scale!</p>
<p>Anyways. The story is still incredible and it has a lot of amazing content so I encourage comic lovers to read it all!</p>
<h2 id="conclusion">Conclusion</h2>
<p>That&rsquo;s it for this month. Some lengthy blog posts and Invincible pretty much took up my reading time.</p>
<p>And as always,
Thanks for reading,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Reader&#39;s Digest 2021-03</title>
      <link>https://skarlso.github.io/2021/03/23/readers-digest/</link>
      <pubDate>Tue, 23 Mar 2021 01:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2021/03/23/readers-digest/</guid>
      <description><![CDATA[<h1 id="readers-digest">Reader&rsquo;s Digest</h1>
<p>I thought it would a cool idea if I kept a summary of the things I&rsquo;ve read or listened to on a monthly
basis. Here is March of 2021 so far. Enjoy.</p>
<h2 id="the-aurora-database-paper">The Aurora Database paper</h2>
<p>The paper about Aurora database from AWS can be found here: <a href="http://nil.csail.mit.edu/6.824/2020/papers/aurora.pdf">Paper</a>.
It details the design decision taken to support a highly available, fault tolerant, fast replicating
database. They take the following approach&hellip; They modified mysql database such as that they only send
around the redo log and the redo log is enough to recover / replicate in order to achieve write and
read consistency. They separate the data into Protected Groups and speed up terabytes of recovery by
doing 10 Gigabyte segments in parallel. The database IS the logs. By only replicating the log instead
of the data and the data page, they save millions in networks costs. The main gain however, is that
the storage was modified to understand the application. Instead of using General store they use a storage
which understand the data. In this case, decoupling storage from the database, as so many do, was actually
a drawback.</p>
<h2 id="gcatch-paper">GCatch paper</h2>
<p>This paper is a static concurrency bug analyser for Go found here <a href="https://songlh.github.io/paper/gcatch.pdf">Paper</a>.</p>
<p>It&rsquo;s ingenious! It&rsquo;s a static analyser which finds mostly blocking bugs using channels in Go. In Go, it&rsquo;s
really easy to write concurrent software using something called <a href="https://tour.golang.org/concurrency/2">Channels</a>.
They are basically coroutines multiplexed onto kernel threads and thus you can have a million of them
running around doing stuff. Go effectively made IO operators CPU bound with them. Coroutines aren&rsquo;t new,
however, it&rsquo;s really easy to mess up code with channels in subtle ways. Analyzers exist, however, GCatch
argues that they can&rsquo;t find the most subtle of bugs, only some surface bugs really.</p>
<p>This paper proposes a tool which does inter-procedural, path-sensitive analysis and uses Z3 to find paths
which can lead to deadlocks in code that uses locking primitives and channels. It also contains five other
prominent tools. It converts mutexes into channels internally with buffer size zero and sends on it on
Lock and reads from it on Unlock, then performs a bunch of path combinations and goes through those
suspicious paths and performs its analysis.</p>
<p>They found a hundred and something bugs in Docker and Kubernetes. Things like, sending on a channel in
<code>select</code> when in fact, a timeout already returned, thus that Go routine is not indefinitely stuck. Since
it can&rsquo;t send its output on the channel, the program didn&rsquo;t quit so it&rsquo;s not GC-d. A simple fix is to
make the channel of size 1 so even if there is a chance that the scope quit it can still send and quit.
Like Exec.</p>
<p>It&rsquo;s an interesting read and the tool is awesome, however&hellip;. It was written with Go 14 and it&rsquo;s proving to
be difficult to port to current version using modules. I would hate to see this tool getting left behind
because it can&rsquo;t be turned into a linter.</p>
<h2 id="rhythm-of-war---brandon-sanderson">Rhythm of War - Brandon Sanderson</h2>
<p><a href="https://www.amazon.com/Rhythm-War-Stormlight-Archive-Book-ebook/dp/B0826NKZHR">Amazon</a>.</p>
<p>An epic continuation of this saga with over a 1000 pages long and 54 hours of listening time on Audible.
This story has been ongoing for a while now. Brandon Sanderson came out with the first book back in 2010.
This is the continuation of the Stormlight Archive series. These are massive master pieces. I first came
along Brandon Sanderson when I read the Mistborn series. That was another epic novel. I love reading
Sanderson because he comes up with some unique ways of magic or magic like abilities which have some
divine sense in the end, or have some interesting explanation. And their abilities are almost always
used in interesting ways.</p>
<p>For example, a simple ability to pull or push metal. Turns out that results in things like, shooting
coins, or literally flying as the person tosses a coin to the ground and pushes on it, pushing themselves
upwards in the end.</p>
<p>I could write many many pages about each and every fantastic novel, but I&rsquo;m going to stick to this one
expecting that people know about the series.</p>
<p>I&rsquo;ve listened to this one as I&rsquo;m insane busy, I couldn&rsquo;t have read a 1000 something pages book.
The fantastic work of Micheal Kramer and Kate Reading is always a treat to listen too. They are both
excellent readers always making the characters live through their words.</p>
<p>SPOILERS:</p>
<p>This time we mostly follow Eshonai&rsquo;s and Venli&rsquo;s but we finally also get what we wanted all these years.
Finally, Kaladin and Shallan face their inner demons. And even though they aren&rsquo;t fully okay, Kaladin
speaks his fourth oat and Shallan remembers her past. As much as I love this story, I don&rsquo;t believe I
would have been able to listen or read another 1000 pages without these two resolving their problems.
You root for them so hard, it&rsquo;s exhausting.</p>
<p>I won&rsquo;t spoil everything but the twist at the end left me dumbstruck! It was such an amazing finish.</p>
<p>The story follows the fused as they invade Urithiru. There is a side story for Navani and Jasna
doing their own thing and we do root for Navani and her fantastic discoveries regarding light and powers,
but Jasna is a side character in this story. Another main character is Witt. We finally get to know
who he is and where he comes from. We also understand now that the Fused are actually from another planet
in the same system and Odium just wants to get off this system and fight a holy war with some ancient Gods
somewhere. A lot of things which made no sense are revealed finally. I recommend it if you have the time
to listen or read it.</p>
<h2 id="how-to-take-smart-notes">How to take smart notes</h2>
<p><a href="https://www.amazon.com/How-Take-Smart-Notes-Nonfiction-ebook/dp/B06WVYW33Y">Amazon</a>.</p>
<p>This one&rsquo;s review will be condensed because it would be rather lengthy otherwise. It&rsquo;s basically talking about
how to use the <a href="https://zettelkasten.de/">Zettelkasten</a> system. But it does so much more then that. It challenges
the way you think, the way you learn the way things are taught in school and the way you process and store
information. Condensed I would say these are the main points:</p>
<ul>
<li>Connect new information to existing information. Information without connection isn&rsquo;t worth much and will be
remembered poorly or not at all.</li>
<li>Always read with a pen in your hand and take notes about what you are reading.</li>
<li>Always use your own words and never just copy blindly; by doing this, you will better understand what you just
read. The same goes to things like, writing a blog in which you explain something you think you know. It reveals
the black holes in your knowledge which you didn&rsquo;t even know exist.</li>
<li>Don&rsquo;t try to group based on topics. That will result in forced connections and will leave you confined within
that topic. Topics should emerge from your notes and then gathered into indexes which contain links to related
notes and information.</li>
<li>Tags are useful but don&rsquo;t over do them. If you have a 1000 tags your information will be lost and hard to find
because things that are unrelated will show up in the searches. So go easy on the tags</li>
<li>Note taking is a chore. It&rsquo;s not something that you just do and it just works. Good note taking requires effort.
You take notes while you read then transcribe them into Zettelkasten and throw away the rest. Those are transient
notes. Zettelkasten notes focus on the gist of things. On the meat!</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>And that&rsquo;s all for this months. Rhythm of War, the papers and the note taking book pretty much took all my
time away, so not much else got done since January. But I still think this is a nice finish. Especially
considering Rhythm of War was such a huge epic.</p>
<p>And as always,
Thanks for reading,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Reader&#39;s Digest 2021-01</title>
      <link>https://skarlso.github.io/2021/02/01/readers-digest/</link>
      <pubDate>Mon, 01 Feb 2021 01:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2021/02/01/readers-digest/</guid>
      <description><![CDATA[<h1 id="readers-digest">Reader&rsquo;s Digest</h1>
<p>I thought it would a cool idea if I kept a summary of the things I&rsquo;ve read or listened to on a monthly
basis. Here is January of 2021 so far. Enjoy.</p>
<h2 id="all-systems-red---murderbot">All systems red - Murderbot</h2>
<p>This book is SHORT. It&rsquo;s little over 3 hours of listening time. I&rsquo;m listening at 1.30 so it&rsquo;s just short of 2 hours.
But it&rsquo;s entertaining. The murderbot series is following a rouge security bot which hacked its own governor module
and is self aware and free. But&hellip; it kind of hates humans and interacting with them. It just calls itself murderbot
but has no intention of killing all humans. Instead, all its wants to do is basically&hellip; watch movies and various series on something called a Feed. In the first book of the series, this one, we follow Murderbot protect a few humans
that it gets to short of like after an attempt on their lives.</p>
<p>The narrator, Kevin R. Free, is doing a great job of impersonating the robot and you can feel the anxiety from his words when inevitably, the robot has to interact with humans. Whether it likes it or not&hellip;</p>
<h2 id="artificial-condition---murderbot">Artificial Condition - Murderbot</h2>
<p>Another short story following our Murderbot. This time, it wants to get to the bottom of a mystery involving its past.
In his past, the Murderbot, when it hacked its governor module, it went berserk and killed 80 people in the process. The company who owned it, covered it all up. Or so it thought. During its journey to find out what happened it met a new friend, Art. Art is a huge vessel capable of massive computing capacity, and happens to also love watching series.
They team up and help a rag-tag group of researchers while trying to find out what happened to Murderbot and those 80 people.</p>
<h2 id="rogue-protocol">Rogue Protocol</h2>
<p>Another fantastic episode of Murderbot. You can sense that the bot is slowly evolving into a more caring bot. Even though it&rsquo;s saying repeatedly that it doesn&rsquo;t case, it starts to care. This book was an action packed one. Lot&rsquo;s of tension and fear inducing moments. Silence then all out war! We also meet Micky, who is a &ldquo;pet bot&rdquo; for some humans. Their relationship starts off as rocky but after a while, Murderbot comes to appreciate Micky for another free soul. There are some open question in there once the story finishes.</p>
<h2 id="the-vexed-generation---magician-20">The vexed generation - Magician 2.0</h2>
<p>Being a programmer, I followed Magician 2.0 with an interest. I listen to all of the books in the series. It was fun at first, but then started to get a bit low in quality and repetitive. I don&rsquo;t really care about the people in it, and I don&rsquo;t really care about what&rsquo;s happening to them. And since they are effectively immortal there is no real danger to them at all. In this episode however, there was real danger at the end. And while the protagonist kids were kind of annoying, and it could have been narrated better and I felt like some of the characters weren&rsquo;t fully utilized, the story kind of still was fun to read. Definitely better than the previous one about dragons.</p>
<h2 id="heavens-river---bobiverse">Heaven&rsquo;s River - Bobiverse</h2>
<p>The latest addition to the Bobiverse universe. This time there is civil war amongst the Bobs and, of course, there is a new species to explore. The species was interesting, and the talk about mega-structures was also interesting, but I found that the lack of coding, and fighting and technical stuff ( what caught me on the first couple of Bob adventures ) left me wanting for more and left me with an empty feeling at the end. I really missed the proves of Bob and couldn&rsquo;t care less about Starfleet.</p>
<h2 id="armada">Armada</h2>
<p>This one was interesting. It talks about the same premise as The Last Starfighter ( there is a reference to that in there ) which I found fascinating as a child. It is about the fact that an alien race uses video games to find the best soldier for a mission to save the universe. This time though the Earth is doing the recruiting and it is against an alien invasion. And much like Ender&rsquo;s Game, it turns out that the threat is real and that all fighting on the video game that our protagonist did was preparing him for this situation. The twist was pretty good too.</p>
<h2 id="prometheus-up-and-running">Prometheus Up And Running</h2>
<p>This one has a larger post incoming.</p>
<p>That&rsquo;s all for this month.
Thanks for reading,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How to deploy a Go (Golang) backend with a React frontend separately on Kubernetes - Part One</title>
      <link>https://skarlso.github.io/2020/07/23/kubernetes-deploy-golang-react-apps-separately-part1/</link>
      <pubDate>Thu, 23 Jul 2020 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2020/07/23/kubernetes-deploy-golang-react-apps-separately-part1/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Welcome. This is a longer post about how to deploy a Go backend with a React frontend
on Kubernetes as separate entities. Instead of the usual compiled together single binary Go
application, we are going to separate the two. Why? Because usually a React frontend is just a &ldquo;static&rdquo;
SPA app with very little requirements in terms of resources, while the Go backend does most of the
leg work, requiring a lot more resources.</p>
<p>Part two of this will contain scaling, utilization configuration, health probes, readiness probes,
and how to make sure our application can run multiple instances without stepping on each other&rsquo;s toes.</p>
<p><em>Note</em>: This isn&rsquo;t going to be a Kubernetes guide. Some knowledge is assumed.</p>
<h2 id="summary">Summary</h2>
<p><img src="/img/kube/short-version.png" alt="Give me the short version"></p>
<p>This post details a complex setup of an infrastructure with a second part coming on scaling and how to make
your application scalable in the first place by doing idempotent transactions or dealing with locking and
several instances of the same application not stepping on each other&rsquo;s foot.</p>
<p>This, part one, details how to deploy traditional REST + Frontend based application in Go + React, but not bundled
together as a single binary, instead having the backend separate from the frontend. They key in doing so is explained
at the <a href="#ingress">Ingress</a> section when talking about routing specific URIs to the backend and frontend services.</p>
<p>If you are familiar with Kubernetes and infrastructure setup, feel free to skip ahead to that section. Otherwise, enjoy
the drawings or the writing or both.</p>
<h2 id="technology">Technology</h2>
<p>The SPA app will be handled by <a href="https://www.npmjs.com/package/serve">Serve</a> while the Go backend
will use <a href="https://echo.labstack.com/">Echo</a>. The database will be Postgres.</p>
<p>We are going to apply some best practices using Network Policies to cordon off traffic that we don&rsquo;t
want to go outside.</p>
<p>We will set up HTTPS using cert-manager and let&rsquo;s encrypt. We&rsquo;ll be using nginx as ingress
provider.</p>
<h2 id="code">Code</h2>
<p><img src="/img/kube/architect.png" alt="Let me show you the code"></p>
<p>All, or most of the code, including the application can be found here:</p>
<p><a href="https://github.com/staple-org">Staple</a>. The application is a simple reading list manager with
user handling, email sending and lots of database access.</p>
<p>Let&rsquo;s get to it then!</p>
<h2 id="kubernetes-provider">Kubernetes Provider</h2>
<p><img src="/img/kube/audition.png" alt="Difficult Choice"></p>
<p>Let&rsquo;s start with the obvious one. Where do you would like to create your Kubernetes cluster?</p>
<p>There are four major providers now-a-days. AWS <a href="https://aws.amazon.com/eks/">EKS</a>, GCP <a href="https://cloud.google.com/kubernetes-engine">GKE</a>,
Azure <a href="https://azure.microsoft.com/en-us/services/kubernetes-service/">AKS</a> and DigitalOcean <a href="https://www.digitalocean.com/products/kubernetes/">DKE</a>.
Personally, I prefer DO because, it&rsquo;s a lot cheaper than the others. The downside is that DO only
provides ReadWriteOnce persistent volumes. This gets to be a problem when we are trying to update
and the new Pod can&rsquo;t mount the volume because it&rsquo;s already taken by the existing one. This can be
solved by a good ol NFS instance. But that&rsquo;s another story.</p>
<p>AWS' was late to the party and their solution is quite fragile and the API is terrible. GCP is best in terms
of technicalities, api, handling, and updates. Azure is surprisingly good, however, the documentation is
most of the times out of date or even plain incorrect at some places.</p>
<h2 id="setup-basics">Setup Basics</h2>
<p><img src="/img/kube/owl.jpg" alt="Owl"></p>
<p>To setup your Kubernetes instance, follow DigitalOcean&rsquo;s Kubernetes Getting Started guide. It&rsquo;s really simple.
When you have access to the cluster via kubectl I highly recommend using this tool: <a href="https://github.com/derailed/k9s">k9s</a>.</p>
<p>It&rsquo;s a flexible and quite handy tool for quick observations, logs, shells to pods, edits and generally following what&rsquo;s
happening to your cluster.</p>
<p>Now that we are all set with our own little cluster, it&rsquo;s time to have some people move in. First, we are going to
install cert-manager.</p>
<p><em>Note</em>: I&rsquo;m not going to use Helm because I think it&rsquo;s unnecessary in this setting. We aren&rsquo;t going to install
these things in a highly configurable way and updating with helm is a pain in the butt. For example, for cert-manager
the update with helm takes several steps, whilst updating with a plain yaml file is just applying the next version
of the yaml file.</p>
<p>I&rsquo;m not going to explain how to install cert-manager or nginx. I&rsquo;ll link to their respective guides because frankly, they
are simple to follow and work out of the box.</p>
<p>To install nginx, simply apply the yaml file located here: <a href="https://kubernetes.github.io/ingress-nginx/deploy/#digital-ocean">DigitalOcean Nginx</a>.</p>
<p>To install cert-manager follow this guide: <a href="https://cert-manager.io/docs/installation/kubernetes/">cert-manager</a>.
Follow the regular manifest install part, then ignore the Helm part and proceed with verification and then install
your issuer. I used a simple ACME/http01 issuer from here: <a href="https://cert-manager.io/docs/configuration/acme/http01/">acme/http01</a></p>
<p><em>Note</em>: That acme configuration contains the <strong>staging</strong> url. This is to test that things are working. Once you are
sure that everything is wired up correctly, switch that url to this one:
<code>https://acme-v02.api.letsencrypt.org/directory</code> -&gt; prod url. For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">cert-manager.io/v1alpha2</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterIssuer</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">letsencrypt-prod</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">acme</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="c"># The ACME server URL</span><span class="w">
</span><span class="w">    </span><span class="nt">server</span><span class="p">:</span><span class="w"> </span><span class="l">https://acme-v02.api.letsencrypt.org/directory</span><span class="w">
</span><span class="w">    </span><span class="c"># Email address used for ACME registration</span><span class="w">
</span><span class="w">    </span><span class="nt">email</span><span class="p">:</span><span class="w"> </span><span class="l">your@email.com</span><span class="w">
</span><span class="w">    </span><span class="c"># Name of a secret used to store the ACME account private key</span><span class="w">
</span><span class="w">    </span><span class="nt">privateKeySecretRef</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">letsencrypt-prod</span><span class="w">
</span><span class="w">    </span><span class="c"># Enable the HTTP-01 challenge provider</span><span class="w">
</span><span class="w">    </span><span class="nt">solvers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">http01</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">ingress</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">class</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p><em>Note</em>: I&rsquo;m using a ClusterIssuer because I have multiple domains and multiple namespaces.</p>
<p>That&rsquo;s it. Cert-manager and nginx should be up and running. Later on, we will create our own
ingress rules.</p>
<h2 id="domain">Domain</h2>
<p>Next, you&rsquo;ll need a domain to bind too. There are a gazillion domain providers out there like
no-ip, GoDaddy, HostGator, Shopify and so on. Choose one which is available to you or has the best
prices.</p>
<p>There are some good guides on how to choose a domain and where to create it.
For example: <a href="https://domains.google/learning-center/5-things-to-watch-out-for-when-buying-a-domain/">5 things to watch out for when buying a domain</a>.</p>
<h1 id="the-application">The application</h1>
<p>Alright, let&rsquo;s put together the application.</p>
<p><img src="/img/kube/assemble.png" alt="Assemble"></p>
<h2 id="structure">Structure</h2>
<p>Every piece of our infrastructure will be laid out in yaml files. I believe in infrastructure as code.
If you run a command you will most likely forget about it, unless it&rsquo;s logged and / or is replayable.</p>
<p>This is the structure I&rsquo;m using:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">.
├── LICENSE
├── README.md
├── certificate_request
│   └── certificate_request.yml
├── configmaps
│   └── staple_initdb_script.yaml
├── database
│   ├── staple_db_deployment.yaml
│   ├── staple_db_network_policy.yaml
│   ├── staple_db_pvc.yaml
│   └── staple_db_service.yaml
├── namespace
│   └── staple_namespace.yaml
├── primer.sql
├── rbac
├── secrets
│   ├── staple_db_password.yaml
│   └── staple_mg_creds.yaml
├── staple-backend
│   ├── staple_deployment.yaml
│   └── staple_service.yaml
└── staple-frontend
    ├── staple_deployment.yaml
    └── staple_service.yaml
</code></pre></td></tr></table>
</div>
</div><p>One other possible combination is, if you have multiple applications:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">.
├── README.md
├── applications
│   ├── confluence
│   │   ├── db
│   │   │   ├── db_deployment.yaml
│   │   │   └── db_service.yaml
│   │   ├── deployment
│   │   │   └── deployment.yaml
│   │   ├── pvc
│   │   │   └── confluence_app_pvc.yaml
│   │   └── service
│   │       └── service.yaml
│   ├── gitea
│   │   ├── config
│   │   │   ├── app.ini
│   │   │   └── gitea_config_map.yaml
│   │   ├── db
│   │   │   ├── gitea_db_deployment.yaml
│   │   │   ├── gitea_db_network_policy.yaml
│   │   │   ├── gitea_db_pvc.yaml
│   │   │   └── gitea_db_service.yaml
│   │   ├── deployment
│   │   │   └── gitea_deployment.yaml
│   │   ├── pvc
│   │   │   └── gitea_app_pvc.yaml
│   │   └── service
│   │       └── gitea_service.yaml
├── cronjobs
│   ├── cronjob1
│   │   ├── Dockerfile
│   │   ├── README.md
│   │   ├── go.mod
│   │   ├── go.sum
│   │   ├── cron.yaml
│   │   └── main.go
├── ingress
│   ├── example1
│   │   ├── example1_ingress_resource.yaml
│   │   └── gitea_ssh_configmap.yaml
│   ├── example2
│   │   └── example2_ingress_resource.yaml
│   ├── lets-encrypt-issuer.yaml
│   └── nginx
│       ├── nginx-ingress-controller-deployment.yaml
│       └── nginx-ingress-controller-service.yaml
└── namespaces
    ├── example1_namespace.yaml
    ├── example2_namespace.yaml
</code></pre></td></tr></table>
</div>
</div><h2 id="namespace">Namespace</h2>
<p>Before we begin, we&rsquo;ll create a namespace for our application to properly partition all our entities.</p>
<p>To create a namespace we&rsquo;ll use this yaml <code>example_namespace.yaml</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Namespace</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">example</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Apply this with <code>kubectl -f apply example_namespace.yaml</code>.</p>
<h2 id="the-database">The Database</h2>
<p>Deploying a Postgres database on Kubernetes is actually really easy. You need five things to have a basic, but
relatively secure installation.</p>
<h3 id="secret">Secret</h3>
<p>The secret contains our password and our database user. In postgres, if you define a user using <code>POSTGRES_USER</code>
postgres will create the user and a database with the user&rsquo;s name. This could come from Vault too, but
the Kubernetes secret is usually enough since it should be a closed environment anyways. But for important information
I would definitely use an admission policy and some vault secret goodness. (Maybe another post?)</p>
<p>Our secret looks like this:
database_secret.yaml</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Secret</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db-password</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">POSTGRES_PASSWORD</span><span class="p">:</span><span class="w"> </span><span class="l">cGFzc3dvcmQxMjM=</span><span class="w">
</span><span class="w">  </span><span class="c"># This creates a user and a db with the same name.</span><span class="w">
</span><span class="w">  </span><span class="nt">POSTGRES_USER</span><span class="p">:</span><span class="w"> </span><span class="l">c3RhcGxl</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>To generate the base64 code for a password and a user, use:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">echo</span> -n <span class="s2">&#34;password123&#34;</span> <span class="p">|</span> base64
<span class="nb">echo</span> -n <span class="s2">&#34;username&#34;</span> <span class="p">|</span> base64
</code></pre></td></tr></table>
</div>
</div><p>&hellip;and paste the result in the respective fields. Once done, apply with <code>kubectl -f apply database_secret.yaml</code>.</p>
<h3 id="deployment">Deployment</h3>
<p>The deployment which configures our database. Looks something like this (database_deployment.yaml):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">postgres</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">postgres:11</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POSTGRES_USER</span><span class="w">
</span><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POSTGRES_PASSWORD</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db-password</span><span class="w">
</span><span class="w">                </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">POSTGRES_PASSWORD</span><span class="w">
</span><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/var/lib/postgresql/data</span><span class="w">
</span><span class="w">          </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">data</span><span class="w"> </span><span class="c"># important so it gets mounted correctly</span><span class="w">
</span><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db-data</span><span class="w">
</span><span class="w">        </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/docker-entrypoint-initdb.d/staple_initdb.sql</span><span class="w">
</span><span class="w">          </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">staple_initdb.sql</span><span class="w">
</span><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">bootstrap-script</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db-data</span><span class="w">
</span><span class="w">          </span><span class="nt">persistentVolumeClaim</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">claimName</span><span class="p">:</span><span class="w"> </span><span class="l">do-storage-staple-db</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">bootstrap-script</span><span class="w">
</span><span class="w">          </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-initdb-script</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Note the two volume mounts.</p>
<p>The first one makes sure that our data isn&rsquo;t lost when the database pod itself restarts. It creates a mount
to a persistent volume which is defined a few lines below by <code>persistentVolumeClaim</code>. <code>subPath</code> is important
in this case otherwise you&rsquo;ll end up with a lost&amp;found folder.</p>
<p>The second mount is a postgres specific initialization file. Postgres will run that sql file when it
starts up. I&rsquo;m using it to create my application&rsquo;s schema.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">create</span><span class="w"> </span><span class="k">database</span><span class="w"> </span><span class="n">staples</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">users</span><span class="w"> </span><span class="p">(</span><span class="n">email</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span><span class="w"> </span><span class="n">password</span><span class="w"> </span><span class="nb">text</span><span class="p">,</span><span class="w"> </span><span class="n">confirm_code</span><span class="w"> </span><span class="nb">text</span><span class="p">,</span><span class="w"> </span><span class="n">max_staples</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">staples</span><span class="w"> </span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="nb">serial</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="w"> </span><span class="nb">text</span><span class="p">,</span><span class="w"> </span><span class="n">created_at</span><span class="w"> </span><span class="k">timestamp</span><span class="p">,</span><span class="w"> </span><span class="n">archived</span><span class="w"> </span><span class="n">bool</span><span class="p">,</span><span class="w"> </span><span class="n">user_email</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">));</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>And it comes from a configmap which looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-initdb-script</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">staple_initdb.sql</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="l">create table users (email varchar(255), password text, confirm_code text, max_staples int);</span><span class="w">
</span><span class="w">    </span><span class="l">create table staples (name varchar(255), id serial, content text, created_at timestamp, archived bool, user_email varchar(255));</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="network-policy">Network Policy</h3>
<p>Network policies are important if you value your privacy. They restrict a PODs communication to a certain namespace
OR even to between applications only. By default I like to deny all traffic and then slowly open the valve until everything works.</p>
<p><img src="/img/kube/szaffi.png" alt="Szaffi">
Kudos if you know who this is. (mind my terrible drawing capabilities)</p>
<p>We&rsquo;ll use a basic network policy which will restrict the DB to talk to anything BUT the backend. Nothing else
will be able to talk to this Pod.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.k8s.io/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">NetworkPolicy</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db-network-policy</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">podSelector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db</span><span class="w">
</span><span class="w">  </span><span class="nt">policyTypes</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">Ingress</span><span class="w">
</span><span class="w">  </span>- <span class="l">Egress</span><span class="w">
</span><span class="w">  </span><span class="nt">ingress</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">from</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">podSelector</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">5432</span><span class="w">
</span><span class="w">  </span><span class="nt">egress</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">to</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">podSelector</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">5432</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>The important bit here is the <code>podSelector</code> part. The label will be the label used by the application deployment.
This will restrict the Pod&rsquo;s incoming and outgoing traffic to that of the application Pod including denying internet
traffic.</p>
<h3 id="pvc">PVC</h3>
<p>The persistent volume claim definition is straight forward:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PersistentVolumeClaim</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">do-storage-staple-db</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">accessModes</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">ReadWriteOnce</span><span class="w">
</span><span class="w">  </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">storage</span><span class="p">:</span><span class="w"> </span><span class="l">10Gi</span><span class="w">
</span><span class="w">  </span><span class="nt">storageClassName</span><span class="p">:</span><span class="w"> </span><span class="l">do-block-storage</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>10 gigs should be enough anything.</p>
<p><img src="/img/kube/gates.png" alt="Gates"></p>
<h3 id="service">Service</h3>
<p>The service will expose the database deployment to our cluster.</p>
<p>Our service is fairly basic:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db-service</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">5432</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db</span><span class="w">
</span><span class="w">  </span><span class="nt">clusterIP</span><span class="p">:</span><span class="w"> </span><span class="l">None</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>That&rsquo;s done with the database. Next up is the backend.</p>
<h2 id="the-backend">The backend</h2>
<p>The backend itself is written in a way that it doesn&rsquo;t require a persistent storage so
we can skip that part. It only needs three pieces. A secret, a deployment definition and the
service exposing the deployment.</p>
<h3 id="secret-1">Secret</h3>
<p>First, we create a secret which contains Mailgun credentials.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Secret</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-mg-creds</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">MG_DOMAIN</span><span class="p">:</span><span class="w"> </span><span class="l">cGFzc3dvcmQxMjM=</span><span class="w">
</span><span class="w">  </span><span class="nt">MG_API_KEY</span><span class="p">:</span><span class="w"> </span><span class="l">cGFzc3dvcmQxMjM=</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="database-connection">Database connection</h3>
<p>The connection settings are handled through the same secret which is used to spin up the DB itself.
We have to only mount that here too and we are good.</p>
<h3 id="deployment-1">Deployment</h3>
<p>Which brings us to the deployment. This is a bit more involved.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-app</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">        </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">        </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">skarlso/staple:v0.1.0</span><span class="w">
</span><span class="w">        </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent</span><span class="w">
</span><span class="w">        </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;500Mi&#34;</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;250m&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;1000Mi&#34;</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;500m&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POD_NAMESPACE</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">fieldRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">fieldPath</span><span class="p">:</span><span class="w"> </span><span class="l">metadata.namespace</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">DB_PASSWORD</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db-password</span><span class="w">
</span><span class="w">                </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">POSTGRES_PASSWORD</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">MG_DOMAIN</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-mg-creds</span><span class="w">
</span><span class="w">                </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">MG_DOMAIN</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">MG_API_KEY</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-mg-creds</span><span class="w">
</span><span class="w">                </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">MG_API_KEY</span><span class="w">
</span><span class="w">        </span><span class="nt">args</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- --<span class="l">staple-db-hostname=staple-db-service.cronohub.svc.cluster.local:5432</span><span class="w">
</span><span class="w">          </span>- --<span class="l">staple-db-username=staple</span><span class="w">
</span><span class="w">          </span>- --<span class="l">staple-db-database=staple</span><span class="w">
</span><span class="w">          </span>- --<span class="l">staple-db-password=$(DB_PASSWORD)</span><span class="w">
</span><span class="w">          </span>- --<span class="l">mg-domain=$(MG_DOMAIN)</span><span class="w">
</span><span class="w">          </span>- --<span class="l">mg-api-key=$(MG_API_KEY)</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-port</span><span class="w">
</span><span class="w">          </span><span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">9998</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>There are a few important points here and I won&rsquo;t explain them all, like the resource restrictions,
which you should be familiar with by now. I&rsquo;m using a mix of 12factor app&rsquo;s environment configuration
and command line arguments for the application configuration. The app itself is not using os.Environ
but the args.</p>
<p>The args point to the cluster local dns of the database, some db settings, and the mailgun credentials.</p>
<p>It also exposes the container port 9998 which is Echo&rsquo;s default port.</p>
<p>Now all we need is the service.</p>
<h3 id="service-1">Service</h3>
<p>Without much fanfare:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-service</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">service-port</span><span class="w">
</span><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">9998</span><span class="w">
</span><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="l">staple-port</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>And with this, the backend is done.</p>
<h2 id="the-frontend">The frontend</h2>
<p>The frontend, similarly to the backend, does not require a persistent volume. We can skip that one too.</p>
<p>In fact it only needs two things, a deployment and a service, and that&rsquo;s all. It uses serve to host the
static files. Honestly, that could also be a Go application serving the static content or anything
that can serve static files.</p>
<h3 id="deployment-2">Deployment</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">        </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">        </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">skarlso/staple-frontend:v0.0.9</span><span class="w">
</span><span class="w">        </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent</span><span class="w">
</span><span class="w">        </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;500Mi&#34;</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;250m&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;1000Mi&#34;</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;500m&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POD_NAMESPACE</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">fieldRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">fieldPath</span><span class="p">:</span><span class="w"> </span><span class="l">metadata.namespace</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">REACT_APP_STAPLE_DEV_HOST</span><span class="w">
</span><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-front</span><span class="w">
</span><span class="w">          </span><span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">5000</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="service-2">Service</h3>
<p>And the service:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-front-service</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-front</span><span class="w">
</span><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">5000</span><span class="w">
</span><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="l">staple-front</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>And with that the backend and frontend are wired together and ready to receive traffic.</p>
<p>All pods should be up and running without problems at this point. If you have any trouble deploying
things, please don&rsquo;t hesitate to leave a question in the comments.</p>
<h2 id="ingress">Ingress</h2>
<p>Fantastic. Now, our application is running. We just need to expose it and route traffic to it.
The backend has the api route <code>/rest/api/v1/</code>. The frontend has the route syntax <code>/login</code>, <code>/register</code>
and a bunch of others. The key here is that all of them are under the same domain name but based on the URI
we need to direct one request to the backend the other to the frontend.</p>
<p>This is done via nginx&rsquo;s routing logic using regex. In an nginx config this would be the <code>location</code> part.
It&rsquo;s imperative that the order of the routing is from more specific towards more general Because we need to catch
the specific URIs first.</p>
<h3 id="ingress-resource">Ingress Resource</h3>
<p>To do this, we will create something called an <a href="https://docs.nginx.com/nginx-ingress-controller/configuration/ingress-resources/">Ingress Resource</a>.
Note that this is Nginx&rsquo;s ingress resource and not Kubernetes'. There is a difference.</p>
<p>I suggest reading up on that link about the ingress resource because it reads quite well and will explain how it
works and fits into the Kubernetes environment.</p>
<p>Got it? Good. We&rsquo;ll create one for <code>staple.app</code> domain:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">extensions/v1beta1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Ingress</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-app-ingress</span><span class="w">
</span><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">kubernetes.io/ingress.class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;nginx&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">cert-manager.io/cluster-issuer</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;letsencrypt-prod&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">cert-manager.io/acme-challenge-type</span><span class="p">:</span><span class="w"> </span><span class="l">http01</span><span class="w">
</span><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/rewrite-target</span><span class="p">:</span><span class="w"> </span><span class="l">/$1</span><span class="w"> </span><span class="c"># this is important</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">tls</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">hosts</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="l">staple.app</span><span class="w">
</span><span class="w">    </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">staple-app-tls</span><span class="w">
</span><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">staple.app</span><span class="w">
</span><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">backend</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">serviceName</span><span class="p">:</span><span class="w"> </span><span class="l">staple-service</span><span class="w">
</span><span class="w">          </span><span class="nt">servicePort</span><span class="p">:</span><span class="w"> </span><span class="l">ss-port</span><span class="w"> </span><span class="c"># 9998</span><span class="w">
</span><span class="w">        </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/(rest/api/1.*)</span><span class="w">
</span><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">staple.app</span><span class="w">
</span><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">backend</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">serviceName</span><span class="p">:</span><span class="w"> </span><span class="l">staple-front-service</span><span class="w">
</span><span class="w">          </span><span class="nt">servicePort</span><span class="p">:</span><span class="w"> </span><span class="l">sfs-port</span><span class="w"> </span><span class="c"># 5000</span><span class="w">
</span><span class="w">        </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/(.*)</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Let&rsquo;s take a look at what&rsquo;s going on here. The first thing to catch the eye are the annotations.
These are configuration settings for nginx, cert-manager and Kubernetes.
We have the cluster issuer&rsquo;s name. The challenge type, which we decided should be http01,
and the most important part, the rewrite-target setting. This will use the first capture group
as a base after the host.</p>
<p>With this rewrite rule in place, the <code>paths</code> values need to provide a capture group. The first in line will see
everything that goes to the urls like: <code>staple.app/rest/api/1/token</code>, <code>staple.app/rest/api/1/staples</code>,
<code>staple.app/rest/api/1/user</code>, etc. The first part of the url is the host <code>staple.app</code>, second part is <code>/(rest/api/1/.*)</code>
for which the result is that group number one ($1) will be <code>rest/api/1/token</code>. Nginx now sees that we
have a backend route for that and will send this URI along to the service. Our service picks it up
and will match that URI to the router configuration.</p>
<p><img src="/img/kube/regex.png" alt="Regex"></p>
<p>If there is a request like, <code>staple.app/login</code>, which is our frontend&rsquo;s job to pick up, the first rule
will not catch it because the regex isn&rsquo;t matching, so it falls through to the second one, which
is the frontend service that is using a &ldquo;catch all&rdquo; regex. Like ip tables, we go from
specific to more general.</p>
<h1 id="ending-words">Ending words</h1>
<p>And that&rsquo;s it. If everything works correctly, then the certificate service wired up the https certs and
we should be able ping the rest endpoint under <code>https://staple.app/rest/api/1/token</code> and log in to the app
in the browser using <code>https://staple.app</code>.</p>
<p>Stay tuned for the second part where we&rsquo;ll scale the thing up!</p>
<p>Thanks for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How to do a good code review</title>
      <link>https://skarlso.github.io/2020/05/11/good-code-reviews/</link>
      <pubDate>Mon, 11 May 2020 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2020/05/11/good-code-reviews/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>This time, I would like to talk a little bit about code reviews.</p>
<p>How do you do code reviews? Don&rsquo;t hesitate to share it in the comments.</p>
<p>How do I do code reviews? Well read on if you would like to know.</p>
<h1 id="the-top-down-approach">The Top Down approach</h1>
<p>If I&rsquo;m dealing with a small code change, a couple of lines here and there in the odd file
first, I&rsquo;ll try to understand why the review is there? What was it trying to achieve? What&rsquo;s
the goal of the change? Is there a ticket/issue I can read for background info? Or an RFC?</p>
<p>Understanding the goal of the change will let you know how to read the change. I usually also
scribble down some notes and my expectations to see if the change meets them or does something
completely different. And if it&rsquo;s different, maybe my expectations were wrong.</p>
<p>In any case, I will have a framework to start with. It&rsquo;s important to understand why the change
is there in the first place. I cannot stress this enough.</p>
<h1 id="logical-follow">Logical follow</h1>
<p>If the change is large, the top down approach will simply not work. You will loose track of
why the change is and your logical big picture image will fade into nothingness after a hundred lines.</p>
<p>In Github at least, what I would do to approach this, is close all views and just have a general sense first
how big the change is, and what files changed (after I understand why the change is there and what is it trying
to change and / or solve). Once I have a feel for the structure I would look for changes which are trivial.
For example parameter changes of a function. I would expect that in that case there will be a lot of changes at places
where that function was called. I would review those and then go on.</p>
<p>If there is any, I would look for an entry point into the change. Is there a new handler? A new API?
A new method? Did an API change? If so, did that change propagate all the way through the API&rsquo;s implementation?</p>
<p>If it&rsquo;s a huge number of deletes, I would look for the deleted code in the whole codebase. Did they miss something?
Was that code referenced in another section of the code or possibly in another service? In that case, do a search
on the whole organization on all repositories if you believe that that makes sense.</p>
<p>If it&rsquo;s concurrent code&hellip; are they syncing it up at some point? Are they releasing the lock? Is the lock happening
at the right place? In Go for example, you can get a lock and then <code>defer w.Lock.Unlock()</code> it. This makes
for a convenient way of &ldquo;forgetting&rdquo; about the lock acquire. But this is counterproductive in some cases.</p>
<p>Imagine you have a function which acquires the lock in the begin. Then does a for loop which takes a couple of seconds
but doesn&rsquo;t actually use the map or the value you were trying to protect. In that case you are taking the
lock but aren&rsquo;t actually using it. There was no point in acquiring it at the beginning of the function.</p>
<h1 id="general-order">General order</h1>
<p>There are a LOT of things one can review in a PR. Minute things and a myriad if small to big logical
problems and ramifications. It&rsquo;s not possible to list them all. So here are some general rules I would
follow:</p>
<h2 id="syntax">Syntax</h2>
<p>The first thing I would do is look through the syntax and follow this mnemonic: BUD.
B(ottleneck), U(nnecessary code), D(uplicate work). Spotting these is usually easy but it can happen
that the change is subtle. Bottlenecks are often embedded loops in loops or a very sneaky recursion.
Unnecessary code is sometimes harder to spot. This is duplicate code which could be extracted. It can be subtle
because it&rsquo;s likely that only a small thing changes and at first glance it&rsquo;s not trivial how to extract
the rest of the code around that small thing. Maybe it can be a function (if your language supports functions
as first class citizens) which could close over a value and change it multiple times.</p>
<p>Duplicate work is when a loop is calculating something over and over but it&rsquo;s actually the same thing or
we already have that information and it&rsquo;s not likely that it would change so it can be reused. These kind of
problems are solved through caching or simply just do it once, store the result, then pass it around. Candidates
for this could be multiple calls to the same api for the same information which didn&rsquo;t change in between.</p>
<h2 id="general-language-guidelines">General language guidelines</h2>
<p>General language syntax and guidelines adherence comes next. In Go this is trivial, since we have a plethora
of tools available to us, devs, in the form of static analyzers like, fmt, golint, goimport etc. But in the
absence there is usually a good guide at hand how a language is supposed to look like.</p>
<h2 id="workplace--project-guideline-adherence">Workplace / Project guideline adherence</h2>
<p>This could arguably come before the general adherence. Whichever suits you better. Or maybe your workplace / environment
the code is in (this could also be an open source project) is different from the general guidelines. That is okay, as
long as it&rsquo;s sensible. You could try changing it if you think it&rsquo;s too far from how a language is supposed to look like
but that usually doesn&rsquo;t work. Especially if the in-place guidelines are already there for years.</p>
<p>Generally though, it&rsquo;s better to follow whatever style/code/whim the current environment is doing. If changing something
always look around how that looks like in the code you are working in and then follow that style. These could be things like,
variable naming, comment semantics, logical flow of the code, structuring (like where the code should go and how it should look
like (yes, look like(sometime aesthetics matter))).</p>
<h2 id="could-it-be-done-concurrently">Could it be done concurrently</h2>
<p>As a cherry on top, I would try to determine if the work that is being done, could be done in a thread / go routine. In Go, go routines
are cheap and very easy to make. It&rsquo;s also easy to abuse them of course, but it doesn&rsquo;t hurt to think asynchronously. Especially in
a distributed environment. Which brings me to the next point.</p>
<h2 id="in-a-distributed-environment-timing-is-key">In a distributed environment timing is key</h2>
<p>If this change is in an environment which has many services and is generally distributed your first though should immediately
be, how those this affect the rest of the services and what timing issues could arise. If there is a delete operation, what about
another service calling a create or a get on the same resource at the same time? What if it&rsquo;s a create but another service also calls
create with the same values? Is the data eventually consistent or strongly consistent? How does that affect the runtime? Is the change
in a frequently called code segment which is usually under heavy load? Did the change change the way that is handled? Did it slow it down
or speed it up? Did it trade the slowdown for strong consistency? Is strong consistency really needed in that service which would
justify the slowdown?</p>
<p>Like I said&hellip; a myriad of things&hellip;</p>
<p>I&rsquo;ll stop here for now.</p>
<h1 id="conclusion">Conclusion</h1>
<p>I hope this made sense. If you disagree with this approach or have a different guideline of reviewing, please don&rsquo;t hesitate it to share it!</p>
<p>As always,
Thanks for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How to Make SPA refresh work with a Go backend</title>
      <link>https://skarlso.github.io/2020/02/17/making-spa-refresh-work-with-go-backend/</link>
      <pubDate>Mon, 17 Feb 2020 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2020/02/17/making-spa-refresh-work-with-go-backend/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>Today I would like to share a quick &ldquo;fix&rdquo; for a problem I&rsquo;ve seen popping up here and there.</p>
<p>That is, if you have a react frontend which is a SPA app but you still want refresh to work.
What do I mean by that? Consider the following&hellip;</p>
<h1 id="the-problem">The problem</h1>
<p>You have a SPA app with a react router which navigates the user around. The app calls to a backend
api which serves content of some kind. You have the following routes&hellip;. login, signup, reset, archive.</p>
<p>If your app is compiled with your backend, as it usually is, then something like: <a href="https://app.com/login">https://app.com/login</a>
will not work unless it&rsquo;s also defined on the backend serving some content.</p>
<p>So but what should the content be in this case?</p>
<h1 id="the-structre">The structre</h1>
<p>For that, let&rsquo;s first look at the strucute of the app. Consider the following directory tree:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">.
├── Dockerfile
├── LICENSE
├── Makefile
├── README.md
├── build
├── cmd
│   └── root.go
├── frontend
│   ├── LICENSE
│   ├── README.md
│   ├── build
│   ├── package-lock.json
│   ├── package.json
│   ├── public
│   ├── src
│   └── yarn.lock
├── go.mod
├── go.sum
├── img
├── internal
└── pkg
</code></pre></td></tr></table>
</div>
</div><p>For this, the frontend contains a build dir in which the generated react frontend static files plus
compiled JavaScript libraries are. In this directory there also is a index.html file which does the actual
heavy lifting in terms of routing.</p>
<p>The Go backend therefor must only route to index.html on certain endpoints.</p>
<p>In Go to build and deploy a single binary containing the static assets here in, you can use something like
<a href="https://github.com/GeertJohan/go.rice">go.rice</a> or <a href="https://github.com/elazarl/go-bindata-assetfs">assetfs</a> which
generate a Go file for you which contains all the data in an easily accessible way.</p>
<p>I&rsquo;ll be using go.rice.</p>
<h1 id="the-solution">The solution</h1>
<p>To summarize, all you have to do is route every route in your router.js file to index.html in Go. But how? Well, like this&hellip;</p>
<p>Consider this appliction: <a href="https://github.com/staple-org/staple">Staple</a>. This is a react frontend go backend application
which builds a frontend asset then packages it up with go.rice, builds a Docker container and deploys the whole thing to
a Kubernetes cluster. But this is the interesting part which handles the index routing:</p>
<p>In routes.go (contains the mapped routes from under Router.js):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">pkg</span>

<span class="c1">// These routes must match the routes under frontend/Routes.js
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">routes</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
	<span class="s">&#34;/login&#34;</span><span class="p">,</span>
	<span class="s">&#34;/archive&#34;</span><span class="p">,</span>
	<span class="s">&#34;/staples/new&#34;</span><span class="p">,</span>
	<span class="s">&#34;/reset&#34;</span><span class="p">,</span>
	<span class="s">&#34;/signup&#34;</span><span class="p">,</span>
	<span class="s">&#34;/settings&#34;</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Once we have a list of routes to map&hellip;</p>
<p>In server.go (which is starting up the server and generates the handlers&hellip;)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">    <span class="c1">// ... code which sets up the api routes... after every handler has been estabilished...
</span><span class="c1"></span>	<span class="c1">// Setup front-end if not in production mode.
</span><span class="c1"></span>	<span class="k">if</span> <span class="p">!</span><span class="nx">config</span><span class="p">.</span><span class="nx">Opts</span><span class="p">.</span><span class="nx">DevMode</span> <span class="p">{</span>
        <span class="c1">// This path needs to be relative from this files package&#39;s location.
</span><span class="c1"></span>		<span class="nx">staticAssets</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rice</span><span class="p">.</span><span class="nf">FindBox</span><span class="p">(</span><span class="s">&#34;../frontend/build&#34;</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;Cannot find assets in production&#34;</span><span class="p">)</span>
			<span class="k">return</span> <span class="nx">err</span>
		<span class="p">}</span>

		<span class="c1">// Register handler for static assets
</span><span class="c1"></span>        <span class="nx">assetHandler</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">FileServer</span><span class="p">(</span><span class="nx">staticAssets</span><span class="p">.</span><span class="nf">HTTPBox</span><span class="p">())</span>
        <span class="c1">// Open the index.html file as a *File for reading the content out of it.
</span><span class="c1"></span>        <span class="c1">// This is a virtual file handled by go.rice.
</span><span class="c1"></span>		<span class="nx">index</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">staticAssets</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;index.html&#34;</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="nx">config</span><span class="p">.</span><span class="nx">Opts</span><span class="p">.</span><span class="nx">Logger</span><span class="p">.</span><span class="nf">Error</span><span class="p">().</span><span class="nf">Err</span><span class="p">(</span><span class="nx">err</span><span class="p">).</span><span class="nf">Msg</span><span class="p">(</span><span class="s">&#34;Failed to find index.html content.&#34;</span><span class="p">)</span>
			<span class="k">return</span> <span class="nx">err</span>
		<span class="p">}</span>

        <span class="c1">// Set up the main point as a static file server
</span><span class="c1"></span>		<span class="nx">e</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">echo</span><span class="p">.</span><span class="nf">WrapHandler</span><span class="p">(</span><span class="nx">assetHandler</span><span class="p">))</span>
		<span class="c1">// Set up routes to index.html for all routes under Routes.js. Index.html will handle the routing any further.
</span><span class="c1"></span>		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">r</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">routes</span> <span class="p">{</span>
			<span class="nx">e</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span> <span class="nf">indexServer</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span> <span class="nx">index</span><span class="p">))</span>
		<span class="p">}</span>
		<span class="nx">e</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/favicon.ico&#34;</span><span class="p">,</span> <span class="nx">echo</span><span class="p">.</span><span class="nf">WrapHandler</span><span class="p">(</span><span class="nx">assetHandler</span><span class="p">))</span>
		<span class="nx">e</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/site.webmanifest&#34;</span><span class="p">,</span> <span class="nx">echo</span><span class="p">.</span><span class="nf">WrapHandler</span><span class="p">(</span><span class="nx">assetHandler</span><span class="p">))</span>
		<span class="nx">e</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/static/css/*&#34;</span><span class="p">,</span> <span class="nx">echo</span><span class="p">.</span><span class="nf">WrapHandler</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nf">StripPrefix</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">assetHandler</span><span class="p">)))</span>
		<span class="nx">e</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/static/js/*&#34;</span><span class="p">,</span> <span class="nx">echo</span><span class="p">.</span><span class="nf">WrapHandler</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nf">StripPrefix</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">assetHandler</span><span class="p">)))</span>
		<span class="nx">e</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/static/media/*&#34;</span><span class="p">,</span> <span class="nx">echo</span><span class="p">.</span><span class="nf">WrapHandler</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nf">StripPrefix</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">assetHandler</span><span class="p">)))</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>What is <code>indexServer</code> in this you might ask? Well, fret no longer, I shall show you:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// indexServer takes a name and the contents of the virtual file index.html gathered up by go.rice
</span><span class="c1">// and serves its content via http.ServeContent under the given name.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">indexServer</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">file</span> <span class="o">*</span><span class="nx">rice</span><span class="p">.</span><span class="nx">File</span><span class="p">)</span> <span class="nx">echo</span><span class="p">.</span><span class="nx">HandlerFunc</span> <span class="p">{</span>
	<span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c</span> <span class="nx">echo</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
		<span class="nx">stat</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Stat</span><span class="p">()</span>
		<span class="nx">http</span><span class="p">.</span><span class="nf">ServeContent</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nf">Response</span><span class="p">().</span><span class="nx">Writer</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Request</span><span class="p">(),</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">stat</span><span class="p">.</span><span class="nf">ModTime</span><span class="p">(),</span> <span class="nx">file</span><span class="p">)</span>
		<span class="k">return</span> <span class="kc">nil</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The key points are the name, which will be the route and the file which is the index.html content which contains
the logic to route based on the request. All that will be handled. And if a new route comes along,
simple add it to the list, recompile and you are done!</p>
<h1 id="conclusion">Conclusion</h1>
<p>In summary, you let your index.html file handle the routing as you would normally do. Just you need to make your
backend aware of that fact. Now refreshing the page will work as you&rsquo;d expect.</p>
<p>Thank you for reading,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Using a Kubernetes based Cluster for Various Services with auto HTTPS - Part 2</title>
      <link>https://skarlso.github.io/2019/10/15/kubernetes-cluster-part2/</link>
      <pubDate>Tue, 15 Oct 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/10/15/kubernetes-cluster-part2/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>This is a continuation of the previous post about my Kubernetes infrastructure located <a href="https://skarlso.github.io/2019/09/21/kubernetes-cluster/">here</a>. The two remaining points are to deploy Athens Go proxy and setting up monitoring.</p>
<h1 id="athens">Athens</h1>
<p><img src="/img/hosting/athens.png" alt="Athens"></p>
<p>Let&rsquo;s start with <a href="https://github.com/gomods/athens">Athens</a>.</p>
<p>First of all if you are a helm user, Athens has an awesome set of helm charts which you can use to deploy it in your cluster.
Located <a href="https://github.com/gomods/athens/tree/master/charts/athens-proxy">here</a>.</p>
<p>I prefer to deploy my own config files, but that&rsquo;s me. So here is my preferred way of deploying Athens.</p>
<p>Since this is also a subdomain of the previously created <code>powerhouse</code> namespace we are going to use that.</p>
<h2 id="pvc">PVC</h2>
<p>We are going to need a PersistentVolumeClaim for Athens so it can store all the things forever.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PersistentVolumeClaim</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">powerhouse</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">athens-storage</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">accessModes</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">ReadWriteOnce</span><span class="w">
</span><span class="w">  </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">storage</span><span class="p">:</span><span class="w"> </span><span class="l">10Gi</span><span class="w">
</span><span class="w">  </span><span class="nt">storageClassName</span><span class="p">:</span><span class="w"> </span><span class="l">do-block-storage</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Claim is very boring. Which means it just works.</p>
<h2 id="deployment">Deployment</h2>
<p>This is more interesting. Athens provides a lot of possibilities for the deployment. I&rsquo;m just deploying the barest possible here. Which means, no user auth, no private repository support, ssh key configuration, etc&hellip; It&rsquo;s a plain proxy installation.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">powerhouse</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">athens-app</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w">        </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w">        </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">gomods/athens:v0.6.0</span><span class="w">
</span><span class="w">        </span><span class="nt">livenessProbe</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">httpGet</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/healthz&#34;</span><span class="w">
</span><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">3000</span><span class="w">
</span><span class="w">        </span><span class="nt">readinessProbe</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">httpGet</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/readyz&#34;</span><span class="w">
</span><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">3000</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ATHENS_GOGET_WORKERS</span><span class="w">
</span><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3&#34;</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ATHENS_STORAGE_TYPE</span><span class="w">
</span><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;disk&#34;</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ATHENS_DISK_STORAGE_ROOT</span><span class="w">
</span><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">/var/lib/athens</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">3000</span><span class="w">
</span><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">athens-http</span><span class="w">
</span><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">athens-data</span><span class="w">
</span><span class="w">            </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/var/lib/athens</span><span class="w">
</span><span class="w">            </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">athens</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">athens-data</span><span class="w">
</span><span class="w">          </span><span class="nt">persistentVolumeClaim</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">claimName</span><span class="p">:</span><span class="w"> </span><span class="l">athens-storage</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Fun fact. The name of the app must not be just plain <code>athens</code> because that will result in an error: <code>too many colons in address</code>.</p>
<p>The issue is here: <a href="https://github.com/gomods/athens/issues/1038#issuecomment-457145658">https://github.com/gomods/athens/issues/1038#issuecomment-457145658</a> Basically it&rsquo;s because of the name used for the environment properties inside the container.</p>
<h2 id="service">Service</h2>
<p>Now, let&rsquo;s expose it.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">powerhouse</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">athens-service</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">athens-proxy</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">3000</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h2 id="ingress">Ingress</h2>
<p>I&rsquo;m using port 80 here because it&rsquo;s convenient. But if you use any other port, don&rsquo;t forget to alter your ingress to forward to that port and service.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">extensions/v1beta1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Ingress</span><span class="w">
</span><span class="w"></span><span class="nn">...</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">tls</span><span class="p">:</span><span class="w">
</span><span class="w"></span><span class="nn">...</span><span class="w">
</span><span class="w">  </span>- <span class="nt">hosts</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="l">athens.powerhouse.com</span><span class="w">
</span><span class="w">    </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">athens-cronohub-tls</span><span class="w">
</span><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span><span class="w"></span><span class="nn">...</span><span class="w">
</span><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">athens.powerhouse.com</span><span class="w">
</span><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">backend</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">serviceName</span><span class="p">:</span><span class="w"> </span><span class="l">athens-service</span><span class="w">
</span><span class="w">          </span><span class="nt">servicePort</span><span class="p">:</span><span class="w"> </span><span class="m">1234</span><span class="w">
</span><span class="w">        </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>And that&rsquo;s it! If you now visit <code>https://athens.powerhouse.com</code> it should say <code>&quot;Welcome to The Athens Proxy&quot;</code>.</p>
<p>Now, if you set this proxy with <code>export GOPROXY=https://athens.powerhouse.com</code> it should start to cache modules. It&rsquo;s a fantastic proxy with a lot of capabilities. I encourage you to check it out and drop by it&rsquo;s slack channel on Gopher slack called Athens.</p>
<h1 id="monitoring">Monitoring</h1>
<p>Monitoring is a huge topic so I&rsquo;m not going to talk about how to monitor or what. That is described in great many of posts. I especially recommend reading sysdig&rsquo;s 6 part post on doing monitoring with Prometheus and Grafana and what to monitor and the four golden signals and whatnot. Starting <a href="https://sysdig.com/blog/kubernetes-monitoring-prometheus/">here</a> and <a href="https://sysdig.com/blog/monitoring-kubernetes-with-sysdig-cloud/">here</a>.</p>
<h2 id="prometheus">Prometheus</h2>
<p>I&rsquo;m going to deploy <a href="https://prometheus.io">Prometheus</a>. Prometheus is a monitoring tool which sits inside your cluster and gathers data about running pods, nodes, services, whatever you expose and wants to send data to it. It can also alert on things and can be integrated with tools like Graphana for nice front-end and metrics. Prometheus itself uses PromQL as its query language to gather data from different sources and do time series analytics and much much more.</p>
<p>Please visit the website and documentation for more details. It&rsquo;s the defacto monitoring tool for Kubernetes. Again, I&rsquo;m going to do a very basic installation of Prometheus. So basic in fact, that I don&rsquo;t even have a PVC for it, because I don&rsquo;t care at this point about retaining data.</p>
<h3 id="namespace">Namespace</h3>
<p>Let&rsquo;s create it&rsquo;s own namespace.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Namespace</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">monitoring</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">monitoring</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="config">Config</h3>
<p>Prometheus Server config is massive. I don&rsquo;t expect you to pick up on everything in this thing, but I would encourage you to at least try to find out what these setting do&hellip; Our config yaml file contains the configuration file for Prometheus which we&rsquo;ll later set up via a command line argument. It&rsquo;s called <code>prometheus.yml</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus-server-conf</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus-server-conf</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">monitoring</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">prometheus.yml</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span><span class="sd">    global:
</span><span class="sd">      scrape_interval: 5s
</span><span class="sd">      evaluation_interval: 5s
</span><span class="sd">
</span><span class="sd">    scrape_configs:
</span><span class="sd">      - job_name: &#39;kubernetes-apiservers&#39;
</span><span class="sd">        kubernetes_sd_configs:
</span><span class="sd">        - role: endpoints
</span><span class="sd">        scheme: https
</span><span class="sd">        tls_config:
</span><span class="sd">          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
</span><span class="sd">        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
</span><span class="sd">        relabel_configs:
</span><span class="sd">        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
</span><span class="sd">          action: keep
</span><span class="sd">          regex: default;kubernetes;https
</span><span class="sd">
</span><span class="sd">      - job_name: &#39;kubernetes-nodes&#39;
</span><span class="sd">        scheme: https
</span><span class="sd">        tls_config:
</span><span class="sd">          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
</span><span class="sd">        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
</span><span class="sd">        kubernetes_sd_configs:
</span><span class="sd">        - role: node
</span><span class="sd">        relabel_configs:
</span><span class="sd">        - action: labelmap
</span><span class="sd">          regex: __meta_kubernetes_node_label_(.+)
</span><span class="sd">        - target_label: __address__
</span><span class="sd">          replacement: kubernetes.default.svc:443
</span><span class="sd">        - source_labels: [__meta_kubernetes_node_name]
</span><span class="sd">          regex: (.+)
</span><span class="sd">          target_label: __metrics_path__
</span><span class="sd">          replacement: /api/v1/nodes/${1}/proxy/metrics
</span><span class="sd">
</span><span class="sd">      - job_name: &#39;kubernetes-pods&#39;
</span><span class="sd">        kubernetes_sd_configs:
</span><span class="sd">        - role: pod
</span><span class="sd">        relabel_configs:
</span><span class="sd">        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
</span><span class="sd">          action: keep
</span><span class="sd">          regex: true
</span><span class="sd">        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
</span><span class="sd">          action: replace
</span><span class="sd">          target_label: __metrics_path__
</span><span class="sd">          regex: (.+)
</span><span class="sd">        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
</span><span class="sd">          action: replace
</span><span class="sd">          regex: ([^:]+)(?::\d+)?;(\d+)
</span><span class="sd">          replacement: $1:$2
</span><span class="sd">          target_label: __address__
</span><span class="sd">        - action: labelmap
</span><span class="sd">          regex: __meta_kubernetes_pod_label_(.+)
</span><span class="sd">        - source_labels: [__meta_kubernetes_namespace]
</span><span class="sd">          action: replace
</span><span class="sd">          target_label: kubernetes_namespace
</span><span class="sd">        - source_labels: [__meta_kubernetes_pod_name]
</span><span class="sd">          action: replace
</span><span class="sd">          target_label: kubernetes_pod_name
</span><span class="sd">
</span><span class="sd">      - job_name: &#39;kubernetes-cadvisor&#39;
</span><span class="sd">        scheme: https
</span><span class="sd">        tls_config:
</span><span class="sd">          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
</span><span class="sd">        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
</span><span class="sd">        kubernetes_sd_configs:
</span><span class="sd">        - role: node
</span><span class="sd">        relabel_configs:
</span><span class="sd">        - action: labelmap
</span><span class="sd">          regex: __meta_kubernetes_node_label_(.+)
</span><span class="sd">        - target_label: __address__
</span><span class="sd">          replacement: kubernetes.default.svc:443
</span><span class="sd">        - source_labels: [__meta_kubernetes_node_name]
</span><span class="sd">          regex: (.+)
</span><span class="sd">          target_label: __metrics_path__
</span><span class="sd">          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
</span><span class="sd">
</span><span class="sd">      - job_name: &#39;kubernetes-service-endpoints&#39;
</span><span class="sd">        kubernetes_sd_configs:
</span><span class="sd">        - role: endpoints
</span><span class="sd">        relabel_configs:
</span><span class="sd">        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
</span><span class="sd">          action: keep
</span><span class="sd">          regex: true
</span><span class="sd">        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
</span><span class="sd">          action: replace
</span><span class="sd">          target_label: __scheme__
</span><span class="sd">          regex: (https?)
</span><span class="sd">        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
</span><span class="sd">          action: replace
</span><span class="sd">          target_label: __metrics_path__
</span><span class="sd">          regex: (.+)
</span><span class="sd">        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
</span><span class="sd">          action: replace
</span><span class="sd">          target_label: __address__
</span><span class="sd">          regex: ([^:]+)(?::\d+)?;(\d+)
</span><span class="sd">          replacement: $1:$2
</span><span class="sd">        - action: labelmap
</span><span class="sd">          regex: __meta_kubernetes_service_label_(.+)
</span><span class="sd">        - source_labels: [__meta_kubernetes_namespace]
</span><span class="sd">          action: replace
</span><span class="sd">          target_label: kubernetes_namespace
</span><span class="sd">        - source_labels: [__meta_kubernetes_service_name]
</span><span class="sd">          action: replace
</span><span class="sd">          target_label: kubernetes_name</span><span class="w">    
</span></code></pre></td></tr></table>
</div>
</div><p>Mostly it&rsquo;s just setting up what Prometheus should monitor and how. The important bits are the <code>labels</code>. How this is going to work is, that we will <code>annotate</code> the resources we want Prometheus to see. Which is pretty cool. Basically we will just alter a pod to include an annotation and it will begin monitoring it. No need to install anything anywhere or restart anything. Just add an annotation and bamm, you&rsquo;re done.</p>
<h2 id="rbac">RBAC</h2>
<p>Prometheus needs permissions to access resources in the cluster such as API end-points and gathering data about the cluster itself. We will provide it with this permission through <a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/">Role Based Access Control</a>.</p>
<p>We&rsquo;ll create a service account which Prometheus can use. We want it to access the whole cluster so we&rsquo;ll use a <code>ClusterRole</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1beta1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRole</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus</span><span class="w">
</span><span class="w"></span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span><span class="w"></span>- <span class="nt">apiGroups</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;&#34;</span><span class="p">]</span><span class="w">
</span><span class="w">  </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">nodes</span><span class="w">
</span><span class="w">  </span>- <span class="l">nodes/proxy</span><span class="w">
</span><span class="w">  </span>- <span class="l">services</span><span class="w">
</span><span class="w">  </span>- <span class="l">endpoints</span><span class="w">
</span><span class="w">  </span>- <span class="l">pods</span><span class="w">
</span><span class="w">  </span><span class="nt">verbs</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;get&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;list&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;watch&#34;</span><span class="p">]</span><span class="w">
</span><span class="w"></span>- <span class="nt">apiGroups</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">extensions</span><span class="w">
</span><span class="w">  </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">ingresses</span><span class="w">
</span><span class="w">  </span><span class="nt">verbs</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;get&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;list&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;watch&#34;</span><span class="p">]</span><span class="w">
</span><span class="w"></span>- <span class="nt">nonResourceURLs</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;/metrics&#34;</span><span class="p">]</span><span class="w">
</span><span class="w">  </span><span class="nt">verbs</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;get&#34;</span><span class="p">]</span><span class="w">
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1beta1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRoleBinding</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus</span><span class="w">
</span><span class="w"></span><span class="nt">roleRef</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">apiGroup</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io</span><span class="w">
</span><span class="w">  </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRole</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus</span><span class="w">
</span><span class="w"></span><span class="nt">subjects</span><span class="p">:</span><span class="w">
</span><span class="w"></span>- <span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ServiceAccount</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">monitoring</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>This will give access to monitor the following resources: nodes, nodes/proxy, services, endpoints and pods. The action are get, list, watch. No modifications.</p>
<p>We&rsquo;ll also allow Prometheus to watch ingresses for data traffic and allow it to do get requests to non-resource endpoint <code>/metrics</code>.</p>
<h2 id="deployment-1">Deployment</h2>
<p>Now, the deployment is actually pretty easy.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">extensions/v1beta1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus-deployment</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">monitoring</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus-server</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus</span><span class="w">
</span><span class="w">          </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">prom/prometheus:v2.2.1</span><span class="w">
</span><span class="w">          </span><span class="nt">args</span><span class="p">:</span><span class="w">
</span><span class="w">            </span>- <span class="s2">&#34;--config.file=/etc/prometheus/prometheus.yml&#34;</span><span class="w">
</span><span class="w">            </span>- <span class="s2">&#34;--storage.tsdb.path=/prometheus/&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">            </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">9090</span><span class="w">
</span><span class="w">          </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus-config-volume</span><span class="w">
</span><span class="w">              </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/prometheus/</span><span class="w">
</span><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus-storage-volume</span><span class="w">
</span><span class="w">              </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/prometheus/</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus-config-volume</span><span class="w">
</span><span class="w">          </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">defaultMode</span><span class="p">:</span><span class="w"> </span><span class="m">420</span><span class="w">
</span><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus-server-conf</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus-storage-volume</span><span class="w">
</span><span class="w">          </span><span class="nt">emptyDir</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>The two interesting things here are the two arguments. The config file, which we include through the <code>configMap</code> and the storage. Which I&rsquo;m not bind mounting.</p>
<h2 id="service-1">Service</h2>
<p>Let&rsquo;s expose Prometheus. Now, this may come as a surprise if you don&rsquo;t know anything about Prometheus, but this is an in cluster monitoring tool. It&rsquo;s usually not supposed to be accessed directly, but through tools like Graphana or used by tools like Alerting or traefik as a reverse proxy. As such, Prometheus does not support authentication or authorization or user management of any kind. That is usually taken care of by a reverse proxy or other means written about <a href="https://prometheus.io/docs/operating/security/#authentication-authorization-and-encryption">here</a> and <a href="https://prometheus.io/docs/guides/basic-auth/">here</a>.</p>
<p>As such, we can do a number of things. We can expose it as a NodePort service for example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus-service</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">monitoring</span><span class="w">
</span><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">prometheus.io/scrape</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;true&#39;</span><span class="w">
</span><span class="w">      </span><span class="nt">prometheus.io/port</span><span class="p">:</span><span class="w">   </span><span class="s1">&#39;9090&#39;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus-server</span><span class="w">
</span><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">NodePort</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span><span class="w">      </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">9090</span><span class="w">
</span><span class="w">      </span><span class="nt">nodePort</span><span class="p">:</span><span class="w"> </span><span class="m">30000</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Or we just port forward the pod like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">k port-forward pods/prometheus-deployment-6bf45557bd-qc6t6 9090:9090 -n monitoring
</code></pre></td></tr></table>
</div>
</div><p>And access it by simply opening the url: http://127.0.0.1:9090.</p>
<h2 id="prometheus-1">Prometheus</h2>
<p>Once you open it, you should see something like this, after running a small query:</p>
<p><img src="/img/hosting/prometheus.png" alt="prometheus.png"></p>
<h2 id="adding-in-resources-to-monitor">Adding in Resources to monitor</h2>
<p>In order to add a resource to monitor simply insert these annotations:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">prometheus.io/scrape</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;true&#39;</span><span class="w">
</span><span class="w">      </span><span class="nt">prometheus.io/port</span><span class="p">:</span><span class="w">   </span><span class="s1">&#39;9090&#39;</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Done.</p>
<h1 id="bonus-round----graphana">Bonus Round &ndash; Graphana</h1>
<p>We deployed Athens and Prometheus to monitor our cluster. We don&rsquo;t have anything before Prometheus that would be fancy, but installing Graphana is actually pretty easy. You can follow the instructions <a href="https://prometheus.io/docs/visualization/grafana/">here</a>.</p>
<p>A very easy way of looking at some nice metrics without worrying about anything like users and such, is running a Graphana instance in docker on your local machine with:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">docker run -d -p 3000:3000 grafana/grafana
</code></pre></td></tr></table>
</div>
</div><p>&hellip; and while you are forwarding the Prometheus end-point you navigate to your Graphana instance by opening <code>127.0.0.1:3000</code> and install a Prometheus data-point like this:</p>
<p><img src="/img/hosting/graphana_config.png" alt="graphana config"></p>
<p>After that navigate to a new dashboard and select a simple PromQL metric to see if it&rsquo;s working. You should see something like this:</p>
<p><img src="/img/hosting/graphana.png" alt="graphana"></p>
<p>Now you can create a new dashboard add a PVC to our Prometheus instance and enjoy all the metrics you can store!</p>
<h1 id="conclusion">Conclusion</h1>
<p>And this is it folks. Everything is installed and we can monitor things now. If you give Prometheus a PVC you can build some pretty awesome time series graphs too and see how your cluster behaves over time.</p>
<p>Thank you for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Summary of Practical Go workshop from Dave Cheney</title>
      <link>https://skarlso.github.io/2019/10/10/practical-go-summary/</link>
      <pubDate>Thu, 10 Oct 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/10/10/practical-go-summary/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>So there is <a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html">this</a> workshop from <a href="https://twitter.com/davecheney">Dave Cheney</a>.</p>
<p>And I thought I&rsquo;d draw a sort of summary of that workshop.</p>
<p><img src="/img/practical_go.png" alt="enjoy"></p>
<p>Right-click-&gt;Open Image for higher resolution.</p>
<p>Cheers,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How I killed my entire Kubernetes cluster</title>
      <link>https://skarlso.github.io/2019/10/01/killing-kubernetes-cluster/</link>
      <pubDate>Tue, 01 Oct 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/10/01/killing-kubernetes-cluster/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>One morning I woke up and tried to access my gitea just to find that it wasn&rsquo;t running.</p>
<p><img src="/img/kube_dead.png" alt="dead kube"></p>
<p>I checked my cluster and found that the whole thing was dead as meat. I quickly jumped in and ran <code>k get pods -A</code> to see what&rsquo;s
going on. None of my services worked.</p>
<p>What immediately struck my eye was a 100+ pods of my fork_updater cronjob. The fork_updater cronjob which runs once a month, looks
like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">batch/v1beta1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">CronJob</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fork-updater</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">fork-updater</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">schedule</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;* * 1 * *&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">jobTemplate</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fork-updater-ssh-key</span><span class="w">
</span><span class="w">            </span><span class="nt">secret</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">fork-updater-ssh-key</span><span class="w">
</span><span class="w">              </span><span class="nt">defaultMode</span><span class="p">:</span><span class="w"> </span><span class="m">256</span><span class="w"> </span><span class="c"># yaml spec does not support octal mode</span><span class="w">
</span><span class="w">          </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fork-updater</span><span class="w">
</span><span class="w">            </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent</span><span class="w">
</span><span class="w">            </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">skarlso/repo-updater:1.0.4</span><span class="w">
</span><span class="w">            </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">              </span>- <span class="nt">name</span><span class="p">:</span><span class="w">  </span><span class="l">GIT_TOKEN</span><span class="w">
</span><span class="w">                </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">                  </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                    </span><span class="nt">name</span><span class="p">:</span><span class="w">  </span><span class="l">fork-updater-secret</span><span class="w">
</span><span class="w">                    </span><span class="nt">key</span><span class="p">:</span><span class="w">  </span><span class="l">GIT_TOKEN</span><span class="w">
</span><span class="w">            </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fork-updater-ssh-key</span><span class="w">
</span><span class="w">              </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/etc/secret&#34;</span><span class="w">
</span><span class="w">              </span><span class="nt">readOnly</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">          </span><span class="nt">restartPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">OnFailure</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Inherently there is nothing wrong with this at first glance. But on a second glance, the problem is <code>restartPolicy: Always</code>.
For whatever the reason, the cronjob died when it started up. The restart policy then&hellip; restarted the cronjob, which failed again
really fast. Then it scheduled a new one and a new one and a new one&hellip; and I had 100+ containers pending and running and
creating.</p>
<p>At that point the cluster was basically DDOSd into oblivion. Once the other resources started to die ( since this was a private
cluster and I didn&rsquo;t bother to set up restrictions on resources ) the cronjob hogged even more and it basically blocked everything
else from being able to run. It overwhelmed the scheduler.</p>
<p>Lovevly that.</p>
<p>This is how you could potentionally kill a cluster which doesn&rsquo;t have any resource limits and restrictions set up.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
  </channel>
</rss>