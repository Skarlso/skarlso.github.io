<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/blog/</link>
    <description>Recent content in Blog on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Wed, 21 Apr 2021 01:01:00 +0100</lastBuildDate><atom:link href="https://skarlso.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reader&#39;s Digest 2021-04</title>
      <link>https://skarlso.github.io/2021/04/21/readers-digest/</link>
      <pubDate>Wed, 21 Apr 2021 01:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2021/04/21/readers-digest/</guid>
      <description>Reader&amp;rsquo;s Digest I thought it would a cool idea if I kept a summary of the things I&amp;rsquo;ve read or listened to on a monthly basis. Here is April of 2021 so far. Enjoy.
Invincible After seeing it air on Amazon Prime, I had to go and read the comic. It&amp;rsquo;s quite a lot, but I assure you it&amp;rsquo;s worth it. Some spoiler alerts&amp;hellip;
Okay, so we follow this guy, Mark Grayson.</description>
    </item>
    
    <item>
      <title>Reader&#39;s Digest 2021-03</title>
      <link>https://skarlso.github.io/2021/03/23/readers-digest/</link>
      <pubDate>Tue, 23 Mar 2021 01:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2021/03/23/readers-digest/</guid>
      <description>Reader&amp;rsquo;s Digest I thought it would a cool idea if I kept a summary of the things I&amp;rsquo;ve read or listened to on a monthly basis. Here is March of 2021 so far. Enjoy.
The Aurora Database paper The paper about Aurora database from AWS can be found here: Paper. It details the design decision taken to support a highly available, fault tolerant, fast replicating database. They take the following approach&amp;hellip; They modified mysql database such as that they only send around the redo log and the redo log is enough to recover / replicate in order to achieve write and read consistency.</description>
    </item>
    
    <item>
      <title>Reader&#39;s Digest 2021-01</title>
      <link>https://skarlso.github.io/2021/02/01/readers-digest/</link>
      <pubDate>Mon, 01 Feb 2021 01:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2021/02/01/readers-digest/</guid>
      <description>Reader&amp;rsquo;s Digest I thought it would a cool idea if I kept a summary of the things I&amp;rsquo;ve read or listened to on a monthly basis. Here is January of 2021 so far. Enjoy.
All systems red - Murderbot This book is SHORT. It&amp;rsquo;s little over 3 hours of listening time. I&amp;rsquo;m listening at 1.30 so it&amp;rsquo;s just short of 2 hours. But it&amp;rsquo;s entertaining. The murderbot series is following a rouge security bot which hacked its own governor module and is self aware and free.</description>
    </item>
    
    <item>
      <title>How to deploy a Go (Golang) backend with a React frontend separately on Kubernetes - Part One</title>
      <link>https://skarlso.github.io/2020/07/23/kubernetes-deploy-golang-react-apps-separately-part1/</link>
      <pubDate>Thu, 23 Jul 2020 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2020/07/23/kubernetes-deploy-golang-react-apps-separately-part1/</guid>
      <description>Intro Welcome. This is a longer post about how to deploy a Go backend with a React frontend on Kubernetes as separate entities. Instead of the usual compiled together single binary Go application, we are going to separate the two. Why? Because usually a React frontend is just a &amp;ldquo;static&amp;rdquo; SPA app with very little requirements in terms of resources, while the Go backend does most of the leg work, requiring a lot more resources.</description>
    </item>
    
    <item>
      <title>How to do a good code review</title>
      <link>https://skarlso.github.io/2020/05/11/good-code-reviews/</link>
      <pubDate>Mon, 11 May 2020 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2020/05/11/good-code-reviews/</guid>
      <description>Intro Hi folks.
This time, I would like to talk a little bit about code reviews.
How do you do code reviews? Don&amp;rsquo;t hesitate to share it in the comments.
How do I do code reviews? Well read on if you would like to know.
The Top Down approach If I&amp;rsquo;m dealing with a small code change, a couple of lines here and there in the odd file first, I&amp;rsquo;ll try to understand why the review is there?</description>
    </item>
    
    <item>
      <title>How to Make SPA refresh work with a Go backend</title>
      <link>https://skarlso.github.io/2020/02/17/making-spa-refresh-work-with-go-backend/</link>
      <pubDate>Mon, 17 Feb 2020 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2020/02/17/making-spa-refresh-work-with-go-backend/</guid>
      <description>Intro Hi folks.
Today I would like to share a quick &amp;ldquo;fix&amp;rdquo; for a problem I&amp;rsquo;ve seen popping up here and there.
That is, if you have a react frontend which is a SPA app but you still want refresh to work. What do I mean by that? Consider the following&amp;hellip;
The problem You have a SPA app with a react router which navigates the user around. The app calls to a backend api which serves content of some kind.</description>
    </item>
    
    <item>
      <title>Using a Kubernetes based Cluster for Various Services with auto HTTPS - Part 2</title>
      <link>https://skarlso.github.io/2019/10/15/kubernetes-cluster-part2/</link>
      <pubDate>Tue, 15 Oct 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/10/15/kubernetes-cluster-part2/</guid>
      <description>Intro Hi folks.
This is a continuation of the previous post about my Kubernetes infrastructure located here. The two remaining points are to deploy Athens Go proxy and setting up monitoring.
Athens Let&amp;rsquo;s start with Athens.
First of all if you are a helm user, Athens has an awesome set of helm charts which you can use to deploy it in your cluster. Located here.
I prefer to deploy my own config files, but that&amp;rsquo;s me.</description>
    </item>
    
    <item>
      <title>Summary of Practical Go workshop from Dave Cheney</title>
      <link>https://skarlso.github.io/2019/10/10/practical-go-summary/</link>
      <pubDate>Thu, 10 Oct 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/10/10/practical-go-summary/</guid>
      <description>Intro Hi folks.
So there is this workshop from Dave Cheney.
And I thought I&amp;rsquo;d draw a sort of summary of that workshop.
Right-click-&amp;gt;Open Image for higher resolution.
Cheers, Gergely.</description>
    </item>
    
    <item>
      <title>How I killed my entire Kubernetes cluster</title>
      <link>https://skarlso.github.io/2019/10/01/killing-kubernetes-cluster/</link>
      <pubDate>Tue, 01 Oct 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/10/01/killing-kubernetes-cluster/</guid>
      <description>Intro One morning I woke up and tried to access my gitea just to find that it wasn&amp;rsquo;t running.
I checked my cluster and found that the whole thing was dead as meat. I quickly jumped in and ran k get pods -A to see what&amp;rsquo;s going on. None of my services worked.
What immediately struck my eye was a 100+ pods of my fork_updater cronjob. The fork_updater cronjob which runs once a month, looks like this:</description>
    </item>
    
    <item>
      <title>Using a Kubernetes based Cluster for Various Services with auto HTTPS</title>
      <link>https://skarlso.github.io/2019/09/21/kubernetes-cluster/</link>
      <pubDate>Sat, 21 Sep 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/09/21/kubernetes-cluster/</guid>
      <description>Intro Hi folks.
Today, I would like to show you how my infrastructure is deployed and managed. Spoiler alert, I&amp;rsquo;m using Kubernetes to do that.
I know&amp;hellip; What a twist!
Let&amp;rsquo;s get to it.
What What services am I running exactly? Here is a list I&amp;rsquo;m running at the time of this writing:
 Athens Go Proxy Gitea The Lounge (IRC bouncer) Two CronJobs  Fork Updater IDLE RPG online checker   My WebSite (gergelybrautigam.</description>
    </item>
    
    <item>
      <title>Updated Face-recog architecture drawing</title>
      <link>https://skarlso.github.io/2019/09/19/updated-face-recog-drawing/</link>
      <pubDate>Thu, 19 Sep 2019 13:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/09/19/updated-face-recog-drawing/</guid>
      <description>I had a lot of fun using Procreate to re-draw the architecture image I&amp;rsquo;ve drawn for my distribute face recognition application detailed in this post Distributed Face-Recognition App.
Without much fanfare, here is the drawing:
Thanks, Gergely.</description>
    </item>
    
    <item>
      <title>Efferent and Afferent metrics in Go</title>
      <link>https://skarlso.github.io/2019/04/21/efferent-and-afferent-metrics-in-go/</link>
      <pubDate>Sun, 21 Apr 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/04/21/efferent-and-afferent-metrics-in-go/</guid>
      <description>Intro Hi folks!
Today I would like to write about a metric that I read in a book called Clean Architecture from Robert Cecil Martin ( Uncle Bob ).
Abstract The metrics I mean are Efferent and Afferent coupling in packages. So you, dear reader, don&amp;rsquo;t have to navigate away from this page, here are the descriptions pasted in:
  Afferent couplings (Ca): The number of classes in other packages that depend upon classes within the package is an indicator of the package&amp;rsquo;s responsibility.</description>
    </item>
    
    <item>
      <title>Living with a new Parser for a year</title>
      <link>https://skarlso.github.io/2019/04/12/living-with-a-parser/</link>
      <pubDate>Fri, 12 Apr 2019 08:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/04/12/living-with-a-parser/</guid>
      <description>Hi folks!
Today’s post is a retrospective. I would like to gather some thoughts about living with the new parser that I wrote for JsonPath.
After a little over a year, some interesting problems surfaced that I thought I’d share for people who also would like to endeavor on this path. Let’s begin.
Previously About, two years ago, I took over managing / fixing / improving this ruby gem: Json Parser.</description>
    </item>
    
    <item>
      <title>Deploy a Hugo Blog Github Actions</title>
      <link>https://skarlso.github.io/2019/03/19/deploy-hugo-blog-github-actions/</link>
      <pubDate>Tue, 19 Mar 2019 22:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/03/19/deploy-hugo-blog-github-actions/</guid>
      <description>Intro Hi folks.
Today I thought I show you how you can use Github Actions to deploy a hugo based blog like this one.
Let&amp;rsquo;s dive in.
Actions What are actions? If you read the above linked document they are basically steps performed in containers based on some events that happened with your repository. Events can be such as pushing, creating a PR or creating/closing an issue etc.
We need an even on a push.</description>
    </item>
    
    <item>
      <title>Cronohub: Archive from anywhere to anywhere</title>
      <link>https://skarlso.github.io/2019/03/19/cronohub/</link>
      <pubDate>Tue, 19 Mar 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/03/19/cronohub/</guid>
      <description>Intro Good afternoon folks.
Today, I would like to talk a little bit about Cronohub. It&amp;rsquo;s a Python application which you can use to archive anything from anywhere to anywhere. It uses plugins to archive this versatility.
Let me show you some of its features.
Main Usage Cronohub is a python application which uses the power and ease of usage of Python to give the user a framework. This Framework can then be used to implement concrete functionality in the form of plugins.</description>
    </item>
    
    <item>
      <title>Deploy a Hugo Blog with Travis on Git Push</title>
      <link>https://skarlso.github.io/2019/03/18/hugo-blog-with-travis-deployment/</link>
      <pubDate>Mon, 18 Mar 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/03/18/hugo-blog-with-travis-deployment/</guid>
      <description>Intro Hi folks.
I&amp;rsquo;ve been using the Hugo build for wercker for a long time now. Recent problems occurred though where I did not understand at first what the problem was. It was quite difficult to debug since I did not have too much insight on the wercker build itself. Turned out that I deleted the GITHUB token that the process was using. However, the error message was telling me that a function failed to load some other function.</description>
    </item>
    
    <item>
      <title>Go SSH with Host Key Verification</title>
      <link>https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/</link>
      <pubDate>Sun, 17 Feb 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/</guid>
      <description>Hi folks.
Following a long search and reading lots of debates and possibilities of doing SSH within Go, I was shocked to see that not a great many tools and people use SSH with host key verification. What I usually see is this:
HostKeyCallback: ssh.InsecureIgnoreHostKey() This is terrible. Now, I realise that doing HostKeyVerification can be tedious, but don&amp;rsquo;t fear. It&amp;rsquo;s actually easy now that the Go team provided the knownhosts subpackage in their crypto SSH package located here: KnownHosts.</description>
    </item>
    
    <item>
      <title>Extensive tutorial on go-plugin.</title>
      <link>https://skarlso.github.io/2018/10/29/go-plugin-tutorial/</link>
      <pubDate>Mon, 29 Oct 2018 07:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/10/29/go-plugin-tutorial/</guid>
      <description>Intro If you don&amp;rsquo;t know what go-plugin is, don&amp;rsquo;t worry, here is a small introduction on the subject matter:
Back in the old days when Go didn&amp;rsquo;t have the plugin package, HashiCorp was desperately looking for a way to use plugins.
In the old days, Lua plus Go wasn&amp;rsquo;t really a thing yet, and to be honest, nobody wants to write Lua ( joking!).
And thus Mitchell had this brilliant idea of using RPC over the local network to serve a local interface as something that could easily be implemented with any other language that supported RPC.</description>
    </item>
    
    <item>
      <title>Furnace with a new Plugin System</title>
      <link>https://skarlso.github.io/2018/09/17/furnace-plugin-update/</link>
      <pubDate>Mon, 17 Sep 2018 07:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/09/17/furnace-plugin-update/</guid>
      <description>Hi.
A quick update, but a very important and interesting one hopefully. Furnace just got a massive boost to its plugin system.
I&amp;rsquo;m using HashiCorp&amp;rsquo;s Go-Plugins system now to handle plugins. This means one of two things that are interesting to the plugin author.
One, plugins can be written in any language which is supported by Furnace and supports GRPC. Currently this means that plugins can be written in the following languages:</description>
    </item>
    
    <item>
      <title>TOTP generator with account handling for multiple tokens</title>
      <link>https://skarlso.github.io/2018/09/13/gotp/</link>
      <pubDate>Thu, 13 Sep 2018 08:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/09/13/gotp/</guid>
      <description>Hi.
Today, I would like to write about a little tool I put together in Rust.
It&amp;rsquo;s called gotp. I&amp;rsquo;m calling it gotp mainly because of crates.io. I published it there as well, you can find it under this link: crates.io/gotp.
The purpose is clear. It&amp;rsquo;s a totp generator I wrote a while ago in C++ but now it&amp;rsquo;s in rust. It can generate a token and save it into an account file that is AES encrypted.</description>
    </item>
    
  </channel>
</rss>
