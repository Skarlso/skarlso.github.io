<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/blog/</link>
    <description>Recent content in Blogs on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Apr 2019 21:01:00 +0100</lastBuildDate>
    
	<atom:link href="https://skarlso.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Efferent and Afferent metrics in Go</title>
      <link>https://skarlso.github.io/2019/04/21/efferent-and-afferent-metrics-in-go/</link>
      <pubDate>Sun, 21 Apr 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/04/21/efferent-and-afferent-metrics-in-go/</guid>
      <description>Intro Hi folks!
Today I would like to write about a metric that I read in a book called Clean Architecture from Robert Cecil Martin ( Uncle Bob ).
Abstract The metrics I mean are Efferent and Afferent coupling in packages. So you, dear reader, don&amp;rsquo;t have to navigate away from this page, here are the descriptions pasted in:
 Afferent couplings (Ca): The number of classes in other packages that depend upon classes within the package is an indicator of the package&amp;rsquo;s responsibility.</description>
    </item>
    
    <item>
      <title>Living with a new Parser for a year</title>
      <link>https://skarlso.github.io/2019/04/12/living-with-a-parser/</link>
      <pubDate>Fri, 12 Apr 2019 08:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/04/12/living-with-a-parser/</guid>
      <description>Hi folks!
Today’s post is a retrospective. I would like to gather some thoughts about living with the new parser that I wrote for JsonPath.
After a little over a year, some interesting problems surfaced that I thought I’d share for people who also would like to endeavor on this path. Let’s begin.
Previously About, two years ago, I took over managing / fixing / improving this ruby gem: Json Parser.</description>
    </item>
    
    <item>
      <title>Deploy a Hugo Blog Github Actions</title>
      <link>https://skarlso.github.io/2019/03/19/deploy-hugo-blog-github-actions/</link>
      <pubDate>Tue, 19 Mar 2019 22:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/03/19/deploy-hugo-blog-github-actions/</guid>
      <description>Intro Hi folks.
Today I thought I show you how you can use Github Actions to deploy a hugo based blog like this one.
Let&amp;rsquo;s dive in.
Actions What are actions? If you read the above linked document they are basically steps performed in containers based on some events that happened with your repository. Events can be such as pushing, creating a PR or creating/closing an issue etc.
We need an even on a push.</description>
    </item>
    
    <item>
      <title>Cronohub: Archive from anywhere to anywhere</title>
      <link>https://skarlso.github.io/2019/03/19/cronohub/</link>
      <pubDate>Tue, 19 Mar 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/03/19/cronohub/</guid>
      <description>Intro Good afternoon folks.
Today, I would like to talk a little bit about Cronohub. It&amp;rsquo;s a Python application which you can use to archive anything from anywhere to anywhere. It uses plugins to archive this versatility.
Let me show you some of its features.
Main Usage Cronohub is a python application which uses the power and ease of usage of Python to give the user a framework. This Framework can then be used to implement concrete functionality in the form of plugins.</description>
    </item>
    
    <item>
      <title>Deploy a Hugo Blog with Travis on Git Push</title>
      <link>https://skarlso.github.io/2019/03/18/hugo-blog-with-travis-deployment/</link>
      <pubDate>Mon, 18 Mar 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/03/18/hugo-blog-with-travis-deployment/</guid>
      <description>Intro Hi folks.
I&amp;rsquo;ve been using the Hugo build for wercker for a long time now. Recent problems occurred though where I did not understand at first what the problem was. It was quite difficult to debug since I did not have too much insight on the wercker build itself. Turned out that I deleted the GITHUB token that the process was using. However, the error message was telling me that a function failed to load some other function.</description>
    </item>
    
    <item>
      <title>Go SSH with Host Key Verification</title>
      <link>https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/</link>
      <pubDate>Sun, 17 Feb 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/</guid>
      <description>Hi folks.
Following a long search and reading lots of debates and possibilities of doing SSH within Go, I was shocked to see that not a great many tools and people use SSH with host key verification. What I usually see is this:
HostKeyCallback: ssh.InsecureIgnoreHostKey() This is terrible. Now, I realise that doing HostKeyVerification can be tedious, but don&amp;rsquo;t fear. It&amp;rsquo;s actually easy now that the Go team provided the knownhosts subpackage in their crypto SSH package located here: KnownHosts.</description>
    </item>
    
    <item>
      <title>Extensive tutorial on go-plugin.</title>
      <link>https://skarlso.github.io/2018/10/29/go-plugin-tutorial/</link>
      <pubDate>Mon, 29 Oct 2018 07:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/10/29/go-plugin-tutorial/</guid>
      <description>Intro If you don&amp;rsquo;t know what go-plugin is, don&amp;rsquo;t worry, here is a small introduction on the subject matter:
Back in the old days when Go didn&amp;rsquo;t have the plugin package, HashiCorp was desperately looking for a way to use plugins.
In the old days, Lua plus Go wasn&amp;rsquo;t really a thing yet, and to be honest, nobody wants to write Lua ( joking!).
And thus Mitchell had this brilliant idea of using RPC over the local network to serve a local interface as something that could easily be implemented with any other language that supported RPC.</description>
    </item>
    
    <item>
      <title>Furnace with a new Plugin System</title>
      <link>https://skarlso.github.io/2018/09/17/furnace-plugin-update/</link>
      <pubDate>Mon, 17 Sep 2018 07:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/09/17/furnace-plugin-update/</guid>
      <description>Hi.
A quick update, but a very important and interesting one hopefully. Furnace just got a massive boost to its plugin system.
I&amp;rsquo;m using HashiCorp&amp;rsquo;s Go-Plugins system now to handle plugins. This means one of two things that are interesting to the plugin author.
One, plugins can be written in any language which is supported by Furnace and supports GRPC. Currently this means that plugins can be written in the following languages:</description>
    </item>
    
    <item>
      <title>TOTP generator with account handling for multiple tokens</title>
      <link>https://skarlso.github.io/2018/09/13/gotp/</link>
      <pubDate>Thu, 13 Sep 2018 08:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/09/13/gotp/</guid>
      <description>Hi.
Today, I would like to write about a little tool I put together in Rust.
It&amp;rsquo;s called gotp. I&amp;rsquo;m calling it gotp mainly because of crates.io. I published it there as well, you can find it under this link: crates.io/gotp.
The purpose is clear. It&amp;rsquo;s a totp generator I wrote a while ago in C++ but now it&amp;rsquo;s in rust. It can generate a token and save it into an account file that is AES encrypted.</description>
    </item>
    
    <item>
      <title>Keep your git forks updated all the time</title>
      <link>https://skarlso.github.io/2018/06/08/fork-updater/</link>
      <pubDate>Fri, 08 Jun 2018 08:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/06/08/fork-updater/</guid>
      <description>Hi folks.
Today&amp;rsquo;s is a quick tip for keeping your forks updated.
If you are like me, and have at least a 100 forks in your repository because: * You would like to contribute at some point * Save it for yourself because you are afraid that it disappears * Would like to make modifications for your own benefit * Whatever the reason
&amp;hellip;then you probably have a lot of trouble keeping them updated and making sure you always see the latest change.</description>
    </item>
    
  </channel>
</rss>