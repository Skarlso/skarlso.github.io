<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Ramblings of a cloud engineer</title>
		<link>https://skarlso.github.io/posts/</link>
		<description>Recent content in Posts on Ramblings of a cloud engineer</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<lastBuildDate>Thu, 15 Mar 2018 23:01:00 +0100</lastBuildDate>
		<atom:link href="https://skarlso.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Kubernetes distributed application deployment with sample Face Recognition App</title>
			<link>https://skarlso.github.io/2018/03/15/kubernetes-distributed-application/</link>
			<pubDate>Thu, 15 Mar 2018 23:01:00 +0100</pubDate>
			
			<guid>https://skarlso.github.io/2018/03/15/kubernetes-distributed-application/</guid>
			<description>Intro Alright folks. Settle in and get comfortable. This is going to be a long, but hopefully, fun ride.
I&amp;rsquo;m going to deploy a distributed application with Kubernetes. I attempted to create an application that I thought resembled a real world app. Obviously I had to cut some corners due to time and energy constraints.
My focus will be on Kubernetes and deployment.
Shall we delve right in?
The Application TL;DR The application itself consists of six parts.</description>
			<content type="html"><![CDATA[

<h1 id="intro">Intro</h1>

<p>Alright folks. Settle in and get comfortable. This is going to be a long, but hopefully, fun ride.</p>

<p>I&rsquo;m going to deploy a distributed application with <a href="https://kubernetes.io/">Kubernetes</a>. I attempted to create an application that I thought resembled a real world app. Obviously I had to cut some corners due to time and energy constraints.</p>

<p>My focus will be on Kubernetes and deployment.</p>

<p>Shall we delve right in?</p>

<h1 id="the-application">The Application</h1>

<h2 id="tl-dr">TL;DR</h2>

<p><img src="/img/kube_overview.png" alt="kube overview" /></p>

<p>The application itself consists of six parts. The repository can be found here: <a href="https://github.com/Skarlso/kube-cluster-sample">Kube Cluster Sample</a>.</p>

<p>It’s a face recognition service which identifies images of people, comparing them to known individuals. A simple frontend displays a table of these images whom they belong to. This happens by sending a request to a <a href="https://github.com/Skarlso/kube-cluster-sample/tree/master/receiver">receiver</a>. The request contains a path to an image. This image can sit on an NFS somewhere. The receiver stores this path in the DB (MySQL) and sends a processing request to a queue. The queue uses: <a href="http://nsq.io/">NSQ</a>. The request contains the ID of the saved image.</p>

<p>An <a href="https://github.com/Skarlso/kube-cluster-sample/tree/master/image_processor">Image Processing</a> service is constantly monitoring the queue for jobs to do. The processing consists of the following steps: taking the ID; loading the image; and finally,  sending the image to a <a href="https://github.com/Skarlso/kube-cluster-sample/tree/master/face_recognition">face recognition</a> backend written in Python via <a href="https://grpc.io/">gRPC</a>. If the identification is successful, the backend will return the name of the image corresponding to that person. The image_processor then updates the image’s record with the person’s ID and marks the image as “processed successfully”. If identification is unsuccessful, the image will be left as “pending”. If there was a failure during identification, the image will be flagged as “failed”.</p>

<p>Failed images can be retried  with a cron job, for example:</p>

<p>So how does this all work? Let&rsquo;s check it out .</p>

<h2 id="receiver">Receiver</h2>

<p>The receiver service is the starting point of the process. It&rsquo;s an API which receives a request in the following format:</p>

<pre><code class="language-bash">curl -d '{&quot;path&quot;:&quot;/unknown_images/unknown0001.jpg&quot;}' http://127.0.0.1:8000/image/post
</code></pre>

<p>In this instance, the receiver stores the path using a shared database cluster. The entity will then receive an ID from the database service. This application is based on the model where unique identification for Entity Objects is provided by the persistence layer. Once the ID is procured, the receiver will send a message to NSQ. At this point in the process, the receiver&rsquo;s job is done.</p>

<h2 id="image-processor">Image Processor</h2>

<p>Here is where the excitement begins. When Image Processor first runs it creates two Go routines. These are&hellip;</p>

<h3 id="consume">Consume</h3>

<p>This is an NSQ consumer. It has three integral jobs. Firstly, it listens for messages on the queue. Secondly, when there is a message, it appends the received ID to a thread safe slice of IDs that the second routine processes. And lastly, it signals the second routine that there is work to be do. It does this through <a href="https://golang.org/pkg/sync/#Cond">sync.Condition</a>.</p>

<h3 id="processimages">ProcessImages</h3>

<p>This routine processes a slice of IDs until the slice is drained completely. Once the slice is drained, the routine suspends instead of sleep-waiting on a channel. The processing of a single ID can be seen in the following linear steps:</p>

<ul>
<li>Establish a gRPC connection to the Face Recognition service (explained under Face Recognition)</li>
<li>Retrieve the image record from the database</li>
<li>Setup two functions for the <a href="#circuit-breaker">Circuit Breaker</a>

<ul>
<li>Function 1: The main function which runs  the RPC method call</li>
<li>Function 2: A health check for the Ping of the circuit breaker</li>
</ul></li>
<li>Call Function 1 which sends the path of the image to the face recognition service. This path should be accessible by the face recognition service. Preferably something shared like an NFS</li>
<li>If this call fails, update the image record as FAILED PROCESSING</li>
<li>If it succeeds, an image name should come back which corresponds to a person in the db. It runs a joined SQL query which gets the corresponding person&rsquo;s ID</li>
<li>Update the Image record in the database with PROCESSED status and the ID of the person that image was identified as</li>
</ul>

<p>This service can be replicated. In other words, more than one can run at the same time.</p>

<h3 id="circuit-breaker">Circuit Breaker</h3>

<p>A  system in which replicating resources requires little to no effort, there still can be cases where, for example, the network goes down, or there are communication problems of any kind between two services. I like to implement a little circuit breaker around the gRPC calls for fun.</p>

<p>This is how it works:</p>

<p><img src="/img/kube_circuit1.png" alt="kube circuit" /></p>

<p>As you can see, once there are 5 unsuccessful calls to the service, the circuit breaker activates, not allowing any more calls to go through. After a configured amount of time, it will send a Ping call to the service to see if it&rsquo;s back up. If that still errors out, it will increase the timeout. If not, it opens the circuit, allowing traffic to proceed.</p>

<h2 id="front-end">Front-End</h2>

<p>This is only a simple table view with Go&rsquo;s own html/template used to render a list of images.</p>

<h2 id="face-recognition">Face Recognition</h2>

<p>Here is where the identification magic happens. I decided to make this a gRPC based service for the  sole purpose of its flexibility. I started writing it in Go but decided that a Python implementation would be much sorter. In fact, excluding the gRPC code, the recognition part is approximately 7 lines of Python code. I&rsquo;m using this fantastic library which contains all the C bindings to OpenCV. <a href="https://github.com/ageitgey/face_recognition">Face Recognition</a>. Having an API contract here means that I can change the implementation anytime as long as it adheres to the contract.</p>

<p>Please note that there exist a great Go library OpenCV. I was about to use it but they had yet to write the C bindings for that part of OpenCV. It&rsquo;s called <a href="https://gocv.io/">GoCV</a>. Check them out! They have some pretty amazing things, like real-time camera feed processing that only needs a couple of lines of code.</p>

<p>The python library is simple in nature. Have a set of images of people you know. I have a folder with a couple of images named, <code>hannibal_1.jpg, hannibal_2.jpg, gergely_1.jpg, john_doe.jpg</code>. In the database I have two tables named, <code>person, person_images</code>. They look like this:</p>

<pre><code class="language-bash">+----+----------+
| id | name     |
+----+----------+
|  1 | Gergely  |
|  2 | John Doe |
|  3 | Hannibal |
+----+----------+
+----+----------------+-----------+
| id | image_name     | person_id |
+----+----------------+-----------+
|  1 | hannibal_1.jpg |         3 |
|  2 | hannibal_2.jpg |         3 |
+----+----------------+-----------+
</code></pre>

<p>The face recognition library returns the name of the image from the known people which matches the person on the unknown image. After that, a simple joined query -like this- will return the person in question.</p>

<pre><code class="language-sql">select person.name, person.id from person inner join person_images as pi on person.id = pi.person_id where image_name = 'hannibal_2.jpg';
</code></pre>

<p>The gRPC call returns the ID of the person which is then used to update the image&rsquo;s ‘person` column.</p>

<h2 id="nsq">NSQ</h2>

<p>NSQ is a nice little Go based queue. It can be scaled and has a minimal footprint on the system. It also has a lookup service that consumers use to receive messages, and a daemon that senders use when sending messages.</p>

<p>NSQ&rsquo;s philosophy is that the daemon should run with the sender application. That way, the sender will send to the localhost only. But the daemon is connected to the lookup service, and that&rsquo;s how they achieve a global queue.</p>

<p>This means that there are as many NSQ daemons deployed as there are senders. Because the daemon has a minuscule resource requirement, it won&rsquo;t interfere with the requirements of the main application.</p>

<h2 id="configuration">Configuration</h2>

<p>In order to be as flexible as possible, as well as making use of Kubernetes&rsquo;s ConfigSet, I&rsquo;m using .env files in development to store configurations like the location of the database service, or NSQ&rsquo;s lookup address. In production- and that means the Kubernetes’s environment- I&rsquo;ll use environment properties.</p>

<h2 id="conclusion-for-the-application">Conclusion for the Application</h2>

<p>And that&rsquo;s all there is to the architecture of the application we are about to deploy. All of its components are changeable and coupled only through the database, a queue and gRPC. This is imperative when deploying a distributed application due to how updating mechanics work. I will cover that part in the Deployment section.</p>

<h1 id="deployment-with-kubernetes">Deployment with Kubernetes</h1>

<h2 id="basics">Basics</h2>

<p>What <strong>is</strong> Kubernetes?</p>

<p>I&rsquo;m going to cover some of the basics here. I won&rsquo;t go too much into detail-  that would require a whole book like this one: <a href="http://shop.oreilly.com/product/0636920043874.do">Kubernetes Up And Running</a>. Also, if you’re daring enough, you can have a look through this documentation: <a href="https://kubernetes.io/docs/">Kubernetes Documentation</a>.</p>

<p>Kubernetes is a containerized service and application manager. It scales easily, employs a swarm of containers, and most importantly, it&rsquo;s highly configurable via yaml based template files. People often compare Kubernetes to Docker swarm, but Kubernetes does way more than that! For example: it&rsquo;s container agnostic. You could use LXC with Kubernetes and it would work the same way as you using it with Docker. It provides a layer above managing a cluster of deployed services and applications. How? Let&rsquo;s take a quick look at the building blocks of Kubernetes.</p>

<p>In Kubernetes, you’ll describe a desired state of the application and Kubernetes will do what it can to reach that state. States could be something such as deployed; paused; replicated twice; and so on and so forth.</p>

<p>One of the basics of Kubernetes is that it uses Labels and Annotations for all of its components. Services, Deployments, ReplicaSets, DaemonSets, everything is labelled. Consider the following scenario. In order to identify what pod belongs to what application, a label is used called <code>app: myapp</code>. Let’s assume you have two containers of this application deployed; if you would remove the label <code>app</code> from one of the containers, Kubernetes would only detect one and thus would launch a new instance of <code>myapp</code>.</p>

<h3 id="kubernetes-cluster">Kubernetes Cluster</h3>

<p>For Kuberenetes to work, a Kubernetes cluster needs to be present. Setting that up might be a tad painful, but luckily, help is on hand. Minikube sets up a cluster for us locally with one Node. And AWS has a beta service running in the form of a Kubernetes cluster in which the only thing you need to do is request nodes and define your deployments. The Kubernetes cluster components are documented here: <a href="https://kubernetes.io/docs/concepts/overview/components/">Kubernetes Cluster Components</a>.</p>

<h3 id="nodes">Nodes</h3>

<p>A Node is a worker machine. It can be anything- from a vm to a physical machine- including all sorts of cloud provided vms.</p>

<h3 id="pods">Pods</h3>

<p>Pods are a logically grouped collection of containers, meaning one Pod can potentially house a multitude of containers. A Pod gets its own DNS and virtual IP address after it has been created so Kubernetes can load balancer traffic to it. You rarely need to deal with containers directly. Even when debugging, (like looking at logs), you usually invoke <code>kubectl logs deployment/your-app -f</code> instead of looking at a specific container. Although it is possible with <code>-c container_name</code>. The <code>-f</code> does a tail on the log.</p>

<h3 id="deployments">Deployments</h3>

<p>When creating any kind of resource in Kubernetes, it will use a Deployment in the background. A deployment describes a desired state of the current application. It&rsquo;s an object you can use to update Pods or a Service to be in a different state, do an update, or rollout new version of your app. You don&rsquo;t directly control a ReplicaSet, (as described later), but control the deployment object which creates and manages a ReplicaSet.</p>

<h3 id="services">Services</h3>

<p>By default a Pod will get an IP address. However, since Pods are a volatile thing in Kubernetes, you&rsquo;ll need something more permanent. A queue, mysql, or an internal API, a frontend; these need to be long running and behind a static, unchanging IP or preferably a DNS record.</p>

<p>For this purpose, Kubernetes has Services for which you can define modes of accessibility. Load Balanced, simple IP or internal DNS.</p>

<p>How does Kubernetes know if a service is running correctly? You can configure Health Checks and Availability Checks. A Health Check will check whether a container is running, but that doesn&rsquo;t mean that your service is running. For that, you have the availability check which pings a different endpoint in your application.</p>

<p>Since Services are pretty important, I recommend that you read up on them later here: <a href="https://kubernetes.io/docs/concepts/services-networking/service/">Services</a>. Advanced  warning though, this document is quite dense. Twenty four A4 pages of networking, services and discovery. It&rsquo;s also vital to decide whether you want to seriously employ Kubernetes in production.</p>

<h3 id="dns-service-discovery">DNS / Service Discovery</h3>

<p>If you create a service in the cluster, that service will get a DNS record in Kubernetes provided by special Kubernetes deployments called kube-proxy and kube-dns. These two provide service discover inside a cluster. If you have a mysql service running and set <code>clusterIP: none</code>, then everyone in the cluster can reach that service by pinging <code>mysql.default.svc.cluster.local</code>. Where:</p>

<ul>
<li><code>mysql</code> &ndash; is the name of the service</li>
<li><code>default</code> &ndash; is the namespace name</li>
<li><code>svc</code> &ndash; is services</li>
<li><code>cluster.local</code> &ndash; is a local cluster domain</li>
</ul>

<p>The domain can be changed via a custom definition. To access a service outside the cluster, a DNS provider has to be used, and Nginx (for example), to bind an IP address to a record. The public IP address of a service can be queried with the following commands:</p>

<ul>
<li>NodePort &ndash; <code>kubectl get -o jsonpath=&quot;{.spec.ports[0].nodePort}&quot; services mysql</code></li>
<li>LoadBalancer &ndash; <code>kubectl get -o jsonpath=&quot;{.spec.ports[0].LoadBalancer}&quot; services mysql</code></li>
</ul>

<h3 id="template-files">Template Files</h3>

<p>Like Docker Compose, TerraForm or other service management tools, Kubernetes also provides infrastructure describing templates. What that means is that you rarely need  to do anything by hand.</p>

<p>For example, consider the following yaml template which describes an nginx Deployment:</p>

<pre><code class="language-yaml">apiVersion: apps/v1
kind: Deployment #(1)
metadata: #(2)
  name: nginx-deployment
  labels: #(3)
    app: nginx
spec: #(4)
  replicas: 3 #(5)
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers: #(6)
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80
</code></pre>

<p>This is a simple deployment in which we do the following:</p>

<ul>
<li>(1) Define the type of the template with kind</li>
<li>(2) Add metadata that will identify this deployment and every resource that it would create with a label (3)</li>
<li>(4) Then comes the spec which describes the desired state

<ul>
<li>(5) For the nginx app, have 3 replicas</li>
<li>(6) This is the template definition for the containers that this Pod will contain</li>
<li>nginx named container</li>
<li>nginx:1.7.9 image (docker in this case)</li>
<li>exposed ports</li>
</ul></li>
</ul>

<h3 id="replicaset">ReplicaSet</h3>

<p>A ReplicaSet is a low level replication manager. It ensures that the correct number of replicates are running for a application. However, Deployments are at a higher level and should always manage ReplicaSets. You rarely need to use ReplicaSets directly unless you have a fringe case in which you want to control the specifics of replication.</p>

<h3 id="daemonset">DaemonSet</h3>

<p>Remember how I said Kubernetes is using Labels all the time? A DaemonSet is a controller that ensures that at daemonized application is always running on a node with a certain label.</p>

<p>For example: you want all the nodes labelled with <code>logger</code> or <code>mission_critical</code> to run an logger / auditing service daemon. Then you create a DaemonSet and give it a node selector called <code>logger</code> or <code>mission_critical</code>. Kubernetes will look for a node that has that label. Always ensure that it will have an instance of that daemon running on it. Thus everyone running on that node will have access to that daemon locally.</p>

<p>In case of my application, the NSQ daemon could be a DaemonSet. Make sure it&rsquo;s up on a node which has the receiver component running by labelling a node with <code>receiver</code> and specifying a DaemonSet with a <code>receiver</code> application selector.</p>

<p>The DaemonSet has all the benefits of the ReplicaSet. It&rsquo;s scalable and Kubernetes manages it; which means, all life cycle events are handled by Kube ensuring it never dies, and when it does,  it will be immediately replaced.</p>

<h3 id="scaling">Scaling</h3>

<p>It&rsquo;s trivial to scale in Kubernetes. The ReplicaSets take care of the number of instances of a Pod to run- as seen in the nginx deployment with the setting <code>replicas:3</code>. It&rsquo;s up to us to write our application in a way that allows Kubernetes to run multiple copies of it.</p>

<p>Of course the settings are vast. You can specify which replicates must run on what Nodes, or on various waiting times as to how long to wait for an instance to come up. You can read more on this subject here: <a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/">Horizontal Scaling</a> and here: <a href="https://kubernetes.io/docs/tutorials/kubernetes-basics/scale-interactive/">Interactive Scaling with Kubernetes</a> and of course the details of a <a href="https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/">ReplicaSet</a> which controls all the scaling made possible in Kubernetes.</p>

<h3 id="conclusion-for-kubernetes">Conclusion for Kubernetes</h3>

<p>It&rsquo;s a convenient tool to handle container orchestration. Its unit of work are Pods and it has a layered architecture. The top level layer is Deployments through which you handle all other resources. It&rsquo;s highly configurable. It provides an API for all calls you make, so potentially, instead of running <code>kubectl</code> you can also write your own logic to send information to the Kubernetes API.</p>

<p>It provides support for all major cloud providers natively by now and it&rsquo;s completely open source. Feel free to contribute! And check the code if you would like to have a deeper understanding on how it works: <a href="https://github.com/kubernetes/kubernetes">Kubernetes on Github</a>.</p>

<h2 id="minikube">Minikube</h2>

<p>I&rsquo;m going to use <a href="https://github.com/kubernetes/minikube/">Minikube</a>. Minikube is a local Kubernetes cluster simulator. It&rsquo;s not great in simulating multiple nodes though, but for starting out and local play without any costs, it&rsquo;s great. It uses a VM that can be fine tuned if necessary using VirtualBox and the likes.</p>

<p>All of the kube template files that I&rsquo;ll be using can be found here: <a href="https://github.com/Skarlso/kube-cluster-sample/tree/master/kube_files">Kube files</a>.</p>

<p><strong>NOTE</strong> If, later on, you would like to play with scaling but notice that the replicates are always in <code>Pending</code> state, remember that minikube employs a single node only. It might not allow multiple replicas on the same node, or just plainly ran out of resources to use. You can check available resources with the following command:</p>

<pre><code class="language-bash">kubectl get nodes -o yaml
</code></pre>

<h2 id="building-the-containers">Building the containers</h2>

<p>Kubernetes supports most of the containers out there. I&rsquo;m going to use Docker. For all the services I&rsquo;ve built, there is a Dockerfile included in the repository. I encourage you to study them. Most of them are simple. For the go services, I&rsquo;m using a multi stage build that has been  recently introduced. The Go services are Alpine Linux based. The Face Recognition service is Python. NSQ and MySQL are using their own containers.</p>

<h2 id="context">Context</h2>

<p>Kubernetes uses namespaces. If you don&rsquo;t specify any, it will use the <code>default</code> namespace. I&rsquo;m going to permanently set a context to avoid polluting the default namespace. You do that like this:</p>

<pre><code class="language-bash">❯ kubectl config set-context kube-face-cluster --namespace=face
Context &quot;kube-face-cluster&quot; created.
</code></pre>

<p>You have to also start using the context once it&rsquo;s created, like so:</p>

<pre><code class="language-bash">❯ kubectl config use-context kube-face-cluster
Switched to context &quot;kube-face-cluster&quot;.
</code></pre>

<p>After this, all <code>kubectl</code> commands will use the namespace <code>face</code>.</p>

<h2 id="deploying-the-application">Deploying the Application</h2>

<p>Overview of Pods and Services:</p>

<p><img src="/img/kube_deployed.png" alt="kube deployed" /></p>

<h3 id="mysql">MySQL</h3>

<p>The first Service I&rsquo;m going to deploy is my database.</p>

<p>I&rsquo;m using the Kubernetes example located here <a href="https://kubernetes.io/docs/tasks/run-application/run-single-instance-stateful-application/#deploy-mysql">Kube MySQL</a> which fits my needs. Please note that this file is using a plain password for MYSQL_PASSWORD. I&rsquo;m going to employ a vault as described here <a href="https://kubernetes.io/docs/concepts/configuration/secret/">Kubernetes Secrets</a>.</p>

<p>I&rsquo;ve created a secret locally as described in that document using a secret yaml:</p>

<pre><code class="language-yaml">apiVersion: v1
kind: Secret
metadata:
  name: kube-face-secret
type: Opaque
data:
  mysql_password: base64codehere
</code></pre>

<p>I created the  base64 code via the following command:</p>

<pre><code class="language-bash">echo -n &quot;ubersecurepassword&quot; | base64
</code></pre>

<p>And, this is what you&rsquo;ll see in my deployment yaml file:</p>

<pre><code class="language-yaml">...
- name: MYSQL_ROOT_PASSWORD
  valueFrom:
    secretKeyRef:
      name: kube-face-secret
      key: mysql_password
...
</code></pre>

<p>Another thing worth mentioning: It&rsquo;s using a volume to persist the database. The volume definition is as follows:</p>

<pre><code class="language-yaml">...
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
...
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
...
</code></pre>

<p><code>presistentVolumeClain</code> is key here. This tells Kubernetes that this resource requires a persistent volume. How it&rsquo;s provided is abstracted away from the user. You can be sure that Kubernetes will provide a volume that will always be there. It is similar to Pods. To read up on the details, check out this document: <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes">Kubernetes Persistent Volumes</a>.</p>

<p>Deploying the mysql Service is done with the following command:</p>

<pre><code class="language-bash">kubectl apply -f mysql.yaml
</code></pre>

<p><code>apply</code> vs <code>create</code>. In short, <code>apply</code> is considered a declarative object configuration command while <code>create</code> is imperative. What this means for now is that ‘create’ is usually for a one of tasks, like running something or creating a deployment. While, when using apply, the user doesn&rsquo;t define the action to be taken. That will be defined by Kubernetes based on the current status of the cluster. Thus, when there is no service called <code>mysql</code> and I&rsquo;m calling <code>apply -f mysql.yaml</code> it will create the service. When running again, Kubernetes won&rsquo;t do anything. But if I would run <code>create</code> again it will throw an error saying the service is already created.</p>

<p>For more information, check out the following docs: <a href="https://kubernetes.io/docs/concepts/overview/object-management-kubectl/overview/">Kubernetes Object Management</a>, <a href="https://kubernetes.io/docs/concepts/overview/object-management-kubectl/imperative-config/">Imperative Configuration</a>, <a href="https://kubernetes.io/docs/concepts/overview/object-management-kubectl/declarative-config/">Declarative Configuration</a>.</p>

<p>To see progress information, run:</p>

<pre><code class="language-bash"># Describes the whole process
kubectl describe deployment mysql
# Shows only the pod
kubectl get pods -l app=mysql
</code></pre>

<p>Output should be similar to this:</p>

<pre><code class="language-bash">...
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  &lt;none&gt;
NewReplicaSet:   mysql-55cd6b9f47 (1/1 replicas created)
...
</code></pre>

<p>Or in case of <code>get pods</code>:</p>

<pre><code class="language-bash">NAME                     READY     STATUS    RESTARTS   AGE
mysql-78dbbd9c49-k6sdv   1/1       Running   0          18s
</code></pre>

<p>To test the instance, run the following snippet:</p>

<pre><code class="language-bash">kubectl run -it --rm --image=mysql:5.6 --restart=Never mysql-client -- mysql -h mysql -pyourpasswordhere
</code></pre>

<p><strong>GOTCHA</strong>: If you change the password now, it&rsquo;s not enough to re-apply your yaml file to update the container. Since the DB is persisted, the password will not be changed. You have to delete the whole deployment with <code>kubectl delete -f mysql.yaml</code>.</p>

<p>You should see the following when running a <code>show databases</code>.</p>

<pre><code class="language-bash">If you don't see a command prompt, try pressing enter.
mysql&gt;
mysql&gt;
mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| kube               |
| mysql              |
| performance_schema |
+--------------------+
4 rows in set (0.00 sec)

mysql&gt; exit
Bye
</code></pre>

<p>You&rsquo;ll also notice that I’ve mounted a file located here: <a href="https://github.com/Skarlso/kube-cluster-sample/blob/master/database_setup.sql">Database Setup SQL</a> into the container. MySQL container automatically executes these. That file will bootstrap some data and the schema I&rsquo;m going to use.</p>

<p>The volume definition is as follows:</p>

<pre><code class="language-yaml">  volumeMounts:
  - name: mysql-persistent-storage
    mountPath: /var/lib/mysql
  - name: bootstrap-script
    mountPath: /docker-entrypoint-initdb.d/database_setup.sql
volumes:
- name: mysql-persistent-storage
  persistentVolumeClaim:
    claimName: mysql-pv-claim
- name: bootstrap-script
  hostPath:
    path: /Users/hannibal/golang/src/github.com/Skarlso/kube-cluster-sample/database_setup.sql
    type: File
</code></pre>

<p>To check if the bootstrap script was successful, run this:</p>

<pre><code class="language-bash">~/golang/src/github.com/Skarlso/kube-cluster-sample/kube_files master*
❯ kubectl run -it --rm --image=mysql:5.6 --restart=Never mysql-client -- mysql -h mysql -uroot -pyourpasswordhere kube
If you don't see a command prompt, try pressing enter.

mysql&gt; show tables;
+----------------+
| Tables_in_kube |
+----------------+
| images         |
| person         |
| person_images  |
+----------------+
3 rows in set (0.00 sec)

mysql&gt;
</code></pre>

<p>This concludes the database service setup. Logs for this service can be viewed with the following command:</p>

<pre><code class="language-bash">kubectl logs deployment/mysql -f
</code></pre>

<h3 id="nsq-lookup">NSQ Lookup</h3>

<p>The NSQ Lookup will run as an internal service. It doesn&rsquo;t need access from the outside, so I&rsquo;m setting <code>clusterIP: None</code> which will tell Kubernetes that this service is a headless service. This means that it won&rsquo;t be load balanced, and it won&rsquo;t be a single IP service. The DNS will be based upon service selectors.</p>

<p>Our NSQ Lookup selector is:</p>

<pre><code class="language-yaml">  selector:
    matchLabels:
      app: nsqlookup
</code></pre>

<p>Thus, the internal DNS will look like this: <code>nsqlookup.default.svc.cluster.local</code>.</p>

<p>Headless services are described in detail here: <a href="https://kubernetes.io/docs/concepts/services-networking/service/#headless-services">Headless Service</a>.</p>

<p>Basically it&rsquo;s the same as MySQL just with slight modifications. As stated earlier, I&rsquo;m using NSQ&rsquo;s own Docker Image called <code>nsqio/nsq</code>. All nsq commands are there, so nsqd will also use this image just with a different command. For nsqlookupd the command is:</p>

<pre><code class="language-yaml">command: [&quot;/nsqlookupd&quot;]
args: [&quot;--broadcast-address=nsqlookup.default.svc.cluster.local&quot;]
</code></pre>

<p>What&rsquo;s the <code>--broadcast-address</code> for, you might ask? By default, nsqlookup will use the <code>hostname</code> as broadcast address. When the consumer runs a callback it will try to connect to something like <code>http://nsqlookup-234kf-asdf:4161/lookup?topics=image</code>. Note that <code>nsqlookup-234kf-asdf</code> is the hostname of the container. By setting the broadcast-address to the internal DNS that callback will be: <code>http://nsqlookup.default.svc.cluster.local:4161/lookup?topic=images</code>. Which will work as expected.</p>

<p>NSQ Lookup also requires two ports forwarded. One for broadcasting and one for nsqd callback. These are exposed in the Dockerfile and then utilized in the Kubernetes template like this:</p>

<p>In the container template:</p>

<pre><code class="language-yaml">        ports:
        - containerPort: 4160
          hostPort: 4160
        - containerPort: 4161
          hostPort: 4161
</code></pre>

<p>In the service template:</p>

<pre><code class="language-yaml">spec:
  ports:
  - name: tcp
    protocol: TCP
    port: 4160
    targetPort: 4160
  - name: http
    protocol: TCP
    port: 4161
    targetPort: 4161
</code></pre>

<p>Names are required by Kubernetes.</p>

<p>To create this service, I&rsquo;m using the same command as before:</p>

<pre><code class="language-bash">kubectl apply -f nsqlookup.yaml
</code></pre>

<p>This concludes nsqlookupd. Two of the major players are in the sack.</p>

<h3 id="receiver-1">Receiver</h3>

<p>This is a more complex one. The receiver will do three things.</p>

<ul>
<li>Create some deployments</li>
<li>Create the nsq daemon</li>
<li>Expose the service to the public</li>
</ul>

<h4 id="deployments-1">Deployments</h4>

<p>The first deployment it creates is it&rsquo;s own. The receiver’s container is <code>skarlso/kube-receiver-alpine</code>.</p>

<h4 id="nsq-daemon">Nsq Daemon</h4>

<p>The receiver starts an nsq daemon. Like stated earlier, the receiver runs an nsqd with it-self. It does that so talking to it can happen locally and not over the network. By making receiver do this, they will end up on the same node.</p>

<p>NSQ daemon also needs some adjustments and parameters.</p>

<pre><code class="language-yaml">        ports:
        - containerPort: 4150
          hostPort: 4150
        - containerPort: 4151
          hostPort: 4151
        env:
        - name: NSQLOOKUP_ADDRESS
          value: nsqlookup.default.svc.cluster.local
        - name: NSQ_BROADCAST_ADDRESS
          value: nsqd.default.svc.cluster.local
        command: [&quot;/nsqd&quot;]
        args: [&quot;--lookupd-tcp-address=$(NSQLOOKUP_ADDRESS):4160&quot;, &quot;--broadcast-address=$(NSQ_BROADCAST_ADDRESS)&quot;]

</code></pre>

<p>You can see that the lookup-tcp-address and the broadcast-address are set. Lookup tcp address is the DNS for the nsqlookupd service. And the broadcast address is necessary just like with nsqlookupd so the callbacks are working properly.</p>

<h4 id="public-facing">Public facing</h4>

<p>Now, this is the first time I&rsquo;m deploying a public facing service. There are two options. I could use a LoadBalancer because this API will be under heavy load. And if this would be deployed anywhere in production, then it should be using one.</p>

<p>I&rsquo;m doing this locally though- with one node- so something called a <code>NodePort</code> is enough. A <code>NodePort</code> exposes a service on each node&rsquo;s IP at a static port. If not specified, it will assign a random port on the host between 30000-32767. But it can also be configured to be a specific port, using <code>nodePort</code> in the template file. To reach this service, use <code>&lt;NodeIP&gt;:&lt;NodePort&gt;</code>. If more than one node is configured a LoadBalancer can multiplex them to a single IP.</p>

<p>For further information check out this document: <a href="https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services---service-types">Publishing Services</a>.</p>

<p>Putting this all together, we&rsquo;ll get a receiver-service for which the template is as follows:</p>

<pre><code class="language-yaml">apiVersion: v1
kind: Service
metadata:
  name: receiver-service
spec:
  ports:
  - protocol: TCP
    port: 8000
    targetPort: 8000
  selector:
    app: receiver
  type: NodePort
</code></pre>

<p>For a fixed nodePort on 8000 a definition of <code>nodePort</code> must be provided:</p>

<pre><code class="language-yaml">apiVersion: v1
kind: Service
metadata:
  name: receiver-service
spec:
  ports:
  - protocol: TCP
    port: 8000
    targetPort: 8000
  selector:
    app: receiver
  type: NodePort
  nodePort: 8000
</code></pre>

<h3 id="image-processor-1">Image processor</h3>

<p>The Image Processor is where I&rsquo;m handling passing off images to be identified. It should have access to nsqlookupd, mysql and the gRPC endpoint of the face recognition service. This is actually a boring service. In fact, it&rsquo;s not a service at all. It doesn&rsquo;t expose anything and thus it&rsquo;s the first deployment only component. For brevity, here is the whole template:</p>

<pre><code class="language-yaml">---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: image-processor-deployment
spec:
  selector:
    matchLabels:
      app: image-processor
  replicas: 1
  template:
    metadata:
      labels:
        app: image-processor
    spec:
      containers:
      - name: image-processor
        image: skarlso/kube-processor-alpine:latest
        env:
        - name: MYSQL_CONNECTION
          value: &quot;mysql.default.svc.cluster.local&quot;
        - name: MYSQL_USERPASSWORD
          valueFrom:
            secretKeyRef:
              name: kube-face-secret
              key: mysql_userpassword
        - name: MYSQL_PORT
          # TIL: If this is 3306 without &quot; kubectl throws an error.
          value: &quot;3306&quot;
        - name: MYSQL_DBNAME
          value: kube
        - name: NSQ_LOOKUP_ADDRESS
          value: &quot;nsqlookup.default.svc.cluster.local:4161&quot;
        - name: GRPC_ADDRESS
          value: &quot;face-recog.default.svc.cluster.local:50051&quot;

</code></pre>

<p>The only interesting points in this file are the multitude of environment properties that are used to configure the application. Note the nsqlookupd address and the grpc address.</p>

<p>To create this deployment, run:</p>

<pre><code class="language-bash">kubectl apply -f image_processor.yaml
</code></pre>

<h3 id="face-recognition-1">Face - Recognition</h3>

<p>The face recognition service does have a service. It&rsquo;s a simple one, only needed by image-processor. It&rsquo;s template is as follows:</p>

<pre><code class="language-yaml">apiVersion: v1
kind: Service
metadata:
  name: face-recog
spec:
  ports:
  - protocol: TCP
    port: 50051
    targetPort: 50051
  selector:
    app: face-recog
  clusterIP: None
</code></pre>

<p>The more interesting part is that it requires two volumes. The two volumes are <code>known_people</code> and <code>unknown_people</code>. Can you guess what they will contain? Yep, images. The <code>known_people</code> volume contains all the images associated to the known people in the database. The <code>unknown_people</code> volume will contain all the new images. And that&rsquo;s the path we will need to use when sending images from the receiver. That is, wherever the mount point points too. Which in my case is <code>/unknown_people</code>. Basically the path needs to be one that the face recognition service can access.</p>

<p>Now, with Kubernetes and Docker this is easy. It could be a mounted S3 or some kind of nfs or a local mount from host to guest. The possibilities are endless (around a dozen or so). I&rsquo;m going to use a local mount for the sake of simplicity.</p>

<p>Mounting a volume has two parts. First, the Dockerfile has to specify volumes:</p>

<pre><code class="language-Dockerfile">VOLUME [ &quot;/unknown_people&quot;, &quot;/known_people&quot; ]
</code></pre>

<p>Second, the Kubernetes template needs add <code>volumeMounts</code> as seen in the MySQL service; the difference being <code>hostPath</code> instead of a claimed volume:</p>

<pre><code class="language-yaml">        volumeMounts:
        - name: known-people-storage
          mountPath: /known_people
        - name: unknown-people-storage
          mountPath: /unknown_people
      volumes:
      - name: known-people-storage
        hostPath:
          path: /Users/hannibal/Temp/known_people
          type: Directory
      - name: unknown-people-storage
        hostPath:
          path: /Users/hannibal/Temp/
          type: Directory
</code></pre>

<p>We also have to set the <code>known_people</code> folder config setting for face recognition. This is done via an environment property:</p>

<pre><code class="language-yaml">        env:
        - name: KNOWN_PEOPLE
          value: &quot;/known_people&quot;
</code></pre>

<p>Then the Python code will look up images like this:</p>

<pre><code class="language-python">        known_people = os.getenv('KNOWN_PEOPLE', 'known_people')
        print(&quot;Known people images location is: %s&quot; % known_people)
        images = self.image_files_in_folder(known_people)
</code></pre>

<p>Where <code>image_files_in_folder</code> is:</p>

<pre><code class="language-python">    def image_files_in_folder(self, folder):
        return [os.path.join(folder, f) for f in os.listdir(folder) if re.match(r'.*\.(jpg|jpeg|png)', f, flags=re.I)]
</code></pre>

<p>Neat.</p>

<p>Now, if the receiver receives a request (and sends it off further the line) similar to the one below&hellip;</p>

<pre><code class="language-bash">curl -d '{&quot;path&quot;:&quot;/unknown_people/unknown220.jpg&quot;}' http://192.168.99.100:30251/image/post
</code></pre>

<p>&hellip;it will look for an image called unknown220.jpg under <code>/unknown_people</code>, locate an image in the known_folder that corresponds to the person on the unknown image and return the name of the image that matched.</p>

<p>Looking at logs you should see something like this:</p>

<pre><code class="language-bash"># Receiver
❯ curl -d '{&quot;path&quot;:&quot;/unknown_people/unknown219.jpg&quot;}' http://192.168.99.100:30251/image/post
got path: {Path:/unknown_people/unknown219.jpg}
image saved with id: 4
image sent to nsq

# Image Processor
2018/03/26 18:11:21 INF    1 [images/ch] querying nsqlookupd http://nsqlookup.default.svc.cluster.local:4161/lookup?topic=images
2018/03/26 18:11:59 Got a message: 4
2018/03/26 18:11:59 Processing image id:  4
2018/03/26 18:12:00 got person:  Hannibal
2018/03/26 18:12:00 updating record with person id
2018/03/26 18:12:00 done
</code></pre>

<p>And that concludes all of the services that we need to deploy.</p>

<h3 id="frontend">Frontend</h3>

<p>Last, there is a small web-app which displays the information in the db for convenience. This is also a public facing service with the same parameters as the receiver.</p>

<p>It looks like this:</p>

<p><img src="/img/kube-frontend.png" alt="frontend" /></p>

<h3 id="recap">Recap</h3>

<p>So what is the situation so far? I deployed a bunch of services all over the place. A recap off the commands I used:</p>

<pre><code class="language-bash">kubectl apply -f mysql.yaml
kubectl apply -f nsqlookup.yaml
kubectl apply -f receiver.yaml
kubectl apply -f image_processor.yaml
kubectl apply -f face_recognition.yaml
kubectl apply -f frontend.yaml
</code></pre>

<p>These could be in any order because the application does not allocate connections on start. Except for image_processor&rsquo;s NSQ consumer. But that re-tries.</p>

<p>Query-ing kube for running pods with <code>kubectl get pods</code> should show something like this:</p>

<pre><code class="language-bash">❯ kubectl get pods
NAME                                          READY     STATUS    RESTARTS   AGE
face-recog-6bf449c6f-qg5tr                    1/1       Running   0          1m
image-processor-deployment-6467468c9d-cvx6m   1/1       Running   0          31s
mysql-7d667c75f4-bwghw                        1/1       Running   0          36s
nsqd-584954c44c-299dz                         1/1       Running   0          26s
nsqlookup-7f5bdfcb87-jkdl7                    1/1       Running   0          11s
receiver-deployment-5cb4797598-sf5ds          1/1       Running   0          26s
</code></pre>

<p>Running <code>minikube service list</code>:</p>

<pre><code class="language-bash">❯ minikube service list
|-------------|----------------------|-----------------------------|
|  NAMESPACE  |         NAME         |             URL             |
|-------------|----------------------|-----------------------------|
| default     | face-recog           | No node port                |
| default     | kubernetes           | No node port                |
| default     | mysql                | No node port                |
| default     | nsqd                 | No node port                |
| default     | nsqlookup            | No node port                |
| default     | receiver-service     | http://192.168.99.100:30251 |
| kube-system | kube-dns             | No node port                |
| kube-system | kubernetes-dashboard | http://192.168.99.100:30000 |
|-------------|----------------------|-----------------------------|
</code></pre>

<h3 id="rolling-update">Rolling update</h3>

<p>What happens during a rolling update?</p>

<p><img src="/img/kube_rotate.png" alt="kube rotate" /></p>

<p>As it happens during software development, change is requested/needed to some parts of the system. What happens to our cluster if I would like to change one of its components without breaking the others? And also whilst maintaining backwards compatibility with no disruption to user experience. Thankfully Kubernetes can help with that.</p>

<p>What I don&rsquo;t like is that the API only handles one image at a time. There is no option to bulk upload.</p>

<h4 id="code">Code</h4>

<p>Right now, we have the following code segment dealing with a single image:</p>

<pre><code class="language-go">// PostImage handles a post of an image. Saves it to the database
// and sends it to NSQ for further processing.
func PostImage(w http.ResponseWriter, r *http.Request) {
...
}

func main() {
    router := mux.NewRouter()
    router.HandleFunc(&quot;/image/post&quot;, PostImage).Methods(&quot;POST&quot;)
    log.Fatal(http.ListenAndServe(&quot;:8000&quot;, router))
}
</code></pre>

<p>We have two options. Add a new endpoint with <code>/images/post</code> and make the client use that, or modify the existing one.</p>

<p>The new client code has the advantage that it could fall back to submitting the old way if the new endpoint isn&rsquo;t available. The old client code though doesn&rsquo;t have this advantage so we can&rsquo;t change the way our code works right now. Consider this. You have 90 servers. You do a slow paced rolling update that will take out servers one step at a time doing an update. If an update lasts around a minute, the whole process will take around one and a half hours to complete (not counting any parallel updates).</p>

<p>During that time, some of your servers will run the new code and some will run the old one. Calls are load balanced, thus you have no control over what server is hit. If a client is trying to do a call the new way but hits an old server the client would fail. The client could try a fallback, but since you eliminated the old version it will not succeed unless it, by chance, hits a server with the new code (assuming no sticky sessions are set).</p>

<p>Also, once all your servers are updated, an old client will not be able to use your service any longer at all.</p>

<p>Now, you could argue that you don&rsquo;t want to keep old versions of your code forever. And that is true in some sense. That&rsquo;s why what we are going to do is modify the old code to simply call the new one with some slight augmentations. This way once all clients have been migrated, the code can simply be deleted without any problems.</p>

<h4 id="new-endpoint">New Endpoint</h4>

<p>Let&rsquo;s add a new route method:</p>

<pre><code class="language-go">...
router.HandleFunc(&quot;/images/post&quot;, PostImages).Methods(&quot;POST&quot;)
...
</code></pre>

<p>And updating the old one to call the new one with a modified body like this:</p>

<pre><code class="language-go">// PostImage handles a post of an image. Saves it to the database
// and sends it to NSQ for further processing.
func PostImage(w http.ResponseWriter, r *http.Request) {
    var p Path
    err := json.NewDecoder(r.Body).Decode(&amp;p)
    if err != nil {
      fmt.Fprintf(w, &quot;got error while decoding body: %s&quot;, err)
      return
    }
    fmt.Fprintf(w, &quot;got path: %+v\n&quot;, p)
    var ps Paths
    paths := make([]Path, 0)
    paths = append(paths, p)
    ps.Paths = paths
    var pathsJSON bytes.Buffer
    err = json.NewEncoder(&amp;pathsJSON).Encode(ps)
    if err != nil {
      fmt.Fprintf(w, &quot;failed to encode paths: %s&quot;, err)
      return
    }
    r.Body = ioutil.NopCloser(&amp;pathsJSON)
    r.ContentLength = int64(pathsJSON.Len())
    PostImages(w, r)
}
</code></pre>

<p>Well, the naming could be better, but you should get the basic idea. I&rsquo;m modifying the incoming single path by wrapping it into the new format and sending it over to the new endpoint handler. And that&rsquo;s it. There are a few more modifications, to check them out take a look at this PR: <a href="https://github.com/Skarlso/kube-cluster-sample/pull/1">Rolling Update Bulk Image Path PR</a>.</p>

<p>Now, we can call the receiver in two ways:</p>

<pre><code class="language-bash"># Single Path:
curl -d '{&quot;path&quot;:&quot;unknown4456.jpg&quot;}' http://127.0.0.1:8000/image/post

# Multiple Paths:
curl -d '{&quot;paths&quot;:[{&quot;path&quot;:&quot;unknown4456.jpg&quot;}]}' http://127.0.0.1:8000/images/post
</code></pre>

<p>Here, the client is curl. Normally, if the client would be a service, I would modify it that in case the new end-point throws a 404 it would try the old one next.</p>

<p>For brevity, I&rsquo;m not modifying NSQ and the others to handle bulk image processing. They will still receive it one - by - one. I&rsquo;ll leave that up to you as homework. ;)</p>

<h4 id="new-image">New Image</h4>

<p>To perform a rolling update, I must create a new image first from the receiver service.</p>

<pre><code class="language-bash">docker build -t skarlso/kube-receiver-alpine:v1.1 .
</code></pre>

<p>Once this is complete, we can begin rolling out the change.</p>

<h4 id="rolling-update-1">Rolling update</h4>

<p>In Kubernetes, you can configure your rolling update in multiple ways.</p>

<h5 id="manual-update">Manual Update</h5>

<p>If, say, I was using a container version in my config file called <code>v1.0</code> than doing an update is simply calling:</p>

<pre><code class="language-bash">kubectl rolling-update receiver --image:skarlso/kube-receiver-alpine:v1.1
</code></pre>

<p>If there is a problem during the rollout we can always rollback.</p>

<pre><code class="language-bash">kubectl rolling-update receiver --rollback
</code></pre>

<p>It will set back the previous version no fuss, no muss.</p>

<h5 id="apply-a-new-configuration-file">Apply a new configuration file</h5>

<p>The problem with by-hand updates is always that they aren&rsquo;t in source control.</p>

<p>Consider this. Something changed, a couple of servers got updated by hand to do a quick “patch fix”, but nobody witnessed it and it wasn’t documented. A new person comes along and does a change to the template and applies the template to the cluster. All the servers are updated, but suddenly, there is a service outage.</p>

<p>Long story short, the servers which got updated are whacked over because the template didn&rsquo;t reflect what has been done by hand. That is bad. Don&rsquo;t do that.</p>

<p>The recommended way is to change the template to use the new version and than apply the template with the <code>apply</code> command.</p>

<p>Kubernetes recommends that the Deployment handles the rollout with ReplicaSets. This means however, that there must be at least two replicates present for a rolling update. Otherwise the update won&rsquo;t work (unless <code>maxUnavailable</code> is set to 1). I&rsquo;m increasing the replica count in the yaml and I set the new image version for the receiver container.</p>

<pre><code class="language-yaml">  replicas: 2
...
    spec:
      containers:
      - name: receiver
        image: skarlso/kube-receiver-alpine:v1.1
...
</code></pre>

<p>Looking at the progress you should see something like this:</p>

<pre><code class="language-bash">❯ kubectl rollout status deployment/receiver-deployment
Waiting for rollout to finish: 1 out of 2 new replicas have been updated...
</code></pre>

<p>You can add in additional rollout configuration settings by specifying the <code>strategy</code> part of the template like this:</p>

<pre><code class="language-yaml">  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
</code></pre>

<p>Additional information on rolling update can be found in these documents: <a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#rolling-back-a-deployment">Deployment Rolling Update</a>, <a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#updating-a-deployment">Updating a Deployment</a>, <a href="https://kubernetes.io/docs/concepts/cluster-administration/manage-deployment/#updating-your-application-without-a-service-outage">Manage Deployments</a>, <a href="https://kubernetes.io/docs/tasks/run-application/rolling-update-replication-controller/">Rolling Update using ReplicaController</a>.</p>

<p><strong>NOTE MINIKUBE USERS</strong>: Since we are doing this on a local machine with one node and 1 replica of an application, we have to set <code>maxUnavailable</code> to <code>1</code>. Otherwise, Kubernetes won&rsquo;t allow the update to happen and the new version will always be in <code>Pending</code> state since we aren&rsquo;t allowing that at any given point in time there is a situation where no containers are present for <code>receiver</code> app.</p>

<h3 id="scaling-1">Scaling</h3>

<p>Scaling is dead easy with Kubernetes. Since it&rsquo;s managing the whole cluster, you basically, just have to put a number into the template of the desired replicas to use.</p>

<p>This has been a great post so far but it&rsquo;s getting too long. I&rsquo;m planning on writing a follow-up where I will be truly scaling things up on AWS with multiple nodes and replicas. Stay tuned.</p>

<h3 id="cleanup">Cleanup</h3>

<pre><code class="language-bash">kubectl delete deployments --all
kubectl delete services -all
</code></pre>

<h1 id="final-words">Final Words</h1>

<p>And that is it ladies and gentleman. We wrote, deployed, updated and scaled (well, not yet really) a distributed application with Kubernetes.</p>

<p>Any questions, please feel free to chat in the comments below, I&rsquo;m happy to answer.</p>

<p>I hope you enjoyed reading this. I know, it&rsquo;s quiet long and I was thinking of splitting it up, but having a cohesive, one page guide is sometimes useful and makes it easy to find something or save it for later read or even print as PDF.</p>

<p>Thank you for reading,
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Go Budapest Meetup</title>
			<link>https://skarlso.github.io/2018/02/06/go-budapest-meetup/</link>
			<pubDate>Tue, 06 Feb 2018 23:01:00 +0100</pubDate>
			
			<guid>https://skarlso.github.io/2018/02/06/go-budapest-meetup/</guid>
			<description>Intro So I was at Go Budapest Meetup yesterday, where the brilliant Johan Brandhorst gave a talk about his project based on gRPC using gRPC-web + GopherJS + protobuf. He also has some Go contributions and check out his project here: Protobuf. It&amp;rsquo;s GopherJS Bindings for ProtobufJS and gRPC-Web.
It was interesting to see where these projects could lead and I see the potential in them. I liked the usage of Protobuf and gRPC, I don&amp;rsquo;t have THAT much experience with them.</description>
			<content type="html"><![CDATA[

<h1 id="intro">Intro</h1>

<p>So I was at <a href="https://www.meetup.com/go-budapest">Go Budapest Meetup</a> yesterday, where the brilliant <a href="https://jbrandhorst.com/">Johan Brandhorst</a>
gave a talk about his project based on <a href="https://grpc.io/">gRPC</a> using <a href="https://github.com/improbable-eng/grpc-web">gRPC-web</a> +
<a href="https://github.com/gopherjs/gopherjs">GopherJS</a> + <a href="https://github.com/google/protobuf">protobuf</a>. He also has some Go
contributions and check out his project here: <a href="https://github.com/johanbrandhorst/protobuf">Protobuf</a>. It&rsquo;s GopherJS Bindings for
ProtobufJS and gRPC-Web.</p>

<p>It was interesting to see where these projects could lead and I see the potential in them. I liked the usage of Protobuf and gRPC,
I don&rsquo;t have THAT much experience with them. However after yesterday, I&rsquo;m eager to find an excuse to do something with these libraries.
I used gRPC indirectly, well, the result of it, when dealing with Google Cloud Platform&rsquo;s API. Which is largely generated code through
gRPC and protobuf.</p>

<p>He also presented a bi-directional stream communication between the gRPC-web client and the server which was an interesting feat
to produce. It did involve the use of <a href="https://godoc.org/golang.org/x/sync/errgroup">errgroup</a>. Which is nice.</p>

<p>I didn&rsquo;t look THAT much into WebAssembly however, again, after yesterday, I will. He gave a shout out to WebAssembly developers
that he is ready to tackle the Go bindings for WASM!</p>

<p>It was a good change of pace to look at some Go code being written, I&rsquo;ll be sure to visit the meetup again, in about three months
when the next one will come.</p>

<p>Maybe, I&rsquo;ll even give a talk if they are looking for speakers. ;)</p>

<p>A huge thank you to <a href="https://www.emarsys.com/en/about-us/">Emarsys Budapest</a> for organizing the event and bringing Johan to us
for his talk.</p>

<p>Thanks,<br />
Gergely</p>
]]></content>
		</item>
		
		<item>
			<title>Ansible &#43; Nginx &#43; LetsEncrypt &#43; Wiki &#43; Nagios</title>
			<link>https://skarlso.github.io/2018/01/23/nginx-certbot-ansible/</link>
			<pubDate>Tue, 23 Jan 2018 22:34:00 +0100</pubDate>
			
			<guid>https://skarlso.github.io/2018/01/23/nginx-certbot-ansible/</guid>
			<description>Intro Hi folks.
Today, I would like demonstrate how to use Ansible in order to construct a server hosting multiple HTTPS domains with Nginx and LetsEncrypt. Are you ready? Let&amp;rsquo;s dive in.
TL;DR What you will need There is really only one thing you need in order for this to work and that is Ansible. If you would like to run local tests without a remote server, than you will need Vagrant and VirtualBox.</description>
			<content type="html"><![CDATA[

<h1 id="intro">Intro</h1>

<p>Hi folks.</p>

<p>Today, I would like demonstrate how to use <a href="https://www.ansible.com/">Ansible</a> in order to construct a server hosting multiple HTTPS domains with <a href="https://www.nginx.com/">Nginx</a> and <a href="https://letsencrypt.org/">LetsEncrypt</a>. Are you ready? Let&rsquo;s dive in.</p>

<h2 id="tl-dr">TL;DR</h2>

<p><img src="/img/ansible.svg" alt="playbook" /></p>

<h2 id="what-you-will-need">What you will need</h2>

<p>There is really only one thing you need in order for this to work and that is Ansible. If you would like to run local tests without a remote server, than you will need <a href="https://www.vagrantup.com/">Vagrant</a> and <a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a>. But those two are optional.</p>

<h2 id="what-we-are-going-to-set-up">What We Are Going To Set Up</h2>

<p>The setup is as follows:</p>

<h3 id="nagios">Nagios</h3>

<p>We are going to have a Nagios with a custom check for pending security updates. That will run under nagios.example.com.</p>

<h3 id="hugo-website">Hugo Website</h3>

<p>The main web site is going to be a basic <a href="https://gohugo.io/">Hugo</a> site. Hugo is a static Go based web site generator. This Blog is run by it.</p>

<p>We are also going to setup <a href="https://www.noip.com/">NoIP</a> which will provide the DNS for the sites.</p>

<h3 id="wiki">Wiki</h3>

<p>The wiki is a plain, basic <a href="https://www.dokuwiki.org/dokuwiki#">DokuWiki</a>.</p>

<h3 id="https-nginx">HTTPS + Nginx</h3>

<p>And all the above will be hosted by Nginx with HTTPS provided by letsencrypt. We are going to set all these up with Ansible on top so it will be idempotent.</p>

<h3 id="repository">Repository</h3>

<p>All of the playbooks and the whole thing together can be viewed here: <a href="https://github.com/Skarlso/ansible-server-setup">Github Ansible Server Setup</a>.</p>

<h2 id="ansible">Ansible</h2>

<p>I won&rsquo;t be writing everything down to the basics about Ansible. For that you will need to go and read its documentation. But I will provide ample of clarification for using what I&rsquo;ll be using.</p>

<h3 id="some-basics">Some Basics</h3>

<p>Ansible is a configuration management tool which, unlike chef or puppet, isn&rsquo;t master - slave based. It&rsquo;s using SSH to run a set of instructions on a target machine. The instructions are written in yaml files and look something like this:</p>

<pre><code class="language-yaml">---
# tasks file for ssh
- name: Copy sshd_config
  copy: content=&quot;{{sshd_config}}&quot; dest=/etc/ssh/sshd_config
  notify:
  - SSHD Restart
</code></pre>

<p>This is a basic Task which copies over an <code>sshd_config</code> file overwriting the one already being there. It can execute in priviliged mode if root password is provided or the user has sudo rights.</p>

<p>It works from so called <code>hosts</code> files where the server details are described. This is how a basic host file would look like:</p>

<pre><code class="language-bash">[local]
127.0.0.1

[webserver1]
1.23.4.5
</code></pre>

<p>Ansible will use these settings to try and access the server. To test if the connection is working, you can send a <code>ping</code> task like this:</p>

<pre><code class="language-bash">ansible all -m ping
</code></pre>

<p>Ansible uses <code>variables</code> for things that change. They are defined under each task&rsquo;s subfolder called <code>vars</code>. Please feel free to change the varialbes there to your liking.</p>

<h3 id="ssh-access">SSH Access</h3>

<p>You can either define SSH information per host or per group or globally. In this example I have it under the groups wars called
<code>webserver1</code> like this (vars.yaml):</p>

<pre><code class="language-yaml">---
# SSH sudo keys and pass
ansible_become_pass: '{{vault_ansible_become_pass}}'
ansible_ssh_port: '{{vault_ansible_ssh_port}}'
ansible_ssh_user: '{{vault_ansible_ssh_user}}'
ansible_ssh_private_key_file: '{{vault_ansible_ssh_private_key_file}}'
home_dir: /root
</code></pre>

<h3 id="further-reading">Further reading</h3>

<p>Further readings are:</p>

<ul>
<li><a href="https://serversforhackers.com/c/an-ansible-tutorial">Servers For Hackers</a></li>
<li><a href="http://docs.ansible.com/ansible/latest/intro_getting_started.html">Ansible docs</a></li>
</ul>

<h3 id="vault">Vault</h3>

<p>The vault is the place where we can keep secure information. This file is called <code>vault</code> and usually lives under either <code>group_vars</code> or <code>host_vars</code>. The preference is up to you.</p>

<p>This file is encrypted using a password you specify. You can have the vault password stored in the following ways:</p>

<ul>
<li>Store it on a secure drive which is encrypted and only mounted when the playbook is executed</li>
<li>Store it on <a href="https://keybase.io">Keybase</a></li>
<li>Store it on an encrypted S3 bucket</li>
<li>Store it in a file next to the playbook which is never commited into source control</li>
</ul>

<p>Either way, in the end, ansible will look for a file called <code>.vault_password</code> for when it&rsquo;s trying to decrypt the file. You can
define a different file in the <code>ansible.cfg</code> file using the <code>vault_password_file</code> option.</p>

<p>You can create a vault like this:</p>

<pre><code class="language-bash">ansible-vault create vault
</code></pre>

<p>If you are following along, you are going to need these variables in the vault:</p>

<pre><code class="language-yaml">vault_ansible_become_pass: &lt;your_sudo_password&gt; # if applicable
vault_ansible_ssh_user: &lt;ssh_user&gt;
vault_ansible_ssh_private_key_file: /Users/user/.ssh/ida_rsa
vault_nagios_password: supersecurenagiosadminpassword
vault_nagios_username: nagiosadmin
vault_noip_username: youruser@gmail.com
vault_noip_password: &quot;SuperSecureNoIPPassword&quot;
vault_nginx_user: &lt;localuser&gt;
</code></pre>

<p>You can always edit the vault later on with:</p>

<pre><code class="language-bash">ansible-vault edit group_vars/webserver1/vault --vault-password-file=.vault_pass
</code></pre>

<h3 id="tasks">Tasks</h3>

<p>The following are a collection of tasks which execute in order. The end task, which is letsencrypt, relies on all the hosts being present and configured under Nginx. Otherwise it will throw an error that the host you are trying to configure HTTPS for, isn&rsquo;t defined.</p>

<h4 id="no-ip">No-IP</h4>

<p>I&rsquo;m choosing No-ip as a DNS provider because it&rsquo;s cheap and the sync tool is easy to automate. To automate the CLI of No-IP, I&rsquo;m using a package called <code>expect</code>. This looks something like this:</p>

<pre><code class="language-bash">cd {{home_dir}}
wget http://www.no-ip.com/client/linux/noip-duc-linux.tar.gz
mkdir -p noip
tar zxf noip-duc-linux.tar.gz -C noip
cd noip/*
make

/usr/bin/expect &lt;&lt;END_SCRIPT
spawn make install
expect &quot;Please enter the login/email*&quot; { send &quot;{{noip_username}}\r&quot; }
expect &quot;Please enter the password for user*&quot; { send &quot;{{noip_password}}\r&quot; }
expect {
    &quot;Do you wish to have them all updated*&quot; {
        send &quot;y&quot;
        exp_continue
    }
}
expect &quot;Please enter an update interval*&quot; { send &quot;30\r&quot; }
expect &quot;Do you wish to run something at successful update*&quot; {send &quot;N&quot; }
END_SCRIPT
</code></pre>

<p>The interesting part is the command running expect. Basically, it&rsquo;s expecting some kind of output which is outlined there. And has canned answers for those which it <code>send</code>s to the waiting command.</p>

<h4 id="to-util-or-not-to-util">To Util or Not To Util</h4>

<p>So, there are small tasks, like installing vim and wget and such which could warrant the existance of a <code>utils</code> task. Utils task would install the packages that are used as convinience and don&rsquo;t really relate to a singe task.</p>

<p>Yet I settled for the following. Each of my tasks has a dependency part. The given tasks takes care of all the packages it needs so they can be executed on their own as well as in unison.</p>

<p>This looks like this:</p>

<pre><code class="language-yaml"># Install dependencies
- name: Install dependencies
  apt: pkg=&quot;{{item}}&quot; state=installed
  with_items:
    - &quot;{{deps}}&quot;
</code></pre>

<p>For which the <code>deps</code> variable is defined as follows:</p>

<pre><code class="language-yaml"># Defined dependencies for letsencrypt task.
deps: ['git', 'python-dev', 'build-essential', 'libpython-dev', 'libpython2.7', 'augeas-lenses', 'libaugeas0', 'libffi-dev', 'libssl-dev', 'python-virtualenv', 'python3-virtualenv', 'virtualenv']
</code></pre>

<p>This is much cleaner. And if a task is no longer needed, it&rsquo;s dependencies will no longer be needed either in most of the cases.</p>

<h4 id="nagios-1">Nagios</h4>

<p>I&rsquo;m using Nagios 4 which is a real pain in the butt to install. Luckily, thanks to Ansiblei, I only ever had to figure it out once. Now I have a script for that. Installing Nagios demands several, smaller components to be installed. Thus our task uses import from outside tasks like this:</p>

<pre><code class="language-yaml">- name: Install Nagios
  block:
    - include: create_users.yml # creates the Nagios user
    - include: install_dependencies.yml # installs Nagios dependencies
    - include: core_install.yml # Installs Nagios Core
    - include: plugin_install.yml # Installs Nagios Plugins
    - include: create_htpasswd.yml # Creates a password for Nagios' admin user
    - include: setup_custom_check.yml # Adds a custom check which is to check how many security updates are pending
  when: st.stat.exists == False
</code></pre>

<p>The <code>when</code> is a check for a variable created by a file check.</p>

<pre><code class="language-yaml">- stat:
    path: /usr/local/nagios/bin/nagios
  register: st
</code></pre>

<p>It checks if Nagios is installed or not. If yes, skip.</p>

<p>I&rsquo;m not going to paste in here all the subtasks because that would be huge. You can check those out in the repository under Nagios.</p>

<h4 id="hugo">Hugo</h4>

<p>Hugo is easy to install. Its sole requirement is Go. To install hugo you simply run <code>apt-get install hugo</code>. Setting up the
site for me was just checking out the git repo and than execute hugo from the root folder like this:</p>

<pre><code class="language-bash">hugo server --bind=127.0.0.1 --port=8080 --baseUrl=https://example.com --appendPort=false --logFile hugo.log --verboseLog --verbose -v &amp;
</code></pre>

<h4 id="wiki-1">Wiki</h4>

<p>I used DokuWiki because it&rsquo;s a file based wiki so installation is basically just downloading the archive, extracting it and done. The only thing that&rsquo;s needed for it, is php-fpm to run it and a few php modules which I&rsquo;ll outline in the ansible playbook.</p>

<p>The VHOST file for DokuWiki is provided by them and looks like this:</p>

<pre><code class="language-bash">server {
    server_name   {{ wiki_server_name }};
    root {{ wiki_root }};
    index index.php index.html index.htm;
    client_max_body_size 2M;
    client_body_buffer_size 128k;
    location / {
        index doku.php;
        try_files $uri $uri/ @dokuwiki;
    }
    location @dokuwiki {
        rewrite ^/_media/(.*) /lib/exe/fetch.php?media=$1 last;
        rewrite ^/_detail/(.*) /lib/exe/detail.php?media=$1 last;
        rewrite ^/_export/([^/]+)/(.*) /doku.php?do=export_$1&amp;id=$2 last;
        rewrite ^/(.*) /doku.php?id=$1 last;
    }
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }
    location ~ /\.ht {
        deny all;
    }
    location ~ /(data|conf|bin|inc)/ {
        deny all;
    }
}
</code></pre>

<h4 id="nginx">Nginx</h4>

<p>Nginx install is through apt as well. Here, however, there is a bit of magic going on with templates. The templates provide the
vhost files for the three hosts we will be running. This looks as follows:</p>

<pre><code class="language-yaml">- name: Install vhosts
  block:
    - template: src=01_example.com.j2 dest=/etc/nginx/vhosts/01_example.com
      notify:
      - Restart Nginx
    - template: src=02_wiki.example.com.j2 dest=/etc/nginx/vhosts/02_wiki_example.com
      notify:
      - Restart Nginx
    - template: src=03_nagios.example.com.j2 dest=/etc/nginx/vhosts/03_nagios.example.com
      notify:
      - Restart Nginx
</code></pre>

<p>Now, you might be wondering what <code>notify</code> is? It&rsquo;s basically a handler that gets notified to restart nginx. The great part about
it is that it does this only once, even if it was called multiple times. The handler looks like this:</p>

<pre><code class="language-yaml">- name: Restart Nginx
  service:
    name: nginx
    state: restarted
</code></pre>

<p>And lives under <code>handlers</code> sub-folder.</p>

<p>With this, Nginx is done and should be providing our sites under plain HTTP.</p>

<h4 id="letsencrypt">LetsEncrypt</h4>

<p>Now comes the part where we enable HTTPS for all these three domains. Which is as follows:</p>

<ul>
<li>example.com</li>
<li>wiki.example.com</li>
<li>nagios.example.com</li>
</ul>

<p>This is actually quiet simple now-a-days with <code>certbot-auto</code>. In fact, it will insert the configurations we need all by itself.
The only thing for us to do is to specify what domains we have and what our challenge would be. Also, we have to pass in some
variables for <code>certbot-auto</code> to run in a non-interactive mode. This looks as follows:</p>

<pre><code class="language-yaml">- name: Generate Certificate for Domains
  shell: ./certbot-auto --authenticator standalone --installer nginx -d '{{ domain_example }}' -d '{{ domain_wiki }}' -d '{{ domain_nagios }}' --email example@gmail.com --agree-tos -n --no-verify-ssl --pre-hook &quot;sudo systemctl stop nginx&quot; --post-hook &quot;sudo systemctl start nginx&quot; --redirect
  args:
    chdir: /opt/letsencrypt
</code></pre>

<p>And that&rsquo;s that. The interesting and required part here is the <code>pre-hook</code> and <code>post-hook</code>. Without those it wouldn&rsquo;t work because
the ports that certbot is performing the challenge on would be taken already. This stops nginx, performs the challenge and
generates the certs, and starts nginx again. Also note <code>--redirect</code>. This will force HTTPS on the sites and disables plain HTTP.</p>

<p>If all went well our sites should contain information like this:</p>

<pre><code class="language-bash">    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/example.com-0001/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/example.com-0001/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
</code></pre>

<h3 id="test-run-using-vagrant">Test Run using Vagrant</h3>

<p>If you don&rsquo;t want to run all this on a live server to test out, you can do either of these two things:</p>

<ul>
<li>Use a remote dedicated test server</li>
<li>Use a local virtual machine with Vagrant</li>
</ul>

<p>Here, I&rsquo;m giving you an option for the later.</p>

<p>It&rsquo;s possible for most of the things to be tested on a local Vagrant machine. Most of the time a Vagrant box is enough to test out installing things. A sample Vagrant file looks like this:</p>

<pre><code class="language-ruby"># encoding: utf-8
# -*- mode: ruby -*-
# vi: set ft=ruby :
# Box / OS
VAGRANT_BOX = 'ubuntu/xenial64'

VM_NAME = 'ansible-practice'

Vagrant.configure(2) do |config|
  # Vagrant box from Hashicorp
  config.vm.box = VAGRANT_BOX
  # Actual machine name
  config.vm.hostname = VM_NAME
  # Set VM name in Virtualbox
  config.vm.provider 'virtualbox' do |v|
    v.name = VM_NAME
    v.memory = 2048
  end
  # Ansible provision
  config.vm.provision 'ansible_local' do |ansible|
    ansible.limit = 'all'
    ansible.inventory_path = 'hosts'
    ansible.playbook = 'local.yml'
  end
end
</code></pre>

<p>This interesting part here is the ansible provision section. It&rsquo;s running a version of Ansible that is called <code>ansible_local</code>. It&rsquo;s local, becuase it will be only on the VirtualBox. Meaning, you don&rsquo;t have to have Ansible installed to test it on a vagrant box. Neat, huh?</p>

<p>To test your playbook, simply run <code>vagrant up</code> and you should see the provisioning happening.</p>

<h2 id="room-for-improvement">Room for improvement</h2>

<p>And that should be all. Note that this setup isn&rsquo;t quiet enterprise ready. I would add the following things:</p>

<h3 id="tests-and-checks">Tests and Checks</h3>

<p>A ton of tests and checks if the commands that we are using are actually successful or not. If they aren&rsquo;t make them report the failure.</p>

<h3 id="multiple-domains">Multiple Domains</h3>

<p>If you happen to have a ton of domain names to set up, this will not be the most effective way. Right now letsencrypt creates a
single certificate file for those three domains with <code>-d</code> and that&rsquo;s not what you want with potentially hundreds of domains.</p>

<p>In that case, have a list to go through with <code>with_items</code>. Note that you&rsquo;ll have to restart nginx on each line, because you don&rsquo;t
want one of them fail and stop the process entirely. Rather have a few fail but the rest still work.</p>

<h1 id="conclusion">Conclusion</h1>

<p>That&rsquo;s it folks. Have fun setting up servers all over the place and enjoy the power of nginx and letsencrypt and not having to
worry about adding another server into the bunch.</p>

<p>Thank you for reading,
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Huge Furnace Update</title>
			<link>https://skarlso.github.io/2018/01/13/furnace-massive-update/</link>
			<pubDate>Sat, 13 Jan 2018 22:34:00 +0100</pubDate>
			
			<guid>https://skarlso.github.io/2018/01/13/furnace-massive-update/</guid>
			<description>Intro Hi folks.
In the past couple of months I&amp;rsquo;ve been slowly updating Furnace.
There are three major changes that happened. Let&amp;rsquo;s take a look at them, shall we?
Google Cloud Platform Furnace now supports Google Cloud Platform (GCP). It provides the same API to handle GCP resource as with AWS. Namely, create, delete, status, update. I opted to leave out push because Google mostly works with git based repositories, meaning a push is literary just a push, than Google handles distributing the new code by itself.</description>
			<content type="html"><![CDATA[

<h1 id="intro">Intro</h1>

<p>Hi folks.</p>

<p>In the past couple of months I&rsquo;ve been slowly updating <a href="https://github.com/Skarlso/go-furnace">Furnace</a>.</p>

<p>There are three major changes that happened. Let&rsquo;s take a look at them, shall we?</p>

<h2 id="google-cloud-platform">Google Cloud Platform</h2>

<p>Furnace now supports <a href="https://cloud.google.com">Google Cloud Platform (GCP)</a>. It provides the same API to handle GCP resource as with AWS. Namely, <code>create</code>, <code>delete</code>, <code>status</code>, <code>update</code>. I opted to leave out <code>push</code> because Google mostly works with git based repositories, meaning a push is literary just a push, than Google handles distributing the new code by itself.</p>

<p>All the rest of the commands should work the same way as AWS.</p>

<h3 id="deployment-manager">Deployment Manager</h3>

<p>GCP has a similar service to AWS CloudFormations called <a href="https://cloud.google.com/deployment-manager/docs/">Deployment Manager</a>. The documentation is fairly detailed with a Bookshelf example app to deploy. Code and Templates can be found in their Git repositroy here: <a href="https://github.com/GoogleCloudPlatform/deploymentmanager-samples">Deployment Manager Git Repository</a>.</p>

<h3 id="setting-up-gcp">Setting up GCP</h3>

<p>As the README of Furnace outlines&hellip;</p>

<blockquote>
<p>Please carefully read and follow the instruction outlined in this document: <a href="https://cloud.google.com/sdk/#Quick_Start">Google Cloud Getting Started</a>. It will describe how to download and install the SDK and initialize cloud to a Project ID.</p>

<p>Take special attention to these documents:</p>

<p><a href="https://cloud.google.com/sdk/docs/initializing">Initializing GCloud Tools</a>
<a href="https://cloud.google.com/sdk/docs/authorizing">Authorizing Tools</a></p>

<p>Furnace uses a Google Key-File to authenticate with your Google Cloud Account and Project.
In the future, Furnace assumes these things are properly set up and in working order.</p>
</blockquote>

<p>To initialize the client, it uses the following code:</p>

<pre><code class="language-go">  ctx := context.Background()
  client, err := google.DefaultClient(ctx, dm.NdevCloudmanScope)
</code></pre>

<p>The DefaultClient in turn, does the following:</p>

<pre><code class="language-go">// FindDefaultCredentials searches for &quot;Application Default Credentials&quot;.
//
// It looks for credentials in the following places,
// preferring the first location found:
//
//   1. A JSON file whose path is specified by the
//      GOOGLE_APPLICATION_CREDENTIALS environment variable.
//   2. A JSON file in a location known to the gcloud command-line tool.
//      On Windows, this is %APPDATA%/gcloud/application_default_credentials.json.
//      On other systems, $HOME/.config/gcloud/application_default_credentials.json.
//   3. On Google App Engine it uses the appengine.AccessToken function.
//   4. On Google Compute Engine and Google App Engine Managed VMs, it fetches
//      credentials from the metadata server.
//      (In this final case any provided scopes are ignored.)
func FindDefaultCredentials(ctx context.Context, scope ...string) (*DefaultCredentials, error) {
</code></pre>

<p>Take note on the order. This is how Google will authenticate your requests.</p>

<h3 id="running-gcp">Running GCP</h3>

<p>Running gcp is largely similar to AWS. First, you create the necessary templates to your infrastructure. This is done via the Deployment Manager and it&rsquo;s templating engine. The GCP templates are Python <a href="http://jinja.pocoo.org/">JINJA</a> files. Examples are provided in the <code>template</code> directory. It&rsquo;s a bit more complicated than the CloudFormation templates in that it uses outside templates plus schema files to configure dynamic details.</p>

<p>It&rsquo;s all explained in these documents: <a href="https://cloud.google.com/deployment-manager/docs/step-by-step-guide/create-a-template">Creating a Template Step-by-step</a> and <a href="https://cloud.google.com/deployment-manager/docs/configuration/templates/create-basic-template">Creating a Basic Template</a>.</p>

<p>It&rsquo;s not trivial however. And using the API can also be confusing. The Google Code is just a generated Go code file using gRPC. But studying it may provide valuable insigth into how the API is structured. I&rsquo;m also providing some basic samples that I gathered together and the readme does a bit more explaining on how to use them.</p>

<h3 id="your-first-stack">Your First Stack</h3>

<p>Once you have everything set-up you&rsquo;ll need a configuration file for Furnace. The usage is outlined more here <a href="#YAML-Configuration">YAML Configuration</a>. The configuration file for GCP looks like this:</p>

<pre><code class="language-yaml">main:
  project_name: testplatform-1234
  spinner: 1
gcp:
  template_name: google_template.yaml
  stack_name: test-stack

</code></pre>

<p>Where <code>project_name</code> is the name you generate for your first billable Google Cloud Platform project. Template lives next to this yaml file and stack name must be DNS complient.</p>

<p>Once you have a project and a template setup, it&rsquo;s as simple as calling <code>./furnace-gcp create</code> or <code>./furnace-gcp create mycustomstack</code>.</p>

<h3 id="deleting">Deleting</h3>

<p>Deleting happens with <code>./furnace-gcp delete</code> or <code>./furnace-gcp delete mycustomstack</code>. Luckily, as with AWS, this means that every resource created with the DeploymentManager will be deleted leaving no need for search and cleanup.</p>

<h3 id="project-name-vs-project-id">Project Name vs. Project ID</h3>

<p>Unlike with AWS Google requires your stack name and project id to be DNS complient. This is most likely because all API calls and such contain that information.</p>

<h2 id="separate-binaries">Separate Binaries</h2>

<p>In order to mitigate some of Furnace&rsquo;s size, I&rsquo;m providing separate binaries for each service it supports.</p>

<p>The AWS binaries can be found in <code>aws</code> folder, and respectively, the Google Cloud Platform is located in <code>gcp</code>. Both are build-able by running <code>make</code>.</p>

<p>If you would like to run both with a single command, a top level make file is provided for your convinience. Just run <code>make</code> from the root. That will build all binaries. Later on, Digital Oceans will join the ranks.</p>

<h2 id="yaml-configuration">YAML Configuration</h2>

<p>Last but not least, Furnace now employs YAML files for configuration. However, it isn&rsquo;t JUST using YAML files. It also employs a smart configuration pattern which works as follows.</p>

<p>Since Furnace is a distributed binary file which could be running from any given location at any time. Because of that, at first I opted for a global configuration directory.</p>

<p>Now, however, furnace uses a furnace configuration file named with the following pattern: <code>.stackalias.furnace</code>. Where stackname, or stack is the name of a custom stack you would like to create for a project. The content of this file is a single entry, which is the location, relative to this file, of the YAML configuration files for the given stack. For example:</p>

<pre><code class="language-bash">stacks/mydatabasestack.yaml
</code></pre>

<p>This means, that in the directory called <code>stacks</code> there will a yaml configuration file for your database stack. The AWS config file looks like this:</p>

<pre><code class="language-YAML">main:
  stackname: FurnaceStack
  spinner: 1
aws:
  code_deploy_role: CodeDeployServiceRole
  region: us-east-1
  enable_plugin_system: false
  template_name: cloud_formation.template
  app_name: furnace_app
  code_deploy:
    # Only needed in case S3 is used for code deployment
    code_deploy_s3_bucket: furnace_code_bucket
    # The name of the zip file in case it's on a bucket
    code_deploy_s3_key: furnace_deploy_app
    # In case a Git Repository is used for the application, define these two settings
    git_account: Skarlso/furnace-codedeploy-app
    git_revision: b89451234...

</code></pre>

<p>The important part is the <code>template_name</code>. The template has to be next to this yaml file. To use this file, you simply call any of the AWS or GCP commands with an extra, optional parameter like this:</p>

<pre><code class="language-bash">./furnace-aws create mydatabase
</code></pre>

<p>Note that mydatabase will translate to <code>.mydatabase.furnace</code>.</p>

<p>The intelligent part is, that this file could be placed anywhere in the project folder structure; because furnace, when looking for a config file, traverses backwards from the current execution directory up until <code>/</code>. Where root is not included in the search.</p>

<p>Consider the following directory tree:</p>

<p>├── docs<br />
│   ├── <code>furnace-aws status mydatabase</code><br />
├── stacks<br />
│   ├── mystack.template<br />
│   └── mystack.yaml<br />
└── .mydatabase.furnace</p>

<p>You are currently in your <code>docs</code> directory and would like to ask for the status of your database. You don&rsquo;t have to move to the location of the setting file, just simply run the command from where you are. This only works if you are above the location of the file. If you would be below, furnace would say it can&rsquo;t find the file. Because it only traverses upwards.</p>

<p><code>.mydatabase.furnace</code> here contains only a single entry <code>stacks/mystack.yaml</code>. And that&rsquo;s it. This way, you could have multiple furnace files, for example a <code>.database.furnace</code>, <code>.front-end.furnace</code> and a <code>.backend.furnace</code>. All three would work in unison, and if want needs updating, simply run <code>./furnace-aws update backend</code>. And done!</p>

<h1 id="closing-words">Closing words</h1>

<p>As always, contributions are welcomed in the form of issues or pull requests. Questions anything, I tend to answer as soon as I can.</p>

<p>Always run the tests before submitting.</p>

<p>Thank you for reading.
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Commit-Build-Deploy With AWS CodeBuild and Lambda</title>
			<link>https://skarlso.github.io/2017/12/04/commit-build-deploy/</link>
			<pubDate>Mon, 04 Dec 2017 22:34:00 +0100</pubDate>
			
			<guid>https://skarlso.github.io/2017/12/04/commit-build-deploy/</guid>
			<description>Intro Hi All.
Today I would like to write about an AWS finger practice.
Previously, I wrote about how I build and deploy my blog with Wercker. Since, I&amp;rsquo;m a cloud engineer and I dislike Oracle and it&amp;rsquo;s ever expending tenctacles into the abyss, I wanted to switch to use something else.
My build and deploy cycle is simple.
Commit to Blogsource Repo -&amp;gt; Wercker WebHook -&amp;gt; Builds my blog using Hugo -&amp;gt; Pushed to a Different Repository which my Github Blog.</description>
			<content type="html"><![CDATA[

<h1 id="intro">Intro</h1>

<p>Hi All.</p>

<p>Today I would like to write about an AWS finger practice.</p>

<p>Previously, I wrote about how I build and deploy my blog with <a href="www.wercker.com">Wercker</a>. Since, I&rsquo;m a cloud engineer and I dislike Oracle and it&rsquo;s ever expending tenctacles into the abyss, I wanted to switch to use something else.</p>

<p>My build and deploy cycle is simple.</p>

<p>Commit to Blogsource Repo -&gt; Wercker WebHook -&gt; Builds my blog using Hugo -&gt; Pushed to a Different Repository which my Github Blog.</p>

<p>That&rsquo;s all.</p>

<p>It&rsquo;s quiet possible to reproduce this on AWS without infering costs. Unless you publish like&hellip; a couple 100 posts / week.</p>

<p>I&rsquo;m going to use the following services: <a href="https://aws.amazon.com/cloudformation/">CloudFormation</a>, <a href="https://aws.amazon.com/lambda/details/">AWS Lambda</a>, <a href="https://aws.amazon.com/codebuild/">CodeBuild</a>, <a href="https://aws.amazon.com/s3/">S3</a>.</p>

<p>To deploy the below describe architecture in your account in us-east-1 region simply click this button:
<a href="https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?stackName=blogbuilder&amp;templateURL=https://s3.amazonaws.com/blog-builder-template-bucket/template.yaml"><img src="/img/cloudformation-launch-stack.png" alt="Launch Stack" /></a></p>

<p>BEFORE doing that though you need the following created:</p>

<p>Have a bucket for your lambda function. The lambda function can be found here:</p>

<p><a href="https://github.com/Skarlso/aws-lambda-code-pusher">Lambda Repository</a>.</p>

<p>Zip up the lambda folder contents by doing this:</p>

<pre><code class="language-bash">cd lambda
zip -r gitpusher.zip *
aws s3 cp gitpusher.zip s3://your-lambda-bucket
</code></pre>

<p>That&rsquo;s it.</p>

<p>To read a description of the stack, please continue.</p>

<h1 id="tl-dr">TL;DR;</h1>

<p>The architecture I&rsquo;m about to lay out is simple in its use and design. I tried not to complicate things, because I think the simpler something is, the less prone to failure it will be.</p>

<p>In its most basic form the flow is as follows:</p>

<p><img src="/img/blog_builder_flow.png" alt="Flow" />.</p>

<p>You push something into a repository you provide. CodeBuild has a webhook to this repository so on each commit it starts to build the blog. The build will use a so called <code>buildspec.yaml</code> file which describes how your blog should be built. Mine looks like this:</p>

<pre><code class="language-yaml">version: 0.2

phases:
  install:
    commands:
      - echo Installing required packages and Hugo
      - apt-get update
      - apt-get install -y git golang wget
      - wget -q https://github.com/gohugoio/hugo/releases/download/v0.31/hugo_0.31_Linux-64bit.deb -O /tmp/hugo.dep
      - dpkg -i /tmp/hugo.dep
  pre_build:
    commands:
      - echo Downloading source code
      - git clone https://github.com/Skarlso/blogsource.git /opt/app
  build:
    commands:
      - echo Build started on `date`
      - cd /opt/app &amp;&amp; hugo --theme purehugo
  post_build:
    commands:
      - echo Build completed on `date`
artifacts:
  files:
    - /opt/app/public/**/*
</code></pre>

<p>When it&rsquo;s finished, CodeBuild will upload everything in the public folder as a zip to a bucket. The bucket has a lambda attached which triggers on putObject event with the extension <code>.zip</code>. It downloads the archive, extracts it and pushes it to another repository, which is the repository for the blog.</p>

<p>And done! That&rsquo;s it. For an architecture overview, please read on.</p>

<h1 id="architecture">Architecture</h1>

<p>Now, we are going to use CloudFormation stack to deploy these resources. Because we aren&rsquo;t animals to create them by hand, yes?</p>

<p>An overview of my current architecture is best shown by this image:</p>

<p><img src="/img/blog_builder_cf_template.png" alt="AWS Stack" />.</p>

<p>Let&rsquo;s go over these components one - by - one.</p>

<h2 id="lambda-role">Lambda Role</h2>

<p>This is the <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">Role</a> which allows the Lambda to access things in your account. It needs the following service access: s3, logs, lambda; and the following permissions: logs:Create*, logs:PutLogEvents, s3:GetObject, s3:ListBucket.</p>

<h2 id="code-build-role">Code Build Role</h2>

<p>This is the role which allows CodeBuild to have access to services it needs. These services are the following: s3, logs, ssm, codebuild. CodeBuild also needs the following actions allowed: logs:Create*, logs:PutLogEvents, s3:GetObject, s3:PutObject, ssm:GetParameters.</p>

<h2 id="build-bucket">Build Bucket</h2>

<p>This is the bucket in which CodeBuild will push the generated build artifact.</p>

<h2 id="blog-pusher-function">Blog Pusher Function</h2>

<p>This is the heart of this project. It contains the logic to download the zipped artifact, extract it, create a hollow repository from the extracted archive and push the changes to the repository. And just the changes.</p>

<p>This is achieve by a short Python 3.6 script which can be found in the linked repository.</p>

<h2 id="parameters">Parameters</h2>

<p>The stack requires you to provide a couple of parameters which are described in the template. Like, bucket name, github repository, git token and such. Please refer to the template for a full description of each.</p>

<h2 id="charges">Charges</h2>

<p>I recently push a couple of builds to test this configuration and I inferred 0.2 USD in charges. But that was like 10-15 builds a day.</p>

<h1 id="deploying">Deploying</h1>

<p>In order to deploy this you can use <a href="https://github.com/Skarlso/go-furnace">Furnace</a> to easily manage the template and it&rsquo;s parameters. Once you copy the template to the target directory, simply run <code>furnace aws create</code> and provide the necessary parameters.</p>

<h1 id="conclusion">Conclusion</h1>

<p>And that is all. A nice little stack which does the same as Wercker without costs but the leisure of simply pushing up some change to a repository of your choosing.</p>

<p>I hope you enjoyed this little write up as much as I enjoyed creating it.</p>

<p>As always,
Thanks for reading!
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Furnace Ikea Manual</title>
			<link>https://skarlso.github.io/2017/11/06/furnace-ikea-manual/</link>
			<pubDate>Mon, 06 Nov 2017 20:34:00 +0100</pubDate>
			
			<guid>https://skarlso.github.io/2017/11/06/furnace-ikea-manual/</guid>
			<description>Hi there folks.
Just a quick post, of how I went on and created an IKEA manual about Furnace.
Page 1: . Page 2: .
I drew these using Krita. I mostly used a mouse but I also used a Wacom Bamboo drawing tabled, for sketches and such.
Thanks, Gergely.</description>
			<content type="html"><![CDATA[<p>Hi there folks.</p>

<p>Just a quick post, of how I went on and created an IKEA manual about <a href="https://github.com/Skarlso/go-furnace">Furnace</a>.</p>

<p>Page 1: <img src="/img/ikea-furnace-1.png" alt="Page 1" />.
Page 2: <img src="/img/ikea-furnace-2.png" alt="Page 2" />.</p>

<p>I drew these using <a href="https://krita.org/en/">Krita</a>. I mostly used a mouse but I also used a Wacom Bamboo drawing tabled, for sketches and such.</p>

<p>Thanks,
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Furnace Binaries</title>
			<link>https://skarlso.github.io/2017/09/03/furnace-binaries/</link>
			<pubDate>Sun, 03 Sep 2017 10:34:00 +0100</pubDate>
			
			<guid>https://skarlso.github.io/2017/09/03/furnace-binaries/</guid>
			<description>Hey folks.
Quick note. Furnace now comes pre-compiled easy to access binaries which you can download and use out of the box.
No need to install anything, or compile the source. Just download, unzip and use.
Here is the website: Furnace Website.
Enjoy, Cheers, Gergely.</description>
			<content type="html"><![CDATA[<p>Hey folks.</p>

<p>Quick note. Furnace now comes pre-compiled easy to access binaries which you can download and use out of the box.</p>

<p>No need to install anything, or compile the source. Just download, unzip and use.</p>

<p>Here is the website: <a href="https://skarlso.github.io/furnace-web">Furnace Website</a>.</p>

<p>Enjoy,
Cheers,
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Notetaking</title>
			<link>https://skarlso.github.io/2017/05/31/notetaking/</link>
			<pubDate>Wed, 31 May 2017 06:23:00 +0100</pubDate>
			
			<guid>https://skarlso.github.io/2017/05/31/notetaking/</guid>
			<description></description>
			<content type="html"><![CDATA[<p><img src="/img/page1.jpeg" alt="Page1" /></p>

<p><img src="/img/page2.jpeg" alt="Page2" /></p>
]]></content>
		</item>
		
		<item>
			<title>Replacing Eval with Object.send and a self written Parser</title>
			<link>https://skarlso.github.io/2017/05/28/replace-eval-with-object-send-and-a-parser/</link>
			<pubDate>Sun, 28 May 2017 19:23:00 +0100</pubDate>
			
			<guid>https://skarlso.github.io/2017/05/28/replace-eval-with-object-send-and-a-parser/</guid>
			<description>Intro A while ago, I was added as a curator for a Gem called JsonPath. It&amp;rsquo;s a small but very useful and brilliant gem. It had a couple of problems which I fixed, but the hardest to eliminate proved to be a series of evals throughout the code.
You could opt in using eval with a constructor parameter, but generally, it was considered to be unsafe. Thus, normally when a project was using it, like Huginn they had to opt out by default, thus missing out on sweet parsing like this: $.</description>
			<content type="html"><![CDATA[

<h1 id="intro">Intro</h1>

<p>A while ago, I was added as a curator for a Gem called <a href="https://github.com/joshbuddy/jsonpath">JsonPath</a>. It&rsquo;s a small but very useful and brilliant gem. It had a couple of problems which I fixed, but the hardest to eliminate proved to be a series of evals throughout the code.</p>

<p>You could opt in using <code>eval</code> with a constructor parameter, but generally, it was considered to be unsafe. Thus, normally when a project was using it, like <a href="https://github.com/huginn/huginn">Huginn</a> they had to opt out by default, thus missing out on sweet parsing like this: <code>$..book[?(@['price'] &gt; 20)]</code>.</p>

<h2 id="eval">Eval</h2>

<p>In order to remove eval, first I had to understand what it is actually doing. I had to take it apart.</p>

<p><img src="/img/takeevalapart.jpg" alt="apart" /></p>

<p>After much digging and understanding the code, I found, all it does is perform the given operations on the current node. And if the operation is true, it will select that node, otherwise, return false, and ignore that node.</p>

<p>For example <code>$..book[?(@['price'] &gt; 20)]</code> could be translated to:</p>

<pre><code class="language-ruby">return @_current_node['price'] &gt; 20
</code></pre>

<p>Checking first if <code>'price'</code> is even a key in <code>@_current_node</code>. Once I&rsquo;ve understood this part, I set on trying to fix eval.</p>

<h3 id="safe-4">SAFE = 4</h3>

<p>In ruby, you could extract the part where you Eval and put it into its own proc and set <code>SAFE = 4</code> which will disable some things like system calls.</p>

<pre><code class="language-ruby">proc do
  SAFE = 4
  eval(some_expression)
end.call
</code></pre>

<p>SAFE levels:</p>

<p>$SAFE   Description
0   No checking of the use of externally supplied (tainted) data is performed. This is Ruby&rsquo;s default mode.
&gt;= 1    Ruby disallows the use of tainted data by potentially dangerous operations.
&gt;= 2    Ruby prohibits the loading of program files from globally writable locations.
&gt;= 3    All newly created objects are considered tainted.
&gt;= 4    Ruby effectively partitions the running program in two. None - tainted objects may not be modified. Typically, this will be used to create a sandbox: the program sets up an environment using a lower $SAFE level, then resets $SAFE to 4 to prevent subsequent changes to that environment.</p>

<p>This has the disadvantage that anything below 4 is just, meh. But nothing above 1 will actually work with JsonPath so&hellip; scratch that.</p>

<h3 id="sandboxing">Sandboxing</h3>

<p>We could technically try and sandbox eval into it&rsquo;s own process with a PID and whitelist methods which are allowed to be called.</p>

<p>Not bad, and there are a few gems out there which are trying to do that like <a href="https://github.com/ukutaht/safe_ruby">SafeRuby</a>. But all of these project have been abandoned years ago for a good reason.</p>

<h3 id="object-send">Object.send</h3>

<p><img src="/img/nobodylikesyou.jpg" alt="nobodylikesyou" /></p>

<p><code>Object.send</code> is the best way to get some flexibility while still being safe. You basically just call methods on objects by describing said method on an object and giving parameters to it, like:</p>

<pre><code class="language-ruby">1.send(:+, 2) =&gt; 3
</code></pre>

<p>This is a very powerful tool in our toolbox which we will exploit immensely.</p>

<p>So let&rsquo;s get to it.</p>

<h1 id="writing-a-parser">Writing a parser</h1>

<p>Writing a parser in Ruby is a very fluid experience. It has nice tools which support that, and the one I used is <code>StringScanner</code>. It has the ability to track where you are currently at in a string and move a pointer along with regex matches. In fact, JsonPath already employs this method when parsing a json expression. So reusing that logic was in fact&hellip; elementary.</p>

<h2 id="the-expression">The expression</h2>

<p>How do we get from this:</p>

<pre><code class="language-bash">$..book[?(@['price'] &lt; 20)]
</code></pre>

<p>To this:</p>

<pre><code class="language-ruby">@_current_node['price'] &lt; 20
</code></pre>

<p>Well. By simple elimination. There are a couple of problems along the way of course. Because this wouldn&rsquo;t be a parser if it couldn&rsquo;t handle ALL the other cases&hellip;</p>

<h3 id="removing-clutter">Removing Clutter</h3>

<p>Some of this we don&rsquo;t need. Like, <code>$..book</code> part.</p>

<p><img src="/img/dontneed1.jpg" alt="dontneed1" /></p>

<p>The other things we don&rsquo;t need are all the <code>'[]?()</code></p>

<p><img src="/img/dontneed2.jpg" alt="dontneed2" /></p>

<p>Once this is done, we can move to isolating the important bits.</p>

<p><img src="/img/takingaim.jpg" alt="takingaim" /></p>

<h3 id="breakdown">BreakDown</h3>

<h4 id="elements">Elements</h4>

<p>How does an expression actually look like?</p>

<p>Let&rsquo;s break it down.</p>

<p><img src="/img/confused.jpg" alt="confused" /></p>

<p>So, this is a handful. Operations can be <code>&lt;=,&gt;=,&lt;,&gt;,==,!=</code> and operands can be either numbers, or words, and element accessor can be nested since something like this is perfectly valid: <code>$..book[?(@.written.year == 1997)]</code>.</p>

<p><img src="/img/feedline.jpg" alt="feedline" /></p>

<p>To avoid being overwhelmed, ruby has our back with a method called <code>dig</code>.</p>

<p><img src="/img/dig.jpg" alt="dig" /></p>

<p>This, basically lets us pass in some parameters into a dig function on a hash or an array with variadic parameters, which will go on and access those elements in order how they were supplied. Until it either returns a <code>nil</code> or an end result.</p>

<p>For example:</p>

<pre><code class="language-ruby">2.3.1 :001 &gt; a = {a: {b: 'c'}}
 =&gt; {:a=&gt;{:b=&gt;&quot;c&quot;}}
2.3.1 :002 &gt; a.dig(:a, :b)
 =&gt; &quot;c&quot;
</code></pre>

<p>Easy. However&hellip; Dig was only added after ruby 2.3 thus, I had to write my own dig for now, until I stop supporting anything below 2.3.</p>

<p>At first, I wanted to add it to the hash class, but it proved to be a futile attempt if I wanted to do it nicely, thus the parser got it as a private method.</p>

<pre><code class="language-ruby">    def dig(keys, hash)
      return hash unless hash.is_a? Hash
      return nil unless hash.key?(keys.first)
      return hash.fetch(keys.first) if keys.size == 1
      prev = keys.shift
      dig(keys, hash.fetch(prev))
    end
</code></pre>

<p>And the corresponding regex behind getting a multitude of elements is as follows:</p>

<pre><code class="language-ruby">...
if t = scanner.scan(/\['\w+'\]+/)
...
</code></pre>

<h4 id="operator">Operator</h4>

<p>Selecting the operator is another interesting part as it can be a single one or multiple and all sorts. Until I realized that no&hellip; it can actually be only a couple.</p>

<p><img src="/img/whatone.jpg" alt="whatone" /></p>

<p><img src="/img/whattwo.jpg" alt="whattwo" /></p>

<p>Also, after a bit of fiddling and doing and doing a silly case statement first:</p>

<pre><code class="language-ruby">case op
when '&gt;'
  dig(@_current_node, *elements) &gt; operand
when '&lt;'
  dig(@_current_node, *elements) &gt; operand
...
end
</code></pre>

<p>&hellip;I promptly saw that this is not how it should be done.</p>

<p>And here comes Object.send.</p>

<p><img src="/img/send.jpg" alt="send" /></p>

<p>This gave me the opportunity to write this:</p>

<pre><code class="language-ruby">dig(elements, @_current_node).send(operator, operand)
</code></pre>

<p>Much better. Now I could send all the things in the way of a node.</p>

<p><img src="/img/sendtwo.jpg" alt="send" /></p>

<p>Parsing an op be like:</p>

<pre><code class="language-ruby">elsif t = scanner.scan(/\s+[&lt;&gt;=][&lt;&gt;=]?\s+?/)
</code></pre>

<h4 id="operand">Operand</h4>

<p>Now comes the final piece. The value which we are comparing. This could either be a simple integer, a floating number, or a word. Hah. So coming up with a regex which fits this tightly took a little fiddling, but eventually I ended up with this:</p>

<pre><code class="language-ruby">elsif t = scanner.scan(/(\s+)?'?(\w+)?[.,]?(\w+)?'?(\s+)?/)
</code></pre>

<p>Without StackOverflow I would say this is fine ((although I need to remove all those space check, shees)). What are all the question marks? Basically, everything is optional. Because an this expression <code>$..book[?(@.price)]</code> is valid. Which is basically just asserting if a given node has a price element.</p>

<h4 id="logical-operators">Logical Operators</h4>

<p>The last thing that remains is logical operators, which if you are using eval, is pretty straight forward. It takes care of anything that you might add in like <code>&amp;&amp;, ||, |, &amp;, ^</code> etc etc.</p>

<p>Now, that&rsquo;s something I did with a case though. Until I find a nicer solution. Since we can already parse a single expression it&rsquo;s just a question of breaking down a multi structure expression as the following one: <code>$..book[?(@['price'] &gt; 20 &amp;&amp; @.written.year == 1998)]</code>.</p>

<pre><code class="language-ruby">exps = exp.split(/(&amp;&amp;)|(\|\|)/)
</code></pre>

<p>This splits up the string by either <code>&amp;&amp;</code> or <code>||</code> and the usage of groups () also includes the operators. Than I evaluate the expressions and save the whole thing in an array like <code>[true, '&amp;&amp;', false]</code>. You know what could immediately resolve this? Yep&hellip;</p>

<p><img src="/img/saynotoeval.jpg" alt="saynotoeval" />.</p>

<p>I&rsquo;d rather just parse it although technically an eval at this stage wouldn&rsquo;t be that big of a problem&hellip;</p>

<pre><code class="language-ruby">def parse(exp)
  exps = exp.split(/(&amp;&amp;)|(\|\|)/)
  ret = parse_exp(exps.shift)
  exps.each_with_index do |item, index|
    case item
    when '&amp;&amp;'
      ret &amp;&amp;= parse_exp(exps[index + 1])
    when '||'
      ret ||= parse_exp(exps[index + 1])
    end
  end
  ret
end
</code></pre>

<h1 id="closing-words">Closing words</h1>

<p>That&rsquo;s it folks. The parser is done. And there is no eval being used. There are some more things here that are interesting. Like, array indexing is allowed in jsonpath which is solved by sending <code>.length</code> to a current node. For example:</p>

<pre><code class="language-ruby">if scanner.scan(/\./)
  sym = scanner.scan(/\w+/)
  op = scanner.scan(/./)
  num = scanner.scan(/\d+/)
  return @_current_node.send(sym.to_sym).send(op.to_sym, num.to_i)
end
</code></pre>

<p>If an expression begins with a <code>.</code>. So you see that using <code>send</code> will help a lot, and understanding what eval is trying to evaluate and rather writing your own parser, isn&rsquo;t that hard at all using ruby.</p>

<p>I hope you enjoyed reading this little tid-bit as much as I enjoyed writing and drawing it. Leave a comment if your liked the drawings or if you did not and I should never do them again (( I don&rsquo;t really care, this is my blog haha. )). Note to self: I shouldn&rsquo;t draw on the other side of the drawing because of bleed-through.</p>

<p>Thank you!
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 4</title>
			<link>https://skarlso.github.io/2017/04/16/building-furnace-part-4/</link>
			<pubDate>Sun, 16 Apr 2017 09:23:00 +0100</pubDate>
			
			<guid>https://skarlso.github.io/2017/04/16/building-furnace-part-4/</guid>
			<description>Intro Hi folks.
Previously on this blog: Part 1. Part 2. Part 3.
In this part we are going to talk about Unit Testing Furnace and how to work some magic with AWS and Go.
Mock Stub Fake Dummy Canned  Unit testing in Go usually follows the Dependency Injection model of dealing with Mocks and Stubs.
## DI
Dependency Inject in short is one object supplying the dependencies of another object.</description>
			<content type="html"><![CDATA[

<h1 id="intro">Intro</h1>

<p>Hi folks.</p>

<p>Previously on this blog: <a href="https://skarlso.github.io/2017/03/16/building-furnace-part-1/">Part 1</a>. <a href="https://skarlso.github.io/2017/03/19/building-furnace-part-2/">Part 2</a>. <a href="https://skarlso.github.io/2017/03/22/building-furnace-part-3/">Part 3</a>.</p>

<p>In this part we are going to talk about Unit Testing Furnace and how to work some magic with AWS and Go.</p>

<h1 id="mock-stub-fake-dummy-canned-insert-name-here">Mock Stub Fake Dummy Canned <Insert Name Here></h1>

<p>Unit testing in Go usually follows the Dependency Injection model of dealing with Mocks and Stubs.</p>

<p>## DI</p>

<p>Dependency Inject in short is one object supplying the dependencies of another object. In a longer description, it&rsquo;s ideal to be used
for removing the lock on a third party library, like the AWS client. Imaging having code which solely depends on the AWS client. How
would you unit test that code without having to ACTUALLY connect to AWS? You couldn&rsquo;t. Every time you try to test the code it would run
the live code and it would try and connect to AWS and perform the operations it&rsquo;s design to do. The Ruby library with it&rsquo;s metaprogramming
allows you to set the client globally to stub responses, but, alas, this is not the world of Ruby.</p>

<p>Here is where DI comes to the rescue. If you have control over the AWS client on a very high level, and would pass it around as a function
parameter, or create that client in an <code>init()</code> function and have it globally defined; you would be able to implement your own client, and
have your code use that with stubbed responses which your tests need. For example, you would like a CreateApplication call to fail, or you
would like a DescribeStack which returns an aws.Error(&ldquo;StackAlreadyExists&rdquo;).</p>

<p>For this, however, you need the API of the AWS client. Which is provided by AWS.</p>

<h2 id="aws-client-api">AWS Client API</h2>

<p>In order for DI to work, the injected object needs to be of a certain type for us to inject our own. Luckily, AWS provides an Interface for
all of it&rsquo;s clients. Meaning, we can implement our own version for all of the clients, like S3, CloudFormation, CodeDeploy etc.</p>

<p>For each client you want to mock out, an <em>*iface</em> package should be present like this:</p>

<pre><code class="language-go">  &quot;github.com/aws/aws-sdk-go/service/cloudformation/cloudformationiface&quot;
</code></pre>

<p>In this package you find and use the interface like this:</p>

<pre><code class="language-go">type fakeCloudFormationClient struct {
	cloudformationiface.CloudFormationAPI
	err error
}
</code></pre>

<p>And with this, we have our own CloudFormation client. The real code uses the real clients as function parameters, like this:</p>

<pre><code class="language-go">// Execute defines what this command does.
func (c *Create) Execute(opts *commander.CommandHelper) {
	log.Println(&quot;Creating cloud formation session.&quot;)
	sess := session.New(&amp;aws.Config{Region: aws.String(config.REGION)})
	cfClient := cloudformation.New(sess, nil)
	client := CFClient{cfClient}
	createExecute(opts, &amp;client)
}
</code></pre>

<p>We can&rsquo;t test Execute itself, as it&rsquo;s using the real client here (or you could have a global from some library, thus allowing you to tests
even <code>Execute</code> here) but there is very little logic in this function for this very reason. All the logic is in small functions for which
the main starting point and our testing opportunity is, <code>createExecute</code>.</p>

<h2 id="stubbing-calls">Stubbing Calls</h2>

<p>Now, that we have our own client, and with the power of Go&rsquo;s interface embedding as seen above with CloudFormationAPI, we have to only stub
the functions which we are actually using, instead of every function of the given interface. This looks like this:</p>

<pre><code class="language-go">	cfClient := new(CFClient)
	cfClient.Client = &amp;fakeCloudFormationClient{err: nil}
</code></pre>

<p>Where cfClient is a struct like this:</p>

<pre><code class="language-go">// CFClient abstraction for cloudFormation client.
type CFClient struct {
	Client cloudformationiface.CloudFormationAPI
}
</code></pre>

<p>And a stubbed call can than be written as follows:</p>

<pre><code class="language-go">func (fc *fakeCreateCFClient) WaitUntilStackCreateComplete(input *cloudformation.DescribeStacksInput) error {
	return nil
}
</code></pre>

<p>This can range from a very trivial example, like the one above, to intricate ones as well, like this gem:</p>

<pre><code class="language-go">func (fc *fakePushCFClient) ListStackResources(input *cloudformation.ListStackResourcesInput) (*cloudformation.ListStackResourcesOutput, error) {
	if &quot;NoASG&quot; == *input.StackName {
		return &amp;cloudformation.ListStackResourcesOutput{
			StackResourceSummaries: []*cloudformation.StackResourceSummary{
				{
					ResourceType:       aws.String(&quot;NoASG&quot;),
					PhysicalResourceId: aws.String(&quot;arn::whatever&quot;),
				},
			},
		}, fc.err
	}
	return &amp;cloudformation.ListStackResourcesOutput{
		StackResourceSummaries: []*cloudformation.StackResourceSummary{
			{
				ResourceType:       aws.String(&quot;AWS::AutoScaling::AutoScalingGroup&quot;),
				PhysicalResourceId: aws.String(&quot;arn::whatever&quot;),
			},
		},
	}, fc.err
}
</code></pre>

<p>This ListStackResources stub lets us test two scenarios based on the stackname. If the test stackname is &lsquo;NoASG&rsquo; it will return a result
which equals to a result containing no AutoScaling Group. Otherwise, it will return the correct ResourceType for an ASG.</p>

<p>It is a common practice to line up several scenario based stubbed responses in order to test the robustness of your code.</p>

<p>Unfortunately, this also means that your tests will be a bit cluttered with stubs and mock structs and whatnots. For that, I&rsquo;m partially
using a package available struct file in which I&rsquo;m defining most of the mock structs at least. And from there on, the tests will only contain
specific stubs for that particular file. This can be further fine grained by having defaults and than only override in case you need something
else.</p>

<h1 id="testing-fatals">Testing fatals</h1>

<p>Now, the other point which is not really AWS related, but still comes to mind when dealing with Furnace, is testing error scenarios.</p>

<p>Because Furnace is a CLI application it uses Fatals to signal if something is wrong and it doesn&rsquo;t want to continue or recover because, frankly
it can&rsquo;t. If AWS throws an error, that&rsquo;s it. You can retry, but in 90% of the cases, it&rsquo;s usually something that you messed up.</p>

<p>So, how do we test for a fatal or an <code>os.Exit</code>? There are a number of points on that if you do a quick search. You may end up on this talk:
<a href="https://talks.golang.org/2014/testing.slide#23">GoTalk 2014 Testing Slide #23</a>. Which does an interesting thing. It calls the test binary in a
separate process and tests the exit code.</p>

<p>Others, and me as well, will say that you have to have your own logger implemented and use a different logger / os.Exit in your test environment.</p>

<p>Others others will tell you to not to have tests around os.Exit and fatal things, rather return an error and only the main should pop a world
ending event. I leave it up to you which you want to use. Either is fine.</p>

<p>In Furnace, I&rsquo;m using a global logger in my error handling util like this:</p>

<pre><code class="language-go">// HandleFatal handler fatal errors in Furnace.
func HandleFatal(s string, err error) {
	LogFatalf(s, err)
}
</code></pre>

<p>And <code>LogFatalf</code> is an exported variable <code>var LogFatalf = log.Fatalf</code>. Than in a test, I just override this variable with a local anonymous
function:</p>

<pre><code class="language-go">func TestCreateExecuteEmptyStack(t *testing.T) {
	failed := false
	utils.LogFatalf = func(s string, a ...interface{}) {
		failed = true
	}
	config.WAITFREQUENCY = 0
	client := new(CFClient)
	stackname := &quot;EmptyStack&quot;
	client.Client = &amp;fakeCreateCFClient{err: nil, stackname: stackname}
	opts := &amp;commander.CommandHelper{}
	createExecute(opts, client)
	if !failed {
		t.Error(&quot;expected outcome to fail during create&quot;)
	}
}
</code></pre>

<p>It can get even more granular by testing for the error message to make sure that it actually fails at the point we think we are
testing:</p>

<pre><code class="language-go">func TestCreateStackReturnsWithError(t *testing.T) {
	failed := false
	expectedMessage := &quot;failed to create stack&quot;
	var message string
	utils.LogFatalf = func(s string, a ...interface{}) {
		failed = true
		if err, ok := a[0].(error); ok {
			message = err.Error()
		}
	}
	config.WAITFREQUENCY = 0
	client := new(CFClient)
	stackname := &quot;NotEmptyStack&quot;
	client.Client = &amp;fakeCreateCFClient{err: errors.New(expectedMessage), stackname: stackname}
	config := []byte(&quot;{}&quot;)
	create(stackname, config, client)
	if !failed {
		t.Error(&quot;expected outcome to fail&quot;)
	}
	if message != expectedMessage {
		t.Errorf(&quot;message did not equal expected message of '%s', was:%s&quot;, expectedMessage, message)
	}
}
</code></pre>

<h1 id="conclusion">Conclusion</h1>

<p>This is it. That&rsquo;s all it took to write Furnace. I hope you enjoyed reading it as much as I enjoyed writing all these thoughts down.</p>

<p>I hope somebody might learn from my journey and also improve upon it.</p>

<p>Any comments are much appreciated and welcomed. Also, PRs and Issues can be submitted on the GitHub page of <a href="https://github.com/Skarlso/go-furnace">Furnace</a>.</p>

<p>Thank you for reading!
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 3</title>
			<link>https://skarlso.github.io/2017/03/22/building-furnace-part-3/</link>
			<pubDate>Wed, 22 Mar 2017 12:03:00 +0100</pubDate>
			
			<guid>https://skarlso.github.io/2017/03/22/building-furnace-part-3/</guid>
			<description>Intro Hi folks.
Previously on this blog: Part 1. Part 2. Part 4.
In this part, I&amp;rsquo;m going to talk about the experimental plugin system of Furnace.
Go Experimental Plugins Since Go 1.8 was released, an exciting and new feature was introduced called a Plug-in system. This system works with dynamic libraries built with a special switch to go build. These libraries, .so or .dylib (later), are than loaded and once that succeeds, specific functions can be called from them (symbol resolution).</description>
			<content type="html"><![CDATA[

<h1 id="intro">Intro</h1>

<p>Hi folks.</p>

<p>Previously on this blog: <a href="http://skarlso.github.io/2017/03/16/building-furnace-part-1/">Part 1</a>. <a href="https://skarlso.github.io/2017/03/19/building-furnace-part-2/">Part 2</a>. <a href="https://skarlso.github.io/2017/04/16/building-furnace-part-4/">Part 4</a>.</p>

<p>In this part, I&rsquo;m going to talk about the experimental plugin system of Furnace.</p>

<h1 id="go-experimental-plugins">Go Experimental Plugins</h1>

<p>Since Go 1.8 was released, an exciting and new feature was introduced called a Plug-in system. This system works with dynamic
libraries built with a special switch to <code>go build</code>. These libraries, <code>.so</code> or <code>.dylib</code> (later), are than loaded and once that
succeeds, specific functions can be called from them (symbol resolution).</p>

<p>We will see how this works. For package information, visit the plugin packages Go doc page
<a href="https://tip.golang.org/pkg/plugin/">here</a>.</p>

<h1 id="furnace-plugins">Furnace Plugins</h1>

<p>So, what does furnace use plugins for? Furnace uses plugins to execute arbitery code in, currently, four given locations / events.</p>

<p>These are: <code>pre_create, post_create, pre_delete, post_delete</code>. These events are called, as their name suggests, before and after
the creation and deletion of the CloudFormation stack. It allows the user to execute some code without having to rebuild the whole
project. It does that by defining a single entry point for the custom code called <code>RunPlugin</code>. Any number of functions can be
implemented, but the plugin MUST provide this single, exported function. Otherwise it will fail and ignore that plugin.</p>

<h2 id="using-plugins">Using Plugins</h2>

<p>It&rsquo;s really easy to implement, and use these plugins. I&rsquo;m not going into the detail of how to load them, because that is done by
Furnace, but only how to write and use them.</p>

<p>To use a plugin, create a go file called: <code>0001_mailer.go</code>. The <code>0001</code> before it will define WHEN it&rsquo;s executed.
Having multiple plugins is completely okay. Execution of order however, depends on the names of the files.</p>

<p>Now, in 0001_mailer.post_create we would have something like this:</p>

<pre><code class="language-go">package main

import &quot;log&quot;

// RunPlugin runs the plugin.
func RunPlugin() {
	log.Println(&quot;My Awesome Pre Create Plugin.&quot;)
}
</code></pre>

<p>Next step is the build this file to be a plugin library. Note: Right now, this only works on Linux!</p>

<p>To build this file run the following:</p>

<pre><code>go build -buildmode=plugin -o 0001_mailer.pre_create 0001_mailer.go
</code></pre>

<p>The important part here is the extension of the file specified with <code>-o</code>. It&rsquo;s important because that&rsquo;s how Furnace identifies
what plugins it has to run.</p>

<p>Finally, copy this file to <code>~/.config/go-furnace/plugins</code> and you are all set.</p>

<h2 id="slack-notification-plugin">Slack notification Plugin</h2>

<p>To demonstrate how a plugin could be used is if you need some kind of notification once a Stack is completed. For example, you
might want to send a message to a Slack room. To do this, your plugin would look something like this:</p>

<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;os&quot;

	&quot;github.com/nlopes/slack&quot;
)

func RunPlugin() {
	stackname := os.Getenv(&quot;FURNACE_STACKNAME&quot;)
	api := slack.New(&quot;YOUR_TOKEN_HERE&quot;)
	params := slack.PostMessageParameters{}
	channelID, timestamp, err := api.PostMessage(&quot;#general&quot;, fmt.Sprintf(&quot;Stack with name '%s' is Done.&quot;, stackname), params)
	if err != nil {
		fmt.Printf(&quot;%s\n&quot;, err)
		return
	}
	fmt.Printf(&quot;Message successfully sent to channel %s at %s&quot;, channelID, timestamp)
}
</code></pre>

<p>Currently, Furnace has no ability to share information of the stack with an outside plugin. Thus &lsquo;Done&rsquo; could be anything from
Rollback to Failed to CreateComplete.</p>

<h1 id="closing-words">Closing Words</h1>

<p>That&rsquo;s it for plugins. Thanks very much for reading!
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 2</title>
			<link>https://skarlso.github.io/2017/03/19/building-furnace-part-2/</link>
			<pubDate>Sun, 19 Mar 2017 12:03:00 +0100</pubDate>
			
			<guid>https://skarlso.github.io/2017/03/19/building-furnace-part-2/</guid>
			<description>Intro Hi folks.
Previously on this blog: Part 1, Part 3, Part 4
In this part, I&amp;rsquo;m going to talk about the AWS Go SDK and begin do dissect the intricacies of Furnace.
AWS SDK Fortunately, the Go SDK for AWS is quiet verbose and littered with examples of all sorts. But that doesn&amp;rsquo;t make it less complex and less cryptic at times. I&amp;rsquo;m here to lift some of the early confusions, in hopes that I can help someone to avoid wasting time.</description>
			<content type="html"><![CDATA[

<h1 id="intro">Intro</h1>

<p>Hi folks.</p>

<p>Previously on this blog: <a href="https://skarlso.github.io/2017/03/16/building-furnace-part-1/">Part 1</a>, <a href="https://skarlso.github.io/2017/03/22/building-furnace-part-3/">Part 3</a>, <a href="https://skarlso.github.io/2017/04/16/building-furnace-part-4/">Part 4</a></p>

<p>In this part, I&rsquo;m going to talk about the AWS Go SDK and begin do dissect the intricacies of Furnace.</p>

<h1 id="aws-sdk">AWS SDK</h1>

<p>Fortunately, the Go SDK for AWS is quiet verbose and littered with examples of all sorts. But that doesn&rsquo;t make it less complex
and less cryptic at times. I&rsquo;m here to lift some of the early confusions, in hopes that I can help someone to avoid wasting time.</p>

<h2 id="getting-started-and-developers-guide">Getting Started and Developers Guide</h2>

<p>As always, and common from AWS, the documentation is top notch. There is a 141 pages long developer&rsquo;s guide on the SDK containing
a getting started section and an API reference. Go check it out. I&rsquo;ll wait. <a href="http://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/aws-sdk-go-dg.pdf">AWS Go SDK DG PDF</a>. I will only talk about some gotchas and things I encountered, not the basics of the SDK.</p>

<h2 id="aws-string-and-other-types">aws.String and other types</h2>

<p>Something which is immediately visible once we take a look at the API is that everything is a pointer. Now, there are a
tremendous amount of discussions about this, but I&rsquo;m with Amazon. There are various reasons for it, but to list the most prominent
ones:
    - Type completion and compile time type safety.
    - Values for AWS API calls have valid zero values, in addition to being optional, i.e. not being provided at all.
    - Other option, like, empty interfaces with maps, or using zero values, or struct wrappers around every type, made life much
       harder rather than easier or not possible at all.
    - The AWS API is volatile. You never know when something gets to be optional, or required. Pointers made that decision easy.</p>

<p>There are good number of other discussions around this topic, for example: <a href="https://github.com/aws/aws-sdk-go/issues/363">AWS Go GitHub #363</a>.</p>

<p>In order to use primitives, AWS has helper functions like <code>aws.String</code>. Because &amp;&ldquo;asdf&rdquo; is not allowed, you would have to create a
variable and use its address in situations where a string pointer is needed, for example, name of the stack. These primitive helpers will
make in-lining possible. We&rsquo;ll see later that they are used to a great extent. Pointers, however, make life a bit difficult when
constructing Input structs and make for poor aesthetics.</p>

<p>This is something I&rsquo;m returning in a test for stubbing a client call:</p>

<pre><code class="language-go">		return &amp;cloudformation.ListStackResourcesOutput{
			StackResourceSummaries: []*cloudformation.StackResourceSummary{
				{
					ResourceType:       aws.String(&quot;NoASG&quot;),
					PhysicalResourceId: aws.String(&quot;arn::whatever&quot;),
				},
			},
		}
</code></pre>

<p>This doesn&rsquo;t look so appealing, but one gets used to it quickly.</p>

<h2 id="error-handling">Error handling</h2>

<p>Errors also have their own types. An AWS error looks like this:</p>

<pre><code class="language-go">if err != nil {
    if awsErr, ok := err.(awserr.Error); ok {
    }
}
</code></pre>

<p>First, we check if error is nil, than we type check if the error is an AWS error or something different. In the wild, this will
look something like this:</p>

<pre><code class="language-go">	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			if awsErr.Code() != codedeploy.ErrCodeDeploymentGroupAlreadyExistsException {
				log.Println(awsErr.Code())
				return err
			}
			log.Println(&quot;DeploymentGroup already exists. Nothing to do.&quot;)
			return nil
		}
		return err
	}
</code></pre>

<p>If it&rsquo;s an AWS error, we can check further for the error code that it returns in order to identify what to handle, or what to throw
on to the caller to a potential fatal. Here, I&rsquo;m ignoring the AlreadyExistsException because, if it does, we just go on to a next
action.</p>

<h2 id="examples">Examples</h2>

<p>Luckily the API doc is very mature. In most of the cases, they provide an example to an API call. These examples, however, from
time to time provide more confusion than clarity. Take CloudFormation. For me, when I first glanced upon the
description of the API it wasn&rsquo;t immediately clear that the <code>TemplateBody</code> was supposed to be the whole template, and that
the rest of the fields were almost all optional settings. Or provided overrides in special cases.</p>

<p>And since the template is not an ordinary JAML or JSON file, I was looking for something that parses it into that the Struct I
was going to use. After some time, and digging, I realized that I didn&rsquo;t need that, and that I just need to read in the template,
define some extra parameters, and give the TemplateBody the whole of the template. The parameters defined by the CloudFormation
template where extracted for me by <code>ValidateTemplate</code> API call which returned all of them in a convenient
<code>[]*cloudformation.Parameter</code> slice. These things are not described in the document or visible from the examples. I mainly found
them through playing with the API and focused experimentation.</p>

<h2 id="waiters">Waiters</h2>

<p>From other SDK implementations, we got used to Waiters. These handy methods wait for a service to become available or for certain
situations to take in effect, like a Stage being <code>CREATE_COMPLETE</code>. The Go waiters, however, don&rsquo;t allow for callback to be fired,
or for running blocks, like the ruby SDK does. For this, I wrote a handy little waiter for myself, which outputs a spinner to see
that we are currently waiting for something and not frozen in time. This waiter looks like this:</p>

<pre><code class="language-go">// WaitForFunctionWithStatusOutput waits for a function to complete its action.
func WaitForFunctionWithStatusOutput(state string, freq int, f func()) {
	var wg sync.WaitGroup
	wg.Add(1)
	done := make(chan bool)
	go func() {
		defer wg.Done()
		f()
		done &lt;- true
	}()
	go func() {
		counter := 0
		for {
			counter = (counter + 1) % len(Spinners[config.SPINNER])
			fmt.Printf(&quot;\r[%s] Waiting for state: %s&quot;, yellow(string(Spinners[config.SPINNER][counter])), red(state))
			time.Sleep(time.Duration(freq) * time.Second)
			select {
			case &lt;-done:
				fmt.Println()
				break
			default:
			}
		}
	}()

	wg.Wait()
}
</code></pre>

<p>And I&rsquo;m calling it with the following method:</p>

<pre><code class="language-go">	utils.WaitForFunctionWithStatusOutput(&quot;DELETE_COMPLETE&quot;, config.WAITFREQUENCY, func() {
		cfClient.Client.WaitUntilStackDeleteComplete(describeStackInput)
	})
</code></pre>

<p>This would output these lines to the console:</p>

<pre><code class="language-bash">[\] Waiting for state: DELETE_COMPLETE
</code></pre>

<p>The spinner can be configured to be one of the following types:</p>

<pre><code class="language-go">var Spinners = []string{`←↖↑↗→↘↓↙`,
	`▁▃▄▅▆▇█▇▆▅▄▃`,
	`┤┘┴└├┌┬┐`,
	`◰◳◲◱`,
	`◴◷◶◵`,
	`◐◓◑◒`,
	`⣾⣽⣻⢿⡿⣟⣯⣷`,
	`|/-\`}
</code></pre>

<p>Handy.</p>

<p>And with that, let&rsquo;s dive into the basics of Furnace.</p>

<h1 id="furnace">Furnace</h1>

<h2 id="directory-structure-and-packages">Directory Structure and Packages</h2>

<p>Furnace is divided into three main packages.</p>

<h3 id="commands">commands</h3>

<p>Commands package is where the gist of Furnace lies. These commands represent the commands which are used through the CLI. Each
file has the implementation for one command. The structure is devised by this library: <a href="https://github.com/Yitsushi/go-commander">Yitsushi&rsquo;s Command Library</a>.
As of the writing of this post, the following commands are available:
- create - Creates a stack using the CloudFormation template file under ~/.config/go-furnace
- delete - Deletes the created Stack. Doesn&rsquo;t do anything if the stack doesn&rsquo;t exist
- push - Pushes an application to a stack
- status - Displays information about the stack
- delete-application - Deletes the CodeDeploy application and deployment group created by <code>push</code></p>

<p>These commands represent the heart of furnace. I would like to keep these to a minimum, but I do plan on adding more, like
<code>update</code> and <code>rollout</code>. Further details and help messages on these commands can be obtained by running: <code>./furnace help</code> or
<code>./furnace help create</code>.</p>

<pre><code class="language-bash">❯ ./furnace help push
Usage: furnace push appName [-s3]

Push a version of the application to a stack

Examples:
  furnace push
  furnace push appName
  furnace push appName -s3
  furnace push -s3
</code></pre>

<h3 id="config">config</h3>

<p>Contains the configuration loader and some project wide defaults which are as follows:
- Events for the plugin system - <code>pre-create</code>, <code>post-create</code>, <code>pre-delete</code>, <code>post-delete</code>.
- CodeDeploy role name - <code>CodeDeployServiceRole</code>. This is used if none is provided to locate the CodeDeploy IAM role.
- Wait frequency - Is the setting which controls how long the waiter should sleep in between status updates. Default is <code>1s</code>.
- Spinner - Is just the number of the spinner to use.
- Plugin registry - Is a map of functions to run for the above events.</p>

<p>Further more, config loads the CloudFormation template and checks if some necessary settings are present in the environment, exp:
the configuration folder under <code>~/.config/go-furnace</code>.</p>

<h3 id="utils">utils</h3>

<p>These are some helper functions which are used throughout the project. To list them:
- error_handler - Is a simple error handler. I&rsquo;m thinking of refactoring this one to some saner version.
- spinner - Sets up which spinner to use in the waiter function.
- waiter - Contains the verbose waiter introduced above under <a href="##Waiters">Waiters</a>.</p>

<h2 id="configuration-and-environment-variables">Configuration and Environment variables</h2>

<p>Furnace is a Go application, thus it doesn&rsquo;t have the luxury of Ruby or Python where the configuration files are usually bundled
with the app. But, it does have a standard for it. Usually, configurations reside in either of these two locations. Environment
Properties or|and configuration files under a fixed location ( i.e. HOME/.config/app-name ). Furnace employs both.</p>

<p>Settings like, region, stack name, enable plugin system, are under environment properties ( though this can change ), while the
CloudFormation template lives under <code>~/.config/go-furnace/</code>. Lastly it assumes some things, like the Deployment IAM role just
exists under the used AWS account. All these are loaded and handled by the config package described above.</p>

<h2 id="usage">Usage</h2>

<p>A typical scenario for Furnace would be the following:</p>

<ul>
<li>Setup your CloudFormation template or use the one provided. The one provided sets up a highly available and self healing setting
using Auto-Scaling and Load-Balancing with a single application instance. Edit this template to your liking than copy it to
<code>~/.config/go-furnace</code>.</li>
<li>Create the configured stack with <code>./furnace create</code>.</li>
<li>Create will ask for the parameters defined in the template. If defaults are setup, simply hitting enter will use these defaults.
Take note, that the provided template sets up SSH access via a provided key. If that key is not present in CF, you won&rsquo;t be able
to SSH into the created instance.</li>
<li>Once the stack is completed, the application is ready to be pushed. To do this, run: <code>./furnace push</code>. This will locate the
appropriate version of the app from S3 or GitHub and push that version to the instances in the Auto-Scaling group. To all of
them.</li>
</ul>

<h2 id="general-practices-applied-to-the-project">General Practices Applied to the Project</h2>

<h3 id="commands-1">Commands</h3>

<p>For each command the main entry point is the <code>execute</code> function. These functions are usually calling out the small chunks of
distributed methods. Logic was kept to a bare minimum ( probably could be simplified even further ) in the execute functions
mostly for testability and the likes. We will see that in a followup post.</p>

<h3 id="errors">Errors</h3>

<p>Errors are handled immediately and usually through a fatal. If any error occurs than the application is halted. In followup
versions this might become more granular. I.e. don&rsquo;t immediately stop the world, maybe try to recover, or create a Poller or
Re-Tryer, which tries a call again for a configured amount of times.</p>

<h3 id="output-colors">Output colors</h3>

<p>Not that important, but still&hellip; Aesthetics. Displaying data to the console in a nice way gives it some extra flare.</p>

<h3 id="makefile">Makefile</h3>

<p>This project works with a Makefile for various reasons. Later on, once the project might become more complex, a Makefile makes it
really easy to handle different ways of packaging the application. Currently, for example, it provides a <code>linux</code> target which will
make Go build the project for Linux architecture on any other Architecture i.e. cross-compiling.</p>

<p>It also provides an easy way to run unit tests with <code>make test</code> and installing with <code>make &amp;&amp; make install</code>.</p>

<h1 id="closing-words">Closing Words</h1>

<p>That is all for Part 2. Join me in Part 3 where I will talk about the experimental Plugin system that Furnace employs.</p>

<p>Thank you for reading!
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Testing new Hugo if posts are generated properly</title>
			<link>https://skarlso.github.io/2017/03/17/test-new-hugo/</link>
			<pubDate>Fri, 17 Mar 2017 09:09:00 +0100</pubDate>
			
			<guid>https://skarlso.github.io/2017/03/17/test-new-hugo/</guid>
			<description>Testing.</description>
			<content type="html"><![CDATA[<p>Testing.</p>
]]></content>
		</item>
		
		<item>
			<title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 1</title>
			<link>https://skarlso.github.io/2017/03/16/building-furnace-part-1/</link>
			<pubDate>Thu, 16 Mar 2017 21:49:00 +0100</pubDate>
			
			<guid>https://skarlso.github.io/2017/03/16/building-furnace-part-1/</guid>
			<description>Other posts: Part 2, Part 3, Part 4.
Building Furnace: Part 1 Intro Hi folks.
This is the first part of a 4 part series which talks about the process of building a middlish sized project in Go, with AWS. Including Unit testing and a experimental plugin feature.
The first part will talk about the AWS services used in brief and will contain a basic description for those who are not familiar with them.</description>
			<content type="html"><![CDATA[

<h1 id="other-posts">Other posts:</h1>

<p><a href="https://skarlso.github.io/2017/03/19/building-furnace-part-2/">Part 2</a>, <a href="https://skarlso.github.io/2017/03/22/building-furnace-part-3/">Part 3</a>, <a href="https://skarlso.github.io/2017/04/16/building-furnace-part-4/">Part 4</a>.</p>

<h1 id="building-furnace-part-1">Building Furnace: Part 1</h1>

<h1 id="intro">Intro</h1>

<p>Hi folks.</p>

<p>This is the first part of a 4 part series which talks about the process of building a middlish sized project in Go,
with AWS. Including Unit testing and a experimental plugin feature.</p>

<p>The first part will talk about the AWS services used in brief and will contain a basic description for those who are not familiar
with them. The second part will talk about the Go SDK and the project structure itself, how it can be used, improved, and how it can
help in everyday life. The third part will talk about the experimental plugin system, and finally, we will tackle unit testing AWS
in Go.</p>

<p>Let&rsquo;s begin, shall we?</p>

<h1 id="aws">AWS</h1>

<h2 id="cloudformation">CloudFormation</h2>

<p>If you haven&rsquo;t yet read about, or know off, AWS&rsquo; CloudFormation service, you can either go ahead and read the <a href="https://aws.amazon.com/cloudformation/">Documentation</a>
or read on for a very quick summary. If you are familiar with CF, you should skip ahead to <a href="##CodeDeploy">CodeDeploy</a> section.</p>

<p>CF is a service which bundles together other AWS services (for example: EC2, S3, ELB, ASG, RDS) into one, easily manageable stack.
After a stack has been created, all the resources can be handled as one, located, tagged and used via CF specific console commands.
It&rsquo;s also possible to define any number of parameters, so a stack can actually be very versatile. A parameter can be anything, from
SSH IP restriction to KeyPair names and list of tags to create or in what region the stack will be in.</p>

<p>To describe how these parts fit together, one must use a CloudFormation Template file which is either in JSON or in
YAML format. A simple example looks like this:</p>

<pre><code class="language-yaml">    Parameters:
      KeyName:
        Description: The EC2 Key Pair to allow SSH access to the instance
        Type: AWS::EC2::KeyPair::KeyName
    Resources:
      Ec2Instance:
        Type: AWS::EC2::Instance
        Properties:
          SecurityGroups:
          - Ref: InstanceSecurityGroup
          - MyExistingSecurityGroup
          KeyName:
            Ref: KeyName
          ImageId: ami-7a11e213
      InstanceSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Enable SSH access via port 22
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: 0.0.0.0/0
</code></pre>

<p>There are a myriad of these template samples <a href="https://aws.amazon.com/cloudformation/aws-cloudformation-templates/">here</a>.</p>

<p>I&rsquo;m not going to explain this in too much detail. Parameters define the parameters, and resources define all the AWS services which
we would like to configure. Here we can see, that we are creating an EC2 instance with a custom Security Group plus and already
existing security group. ImageId is the AMI which will be used for the EC2 instance. The InstanceSecurityGroup is only defining
some SSH access to the instance.</p>

<p>That is pretty much it. This can become bloated relatively quickly once, VPCs, ELBs, and ASGs come into play. And CloudFormation
templates can also contain simple logical switches, like, conditions, ref for variables, maps and other shenanigans.</p>

<p>For example consider this part in the above example:</p>

<pre><code class="language-yaml">      KeyName:
        Ref: KeyName
</code></pre>

<p>Here, we use the <code>KeyName</code> parameter as a Reference Value which will be interpolated to the real value, or the default one, as the
template gets processed.</p>

<h2 id="codedeploy">CodeDeploy</h2>

<p>If you haven&rsquo;t heard about CodeDeploy yet, please browse the relevant <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/welcome.html">Documentation</a>
or follow along for a &ldquo;quick&rdquo; description.</p>

<p>CodeDeploy just does what the name says. It deploys code. Any kind of code, as long as the deployment process is described in a
file called <code>appspec.yml</code>. It can be easy as coping a file to a specific location or incredibly complex with builds of various
kinds.</p>

<p>For a simple example look at this configuration:</p>

<pre><code class="language-yaml">    version: 0.0
    os: linux
    files:
      - source: /index.html
        destination: /var/www/html/
      - source: /healthy.html
        destination: /var/www/html/
    hooks:
      BeforeInstall:
        - location: scripts/install_dependencies
          timeout: 300
          runas: root
        - location: scripts/clean_up
          timeout: 300
          runas: root
        - location: scripts/start_server
          timeout: 300
          runas: root
      ApplicationStop:
        - location: scripts/stop_server
          timeout: 300
          runas: root
</code></pre>

<p>CodeDeploy applications have hooks and life-cycle events which can be used to control the deployment process of an like, starting
the WebServer; making sure files are in the right location; copying files, running configuration management software like puppet,
ansible or chef; etc, etc.</p>

<p>What can be done in an <code>appspec.yml</code> file is described here: <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/app-spec-ref.html">Appspec Reference Documentation</a>.</p>

<p>Deployment happens in one of two ways:</p>

<h3 id="github">GitHub</h3>

<p>If the preferred way to deploy the application is from GitHub a commit hash must be used to identify which &ldquo;version&rdquo; of the
application is to be deployed. For example:</p>

<pre><code class="language-go">    rev = &amp;codedeploy.RevisionLocation{
        GitHubLocation: &amp;codedeploy.GitHubLocation{
            CommitId:   aws.String(&quot;kajdf94j0f9k309klksjdfkj&quot;),
            Repository: aws.String(&quot;Skarlso/furnace-codedeploy-app&quot;),
        },
        RevisionType: aws.String(&quot;GitHub&quot;),
    }
</code></pre>

<p>Commit Id is the hash of the latest release and repository is the full account/repository pointing to the application.</p>

<h3 id="s3">S3</h3>

<p>The second way is to use an S3 bucket. The bucket will contain an archived version of the application with a given extension. I&rsquo;m
saying given extension, because it has to be specified like this (and can be either &lsquo;zip&rsquo;, or &lsquo;tar&rsquo; or &lsquo;tgz&rsquo;):</p>

<pre><code class="language-go">    rev = &amp;codedeploy.RevisionLocation{
        S3Location: &amp;codedeploy.S3Location{
            Bucket:     aws.String(&quot;my_codedeploy_bucket&quot;),
            BundleType: aws.String(&quot;zip&quot;),
            Key:        aws.String(&quot;my_awesome_app&quot;),
            Version:    aws.String(&quot;VersionId&quot;),
        },
        RevisionType: aws.String(&quot;S3&quot;),
    }
</code></pre>

<p>Here, we specify the bucket name, the extension, the name of the file and an optional version id, which can be ignored.</p>

<h3 id="deploying">Deploying</h3>

<p>So how does code deploy get either of the applications to our EC2 instances? It uses an agent which is running on all of the
instances that we create. In order to do this, the agent needs to be present on our instance. For linux this can be achieved with
the following UserData (UserData in CF is the equivalent of a bootsrap script):</p>

<pre><code class="language-bash">    &quot;UserData&quot; : {
        &quot;Fn::Base64&quot; : { &quot;Fn::Join&quot; : [ &quot;\n&quot;, [
            &quot;#!/bin/bash -v&quot;,
            &quot;sudo yum -y update&quot;,
            &quot;sudo yum -y install ruby wget&quot;,
            &quot;cd /home/ec2-user/&quot;,
            &quot;wget https://aws-codedeploy-eu-central-1.s3.amazonaws.com/latest/install&quot;,
            &quot;chmod +x ./install&quot;,
            &quot;sudo ./install auto&quot;,
            &quot;sudo service codedeploy-agent start&quot;,
        ] ] }
    }
</code></pre>

<p>A simple user data configuration in the CloudFormation template will make sure that every instance that we create will have the
CodeDeploy agent running and waiting for instructions. This agent is self updating. Which can cause some trouble if AWS releases a
broken agent. However unlikely, it can happen. Never the less, once installed, it&rsquo;s no longer a concern to be bothered with.</p>

<p>It communications on HTTPS port 443.</p>

<p>CodeDeploy identifies instances which need to be updated according to our preferences, by tagging the EC2 and Auto Scaling groups.
Tagging happens in the CloudFormation template through the AutoScalingGroup settings like this:</p>

<pre><code class="language-json">    &quot;Tags&quot; : [
        {
            &quot;Key&quot; : &quot;fu_stage&quot;,
            &quot;Value&quot; : { &quot;Ref&quot;: &quot;AWS::StackName&quot; },
            &quot;PropagateAtLaunch&quot; : true
        }
    ]
</code></pre>

<p>This will give the EC2 instance a tag called <code>fu_stage</code> with value equaling to the name of the stack. Once this is done, CodeDeploy
looks like this:</p>

<pre><code class="language-go">    params := &amp;codedeploy.CreateDeploymentInput{
        ApplicationName:               aws.String(appName),
        IgnoreApplicationStopFailures: aws.Bool(true),
        DeploymentGroupName:           aws.String(appName + &quot;DeploymentGroup&quot;),
        Revision:                      revisionLocation(),
        TargetInstances: &amp;codedeploy.TargetInstances{
            AutoScalingGroups: []*string{
                aws.String(&quot;AutoScalingGroupPhysicalID&quot;),
            },
            TagFilters: []*codedeploy.EC2TagFilter{
                {
                    Key:   aws.String(&quot;fu_stage&quot;),
                    Type:  aws.String(&quot;KEY_AND_VALUE&quot;),
                    Value: aws.String(config.STACKNAME),
                },
            },
        },
        UpdateOutdatedInstancesOnly: aws.Bool(false),
    }
</code></pre>

<p>CreateDeploymentInput is the entire parameter list that is needed in order to identify instances to deploy code to. We can see
here that it looks for an AutoScalingGroup by Physical Id and the tag labeled <code>fu_stage</code>. Once found, it will use
<code>UpdateOutdatedInstancesOnly</code> to determine if an instance needs to be updated or not. Set to false means, it always updates.</p>

<h1 id="furnace">Furnace</h1>

<p>Where does <a href="https://github.com/Skarlso/go-furnace">Furnace</a> fit in, in all of this? Furnace provides a very easy mechanism to create,
delete and push code to a CloudFormation stack using CodeDeploy, and a couple of environment properties. Furnace <code>create</code> will
create a CloudFormation stack according to the provided template, all the while asking for the parameters defined in it for
flexibility. <code>delete</code> will remove the stack and all affiliated resources except for the created CodeDeploy application. For that,
there is <code>delete-application</code>. <code>status</code> will display information about the stack: Outputs, Parameters, Id, Name, and status.
Something like this:</p>

<pre><code class="language-bash">    2017/03/16 21:14:37 Stack state is:  {
      Capabilities: [&quot;CAPABILITY_IAM&quot;],
      CreationTime: 2017-03-16 20:09:38.036 +0000 UTC,
      DisableRollback: false,
      Outputs: [{
          Description: &quot;URL of the website&quot;,
          OutputKey: &quot;URL&quot;,
          OutputValue: &quot;http://FurnaceSt-ElasticL-ID.eu-central-1.elb.amazonaws.com&quot;
        }],
      Parameters: [
        {
          ParameterKey: &quot;KeyName&quot;,
          ParameterValue: &quot;UserKeyPair&quot;
        },
        {
          ParameterKey: &quot;SSHLocation&quot;,
          ParameterValue: &quot;0.0.0.0/0&quot;
        },
        {
          ParameterKey: &quot;CodeDeployBucket&quot;,
          ParameterValue: &quot;None&quot;
        },
        {
          ParameterKey: &quot;InstanceType&quot;,
          ParameterValue: &quot;t2.nano&quot;
        }
      ],
      StackId: &quot;arn:aws:cloudformation:eu-central-1:9999999999999:stack/FurnaceStack/asdfadsf-adsfa3-432d-a-fdasdf&quot;,
      StackName: &quot;FurnaceStack&quot;,
      StackStatus: &quot;CREATE_COMPLETE&quot;
    }
</code></pre>

<p>( This will later be improved to include created resources as well. )</p>

<p>Once the stack is <code>CREATE_COMPLETE</code> a simple <code>push</code> will deliver our application on each instance in the stack. We will get into
more detail about how these commands are working in Part 2 of this series.</p>

<h1 id="final-words">Final Words</h1>

<p>This is it for now.</p>

<p>Join me next time when I will talk about the AWS Go SDK and its intricacies and we will start to look at the basics of Furnace.</p>

<p>As always,
Thanks for reading!
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Images on older posts</title>
			<link>https://skarlso.github.io/2017/03/03/images-on-old-posts/</link>
			<pubDate>Fri, 03 Mar 2017 18:20:00 +0100</pubDate>
			
			<guid>https://skarlso.github.io/2017/03/03/images-on-old-posts/</guid>
			<description>Hi folks.
Just a quick headsup, that older posts and images, may have been lost unfortunately, because I made the terrible mistake, when I migrated over from my old blog, that I forgot to download all the images from the remote host.
For lack of options, I deleted the images. :/ Sorry for the inconvencience!
Gergely.</description>
			<content type="html"><![CDATA[<p>Hi folks.</p>

<p>Just a quick headsup, that older posts and images, may have been lost unfortunately, because I made the terrible mistake, when I
migrated over from my old blog, that I forgot to download all the images from the remote host.</p>

<p>For lack of options, I deleted the images. :/ Sorry for the inconvencience!</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>How to HTTPS with Hugo LetsEncrypt and HAProxy</title>
			<link>https://skarlso.github.io/2017/02/15/how-to-https-with-hugo-letsencrypt-haproxy/</link>
			<pubDate>Wed, 15 Feb 2017 19:20:00 +0100</pubDate>
			
			<guid>https://skarlso.github.io/2017/02/15/how-to-https-with-hugo-letsencrypt-haproxy/</guid>
			<description>Intro Hi folks.
Today, I would like to write about how to do HTTPS for a website, without the need to buy a certificate and set it up via your DNS provider. Let&amp;rsquo;s begin.
Abstract What you will achieve by the end of this post: - Every call to HTTP will be redirected to HTTPS via haproxy. - HTTPS will be served with Haproxy and LetsEncrypt as the Certificate provider.</description>
			<content type="html"><![CDATA[

<h1 id="intro">Intro</h1>

<p>Hi folks.</p>

<p>Today, I would like to write about how to do HTTPS for a website, without the need to buy a certificate and set it up via your DNS provider. Let&rsquo;s begin.</p>

<h2 id="abstract">Abstract</h2>

<p>What you will achieve by the end of this post:
- Every call to HTTP will be redirected to HTTPS via <a href="https://www.haproxy.com">haproxy</a>.
- HTTPS will be served with Haproxy and <a href="https://letsencrypt.org">LetsEncrypt</a> as the Certificate provider.
- Automatically update the certificate before its expiration.
- No need for IPTable rules to route 8080 to 80.
- Traffic to and from your page will be encrypted.
- This all will cost you nothing.</p>

<p>I will use a static website generator for this called <a href="https://gohugo.io">Hugo</a> which, if you know me, is my favorite generator tool. These instructions
are for haproxy and hugo, if you wish to use apache and nginx for example, you&rsquo;ll have to dig for the corresponding settings for letsencrypt and certbot.</p>

<h1 id="what-you-will-need">What You Will Need</h1>

<h2 id="hugo">Hugo</h2>

<p>You will need hugo, which can be downloaded from here: <a href="https://gohugo.io">Hugo</a>. A simple website will be enough. For themes, you can take a look
at the humongous list located here: <a href="http://themes.gohugo.io/">HugoThemes</a>.</p>

<h2 id="haproxy">Haproxy</h2>

<p>Haproxy can be found here: <a href="https://www.haproxy.com">Haproxy</a>. There are a number of options to install haproxy. I chose a simple
<code>apt-get install haproxy</code>.</p>

<h2 id="let-s-encrypt">Let&rsquo;s Encrypt</h2>

<p>Information about Let&rsquo;s Encrypt can be found on their website here: <a href="https://letsencrypt.org">Let&rsquo;s Encrypt</a>.
Let&rsquo;s Encrypt&rsquo;s client is now called <a href="https://certbot.eff.org/">Certbot</a> which is used to generate the certificates. To get the latest code
you either clone the repository <a href="https://github.com/certbot/certbot">Certbot</a>, or use an auto downloader:</p>

<pre><code class="language-bash">user@webserver:~$ wget https://dl.eff.org/certbot-auto
user@webserver:~$ chmod a+x ./certbot-auto
user@webserver:~$ ./certbot-auto --help
</code></pre>

<p>Either way, I&rsquo;m using the current latest version: <em>v0.11.1</em>.</p>

<h2 id="sudo">Sudo</h2>

<p>This goes without saying, but that these operations will require you to have sudo privileges. I suggest staying in sudo for ease of use.
This means that the commands, I&rsquo;ll write here, will assume you are in <code>sudo su</code> mode thus no <code>sudo</code> prefix will be used.</p>

<h2 id="portforwarding">Portforwarding</h2>

<p>In order for your website to work under https this guide assumes that you have port <em>80</em> and <em>443</em> open on your router / network security group.</p>

<h1 id="setup">Setup</h1>

<h2 id="single-server-environment">Single Server Environment</h2>

<p>It is possible for haproxy, certbot and your website to run on designated servers. Haproxy&rsquo;s abilities allows to define multiple server sources.
In this guide, my haproxy, website and certbot will all run on the same server; thus redirecting to 127.0.0.1 and local ips. This is more
convenient, because otherwise the haproxy IP would have to be a permanent local/remote ip. Or an automated script would have to be setup which is
notified upon IP change and updates the ip records.</p>

<h2 id="creating-a-certificate">Creating a Certificate</h2>

<p>Diving in, the first thing you will require is a certificate. A certificate will allow for encrypted traffic and an authenticated website.
Let&rsquo;s Encrypt which is basically functioning as an independent, free, automated CA (Certificate Authority). Usually,
the process would be to pay a CA to give you a signed, generated certificate for your website, and you would have to set that up with your DNS
provider. Let&rsquo;s Encrypt has that all automated, and free of any charge. Neat.</p>

<h3 id="certbot">Certbot</h3>

<p>So let&rsquo;s get started. Clone the repository into <code>/opt/letsencrypt</code> for further usage.</p>

<pre><code class="language-bash">git clone https://github.com/certbot/certbot /opt/letsencrypt
</code></pre>

<h3 id="generating-the-certificate">Generating the certificate</h3>

<p>Make sure that there is nothing listening on ports: 80, 443. To list usage:</p>

<pre><code class="language-bash">netstat -nlt | grep ':80\s'
netstat -nlt | grep ':443\s'
</code></pre>

<p>Kill everything that might be on these ports, like apache2 and httpd. These will be used by haproxy and certbot for challenges
and redirecting traffic.</p>

<p>You will be creating a <a href="https://certbot.eff.org/docs/using.html#standalone">standalone</a> certificate. This is the reason we need port 80 and 443 open.
Run certbot by defining the <code>certonly</code> and <code>--standalone</code> flags. For domain validation you are going to use port 443, tls-sni-01 challenge.
The whole command looks like this:</p>

<pre><code class="language-bash">cd /opt/letsencrypt
./certbot-auto certonly --standalone -d example.com -d www.example.com
</code></pre>

<p>If this displays something like, &ldquo;couldn&rsquo;t connect&rdquo; you probably still have something running on a port it tries to use. The
generated certificate will be located under <code>/etc/letsencrypt/archive</code> and <code>/etc/letsencrypt/keys</code> while <code>/etc/letsencrypt/live</code> is
a symlink to the latest version of the cert. It&rsquo;s wise to not copy these away from here, since the live link is always updated to the latest version.
Our script will handle haproxy, which requires one cert file made from privkey + fullchain|.pem files.</p>

<h3 id="setup-auto-renewal">Setup Auto-Renewal</h3>

<p>Let&rsquo;s Encrypt issues short lived certificates (90 days). In order to not have to do this procedure every 89 days, certbot provides a nifty
command called <code>renew</code>. However, for the cert to be generated, the port 443 has to be open. This means, haproxy needs to be stopped before
doing the renew. Now, you COULD write a script which stops it, and after the certificate has been renewed, starts it again, but certbot has
you covered again in that department. It provides hooks called <code>pre-hook</code> and <code>post-hook</code>. Thus, all you have to write is the following:</p>

<pre><code class="language-bash">#!/bin/bash

cd /opt/letsencrypt
./certbot-auto renew --pre-hook &quot;service haproxy stop&quot; --post-hook &quot;service haproxy start&quot;
DOMAIN='example.com' sudo -E bash -c 'cat /etc/letsencrypt/live/$DOMAIN/fullchain.pem /etc/letsencrypt/live/$DOMAIN/privkey.pem &gt; /etc/haproxy/certs/$DOMAIN.pem'
</code></pre>

<p>If you would like to test it first, just include the switch <code>--dry-run</code>.</p>

<p>In case of success you should see something like this:</p>

<pre><code class="language-bash">root@raspberrypi:/opt/letsencrypt# ./certbot-auto renew --pre-hook &quot;service haproxy stop&quot; --post-hook &quot;service haproxy start&quot; --dry-run
Saving debug log to /var/log/letsencrypt/letsencrypt.log

-------------------------------------------------------------------------------
Processing /etc/letsencrypt/renewal/example.com.conf
-------------------------------------------------------------------------------
Cert not due for renewal, but simulating renewal for dry run
Running pre-hook command: service haproxy stop
Renewing an existing certificate
Performing the following challenges:
tls-sni-01 challenge for example.com
Waiting for verification...
Cleaning up challenges
Generating key (2048 bits): /etc/letsencrypt/keys/0002_key-certbot.pem
Creating CSR: /etc/letsencrypt/csr/0002_csr-certbot.pem
** DRY RUN: simulating 'certbot renew' close to cert expiry
**          (The test certificates below have not been saved.)

Congratulations, all renewals succeeded. The following certs have been renewed:
  /etc/letsencrypt/live/example.com/fullchain.pem (success)
** DRY RUN: simulating 'certbot renew' close to cert expiry
**          (The test certificates above have not been saved.)
Running post-hook command: service haproxy start
</code></pre>

<p>Put this script into a crontab to run every 89 days like this:</p>

<pre><code class="language-bash">crontab -e
# Open crontab for edit and paste in this line
* * */89 * * /root/renew-cert.sh
</code></pre>

<p>And you should be all set. Now we move on the configure haproxy to redirect and to use our newly generated certificate.</p>

<h2 id="haproxy-1">Haproxy</h2>

<p>Like I said, haproxy requires a single file certificate in order to encrypt traffic to and from the website. To do this, we need to combine
<code>privkey.pem</code> and <code>fullchain.pem</code>. As of this writing, there are a couple of solutions to automate this via a post hook on renewal. And also,
there is an open ticket with certbot to implement a simpler solution located here: <a href="https://github.com/certbot/certbot/issues/1201">https://github.com/certbot/certbot/issues/1201</a>. I, for now,
have chosen to simply concatenate the two files together with <code>cat</code> like this:</p>

<pre><code class="language-bash">DOMAIN='example.com' sudo -E bash -c 'cat /etc/letsencrypt/live/$DOMAIN/fullchain.pem /etc/letsencrypt/live/$DOMAIN/privkey.pem &gt; /etc/haproxy/certs/$DOMAIN.pem'
</code></pre>

<p>It will create a combined cert under <code>/etc/haproxy/certs/example.com.pem</code>.</p>

<h3 id="haproxy-configuration">Haproxy configuration</h3>

<p>If haproxy happens to be running, stop it with <code>service haproxy stop</code>.</p>

<p>First, save the default configuration file: <code>cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.old</code>. Now, overwrite the old one with this
new one (comments about what each setting does, are in-lined; they are safe to copy):</p>

<pre><code class="language-bash">global
    daemon
    # Set this to your desired maximum connection count.
    maxconn 2048
    # https://cbonte.github.io/haproxy-dconv/configuration-1.5.html#3.2-tune.ssl.default-dh-param
    # bit setting for Diffie - Hellman key size.
    tune.ssl.default-dh-param 2048

defaults
    option forwardfor
    option http-server-close

    log     global
    mode    http
    option  httplog
    option  dontlognull
    timeout connect 5000
    timeout client  50000
    timeout server  50000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# In case it's a simple http call, we redirect to the basic backend server
# which in turn, if it isn't an SSL call, will redirect to HTTPS that is
# handled by the frontend setting called 'www-https'.
frontend www-http
    # Redirect HTTP to HTTPS
    bind *:80
    # Adds http header to end of end of the HTTP request
    reqadd X-Forwarded-Proto:\ http
    # Sets the default backend to use which is defined below with name 'www-backend'
    default_backend www-backend

# If the call is HTTPS we set a challenge to letsencrypt backend which
# verifies our certificate and than direct traffic to the backend server
# which is the running hugo site that is served under https if the challenge succeeds.
frontend www-https
    # Bind 443 with the generated letsencrypt cert.
    bind *:443 ssl crt /etc/haproxy/certs/skarlso.com.pem
    # set x-forward to https
    reqadd X-Forwarded-Proto:\ https
    # set X-SSL in case of ssl_fc &lt;- explained below
    http-request set-header X-SSL %[ssl_fc]
    # Select a Challenge
    acl letsencrypt-acl path_beg /.well-known/acme-challenge/
    # Use the challenge backend if the challenge is set
    use_backend letsencrypt-backend if letsencrypt-acl
    default_backend www-backend

backend www-backend
   # Redirect with code 301 so the browser understands it is a redirect. If it's not SSL_FC.
   # ssl_fc: Returns true when the front connection was made via an SSL/TLS transport
   # layer and is locally deciphered. This means it has matched a socket declared
   # with a &quot;bind&quot; line having the &quot;ssl&quot; option.
   redirect scheme https code 301 if !{ ssl_fc }
   # Server for the running hugo site.
   server www-1 192.168.0.17:8080 check

backend letsencrypt-backend
   # Lets encrypt backend server
   server letsencrypt 127.0.0.1:54321
</code></pre>

<p>Save this, and start haproxy with <code>services haproxy start</code>. If you did everything right, it should say nothing.
If, however, there went something wrong with starting the proxy, it usually displays something like this:</p>

<pre><code class="language-bash">Job for haproxy.service failed. See 'systemctl status haproxy.service' and 'journalctl -xn' for details.
</code></pre>

<p>You can also gather some more information on what went wrong from <code>less /var/log/haproxy.log</code>.</p>

<h1 id="starting-the-server">Starting the Server</h1>

<p>Everything should be ready to go. Hugo has the concept of a baseUrl. Everything that it loads, and tries to access
will be prefixed with it. You can either set it through it&rsquo;s <code>config.yaml</code> file, or from the command line.</p>

<p>To start the server, call this from the site&rsquo;s root folder:</p>

<pre><code class="language-bash">hugo server --bind=192.168.x.x --port=8080 --baseUrl=https://example.com --appendPort=false
</code></pre>

<p>Interesting thing here to note is <code>https</code> and the port. The IP could be 127.0.0.1 as well. I experienced problems though
with not binding to network IP when I was debugging the site from a different laptop on the same network.</p>

<p>Once the server is started, you should be able to open up your website from a different browser, not on your local network,
and see that it has a valid certificate installed. In Chrome you should see a green icon telling you that the cert is valid.</p>

<h1 id="last-words">Last Words</h1>

<p>And that is all. The site should be up and running and the proxy should auto-renew your site&rsquo;s certificate. If you happened to
change DNS or change the server, you&rsquo;ll have to reissue the certificate.</p>

<p>Thanks for reading!
Any questions or trouble setting something up, please feel free to leave a comment.</p>

<p>Cheers,
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>How to do Google Sign-In with Go - Part 2</title>
			<link>https://skarlso.github.io/2016/11/02/google-signin-with-go-part2/</link>
			<pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2016/11/02/google-signin-with-go-part2/</guid>
			<description>Intro Hi Folks.
This is a follow up on my previous post about Google Sign-In. In this post we will discover what to do with the information retrieved in the first encounter, which you can find here: Google Sign-In Part 1.
Forewords The Project Everything I did in the first post, and that I&amp;rsquo;m going to do in this example, can be found in this project: Google-OAuth-Go-Sample.
Just to recap, we left off previously on the point where we successfully obtained information about the user, with a secure token and a session initiated with them.</description>
			<content type="html"><![CDATA[

<h1 id="intro">Intro</h1>

<p>Hi Folks.</p>

<p>This is a follow up on my previous post about Google Sign-In. In this post we will discover what to do with the information retrieved in the first encounter, which you can find here: <a href="http://skarlso.github.io/2016/06/12/google-signin-with-go/">Google Sign-In Part 1</a>.</p>

<h1 id="forewords">Forewords</h1>

<h2 id="the-project">The Project</h2>

<p>Everything I did in the first post, and that I&rsquo;m going to do in this example, can be found in this project: <a href="https://github.com/Skarlso/google-oauth-go-sample">Google-OAuth-Go-Sample</a>.</p>

<p>Just to recap, we left off previously on the point where we successfully obtained information about the user, with a secure token and a session initiated with them. Google nicely enough provided us with some details which we can use. This information was in JSON format and looked something like this:</p>

<pre><code class="language-json">{
  &quot;sub&quot;: &quot;1111111111111111111111&quot;,
  &quot;name&quot;: &quot;Your Name&quot;,
  &quot;given_name&quot;: &quot;Your&quot;,
  &quot;family_name&quot;: &quot;Name&quot;,
  &quot;profile&quot;: &quot;https://plus.google.com/1111111111111111111111&quot;,
  &quot;picture&quot;: &quot;https://lh3.googleusercontent.com/asdfadsf/AAAAAAAAAAI/Aasdfads/Xasdfasdfs/photo.jpg&quot;,
  &quot;email&quot;: &quot;your@gmail.com&quot;,
  &quot;email_verified&quot;: true,
  &quot;gender&quot;: &quot;male&quot;
}
</code></pre>

<p>In my example, to keep things simple, I will use the email address since that has to be unique in the land of Google. You could assign an ID to the user, and you could complicate things even further, but my goal is not to write an academic paper about cryptography here.</p>

<h1 id="implementation">Implementation</h1>

<h2 id="making-something-useful-out-of-the-data">Making something useful out of the data</h2>

<p>In order for the app to recognise a user it must save some data about the user. I&rsquo;m doing that in MongoDB right now, but that could be any form of persistence layer, like, SQLite3, BoltDB, PostgresDB, etc.</p>

<h3 id="after-successful-user-authorization">After successful user authorization</h3>

<p>Once the user used google to provide us with sufficient information about him/herself, we can retrieve data about that user from our records. The data could be anything that is linked to our unique identifier like: Character Profile, Player Information, Status, Last Logged-In, etcetc. For this, there are two things that need to happen after authorization: Save/Load user information and initiate a session.</p>

<p>The session can be in the form of a cookie, or a Redis storage, or URL re-writing. I&rsquo;m choosing a cookie here.</p>

<h3 id="save-load-user-information">Save / Load user information</h3>

<p>All I&rsquo;m doing is a simple, <em>returning / new</em> user handling. The concept is simple. If the email isn&rsquo;t saved, we save it. If it&rsquo;s saved, we set a logic to our page render to greet the returning user.</p>

<p>In the <code>AuthHandler</code> I&rsquo;m doing the following:</p>

<pre><code class="language-go">...
seen := false
db := database.MongoDBConnection{}
if _, mongoErr := db.LoadUser(u.Email); mongoErr == nil {
    seen = true
} else {
    err = db.SaveUser(&amp;u)
    if err != nil {
        log.Println(err)
        c.HTML(http.StatusBadRequest, &quot;error.tmpl&quot;, gin.H{&quot;message&quot;: &quot;Error while saving user. Please try again.&quot;})
        return
    }
}
c.HTML(http.StatusOK, &quot;battle.tmpl&quot;, gin.H{&quot;email&quot;: u.Email, &quot;seen&quot;: seen})
...
</code></pre>

<p>Let&rsquo;s break this down a bit. There is a db connection here, which calls a function that either returns an error, or it doesn&rsquo;t. If it doesn&rsquo;t, that means we have our user. If it does, it means we have to save the user. This is a very simple case (disregard for now, that the error could be something else as well (If you can&rsquo;t get passed that, you could type check the error or check if the returned record contains the requested user information instead of checking for an error.)).</p>

<p>The template is than rendered depending on the <code>seen</code> boolean like this:</p>

<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;link rel=&quot;icon&quot;
      type=&quot;image/png&quot;
      href=&quot;/img/favicon.ico&quot; /&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/main.css&quot;&gt;
  &lt;/head&gt;
  &lt;body&gt;
    {{if .seen}}
        &lt;h1&gt;Welcome back to the battlefield '{{ .email }}'.&lt;/h1&gt;
    {{else}}
        &lt;h1&gt;Welcome to the battlefield '{{ .email }}'.&lt;/h1&gt;
    {{end}}
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>You can see here, that if <code>seen</code> is <em>true</em> the header message will say: &ldquo;Welcome <em>back</em>&hellip;&ldquo;.</p>

<h3 id="initiating-a-session">Initiating a session</h3>

<p>When the user is successfully authenticated, we activate a session so that the user can access pages that require authorization. Here, I have to mention that I&rsquo;m using <a href="https://github.com/gin-gonic/gin">Gin</a>, so restricted end-points are made with groups which require a middleware.</p>

<p>As I mentioned earlier, I&rsquo;m using cookies as session handlers. For this, a new session store has to be created with some secure token. This is achieved with the following code fragments ( note that I&rsquo;m using a Gin session middleware which uses gorilla&rsquo;s session handler located here: <a href="https://github.com/gin-gonic/contrib">Gin-Gonic(Sessions)</a>):</p>

<pre><code class="language-go">// RandToken in handlers.go:
// RandToken generates a random @l length token.
func RandToken(l int) string {
	b := make([]byte, l)
	rand.Read(b)
	return base64.StdEncoding.EncodeToString(b)
}

// quest.go:
// Create the cookie store in main.go.
store := sessions.NewCookieStore([]byte(handlers.RandToken(64)))
store.Options(sessions.Options{
    Path:   &quot;/&quot;,
    MaxAge: 86400 * 7,
})

// using the cookie store:
router.Use(sessions.Sessions(&quot;goquestsession&quot;, store))
</code></pre>

<p>After this <code>gin.Context</code> lets us access this session store by doing <code>session := sessions.Default(c)</code>. Now, create a session variable called <code>user-id</code> like this:</p>

<pre><code class="language-go">session.Set(&quot;user-id&quot;, u.Email)
err = session.Save()
if err != nil {
    log.Println(err)
    c.HTML(http.StatusBadRequest, &quot;error.tmpl&quot;, gin.H{&quot;message&quot;: &quot;Error while saving session. Please try again.&quot;})
    return
}
</code></pre>

<p>Don&rsquo;t forget to <code>save</code> the session. ;) That is it. If I restart the server, the cookie won&rsquo;t be usable any longer, since it will generate a new token for the cookie store. The user will have to log in again. <strong>Note</strong>: It might be that you&rsquo;ll see something like this, from <code>session</code>: <code>[sessions] ERROR! securecookie: the value is not valid</code>. You can ignore this error.</p>

<h2 id="restricting-access-to-certain-end-points-with-the-auth-middleware">Restricting access to certain end-points with the auth Middleware™</h2>

<p>Now, that our session is alive, we can use it to restrict access to some part of the application. With Gin, it looks like this:</p>

<pre><code class="language-go">authorized := router.Group(&quot;/battle&quot;)
authorized.Use(middleware.AuthorizeRequest())
{
    authorized.GET(&quot;/field&quot;, handlers.FieldHandler)
}
</code></pre>

<p>This creates a grouping of end-points under <code>/battle</code>. Which means, everything under <code>/battle</code> will only be accessible if the middleware passed to the <code>Use</code> function calls the next handler in the chain. If it aborts the call chain, the end-point will not be accessible. My middleware is pretty simple, but it gets the job done:</p>

<pre><code class="language-go">// AuthorizeRequest is used to authorize a request for a certain end-point group.
func AuthorizeRequest() gin.HandlerFunc {
	return func(c *gin.Context) {
		session := sessions.Default(c)
		v := session.Get(&quot;user-id&quot;)
		if v == nil {
			c.HTML(http.StatusUnauthorized, &quot;error.tmpl&quot;, gin.H{&quot;message&quot;: &quot;Please log in.&quot;})
			c.Abort()
		}
		c.Next()
	}
}
</code></pre>

<p>Note, that this only check if <code>user-id</code> is set or not. That&rsquo;s certainly not enough for a secure application. Its only supposed to be a simple example of the mechanics of the auth middleware. Also, the session usually contains more than one parameter. It&rsquo;s more likely that it contains several variables, which describe the user including a state for CORS protection. For CORS I&rsquo;d recommend using <a href="https://github.com/rs/cors">rs/cors</a>.</p>

<p>If you would try to access <a href="http://127.0.0.1:9090/battle/field">http://127.0.0.1:9090/battle/field</a> without logging in, you&rsquo;d be redirected to an <code>error.tmpl</code> with the message: <strong>Please log in.</strong>.</p>

<h1 id="final-words">Final Words</h1>

<p>That&rsquo;s pretty much it. Important parts are:</p>

<ul>
<li>Saving the right information</li>
<li>Secure cookie store</li>
<li>CORS for sessions</li>
<li>Checks of the users details in the cookie</li>
<li>Authorised end-points</li>
<li>Session handling</li>
</ul>

<p>Any questions, remarks, ideas, are very welcomed in the comment section. There are plenty of very nice Go frameworks which do Google OAuth2 out of the box. I recommend using them, as they save you a lot of legwork.</p>

<p>Thank you for reading!
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>RScrap scraper</title>
			<link>https://skarlso.github.io/2016/10/06/rscrap-ruby-scraping-with-cronjob-scripts/</link>
			<pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2016/10/06/rscrap-ruby-scraping-with-cronjob-scripts/</guid>
			<description>Intro Hey folks.
So, there is this project called Huginn which I absolutely love.
But the thing is, that for a couple of scrappers ( at least for me ), I don&amp;rsquo;t want to spin up a whole rails app.
Hence, I&amp;rsquo;ve come up with RScrap. Which is a bunch of Ruby scripts run as cron jobs on a raspberry pi. And because I dislike emails as well, and most of the time, I don&amp;rsquo;t read them, I opted for a nicer solution.</description>
			<content type="html"><![CDATA[

<h1 id="intro">Intro</h1>

<p>Hey folks.</p>

<p>So, there is this project called <a href="https://github.com/cantino/huginn">Huginn</a> which I absolutely love.</p>

<p>But the thing is, that for a couple of scrappers ( at least for me ), I don&rsquo;t want to spin up a whole rails app.</p>

<p>Hence, I&rsquo;ve come up with <a href="https://github.com/Skarlso/rscrap">RScrap</a>. Which is a bunch of Ruby scripts run as cron jobs on a raspberry pi. And because I dislike emails as well, and most of the time, I don&rsquo;t read them, I opted for a nicer solution. Enter the world of <a href="https://telegram.org">Telegram</a>. They provide you with the ability to create bots. You basically get an API key, and than using that key, you can send private messages, or even create an interactive bot which you can send messages too.</p>

<p>In my simple example, I&rsquo;m using it to send private messages to myself, but I could just as well, make it interactive and than tell it to run one of the scripts.</p>

<h1 id="the-code">The Code</h1>

<p>Let&rsquo;s take a look at what we got.</p>

<h2 id="the-main-scraper">The main scraper</h2>

<p>The main scraper, is simply bunch of convenience methods that wrap handling and working with the database and the telegram bot. That&rsquo;s all. It&rsquo;s very simple. Very short. The Telegram part is just this bit:</p>

<pre><code class="language-ruby">def send_message(text)
  Telegram::Bot::Client.run(@token) do |bot|
    bot.api.send_message(chat_id: @id, text: text)
  end
end
</code></pre>

<p>Straightforward. Creating an interactive bot, would look something like this:</p>

<pre><code class="language-ruby">#!/usr/bin/env ruby
require 'telegram/bot'

token = 'YOUR_TELEGRAM_BOT_API_TOKEN'

Telegram::Bot::Client.run(token) do |bot|
  bot.listen do |message|
    case message.text
    when '/start'
      bot.api.send_message(chat_id: message.chat.id, text: &quot;Hello, #{message.from.first_name}&quot;)
    when '/stop'
      bot.api.send_message(chat_id: message.chat.id, text: &quot;Bye, #{message.from.first_name}&quot;)
    end
  end
end
</code></pre>

<p>Basically, it will listen, and than you can send it messages and based on the parsed <code>message.text</code> you can define functions to call. For example, for rscrap I could define something like <code>run_script(script)</code>. And the command would be: <code>/run reddit</code>. Which will execute my reddit script. The possibilities are endless.</p>

<h2 id="the-scripts">The scripts</h2>

<p>The scripts use nokogiri to parse a web page, and than return a URL which will be sent by the TelegramBot. They are also saved in the database so that when a new comic strip comes out, I know that it&rsquo;s new. For reddit, I&rsquo;m saving a timestamp as well, and I collect everything after that timestamp through the reddit API as JSON, and send it as a bundled message with shortified links to the posts using bit.ly.</p>

<p>The scraping is most of the times the same for every comic. Thus, there is a helper method for it. The script itself, is very short. For example, lets look at gunnerkrigg court.</p>

<pre><code class="language-ruby">require_relative '../rscrap'
require 'nokogiri'
require 'open-uri'

url = 'http://www.gunnerkrigg.com'
scrap = Rscrap.new
page = Nokogiri::HTML(open(url))
comic_id = page.css('img.comic_image')[0].select { |e| e if e[0] == 'src' }[0][1]
new_comic = &quot;#{url}#{comic_id}&quot;
scrap.send_new_comic(url, new_comic)
</code></pre>

<p>The interesting part of it is this bit: <code>comic_id = page.css('img.comic_image')[0].select { |e| e if e[0] == 'src' }[0][1]</code>. It extracts the URL for the comic image, and stores it as an &ldquo;id&rdquo; of the comic. This than, is sent as a message which Telegram will embed. There is no need to visit the web page, the image is in your feed and you can view it directly. Just like an RSS ready.</p>

<h2 id="cron">Cron</h2>

<p>These scripts are best used in a cron job. The comics are usually running with a daily frequency, where as the reddit gatherer is running with an hour frequency. Basically, I&rsquo;m receiving updates on an hourly basis if there are new posts by then. Running ruby from cron was a bit tricky. I&rsquo;m using bundler for the environment, and came up with this:</p>

<pre><code class="language-bash">0 6-23 * * * /bin/bash -l -c 'cd /home/&lt;youruser&gt;/rubyproj/rscrap &amp;&amp; bundle exec ruby scripts/reddit.rb'
0 8,22 * * * /bin/bash -l -c 'cd /home/&lt;youruser&gt;/rubyproj/rscrap &amp;&amp; bundle exec ruby scripts/gunnerkrigg.rb'
0 8,22 * * * /bin/bash -l -c 'cd /home/&lt;youruser&gt;/rubyproj/rscrap &amp;&amp; bundle exec ruby scripts/aws_blog.rb'
0 5,23 * * * /bin/bash -l -c 'cd /home/&lt;youruser&gt;/rubyproj/rscrap &amp;&amp; bundle exec ruby scripts/goblinscomic.rb'
0 6,20 * * * /bin/bash -l -c 'cd /home/&lt;youruser&gt;/rubyproj/rscrap &amp;&amp; bundle exec ruby scripts/xkcd.rb'
0 7,19 * * * /bin/bash -l -c 'cd /home/&lt;youruser&gt;/rubyproj/rscrap &amp;&amp; bundle exec ruby scripts/commitstrip.rb'
0 8 * * * /bin/bash -l -c 'cd /home/&lt;youruser&gt;/rubyproj/rscrap &amp;&amp; bundle exec ruby scripts/sequiential_art.rb'
</code></pre>

<p>And a telegram message for all these things, looks like this:
Reddit:
<img src="https://github.com/Skarlso/rscrap/raw/master/shorten.png" alt="TelegramIMReddit" />
Comics:
<img src="https://github.com/Skarlso/rscrap/raw/master/rscrap2.png" alt="TelegramIMComics" /></p>

<h1 id="conclusion">Conclusion</h1>

<p>That&rsquo;s it folks. Adding a new scraper is easy. I added the aws blog as a new entry as well by just copying the comics scripts. And I&rsquo;m also getting Weather Reports delivered every morning to me.</p>

<p>Have fun. Any questions, please feel free to leave a comment!</p>

<p>Thanks,
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Budget Home Theather with a Headless Raspberry Pi and Flirc for Remote Controlling</title>
			<link>https://skarlso.github.io/2016/09/17/simple-hometheater-with-remote-and-flirc/</link>
			<pubDate>Sat, 17 Sep 2016 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2016/09/17/simple-hometheater-with-remote-and-flirc/</guid>
			<description>Intro Hello folks.
Today, I would like to tell you about my configuration for a low budget Home Theater setup.
My tools are as follows:
 FLIRC Raspberry Pi 2 500G SSD An a good &amp;lsquo;ol wifi  TL;DR Use Flirc for remote control, omxplayer for streaming the movie from an SSD on a headless PI controller via SSH and enjoy a nice, cold Lemon - Menta beer.
Flirc First, the remote control.</description>
			<content type="html"><![CDATA[

<h2 id="intro">Intro</h2>

<p>Hello folks.</p>

<p>Today, I would like to tell you about my configuration for a low budget Home Theater setup.</p>

<p>My tools are as follows:</p>

<ul>
<li><a href="https://flirc.tv/">FLIRC</a></li>
<li><a href="https://www.raspberrypi.org/products/raspberry-pi-2-model-b/">Raspberry Pi 2</a></li>
<li>500G SSD</li>
<li>An a good &lsquo;ol wifi</li>
</ul>

<h2 id="tl-dr">TL;DR</h2>

<p>Use Flirc for remote control, <code>omxplayer</code> for streaming the movie from an SSD on a headless PI controller via SSH and enjoy a nice, cold Lemon - Menta beer.</p>

<h2 id="flirc">Flirc</h2>

<p>First, the remote control. So, I like to sit in my couch and watch the movie from there. I hate getting up, or having a keyboard at arm length to control the pi. Flirc is a very easy way of doing just that with a simple remote control.</p>

<p>It costs ~$22 and is easy to setup. Works with any kind of remote control. Setting up key bindings for the control, is as simple as starting the Flirc software and pressing buttons on the remote to map to keyboard keys. Now, my pi is running headless, and the Flirc binary isn&rsquo;t quite working with raspbian; so to do the binding, I just did that on my main machine. When I was done, I just plugged in the Flirc, and proceeded to setup the pi.</p>

<h2 id="raspberry-pi-2">Raspberry Pi 2</h2>

<p>The pi 2 is a small powerhouse. However, the SD card on which it sits is simply not fast enough. From time to time, I experienced lateness in sound, or stutter in video. So, instead of having the movie on the pi, I&rsquo;m streaming through a faster SSD with <a href="https://github.com/libfuse/sshfs">SSHFS</a>. For playing, I&rsquo;m using <code>omxplayer</code>. With omxplayer, I had a few problems, because sound was not coming through the HDMI cable. A little bit of research lead me to this change in the pi&rsquo;s boot config. Uncomment this line:</p>

<pre><code class="language-bash">#hdmi_driver=2
</code></pre>

<p>After rebooting, I also, did this thing:</p>

<pre><code class="language-bash">sudo apt-get install alsa-utils
sudo modprobe snd_bcm2835
sudo amixer -c 0 cset numid=3 2
</code></pre>

<p>This saved my bacon. The whole answer can be found here: <a href="http://raspberrypi.stackexchange.com/questions/44/why-is-my-audio-sound-output-not-working">Stackoverflow</a>.</p>

<p>Once SSHFS was working, and HDMI received sound, I just executed this command: <code>omxplayer -o hdmi /media/stream/my_movie.mkv</code>. This told omxplayer to use the local HDMI connection for video output.</p>

<p>All this was from my computer through an SSH session so I never controlled the pi directly. Once done, I proceeded to sit down with a nice, cold Lemon - Menta beer and a remote control.</p>

<p>Once little gotcha &ndash; <code>omxplayer</code> is controlled through the buttons + (volume up), - (volume down), <SPACE> (stop, play), and q for quitting. Flirc is able to map any key <em>combinations</em> on a keyboard as well to any button on the remote. Combinations can be done by selecting a control key and pressing another key. So mapping <code>+</code> to the volume up button was by pressing shift and then &lsquo;=&rsquo;.</p>

<h2 id="wrapping-up">Wrapping Up</h2>

<p>I enjoyed the movie while being able to adjust the volume, or pause it, when my popcorn was ready, and close the player when the movie was done. There are a number of other ways to do this, like using <a href="https://kodi.tv/">kodi</a> + <a href="https://play.google.com/store/apps/details?id=org.leetzone.android.yatsewidgetfree&amp;hl=en">yatse</a>. Which lets you remote control a media software with your mobile phone. But I&rsquo;m using the pi for a number of other things and the GUI is rather resource heavy.</p>

<p>There you have it folks. Might not be the easiest setup, but it&rsquo;s pretty awesome anyways.</p>

<p>Cheers,
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Always Go with []byte</title>
			<link>https://skarlso.github.io/2016/08/19/always-go-with-bytes/</link>
			<pubDate>Fri, 19 Aug 2016 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2016/08/19/always-go-with-bytes/</guid>
			<description>Another quick reminder&amp;hellip; Always go with []byte if possible. I said it before, and I&amp;rsquo;m going to say it over and over again. It&amp;rsquo;s crucial.
Here is a little code from exercism.io. First, with strings:
package igpay import ( &amp;quot;strings&amp;quot; ) // PigLatin translates reguler old English into awesome pig-latin. func PigLatin(in string) (ret string) { for _, v := range strings.Fields(in) { ret += pigLatin(v) + &amp;quot; &amp;quot; } return strings.</description>
			<content type="html"><![CDATA[<p>Another quick reminder&hellip; Always go with []byte if possible. I said it before, and I&rsquo;m going to say it over and over again. It&rsquo;s crucial.</p>

<p>Here is a little code from exercism.io. First, with strings:</p>

<pre><code class="language-go">package igpay

import (
    &quot;strings&quot;
)

// PigLatin translates reguler old English into awesome pig-latin.
func PigLatin(in string) (ret string) {
    for _, v := range strings.Fields(in) {
        ret += pigLatin(v) + &quot; &quot;
    }

    return strings.Trim(ret, &quot; &quot;)
}

func pigLatin(in string) (ret string) {
    if strings.IndexAny(in, &quot;aeiou&quot;) == 0 {
        ret += in + &quot;ay&quot;
        return
    }

    for i := 0; i &lt; len(in); i++ {
        vowelPos := strings.IndexAny(in, &quot;aeiou&quot;)

        if (in[0] == 'y' || in[0] == 'x') &amp;&amp; vowelPos &gt; 1 {
            vowelPos = 0
            ret = in
        }
        if vowelPos != 0 {
            adjustPosition := vowelPos

            if in[adjustPosition] == 'u' &amp;&amp; in[adjustPosition - 1] == 'q' {
                adjustPosition++
            }

            ret = in[adjustPosition:] + in[:adjustPosition]
        }
    }
    ret += &quot;ay&quot;
    return
}
</code></pre>

<p>Than with []byte:</p>

<pre><code class="language-go">package igpay

import (
    // &quot;fmt&quot;
    &quot;bytes&quot;
)

// PigLatin translates reguler old English into awesome pig-latin.
func PigLatin(in string) (ret string) {
    inBytes := []byte(in)
    var retBytes [][]byte
    for _, v := range bytes.Fields(inBytes) {
        v2 := make([]byte, len(v))
        copy(v2, v)
        retBytes = append(retBytes, pigLatin(v2))
    }

    ret = string(bytes.Join(retBytes, []byte(&quot; &quot;)))
    return
}

func pigLatin(in []byte) (ret []byte) {
    if bytes.IndexAny(in, &quot;aeiou&quot;) == 0 {
        ret = append(in, []byte(&quot;ay&quot;)...)
        return
    }

    for i := 0; i &lt; len(in); i++ {
        vowelPos := bytes.IndexAny(in, &quot;aeiou&quot;)

        if (in[0] == 'y' || in[0] == 'x') &amp;&amp; vowelPos &gt; 1 {
            vowelPos = 0
            ret = in
        }
        if vowelPos != 0 {
            adjustPosition := vowelPos

            if in[adjustPosition] == 'u' &amp;&amp; in[adjustPosition - 1] == 'q' {
                adjustPosition++
            }

            in = append(in[adjustPosition:], in[:adjustPosition]...)
            ret = in
            // fmt.Printf(&quot;%s\n&quot;, ret)
        }
    }
    ret = append(ret, []byte(&quot;ay&quot;)...)
    return
}
</code></pre>

<p>And than,the benchmarks of course:</p>

<pre><code class="language-bash">BenchmarkPigLatin-8          	  200000	     10688 ns/op
BenchmarkPigLatinStrings-8   	  100000	     15211 ns/op
PASS
</code></pre>

<p>The improvement is not massive in this case, but it&rsquo;s more than enough to matter. And in a bigger, more complicated program, string concatenation will take a LOT of time away.</p>

<p>In Go, the <code>bytes</code> package has a 1-1 map compared to the <code>strings</code> packages, so chances are, if you are doing strings concatenations you will be able to port that piece of code easily to []byte.</p>

<p>That&rsquo;s all folks.</p>

<p>Happy coding,
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Global variable for never changing regex</title>
			<link>https://skarlso.github.io/2016/08/16/never-changing-regex/</link>
			<pubDate>Tue, 16 Aug 2016 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2016/08/16/never-changing-regex/</guid>
			<description>Quick reminder. If you have a never changing regex in Go, do NOT put it into a frequently called function. ALWAYS put it into a global variable. I&amp;rsquo;ll show you why.
Benchmark for code with a variable in a frequently called function:
BenchmarkNumber-8 30000	41633 ns/op BenchmarkAreaCode-8 50000	27736 ns/op BenchmarkFormat-8 50000	29263 ns/op PASS ok _/phone-number	5.110s  Benchmark for code with the same variable outside in a global scope:</description>
			<content type="html"><![CDATA[<p>Quick reminder. If you have a never changing regex in Go, do NOT put it into a frequently called function. ALWAYS put it into a global variable. I&rsquo;ll show you why.</p>

<p>Benchmark for code with a variable in a frequently called function:</p>

<pre><code class="language-bash">BenchmarkNumber-8     	   30000	     41633 ns/op
BenchmarkAreaCode-8   	   50000	     27736 ns/op
BenchmarkFormat-8     	   50000	     29263 ns/op
PASS
ok  	_/phone-number	5.110s
</code></pre>

<p>Benchmark for code with the same variable outside in a global scope:</p>

<pre><code class="language-bash">BenchmarkNumber-8     	  300000	      5618 ns/op
BenchmarkAreaCode-8   	  500000	      3884 ns/op
BenchmarkFormat-8     	  300000	      4696 ns/op
PASS
ok  	_/phone-number	5.197s
</code></pre>

<p>Notice the magnitude change in ns/op! That&rsquo;s something to keep an eye out for.</p>

<p>Thanks for reading!
Cheers,
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Drupal missing ToolBar and settings not saving</title>
			<link>https://skarlso.github.io/2016/08/13/drupal-missing-toolbar-and-settings-not-saving/</link>
			<pubDate>Sat, 13 Aug 2016 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2016/08/13/drupal-missing-toolbar-and-settings-not-saving/</guid>
			<description>Hi folks.
Quick gotcha, when working with Drupal. If you just freshly installed it, and everything seems to work fine, and yet you are experiencing things like, the admin toolbar is randomly disappearing, or configuration is not saved; than you might not have modrewrite enabled on your apache server.
Because, by default, Drupal has clean url enabled, that needs URL rewriting on apache.
So, step one.
Have this in your .</description>
			<content type="html"><![CDATA[<p>Hi folks.</p>

<p>Quick gotcha, when working with Drupal. If you just freshly installed it, and everything seems to work fine, and yet you are experiencing things like, the admin toolbar is randomly disappearing, or configuration is not saved; than you might not have modrewrite enabled on your apache server.</p>

<p>Because, by default, Drupal has clean url enabled, that needs URL rewriting on apache.</p>

<p>So, step one.</p>

<p>Have this in your .htaccess file:</p>

<pre><code class="language-bash">&lt;IfModule mod_rewrite.c&gt;
  RewriteEngine on
  ... # and than a bunch of rewrite rules according to your leisure
</code></pre>

<p>Than look up this line in your httpd.conf file and remove the prefix &lsquo;#&rsquo;.</p>

<pre><code class="language-bash">#LoadModule rewrite_module libexec/apache2/mod_rewrite.so
</code></pre>

<p>That is all. From there on, everything should work. If, you don&rsquo;t want the clean url setting, yet you can&rsquo;t disable it, and don&rsquo;t want to restart the server and edit the settings.php file; use drush like this:</p>

<pre><code class="language-bash">drush vset clean_url 0 --yes
</code></pre>

<p>This should disable it and bust the cache in the process so it&rsquo;s immediately visible.</p>

<p>That is all folks.</p>

<p>Cheers,
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Jenkins Best Practices Talk</title>
			<link>https://skarlso.github.io/2016/07/28/jenkins-best-practices/</link>
			<pubDate>Thu, 28 Jul 2016 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2016/07/28/jenkins-best-practices/</guid>
			<description>Hi folks.
I wanted to take the time to share with you a talk that I recently did.
The slides and the source I used, can be found here: Github.
And then, there is also a docker image which contains all the plugins, job configurations and all the practices which I did during the talk. Please feel free to have a go with it. DockerHub - Jenkins Best Practices.
For easy access and reading, here are the slides on Slideshare: Jenkins Best Practices Slides.</description>
			<content type="html"><![CDATA[<p>Hi folks.</p>

<p>I wanted to take the time to share with you a talk that I recently did.</p>

<p>The slides and the source I used, can be found here: <a href="https://github.com/Skarlso/jenkinsbestpractices">Github</a>.</p>

<p>And then, there is also a docker image which contains all the plugins, job configurations and all the practices which I did during the talk. Please feel free to have a go with it. <a href="https://hub.docker.com/r/skarlso/jenkinsbestpractices">DockerHub - Jenkins Best Practices</a>.</p>

<p>For easy access and reading, here are the slides on Slideshare: <a href="http://www.slideshare.net/GergelyBrautigam/jenkins-best-practices-meetup-slides">Jenkins Best Practices Slides</a>.</p>

<p>I, gladly answer any questions which should arise.</p>

<p>Thanks!
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Ruby Sieve</title>
			<link>https://skarlso.github.io/2016/07/12/ruby-sieve/</link>
			<pubDate>Tue, 12 Jul 2016 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2016/07/12/ruby-sieve/</guid>
			<description>Though it could be done better, I&amp;rsquo;m sure, but I&amp;rsquo;m actually pretty satisfied with this one. It loops only twice as opposed to filtered ranges and whatnot other solutions to the sieve. I was thinking of rather creating a list and deleting elements from it, but that&amp;rsquo;s already three loops.
Maybe I&amp;rsquo;ll do a benchmark later on more solutions.
# Sieve contains a function to return a set of primes class Sieve def initialize(n) @n = n end # Returns a list of primes up to a certain limit # @param n limit # @return list of primes def primes marked = [] primes = [] (2.</description>
			<content type="html"><![CDATA[<p>Though it could be done better, I&rsquo;m sure, but I&rsquo;m actually pretty satisfied with this one. It loops only twice as opposed to filtered ranges and whatnot other solutions to the sieve. I was thinking of rather creating a list and deleting elements from it, but that&rsquo;s already three loops.</p>

<p>Maybe I&rsquo;ll do a benchmark later on more solutions.</p>

<pre><code class="language-ruby"># Sieve contains a function to return a set of primes
class Sieve
  def initialize(n)
    @n = n
  end

  # Returns a list of primes up to a certain limit
  # @param n limit
  # @return list of primes
  def primes
    marked = []
    primes = []
    (2..@n).each do |e|
      unless marked.include?(e)
        primes.push e
        (e..@n).step(e) { |s| marked.push s }
      end
    end
    primes
  end
end
</code></pre>

<p>Cheers,
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Simple hook to rid of trouble</title>
			<link>https://skarlso.github.io/2016/07/12/simple-hook-to-rid-of-trouble/</link>
			<pubDate>Tue, 12 Jul 2016 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2016/07/12/simple-hook-to-rid-of-trouble/</guid>
			<description>Hi folks.
This is but a simple git hook to run a test in order to ensure you can push. It also ignores the vendor folder if you happen to have on in your directory.
Edit the file under .git/hooks/pre-push.sample and add this at the end before the exit 0.
go test $(go list ./... |grep -v vendor) RESULT=$? if [ $RESULT -ne 0 ]; then echo &amp;quot;Failed test run. Disallowing push.</description>
			<content type="html"><![CDATA[<p>Hi folks.</p>

<p>This is but a simple git hook to run a test in order to ensure you can push. It also ignores the vendor folder if you happen to have on in your directory.</p>

<p>Edit the file under <code>.git/hooks/pre-push.sample</code> and add this at the end before the <code>exit 0</code>.</p>

<pre><code class="language-bash">go test $(go list ./... |grep -v vendor)
RESULT=$?
if [ $RESULT -ne 0 ]; then
    echo &quot;Failed test run. Disallowing push.&quot;
    exit 1
fi
</code></pre>

<p>After this, rename the file to <code>pre-push</code> removing the .sample from it.</p>

<p>If you now, mess something up, you should see something like this before your push:</p>

<pre><code class="language-bash"># github.com/Skarlso/goprogressquest
./create.go:40: undefined: sha1 in sha1.Sum
./create.go:41: undefined: fmt in fmt.Sprintf
./create.go:115: undefined: json in json.Unmarshal
./create.go:130: undefined: json in json.Unmarshal
FAIL	github.com/Skarlso/goprogressquest [build failed]
Failed test run. Disallowing push.
error: failed to push some refs to 'git@github.com:Skarlso/goprogressquest.git'
</code></pre>

<p>That is all.</p>

<p>Cheers,
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>How to do Google sign-in with Go</title>
			<link>https://skarlso.github.io/2016/06/12/google-signin-with-go/</link>
			<pubDate>Sun, 12 Jun 2016 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2016/06/12/google-signin-with-go/</guid>
			<description>&lt;p&gt;Hi folks.&lt;/p&gt;

&lt;p&gt;Today, I would like to write up a step - by - step guide with a sample web app on how to do Google Sign-In and authorization.&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Hi folks.</p>

<p>Today, I would like to write up a step - by - step guide with a sample web app on how to do Google Sign-In and authorization.</p>

<p>Let&rsquo;s get started.</p>

<p><strong>EDIT</strong>: A sample project of this, and <a href="http://skarlso.github.io/2016/11/02/google-signin-with-go-part2/">Part 2</a>, can be found
<a href="https://github.com/Skarlso/goquestwebapp">here</a> or <a href="https://github.com/Skarlso/google-oauth-go-sample">here</a>.</p>

<h1 id="setup">Setup</h1>

<h2 id="google-oauth-token">Google OAuth token</h2>

<p>First what you need is, to register your application with Google, so you&rsquo;ll get a Token that you can use to authorize later calls to Google services.</p>

<p>You can do that here: <a href="https://console.developers.google.com/iam-admin/projects">Google Developer Console</a>. You&rsquo;ll have to create a new project. Once it&rsquo;s done, click on <code>Credentials</code> and create an OAuth token. You should see something like this: &ldquo;To create an OAuth client ID, you must first set a product name on the consent screen.&rdquo;. Go through the questions, like, what type your application is, and once you arrive at stage where it&rsquo;s asking for your application&rsquo;s name &ndash; there is a section asking for redirect URLs; there, write the url you wish to use when authorising your user. If you don&rsquo;t know this yet, don&rsquo;t fret, you can come back and change it later. Do NOT use <code>localhost</code>. If you are running on your own, use <a href="http://127.0.0.1:port/whatever">http://127.0.0.1:port/whatever</a>.</p>

<p>This will get you a <code>client ID</code> and a <code>client secret</code>. I&rsquo;m going to save these into a file which will sit next to my web app. It could be stored more securely, for example, in a database or a mounted secure, encrypted drive, and so and so forth.</p>

<p>Your application can now be identified through Google services.</p>

<h1 id="the-application">The Application</h1>

<h2 id="libraries">Libraries</h2>

<p>Google has a nice library to use with OAuth 2.0. The library is available here: <a href="https://github.com/golang/oauth2">Google OAth 2.0</a>. It&rsquo;s a bit cryptic at first, but not to worry. After a bit of fiddling you&rsquo;ll understand fast what it does. I&rsquo;m also using <a href="https://github.com/gin-gonic/gin">Gin</a>, and Gin&rsquo;s session handling middleware <a href="https://github.com/gin-gonic/contrib/tree/master/sessions">Gin-Session</a>.</p>

<h2 id="setup-credentials">Setup - Credentials</h2>

<p>Let&rsquo;s create a setup which configures your credentials from the file you saved earlier. This is pretty straightforward.</p>

<pre><code class="language-go">// Credentials which stores google ids.
type Credentials struct {
    Cid string `json:&quot;cid&quot;`
    Csecret string `json:&quot;csecret&quot;`
}

func init() {
    var c Credentials
    file, err := ioutil.ReadFile(&quot;./creds.json&quot;)
    if err != nil {
        fmt.Printf(&quot;File error: %v\n&quot;, err)
        os.Exit(1)
    }
    json.Unmarshal(file, &amp;c)
}
</code></pre>

<p>Once you have the creds loaded, you can now go on to construct the OAuth client.</p>

<h2 id="setup-oauth-client">Setup - OAuth client</h2>

<p>Construct the OAuth config like this:</p>

<pre><code class="language-go">conf := &amp;oauth2.Config{
  ClientID:     c.Cid,
  ClientSecret: c.Csecret,
  RedirectURL:  &quot;http://localhost:9090/auth&quot;,
  Scopes: []string{
    &quot;https://www.googleapis.com/auth/userinfo.email&quot;, // You have to select your own scope from here -&gt; https://developers.google.com/identity/protocols/googlescopes#google_sign-in
  },
  Endpoint: google.Endpoint,
}
</code></pre>

<p>It will give you a struct which you can then use to Authorize the user in the google domain. Next, all you need to do is call <code>AuthCodeURL</code> on this config. It will give you a URL which redirects to a Google Sign-In form. Once the user fills that out and clicks &lsquo;Allow&rsquo;, you&rsquo;ll get back a TOKEN in the <code>code</code> query parameter and a <code>state</code> which helps protect against CSRF attacks. Always check if the provided state is the same which you provided with AuthCodeURL. This will look something like this <code>http://127.0.0.1:9090/auth?code=4FLKFskdjflf3343d4f&amp;state=lhfu3f983j;asdf</code>. Small function for this:</p>

<pre><code class="language-go">func getLoginURL(state string) string {
    // State can be some kind of random generated hash string.
    // See relevant RFC: http://tools.ietf.org/html/rfc6749#section-10.12
    return conf.AuthCodeURL(state)
}
</code></pre>

<p>Construct a button which the user can click and be redirected to the Google Sign-In form. When constructing the url, we must do one more thing. Create a secure state token and save it in the form of a cookie for the current user.</p>

<h2 id="random-state-and-button-construction">Random State and Button construction</h2>

<p>Small piece of code random token:</p>

<pre><code class="language-go">func randToken() string {
	b := make([]byte, 32)
	rand.Read(b)
	return base64.StdEncoding.EncodeToString(b)
}
</code></pre>

<p>Storing it in a session and constructing the button:</p>

<pre><code class="language-go">func loginHandler(c *gin.Context) {
    state = randToken()
    session := sessions.Default(c)
    session.Set(&quot;state&quot;, state)
    session.Save()
    c.Writer.Write([]byte(&quot;&lt;html&gt;&lt;title&gt;Golang Google&lt;/title&gt; &lt;body&gt; &lt;a href='&quot; + getLoginURL() + &quot;'&gt;&lt;button&gt;Login with Google!&lt;/button&gt; &lt;/a&gt; &lt;/body&gt;&lt;/html&gt;&quot;))
}
</code></pre>

<p>It&rsquo;s not the nicest button I ever come up with, but it will have to do.</p>

<h1 id="user-information">User Information</h1>

<p>After you got the token, you can construct an authorised Google HTTP Client, which let&rsquo;s you call Google related services and retrieve information about the user.</p>

<h2 id="getting-the-client">Getting the Client</h2>

<p>Before we construct a client, we must check if the retrieved state is still the same compared to the one we provided. I&rsquo;m doing this before constructing the client. Together this looks like this:</p>

<pre><code class="language-go">func authHandler(c *gin.Context) {
    // Check state validity.
    session := sessions.Default(c)
    retrievedState := session.Get(&quot;state&quot;)
    if retrievedState != c.Query(&quot;state&quot;) {
        c.AbortWithError(http.StatusUnauthorized, fmt.Errorf(&quot;Invalid session state: %s&quot;, retrievedState))
        return
    }
    // Handle the exchange code to initiate a transport.
  	tok, err := conf.Exchange(oauth2.NoContext, c.Query(&quot;code&quot;))
  	if err != nil {
  		c.AbortWithError(http.StatusBadRequest, err)
          return
  	}
    // Construct the client.
    client := conf.Client(oauth2.NoContext, tok)
    ...
</code></pre>

<h2 id="obtaining-information">Obtaining information</h2>

<p>Our next step is to retrieve information about the user. To achieve this, call Google&rsquo;s API with the authorised client. The code for that is:</p>

<pre><code class="language-go">...
resp, err := client.Get(&quot;https://www.googleapis.com/oauth2/v3/userinfo&quot;)
if err != nil {
    c.AbortWithError(http.StatusBadRequest, err)
    return
}
defer resp.Body.Close()
data, _ := ioutil.ReadAll(resp.Body)
log.Println(&quot;Resp body: &quot;, string(data))
...
</code></pre>

<p>And this will yield a body like this:</p>

<pre><code class="language-json">{
  &quot;sub&quot;: &quot;1111111111111111111111&quot;,
  &quot;name&quot;: &quot;Your Name&quot;,
  &quot;given_name&quot;: &quot;Your&quot;,
  &quot;family_name&quot;: &quot;Name&quot;,
  &quot;profile&quot;: &quot;https://plus.google.com/1111111111111111111111&quot;,
  &quot;picture&quot;: &quot;https://lh3.googleusercontent.com/asdfadsf/AAAAAAAAAAI/Aasdfads/Xasdfasdfs/photo.jpg&quot;,
  &quot;email&quot;: &quot;your@gmail.com&quot;,
  &quot;email_verified&quot;: true,
  &quot;gender&quot;: &quot;male&quot;
}
</code></pre>

<p>Parse it, and you&rsquo;ve got an email which you can store somewhere for registration purposes. At this point, your user is not yet Authenticated. For that, I&rsquo;m going to post a second post, which describes how to go on. Retrieving the stored email address, and user session handling with Gin and MongoDB.</p>

<h1 id="putting-it-all-together">Putting it all together</h1>

<pre><code class="language-go">package main

import (
    &quot;crypto/rand&quot;
    &quot;encoding/base64&quot;
    &quot;encoding/json&quot;
    &quot;io/ioutil&quot;
    &quot;fmt&quot;
    &quot;log&quot;
    &quot;os&quot;
    &quot;net/http&quot;

    &quot;github.com/gin-gonic/contrib/sessions&quot;
    &quot;github.com/gin-gonic/gin&quot;
    &quot;golang.org/x/oauth2&quot;
    &quot;golang.org/x/oauth2/google&quot;
)

// Credentials which stores google ids.
type Credentials struct {
    Cid     string `json:&quot;cid&quot;`
    Csecret string `json:&quot;csecret&quot;`
}

// User is a retrieved and authentiacted user.
type User struct {
    Sub string `json:&quot;sub&quot;`
    Name string `json:&quot;name&quot;`
    GivenName string `json:&quot;given_name&quot;`
    FamilyName string `json:&quot;family_name&quot;`
    Profile string `json:&quot;profile&quot;`
    Picture string `json:&quot;picture&quot;`
    Email string `json:&quot;email&quot;`
    EmailVerified string `json:&quot;email_verified&quot;`
    Gender string `json:&quot;gender&quot;`
}

var cred Credentials
var conf *oauth2.Config
var state string
var store = sessions.NewCookieStore([]byte(&quot;secret&quot;))

func randToken() string {
	b := make([]byte, 32)
	rand.Read(b)
	return base64.StdEncoding.EncodeToString(b)
}

func init() {
    file, err := ioutil.ReadFile(&quot;./creds.json&quot;)
    if err != nil {
        log.Printf(&quot;File error: %v\n&quot;, err)
        os.Exit(1)
    }
    json.Unmarshal(file, &amp;cred)

    conf = &amp;oauth2.Config{
        ClientID:     cred.Cid,
        ClientSecret: cred.Csecret,
        RedirectURL:  &quot;http://127.0.0.1:9090/auth&quot;,
        Scopes: []string{
            &quot;https://www.googleapis.com/auth/userinfo.email&quot;, // You have to select your own scope from here -&gt; https://developers.google.com/identity/protocols/googlescopes#google_sign-in
        },
        Endpoint: google.Endpoint,
    }
}

func indexHandler(c *gin.Context) {
    c.HTML(http.StatusOK, &quot;index.tmpl&quot;, gin.H{})
}

func getLoginURL(state string) string {
    return conf.AuthCodeURL(state)
}

func authHandler(c *gin.Context) {
    // Handle the exchange code to initiate a transport.
    session := sessions.Default(c)
    retrievedState := session.Get(&quot;state&quot;)
    if retrievedState != c.Query(&quot;state&quot;) {
        c.AbortWithError(http.StatusUnauthorized, fmt.Errorf(&quot;Invalid session state: %s&quot;, retrievedState))
        return
    }

	tok, err := conf.Exchange(oauth2.NoContext, c.Query(&quot;code&quot;))
	if err != nil {
		c.AbortWithError(http.StatusBadRequest, err)
        return
	}

	client := conf.Client(oauth2.NoContext, tok)
	email, err := client.Get(&quot;https://www.googleapis.com/oauth2/v3/userinfo&quot;)
    if err != nil {
		c.AbortWithError(http.StatusBadRequest, err)
        return
	}
    defer email.Body.Close()
    data, _ := ioutil.ReadAll(email.Body)
    log.Println(&quot;Email body: &quot;, string(data))
    c.Status(http.StatusOK)
}

func loginHandler(c *gin.Context) {
    state = randToken()
    session := sessions.Default(c)
    session.Set(&quot;state&quot;, state)
    session.Save()
    c.Writer.Write([]byte(&quot;&lt;html&gt;&lt;title&gt;Golang Google&lt;/title&gt; &lt;body&gt; &lt;a href='&quot; + getLoginURL(state) + &quot;'&gt;&lt;button&gt;Login with Google!&lt;/button&gt; &lt;/a&gt; &lt;/body&gt;&lt;/html&gt;&quot;))
}

func main() {
    router := gin.Default()
    router.Use(sessions.Sessions(&quot;goquestsession&quot;, store))
    router.Static(&quot;/css&quot;, &quot;./static/css&quot;)
    router.Static(&quot;/img&quot;, &quot;./static/img&quot;)
    router.LoadHTMLGlob(&quot;templates/*&quot;)

    router.GET(&quot;/&quot;, indexHandler)
    router.GET(&quot;/login&quot;, loginHandler)
    router.GET(&quot;/auth&quot;, authHandler)

    router.Run(&quot;127.0.0.1:9090&quot;)
}
}
</code></pre>

<p>This is it folks. I hope this helped. Any comments or advices are welcomed.</p>

<h1 id="google-api-documentation">Google API Documentation</h1>

<p>The documentation to this whole process, and MUCH more information can be found here: <a href="https://developers.google.com/identity/protocols/OAuth2">Google API Docs</a>.</p>

<p>Thanks for reading,
Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>Minecraft world automatic backup to AWS S3 bucket - Part 2 (Custom functions)</title>
			<link>https://skarlso.github.io/2016/04/17/minecraft-server-aws-s3-backup-part2/</link>
			<pubDate>Sun, 17 Apr 2016 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2016/04/17/minecraft-server-aws-s3-backup-part2/</guid>
			<description>&lt;p&gt;Hi folks.&lt;/p&gt;

&lt;p&gt;Got an update for the backup script. This time, you&amp;rsquo;ll have the ability to implement your own upload capabilities. I provide a mock implementation for the required functions.&lt;/p&gt;

&lt;p&gt;Here is the script again, now modified and a bit cleaned up. I hope it&amp;rsquo;s helpful.&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Hi folks.</p>

<p>Got an update for the backup script. This time, you&rsquo;ll have the ability to implement your own upload capabilities. I provide a mock implementation for the required functions.</p>

<p>Here is the script again, now modified and a bit cleaned up. I hope it&rsquo;s helpful.</p>

<pre><code class="language-bash">#!/bin/bash

if [[ -t 1 ]]; then
    colors=$(tput colors)
    if [[ $colors ]]; then
        RED='\033[0;31m'
        LIGHT_GREEN='\033[1;32m'
        NC='\033[0m'
    fi
fi

if [[ -z ${MINECRAFT_BUCKET} ]]; then
    printf &quot;Please set the env variable %bMINECRAFT_BUCKET%b to the s3 archive bucket name.\n&quot; &quot;${RED}&quot; &quot;${NC}&quot;
    exit 1
fi

if [[ -z ${MINECRAFT_ARCHIVE_LIMIT} ]]; then
    printf &quot;Please set the env variable %bMINECRAFT_ARCHIVE_LIMIT%b to limit the number of archives to keep.\n&quot; &quot;${RED}&quot; &quot;${NC}&quot;
    exit 1
fi

if [[ -z ${MINECRAFT_WORLD} ]]; then
    printf &quot;Please set the env variable %bMINECRAFT_WORLD%b to specify what world to back-up.\n&quot; &quot;${RED}&quot; &quot;${NC}&quot;
    exit 1
fi

backup_world=${MINECRAFT_WORLD}
backup_bucket=${MINECRAFT_BUCKET}
backup_limit=${MINECRAFT_ARCHIVE_LIMIT}
archive_name=&quot;${backup_world}-$(date +&quot;%H-%M-%S-%m-%d-%Y&quot;).zip&quot;

function create_archive {
    printf &quot;Creating archive of %b${backup_world}%b\n&quot; &quot;${RED}&quot; &quot;${NC}&quot;
    zip -r $archive_name $backup_world
}

function amazon_bak {

    create_archive

    printf &quot;Checking if bucket has more than %b${backup_limit}%b files already.\n&quot; &quot;${RED}&quot; &quot;${NC}&quot;
    content=( $(aws s3 ls s3://$backup_bucket | awk '{print $4}') )

    if [[ ${#content[@]} -eq $backup_limit || ${#content[@]} -gt $backup_limit  ]]; then
        echo &quot;There are too many archives. Deleting oldest one.&quot;
        # We can assume here that the list is in cronological order
    	printf &quot;%bs3://${backup_bucket}/${content[0]}\n%b&quot; &quot;${RED}&quot; &quot;${NC}&quot;
        aws s3 rm s3://$backup_bucket/${content[0]}
    fi

    printf &quot;Uploading %b${archive_name}%b to s3 archive bucket.\n&quot; &quot;${RED}&quot; &quot;${NC}&quot;
    state=$(aws s3 cp $archive_name s3://$backup_bucket)

    if [[ &quot;$state&quot; =~ &quot;upload:&quot; ]]; then
        printf &quot;File upload %bsuccessful%b.\n&quot; &quot;${LIGHT_GREEN}&quot; &quot;${NC}&quot;
    else
        printf &quot;%bError%b occured while uploading archive. Please investigate.\n&quot; &quot;${RED}&quot; &quot;${NC}&quot;
    fi
}

function custom {
    if [[ -e custom.sh ]]; then
        source ./custom.sh
    else
        echo &quot;custom.sh script not found. Please implement the apropriate functions.&quot;
        exit 1
    fi

    echo &quot;Checking for the number of files. Limit is: $backup_limit.&quot;
    files=( $(list) )
    if [[ ${#files[@]} -eq $backup_limit || ${#files[@]} -gt $backup_limit ]]; then
        echo &quot;Deleting extra file.&quot;
        delete ${files[0]}
        if [[ $? != 0 ]]; then
            printf &quot;%bFailed%b to delete file. Please investigate failure.&quot; &quot;${RED}&quot; &quot;${NC}&quot;
            exit $?
        fi
    fi

    echo &quot;Zipping world.&quot;
    create_archive

    echo &quot;Uploading world.&quot;
    upload $archive_name

    if [[ $? != 0 ]]; then
        printf &quot;%bFailed%b to upload archive. Please investigate the error.&quot; &quot;${RED}&quot; &quot;${NC}&quot;
        exit $?
    fi

    printf &quot;Upload %bsuccessful%b&quot; &quot;${LIGHT_GREEN}&quot; &quot;${NC}&quot;
}

function help {
    echo &quot;Usage:&quot;
    echo &quot;./backup_world [METHOD]&quot;
    echo &quot;Exp.: ./backup_world aws|./backup_world custom|./backup_world dropbox&quot;
    echo &quot;Each method has it's own environment properties that it requires.&quot;
    echo &quot;Global: MINECRAFT_WORLD|MINECRAFT_BUCKET|MINECRAFT_ARCHIVE_LIMIT&quot;
    echo &quot;Custom: Have a file, called 'custom.sh' which is sourced.&quot;
    echo &quot;Implement these three functions: upload | list | delete.&quot;
    echo &quot;upload -&gt; should return exit code 0 on success, should return exit code 1 on failure.&quot;
    echo &quot;list -&gt; should return a list of cronologically ordered items.&quot;
    echo &quot;delete -&gt; should return exit code 0 on success, should return exit code 1 on failure.&quot;
}

case $1 in
    aws )
        amazon_bak
        ;;
    custom )
        custom
        ;;
    * )
        help
        ;;
esac
</code></pre>

<p>And here is the sample implementation for the custom upload functionality.</p>

<pre><code class="language-bash">#!/bin/bash

function upload {
    echo &quot;uploading&quot;
    local result=0
    return $result
}

function delete {
    echo &quot;deleting $1&quot;
    local result=0
    return $result
}

function list {
    local arr=(&quot;file1&quot; &quot;file2&quot; &quot;file3&quot;)
    echo &quot;${arr[@]}&quot;
}
</code></pre>

<p>Thanks for reading!</p>

<p>Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>Minecraft world automatic backup to AWS S3 bucket</title>
			<link>https://skarlso.github.io/2016/04/16/minecraft-server-aws-s3-backup/</link>
			<pubDate>Sat, 16 Apr 2016 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2016/04/16/minecraft-server-aws-s3-backup/</guid>
			<description>Hi Folks.
Previously we created a Minecraft server using Docker. After my server got popular in the family, and a lot of stuff started to pile up on it, as a good IT person, I&amp;rsquo;m backing up the world once in a while.
For that, I&amp;rsquo;m using AWS S3 with the CLI and a little bash script which runs once a week.
The script is really straightforward. I&amp;rsquo;m doing manual versioning, although S3 does provide one out of the box.</description>
			<content type="html"><![CDATA[<p>Hi Folks.</p>

<p>Previously we created a Minecraft server using Docker. After my server got popular in the family, and a lot of stuff started to pile up on it, as a good IT person, I&rsquo;m backing up the world once in a while.</p>

<p>For that, I&rsquo;m using AWS S3 with the CLI and a little bash script which runs once a week.</p>

<p>The script is really straightforward. I&rsquo;m doing manual versioning, although S3 does provide one out of the box. However, amazon&rsquo;s S3 versioning doesn&rsquo;t allow limiting the number of versions being kept. And since I&rsquo;m doing that anyways, might as well take care of the rest.</p>

<p>Without further ado, here is the script:</p>

<pre><code class="language-bash">#!/bin/bash

if [[ -t 1 ]]; then
    colors=$(tput colors)
    if [[ $colors ]]; then
        RED='\033[0;31m'
        LIGHT_GREEN='\033[1;32m'
        NC='\033[0m'
    fi
fi

if [[ -z ${MINECRAFT_BUCKET} ]]; then
	printf &quot;Please set the env variable ${RED}MINECRAFT_BUCKET${NC} to the s3 archive bucket name.\n&quot;
	exit 0
fi

if [[ -z ${MINECRAFT_ARCHIVE_LIMIT} ]]; then
	printf &quot;Please set the env variable ${RED}MINECRAFT_ARCHIVE_LIMIT${NC} to limit the number of archives to keep.\n&quot;
	exit 0
fi

backup_bucket=${MINECRAFT_BUCKET}
backup_limit=${MINECRAFT_ARCHIVE_LIMIT}
world=$1
printf &quot;Creating archive of ${RED}${world}${NC}\n&quot;
archive_name=&quot;${world}-$(date +&quot;%H-%M-%S-%m-%d-%Y&quot;).zip&quot;
zip -r $archive_name $world

printf &quot;Checking if bucket has more than ${RED}${backup_limit}${NC} files already.\n&quot;
content=( $(aws s3 ls s3://$backup_bucket | awk '{print $4}') )

if [[ ${#content[@]} -eq $backup_limit || ${#content[@]} -gt $backup_limit  ]]; then
    echo &quot;There are too many archives. Deleting oldest one.&quot;
    # We can assume here that the list is in cronological order
	printf &quot;${RED}s3://${backup_bucket}/${content[0]}\n&quot;
    aws s3 rm s3://$backup_bucket/${content[0]}
fi

printf &quot;Uploading ${RED}${archive_name}${NC} to s3 archive bucket.\n&quot;
state=$(aws s3 cp $archive_name s3://$backup_bucket)

if [[ &quot;$state&quot; =~ &quot;upload:&quot; ]]; then
    printf &quot;File upload ${LIGHT_GREEN}successful${NC}.\n&quot;
else
    printf &quot;${RED}Error${NC} occured while uploading archive. Please investigate.\n&quot;
fi
</code></pre>

<p>It uses environment properties to define where to upload the given world and how many versions to keep.</p>

<p>I&rsquo;m calling this from a cron job, and it&rsquo;s sitting next to where the Minecraft world is.</p>

<p>That&rsquo;s it folks.</p>

<p>I&rsquo;ll start expanding on this idea and implement various services, like your own server address, or dropbox, or what have you.</p>

<p>Happy backing up.</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Minecraft Server with Docker on OSX &#43; Mods</title>
			<link>https://skarlso.github.io/2016/03/29/minecraft-server-with-docker-and-osx/</link>
			<pubDate>Tue, 29 Mar 2016 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2016/03/29/minecraft-server-with-docker-and-osx/</guid>
			<description>Hi Folks.
Intro Today, I wanted to write about how to create a secure server in a container. Ideally, you don&amp;rsquo;t want to run your server on your own machine. Running it in a container gives you a much needed control and an extra layer of security.
Docker On OSX While on a mac, you have a couple of options to run docker.
Docker-Machine Docker-Machine
Docker machine is very simple.</description>
			<content type="html"><![CDATA[

<p>Hi Folks.</p>

<h1 id="intro">Intro</h1>

<p>Today, I wanted to write about how to create a secure server in a container. Ideally, you don&rsquo;t want to run your server on your own machine. Running it in a container gives you a much needed control and an extra layer of security.</p>

<h1 id="docker-on-osx">Docker On OSX</h1>

<p>While on a mac, you have a couple of options to run docker.</p>

<h2 id="docker-machine">Docker-Machine</h2>

<p><a href="https://docs.docker.com/machine/">Docker-Machine</a></p>

<p>Docker machine is very simple. It just creates a Linux vm in the background on the given driver, for us it will be <a href="https://www.virtualbox.org/">VirtualBox</a>. Network, Memory and port-forwarding can all be managed through the VM directly. Then running and starting it is trivial through <code>docker-machine start</code>.</p>

<h2 id="boot2docker">Boot2Docker</h2>

<p><a href="http://boot2docker.io/">Boot2Docker</a></p>

<p>Runs a tiny linux in which you can use Docker freely. This adds the benefit of not having to mess around with VirtualBox.</p>

<h2 id="dlite">DLite</h2>

<p><a href="https://github.com/nlf/dlite">DLite</a></p>

<p>DLite is the newest addition in the Game. Since docker uses /var/run/docker.sock file to communicate with the daemon, and this file is not there on OSX, DLite takes care of that. After DLite is running, you just simply use Docker. That&rsquo;s it. No VM, no fuss, just use Docker.</p>

<p>I recommend to use DLite, however, it&rsquo;s not an official tool, so for the sake of this guide, I&rsquo;ll be writing up a docker-machine oriented solution.</p>

<h1 id="docker-container-a-vanilla-server">Docker container - A Vanilla Server</h1>

<p>First, you&rsquo;ll need a Dockerfile. <a href="https://github.com/Skarlso/devops/blob/master/minecraft/Dockerfile">Dockerfile</a>. The steps on how to setup this file are written down in the README file, located here: <a href="https://github.com/Skarlso/devops/tree/master/minecraft">Container Setup</a>. The <code>pwd</code> command will use your current directory as a shared volume to copy stuff into the container from your host operating system.</p>

<p>This will download the Minecraft server version 1.9 (or whichever you define) and install java and vim. It uses /data as a shared folder. Data will also be the working directory which means we will run the server from there. This server will be a vanilla server, meaning, no modding. If you have a single player world which you would like to use, simply copy that to /data and rename it to <em>world</em>.</p>

<p>The tricky part is to make this available on the internet. Because the container is in a VM we need to do a chain forwarding. Forward from the container to the vm, and from the vm to your host machine. If you are using a dns service like dyna or no-ip, you probably have a software which refreshes an IP for you to link to. And you&rsquo;ll also have port forwarding setup on your router. I won&rsquo;t be going into detail on that part. That&rsquo;s a whole different post.</p>

<p>Forwarding from virtualbox can be done through the UI or through command line. The UI is like this: <em>Settings =&gt; Network =&gt; Adapter 1 =&gt; Advanced =&gt; PortForwarding</em>. Here, setup something like this:
Name: Minecraft; Protocol: TCP; Host IP: 192.168.0.X(x=your local machine); Host Port: 25565; Guest IP: Leave Blank; Guest Port: 25565.</p>

<p><img src="/img/network.png" alt="Network" />
Where the number is missing, you&rsquo;ll have to define your own local IP which you are using for your domain address.</p>

<p>This should forward any ports coming from your VM to your local IP. In the container we have an expose and as the README states it&rsquo;s started using -p 25565:25565 which will make sure that from the container, 25565 is exposed to the VM. And from the VM 25565 is exposed to your local. Chain forwarding.</p>

<p>After that, once you start your server, it should all click together and you should have a running vanilla Minecraft server available under <a href="http://yourdomain:25565">http://yourdomain:25565</a>. You won&rsquo;t be able to check this by default on your own network. Check if the port is open with a different service like: <a href="http://www.yougetsignal.com/tools/open-ports/">Check If Port is Open</a>.</p>

<h1 id="docker-container-modding">Docker container - Modding</h1>

<p>If you are not looking for anything, just a simple server, the above will be enough. You can still do /tp 1 1 1 to teleport, or can still use bans and op commands, and distribute items. However, if you would like to use mods, and as far as kids are concerned, they will want it, you&rsquo;ll have to be a bit more clever.</p>

<p>I dug far and deep and found that you have two options. Either go with a Forge server, or a Bukkit server. What does that mean? The vanilla server of Minecraft does not support modding. Modding, is modifying the implementation of Minecraft. It injects code and runs a pre-server in front of the original Minecraft server in order to append functionality. But fret not, this is all taken care of for you by either solutions.</p>

<p>In order to jump into our container with the CMD omitted, we&rsquo;ll have to run the following command instead of the one in the README.</p>

<pre><code class="language-bash">docker run -it -v `pwd`:/data -p 25565:25565 --name mc_server minecraft:v1.9 bash
</code></pre>

<p>This will give you an interactive prompt in which now we can operate.</p>

<h2 id="forge">Forge</h2>

<p>Download the latest forge version from here =&gt; <a href="http://files.minecraftforge.net/">Minecraft Forge</a>. They are usually up-to-date. I&rsquo;m using 1.9 so I downloaded the appropriate installer version. After I obtained it, it was a matter of running this piece of command line code from my container:</p>

<pre><code class="language-bash">java -jar forge-1.9-12.16.0.1813-1.9-installer.jar --extract --installServer
</code></pre>

<p>This will unpack a bunch of things you don&rsquo;t have to worry about in your current directory, which is /data. Now run the universal.</p>

<pre><code class="language-bash">java -jar forge-1.9-12.16.0.1813-1.9-universal.jar
</code></pre>

<p>Everything under the <strong>mods</strong> folder will be loaded as a mod. Forge is very restrictive and can only use Forge based mods. It will usually warn you if you have a none forge mod in your mods folder. You can find these on Forge&rsquo;s forum here: <a href="http://www.minecraftforge.net/forum/index.php/board,30.0.html">Forge Forum</a>. Simply download a jar and put it into /data/mods.</p>

<h2 id="bukkit">Bukkit</h2>

<p>I found Bukkit to be the winner for me. Most of the mods the kid wanted worked with Bukkit and did not work with Forge. Others will swear on Forge, but it&rsquo;s really up to you. Using Bukkit is similarly easy. Again, you&rsquo;ll have to find and get the wrapper for your Minecraft version, which can be located here: <a href="http://getspigot.org/">GetSpigot</a>. You can use Spigot as well, though I have no experience with that.</p>

<p>Once, you got the wrapper, which is called <code>craftbukkit-1.9.jar</code> for me, you run it the same way you would run Forge or Minecraft.</p>

<pre><code class="language-bash">java -jar craftbukkit-1.9.jar
</code></pre>

<p>This will load mods from the <strong>plugins</strong> folder. Plugins can be found here: <a href="http://mods.curse.com/bukkit-plugins/minecraft/new">Latest Bukkit Plugins</a>.</p>

<p>In the container, you can use wget or curl to get the mods, or simply use the shared volume which is setup for you.</p>

<h1 id="last-words">Last Words</h1>

<p>All in all this sounds complicated, but it&rsquo;s actually not, once you&rsquo;ll get the hang out of it. You never kill the container once it&rsquo;s setup, you just do <code>docker stop mc_server</code> and then <code>docker-machine stop</code> if you want to stop the VM as well. To start it up simply do these steps:</p>

<pre><code class="language-bash">docker_machine start
eval $(docker-machine env)
docker start mc_server
</code></pre>

<p>We named the container mc_server on a previous step. If you named it something different, use that name.</p>

<p>That&rsquo;s it. Hope this was clear. Any feedback is appreciated. If you think you have an easier way, or if I wrote something incorrectly, feel free to tell me in the comment sections below.</p>

<p>Thanks for reading.</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Wercker Fixed</title>
			<link>https://skarlso.github.io/2016/03/09/wercker-fixed/</link>
			<pubDate>Wed, 09 Mar 2016 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2016/03/09/wercker-fixed/</guid>
			<description>Hi Folks.
So Wercker was not working. After a minor modification it seems to be okay now. The config file needed for it to work looks like this:
box: golang build: steps: - arjen/hugo-build: theme: redlounge deploy: steps: - install-packages: packages: git - leipert/git-push: gh_oauth: $GIT_TOKEN repo: skarlso/skarlso.github.io branch: master basedir: public  The modification is the box type to golang and removed ssh-client from packages.
Thanks, Gergely.</description>
			<content type="html"><![CDATA[<p>Hi Folks.</p>

<p>So Wercker was not working. After a minor modification it seems to be okay now. The config file needed for it to work looks like this:</p>

<pre><code class="language-bash">box: golang 
build:
    steps:
        - arjen/hugo-build:
            theme: redlounge
deploy:
    steps:
        - install-packages:
            packages: git 
        - leipert/git-push:
            gh_oauth: $GIT_TOKEN
            repo: skarlso/skarlso.github.io
            branch: master
            basedir: public    
</code></pre>

<p>The modification is the box type to <em>golang</em> and removed <em>ssh-client</em> from <em>packages</em>.</p>

<p>Thanks,
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Wercker Test</title>
			<link>https://skarlso.github.io/2016/03/04/wercker-test-2/</link>
			<pubDate>Fri, 04 Mar 2016 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2016/03/04/wercker-test-2/</guid>
			<description>Basics This is a wercker Test.</description>
			<content type="html"><![CDATA[

<h2 id="basics">Basics</h2>

<p>This is a wercker Test.</p>
]]></content>
		</item>
		
		<item>
			<title>Hugo Autodeploy with Wercker and Github - Pages</title>
			<link>https://skarlso.github.io/2016/02/10/hugo-autodeploy-with-wercker/</link>
			<pubDate>Wed, 10 Feb 2016 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2016/02/10/hugo-autodeploy-with-wercker/</guid>
			<description>There already is a nice tutorial on how to create github-pages with Hugo Here if you prefer deplying your pages to a different branch on the same repo. There is also a post about Wercker and Hugo Here deploying pages to said separate branch.
However, I took an easier approach on the matter with a completely separate branch for my blog source and my compiled github pages.
This blog sits here: https://github.</description>
			<content type="html"><![CDATA[<p>There already is a nice tutorial on how to create github-pages with Hugo <a href="https://gohugo.io/tutorials/github-pages-blog/">Here</a> if you prefer deplying your pages to a different branch on the same repo. There is also a post about Wercker and Hugo <a href="https://gohugo.io/tutorials/automated-deployments/">Here</a> deploying pages to said separate branch.</p>

<p>However, I took an easier approach on the matter with a completely separate branch for my blog source and my compiled github pages.</p>

<p>This blog sits here: <a href="https://github.com/Skarlso/skarlso.github.io">https://github.com/Skarlso/skarlso.github.io</a>. In order to deploy to it, I just have to commit a new blog post to this repository: <a href="https://github.com/Skarlso/blogsource">Blog Source</a>. After that, <a href="http://wercker.com/">Wercker</a> takes care of the rest. It builds my blog, and pushes the generated pages to my blog&rsquo;s repository to the master branch without creating the gh-pages branch.</p>

<p>The Wercker yml for that looks like this:</p>

<pre><code class="language-yml">box: debian
build:
    steps:
        - arjen/hugo-build:
            theme: redlounge
deploy:
    steps:
        - install-packages:
            packages: git ssh-client
        - leipert/git-push:
            gh_oauth: $GIT_TOKEN
            repo: skarlso/skarlso.github.io
            branch: master
            basedir: public
</code></pre>

<p>Pretty easy. The $GIT_TOKEN is a variable set-up on Wercker containing a restricted token which is only good for pushing. And note that you have to use an explicit package name with git-push or else Wercker will not find that step. Hugo-build will build my blog with a simple command using redlounge theme.</p>

<p>And that&rsquo;s it. No other setup is necessary and no new branch will be made. Any questions, please feel free to leave a comment.</p>

<p>Thanks for reading!</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Wercker Test</title>
			<link>https://skarlso.github.io/2016/02/10/wercker-test/</link>
			<pubDate>Wed, 10 Feb 2016 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2016/02/10/wercker-test/</guid>
			<description>Basics This is a wercker Test.</description>
			<content type="html"><![CDATA[

<h2 id="basics">Basics</h2>

<p>This is a wercker Test.</p>
]]></content>
		</item>
		
		<item>
			<title>Doing CORS in Go with Gin and JSON</title>
			<link>https://skarlso.github.io/2016/02/02/doing-cors-in-go-with-gin-and-json/</link>
			<pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2016/02/02/doing-cors-in-go-with-gin-and-json/</guid>
			<description>Basics Hello folks.
This will be a quick post about how to do CORS with jQuery, Gin in Go with a very simple ajax GET and Json.
I&amp;rsquo;m choosing JSON here because basically I don&amp;rsquo;t really like JSONP. And actually, it&amp;rsquo;s not very complicated to do CORS, it&amp;rsquo;s just hidden enough so that it doesn&amp;rsquo;t become transparent.
First, what is CORS? It&amp;rsquo;s Cross-Platform Resource Sharing. It has been invented so that without your explicit authorization in the header of a request, Javascript can&amp;rsquo;t reach outside of your domain and be potentially harmful to your visitors.</description>
			<content type="html"><![CDATA[

<h2 id="basics">Basics</h2>

<p>Hello folks.</p>

<p>This will be a quick post about how to do CORS with jQuery, Gin in Go with a very simple ajax GET and Json.</p>

<p>I&rsquo;m choosing JSON here because basically I don&rsquo;t really like JSONP. And actually, it&rsquo;s not very complicated to do CORS, it&rsquo;s just hidden enough so that it doesn&rsquo;t become transparent.</p>

<p>First, what is CORS? It&rsquo;s Cross-Platform Resource Sharing. It has been invented so that without your explicit authorization in the header of a request, Javascript can&rsquo;t reach outside of your domain and be potentially harmful to your visitors.</p>

<p>Now, suppose you have an architecture like this.</p>

<p><img src="/img/architecture.png" alt="Architecture" /></p>

<p>You have multiple agents sitting on multiple nodes. You have one central server, and you have multiple front-ends. Everybody can only talk to the Server but the server does talk to everyone. You would like to have a dynamic front-end and would like to display data with ajax calls. Since your front-end sits on a different server, you will have to do something about CORS. This is how I solved it&hellip;</p>

<p>I&rsquo;m using <a href="https://github.com/gin-gonic/gin">Gin</a> for my REST service for <a href="https://github.com/Skarlso/dockmaster2">Dockmaster</a>. For this two work, you need to adjust two component.</p>

<h2 id="server">Server</h2>

<p>There is thing called a Preflight-Check. In essence, the preflight check is sent BEFORE the actual request to check if the next request is allowed to go out of the domain. The preflight check is sent to the same URI just with OPTIONS method. In order to tell the caller that the next one will be safe, you need three things.</p>

<p>First, you need to set two Headers.
#1 -&gt; Access-Control-Allow-Origin to &ldquo;*&ldquo;.
#2 -&gt; Access-Control-Allow-Headers to &ldquo;access-control-allow-origin, access-control-allow-headers&rdquo;.</p>

<p>These are the minimum headers you can set. If you allow Access-Control-Allow-Origin you also have to allow it in the headers section because the next request will expect it to be there. Also, note here that setting Origin to * is only recommended in development environment. Otherwise it should be set to whatever your domain is.</p>

<p>Second, you need to respond to the OPTIONS method with a 200. In order to do that, I added a simple rule with the same end-point but with OPTIONS.</p>

<pre><code class="language-go">func main() {
    router := gin.Default()
    v1 := router.Group(APIBASE)
    {
        v1.GET(&quot;/list&quot;, listContainers)
        v1.POST(&quot;/add&quot;, addContainers)
        v1.POST(&quot;/delete&quot;, deleteContainers)
        v1.GET(&quot;/inspect/:agentID/:containerID&quot;, inspectContainer)
        v1.OPTIONS(&quot;/inspect/:agentID/:containerID&quot;, preflight)
        v1.POST(&quot;/stopAll&quot;, stopAll)
        v1.OPTIONS(&quot;/stopAll&quot;, preflight)
    }
    router.Run(&quot;:8989&quot;)
}

func preflight(c *gin.Context) {
    c.Header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;)
    c.Header(&quot;Access-Control-Allow-Headers&quot;, &quot;access-control-allow-origin, access-control-allow-headers&quot;)
    c.JSON(http.StatusOK, struct{}{})
}
</code></pre>

<p>You can see that the preflight method is there for two end-points. I added it to those end-points which will reach over the domain. The others are all local, thus they don&rsquo;t need that. This leads to a little duplication, but that is fine. I have a very fine control over what actually is allowed to go outside of the domain.</p>

<p>So, how do we call this?</p>

<h2 id="frontend">Frontend</h2>

<p>In the front-end&rsquo;s web layout, I&rsquo;m doing an Ajax GET, which looks like this:</p>

<pre><code class="language-javascript">                $.ajax({
                    url: 'http://localhost:8989/api/1/inspect/'+data.agentid+'/'+data.id,
                    type: 'GET',
                    dataType:&quot;json&quot;,
                    headers: {&quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;, &quot;Access-Control-Allow-Headers&quot;: &quot;access-control-allow-origin, access-control-allow-headers&quot;},
                    processData: false,
                    success: function(data) {
                        var json = JSON.stringify(data, null, 4)
                        independentPopup.html(&quot;&lt;pre &gt;&quot;+json+&quot;&lt;/pre&gt;&quot;);
                        $(link).after(independentPopup);
                    }
                });
</code></pre>

<p>After the headers are set, the request will work nicely.</p>

<h2 id="y-u-no-middleware">Y U No Middleware?</h2>

<p>And now you could say that, why not just have a middleware which will always accept OPTIONS for every end-point. Because I like it better this way. Some would argue that this is too granular, but fact is, that in my opinion, this is more readable and immediatly visible. However, if you DO want to do that, you have several options to your disposal.</p>

<p><a href="https://github.com/itsjamie/gin-cors">Cors Basic Http Middleware</a> and for Gin <a href="https://github.com/itsjamie/gin-cors">Gin CORS Middleware</a>.</p>

<h2 id="summary">Summary</h2>

<p>This is it. You can see the code in its entirety on Github. Have a better idea on how to do it? Please! Do not hesitate to share. I always like to learn.</p>

<p>Thank you for reading!</p>

<p>And as always,
Have a nice day!</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>My Journey in advent of code</title>
			<link>https://skarlso.github.io/2016/01/22/my-journey-in-advent-of-code/</link>
			<pubDate>Fri, 22 Jan 2016 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2016/01/22/my-journey-in-advent-of-code/</guid>
			<description>Hello folks.
I wanted to share with you my tale of working through the problems with Advent Of Code.
It is a nice tale and there are a few things I learned from it, especially in Go, since I used that solve all of the problems. So, let&amp;rsquo;s get started.
Solving the problems The most important lesson I learned while doing these exercises was, how to solve these problems. A couple of them were simple enough to not have to over think it, but most of them got very tricky.</description>
			<content type="html"><![CDATA[

<p>Hello folks.</p>

<p>I wanted to share with you my tale of working through the problems with <a href="http://adventofcode.com">Advent Of Code</a>.</p>

<p>It is a nice tale and there are a few things I learned from it, especially in Go, since I used that solve all of the problems. So, let&rsquo;s get started.</p>

<h1 id="solving-the-problems">Solving the problems</h1>

<p>The most important lesson I learned while doing these exercises was, how to solve these problems. A couple of them were simple enough to not have to over think it, but most of them got very tricky. I could have gone with a brute force attempt, but as we see later, that wasn&rsquo;t always a very good solution. And people who used that, actually just got lucky finding their solutions.</p>

<p>The eight stages of breaking down a problem according to this book <a href="http://www.amazon.co.uk/Think-Like-Programmer-Introduction-Creative/dp/1593274246/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1453449575&amp;sr=1-1&amp;keywords=thinking+like+a+programmer">Thinking Like a Programmer</a> are the following:</p>

<ul>
<li>Have a plan</li>
<li>Rephrase</li>
<li>Divide</li>
<li>Start with what you know</li>
<li>Reduce</li>
<li>Analogies</li>
<li>Experiment</li>
<li>Don&rsquo;t get frustrated</li>
</ul>

<h2 id="have-a-plan-and-understanding-your-goal">Have a plan and understanding your goal</h2>

<p>This is simple. Always have a plan of what you would like to do, and how to start. This will help you massively along the way to not to loose sight of what your goal is actually. For example, look at <a href="http://adventofcode.com/day/24">Day 24</a>. At first, it looks like a permutational puzzle, but if you understand the solution we are looking for, you realize that there is an easier way of finding it. Since you only want the packages which consists of the fewest item counts, you would only care about the largest numbers because those will be the fewest which still give you the desired package weight. Suddenly the problem gets easier because you don&rsquo;t have to worry about the other groups any longer.</p>

<h2 id="rephrase">Rephrase</h2>

<p>Rephrasing the problem with your own words can help in understanding it better. Or even better, try explaining it to somebody else. If you cannot rephrase it, you didn&rsquo;t understand it in the first place.</p>

<h2 id="divide">Divide</h2>

<p>If the problem seems daunting because it&rsquo;s massive, just divide it into smaller chunks. This is something that we usually do with large problems, but it&rsquo;s more subtle than that. If you face a problem which seems complex, just factor out parts of it until you got a problem which you do understand. Even if you have to butcher the original puzzle problem. It doesn&rsquo;t matter. Adding complexity later is easier than adding complexity in its infancy.</p>

<h2 id="start-with-what-you-know-finding-analogies">Start with what you know &amp;&amp; Finding analogies</h2>

<p>This one speaks for itself. If you know parts of the problem, because you know analogy for it, or you faced something similar before, or exactly that, start with that.</p>

<h2 id="reduce">Reduce</h2>

<p>If the problem seems too complex, remove complexity. Start with a smaller set. Preferably something testable (I&rsquo;ll come back to that later). Remove constraints, or add them as desired. A constraint makes it harder to solve the puzzle? Remove it, and try solving it without. After that, the solution will give you insight into the problem and you can add that constraint back in.</p>

<p>Consider <a href="http://adventofcode.com/day/11">Day 11</a>. I had fun with this one. In order to easy it up a little, I first, removed the constraint of doing the increment with letters. I did it with numbers. I also removed the constraint of doing it within the confines of a limited length array. After I got that I&rsquo;ll use modulo to make the numbers wrap around, it was way more easy to apply it to characters. And after a little fidgeting this came to life:</p>

<pre><code class="language-go">passwd[i] -= 'a'
passwd[i] = (passwd[i] + 1) % (('z' - 'a') + 1)
passwd[i] += 'a'
</code></pre>

<p>The -,+ &lsquo;a&rsquo; is needed so that it&rsquo;s dealing with ascii code from 0 - &lsquo;z&rsquo;. This basically makes it so that when I reach the end of the alphabet it will wrap around and start from &lsquo;a&rsquo; again.</p>

<h2 id="experiment">Experiment</h2>

<p>This led to more solutions than I care to admit. Basically just start experimenting with solutions which are in your head. There is a chance, that what you come up with, will be the solution. This goes very well with the principle of <em>Make it work</em>, <em>Make it right</em>, <em>Make it fast</em>. Just have something working first, and than you can make it work properly after. It&rsquo;s always better to have <em>something</em> rather than nothing.</p>

<p>And last but not least&hellip;</p>

<h2 id="don-t-get-frustrated">Don&rsquo;t get frustrated</h2>

<p>This is something I cannot say strongly enough. Seriously. <strong>DO NOT GET FRUSTRATED</strong>. Most of the problems were designed to be harder. Unless you work as a programmer professionally for several years now, or this is a field of interest for you, you will spend a day hacking around on a problem and trying to find a solution which is adequate. In these times, you will get frustrated and think you are too stupid for this, this couldn&rsquo;t be more far from the truth! You might need some inspiration, you might need some time away from the screen, it helps if you draw out the problem in a piece of paper, or just think about it without seeing it for a while. Just take a break, eat something, watch a comedy and get back to it later with a fresh view.</p>

<h1 id="technical-gotchas">Technical Gotchas</h1>

<p>So after the general problem solving side of things, I learned many things about Go, and about the tidbits of this language.</p>

<h2 id="byte-slices">Byte Slices</h2>

<p>I already knew that []byte is more performant and that Go optimizes on them more, but not to this extent. As in my previous blog posts I discovered that using them can really make a huge difference. Go even has a library called <code>bytes</code> which has helper functions similar to that of <code>strings</code> to help you out in these situations. Go optimizes on map recalls as well when you cast to string from []byte and use that as a map key like this: myMap[string(data)].</p>

<h2 id="brute-force-or-looping">Brute Force or Looping</h2>

<p>Most of the times you could get away with looping or trying to brute force out a solution. But there were times, where you really had to huddle down and think the problem through. Because simply looping, either took too long, or didn&rsquo;t come up with a good answer. That&rsquo;s why I rather always start with: &lsquo;How could I solve this without looping?&rsquo;. This will get you into the right mindset. Or thinking: &lsquo;How could I solve this without taking each and every combination into account?&rsquo;. These questions will help you to think about the problem without loops. Or only if you REALLY must use one.</p>

<p>Doing this will get you into the right way of thinking. I know that in advent of code there is a Leaderboard and you could get on it if you were fast. But most of the times having a fast solution is far from having the right solution.</p>

<h2 id="structs-are-awesome">Structs are Awesome</h2>

<p>I like using structs. They are a very lightweight way of defining objects, structures which stick together. For example in the <a href="http://adventofcode.com/day/6">Day 6</a> Light puzzle, or even <a href="http://adventofcode.com/day/3">Day 3</a> Traveling santa example, a struct which stuck x,y locations together and made it a map key, it was trivial to make my gif out of it with SVG -&gt;</p>

<p><img src="https://raw.githubusercontent.com/Skarlso/goprojects/master/advent/day3/day1.gif" alt="Traveling Santa" /></p>

<h2 id="go-is-simple-to-read">Go is Simple to Read</h2>

<p>[opinion] I like Go because of its simplicity. You don&rsquo;t see stuff in Go most of the times, where you need to look three times to understand what the heck is going on. I like filter, reduce, map and syntactic sugar, but they make for a very poor reading experience. Go, in that way, choose not to incorporate these paradigms and I find that refreshing. [/opinion]</p>

<h2 id="testing">Testing</h2>

<p>TDD is something we all should know by now and care about. When I&rsquo;m doing puzzles, or finger exercises, I tend to not write tests. But on a more complex puzzle, or a task, I always start with a test. Especially if you are given samples for a puzzle which work. That&rsquo;s a gold mine. You can tweak your algorithm using those samples until they work and then simply apply a larger sample size.</p>

<p>Tests will also help you with breaking down a problem and identifying parts which you already know.</p>

<p>For example <a href="http://adventofcode.com/day/13">Day 13</a>. Optimal Seating arrangements. Or the similar <a href="http://adventofcode.com/day/9">Day 9</a>. Which was calculating shortest route distance. Or the password one, Day 11 which I showed before. In these cases, tests helped me make the core of the algorithm solid. Calculating connections, or the odd regex here and there, which was making sure that the password was validated properly.</p>

<p>Tests will also help you to be able to move on after you found your solution. When I was done with the first iteration of passwords which was still using strings, I went on to optimize it, to use []byte. The tests helped me to know that the code was still working as expected after the refactoring.</p>

<h1 id="closing-words">Closing words</h1>

<p>All in all it was a massive amount of fun doing these exercises and I&rsquo;m thankful to the creator for making it. And I did enjoy the story behind the exercises as well. I think this site stood out because it had a fun factor. For simple exercises there are a lot of other sites -like Project Euler, or Sphere Judge Online-, which just plainly present you a problem and that&rsquo;s it. It&rsquo;s still fun, but it can also became boring very fast. Don&rsquo;t forget the fun factor which makes you plow on and go into a blind frenzy that you cannot quit until it&rsquo;s done. That&rsquo;s the fun part.</p>

<p>Thank you for reading!
Have a nice day.
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Improving performance with byte slice and int map</title>
			<link>https://skarlso.github.io/2016/01/05/improving-performance-with-byte-slice-and-int-map/</link>
			<pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2016/01/05/improving-performance-with-byte-slice-and-int-map/</guid>
			<description>Hello Folks.
Today I would like to share with you my little tale of refactoring my solution to Advent Of Code Day 13.
It&amp;rsquo;s a lovely tale of action, adventure, drama, and comedy.
Let&amp;rsquo;s being with my first iteration of the problem.
package main import ( &amp;quot;bufio&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;math&amp;quot; &amp;quot;os&amp;quot; &amp;quot;strconv&amp;quot; &amp;quot;strings&amp;quot; &amp;quot;github.com/skarlso/goutils/arrayutils&amp;quot; ) var seatingCombinations = make([][]string, 0) var table = make(map[string][]map[string]int) var keys = make([]string, 0) //Person a person type Person struct { // neighbour *Person name string like int } func main() { file, _ := os.</description>
			<content type="html"><![CDATA[<p>Hello Folks.</p>

<p>Today I would like to share with you my little tale of refactoring my solution to <a href="http://adventofcode.com/day/13">Advent Of Code Day 13</a>.</p>

<p>It&rsquo;s a lovely tale of action, adventure, drama, and comedy.</p>

<p>Let&rsquo;s being with my first iteration of the problem.</p>

<pre><code class="language-go">package main

import (
	&quot;bufio&quot;
	&quot;fmt&quot;
	&quot;math&quot;
	&quot;os&quot;
	&quot;strconv&quot;
	&quot;strings&quot;

	&quot;github.com/skarlso/goutils/arrayutils&quot;
)

var seatingCombinations = make([][]string, 0)
var table = make(map[string][]map[string]int)
var keys = make([]string, 0)

//Person a person
type Person struct {
	// neighbour *Person
	name string
	like int
}

func main() {
	file, _ := os.Open(&quot;input.txt&quot;)
	defer file.Close()
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()
		split := strings.Split(line, &quot; &quot;)
		like, _ := strconv.Atoi(split[3]) //If lose -&gt; * -1
		if split[2] == &quot;lose&quot; {
			like *= -1
		}
		table[split[0]] = append(table[split[0]], map[string]int{strings.Trim(split[10], &quot;.&quot;): like})
		if !arrayutils.ContainsString(keys, split[0]) {
			keys = append(keys, split[0])
		}
	}
	generatePermutation(keys, len(keys))
	fmt.Println(&quot;Best seating efficiency:&quot;, calculateSeatingEfficiancy())
}

func generatePermutation(s []string, n int) {
	if n == 1 {
		news := make([]string, len(s))
		copy(news, s)
		seatingCombinations = append(seatingCombinations, news)
	}
	for i := 0; i &lt; n; i++ {
		s[i], s[n-1] = s[n-1], s[i]
		generatePermutation(s, n-1)
		s[i], s[n-1] = s[n-1], s[i]
	}
}

func calculateSeatingEfficiancy() int {
	bestSeating := math.MinInt64
	for _, v := range seatingCombinations {
		calculatedOrder := 0

		for i := range v {
			left := (i - 1) % len(v)
			//This is to work around the fact that in Go
			//modulo of a negative number will not return a positive number.
			//So -1 % 4 will not return 3 but -1. In that case we add length.
			if left &lt; 0 {
				left += len(v)
			}
			right := (i + 1) % len(v)
			// fmt.Printf(&quot;Left: %d; Right: %d\n&quot;, left, right)
			leftLike := getLikeForTargetConnect(v[i], v[left])
			rightLike := getLikeForTargetConnect(v[i], v[right])
			// fmt.Printf(&quot;Name: %s; Left:%d; Right:%d\n&quot;, v[i], leftLike, rightLike)
			calculatedOrder += leftLike + rightLike
		}
		// fmt.Printf(&quot;Order for: %v; Calc:%d\n&quot;, v, calculatedOrder)
		if calculatedOrder &gt; bestSeating {
			bestSeating = calculatedOrder
		}
	}

	return bestSeating
}

func getLikeForTargetConnect(name string, neighbour string) int {
	neighbours := table[name]
	for _, t := range neighbours {
		if v, ok := t[neighbour]; ok {
			return v
		}
	}
	return 0
}
</code></pre>

<p>This is quiet large. And takes a bit of explaining. So what is happening here? We are putting the names which correspond with numbers and neighbours into a map which has a map as a value. The map contains seating information for a person. For example, next to Alice, a bunch of people can sit, and they have a certain relationship to Alice, represented by a number.</p>

<p>We could, at this point, represent it with a graph, but that would be overkill.</p>

<p>Permutation is simple because I choose to represent a Table with a Circular Slice. This means that a slice like this =&gt; Alice, Bob, Tom; means that Alice is sitting next to Bob and Tom. So Alice&rsquo;s neighbour of -1 (left) is in fact i-1 % 3. And Bob is i + 1. For Tom, Alice is i + 1 % 3. After we got this, we just permutate the possible combinations into slices of slices and iterate over them.</p>

<p>The benchmark for this is terrible.</p>

<pre><code class="language-bash">
================With Strings================
20	 589571259 ns/op
ok  	github.com/skarlso/goprojects/advent/day13/part1	11.873s
</code></pre>

<p>So, my first thought was, convert everything I can to []byte. But because slices cannot be map keys, because map keys need to be comparable, we are still stuck with the same ns/ops.</p>

<pre><code class="language-go">//var seatingCombinations = make([][]string, 0)
//var keys = make([]string, 0)
var seatingCombinations = make([][][]byte, 0)
var keys = make([][]byte, 0)
</code></pre>

<p>And I adjusted the code to work with []byte instead. What can we do to fix the map though? One obvious gain is, not to use string as a key. Because strings are immutable, working with them always means copy-ing and that&rsquo;s why they get to be very slow. So removing them from Keys and using Numbers instead will mean a huge gain for us.</p>

<p>To do this, I created a map which maps names with numbers. I could hardcode them with iota, but that is a very bad thing to do. It would mean, that when I add a new name, I would have to go, and re-compile my code, because data changed. That&rsquo;s not what we want.</p>

<p>So, I added this little tid-bit into the for cycle when I&rsquo;m reading in the file lines =&gt;</p>

<pre><code class="language-go">...
if _, ok := nameMapping[split[0]]; !ok {
    nameMapping[split[0]] = id
    id++
}
if _, ok := nameMapping[trimmedNeighbour]; !ok {
    nameMapping[trimmedNeighbour] = id
    id++
}
...
</code></pre>

<p>Id starts as Zero. And nameMapping is a simple map[string]int. After this, we fix all the map calls, from <code>table[split[0]]</code> to <code>table[nameMapping[split[0]]]</code>. Table&rsquo;s map will now work with int, but we can still work with strings otherwise.</p>

<pre><code class="language-go">table[nameMapping[split[0]]] = append(table[nameMapping[split[0]]], map[int]int{nameMapping[trimmedNeighbour]: like})
</code></pre>

<p>This has now a marginally better performance as before:</p>

<pre><code class="language-bash">BenchmarkCalculateSeating	      50	  32637879 ns/op
ok  	github.com/skarlso/goprojects/advent/day13/part1	1.698s
</code></pre>

<p>But, we can still do a HUGE one better. Can you notice the other bottleneck? See, how keys are still []byte? That&rsquo;s, now completely unnecessary. We can use int, since our keys are ints! <em>Permutation</em> changes, and the retrieve.</p>

<pre><code class="language-go">...
func generatePermutation(s []int, n int) {
...

...
func getLikeForTargetConnect(name int, neighbour int) int {
	neighbours := table[name]
	for _, t := range neighbours {
		if v, ok := t[neighbour]; ok {
			return v
		}
	}
	return 0
}
...
</code></pre>

<p>Permutation was the Other huge performance consumption. Now, our run time is&hellip;. drum rolls&hellip;</p>

<pre><code class="language-bash">BenchmarkCalculateSeating	   10000	    166431 ns/op
ok  	github.com/skarlso/goprojects/advent/day13/part1	1.695s
</code></pre>

<p>Down to 166431 ns/op!!! From 32637879 ns/op!! And notice how suddenly, go&rsquo;s benchmark jumped up in sample count. Our code is now blazing fast. It&rsquo;s 0.05% of the previous run! It&rsquo;s almost <strong>200 times faster</strong>!</p>

<p>We could still improve it here and there. I&rsquo;m sure I&rsquo;m doing some extra stuff which is not needed or could be made easier somehow. But I&rsquo;m actually quiet happy with this solution right now.</p>

<p>The full code:</p>

<pre><code class="language-go">package main

import (
	&quot;bufio&quot;
	&quot;math&quot;
	&quot;os&quot;
	&quot;strconv&quot;
	&quot;strings&quot;

	&quot;github.com/skarlso/goutils/arrayutils&quot;
)

var seatingCombinations = make([][]int, 0)
var table = make(map[int][]map[int]int)
var keys = make([]int, 0)
var nameMapping = make(map[string]int)

//Person a person
type Person struct {
	// neighbour *Person
	name string
	like int
}

func main() {
	CalculatePerfectSeating()
}

//CalculatePerfectSeating returns the perfect seating order based on Love/Hate relations
func CalculatePerfectSeating() {
	file, _ := os.Open(&quot;input.txt&quot;)
	defer file.Close()
	scanner := bufio.NewScanner(file)
	id := 0
	for scanner.Scan() {
		line := scanner.Text()
		split := strings.Split(line, &quot; &quot;)
		trimmedNeighbour := strings.Trim(split[10], &quot;.&quot;)
		like, _ := strconv.Atoi(split[3]) //If lose -&gt; * -1
		if _, ok := nameMapping[split[0]]; !ok {
			nameMapping[split[0]] = id
			id++
		}
		if _, ok := nameMapping[trimmedNeighbour]; !ok {
			nameMapping[trimmedNeighbour] = id
			id++
		}
		if split[2] == &quot;lose&quot; {
			like *= -1
		}
		table[nameMapping[split[0]]] = append(table[nameMapping[split[0]]], map[int]int{nameMapping[trimmedNeighbour]: like})
		if !arrayutils.ContainsInt(keys, nameMapping[split[0]]) {
			keys = append(keys, nameMapping[split[0]])
		}
	}
	generatePermutation(keys, len(keys))
	// fmt.Println(&quot;Best seating efficiency:&quot;, calculateSeatingEfficiancy())
}

func generatePermutation(s []int, n int) {
	if n == 1 {
		news := make([]int, len(s))
		copy(news, s)
		seatingCombinations = append(seatingCombinations, news)
	}
	for i := 0; i &lt; n; i++ {
		s[i], s[n-1] = s[n-1], s[i]
		generatePermutation(s, n-1)
		s[i], s[n-1] = s[n-1], s[i]
	}
}

func calculateSeatingEfficiancy() int {
	bestSeating := math.MinInt64
	for _, v := range seatingCombinations {
		calculatedOrder := 0

		for i := range v {
			left := (i - 1) % len(v)
			//This is to work around the fact that in Go
			//modulo of a negative number will not return a positive number.
			//So -1 % 4 will not return 3 but -1. In that case we add length.
			if left &lt; 0 {
				left += len(v)
			}
			right := (i + 1) % len(v)
			calculatedOrder += getLikeForTargetConnect(v[i], v[left]) + getLikeForTargetConnect(v[i], v[right])
		}
		if calculatedOrder &gt; bestSeating {
			bestSeating = calculatedOrder
		}
	}

	return bestSeating
}

func getLikeForTargetConnect(name int, neighbour int) int {
	neighbours := table[name]
	for _, t := range neighbours {
		if v, ok := t[neighbour]; ok {
			return v
		}
	}
	return 0
}
</code></pre>

<p>Also, on github =&gt; <a href="https://github.com/Skarlso/goprojects/tree/master/advent/day13">Advent Of Code Day 13</a>.</p>

<p>Thank you very much for reading, this has been a massive fun to write and to refactor.</p>

<p>Have something to say? Please don&rsquo;t hesitate.</p>

<p>And as always,</p>

<p>Have a nice day!</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Byte arrays and Channels</title>
			<link>https://skarlso.github.io/2016/01/01/byte-arrays-and-channels/</link>
			<pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2016/01/01/byte-arrays-and-channels/</guid>
			<description>Hi folks and a Happy new Year!
Today, I would like to show you some interesting things you can do with channels. Consider the following simple example.
package main import &amp;quot;fmt&amp;quot; func main() { generatedPassword := make(chan int, 100) correctPassword := make(chan int) defer close(generatedPassword) defer close(correctPassword) go passwordIncrement(generatedPassword) go checkPassword(generatedPassword, correctPassword) pass := &amp;lt;-correctPassword fmt.Println(pass) } func checkPassword(input &amp;lt;-chan int, output chan&amp;lt;- int) { for { p := &amp;lt;-input //Introduce lengthy operation here // time.</description>
			<content type="html"><![CDATA[<p>Hi folks and a Happy new Year!</p>

<p>Today, I would like to show you some interesting things you can do with channels. Consider the following simple example.</p>

<pre><code class="language-go">package main

import &quot;fmt&quot;

func main() {
	generatedPassword := make(chan int, 100)
	correctPassword := make(chan int)
	defer close(generatedPassword)
	defer close(correctPassword)
	go passwordIncrement(generatedPassword)
	go checkPassword(generatedPassword, correctPassword)
	pass := &lt;-correctPassword
	fmt.Println(pass)
}

func checkPassword(input &lt;-chan int, output chan&lt;- int) {
	for {
		p := &lt;-input
		//Introduce lengthy operation here
		// time.Sleep(time.Second)
		fmt.Println(&quot;Checking p:&quot;, p)
		if p &gt; 100000 {
			output &lt;- p
		}
	}
}

func passwordIncrement(out chan&lt;- int) {
	p := 0
	for {
		p++
		out &lt;- p
	}
}
</code></pre>

<p>The premise is as follows. It launches two go routines. One, which generates passwords, and an other which checks for validity. The two routines talk to each other through the channel <code>generatedPassword</code>. That&rsquo;s the providing connections between them. The channel <code>correctPassword</code> provides output for the <code>checkPassword</code> routine.</p>

<p>If there is data received from <code>correctPassword</code> channel, we found our first password and there is no need to look further so we, print the password and quit. The channels will close with defer. This works. But the password is usually either a []byte or a string. With string, it still works.</p>

<pre><code class="language-go">package main

import &quot;fmt&quot;

func main() {
	generatedPassword := make(chan string, 100)
	correctPassword := make(chan string)
	defer close(generatedPassword)
	defer close(correctPassword)
	go passwordIncrement(generatedPassword)
	go checkPassword(generatedPassword, correctPassword)
	pass := &lt;-correctPassword
	fmt.Println(pass)
}

func checkPassword(input &lt;-chan string, output chan&lt;- string) {
	for {
		p := &lt;-input
		//Introduce lengthy operation here
		// time.Sleep(time.Second)
		fmt.Println(&quot;Checking p:&quot;, p)
		if performSomeCheckingOperation(p) {
			output &lt;- p
		}
	}
}

func generateNewPassword(out chan&lt;- string) {
	var p string
	for {
		p = generate(p)
		out &lt;- p
	}
}
</code></pre>

<p>The generating happens based on the previously generated password. For example, we increment, or permeate. aaaa, aaab, aaac&hellip;</p>

<p>So <code>generatedPassword</code> is a buffered channel, it gathers a 100 passwords from which checking retrieves passwords one by one and works on them in a slower process.</p>

<p>Now, this is fine, but using []byte arrays will always be more powerful and faster. So we would like to use []byte. Like this:</p>

<pre><code class="language-go">package main

import &quot;fmt&quot;

func main() {
	generatedPassword := make(chan []byte, 100)
	correctPassword := make(chan []byte)
	defer close(generatedPassword)
	defer close(correctPassword)
	go passwordIncrement(generatedPassword)
	go checkPassword(generatedPassword, correctPassword)
	pass := &lt;-correctPassword
	fmt.Println(string(pass))
}

func checkPassword(input &lt;-chan []byte, output chan&lt;- []byte) {
	for {
		p := &lt;-input
		//Introduce lengthy operation here
		// time.Sleep(time.Second)
		fmt.Println(&quot;Checking p:&quot;, string(p))
		if performSomeCheckingOperation(p) {
			output &lt;- p
		}
	}
}

func generateNewPassword(out chan&lt;- []byte) {
	var p []byte
	for {
		p = generate(p)
		out &lt;- p
	}
}
</code></pre>

<p>This will not work. Why? Because []byte is a slice and thus will be constantly overwritten. The checking go routine will always only check the last data and many generated passwords will be lost. This is also noted in go&rsquo;s scanner here =&gt; <a href="https://golang.org/pkg/bufio/#Scanner.Bytes">Scanner.Bytes</a></p>

<p>We have a couple of options here.</p>

<p>We could use <code>string</code> channels and convert to []byte after. This is still okay, because the conversion isn&rsquo;t very CPU intensive.</p>

<pre><code class="language-go">...
generatedPassword := make(chan string, 100)
correctPassword := make(chan string)
...
p := []byte(&lt;-input) //This will work very nicely.
...
</code></pre>

<p>Options two would be If you have a fixed password to handle, fix data, for example MD5 hash, you can use a byte array. Like this:</p>

<pre><code class="language-go">package main

import &quot;fmt&quot;

const PASSWD=13

func main() {
	generatedPassword := make(chan [PASSWD]byte, 100)
	correctPassword := make(chan [PASSWD]byte)
	defer close(generatedPassword)
	defer close(correctPassword)
	go passwordIncrement(generatedPassword)
	go checkPassword(generatedPassword, correctPassword)
	pass := &lt;-correctPassword
	fmt.Println(string(pass))
}

func checkPassword(input &lt;-chan [PASSWD]byte, output chan&lt;- [PASSWD]byte) {
	for {
		p := &lt;-input
		//Introduce lengthy operation here
		// time.Sleep(time.Second)
		fmt.Println(&quot;Checking p:&quot;, string(p))
		if performSomeCheckingOperation(p) {
			output &lt;- p
		}
	}
}

func generateNewPassword(out chan&lt;- [PASSWD]byte) {
	var p [PASSWD]byte
	for {
		p = generate(p)
		out &lt;- p
	}
}
</code></pre>

<p>This is also one solution. If you have to convert between the two, could go with <code>p := byte[:]</code>.</p>

<p>Conclusion is, that use conversion rather than string types and be aware that using slices in channels is dangerous.</p>

<p>Thanks for reading!
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Use Byte Array Instead of Strings</title>
			<link>https://skarlso.github.io/2015/12/29/use-byte-array-instead-of-strings/</link>
			<pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/12/29/use-byte-array-instead-of-strings/</guid>
			<description>Hello Folks.
This is just a quick post on the topic and a reminder for myself and everybody to ALWAYS USE []BYTE INSTEAD OF STRINGS.
[]Byte is marginally faster than a simple Strings. In fact, I would say using []byte should be the standard instead of strings.
Sample code:
package solutions import &amp;quot;fmt&amp;quot; const ( //INPUT input INPUT = &amp;quot;1321131112&amp;quot; //LIMIT limit LIMIT = 50 ) //LookAndSay translates numbers according to Look and Say algo func LookAndSay(s string, c chan string) { charCount := 1 look := &amp;quot;&amp;quot; for i := range s { if i+1 &amp;lt; len(s) { if s[i] == s[i+1] { charCount++ } else { look += fmt.</description>
			<content type="html"><![CDATA[<p>Hello Folks.</p>

<p>This is just a quick post on the topic and a reminder for myself and everybody to ALWAYS USE []BYTE INSTEAD OF STRINGS.</p>

<p>[]Byte is marginally faster than a simple Strings. In fact, I would say using []byte should be the standard instead of strings.</p>

<p>Sample code:</p>

<pre><code class="language-go">package solutions

import &quot;fmt&quot;

const (
    //INPUT input
    INPUT = &quot;1321131112&quot;
    //LIMIT limit
    LIMIT = 50
)

//LookAndSay translates numbers according to Look and Say algo
func LookAndSay(s string, c chan string) {
    charCount := 1
    look := &quot;&quot;
    for i := range s {
        if i+1 &lt; len(s) {
            if s[i] == s[i+1] {
                charCount++
            } else {
                look += fmt.Sprintf(&quot;%d%s&quot;, charCount, string(s[i]))
                charCount = 1
            }
        } else {
            look += fmt.Sprintf(&quot;%d%s&quot;, charCount, string(s[i]))
        }
    }
    c &lt;- look
}

//GetLengthOfLookAndSay Retrieve the Length of a lookandsay done Limit times
func GetLengthOfLookAndSay() {
    c := make(chan string, 0)
    go LookAndSay(INPUT, c)
    finalString := &lt;-c
    for i := 0; i &lt;= LIMIT-2; i++ {
        go LookAndSay(finalString, c)
        finalString = &lt;-c
        // fmt.Println(finalString)
    }
    fmt.Println(&quot;Lenght of final String:&quot;, len(finalString))
}

</code></pre>

<p>This, with the limit raised to 50 run for ~1 hour. Even with the routines although they were just for show since they had to wait for each others input.</p>

<p>Now change this to []byte and the run time was almost under 2 seconds on my machine.</p>

<pre><code class="language-go">package solutions

import (
    &quot;fmt&quot;
    &quot;strconv&quot;
)

const (
    //LIMIT limit
    LIMIT = 50
)

//INPUT puzzle input
//This used to be a string until I was reminded that BYTE ARRAY IS ALWAYS FASTER!
var INPUT = []byte(&quot;1321131112&quot;)

//LookAndSay translates numbers according to Look and Say algo
func LookAndSay(s []byte) (look []byte) {
    charCount := 1
    for i := range s {
        if i+1 &lt; len(s) {
            if s[i] == s[i+1] {
                charCount++
            } else {
                b := []byte(strconv.FormatInt(int64(charCount), 10))
                look = append(look, b[0], s[i])
                charCount = 1
            }
        } else {
            b := []byte(strconv.FormatInt(int64(charCount), 10))
            look = append(look, b[0], s[i])
        }
    }
    return
}

//GetLengthOfLookAndSay Retrieve the Length of a lookandsay done Limit times
func GetLengthOfLookAndSay() {
    finalString := INPUT
    for i := 0; i &lt;= LIMIT-1; i++ {
        finalString = LookAndSay(finalString)
    }
    fmt.Println(&quot;Lenght of final String:&quot;, len(finalString))
}

</code></pre>

<p>This is the solution for Day 10 on <a href="http://adventofcode.com/">AdventOfCode</a> by the way.</p>

<p>Thanks for readin&rsquo;.
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Use Byte Slice Instead of Strings</title>
			<link>https://skarlso.github.io/2015/12/29/use-byte-slice-instead-of-strings/</link>
			<pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/12/29/use-byte-slice-instead-of-strings/</guid>
			<description>Hello Folks.
This is just a quick post on the topic and a reminder for myself and everybody to ALWAYS USE []BYTE INSTEAD OF STRINGS.
[]Byte is marginally faster than a simple Strings. In fact, I would say using []byte should be the standard instead of strings.
Sample code:
package solutions import &amp;quot;fmt&amp;quot; const ( //INPUT input INPUT = &amp;quot;1321131112&amp;quot; //LIMIT limit LIMIT = 50 ) //LookAndSay translates numbers according to Look and Say algo func LookAndSay(s string, c chan string) { charCount := 1 look := &amp;quot;&amp;quot; for i := range s { if i+1 &amp;lt; len(s) { if s[i] == s[i+1] { charCount++ } else { look += fmt.</description>
			<content type="html"><![CDATA[<p>Hello Folks.</p>

<p>This is just a quick post on the topic and a reminder for myself and everybody to ALWAYS USE []BYTE INSTEAD OF STRINGS.</p>

<p>[]Byte is marginally faster than a simple Strings. In fact, I would say using []byte should be the standard instead of strings.</p>

<p>Sample code:</p>

<pre><code class="language-go">package solutions

import &quot;fmt&quot;

const (
    //INPUT input
    INPUT = &quot;1321131112&quot;
    //LIMIT limit
    LIMIT = 50
)

//LookAndSay translates numbers according to Look and Say algo
func LookAndSay(s string, c chan string) {
    charCount := 1
    look := &quot;&quot;
    for i := range s {
        if i+1 &lt; len(s) {
            if s[i] == s[i+1] {
                charCount++
            } else {
                look += fmt.Sprintf(&quot;%d%s&quot;, charCount, string(s[i]))
                charCount = 1
            }
        } else {
            look += fmt.Sprintf(&quot;%d%s&quot;, charCount, string(s[i]))
        }
    }
    c &lt;- look
}

//GetLengthOfLookAndSay Retrieve the Length of a lookandsay done Limit times
func GetLengthOfLookAndSay() {
    c := make(chan string, 0)
    go LookAndSay(INPUT, c)
    finalString := &lt;-c
    for i := 0; i &lt;= LIMIT-2; i++ {
        go LookAndSay(finalString, c)
        finalString = &lt;-c
        // fmt.Println(finalString)
    }
    fmt.Println(&quot;Lenght of final String:&quot;, len(finalString))
}

</code></pre>

<p>This, with the limit raised to 50 run for ~1 hour. Even with the routines although they were just for show since they had to wait for each others input.</p>

<p>Now change this to []byte and the run time was almost under 2 seconds on my machine.</p>

<pre><code class="language-go">package solutions

import (
    &quot;fmt&quot;
    &quot;strconv&quot;
)

const (
    //LIMIT limit
    LIMIT = 50
)

//INPUT puzzle input
//This used to be a string until I was reminded that BYTE ARRAY IS ALWAYS FASTER!
var INPUT = []byte(&quot;1321131112&quot;)

//LookAndSay translates numbers according to Look and Say algo
func LookAndSay(s []byte) (look []byte) {
    charCount := 1
    for i := range s {
        if i+1 &lt; len(s) {
            if s[i] == s[i+1] {
                charCount++
            } else {
                b := []byte(strconv.FormatInt(int64(charCount), 10))
                look = append(look, b[0], s[i])
                charCount = 1
            }
        } else {
            b := []byte(strconv.FormatInt(int64(charCount), 10))
            look = append(look, b[0], s[i])
        }
    }
    return
}

//GetLengthOfLookAndSay Retrieve the Length of a lookandsay done Limit times
func GetLengthOfLookAndSay() {
    finalString := INPUT
    for i := 0; i &lt;= LIMIT-1; i++ {
        finalString = LookAndSay(finalString)
    }
    fmt.Println(&quot;Lenght of final String:&quot;, len(finalString))
}

</code></pre>

<p>This is the solution for Day 10 on <a href="http://adventofcode.com/">AdventOfCode</a> by the way.</p>

<p>Thanks for readin&rsquo;.
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Recursive Letter Frequency Count</title>
			<link>https://skarlso.github.io/2015/12/23/recursive-freq-count/</link>
			<pubDate>Wed, 23 Dec 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/12/23/recursive-freq-count/</guid>
			<description>Hello everybody!
I wanted to do a sort post about word frequency count. I did it many times now and I was curious as how a recursive solution would perform as opposed to looping.
So I wrote it up quickly and added a few benchmarks with different sized data.
First&amp;hellip;. The code:
var freqMap = make(map[string]int, 0) func countLettersRecursive(s string) string { if len(s) == 0 { return s } freqMap[string(s[0])]++ return countLettersRecursive(s[1:]) } func countLettersLoop(s string) { for _, v := range s { freqMap[string(v)]++ } }  Very simple.</description>
			<content type="html"><![CDATA[<p>Hello everybody!</p>

<p>I wanted to do a sort post about word frequency count. I did it many times now and I was curious as how a recursive solution would perform as opposed to looping.</p>

<p>So I wrote it up quickly and added a few benchmarks with different sized data.</p>

<p>First&hellip;. The code:</p>

<pre><code class="language-go">var freqMap = make(map[string]int, 0)

func countLettersRecursive(s string) string {
    if len(s) == 0 {
        return s
    }
    freqMap[string(s[0])]++
    return countLettersRecursive(s[1:])
}

func countLettersLoop(s string) {
    for _, v := range s {
        freqMap[string(v)]++
    }
}
</code></pre>

<p>Very simple. The first run with a small sample: &ldquo;asdfasdfasdfasdfasdf&rdquo;</p>

<pre><code class="language-bash">BenchmarkLoopFrequencyCount  5000000           377 ns/op
BenchmarkRecursiveFrequencyCount     5000000           380 ns/op
</code></pre>

<p>They almost equal but Recursive seems to be lagging behind. So I increased the sample size to a text which was 496 long.</p>

<pre><code class="language-bash">PASS
BenchmarkLoopFrequencyCount    30000         53336 ns/op
BenchmarkRecursiveFrequencyCount       20000         61780 ns/op
</code></pre>

<p>And, as expected, recursing is less performant than looping. Also, I think my machine would die from a larger data size&hellip;</p>

<p>But the recursive looks so much cooler though.</p>

<p>Thanks for reading!
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Go Development Environment</title>
			<link>https://skarlso.github.io/2015/12/08/go-development-environment/</link>
			<pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/12/08/go-development-environment/</guid>
			<description>Hello folks.
Here is a little something I&amp;rsquo;ve put together, since I&amp;rsquo;m doing it a lot.
Go Development Environment
If I have a project I&amp;rsquo;d like to contribute, like GoHugo, I have to setup a development environment, because most of the times, I&amp;rsquo;m on a Mac. And on OSX things work differently. I like to work in a Linux environment since that&amp;rsquo;s what most of the projects are built on.</description>
			<content type="html"><![CDATA[<p>Hello folks.</p>

<p>Here is a little something I&rsquo;ve put together, since I&rsquo;m doing it a lot.</p>

<p><a href="https://github.com/Skarlso/godevelopment">Go Development Environment</a></p>

<p>If I have a project I&rsquo;d like to contribute, like <a href="https://gohugo.io">GoHugo</a>, I have to setup a development environment, because most of the times, I&rsquo;m on a Mac. And on OSX things work differently. I like to work in a Linux environment since that&rsquo;s what most of the projects are built on.</p>

<p>So here you go. Just download the files, and say <strong>vagrant up</strong> which will do the magic.</p>

<p>This sets up <a href="https://github.com/fatih/vim-go">vim-go</a> with code completion given by YouCompleteMe and some go features like, fmt on save and build error highlighting.</p>

<p>Also sets up ctags which will give you tags and the ability to do GoTo Declaration.</p>

<p>Installs a bunch of utilities, and configures Go. There is an option to install docker as well. But it&rsquo;s ignored at the moment.</p>

<p>Just uncomment this line:</p>

<pre><code class="language-ruby">#config.vm.provision &quot;shell&quot;, path: &quot;install_docker.sh&quot;
</code></pre>

<p>Any questions or request, feel free to submit an Issue!</p>

<p>Thanks for reading!
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Welcome To My New Blog</title>
			<link>https://skarlso.github.io/2015/12/07/welcome-to-my-new-blog/</link>
			<pubDate>Mon, 07 Dec 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/12/07/welcome-to-my-new-blog/</guid>
			<description>Hello Folks Welcome to my new blog. I decided to move away for a number of reasons, but setting up a static page blog site is very cool if you don&amp;rsquo;t directly use a database. Since posts are just posts and I have a different way of hosting images, this really was just a matter of time.
And Hugo / Github pages provided the tools which made this move possible.</description>
			<content type="html"><![CDATA[

<h1 id="hello-folks">Hello Folks</h1>

<p>Welcome to my new blog. I decided to move away for a number of reasons, but setting up a static page blog site is very cool if you don&rsquo;t directly use a database. Since posts are just posts and I have a different way of hosting images, this really was just a matter of time.</p>

<p>And <a href="https://gohugo.io/">Hugo</a> / Github pages provided the tools which made this move possible.</p>

<p>Also, I love writing this post in Markdown. I always liked the formatting rules of it, so this is quiet the blast.</p>

<p>Code will look a little more readble now as well:</p>

<pre><code class="language-go">func main() {
    handlerChain := alice.New(Logging, PanicHandler)
    router := mux.NewRouter().StrictSlash(true)
    router.Handle(&quot;/create&quot;, handlerChain.ThenFunc(createIssue)).Methods(&quot;POST&quot;)
    router.Handle(&quot;/&quot;, handlerChain.ThenFunc(renderMainPage)).Methods(&quot;GET&quot;)
    router.PathPrefix(&quot;/css/&quot;).Handler(http.StripPrefix(&quot;/css/&quot;, http.FileServer(http.Dir(&quot;./css&quot;))))
    log.Printf(&quot;Starting server to listen on port: 8989...&quot;)
    http.ListenAndServe(&quot;:8989&quot;, router)
}
</code></pre>

<p>Much easier on the eyes. And linking is a breeze as well.</p>

<h2 id="things-to-notice">Things to notice</h2>

<p>There is now a content on the side which will list the sections in a post. And there is an estimated read timer in the post&rsquo;s title. It takes average reading speed and wordcount into account.</p>

<p>Anyhow, thanks for joining me in the new realm, and happy reading!
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Go JIRA API client</title>
			<link>https://skarlso.github.io/2015/11/20/go-jira-api-client/</link>
			<pubDate>Fri, 20 Nov 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/11/20/go-jira-api-client/</guid>
			<description>Hi folks.
So, I was playing around and created a client for JIRA written in Go. It was nice to do some JSON transformation. And sending POSTS was really trivial.
It&amp;#8217;s still in it&amp;#8217;s infancy and I have a couple of more features I want to implement, but, here is the code&amp;#8230;
  package main &amp;nbsp; import ( &#34;bytes&#34; &#34;encoding/json&#34; &#34;flag&#34; &#34;fmt&#34; &#34;io/ioutil&#34; &#34;log&#34; &#34;net/http&#34; &#34;os&#34; &amp;nbsp; &#34;github.com/BurntSushi/toml&#34; ) &amp;nbsp; var configFile = &#34;</description>
			<content type="html"><![CDATA[<p>Hi folks.</p>

<p>So, I was playing around and created a client for JIRA written in Go. It was nice to do some JSON transformation. And sending POSTS was really trivial.</p>

<p>It&#8217;s still in it&#8217;s infancy and I have a couple of more features I want to implement, but, here is the code&#8230;</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="go" style="font-family:monospace;"><span style="color: #b1b100; font-weight: bold;">package</span> main
&nbsp;
<span style="color: #b1b100; font-weight: bold;">import</span> <span style="color: #339933;">(</span>
    <span style="color: #cc66cc;">"bytes"</span>
    <span style="color: #cc66cc;">"encoding/json"</span>
    <span style="color: #cc66cc;">"flag"</span>
    <span style="color: #cc66cc;">"fmt"</span>
    <span style="color: #cc66cc;">"io/ioutil"</span>
    <span style="color: #cc66cc;">"log"</span>
    <span style="color: #cc66cc;">"net/http"</span>
    <span style="color: #cc66cc;">"os"</span>
&nbsp;
    <span style="color: #cc66cc;">"github.com/BurntSushi/toml"</span>
<span style="color: #339933;">)</span>
&nbsp;
<span style="color: #b1b100; font-weight: bold;">var</span> configFile <span style="color: #339933;">=</span> <span style="color: #cc66cc;">"~/.jira_config.toml"</span>
<span style="color: #b1b100; font-weight: bold;">var</span> parameter <span style="color: #993333;">string</span>
&nbsp;
<span style="color: #b1b100; font-weight: bold;">var</span> flags <span style="color: #993333;">struct</span> <span style="color: #339933;">{</span>
    Comment     <span style="color: #993333;">string</span>
    Description <span style="color: #993333;">string</span>
    IssueKey    <span style="color: #993333;">string</span>
    Priority    <span style="color: #993333;">string</span>
    Resolution  <span style="color: #993333;">string</span>
    Title       <span style="color: #993333;">string</span>
    Project     <span style="color: #993333;">string</span>
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #666666; font-style: italic;">//Issue is a representation of a Jira Issue</span>
<span style="color: #b1b100; font-weight: bold;">type</span> Issue <span style="color: #993333;">struct</span> <span style="color: #339933;">{</span>
    Fields <span style="color: #993333;">struct</span> <span style="color: #339933;">{</span>
        Project <span style="color: #993333;">struct</span> <span style="color: #339933;">{</span>
            Key <span style="color: #993333;">string</span> <span style="color: #0000ff;">`json:"key"`</span>
        <span style="color: #339933;">}</span> <span style="color: #0000ff;">`json:"project"`</span>
        Summary     <span style="color: #993333;">string</span> <span style="color: #0000ff;">`json:"summary"`</span>
        Description <span style="color: #993333;">string</span> <span style="color: #0000ff;">`json:"description"`</span>
        Issuetype   <span style="color: #993333;">struct</span> <span style="color: #339933;">{</span>
            Name <span style="color: #993333;">string</span> <span style="color: #0000ff;">`json:"name"`</span>
        <span style="color: #339933;">}</span> <span style="color: #0000ff;">`json:"issuetype"`</span>
        Priority <span style="color: #993333;">struct</span> <span style="color: #339933;">{</span>
            ID <span style="color: #993333;">string</span> <span style="color: #0000ff;">`json:"id"`</span>
        <span style="color: #339933;">}</span> <span style="color: #0000ff;">`json:"priority"`</span>
    <span style="color: #339933;">}</span> <span style="color: #0000ff;">`json:"fields"`</span>
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #666666; font-style: italic;">//Transition defines a transition json object. Used for starting, stoppinp</span>
<span style="color: #666666; font-style: italic;">//generally for state stranfer</span>
<span style="color: #b1b100; font-weight: bold;">type</span> Transition <span style="color: #993333;">struct</span> <span style="color: #339933;">{</span>
    Fields <span style="color: #993333;">struct</span> <span style="color: #339933;">{</span>
        Resolution <span style="color: #993333;">struct</span> <span style="color: #339933;">{</span>
            Name <span style="color: #993333;">string</span> <span style="color: #0000ff;">`json:"name"`</span>
        <span style="color: #339933;">}</span> <span style="color: #0000ff;">`json:"resolution"`</span>
    <span style="color: #339933;">}</span> <span style="color: #0000ff;">`json:"fields"`</span>
    Transition <span style="color: #993333;">struct</span> <span style="color: #339933;">{</span>
        ID <span style="color: #993333;">string</span> <span style="color: #0000ff;">`json:"id"`</span>
    <span style="color: #339933;">}</span> <span style="color: #0000ff;">`json:"transition"`</span>
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #666666; font-style: italic;">//Credentials a representation of a JIRA config which helds API permissions</span>
<span style="color: #b1b100; font-weight: bold;">type</span> Credentials <span style="color: #993333;">struct</span> <span style="color: #339933;">{</span>
    Username <span style="color: #993333;">string</span>
    Password <span style="color: #993333;">string</span>
    URL      <span style="color: #993333;">string</span>
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #993333;">func</span> init<span style="color: #339933;">()</span> <span style="color: #339933;">{</span>
    flag<span style="color: #339933;">.</span>StringVar<span style="color: #339933;">(</span>&flags<span style="color: #339933;">.</span>Comment<span style="color: #339933;">,</span> <span style="color: #cc66cc;">"m"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">"Default Comment"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">"A Comment when changing the status of an Issue."</span><span style="color: #339933;">)</span>
    flag<span style="color: #339933;">.</span><span style="">StringVar</span><span style="color: #339933;">(</span><span style="color: #339933;">&</span>flags<span style="color: #339933;">.</span><span style="">Description</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">"d"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">"Default Description"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">"Provide a description for a newly created Issue."</span><span style="color: #339933;">)</span>
    flag<span style="color: #339933;">.</span><span style="">StringVar</span><span style="color: #339933;">(</span><span style="color: #339933;">&</span>flags<span style="color: #339933;">.</span><span style="">Priority</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">"p"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">"2"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">"The priority of an Issue which will be set."</span><span style="color: #339933;">)</span>
    flag<span style="color: #339933;">.</span><span style="">StringVar</span><span style="color: #339933;">(</span><span style="color: #339933;">&</span>flags<span style="color: #339933;">.</span><span style="">IssueKey</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">"k"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">""</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">"Issue key of an issue."</span><span style="color: #339933;">)</span>
    flag<span style="color: #339933;">.</span><span style="">StringVar</span><span style="color: #339933;">(</span><span style="color: #339933;">&</span>flags<span style="color: #339933;">.</span><span style="">Resolution</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">"r"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">"Done"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">"Resolution when an issue is closed. Ex.: Done, Fixed, Won't fix."</span><span style="color: #339933;">)</span>
    flag<span style="color: #339933;">.</span><span style="">StringVar</span><span style="color: #339933;">(</span><span style="color: #339933;">&</span>flags<span style="color: #339933;">.</span><span style="">Title</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">"t"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">"Default Title"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">"Title of an Issue."</span><span style="color: #339933;">)</span>
    flag<span style="color: #339933;">.</span><span style="">StringVar</span><span style="color: #339933;">(</span><span style="color: #339933;">&</span>flags<span style="color: #339933;">.</span><span style="">Project</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">"o"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">"IT"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">"Define a Project to create a ticket in."</span><span style="color: #339933;">)</span>
    flag<span style="color: #339933;">.</span>Parse<span style="color: #339933;">()</span>
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #993333;">func</span> <span style="color: #339933;">(</span>cred <span style="color: #339933;">*</span>Credentials<span style="color: #339933;">)</span> initConfig<span style="color: #339933;">()</span> <span style="color: #339933;">{</span>
    <span style="color: #b1b100; font-weight: bold;">if</span> _<span style="color: #339933;">,</span> err <span style="color: #339933;">:=</span> os<span style="color: #339933;">.</span>Stat<span style="color: #339933;">(</span>configFile<span style="color: #339933;">);</span> err <span style="color: #339933;">!=</span> <span style="color: #000000; font-weight: bold;">nil</span> <span style="color: #339933;">{</span>
        log<span style="color: #339933;">.</span>Fatalf<span style="color: #339933;">(</span><span style="color: #cc66cc;">"Error using config file: %v"</span><span style="color: #339933;">,</span> err<span style="color: #339933;">)</span>
    <span style="color: #339933;">}</span>
&nbsp;
    <span style="color: #b1b100; font-weight: bold;">if</span> _<span style="color: #339933;">,</span> err <span style="color: #339933;">:=</span> toml<span style="color: #339933;">.</span>DecodeFile<span style="color: #339933;">(</span>configFile<span style="color: #339933;">,</span> cred<span style="color: #339933;">);</span> err <span style="color: #339933;">!=</span> <span style="color: #000000; font-weight: bold;">nil</span> <span style="color: #339933;">{</span>
        log<span style="color: #339933;">.</span>Fatal<span style="color: #339933;">(</span><span style="color: #cc66cc;">"Error during decoding toml config: "</span><span style="color: #339933;">,</span> err<span style="color: #339933;">)</span>
    <span style="color: #339933;">}</span>
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #993333;">func</span> main<span style="color: #339933;">()</span> <span style="color: #339933;">{</span>
    <span style="color: #b1b100; font-weight: bold;">if</span> <span style="color: #000066;">len</span><span style="color: #339933;">(</span>flag<span style="color: #339933;">.</span>Args<span style="color: #339933;">())</span> &lt; <span style="color: #cc66cc;">1</span> <span style="color: #339933;">{</span>
        log<span style="color: #339933;">.</span>Fatal<span style="color: #339933;">(</span><span style="color: #cc66cc;">"Please provide an action to take. Usage information:"</span><span style="color: #339933;">)</span>
    <span style="color: #339933;">}</span>
    parameter <span style="color: #339933;">=</span> flag<span style="color: #339933;">.</span>Arg<span style="color: #339933;">(</span><span style="color: #cc66cc;"></span><span style="color: #339933;">)</span>
    <span style="color: #b1b100; font-weight: bold;">switch</span> parameter <span style="color: #339933;">{</span>
    <span style="color: #b1b100; font-weight: bold;">case</span> <span style="color: #cc66cc;">"close"</span><span style="color: #339933;">:</span>
        closeIssue<span style="color: #339933;">(</span>flags<span style="color: #339933;">.</span>IssueKey<span style="color: #339933;">)</span>
    <span style="color: #b1b100; font-weight: bold;">case</span> <span style="color: #cc66cc;">"start"</span><span style="color: #339933;">:</span>
        startIssue<span style="color: #339933;">(</span>flags<span style="color: #339933;">.</span>IssueKey<span style="color: #339933;">)</span>
    <span style="color: #b1b100; font-weight: bold;">case</span> <span style="color: #cc66cc;">"create"</span><span style="color: #339933;">:</span>
        createIssue<span style="color: #339933;">()</span>
    <span style="color: #339933;">}</span>
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #993333;">func</span> closeIssue<span style="color: #339933;">(</span>issueKey <span style="color: #993333;">string</span><span style="color: #339933;">)</span> <span style="color: #339933;">{</span>
    <span style="color: #b1b100; font-weight: bold;">if</span> issueKey <span style="color: #339933;">==</span> <span style="color: #cc66cc;">""</span> <span style="color: #339933;">{</span>
        log<span style="color: #339933;">.</span><span style="">Fatal</span><span style="color: #339933;">(</span><span style="color: #cc66cc;">"Please provide an issueID with -k"</span><span style="color: #339933;">)</span>
    <span style="color: #339933;">}</span>
    fmt<span style="color: #339933;">.</span><span style="">Println</span><span style="color: #339933;">(</span><span style="color: #cc66cc;">"Closing issue number: "</span><span style="color: #339933;">,</span> issueKey<span style="color: #339933;">)</span>
&nbsp;
    <span style="color: #b1b100; font-weight: bold;">var</span> trans Transition
&nbsp;
    <span style="color: #666666; font-style: italic;">//TODO: Add the ability to define a comment for the close reason</span>
    trans<span style="color: #339933;">.</span><span style="">Fields</span><span style="color: #339933;">.</span><span style="">Resolution</span><span style="color: #339933;">.</span><span style="">Name</span> <span style="color: #339933;">=</span> flags<span style="color: #339933;">.</span><span style="">Resolution</span>
    trans<span style="color: #339933;">.</span><span style="">Transition</span><span style="color: #339933;">.</span><span style="">ID</span> <span style="color: #339933;">=</span> <span style="color: #cc66cc;">"2"</span>
    marhsalledTrans<span style="color: #339933;">,</span> err <span style="color: #339933;">:=</span> json<span style="color: #339933;">.</span>Marshal<span style="color: #339933;">(</span>trans<span style="color: #339933;">)</span>
    <span style="color: #b1b100; font-weight: bold;">if</span> err <span style="color: #339933;">!=</span> <span style="color: #000000; font-weight: bold;">nil</span> <span style="color: #339933;">{</span>
        log<span style="color: #339933;">.</span>Fatal<span style="color: #339933;">(</span><span style="color: #cc66cc;">"Error occured when marshaling transition: "</span><span style="color: #339933;">,</span> err<span style="color: #339933;">)</span>
    <span style="color: #339933;">}</span>
    fmt<span style="color: #339933;">.</span><span style="">Println</span><span style="color: #339933;">(</span><span style="color: #cc66cc;">"Marshalled:"</span><span style="color: #339933;">,</span> trans<span style="color: #339933;">)</span>
    sendRequest<span style="color: #339933;">(</span>marhsalledTrans<span style="color: #339933;">,</span> <span style="color: #cc66cc;">"POST"</span><span style="color: #339933;">,</span> issueKey<span style="color: #339933;">+</span><span style="color: #cc66cc;">"/transitions?expand=transitions.fields"</span><span style="color: #339933;">)</span>
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #993333;">func</span> startIssue<span style="color: #339933;">(</span>issueID <span style="color: #993333;">string</span><span style="color: #339933;">)</span> <span style="color: #339933;">{</span>
    <span style="color: #b1b100; font-weight: bold;">if</span> issueID <span style="color: #339933;">==</span> <span style="color: #cc66cc;">""</span> <span style="color: #339933;">{</span>
        log<span style="color: #339933;">.</span><span style="">Fatal</span><span style="color: #339933;">(</span><span style="color: #cc66cc;">"Please provide an issueID with -i"</span><span style="color: #339933;">)</span>
    <span style="color: #339933;">}</span>
&nbsp;
    fmt<span style="color: #339933;">.</span><span style="">Println</span><span style="color: #339933;">(</span><span style="color: #cc66cc;">"Starting issue number:"</span><span style="color: #339933;">,</span> issueID<span style="color: #339933;">)</span>
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #993333;">func</span> createIssue<span style="color: #339933;">()</span> <span style="color: #339933;">{</span>
    fmt<span style="color: #339933;">.</span>Println<span style="color: #339933;">(</span><span style="color: #cc66cc;">"Creating new issue."</span><span style="color: #339933;">)</span>
    <span style="color: #b1b100; font-weight: bold;">var</span> issue Issue
    issue<span style="color: #339933;">.</span>Fields<span style="color: #339933;">.</span>Description <span style="color: #339933;">=</span> flags<span style="color: #339933;">.</span>Description
    issue<span style="color: #339933;">.</span>Fields<span style="color: #339933;">.</span>Priority<span style="color: #339933;">.</span>ID <span style="color: #339933;">=</span> flags<span style="color: #339933;">.</span>Priority
    issue<span style="color: #339933;">.</span>Fields<span style="color: #339933;">.</span>Summary <span style="color: #339933;">=</span> flags<span style="color: #339933;">.</span>Title
    issue<span style="color: #339933;">.</span>Fields<span style="color: #339933;">.</span>Project<span style="color: #339933;">.</span>Key <span style="color: #339933;">=</span> flags<span style="color: #339933;">.</span>Project
    issue<span style="color: #339933;">.</span>Fields<span style="color: #339933;">.</span>Issuetype<span style="color: #339933;">.</span>Name <span style="color: #339933;">=</span> <span style="color: #cc66cc;">"Task"</span>
    marshalledIssue<span style="color: #339933;">,</span> err <span style="color: #339933;">:=</span> json<span style="color: #339933;">.</span>Marshal<span style="color: #339933;">(</span>issue<span style="color: #339933;">)</span>
    <span style="color: #b1b100; font-weight: bold;">if</span> err <span style="color: #339933;">!=</span> <span style="color: #000000; font-weight: bold;">nil</span> <span style="color: #339933;">{</span>
        log<span style="color: #339933;">.</span>Fatal<span style="color: #339933;">(</span><span style="color: #cc66cc;">"Error occured when Marshaling Issue:"</span><span style="color: #339933;">,</span> err<span style="color: #339933;">)</span>
    <span style="color: #339933;">}</span>
    sendRequest<span style="color: #339933;">(</span>marshalledIssue<span style="color: #339933;">,</span> <span style="color: #cc66cc;">"POST"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">""</span><span style="color: #339933;">)</span>
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #993333;">func</span> sendRequest<span style="color: #339933;">(</span>jsonStr <span style="color: #339933;">[]</span><span style="color: #993333;">byte</span><span style="color: #339933;">,</span> method <span style="color: #993333;">string</span><span style="color: #339933;">,</span> url <span style="color: #993333;">string</span><span style="color: #339933;">)</span> <span style="color: #339933;">{</span>
    cred <span style="color: #339933;">:=</span> &Credentials<span style="color: #339933;">{}</span>
    cred<span style="color: #339933;">.</span>initConfig<span style="color: #339933;">()</span>
    fmt<span style="color: #339933;">.</span>Println<span style="color: #339933;">(</span><span style="color: #cc66cc;">"Json:"</span><span style="color: #339933;">,</span> <span style="color: #993333;">string</span><span style="color: #339933;">(</span>jsonStr<span style="color: #339933;">))</span>
    req<span style="color: #339933;">,</span> err <span style="color: #339933;">:=</span> http<span style="color: #339933;">.</span>NewRequest<span style="color: #339933;">(</span>method<span style="color: #339933;">,</span> cred<span style="color: #339933;">.</span>URL<span style="color: #339933;">+</span>url<span style="color: #339933;">,</span> bytes<span style="color: #339933;">.</span>NewBuffer<span style="color: #339933;">(</span>jsonStr<span style="color: #339933;">))</span>
    req<span style="color: #339933;">.</span>Header<span style="color: #339933;">.</span>Set<span style="color: #339933;">(</span><span style="color: #cc66cc;">"Content-Type"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">"application/json"</span><span style="color: #339933;">)</span>
    req<span style="color: #339933;">.</span>SetBasicAuth<span style="color: #339933;">(</span>cred<span style="color: #339933;">.</span>Username<span style="color: #339933;">,</span> cred<span style="color: #339933;">.</span>Password<span style="color: #339933;">)</span>
&nbsp;
    client <span style="color: #339933;">:=</span> &http<span style="color: #339933;">.</span>Client<span style="color: #339933;">{}</span>
    resp<span style="color: #339933;">,</span> err <span style="color: #339933;">:=</span> client<span style="color: #339933;">.</span>Do<span style="color: #339933;">(</span>req<span style="color: #339933;">)</span>
    <span style="color: #b1b100; font-weight: bold;">if</span> err <span style="color: #339933;">!=</span> <span style="color: #000000; font-weight: bold;">nil</span> <span style="color: #339933;">{</span>
        <span style="color: #000066;">panic</span><span style="color: #339933;">(</span>err<span style="color: #339933;">)</span>
    <span style="color: #339933;">}</span>
    <span style="color: #b1b100; font-weight: bold;">defer</span> resp<span style="color: #339933;">.</span>Body<span style="color: #339933;">.</span>Close<span style="color: #339933;">()</span>
&nbsp;
    fmt<span style="color: #339933;">.</span>Println<span style="color: #339933;">(</span><span style="color: #cc66cc;">"response Status:"</span><span style="color: #339933;">,</span> resp<span style="color: #339933;">.</span><span style="">Status</span><span style="color: #339933;">)</span>
    fmt<span style="color: #339933;">.</span><span style="">Println</span><span style="color: #339933;">(</span><span style="color: #cc66cc;">"response Headers:"</span><span style="color: #339933;">,</span> resp<span style="color: #339933;">.</span><span style="">Header</span><span style="color: #339933;">)</span>
    body<span style="color: #339933;">,</span> _ <span style="color: #339933;">:=</span> ioutil<span style="color: #339933;">.</span><span style="">ReadAll</span><span style="color: #339933;">(</span>resp<span style="color: #339933;">.</span><span style="">Body</span><span style="color: #339933;">)</span>
    fmt<span style="color: #339933;">.</span><span style="">Println</span><span style="color: #339933;">(</span><span style="color: #cc66cc;">"response Body:"</span><span style="color: #339933;">,</span> <span style="color: #993333;">string</span><span style="color: #339933;">(</span>body<span style="color: #339933;">))</span>
&nbsp;
<span style="color: #339933;">}</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>It can also be found under my github page: <a href="https://github.com/Skarlso/goprojects/tree/master/gojira" target="_blank">GoJira Github</a>.</p>

<p>Feel free to open up issues if you would like to use it and need some features which you would find interesting. Currently the username and password for the API are stored in a local config file in your home folder. Later on, I&#8217;ll add the ability to have a token rather than a username:password combination.</p>

<p>Thanks for reading!</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>The One Hundred Day GitHub Challenge</title>
			<link>https://skarlso.github.io/2015/11/15/the-one-hundred-day-github-challenge/</link>
			<pubDate>Sun, 15 Nov 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/11/15/the-one-hundred-day-github-challenge/</guid>
			<description>Hello folks.
Today, I present to you the One Hundred Day Github Challenge.
The rules are simple:
 Minimum of One commit every day for a Hundred days. Commit has to be meaningful but can be as little as a fix in a Readme.md. Doesn&amp;#8217;t matter if you are on vacation, there are no exceptions. There. Are. No. Exceptions. If you fail a day, you have to start over. No cheating.</description>
			<content type="html"><![CDATA[<p>Hello folks.</p>

<p>Today, I present to you the One Hundred Day Github Challenge.</p>

<p>The rules are simple:</p>

<ol>
<li>Minimum of <strong>One</strong> commit every day for a <strong>Hundred days</strong>.</li>
<li>Commit has to be <strong>meaningful</strong> but can be as little as a fix in a Readme.md.</li>
<li>Doesn&#8217;t matter if you are on vacation, there are no exceptions.</li>
<li><strong>There. Are. No. Exceptions.</strong></li>
<li>If you <strong>fail</strong> a day, you have to <strong>start over</strong>.</li>
<li><strong>No cheating.</strong> You only cheat yourself, so this is really up to you.</li>
</ol>

<p>Let me be more clear here, because it seems I wasn&#8217;t clear enough. What you make out of this challenge, it&#8217;s up to you. If you just update a readme.md for hundred days, that&#8217;s fine. Just do it every day. It&#8217;s a commitment. At least you&#8217;ll have a nice Readme.</p>

<p>Also, let me be clear on another thing. THERE ARE NO EXCEPTIONS. Even on holidays. No. Exceptions.</p>

<p>So there you have it. It&#8217;s easy, but then again, it&#8217;s not.</p>

<p>Mine starts today! 100&#8230;</p>

<p>Thanks for reading.</p>

<p>And happy coding.</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Go Progress Quest</title>
			<link>https://skarlso.github.io/2015/11/09/go-progress-quest/</link>
			<pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/11/09/go-progress-quest/</guid>
			<description>Hi Folks.
I started to build a Progress Quest type of web app in Go.
If you&amp;#8217;d like to join, or just tag along, please drop by here =&amp;gt; Go Progress Quest and feel free to submit an issue if you have an idea, or would like to contribute!
I will try and document the Progress&amp;#8230;
Thank you for reading!
Gergely.</description>
			<content type="html"><![CDATA[<p>Hi Folks.</p>

<p>I started to build a Progress Quest type of web app in Go.</p>

<p>If you&#8217;d like to join, or just tag along, please drop by here =&gt; <a href="https://github.com/Skarlso/goprogressquest" target="_blank">Go Progress Quest</a> and feel free to submit an issue if you have an idea, or would like to contribute!</p>

<p>I will try and document the Progress&#8230;</p>

<p>Thank you for reading!</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Kill a Program on Connecting to a specific WiFi – OSX</title>
			<link>https://skarlso.github.io/2015/10/26/kill-a-program-on-connecting-to-a-specific-wifi-osx/</link>
			<pubDate>Mon, 26 Oct 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/10/26/kill-a-program-on-connecting-to-a-specific-wifi-osx/</guid>
			<description>Hi folks.
If you have the tendency, like me, to forget that you are on the corporate VPN, or leave a certain software open when you bring your laptop to work, this might be helpful to you too.
It&amp;#8217;s a small script which kills a program when you change your Wifi network.
Script:
  #!/bin/bash &amp;nbsp; function log &amp;#123; directory=&#34;/Users/&amp;lt;username&amp;gt;/wifi_detect&#34; log_dir_exists=true if &amp;#91; ! -d $directory &amp;#93;; then echo &#34;</description>
			<content type="html"><![CDATA[<p>Hi folks.</p>

<p>If you have the tendency, like me, to forget that you are on the corporate VPN, or leave a certain software open when you bring your laptop to work, this might be helpful to you too.</p>

<p>It&#8217;s a small script which kills a program when you change your Wifi network.</p>

<p>Script:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;"><span style="color: #666666; font-style: italic;">#!/bin/bash</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">function</span> log <span style="color: #7a0874; font-weight: bold;">&#123;</span>
    <span style="color: #007800;">directory</span>=<span style="color: #ff0000;">"/Users/&lt;username&gt;/wifi_detect"</span>
    <span style="color: #007800;">log_dir_exists</span>=<span style="color: #c20cb9; font-weight: bold;">true</span>
    <span style="color: #000000; font-weight: bold;">if</span> <span style="color: #7a0874; font-weight: bold;">&#91;</span> <span style="color: #000000; font-weight: bold;">!</span> <span style="color: #660033;">-d</span> <span style="color: #007800;">$directory</span> <span style="color: #7a0874; font-weight: bold;">&#93;</span>; <span style="color: #000000; font-weight: bold;">then</span>
        <span style="color: #7a0874; font-weight: bold;">echo</span> <span style="color: #ff0000;">"Attempting to create =&gt; <span style="color: #007800;">$directory</span>"</span>
        <span style="color: #c20cb9; font-weight: bold;">mkdir</span> <span style="color: #660033;">-p</span> <span style="color: #007800;">$directory</span>
        <span style="color: #000000; font-weight: bold;">if</span> <span style="color: #7a0874; font-weight: bold;">&#91;</span> <span style="color: #000000; font-weight: bold;">!</span> <span style="color: #660033;">-d</span> <span style="color: #007800;">$directory</span> <span style="color: #7a0874; font-weight: bold;">&#93;</span>; <span style="color: #000000; font-weight: bold;">then</span>
            <span style="color: #7a0874; font-weight: bold;">echo</span> <span style="color: #ff0000;">"Could not create directory. Continue to log to echo."</span>
            <span style="color: #007800;">log_dir_exists</span>=<span style="color: #c20cb9; font-weight: bold;">false</span>
        <span style="color: #000000; font-weight: bold;">fi</span>
    <span style="color: #000000; font-weight: bold;">fi</span>
    <span style="color: #000000; font-weight: bold;">if</span> <span style="color: #007800;">$log_dir_exists</span> ; <span style="color: #000000; font-weight: bold;">then</span>
        <span style="color: #7a0874; font-weight: bold;">echo</span> <span style="color: #ff0000;">"<span style="color: #007800;">$(date)</span>:$1"</span> <span style="color: #000000; font-weight: bold;">&gt;&gt;</span> <span style="color: #ff0000;">"<span style="color: #007800;">$directory</span>/log.txt"</span>
    <span style="color: #000000; font-weight: bold;">else</span>
        <span style="color: #7a0874; font-weight: bold;">echo</span> <span style="color: #ff0000;">"<span style="color: #007800;">$(date)</span>:$1"</span>
    <span style="color: #000000; font-weight: bold;">fi</span>
<span style="color: #7a0874; font-weight: bold;">&#125;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">function</span> check_program <span style="color: #7a0874; font-weight: bold;">&#123;</span>
    <span style="color: #007800;">to_kill</span>=<span style="color: #ff0000;">"[<span style="color: #007800;">${1::1}</span>]<span style="color: #007800;">${1:1}</span>"</span>
    log <span style="color: #ff0000;">"Checking if <span style="color: #007800;">$to_kill</span> really quit."</span>
    <span style="color: #007800;">ps</span>=$<span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #c20cb9; font-weight: bold;">ps</span> aux <span style="color: #000000; font-weight: bold;">|</span><span style="color: #c20cb9; font-weight: bold;">grep</span> <span style="color: #ff0000;">"<span style="color: #007800;">$to_kill</span>"</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>
    log <span style="color: #ff0000;">"ps =&gt; <span style="color: #007800;">$ps</span>"</span>
    <span style="color: #000000; font-weight: bold;">if</span> <span style="color: #7a0874; font-weight: bold;">&#91;</span> <span style="color: #660033;">-z</span> <span style="color: #ff0000;">"<span style="color: #007800;">$ps</span>"</span> <span style="color: #7a0874; font-weight: bold;">&#93;</span>; <span style="color: #000000; font-weight: bold;">then</span>
    <span style="color: #666666; font-style: italic;"># 0 - True</span>
        <span style="color: #7a0874; font-weight: bold;">return</span> <span style="color: #000000;"></span>
    <span style="color: #000000; font-weight: bold;">else</span>
    <span style="color: #666666; font-style: italic;"># 1 - False</span>
        <span style="color: #7a0874; font-weight: bold;">return</span> <span style="color: #000000;">1</span>
    <span style="color: #000000; font-weight: bold;">fi</span>
<span style="color: #7a0874; font-weight: bold;">&#125;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">function</span> kill_program <span style="color: #7a0874; font-weight: bold;">&#123;</span>
    log <span style="color: #ff0000;">"Killing program"</span>
    <span style="color: #000000; font-weight: bold;">`</span>pkill <span style="color: #660033;">-f</span> <span style="color: #ff0000;">"$1"</span><span style="color: #000000; font-weight: bold;">`</span>
    <span style="color: #c20cb9; font-weight: bold;">sleep</span> <span style="color: #000000;">1</span>
    <span style="color: #000000; font-weight: bold;">if</span> <span style="color: #000000; font-weight: bold;">!</span> check_program <span style="color: #007800;">$1</span> ; <span style="color: #000000; font-weight: bold;">then</span>
    log <span style="color: #ff0000;">"$1 Did not quit!"</span>
    <span style="color: #000000; font-weight: bold;">else</span>
    log <span style="color: #ff0000;">"$1 quit successfully"</span>
    <span style="color: #000000; font-weight: bold;">fi</span>
<span style="color: #7a0874; font-weight: bold;">&#125;</span>
&nbsp;
<span style="color: #007800;">wifi_name</span>=$<span style="color: #7a0874; font-weight: bold;">&#40;</span>networksetup <span style="color: #660033;">-getairportnetwork</span> en0 <span style="color: #000000; font-weight: bold;">|</span><span style="color: #c20cb9; font-weight: bold;">awk</span> <span style="color: #660033;">-F</span><span style="color: #ff0000;">": "</span> <span style="color: #ff0000;">'{print $2}'</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>
log <span style="color: #ff0000;">"Wifi name: <span style="color: #007800;">$wifi_name</span>"</span>
<span style="color: #000000; font-weight: bold;">if</span> <span style="color: #7a0874; font-weight: bold;">&#91;</span> <span style="color: #ff0000;">"<span style="color: #007800;">$wifi_name</span>"</span> = <span style="color: #ff0000;">"&lt;wifi_name&gt;"</span> <span style="color: #7a0874; font-weight: bold;">&#93;</span>; <span style="color: #000000; font-weight: bold;">then</span>
    log <span style="color: #ff0000;">"On corporate network... Killing Program"</span>
    kill_program <span style="color: #ff0000;">"&lt;programname&gt;"</span>
<span style="color: #000000; font-weight: bold;">elif</span> <span style="color: #7a0874; font-weight: bold;">&#91;</span> <span style="color: #ff0000;">"<span style="color: #007800;">$wifi_name</span>"</span> = <span style="color: #ff0000;">"&lt;home_wifi_name&gt;"</span> <span style="color: #7a0874; font-weight: bold;">&#93;</span>; <span style="color: #000000; font-weight: bold;">then</span>
    <span style="color: #666666; font-style: italic;"># Kill &lt;program&gt; if enabled and if on &lt;home_wifi&gt; and if Tunnelblick is running.</span>
    log <span style="color: #ff0000;">"Not on corporate network... Killing &lt;program&gt; if Tunnelblick is active."</span>
    <span style="color: #000000; font-weight: bold;">if</span> <span style="color: #000000; font-weight: bold;">!</span> check_program <span style="color: #ff0000;">"Tunnelblick"</span> ; <span style="color: #000000; font-weight: bold;">then</span>
    log <span style="color: #ff0000;">"Tunnelblick is active. Killing &lt;program&gt;"</span>
    kill_program <span style="color: #ff0000;">"&lt;program&gt;"</span>
    <span style="color: #000000; font-weight: bold;">else</span>
    log <span style="color: #ff0000;">"All good... Happy coding."</span>
    <span style="color: #000000; font-weight: bold;">fi</span>
<span style="color: #000000; font-weight: bold;">else</span>
    log <span style="color: #ff0000;">"No known Network..."</span>
<span style="color: #000000; font-weight: bold;">fi</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Now, the trick is, on OSX to only trigger this when your network changes. For this, you can have a &#8216;launchd&#8217; daemon, which is configured to watch three files which relate to a network being changed.</p>

<p>The script sits under your ~/Library/LaunchAgents folder. Create something like, com.username.checknetwork.plist.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="xml" style="font-family:monospace;"><span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;?xml</span> <span style="color: #000066;">version</span>=<span style="color: #ff0000;">"1.0"</span> <span style="color: #000066;">encoding</span>=<span style="color: #ff0000;">"UTF-8"</span><span style="color: #000000; font-weight: bold;">?&gt;</span></span>
<span style="color: #00bbdd;">&lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" \</span>
<span style="color: #00bbdd;"> "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span>
<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;plist</span> <span style="color: #000066;">version</span>=<span style="color: #ff0000;">"1.0"</span><span style="color: #000000; font-weight: bold;">&gt;</span></span>
<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;dict<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;key<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>Label<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/key<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;string<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>ifup.ddns<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/string<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
&nbsp;
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;key<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>LowPriorityIO<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/key<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;true</span><span style="color: #000000; font-weight: bold;">/&gt;</span></span>
&nbsp;
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;key<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>ProgramArguments<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/key<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;array<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;string<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>/Users/username/scripts/ddns-update.sh<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/string<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/array<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
&nbsp;
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;key<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>WatchPaths<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/key<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;array<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;string<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>/etc/resolv.conf<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/string<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;string<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>/Library/Preferences/SystemConfiguration/NetworkInterfaces.plist<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/string<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;string<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>/Library/Preferences/SystemConfiguration/com.apple.airport.preferences.plist<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/string<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/array<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
&nbsp;
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;key<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>RunAtLoad<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/key<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;true</span><span style="color: #000000; font-weight: bold;">/&gt;</span></span>
<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/dict<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/plist<span style="color: #000000; font-weight: bold;">&gt;</span></span></span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Now, when you change your network, to whatever your corporate network is, you&#8217;ll kill Sublime.</p>

<p>Hope this helps somebody.</p>

<p>Cheers,</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Circular buffer in Go</title>
			<link>https://skarlso.github.io/2015/10/15/circular-buffer-in-go/</link>
			<pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/10/15/circular-buffer-in-go/</guid>
			<description>I&amp;#8217;m proud of this one too. No peaking. I like how go let&amp;#8217;s you do this kind of stuff in a very nice way.
  package circular &amp;nbsp; import &#34;fmt&#34; &amp;nbsp; //TestVersion testVersion const TestVersion = 1 &amp;nbsp; //Buffer buffer type type Buffer struct { buffer []byte full int size int s, e int } &amp;nbsp; //NewBuffer creates a new Buffer func NewBuffer(size int) *Buffer { return &amp;Buffer{buffer: make([]byte, size), s: , e: , size: size, full: } } &amp;nbsp; //ReadByte reads a byte from b Buffer func (b *Buffer) ReadByte() (byte, error) { if b.</description>
			<content type="html"><![CDATA[<p>I&#8217;m proud of this one too. No peaking. I like how go let&#8217;s you do this kind of stuff in a very nice way.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="go" style="font-family:monospace;"><span style="color: #b1b100; font-weight: bold;">package</span> circular
&nbsp;
<span style="color: #b1b100; font-weight: bold;">import</span> <span style="color: #cc66cc;">"fmt"</span>
&nbsp;
<span style="color: #666666; font-style: italic;">//TestVersion testVersion</span>
<span style="color: #b1b100; font-weight: bold;">const</span> TestVersion <span style="color: #339933;">=</span> <span style="color: #cc66cc;">1</span>
&nbsp;
<span style="color: #666666; font-style: italic;">//Buffer buffer type</span>
<span style="color: #b1b100; font-weight: bold;">type</span> Buffer <span style="color: #993333;">struct</span> <span style="color: #339933;">{</span>
    buffer <span style="color: #339933;">[]</span><span style="color: #993333;">byte</span>
    full   <span style="color: #993333;">int</span>
    size   <span style="color: #993333;">int</span>
    s<span style="color: #339933;">,</span> e   <span style="color: #993333;">int</span>
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #666666; font-style: italic;">//NewBuffer creates a new Buffer</span>
<span style="color: #993333;">func</span> NewBuffer<span style="color: #339933;">(</span>size <span style="color: #993333;">int</span><span style="color: #339933;">)</span> <span style="color: #339933;">*</span>Buffer <span style="color: #339933;">{</span>
    <span style="color: #b1b100; font-weight: bold;">return</span> &Buffer<span style="color: #339933;">{</span>buffer<span style="color: #339933;">:</span> <span style="color: #000066;">make</span><span style="color: #339933;">([]</span><span style="color: #993333;">byte</span><span style="color: #339933;">,</span> size<span style="color: #339933;">),</span> s<span style="color: #339933;">:</span> <span style="color: #cc66cc;"></span><span style="color: #339933;">,</span> e<span style="color: #339933;">:</span> <span style="color: #cc66cc;"></span><span style="color: #339933;">,</span> size<span style="color: #339933;">:</span> size<span style="color: #339933;">,</span> full<span style="color: #339933;">:</span> <span style="color: #cc66cc;"></span><span style="color: #339933;">}</span>
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #666666; font-style: italic;">//ReadByte reads a byte from b Buffer</span>
<span style="color: #993333;">func</span> <span style="color: #339933;">(</span>b <span style="color: #339933;">*</span>Buffer<span style="color: #339933;">)</span> ReadByte<span style="color: #339933;">()</span> <span style="color: #339933;">(</span><span style="color: #993333;">byte</span><span style="color: #339933;">,</span> error<span style="color: #339933;">)</span> <span style="color: #339933;">{</span>
    <span style="color: #b1b100; font-weight: bold;">if</span> b<span style="color: #339933;">.</span>full <span style="color: #339933;">==</span> <span style="color: #cc66cc;"></span> <span style="color: #339933;">{</span>
        <span style="color: #b1b100; font-weight: bold;">return</span> <span style="color: #cc66cc;"></span><span style="color: #339933;">,</span> fmt<span style="color: #339933;">.</span>Errorf<span style="color: #339933;">(</span><span style="color: #cc66cc;">"Danger Will Robinson: %s"</span><span style="color: #339933;">,</span> b<span style="color: #339933;">)</span>
    <span style="color: #339933;">}</span>
    readByte <span style="color: #339933;">:=</span> b<span style="color: #339933;">.</span>buffer<span style="color: #339933;">[</span>b<span style="color: #339933;">.</span>s<span style="color: #339933;">]</span>
    b<span style="color: #339933;">.</span>s <span style="color: #339933;">=</span> <span style="color: #339933;">(</span>b<span style="color: #339933;">.</span>s <span style="color: #339933;">+</span> <span style="color: #cc66cc;">1</span><span style="color: #339933;">)</span> <span style="color: #339933;">%</span> b<span style="color: #339933;">.</span>size
    b<span style="color: #339933;">.</span>full<span style="color: #339933;">--</span>
    <span style="color: #b1b100; font-weight: bold;">return</span> readByte<span style="color: #339933;">,</span> <span style="color: #000000; font-weight: bold;">nil</span>
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #666666; font-style: italic;">//WriteByte writes c byte to the buffer</span>
<span style="color: #993333;">func</span> <span style="color: #339933;">(</span>b <span style="color: #339933;">*</span>Buffer<span style="color: #339933;">)</span> WriteByte<span style="color: #339933;">(</span>c <span style="color: #993333;">byte</span><span style="color: #339933;">)</span> error <span style="color: #339933;">{</span>
    <span style="color: #b1b100; font-weight: bold;">if</span> b<span style="color: #339933;">.</span>full<span style="color: #339933;">+</span><span style="color: #cc66cc;">1</span> &gt; b<span style="color: #339933;">.</span>size <span style="color: #339933;">{</span>
        <span style="color: #b1b100; font-weight: bold;">return</span> fmt<span style="color: #339933;">.</span>Errorf<span style="color: #339933;">(</span><span style="color: #cc66cc;">"Danger Will Robinson: %s"</span><span style="color: #339933;">,</span> b<span style="color: #339933;">)</span>
    <span style="color: #339933;">}</span>
    b<span style="color: #339933;">.</span>buffer<span style="color: #339933;">[</span>b<span style="color: #339933;">.</span>e<span style="color: #339933;">]</span> <span style="color: #339933;">=</span> c
    b<span style="color: #339933;">.</span>e <span style="color: #339933;">=</span> <span style="color: #339933;">(</span>b<span style="color: #339933;">.</span>e <span style="color: #339933;">+</span> <span style="color: #cc66cc;">1</span><span style="color: #339933;">)</span> <span style="color: #339933;">%</span> b<span style="color: #339933;">.</span>size
    b<span style="color: #339933;">.</span>full<span style="color: #339933;">++</span>
    <span style="color: #b1b100; font-weight: bold;">return</span> <span style="color: #000000; font-weight: bold;">nil</span>
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #666666; font-style: italic;">//Overwrite overwrites the oldest byte in Buffer</span>
<span style="color: #993333;">func</span> <span style="color: #339933;">(</span>b <span style="color: #339933;">*</span>Buffer<span style="color: #339933;">)</span> Overwrite<span style="color: #339933;">(</span>c <span style="color: #993333;">byte</span><span style="color: #339933;">)</span> <span style="color: #339933;">{</span>
    b<span style="color: #339933;">.</span>buffer<span style="color: #339933;">[</span>b<span style="color: #339933;">.</span>s<span style="color: #339933;">]</span> <span style="color: #339933;">=</span> c
    b<span style="color: #339933;">.</span>s <span style="color: #339933;">=</span> <span style="color: #339933;">(</span>b<span style="color: #339933;">.</span>s <span style="color: #339933;">+</span> <span style="color: #cc66cc;">1</span><span style="color: #339933;">)</span> <span style="color: #339933;">%</span> b<span style="color: #339933;">.</span>size
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #666666; font-style: italic;">//Reset resets the buffer</span>
<span style="color: #993333;">func</span> <span style="color: #339933;">(</span>b <span style="color: #339933;">*</span>Buffer<span style="color: #339933;">)</span> Reset<span style="color: #339933;">()</span> <span style="color: #339933;">{</span>
    <span style="color: #339933;">*</span>b <span style="color: #339933;">=</span> <span style="color: #339933;">*</span>NewBuffer<span style="color: #339933;">(</span>b<span style="color: #339933;">.</span>size<span style="color: #339933;">)</span>
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #666666; font-style: italic;">//String for a string representation of Buffer</span>
<span style="color: #993333;">func</span> <span style="color: #339933;">(</span>b <span style="color: #339933;">*</span>Buffer<span style="color: #339933;">)</span> String<span style="color: #339933;">()</span> <span style="color: #993333;">string</span> <span style="color: #339933;">{</span>
    <span style="color: #b1b100; font-weight: bold;">return</span> fmt<span style="color: #339933;">.</span>Sprintf<span style="color: #339933;">(</span><span style="color: #cc66cc;">"Buffer: %d, %d, %d, %d"</span><span style="color: #339933;">,</span> b<span style="color: #339933;">.</span><span style="">buffer</span><span style="color: #339933;">,</span> b<span style="color: #339933;">.</span><span style="">s</span><span style="color: #339933;">,</span> b<span style="color: #339933;">.</span><span style="">e</span><span style="color: #339933;">,</span> b<span style="color: #339933;">.</span><span style="">size</span><span style="color: #339933;">)</span>
<span style="color: #339933;">}</span></pre>
      </td>
    </tr>
  </table>
</div>
]]></content>
		</item>
		
		<item>
			<title>Jenkins Job DSL and Groovy goodness</title>
			<link>https://skarlso.github.io/2015/10/15/jenkins-job-dsl-and-groovy-goodness/</link>
			<pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/10/15/jenkins-job-dsl-and-groovy-goodness/</guid>
			<description>Hi Folks.
Ever used Job DSL plugin for Jenkins? What is that you say? Well, it&amp;#8217;s TEH most awesome plug-in for Jenkins to have, because you can CODE your job configuration and put it under source control.
Today, however, I&amp;#8217;m not going to write about that because the tutorials on Jenkins JOB DSL are very extensive and very well done. Anyone can pick them up.
Today, I would like to write about a part of it which is even more interesting.</description>
			<content type="html"><![CDATA[<p>Hi Folks.</p>

<p>Ever used <a href="https://wiki.jenkins-ci.org/display/JENKINS/Job+DSL+Plugin" target="_blank">Job DSL plugin</a> for Jenkins? What is that you say? Well, it&#8217;s TEH most awesome plug-in for Jenkins to have, because you can CODE your job configuration and put it under source control.</p>

<p>Today, however, I&#8217;m not going to write about that because the tutorials on Jenkins JOB DSL are very extensive and very well done. Anyone can pick them up.</p>

<p>Today, I would like to write about a part of it which is even more interesting. And that is, extracting re-occurring parts in your job configurations.</p>

<p>If you have jobs, which have a common part that is repeated everywhere, you usually have an urge to extracted that into one place, lest it changes and you have to go an apply the change everywhere. That&#8217;s not very efficient. But how do you do that in something which looks like a JSON descriptor?</p>

<p>Fret not, it is just Groovy. And being just groovy, you can use Groovy to implement parts of the job description and then apply that implementation to the job in the DSL.</p>

<p>Suppose you have an email which you send after every job for which the DSL looks like this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="groovy" style="font-family:monospace;">job<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'MyTestJob'</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#123;</span>
    description <span style="color: #ff0000;">'&lt;strong&gt;GENERATED - do not modify&lt;/strong&gt;'</span>
    label<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'machine_label'</span><span style="color: #66cc66;">&#41;</span>
    logRotator<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">30</span>, <span style="color: #66cc66;">-</span><span style="color: #cc66cc;">1</span>, <span style="color: #66cc66;">-</span><span style="color: #cc66cc;">1</span>, <span style="color: #cc66cc;">5</span><span style="color: #66cc66;">&#41;</span>
    parameters <span style="color: #66cc66;">&#123;</span>
        stringParam<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'somestringparam'</span>, <span style="color: #ff0000;">'default_valye'</span>, <span style="color: #ff0000;">'Description'</span><span style="color: #66cc66;">&#41;</span>
    <span style="color: #66cc66;">&#125;</span>
    wrappers <span style="color: #66cc66;">&#123;</span>
        timeout <span style="color: #66cc66;">&#123;</span>
            noActivity<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">600</span><span style="color: #66cc66;">&#41;</span>
            abortBuild<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
            failBuild<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
            writeDescription<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'Build failed due to timeout after {0} minutes'</span><span style="color: #66cc66;">&#41;</span>
        <span style="color: #66cc66;">&#125;</span>
    <span style="color: #66cc66;">&#125;</span>
    deliveryPipelineConfiguration<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"Main"</span>, <span style="color: #ff0000;">"MyTestJob"</span><span style="color: #66cc66;">&#41;</span>
    wrappers <span style="color: #66cc66;">&#123;</span>
        preBuildCleanup <span style="color: #66cc66;">&#123;</span>
            deleteDirectories<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
        <span style="color: #66cc66;">&#125;</span>
        timestamps<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
    <span style="color: #66cc66;">&#125;</span>
    triggers <span style="color: #66cc66;">&#123;</span>
        cron<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'H 12 * * 1,2'</span><span style="color: #66cc66;">&#41;</span>
    <span style="color: #66cc66;">&#125;</span>
    steps <span style="color: #66cc66;">&#123;</span>
        batchFile<span style="color: #66cc66;">&#40;</span>readFileFromWorkspace<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'relative/path/to/file'</span><span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#41;</span>
    <span style="color: #66cc66;">&#125;</span>
            publishers <span style="color: #66cc66;">&#123;</span>
                wsCleanup<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
                extendedEmail<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'email@address.com'</span>, <span style="color: #ff0000;">'$DEFAULT_SUBJECT'</span>, <span style="color: #ff0000;">'$DEFAULT_CONTENT'</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#123;</span>
                    configure <span style="color: #66cc66;">&#123;</span> node <span style="color: #66cc66;">-&gt;</span>
                        node / presendScript <span style="color: #66cc66;">&lt;&lt;</span> readFileFromWorkspace<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'email_templates/emailtemplate.groovy'</span><span style="color: #66cc66;">&#41;</span>
                        node / replyTo <span style="color: #66cc66;">&lt;&lt;</span> <span style="color: #ff0000;">'$DEFAULT_REPLYTO'</span>
                        node / contentType <span style="color: #66cc66;">&lt;&lt;</span> <span style="color: #ff0000;">'default'</span>
                    <span style="color: #66cc66;">&#125;</span>
                    trigger<span style="color: #66cc66;">&#40;</span>triggerName: <span style="color: #ff0000;">'StillUnstable'</span>, subject: <span style="color: #ff0000;">'$DEFAULT_SUBJECT'</span>, body: <span style="color: #ff0000;">'$DEFAULT_CONTENT'</span>, replyTo: <span style="color: #ff0000;">'$DEFAULT_REPLYTO'</span>, sendToDevelopers: <span style="color: #000000; font-weight: bold;">true</span>, sendToRecipientList: <span style="color: #000000; font-weight: bold;">true</span><span style="color: #66cc66;">&#41;</span>
                    trigger<span style="color: #66cc66;">&#40;</span>triggerName: <span style="color: #ff0000;">'Fixed'</span>, subject: <span style="color: #ff0000;">'$DEFAULT_SUBJECT'</span>, body: <span style="color: #ff0000;">'$DEFAULT_CONTENT'</span>, replyTo: <span style="color: #ff0000;">'$DEFAULT_REPLYTO'</span>, sendToDevelopers: <span style="color: #000000; font-weight: bold;">true</span>, sendToRecipientList: <span style="color: #000000; font-weight: bold;">true</span><span style="color: #66cc66;">&#41;</span>
                    trigger<span style="color: #66cc66;">&#40;</span>triggerName: <span style="color: #ff0000;">'Failure'</span>, subject: <span style="color: #ff0000;">'$DEFAULT_SUBJECT'</span>, body: <span style="color: #ff0000;">'$DEFAULT_CONTENT'</span>, replyTo: <span style="color: #ff0000;">'$DEFAULT_REPLYTO'</span>, sendToDevelopers: <span style="color: #000000; font-weight: bold;">true</span>, sendToRecipientList: <span style="color: #000000; font-weight: bold;">true</span><span style="color: #66cc66;">&#41;</span>
                <span style="color: #66cc66;">&#125;</span>
&nbsp;
            <span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Now, that big chunk of email setting is copied into a bunch of files, which is pretty ugly. And once you try to change it, you&#8217;ll have to change it everywhere. Also, the interesting bits here are those readFileFromWorkspace parts. Those allow us to export even larger chunks of the script into external files. Now, because the slave might be located somewhere else, you should not use new File(&#8216;file&#8217;).text in your job DSL. readFileFromWorkspace in the background does that, but applies correct way to the PATH it looks on for the file specified.</p>

<p>Let&#8217;s put this into a groovy script, shall we? Create a utilities folder where the DSL is and create a groovy file in it like this one:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="groovy" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #a1a100;">utilities</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> JobCommonTemplate <span style="color: #66cc66;">&#123;</span>
    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">static</span> <span style="color: #993333;">void</span> addEmailTemplate<span style="color: #66cc66;">&#40;</span><span style="color: #000000; font-weight: bold;">def</span> job, <span style="color: #000000; font-weight: bold;">def</span> dslFactory<span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#123;</span>
        <span style="color: #aaaadd; font-weight: bold;">String</span> emailScript <span style="color: #66cc66;">=</span> dslFactory.<span style="color: #006600;">readFileFromWorkspace</span><span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"email_template/EmailTemplate.groovy"</span><span style="color: #66cc66;">&#41;</span>
        job.<span style="color: #006600;">with</span> <span style="color: #66cc66;">&#123;</span>
            publishers <span style="color: #66cc66;">&#123;</span>
                wsCleanup<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
                extendedEmail<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'email@address.com'</span>, <span style="color: #ff0000;">'$DEFAULT_SUBJECT'</span>, <span style="color: #ff0000;">'$DEFAULT_CONTENT'</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#123;</span>
                    configure <span style="color: #66cc66;">&#123;</span> node <span style="color: #66cc66;">-&gt;</span>
                        node / presendScript <span style="color: #66cc66;">&lt;&lt;</span> emailScript
                        node / replyTo <span style="color: #66cc66;">&lt;&lt;</span> <span style="color: #ff0000;">'$DEFAULT_REPLYTO'</span>
                        node / contentType <span style="color: #66cc66;">&lt;&lt;</span> <span style="color: #ff0000;">'default'</span>
                    <span style="color: #66cc66;">&#125;</span>
                    trigger<span style="color: #66cc66;">&#40;</span>triggerName: <span style="color: #ff0000;">'StillUnstable'</span>, subject: <span style="color: #ff0000;">'$DEFAULT_SUBJECT'</span>, body: <span style="color: #ff0000;">'$DEFAULT_CONTENT'</span>, replyTo: <span style="color: #ff0000;">'$DEFAULT_REPLYTO'</span>, sendToDevelopers: <span style="color: #000000; font-weight: bold;">true</span>, sendToRecipientList: <span style="color: #000000; font-weight: bold;">true</span><span style="color: #66cc66;">&#41;</span>
                    trigger<span style="color: #66cc66;">&#40;</span>triggerName: <span style="color: #ff0000;">'Fixed'</span>, subject: <span style="color: #ff0000;">'$DEFAULT_SUBJECT'</span>, body: <span style="color: #ff0000;">'$DEFAULT_CONTENT'</span>, replyTo: <span style="color: #ff0000;">'$DEFAULT_REPLYTO'</span>, sendToDevelopers: <span style="color: #000000; font-weight: bold;">true</span>, sendToRecipientList: <span style="color: #000000; font-weight: bold;">true</span><span style="color: #66cc66;">&#41;</span>
                    trigger<span style="color: #66cc66;">&#40;</span>triggerName: <span style="color: #ff0000;">'Failure'</span>, subject: <span style="color: #ff0000;">'$DEFAULT_SUBJECT'</span>, body: <span style="color: #ff0000;">'$DEFAULT_CONTENT'</span>, replyTo: <span style="color: #ff0000;">'$DEFAULT_REPLYTO'</span>, sendToDevelopers: <span style="color: #000000; font-weight: bold;">true</span>, sendToRecipientList: <span style="color: #000000; font-weight: bold;">true</span><span style="color: #66cc66;">&#41;</span>
                <span style="color: #66cc66;">&#125;</span>
&nbsp;
            <span style="color: #66cc66;">&#125;</span>
        <span style="color: #66cc66;">&#125;</span>
    <span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>The function addEmailTemplate gets two parameters. A job, which is an implementation of a Job, and a dslFactory which is a DslFactory. That factory is an interface which defines our readFileFromWorkspace. Where do we get the implementation from then? That will be from the Job. Let&#8217;s alter our job to apply this Groovy script.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="groovy" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">import</span> <span style="color: #a1a100;">utilities.JobCommonTemplate</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">def</span> myJob <span style="color: #66cc66;">=</span> job<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'MyTestJob'</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#123;</span>
    description <span style="color: #ff0000;">'&lt;strong&gt;GENERATED - do not modify&lt;/strong&gt;'</span>
    label<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'machine_label'</span><span style="color: #66cc66;">&#41;</span>
    logRotator<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">30</span>, <span style="color: #66cc66;">-</span><span style="color: #cc66cc;">1</span>, <span style="color: #66cc66;">-</span><span style="color: #cc66cc;">1</span>, <span style="color: #cc66cc;">5</span><span style="color: #66cc66;">&#41;</span>
    parameters <span style="color: #66cc66;">&#123;</span>
        stringParam<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'somestringparam'</span>, <span style="color: #ff0000;">'default_valye'</span>, <span style="color: #ff0000;">'Description'</span><span style="color: #66cc66;">&#41;</span>
    <span style="color: #66cc66;">&#125;</span>
    wrappers <span style="color: #66cc66;">&#123;</span>
        timeout <span style="color: #66cc66;">&#123;</span>
            noActivity<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">600</span><span style="color: #66cc66;">&#41;</span>
            abortBuild<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
            failBuild<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
            writeDescription<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'Build failed due to timeout after {0} minutes'</span><span style="color: #66cc66;">&#41;</span>
        <span style="color: #66cc66;">&#125;</span>
    <span style="color: #66cc66;">&#125;</span>
    deliveryPipelineConfiguration<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"Main"</span>, <span style="color: #ff0000;">"MyTestJob"</span><span style="color: #66cc66;">&#41;</span>
    wrappers <span style="color: #66cc66;">&#123;</span>
        preBuildCleanup <span style="color: #66cc66;">&#123;</span>
            deleteDirectories<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
        <span style="color: #66cc66;">&#125;</span>
        timestamps<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
    <span style="color: #66cc66;">&#125;</span>
    triggers <span style="color: #66cc66;">&#123;</span>
        cron<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'H 12 * * 1,2'</span><span style="color: #66cc66;">&#41;</span>
    <span style="color: #66cc66;">&#125;</span>
    steps <span style="color: #66cc66;">&#123;</span>
        batchFile<span style="color: #66cc66;">&#40;</span>readFileFromWorkspace<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'relative/path/to/file'</span><span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#41;</span>
    <span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span>
&nbsp;
JobCommonTemplate.<span style="color: #006600;">addEmailTemplate</span><span style="color: #66cc66;">&#40;</span>myJob, <span style="color: #000000; font-weight: bold;">this</span><span style="color: #66cc66;">&#41;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Notice three things here.</p>

<p>#1 =&gt; <strong>import</strong>. We import the script from utilities folder which we created and placed the script into it.</p>

<p>#2 =&gt; <strong>def myJob</strong>. We create a variable which will contain our job&#8217;s description.</p>

<p>#3 =&gt; <strong>this</strong>. &#8216;this&#8217; will be the DslFactory. That&#8217;s where we get our readFileFromWorkspace implementation.</p>

<p>And that&#8217;s it. We have extracted a part of our job which is re-occurring and we found our implementation for our readFileFromWorkspace. DslFactory has most of the things which you need in a job description, would you want to expand on this and extract other bits and pieces.</p>

<p>Have fun, and happy coding!</p>

<p>As always,</p>

<p>Thanks for reading!</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>DataMunger Kata with Go</title>
			<link>https://skarlso.github.io/2015/10/04/datamunger-kata-with-go/</link>
			<pubDate>Sun, 04 Oct 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/10/04/datamunger-kata-with-go/</guid>
			<description>Quickly wrote up the Data Munger code kata in Go.
Next time, I want better abstractions. And a way to select columns based on their header data. For now, this is not bad.
  package main &amp;nbsp; import ( &#34;bufio&#34; &#34;fmt&#34; &#34;log&#34; &#34;math&#34; &#34;os&#34; &#34;regexp&#34; &#34;strconv&#34; &#34;strings&#34; ) &amp;nbsp; //Data which is Data type Data struct { columnName string compareOne float64 compareTwo float64 } &amp;nbsp; func main() { // datas := []Data{WeatherData{}, FootballData{}} fmt.</description>
			<content type="html"><![CDATA[<p>Quickly wrote up the Data Munger code kata in Go.</p>

<p>Next time, I want better abstractions. And a way to select columns based on their header data. For now, this is not bad.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="go" style="font-family:monospace;"><span style="color: #b1b100; font-weight: bold;">package</span> main
&nbsp;
<span style="color: #b1b100; font-weight: bold;">import</span> <span style="color: #339933;">(</span>
    <span style="color: #cc66cc;">"bufio"</span>
    <span style="color: #cc66cc;">"fmt"</span>
    <span style="color: #cc66cc;">"log"</span>
    <span style="color: #cc66cc;">"math"</span>
    <span style="color: #cc66cc;">"os"</span>
    <span style="color: #cc66cc;">"regexp"</span>
    <span style="color: #cc66cc;">"strconv"</span>
    <span style="color: #cc66cc;">"strings"</span>
<span style="color: #339933;">)</span>
&nbsp;
<span style="color: #666666; font-style: italic;">//Data which is Data</span>
<span style="color: #b1b100; font-weight: bold;">type</span> Data <span style="color: #993333;">struct</span> <span style="color: #339933;">{</span>
    columnName <span style="color: #993333;">string</span>
    compareOne <span style="color: #993333;">float64</span>
    compareTwo <span style="color: #993333;">float64</span>
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #993333;">func</span> main<span style="color: #339933;">()</span> <span style="color: #339933;">{</span>
    <span style="color: #666666; font-style: italic;">// datas := []Data{WeatherData{}, FootballData{}}</span>
    fmt<span style="color: #339933;">.</span><span style="">Println</span><span style="color: #339933;">(</span><span style="color: #cc66cc;">"Minimum weather data:"</span><span style="color: #339933;">,</span> GetDataMinimumDiff<span style="color: #339933;">(</span><span style="color: #cc66cc;">"weather.dat"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;"></span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">1</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">2</span><span style="color: #339933;">))</span>
    fmt<span style="color: #339933;">.</span>Println<span style="color: #339933;">(</span><span style="color: #cc66cc;">"Minimum football data:"</span><span style="color: #339933;">,</span> GetDataMinimumDiff<span style="color: #339933;">(</span><span style="color: #cc66cc;">"football.dat"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">1</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">6</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">7</span><span style="color: #339933;">))</span>
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #666666; font-style: italic;">//GetDataMinimumDiff gathers data from file to fill up Columns.</span>
<span style="color: #993333;">func</span> GetDataMinimumDiff<span style="color: #339933;">(</span>filename <span style="color: #993333;">string</span><span style="color: #339933;">,</span> nameColumn <span style="color: #993333;">int</span><span style="color: #339933;">,</span> compareColOne <span style="color: #993333;">int</span><span style="color: #339933;">,</span> compareColTwo <span style="color: #993333;">int</span><span style="color: #339933;">)</span> Data <span style="color: #339933;">{</span>
    data <span style="color: #339933;">:=</span> Data<span style="color: #339933;">{}</span>
    minimum <span style="color: #339933;">:=</span> math<span style="color: #339933;">.</span>MaxFloat64
    readLines <span style="color: #339933;">:=</span> ReadFile<span style="color: #339933;">(</span>filename<span style="color: #339933;">)</span>
    <span style="color: #b1b100; font-weight: bold;">for</span> _<span style="color: #339933;">,</span> value <span style="color: #339933;">:=</span> <span style="color: #b1b100; font-weight: bold;">range</span> readLines <span style="color: #339933;">{</span>
        valueArrays <span style="color: #339933;">:=</span> strings<span style="color: #339933;">.</span>Split<span style="color: #339933;">(</span>value<span style="color: #339933;">,</span> <span style="color: #cc66cc;">","</span><span style="color: #339933;">)</span>
        name <span style="color: #339933;">:=</span> valueArrays<span style="color: #339933;">[</span>nameColumn<span style="color: #339933;">]</span>
        trimmedFirst<span style="color: #339933;">,</span> _ <span style="color: #339933;">:=</span> strconv<span style="color: #339933;">.</span>ParseFloat<span style="color: #339933;">(</span>valueArrays<span style="color: #339933;">[</span>compareColOne<span style="color: #339933;">],</span> <span style="color: #cc66cc;">64</span><span style="color: #339933;">)</span>
        trimmedSecond<span style="color: #339933;">,</span> _ <span style="color: #339933;">:=</span> strconv<span style="color: #339933;">.</span>ParseFloat<span style="color: #339933;">(</span>valueArrays<span style="color: #339933;">[</span>compareColTwo<span style="color: #339933;">],</span> <span style="color: #cc66cc;">64</span><span style="color: #339933;">)</span>
        diff <span style="color: #339933;">:=</span> trimmedFirst <span style="color: #339933;">-</span> trimmedSecond
        diff <span style="color: #339933;">=</span> math<span style="color: #339933;">.</span>Abs<span style="color: #339933;">(</span>diff<span style="color: #339933;">)</span>
        <span style="color: #b1b100; font-weight: bold;">if</span> diff &lt;<span style="color: #339933;">=</span> minimum <span style="color: #339933;">{</span>
            minimum <span style="color: #339933;">=</span> diff
            data<span style="color: #339933;">.</span>columnName <span style="color: #339933;">=</span> name
            data<span style="color: #339933;">.</span>compareOne <span style="color: #339933;">=</span> trimmedFirst
            data<span style="color: #339933;">.</span>compareTwo <span style="color: #339933;">=</span> trimmedSecond
        <span style="color: #339933;">}</span>
    <span style="color: #339933;">}</span>
    <span style="color: #b1b100; font-weight: bold;">return</span> data
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #666666; font-style: italic;">//ReadFile reads lines from a file and gives back a string array which contains the lines.</span>
<span style="color: #993333;">func</span> ReadFile<span style="color: #339933;">(</span>fileName <span style="color: #993333;">string</span><span style="color: #339933;">)</span> <span style="color: #339933;">(</span>fileLines <span style="color: #339933;">[]</span><span style="color: #993333;">string</span><span style="color: #339933;">)</span> <span style="color: #339933;">{</span>
    file<span style="color: #339933;">,</span> err <span style="color: #339933;">:=</span> os<span style="color: #339933;">.</span>Open<span style="color: #339933;">(</span>fileName<span style="color: #339933;">)</span>
    <span style="color: #b1b100; font-weight: bold;">if</span> err <span style="color: #339933;">!=</span> <span style="color: #000000; font-weight: bold;">nil</span> <span style="color: #339933;">{</span>
        log<span style="color: #339933;">.</span>Fatal<span style="color: #339933;">(</span>err<span style="color: #339933;">)</span>
    <span style="color: #339933;">}</span>
    <span style="color: #b1b100; font-weight: bold;">defer</span> file<span style="color: #339933;">.</span>Close<span style="color: #339933;">()</span>
&nbsp;
    scanner <span style="color: #339933;">:=</span> bufio<span style="color: #339933;">.</span>NewScanner<span style="color: #339933;">(</span>file<span style="color: #339933;">)</span>
    <span style="color: #666666; font-style: italic;">//Skipping the first line which is the header.</span>
    scanner<span style="color: #339933;">.</span>Scan<span style="color: #339933;">()</span>
    <span style="color: #b1b100; font-weight: bold;">for</span> scanner<span style="color: #339933;">.</span>Scan<span style="color: #339933;">()</span> <span style="color: #339933;">{</span>
        line <span style="color: #339933;">:=</span> scanner<span style="color: #339933;">.</span>Text<span style="color: #339933;">()</span>
        re <span style="color: #339933;">:=</span> regexp<span style="color: #339933;">.</span>MustCompile<span style="color: #339933;">(</span><span style="color: #cc66cc;">"<span style="color: #000099; font-weight: bold;">\\</span>w+"</span><span style="color: #339933;">)</span>
        lines <span style="color: #339933;">:=</span> re<span style="color: #339933;">.</span>FindAllString<span style="color: #339933;">(</span>line<span style="color: #339933;">,</span> <span style="color: #339933;">-</span><span style="color: #cc66cc;">1</span><span style="color: #339933;">)</span>
        <span style="color: #b1b100; font-weight: bold;">if</span> <span style="color: #000066;">len</span><span style="color: #339933;">(</span>lines<span style="color: #339933;">)</span> &gt; <span style="color: #cc66cc;"></span> <span style="color: #339933;">{</span>
            fileLines <span style="color: #339933;">=</span> append<span style="color: #339933;">(</span>fileLines<span style="color: #339933;">,</span> strings<span style="color: #339933;">.</span>Join<span style="color: #339933;">(</span>lines<span style="color: #339933;">,</span> <span style="color: #cc66cc;">","</span><span style="color: #339933;">))</span>
        <span style="color: #339933;">}</span>
    <span style="color: #339933;">}</span>
&nbsp;
    <span style="color: #b1b100; font-weight: bold;">if</span> err <span style="color: #339933;">:=</span> scanner<span style="color: #339933;">.</span>Err<span style="color: #339933;">();</span> err <span style="color: #339933;">!=</span> <span style="color: #000000; font-weight: bold;">nil</span> <span style="color: #339933;">{</span>
        log<span style="color: #339933;">.</span>Fatal<span style="color: #339933;">(</span>err<span style="color: #339933;">)</span>
    <span style="color: #339933;">}</span>
&nbsp;
    <span style="color: #b1b100; font-weight: bold;">return</span>
<span style="color: #339933;">}</span></pre>
      </td>
    </tr>
  </table>
</div>
]]></content>
		</item>
		
		<item>
			<title>How to Aggregate Tests with Jenkins with Aggregate Plugin on non-relating jobs</title>
			<link>https://skarlso.github.io/2015/10/02/how-to-aggregate-tests-with-jenkins-with-aggregate-plugin-on-non-relating-jobs/</link>
			<pubDate>Fri, 02 Oct 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/10/02/how-to-aggregate-tests-with-jenkins-with-aggregate-plugin-on-non-relating-jobs/</guid>
			<description>Hello folks.
Today, I would like to talk about something I came in contact with, and was hard to find a proper answer / solution for it.
So I&amp;#8217;m writing this down to document my findings. Like the title says, this is about aggregating test result with Jenkins, using the plug-in provided. If you, like me, have a pipeline structure which do not work on the same artifact, but do have a upstream-downstream relationship, you will have a hard time configuring and making Aggregation work.</description>
			<content type="html"><![CDATA[

<p>Hello folks.</p>

<p>Today, I would like to talk about something I came in contact with, and was hard to find a proper answer / solution for it.</p>

<p>So I&#8217;m writing this down to document my findings. Like the title says, this is about aggregating test result with Jenkins, using the plug-in provided. If you, like me, have a pipeline structure which do not work on the same artifact, but do have a upstream-downstream relationship, you will have a hard time configuring and making Aggregation work. So here is how, I fixed the issue.</p>

<h1 id="connection">Connection</h1>

<p>In order for the aggregation to work, there needs to be an <strong>artifact connection</strong> between the upstream and downstream projects. And that is the key. But if you don&#8217;t have that, well, let&#8217;s create one. I have a parent job configured like this one. =&gt;</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="xml" style="font-family:monospace;"><span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;?xml</span> <span style="color: #000066;">version</span>=<span style="color: #ff0000;">'1.0'</span> <span style="color: #000066;">encoding</span>=<span style="color: #ff0000;">'UTF-8'</span><span style="color: #000000; font-weight: bold;">?&gt;</span></span>
<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;project<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;actions</span><span style="color: #000000; font-weight: bold;">/&gt;</span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;description<span style="color: #000000; font-weight: bold;">&gt;</span></span><span style="color: #000000; font-weight: bold;">&lt;/description<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;keepDependencies<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>false<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/keepDependencies<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;properties</span><span style="color: #000000; font-weight: bold;">/&gt;</span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;scm</span> <span style="color: #000066;">class</span>=<span style="color: #ff0000;">"hudson.scm.NullSCM"</span><span style="color: #000000; font-weight: bold;">/&gt;</span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;canRoam<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>true<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/canRoam<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;disabled<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>false<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/disabled<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;blockBuildWhenDownstreamBuilding<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>false<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/blockBuildWhenDownstreamBuilding<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;blockBuildWhenUpstreamBuilding<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>false<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/blockBuildWhenUpstreamBuilding<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;triggers</span><span style="color: #000000; font-weight: bold;">/&gt;</span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;concurrentBuild<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>false<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/concurrentBuild<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;builders</span><span style="color: #000000; font-weight: bold;">/&gt;</span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;publishers<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;hudson.tasks.test.AggregatedTestResultPublisher</span> <span style="color: #000066;">plugin</span>=<span style="color: #ff0000;">"junit@1.9"</span><span style="color: #000000; font-weight: bold;">&gt;</span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;includeFailedBuilds<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>false<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/includeFailedBuilds<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/hudson.tasks.test.AggregatedTestResultPublisher<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;hudson.tasks.BuildTrigger<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;childProjects<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>ChildJob<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/childProjects<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;threshold<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;name<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>SUCCESS<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/name<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;ordinal<span style="color: #000000; font-weight: bold;">&gt;</span></span></span><span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/ordinal<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;color<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>BLUE<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/color<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;completeBuild<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>true<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/completeBuild<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/threshold<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/hudson.tasks.BuildTrigger<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/publishers<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;buildWrappers</span><span style="color: #000000; font-weight: bold;">/&gt;</span></span>
<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/project<span style="color: #000000; font-weight: bold;">&gt;</span></span></span></pre>
      </td>
    </tr>
  </table>
</div>

<p>As you can see, it&#8217;s pretty basic. It isn&#8217;t much. It&#8217;s supposed to be a trigger job for downstream projects. You could have this one at anything. Maybe scheduled, or have some kind of gathering here of some results, and so on and so forth. The end part of the configuration is the interesting bit.</p>

<p>Aggregation is setup, but it won&#8217;t work, because despite there being an upstream/downstream relationship, there also needs to be an artifact connection which uses <strong>fingerprinting</strong>. Fingerprinting for Jenkins is needed in oder to make the physical connection between the jobs via hashes. This is what you will get if that is not setup:</p>

<p>But if there is no artifact between them, what do you do? You create one.</p>

<h1 id="the-artifact-which-binds-us">The Artifact which Binds Us</h1>

<p>Adding a simple <strong>timestamp file</strong> is enough to make a connection. So let&#8217;s do that. This is how it will look like =&gt;</p>

<p>The important bits about this picture are the small echo which simply creates a file which will contain some time stamp data, and after that the archive artifact, which also fingerprints that file, marking it with a hash which identifies this job as using that particular artifact.</p>

<p>Now, the next step is to create the connection. For that, you need the artifact copy plugin =&gt; <a href="https://wiki.jenkins-ci.org/display/JENKINS/Copy+Artifact+Plugin" target="_blank">Copy Artifact Plugin</a>.</p>

<p>With this, we create the childs configuration like this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="xml" style="font-family:monospace;"><span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;?xml</span> <span style="color: #000066;">version</span>=<span style="color: #ff0000;">'1.0'</span> <span style="color: #000066;">encoding</span>=<span style="color: #ff0000;">'UTF-8'</span><span style="color: #000000; font-weight: bold;">?&gt;</span></span>
<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;project<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;actions</span><span style="color: #000000; font-weight: bold;">/&gt;</span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;description<span style="color: #000000; font-weight: bold;">&gt;</span></span><span style="color: #000000; font-weight: bold;">&lt;/description<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;keepDependencies<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>false<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/keepDependencies<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;properties</span><span style="color: #000000; font-weight: bold;">/&gt;</span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;scm</span> <span style="color: #000066;">class</span>=<span style="color: #ff0000;">"hudson.plugins.git.GitSCM"</span> <span style="color: #000066;">plugin</span>=<span style="color: #ff0000;">"git@2.4.0"</span><span style="color: #000000; font-weight: bold;">&gt;</span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;configVersion<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>2<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/configVersion<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;userRemoteConfigs<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;hudson.plugins.git.UserRemoteConfig<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;url<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>https://github.com/Skarlso/DataMung.git<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/url<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/hudson.plugins.git.UserRemoteConfig<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/userRemoteConfigs<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;branches<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;hudson.plugins.git.BranchSpec<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;name<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>*/master<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/name<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/hudson.plugins.git.BranchSpec<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/branches<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;doGenerateSubmoduleConfigurations<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>false<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/doGenerateSubmoduleConfigurations<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;submoduleCfg</span> <span style="color: #000066;">class</span>=<span style="color: #ff0000;">"list"</span><span style="color: #000000; font-weight: bold;">/&gt;</span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;extensions</span><span style="color: #000000; font-weight: bold;">/&gt;</span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/scm<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;canRoam<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>true<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/canRoam<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;disabled<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>false<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/disabled<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;blockBuildWhenDownstreamBuilding<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>false<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/blockBuildWhenDownstreamBuilding<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;blockBuildWhenUpstreamBuilding<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>false<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/blockBuildWhenUpstreamBuilding<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;triggers</span><span style="color: #000000; font-weight: bold;">/&gt;</span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;concurrentBuild<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>false<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/concurrentBuild<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;builders<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;hudson.plugins.gradle.Gradle</span> <span style="color: #000066;">plugin</span>=<span style="color: #ff0000;">"gradle@1.24"</span><span style="color: #000000; font-weight: bold;">&gt;</span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;description<span style="color: #000000; font-weight: bold;">&gt;</span></span><span style="color: #000000; font-weight: bold;">&lt;/description<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;switches<span style="color: #000000; font-weight: bold;">&gt;</span></span><span style="color: #000000; font-weight: bold;">&lt;/switches<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;tasks<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>assemble check<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/tasks<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;rootBuildScriptDir<span style="color: #000000; font-weight: bold;">&gt;</span></span><span style="color: #000000; font-weight: bold;">&lt;/rootBuildScriptDir<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;buildFile<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>build.gradle<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/buildFile<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;gradleName<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>(Default)<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/gradleName<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;useWrapper<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>true<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/useWrapper<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;makeExecutable<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>false<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/makeExecutable<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;fromRootBuildScriptDir<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>true<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/fromRootBuildScriptDir<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;useWorkspaceAsHome<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>false<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/useWorkspaceAsHome<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/hudson.plugins.gradle.Gradle<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;hudson.plugins.copyartifact.CopyArtifact</span> <span style="color: #000066;">plugin</span>=<span style="color: #ff0000;">"copyartifact@1.36"</span><span style="color: #000000; font-weight: bold;">&gt;</span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;project<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>ParentJob<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/project<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;filter<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>timestamp.data<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/filter<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;target<span style="color: #000000; font-weight: bold;">&gt;</span></span><span style="color: #000000; font-weight: bold;">&lt;/target<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;excludes<span style="color: #000000; font-weight: bold;">&gt;</span></span><span style="color: #000000; font-weight: bold;">&lt;/excludes<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;selector</span> <span style="color: #000066;">class</span>=<span style="color: #ff0000;">"hudson.plugins.copyartifact.TriggeredBuildSelector"</span><span style="color: #000000; font-weight: bold;">&gt;</span></span>
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;upstreamFilterStrategy<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>UseGlobalSetting<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/upstreamFilterStrategy<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/selector<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;doNotFingerprintArtifacts<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>false<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/doNotFingerprintArtifacts<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/hudson.plugins.copyartifact.CopyArtifact<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/builders<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;publishers<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;hudson.tasks.junit.JUnitResultArchiver</span> <span style="color: #000066;">plugin</span>=<span style="color: #ff0000;">"junit@1.9"</span><span style="color: #000000; font-weight: bold;">&gt;</span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;testResults<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>build/test-results/*.xml<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/testResults<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;keepLongStdio<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>false<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/keepLongStdio<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;healthScaleFactor<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>1.0<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/healthScaleFactor<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/hudson.tasks.junit.JUnitResultArchiver<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/publishers<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;buildWrappers<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;hudson.plugins.ws__cleanup.PreBuildCleanup</span> <span style="color: #000066;">plugin</span>=<span style="color: #ff0000;">"ws-cleanup@0.28"</span><span style="color: #000000; font-weight: bold;">&gt;</span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;deleteDirs<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>false<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/deleteDirs<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;cleanupParameter<span style="color: #000000; font-weight: bold;">&gt;</span></span><span style="color: #000000; font-weight: bold;">&lt;/cleanupParameter<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
      <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;externalDelete<span style="color: #000000; font-weight: bold;">&gt;</span></span><span style="color: #000000; font-weight: bold;">&lt;/externalDelete<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/hudson.plugins.ws__cleanup.PreBuildCleanup<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/buildWrappers<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/project<span style="color: #000000; font-weight: bold;">&gt;</span></span></span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Again, the improtant bit is this:</p>

<p>After the copy is setup, we launch our parent job and if everything is correct, you should see something like this:</p>

<h1 id="wrapping-it-up">Wrapping it Up</h1>

<p>For final words, important bit to take away from this is that you need an <strong>artifact connection between the jobs</strong> to make this work. Whatever your downstream / upstream connection is, it doesn&#8217;t matter. Also, there can be a problem that you have everything set up, and there are artifacts which bind the jobs together but you still can&#8217;t see the results, then your best option is to specify the jobs BY NAME in the aggregate test plug-in like this:</p>

<p>I know this is a pain if there are multiple jobs, but at least, jenkins is providing you with Autoexpande once you start typing.</p>

<p>Of course this also works with multiple downstream jobs if they copy the artifact to themselves.</p>

<p>Any questions, please feel free to comment and I will answer to the best of my knowledge.</p>

<p>Cheers,
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>I used to have great ideas on the toilet, but I no longer do.</title>
			<link>https://skarlso.github.io/2015/09/07/i-used-to-have-great-ideas-on-the-toilet-but-i-no-longer-do/</link>
			<pubDate>Mon, 07 Sep 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/09/07/i-used-to-have-great-ideas-on-the-toilet-but-i-no-longer-do/</guid>
			<description>I used to have great ideas on the toilet, but I no longer do. And I would like to reflect on that. So this is not going to be a technical post, rather some ramblings.
I already had a post similar to this one, but I failed to follow up on it, and now I&amp;#8217;m re-visiting the question. With technology on the rise, embedded systems, chips, augmented biology and information being available at our fingertips, I have but one concern.</description>
			<content type="html"><![CDATA[<p>I used to have great ideas on the toilet, but I no longer do. And I would like to reflect on that. So this is not going to be a technical post, rather some ramblings.</p>

<p>I already had a post similar to this one, but I failed to follow up on it, and now I&#8217;m re-visiting the question. With technology on the rise, embedded systems, chips, augmented biology and information being available at our fingertips, I have but one concern. I don&#8217;t want to sound like an old guy reflecting on history, that now everything is changing and that we need to have a sight on the past and bla bla bla. I do have one valid concern though. We are in danger of loosing ourselves.</p>

<p>With mobile phones and the Internet always being around and available, we are in danger of loosing our thoughts and ideas, our individuality and our THINKING. We are reading news, posts, advancements, blogs, vlogs, and the dreaded 9gag. I am one of these people. I read 9gag. And I hate myself for it. It&#8217;s an immediate satisfaction and gain of euphoria and a way of shutting my brain down when it needs it. But I caught myself doing it one or more times when I should have read something more important or beneficial at least. Or catch up on a blog post or read a news, or Gods forbid just plain sit around and THINK for a little while.</p>

<p>So my previous post around this topic was to leave out technology from your life&#8217;s for a short period of time. This is the same. Have some alone time. Reflect. Write a diary. If you are a technical person, write down ideas you would want to create. If you don&#8217;t have any, write out bigger ones. For example, I want to write an RPG. Or That I want to learn how to do metaprogramming the proper way. Or that I want to read up on some Russian sciences fiction. There are SOOOO many things in the world. Don&#8217;t waste it on bullshit and immediate serotonin generating content, like frigging cats! When you do it, when your are at it, stop for a little bit, and think. <strong>THINK</strong>. What are you doing? Why are you reading up on that crap? What merit does it have?</p>

<p>I understand that from time to time you need to shut off. You need a little bit of comfort. A little bit of serotonin in your system. There are better ways of achieving that. Go for a walk. Run. Bike. Eat a chocolate while staring out of a window. Read a comic book. Do random acts of kindness (not kidding). Drink a glass of water. Listen to some awesome music while drawing something ( anything, it doesn&#8217;t have to be a masterpiece! ). Sit back and listen to some music. Talk to a loved one. Talk to a friend. Talk to yourself (again, not kidding). If you have a pet, go play with it.</p>

<p>So I have a little challenge here as well -it would be a reflective post if I didn&#8217;t have any-, do not bring any electronic devices to the toilet. Or if you bring one, the rule is to turn on Airplane mode. I used to have great ideas on the toilet because I didn&#8217;t used to watch stuff on my phone. I used to be by myself with my thoughts. I have a family so there is very little time or space to be alone and with my thoughts. And then when I had the chance, I was browsing on my phone, which again, effectively, led to not being alone with my thoughts.</p>

<p>There you have it. This is my little rant about technology and thinking.</p>

<p>Thanks for reading,</p>

<p>And as always,</p>

<p>Have a nice day.</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Sieve of Eratosthenes in Go</title>
			<link>https://skarlso.github.io/2015/07/30/sieve-of-eratosthenes-in-go/</link>
			<pubDate>Thu, 30 Jul 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/07/30/sieve-of-eratosthenes-in-go/</guid>
			<description>I&amp;#8217;m pretty proud of this one as well.
  package sieve &amp;nbsp; //Sieve Uses the Sieve of Eratosthenes to calculate primes to a certain limit func Sieve(limit int) []int { var listOfPrimes []int markers := make([]bool, limit) &amp;nbsp; for i := 2; i &amp;lt; limit; i++ { if !markers[i] { for j := i + i; j &amp;lt; limit; j += i { markers[j] = true } listOfPrimes = append(listOfPrimes, i) } } &amp;nbsp; return listOfPrimes }     </description>
			<content type="html"><![CDATA[<p>I&#8217;m pretty proud of this one as well.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="go" style="font-family:monospace;"><span style="color: #b1b100; font-weight: bold;">package</span> sieve
&nbsp;
<span style="color: #666666; font-style: italic;">//Sieve Uses the Sieve of Eratosthenes to calculate primes to a certain limit</span>
<span style="color: #993333;">func</span> Sieve<span style="color: #339933;">(</span>limit <span style="color: #993333;">int</span><span style="color: #339933;">)</span> <span style="color: #339933;">[]</span><span style="color: #993333;">int</span> <span style="color: #339933;">{</span>
    <span style="color: #b1b100; font-weight: bold;">var</span> listOfPrimes <span style="color: #339933;">[]</span><span style="color: #993333;">int</span>
    markers <span style="color: #339933;">:=</span> <span style="color: #000066;">make</span><span style="color: #339933;">([]</span><span style="color: #993333;">bool</span><span style="color: #339933;">,</span> limit<span style="color: #339933;">)</span>
&nbsp;
    <span style="color: #b1b100; font-weight: bold;">for</span> <span style="">i</span> <span style="color: #339933;">:=</span> <span style="color: #cc66cc;">2</span><span style="color: #339933;">;</span> <span style="">i</span> &lt; limit<span style="color: #339933;">;</span> <span style="">i</span><span style="color: #339933;">++</span> <span style="color: #339933;">{</span>
        <span style="color: #b1b100; font-weight: bold;">if</span> <span style="color: #339933;">!</span>markers<span style="color: #339933;">[</span><span style="">i</span><span style="color: #339933;">]</span> <span style="color: #339933;">{</span>
            <span style="color: #b1b100; font-weight: bold;">for</span> j <span style="color: #339933;">:=</span> <span style="">i</span> <span style="color: #339933;">+</span> <span style="">i</span><span style="color: #339933;">;</span> j &lt; limit<span style="color: #339933;">;</span> j <span style="color: #339933;">+=</span> <span style="">i</span> <span style="color: #339933;">{</span>
                markers<span style="color: #339933;">[</span>j<span style="color: #339933;">]</span> <span style="color: #339933;">=</span> <span style="color: #000000; font-weight: bold;">true</span>
            <span style="color: #339933;">}</span>
            listOfPrimes <span style="color: #339933;">=</span> append<span style="color: #339933;">(</span>listOfPrimes<span style="color: #339933;">,</span> <span style="">i</span><span style="color: #339933;">)</span>
        <span style="color: #339933;">}</span>
    <span style="color: #339933;">}</span>
&nbsp;
    <span style="color: #b1b100; font-weight: bold;">return</span> listOfPrimes
<span style="color: #339933;">}</span></pre>
      </td>
    </tr>
  </table>
</div>
]]></content>
		</item>
		
		<item>
			<title>Quick Tip for Debugging Headless Locally</title>
			<link>https://skarlso.github.io/2015/07/22/quick-tip-for-debugging-headless-locally/</link>
			<pubDate>Wed, 22 Jul 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/07/22/quick-tip-for-debugging-headless-locally/</guid>
			<description>If you are installing something with Packer and you have Headless enabled(and you are lazy and don&amp;#8217;t want to switch it off), it gets difficult, to see output.
Especially on a windows install the Answer File / Unattended install can be like =&amp;gt; Waiting for SSH&amp;#8230; for about an hour or two! If you are doing this locally fret not. Just start VirtualBox, and watch the Preview section which will display the current state even if it&amp;#8217;s a headless install!</description>
			<content type="html"><![CDATA[<p>If you are installing something with Packer and you have Headless enabled(and you are lazy and don&#8217;t want to switch it off), it gets difficult, to see output.</p>

<p>Especially on a windows install the Answer File / Unattended install can be like =&gt; Waiting for SSH&#8230; for about an hour or two! If you are doing this locally fret not. Just start VirtualBox, and watch the Preview section which will display the current state even if it&#8217;s a headless install!</p>

<p>It&#8217;s a small windows, but your can click on <strong>Show</strong> which will open the VM in a proper view.</p>

<p>Enjoy,
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Converting numbers into string representations</title>
			<link>https://skarlso.github.io/2015/07/19/converting-numbers-into-string-representations/</link>
			<pubDate>Sun, 19 Jul 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/07/19/converting-numbers-into-string-representations/</guid>
			<description>I quiet like this one. My first go program snippet without any peaking or googling. I&amp;#8217;m proud, though it could be improved with a bit of struct magic and such and such. And it only counts &amp;#8217;till 1000&amp;#8230;
  package main &amp;nbsp; import &#34;fmt&#34; &amp;nbsp; var words = map[int]string{1: &#34;one&#34;, 2: &#34;two&#34;, 3: &#34;three&#34;, 4: &#34;four&#34;, 5: &#34;five&#34;, 6: &#34;six&#34;, 7: &#34;seven&#34;, 8: &#34;eight&#34;, 9: &#34;nine&#34;, 10: &#34;ten&#34;, 11: &#34;</description>
			<content type="html"><![CDATA[<p>I quiet like this one. My first go program snippet without any peaking or googling. I&#8217;m proud, though it could be improved with a bit of struct magic and such and such. And it only counts &#8217;till 1000&#8230;</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="go" style="font-family:monospace;"><span style="color: #b1b100; font-weight: bold;">package</span> main
&nbsp;
<span style="color: #b1b100; font-weight: bold;">import</span> <span style="color: #cc66cc;">"fmt"</span>
&nbsp;
<span style="color: #b1b100; font-weight: bold;">var</span> words <span style="color: #339933;">=</span> <span style="color: #993333;">map</span><span style="color: #339933;">[</span><span style="color: #993333;">int</span><span style="color: #339933;">]</span><span style="color: #993333;">string</span><span style="color: #339933;">{</span><span style="color: #cc66cc;">1</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"one"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">2</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"two"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">3</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"three"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">4</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"four"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">5</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"five"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">6</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"six"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">7</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"seven"</span><span style="color: #339933;">,</span>
    <span style="color: #cc66cc;">8</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"eight"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">9</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"nine"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">10</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"ten"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">11</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"eleven"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">12</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"twelve"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">13</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"thirteen"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">14</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"fourteen"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">15</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"fifteen"</span><span style="color: #339933;">,</span>
    <span style="color: #cc66cc;">16</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"sixteen"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">17</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"seventeen"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">18</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"eighteen"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">19</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"nineteen"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">20</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"twenty"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">30</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"thirty"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">40</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"forty"</span><span style="color: #339933;">,</span>
    <span style="color: #cc66cc;">50</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"fifty"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">60</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"sixty"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">70</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"seventy"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">80</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"eighty"</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;">90</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"ninety"</span><span style="color: #339933;">}</span>
&nbsp;
<span style="color: #666666; font-style: italic;">// CountLetters count the letters in a long string number representation</span>
<span style="color: #993333;">func</span> CountLetters<span style="color: #339933;">(</span>limit <span style="color: #993333;">int</span><span style="color: #339933;">)</span> <span style="color: #339933;">{</span>
    myLongNumberString <span style="color: #339933;">:=</span> <span style="color: #cc66cc;">""</span>
    <span style="color: #b1b100; font-weight: bold;">for</span> <span style="">i</span> <span style="color: #339933;">:=</span> <span style="color: #cc66cc;">1</span><span style="color: #339933;">;</span> <span style="">i</span> &lt;<span style="color: #339933;">=</span> limit<span style="color: #339933;">;</span> <span style="">i</span><span style="color: #339933;">++</span> <span style="color: #339933;">{</span>
        addLettersToMyString<span style="color: #339933;">(</span>&myLongNumberString<span style="color: #339933;">,</span> <span style="">i</span><span style="color: #339933;">)</span>
    <span style="color: #339933;">}</span>
    <span style="color: #666666; font-style: italic;">// fmt.Println("1-9 written with letters is: ", len(myLongNumberString))</span>
    fmt<span style="color: #339933;">.</span><span style="">Println</span><span style="color: #339933;">(</span><span style="color: #cc66cc;">"The string is:"</span><span style="color: #339933;">,</span> myLongNumberString<span style="color: #339933;">)</span>
    fmt<span style="color: #339933;">.</span><span style="">Println</span><span style="color: #339933;">(</span><span style="color: #cc66cc;">"Lenght of string is:"</span><span style="color: #339933;">,</span> <span style="color: #000066;">len</span><span style="color: #339933;">(</span>myLongNumberString<span style="color: #339933;">))</span>
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #993333;">func</span> addLettersToMyString<span style="color: #339933;">(</span>myString <span style="color: #339933;">*</span><span style="color: #993333;">string</span><span style="color: #339933;">,</span> num <span style="color: #993333;">int</span><span style="color: #339933;">)</span> <span style="color: #339933;">{</span>
    <span style="color: #b1b100; font-weight: bold;">if</span> num &lt; <span style="color: #cc66cc;">20</span> <span style="color: #339933;">{</span>
        <span style="color: #339933;">*</span>myString <span style="color: #339933;">+=</span> words<span style="color: #339933;">[</span>num<span style="color: #339933;">]</span>
    <span style="color: #339933;">}</span>
&nbsp;
    <span style="color: #b1b100; font-weight: bold;">if</span> num &gt;<span style="color: #339933;">=</span> <span style="color: #cc66cc;">20</span> && num &lt; <span style="color: #cc66cc;">100</span> <span style="color: #339933;">{</span>
        <span style="color: #339933;">*</span>myString <span style="color: #339933;">+=</span> countMiddle<span style="color: #339933;">(</span>num<span style="color: #339933;">)</span>
    <span style="color: #339933;">}</span>
&nbsp;
    <span style="color: #b1b100; font-weight: bold;">if</span> num &gt;<span style="color: #339933;">=</span> <span style="color: #cc66cc;">100</span> && num &lt; <span style="color: #cc66cc;">1000</span> <span style="color: #339933;">{</span>
        hundred<span style="color: #339933;">,</span> tenth <span style="color: #339933;">:=</span> countHundred<span style="color: #339933;">(</span>num<span style="color: #339933;">)</span>
        <span style="color: #b1b100; font-weight: bold;">if</span> tenth <span style="color: #339933;">==</span> <span style="color: #cc66cc;"></span> <span style="color: #339933;">{</span>
            <span style="color: #339933;">*</span>myString <span style="color: #339933;">+=</span> hundred
        <span style="color: #339933;">}</span> <span style="color: #b1b100; font-weight: bold;">else</span> <span style="color: #b1b100; font-weight: bold;">if</span> tenth &gt;<span style="color: #339933;">=</span> <span style="color: #cc66cc;">11</span> && tenth &lt; <span style="color: #cc66cc;">20</span> <span style="color: #339933;">{</span>
            <span style="color: #339933;">*</span>myString <span style="color: #339933;">+=</span> hundred <span style="color: #339933;">+</span> <span style="color: #cc66cc;">"and"</span> <span style="color: #339933;">+</span> words<span style="color: #339933;">[</span>tenth<span style="color: #339933;">]</span>
        <span style="color: #339933;">}</span> <span style="color: #b1b100; font-weight: bold;">else</span> <span style="color: #339933;">{</span>
            <span style="color: #339933;">*</span>myString <span style="color: #339933;">+=</span> hundred <span style="color: #339933;">+</span> <span style="color: #cc66cc;">"and"</span> <span style="color: #339933;">+</span> countMiddle<span style="color: #339933;">(</span>tenth<span style="color: #339933;">)</span>
        <span style="color: #339933;">}</span>
&nbsp;
    <span style="color: #339933;">}</span>
&nbsp;
    <span style="color: #b1b100; font-weight: bold;">if</span> num <span style="color: #339933;">==</span> <span style="color: #cc66cc;">1000</span> <span style="color: #339933;">{</span>
        <span style="color: #339933;">*</span>myString <span style="color: #339933;">+=</span> <span style="color: #cc66cc;">"onethousand"</span>
    <span style="color: #339933;">}</span>
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #993333;">func</span> countMiddle<span style="color: #339933;">(</span>num <span style="color: #993333;">int</span><span style="color: #339933;">)</span> <span style="color: #993333;">string</span> <span style="color: #339933;">{</span>
    minues <span style="color: #339933;">:=</span> num <span style="color: #339933;">%</span> <span style="color: #cc66cc;">10</span>
    num <span style="color: #339933;">-=</span> minues
    <span style="color: #b1b100; font-weight: bold;">return</span> words<span style="color: #339933;">[</span>num<span style="color: #339933;">]</span> <span style="color: #339933;">+</span> words<span style="color: #339933;">[</span>minues<span style="color: #339933;">]</span>
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #993333;">func</span> countHundred<span style="color: #339933;">(</span>num <span style="color: #993333;">int</span><span style="color: #339933;">)</span> <span style="color: #339933;">(</span><span style="color: #993333;">string</span><span style="color: #339933;">,</span> <span style="color: #993333;">int</span><span style="color: #339933;">)</span> <span style="color: #339933;">{</span>
    minues <span style="color: #339933;">:=</span> num <span style="color: #339933;">%</span> <span style="color: #cc66cc;">100</span>
    num <span style="color: #339933;">-=</span> minues
    <span style="color: #b1b100; font-weight: bold;">return</span> <span style="color: #339933;">(</span>words<span style="color: #339933;">[(</span>num<span style="color: #339933;">/</span><span style="color: #cc66cc;">100</span><span style="color: #339933;">)]</span> <span style="color: #339933;">+</span> <span style="color: #cc66cc;">"hundred"</span><span style="color: #339933;">),</span> minues
<span style="color: #339933;">}</span></pre>
      </td>
    </tr>
  </table>
</div>
]]></content>
		</item>
		
		<item>
			<title>Selenium Testing with Packer and Vagrant</title>
			<link>https://skarlso.github.io/2015/07/16/selenium-testing-with-packer-and-vagrant/</link>
			<pubDate>Thu, 16 Jul 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/07/16/selenium-testing-with-packer-and-vagrant/</guid>
			<description>&lt;p&gt;So, recently, the tester team talked to me, that their build takes too long, and why is that? A quick look at their configuration and build scripts showed me, that they are actually using a vagrant box, which never gets destroyed or re-started at least. To remedy this problem, I came up with the following solution&amp;#8230;&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>So, recently, the tester team talked to me, that their build takes too long, and why is that? A quick look at their configuration and build scripts showed me, that they are actually using a vagrant box, which never gets destroyed or re-started at least. To remedy this problem, I came up with the following solution&#8230;</p>

<h1 id="same-old-8230">Same old&#8230;</h1>

<p>Same as in my previous post, we are going to build a Windows Machine for this purpose. The only addition to my previous settings, will be some Java install, downloading selenium and installing Chrome, and Firefox.</p>

<h1 id="installation">Installation</h1>

<h4 id="answer-file">Answer File</h4>

<p>Here is the configuration and setup of Windows before the provision phase.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="xml" style="font-family:monospace;">...
               <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;SynchronousCommand</span> <span style="color: #000066;">wcm:action</span>=<span style="color: #ff0000;">"add"</span><span style="color: #000000; font-weight: bold;">&gt;</span></span>
                  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;CommandLine<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>cmd.exe /c C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -File a:\jdk_inst.ps1 -AutoStart<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/CommandLine<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
                  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;Description<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>Install Java<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/Description<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
                  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;Order<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>103<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/Order<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
                  <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;RequiresUserInput<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>true<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/RequiresUserInput<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
               <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/SynchronousCommand<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
...</pre>
      </td>
    </tr>
  </table>
</div>

<p>This is the part were I&#8217;m installing Java. The script for the jdk_inst.ps1 is in my previous post, but I&#8217;ll paste it here for ease of read.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="powershell" style="font-family:monospace;"><span style="color: #0000FF;">function</span> LogWrite <span style="color: #000000;">&#123;</span>
   <span style="color: #0000FF;">Param</span> <span style="color: #000000;">&#40;</span><span style="color: #000000;">&#91;</span><span style="color: #008080;">string</span><span style="color: #000000;">&#93;</span><span style="color: #800080;">$logstring</span><span style="color: #000000;">&#41;</span>
   <span style="color: #800080;">$now</span> <span style="color: pink;">=</span> <span style="color: #008080; font-weight: bold;">Get-Date</span> <span style="color: #008080; font-style: italic;">-format</span> s
   <span style="color: #008080; font-weight: bold;">Add-Content</span> <span style="color: #800080;">$Logfile</span> <span style="color: #008080; font-style: italic;">-value</span> <span style="color: #800000;">"$now $logstring"</span>
   <span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800080;">$logstring</span>
<span style="color: #000000;">&#125;</span>
&nbsp;
<span style="color: #800080;">$Logfile</span> <span style="color: pink;">=</span> <span style="color: #800000;">"C:\Windows\Temp\jdk-install.log"</span>
&nbsp;
<span style="color: #800080;">$JDK_VER</span><span style="color: pink;">=</span><span style="color: #800000;">"7u75"</span>
<span style="color: #800080;">$JDK_FULL_VER</span><span style="color: pink;">=</span><span style="color: #800000;">"7u75-b13"</span>
<span style="color: #800080;">$JDK_PATH</span><span style="color: pink;">=</span><span style="color: #800000;">"1.7.0_75"</span>
<span style="color: #800080;">$source86</span> <span style="color: pink;">=</span> <span style="color: #800000;">"http://download.oracle.com/otn-pub/java/jdk/$JDK_FULL_VER/jdk-$JDK_VER-windows-i586.exe"</span>
<span style="color: #800080;">$source64</span> <span style="color: pink;">=</span> <span style="color: #800000;">"http://download.oracle.com/otn-pub/java/jdk/$JDK_FULL_VER/jdk-$JDK_VER-windows-x64.exe"</span>
<span style="color: #800080;">$destination86</span> <span style="color: pink;">=</span> <span style="color: #800000;">"C:\Windows\Temp\$JDK_VER-x86.exe"</span>
<span style="color: #800080;">$destination64</span> <span style="color: pink;">=</span> <span style="color: #800000;">"C:\Windows\Temp\$JDK_VER-x64.exe"</span>
<span style="color: #800080;">$client</span> <span style="color: pink;">=</span> <span style="color: #008080; font-weight: bold;">new-object</span> System.Net.WebClient
<span style="color: #800080;">$cookie</span> <span style="color: pink;">=</span> <span style="color: #800000;">"oraclelicense=accept-securebackup-cookie"</span>
<span style="color: #800080;">$client</span>.Headers.Add<span style="color: #000000;">&#40;</span><span style="color: #000000;">&#91;</span>System.Net.HttpRequestHeader<span style="color: #000000;">&#93;</span>::Cookie<span style="color: pink;">,</span> <span style="color: #800080;">$cookie</span><span style="color: #000000;">&#41;</span>
&nbsp;
LogWrite <span style="color: #800000;">"Setting Execution Policy level to Bypass"</span>
<span style="color: #008080; font-weight: bold;">Set-ExecutionPolicy</span> <span style="color: #008080; font-style: italic;">-Scope</span> CurrentUser <span style="color: #008080; font-style: italic;">-ExecutionPolicy</span> Bypass <span style="color: #008080; font-style: italic;">-Force</span>
&nbsp;
LogWrite <span style="color: #800000;">'Checking if Java is already installed'</span>
<span style="color: #0000FF;">if</span> <span style="color: #000000;">&#40;</span><span style="color: #000000;">&#40;</span><span style="color: #008080; font-weight: bold;">Test-Path</span> <span style="color: #800000;">"c:\Program Files (x86)\Java"</span><span style="color: #000000;">&#41;</span> <span style="color: #FF0000;">-Or</span> <span style="color: #000000;">&#40;</span><span style="color: #008080; font-weight: bold;">Test-Path</span> <span style="color: #800000;">"c:\Program Files\Java"</span><span style="color: #000000;">&#41;</span><span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#123;</span>
    LogWrite <span style="color: #800000;">'No need to Install Java'</span>
    Exit
<span style="color: #000000;">&#125;</span>
&nbsp;
LogWrite <span style="color: #800000;">'Downloading x86 to $destination86'</span>
try <span style="color: #000000;">&#123;</span>
  <span style="color: #800080;">$client</span>.downloadFile<span style="color: #000000;">&#40;</span><span style="color: #800080;">$source86</span><span style="color: pink;">,</span> <span style="color: #800080;">$destination86</span><span style="color: #000000;">&#41;</span>
  <span style="color: #0000FF;">if</span> <span style="color: #000000;">&#40;</span><span style="color: pink;">!</span><span style="color: #000000;">&#40;</span><span style="color: #008080; font-weight: bold;">Test-Path</span> <span style="color: #800080;">$destination86</span><span style="color: #000000;">&#41;</span><span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#123;</span>
      LogWrite <span style="color: #800000;">"Downloading $destination86 failed"</span>
      Exit
  <span style="color: #000000;">&#125;</span>
  LogWrite <span style="color: #800000;">'Downloading x64 to $destination64'</span>
&nbsp;
  <span style="color: #800080;">$client</span>.downloadFile<span style="color: #000000;">&#40;</span><span style="color: #800080;">$source64</span><span style="color: pink;">,</span> <span style="color: #800080;">$destination64</span><span style="color: #000000;">&#41;</span>
  <span style="color: #0000FF;">if</span> <span style="color: #000000;">&#40;</span><span style="color: pink;">!</span><span style="color: #000000;">&#40;</span><span style="color: #008080; font-weight: bold;">Test-Path</span> <span style="color: #800080;">$destination64</span><span style="color: #000000;">&#41;</span><span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#123;</span>
      LogWrite <span style="color: #800000;">"Downloading $destination64 failed"</span>
      Exit
  <span style="color: #000000;">&#125;</span>
<span style="color: #000000;">&#125;</span> catch <span style="color: #000000;">&#91;</span>Exception<span style="color: #000000;">&#93;</span> <span style="color: #000000;">&#123;</span>
  LogWrite <span style="color: #800000;">'$_.Exception is'</span> <span style="color: #000080;">$_</span>.Exception
<span style="color: #000000;">&#125;</span>
&nbsp;
try <span style="color: #000000;">&#123;</span>
    LogWrite <span style="color: #800000;">'Installing JDK-x64'</span>
    <span style="color: #800080;">$proc1</span> <span style="color: pink;">=</span> Start<span style="color: pink;">-</span>Process <span style="color: #008080; font-style: italic;">-FilePath</span> <span style="color: #800000;">"$destination64"</span> <span style="color: #008080; font-style: italic;">-ArgumentList</span> <span style="color: #800000;">"/s REBOOT=ReallySuppress"</span> <span style="color: #008080; font-style: italic;">-Wait</span> <span style="color: #008080; font-style: italic;">-PassThru</span>
    <span style="color: #800080;">$proc1</span>.waitForExit<span style="color: #000000;">&#40;</span><span style="color: #000000;">&#41;</span>
    LogWrite <span style="color: #800000;">'Installation Done.'</span>
&nbsp;
    LogWrite <span style="color: #800000;">'Installing JDK-x86'</span>
    <span style="color: #800080;">$proc2</span> <span style="color: pink;">=</span> Start<span style="color: pink;">-</span>Process <span style="color: #008080; font-style: italic;">-FilePath</span> <span style="color: #800000;">"$destination86"</span> <span style="color: #008080; font-style: italic;">-ArgumentList</span> <span style="color: #800000;">"/s REBOOT=ReallySuppress"</span> <span style="color: #008080; font-style: italic;">-Wait</span> <span style="color: #008080; font-style: italic;">-PassThru</span>
    <span style="color: #800080;">$proc2</span>.waitForExit<span style="color: #000000;">&#40;</span><span style="color: #000000;">&#41;</span>
    LogWrite <span style="color: #800000;">'Installtion Done.'</span>
<span style="color: #000000;">&#125;</span> catch <span style="color: #000000;">&#91;</span>exception<span style="color: #000000;">&#93;</span> <span style="color: #000000;">&#123;</span>
    LogWrite <span style="color: #800000;">'$_ is'</span> <span style="color: #000080;">$_</span>
    LogWrite <span style="color: #800000;">'$_.GetType().FullName is'</span> <span style="color: #000080;">$_</span>.GetType<span style="color: #000000;">&#40;</span><span style="color: #000000;">&#41;</span>.FullName
    LogWrite <span style="color: #800000;">'$_.Exception is'</span> <span style="color: #000080;">$_</span>.Exception
    LogWrite <span style="color: #800000;">'$_.Exception.GetType().FullName is'</span> <span style="color: #000080;">$_</span>.Exception.GetType<span style="color: #000000;">&#40;</span><span style="color: #000000;">&#41;</span>.FullName
    LogWrite <span style="color: #800000;">'$_.Exception.Message is'</span> <span style="color: #000080;">$_</span>.Exception.Message
<span style="color: #000000;">&#125;</span>
&nbsp;
<span style="color: #0000FF;">if</span> <span style="color: #000000;">&#40;</span><span style="color: #000000;">&#40;</span><span style="color: #008080; font-weight: bold;">Test-Path</span> <span style="color: #800000;">"c:\Program Files (x86)\Java"</span><span style="color: #000000;">&#41;</span> <span style="color: #FF0000;">-Or</span> <span style="color: #000000;">&#40;</span><span style="color: #008080; font-weight: bold;">Test-Path</span> <span style="color: #800000;">"c:\Program Files\Java"</span><span style="color: #000000;">&#41;</span><span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#123;</span>
    LogWrite <span style="color: #800000;">'Java installed successfully.'</span>
<span style="color: #000000;">&#125;</span> <span style="color: #0000FF;">else</span> <span style="color: #000000;">&#123;</span>
    LogWrite <span style="color: #800000;">'Java install Failed!'</span>
<span style="color: #000000;">&#125;</span>
LogWrite <span style="color: #800000;">'Setting up Path variables.'</span>
<span style="color: #000000;">&#91;</span>System.Environment<span style="color: #000000;">&#93;</span>::SetEnvironmentVariable<span style="color: #000000;">&#40;</span><span style="color: #800000;">"JAVA_HOME"</span><span style="color: pink;">,</span> <span style="color: #800000;">"c:\Program Files (x86)\Java\jdk$JDK_PATH"</span><span style="color: pink;">,</span> <span style="color: #800000;">"Machine"</span><span style="color: #000000;">&#41;</span>
<span style="color: #000000;">&#91;</span>System.Environment<span style="color: #000000;">&#93;</span>::SetEnvironmentVariable<span style="color: #000000;">&#40;</span><span style="color: #800000;">"PATH"</span><span style="color: pink;">,</span> <span style="color: #800080;">$Env</span>:Path <span style="color: pink;">+</span> <span style="color: #800000;">";c:\Program Files (x86)\Java\jdk$JDK_PATH\bin"</span><span style="color: pink;">,</span> <span style="color: #800000;">"Machine"</span><span style="color: #000000;">&#41;</span>
LogWrite <span style="color: #800000;">'Done. Goodbye.'</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>This installs both x86 and 64 bit version of Java.</p>

<h1 id="provision">Provision</h1>

<p>I decided to put these into the provision phase to get log messages written out properly. Because in the unattended file, you can&#8217;t see any progress.</p>

<h4 id="chrome-and-firefox">Chrome And Firefox</h4>

<p>Installing these two proved a little bit more difficult. Chrome didn&#8217;t really like me to download their installer without accepting something first, like Java. Luckily, after a LOT of digging, I found a chrome installer which lets you install silently. Here is the script to install the two.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="powershell" style="font-family:monospace;"><span style="color: #0000FF;">function</span> LogWrite <span style="color: #000000;">&#123;</span>
    <span style="color: #0000FF;">Param</span> <span style="color: #000000;">&#40;</span><span style="color: #000000;">&#91;</span><span style="color: #008080;">string</span><span style="color: #000000;">&#93;</span><span style="color: #800080;">$logstring</span><span style="color: #000000;">&#41;</span>
    <span style="color: #800080;">$now</span> <span style="color: pink;">=</span> <span style="color: #008080; font-weight: bold;">Get-Date</span> <span style="color: #008080; font-style: italic;">-format</span> s
    <span style="color: #008080; font-weight: bold;">Add-Content</span> <span style="color: #800080;">$Logfile</span> <span style="color: #008080; font-style: italic;">-value</span> <span style="color: #800000;">"$now $logstring"</span>
    <span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800080;">$logstring</span>
<span style="color: #000000;">&#125;</span>
&nbsp;
<span style="color: #0000FF;">function</span> CheckLocation <span style="color: #000000;">&#123;</span>
    <span style="color: #0000FF;">Param</span> <span style="color: #000000;">&#40;</span><span style="color: #000000;">&#91;</span><span style="color: #008080;">string</span><span style="color: #000000;">&#93;</span><span style="color: #800080;">$location</span><span style="color: #000000;">&#41;</span>
    <span style="color: #0000FF;">if</span> <span style="color: #000000;">&#40;</span><span style="color: pink;">!</span><span style="color: #000000;">&#40;</span><span style="color: #008080; font-weight: bold;">Test-Path</span>  <span style="color: #800080;">$location</span><span style="color: #000000;">&#41;</span><span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#123;</span>
        <span style="color: #0000FF;">throw</span> <span style="color: #000000;">&#91;</span>System.IO.FileNotFoundException<span style="color: #000000;">&#93;</span> <span style="color: #800000;">"Could not download to Destination $location."</span>
    <span style="color: #000000;">&#125;</span>
<span style="color: #000000;">&#125;</span>
&nbsp;
<span style="color: #800080;">$Logfile</span> <span style="color: pink;">=</span> <span style="color: #800000;">"C:\Windows\Temp\chrome-firefox-install.log"</span>
&nbsp;
<span style="color: #800080;">$chrome_source</span> <span style="color: pink;">=</span> <span style="color: #800000;">"http://dl.google.com/chrome/install/375.126/chrome_installer.exe"</span>
<span style="color: #800080;">$chrome_destination</span> <span style="color: pink;">=</span> <span style="color: #800000;">"C:\Windows\Temp\chrome_installer.exe"</span>
<span style="color: #800080;">$firefox_source</span> <span style="color: pink;">=</span> <span style="color: #800000;">"https://download-installer.cdn.mozilla.net/pub/firefox/releases/39.0/win32/hu/Firefox%20Setup%2039.0.exe"</span>
<span style="color: #800080;">$firefox_destination</span> <span style="color: pink;">=</span> <span style="color: #800000;">"C:\Windows\Temp\firefoxinstaller.exe"</span>
&nbsp;
LogWrite <span style="color: #800000;">'Starting to download files.'</span>
try <span style="color: #000000;">&#123;</span>
    LogWrite <span style="color: #800000;">'Downloading Chrome...'</span>
    <span style="color: #000000;">&#40;</span><span style="color: #008080; font-weight: bold;">New-Object</span> System.Net.WebClient<span style="color: #000000;">&#41;</span>.DownloadFile<span style="color: #000000;">&#40;</span><span style="color: #800080;">$chrome_source</span><span style="color: pink;">,</span> <span style="color: #800080;">$chrome_destination</span><span style="color: #000000;">&#41;</span>
    CheckLocation <span style="color: #800080;">$chrome_destination</span>
    LogWrite <span style="color: #800000;">'Done...'</span>
    LogWrite <span style="color: #800000;">'Downloading Firefox...'</span>
    <span style="color: #000000;">&#40;</span><span style="color: #008080; font-weight: bold;">New-Object</span> System.Net.WebClient<span style="color: #000000;">&#41;</span>.DownloadFile<span style="color: #000000;">&#40;</span><span style="color: #800080;">$firefox_source</span><span style="color: pink;">,</span> <span style="color: #800080;">$firefox_destination</span><span style="color: #000000;">&#41;</span>
    CheckLocation <span style="color: #800080;">$firefox_destination</span>
<span style="color: #000000;">&#125;</span> catch <span style="color: #000000;">&#91;</span>Exception<span style="color: #000000;">&#93;</span> <span style="color: #000000;">&#123;</span>
    LogWrite <span style="color: #800000;">"Exception during download. Probable cause could be that the directory or the file didn't exist."</span>
    LogWrite <span style="color: #800000;">'$_.Exception is'</span> <span style="color: #000080;">$_</span>.Exception
<span style="color: #000000;">&#125;</span>
&nbsp;
LogWrite <span style="color: #800000;">'Starting firefox install process.'</span>
try <span style="color: #000000;">&#123;</span>
    Start<span style="color: pink;">-</span>Process <span style="color: #008080; font-style: italic;">-FilePath</span> <span style="color: #800080;">$firefox_destination</span> <span style="color: #008080; font-style: italic;">-ArgumentList</span> <span style="color: #800000;">"-ms"</span> <span style="color: #008080; font-style: italic;">-Wait</span> <span style="color: #008080; font-style: italic;">-PassThru</span>
<span style="color: #000000;">&#125;</span> catch <span style="color: #000000;">&#91;</span>Exception<span style="color: #000000;">&#93;</span> <span style="color: #000000;">&#123;</span>
    LogWrite <span style="color: #800000;">'Exception during install process.'</span>
    LogWrite <span style="color: #800000;">'$_.Exception is'</span> <span style="color: #000080;">$_</span>.Exception
<span style="color: #000000;">&#125;</span>
LogWrite <span style="color: #800000;">'Starting chrome install process.'</span>
&nbsp;
try <span style="color: #000000;">&#123;</span>
    Start<span style="color: pink;">-</span>Process <span style="color: #008080; font-style: italic;">-FilePath</span> <span style="color: #800080;">$chrome_destination</span> <span style="color: #008080; font-style: italic;">-ArgumentList</span> <span style="color: #800000;">"/silent /install"</span> <span style="color: #008080; font-style: italic;">-Wait</span> <span style="color: #008080; font-style: italic;">-PassThru</span>
<span style="color: #000000;">&#125;</span> catch <span style="color: #000000;">&#91;</span>Exception<span style="color: #000000;">&#93;</span> <span style="color: #000000;">&#123;</span>
    LogWrite <span style="color: #800000;">'Exception during install process.'</span>
    LogWrite <span style="color: #800000;">'$_.Exception is'</span> <span style="color: #000080;">$_</span>.Exception
<span style="color: #000000;">&#125;</span>
&nbsp;
LogWrite <span style="color: #800000;">'All done. Goodbye.'</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>They both install silently. Pretty neat.</p>

<h4 id="selenium">Selenium</h4>

<p>This only has to be downloaded, so this is pretty simple. Vagrant will handle the startup of course when it does a vagrant up.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="powershell" style="font-family:monospace;"><span style="color: #0000FF;">function</span> LogWrite <span style="color: #000000;">&#123;</span>
   <span style="color: #0000FF;">Param</span> <span style="color: #000000;">&#40;</span><span style="color: #000000;">&#91;</span><span style="color: #008080;">string</span><span style="color: #000000;">&#93;</span><span style="color: #800080;">$logstring</span><span style="color: #000000;">&#41;</span>
   <span style="color: #800080;">$now</span> <span style="color: pink;">=</span> <span style="color: #008080; font-weight: bold;">Get-Date</span> <span style="color: #008080; font-style: italic;">-format</span> s
   <span style="color: #008080; font-weight: bold;">Add-Content</span> <span style="color: #800080;">$Logfile</span> <span style="color: #008080; font-style: italic;">-value</span> <span style="color: #800000;">"$now $logstring"</span>
   <span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800080;">$logstring</span>
<span style="color: #000000;">&#125;</span>
&nbsp;
<span style="color: #800080;">$Logfile</span> <span style="color: pink;">=</span> <span style="color: #800000;">"C:\Windows\Temp\selenium-install.log"</span>
&nbsp;
<span style="color: #800080;">$source</span> <span style="color: pink;">=</span> <span style="color: #800000;">"http://selenium-release.storage.googleapis.com/2.46/selenium-server-standalone-2.46.0.jar"</span>
<span style="color: #800080;">$destination</span> <span style="color: pink;">=</span> <span style="color: #800000;">"C:\Windows\Temp\selenium-server.jar"</span>
LogWrite <span style="color: #800000;">'Starting to download selenium file.'</span>
try <span style="color: #000000;">&#123;</span>
  <span style="color: #000000;">&#40;</span><span style="color: #008080; font-weight: bold;">New-Object</span> System.Net.WebClient<span style="color: #000000;">&#41;</span>.DownloadFile<span style="color: #000000;">&#40;</span><span style="color: #800080;">$source</span><span style="color: pink;">,</span> <span style="color: #800080;">$destination</span><span style="color: #000000;">&#41;</span>
<span style="color: #000000;">&#125;</span> catch <span style="color: #000000;">&#91;</span>Exception<span style="color: #000000;">&#93;</span> <span style="color: #000000;">&#123;</span>
  LogWrite <span style="color: #800000;">"Exception during download. Probable cause could be that the directory or the file didn't exist."</span>
  LogWrite <span style="color: #800000;">'$_.Exception is'</span> <span style="color: #000080;">$_</span>.Exception
<span style="color: #000000;">&#125;</span>
LogWrite <span style="color: #800000;">'Download done. Checking if file exists.'</span>
<span style="color: #0000FF;">if</span> <span style="color: #000000;">&#40;</span><span style="color: pink;">!</span><span style="color: #000000;">&#40;</span><span style="color: #008080; font-weight: bold;">Test-Path</span> <span style="color: #800080;">$destination</span><span style="color: #000000;">&#41;</span><span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#123;</span>
  LogWrite <span style="color: #800000;">'Downloading dotnet Failed!'</span>
<span style="color: #000000;">&#125;</span> <span style="color: #0000FF;">else</span> <span style="color: #000000;">&#123;</span>
  LogWrite <span style="color: #800000;">'Download successful.'</span>
<span style="color: #000000;">&#125;</span>
&nbsp;
LogWrite <span style="color: #800000;">'All done. Goodbye.'</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Straightforward.</p>

<h4 id="the-packer-json-file">The Packer Json File</h4>

<p>So putting this all together, here is the Packer JSON file for this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="json" style="font-family:monospace;">{
      "variables": {
      "vm_name": "win7x64selenium",
      "output_dir": "output_win7_x64_selenium",
      "vagrant_box_output": "box_output",
      "cpu_number": "2",
      "memory_size": "4096",
      "machine_type": "pc-1.2",
      "accelerator": "kvm",
      "disk_format": "qcow2",
      "disk_interface": "virtio",
      "net_device": "virtio-net",
      "cpu_model": "host",
      "disk_cache": "writeback",
      "disk_io": "native"
   },
&nbsp;
  "builders": [
    {
      "type": "virtualbox-iso",
      "iso_url": "/home/user/vms/windows7.iso",
      "iso_checksum_type": "sha1",
      "iso_checksum": "0BCFC54019EA175B1EE51F6D2B207A3D14DD2B58",
      "headless": true,
      "boot_wait": "2m",
      "ssh_username": "vagrant",
      "ssh_password": "vagrant",
      "ssh_wait_timeout": "8h",
      "shutdown_command": "shutdown /s /t 10 /f /d p:4:1 /c \"Packer Shutdown\"",
      "guest_os_type": "Windows7_64",
      "disk_size": 61440,
      "floppy_files": [
        "./answer_files/7-selenium/Autounattend.xml",
        "./scripts/dis-updates.ps1",
        "./scripts/microsoft-updates.bat",
        "./scripts/openssh.ps1",
        "./scripts/jdk_inst.ps1"
      ],
      "vboxmanage": [
        [
          "modifyvm",
          "{{.Name}}",
          "--memory",
          "{{user `memory_size`}}"
        ],
        [
          "modifyvm",
          "{{.Name}}",
          "--cpus",
          "{{user `cpu_number`}}"
        ]
      ]
    }
  ],
  "provisioners": [
    {
      "type": "powershell",
      "scripts" : [
        "./scripts/install-selenium-server.ps1",
        "./scripts/install-chrome-firefox.ps1"
      ]
    },{
      "type": "shell",
      "remote_path": "/tmp/script.bat",
      "execute_command": "{{.Vars}} cmd /c C:/Windows/Temp/script.bat",
      "scripts": [
        "./scripts/vm-guest-tools.bat",
        "./scripts/vagrant-ssh.bat",
        "./scripts/rsync.bat",
        "./scripts/enable-rdp.bat"
      ]
    }
  ],
    "post-processors": [
    {
      "type": "vagrant",
      "keep_input_artifact": false,
      "output": "{{user `vm_name`}}_{{.Provider}}.box",
      "vagrantfile_template": "vagrantfile-template"
    }
    ]
}</pre>
      </td>
    </tr>
  </table>
</div>

<h4 id="additional-software">Additional Software</h4>

<p>This is not done here. Obviously, in order to test your stuff, you first need to install your software on this box. Ideally, everything you need should be in the code you clone to this box, and should be contained mostly. And your application deployment should take core of that. But, if you require something like a DB, postgres, oracle, whatnot, than this is the place where you would install all that.</p>

<h1 id="vagrant-and-using-the-packer-box">Vagrant and Using the Packer Box</h1>

<p>Now, this has been interesting so far, but how do you actually go about using this image? That&#8217;s the real question now, isn&#8217;t it? Having a box, just sitting on a shared folder, doesn&#8217;t do you too much good. So let&#8217;s create a Jenkins job, which utilizes this box in a job which runs a bunch of tests for some application.</p>

<h4 id="vagrantfile">Vagrantfile</h4>

<p>Your vagrant file, could either be generated automatically, under source control ( which is preferred ) or sitting somewhere entirely elsewhere. In any case, it would look something like this.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="ruby" style="font-family:monospace;"><span style="color:#008000; font-style:italic;"># -*- mode: ruby -*-</span>
<span style="color:#008000; font-style:italic;"># vi: set ft=ruby :</span>
&nbsp;
VAGRANTFILE_API_VERSION = <span style="color:#996600;">"2"</span>
&nbsp;
Vagrant.<span style="color:#9900CC;">configure</span><span style="color:#006600; font-weight:bold;">&#40;</span>VAGRANTFILE_API_VERSION<span style="color:#006600; font-weight:bold;">&#41;</span> <span style="color:#9966CC; font-weight:bold;">do</span> <span style="color:#006600; font-weight:bold;">|</span>config<span style="color:#006600; font-weight:bold;">|</span>
&nbsp;
  config.<span style="color:#9900CC;">vm</span>.<span style="color:#9900CC;">provider</span> <span style="color:#996600;">"virtualbox"</span>
&nbsp;
  config.<span style="color:#9900CC;">vm</span>.<span style="color:#9900CC;">define</span> <span style="color:#996600;">"selenium-box"</span> <span style="color:#9966CC; font-weight:bold;">do</span> <span style="color:#006600; font-weight:bold;">|</span>vs2013<span style="color:#006600; font-weight:bold;">|</span>
    vs2013.<span style="color:#9900CC;">vm</span>.<span style="color:#9900CC;">box</span> = <span style="color:#996600;">"windows7-x64-04-selenium"</span>
    vs2013.<span style="color:#9900CC;">vm</span>.<span style="color:#9900CC;">box_url</span> = <span style="color:#996600;">"path/to/your/share/win7x64_selenium_virtualbox.box"</span>
  <span style="color:#9966CC; font-weight:bold;">end</span>
&nbsp;
  config.<span style="color:#9900CC;">env</span>.<span style="color:#9900CC;">enable</span>
&nbsp;
  config.<span style="color:#9900CC;">vm</span>.<span style="color:#9900CC;">guest</span> = <span style="color:#ff3333; font-weight:bold;">:windows</span>
  config.<span style="color:#9900CC;">vm</span>.<span style="color:#9900CC;">communicator</span> = <span style="color:#996600;">"winrm"</span>
  config.<span style="color:#9900CC;">winrm</span>.<span style="color:#9900CC;">username</span> = <span style="color:#996600;">"vagrant"</span>
  config.<span style="color:#9900CC;">winrm</span>.<span style="color:#9900CC;">password</span> = <span style="color:#996600;">"vagrant"</span>
  config.<span style="color:#9900CC;">windows</span>.<span style="color:#9900CC;">set_work_network</span> = <span style="color:#0000FF; font-weight:bold;">true</span>
  config.<span style="color:#9900CC;">vm</span>.<span style="color:#9900CC;">network</span> <span style="color:#ff3333; font-weight:bold;">:forwarded_port</span>, guest: <span style="color:#006666;">3389</span>, host: ENV<span style="color:#006600; font-weight:bold;">&#91;</span><span style="color:#996600;">'RDESKTOP_PORT'</span><span style="color:#006600; font-weight:bold;">&#93;</span>, host_ip: <span style="color:#996600;">"0.0.0.0"</span>
  config.<span style="color:#9900CC;">vm</span>.<span style="color:#9900CC;">network</span> <span style="color:#ff3333; font-weight:bold;">:forwarded_port</span>, guest: <span style="color:#006666;">5985</span>, host: <span style="color:#006666;">5985</span>, id: <span style="color:#996600;">"winrm"</span>, auto_correct: <span style="color:#0000FF; font-weight:bold;">true</span>, host_ip: <span style="color:#996600;">"0.0.0.0"</span>
  config.<span style="color:#9900CC;">vm</span>.<span style="color:#9900CC;">network</span> <span style="color:#ff3333; font-weight:bold;">:forwarded_port</span>, guest: <span style="color:#006666;">9991</span>, host: <span style="color:#006666;">9991</span>, id: <span style="color:#996600;">"selenium"</span>, auto_correct: <span style="color:#0000FF; font-weight:bold;">true</span>, host_ip: <span style="color:#996600;">"0.0.0.0"</span>
  config.<span style="color:#9900CC;">vm</span>.<span style="color:#9900CC;">provider</span> <span style="color:#ff3333; font-weight:bold;">:virtualbox</span> <span style="color:#9966CC; font-weight:bold;">do</span> <span style="color:#006600; font-weight:bold;">|</span>vbox<span style="color:#006600; font-weight:bold;">|</span>
    vbox.<span style="color:#9900CC;">gui</span> = <span style="color:#0000FF; font-weight:bold;">false</span>
    vbox.<span style="color:#9900CC;">memory</span> = <span style="color:#006666;">4096</span>
    vbox.<span style="color:#9900CC;">cpus</span> = <span style="color:#006666;">2</span>
  <span style="color:#9966CC; font-weight:bold;">end</span>
&nbsp;
&nbsp;
  config.<span style="color:#9900CC;">winrm</span>.<span style="color:#9900CC;">max_tries</span> = <span style="color:#006666;">10</span>
  config.<span style="color:#9900CC;">vm</span>.<span style="color:#9900CC;">synced_folder</span> <span style="color:#996600;">"."</span>, <span style="color:#996600;">"/vagrant"</span>, type: <span style="color:#996600;">"rsync"</span>
  config.<span style="color:#9900CC;">vm</span>.<span style="color:#9900CC;">provision</span> <span style="color:#996600;">"shell"</span>, path: <span style="color:#996600;">"init.bat"</span>
  config.<span style="color:#9900CC;">vm</span>.<span style="color:#9900CC;">provision</span> <span style="color:#996600;">"shell"</span>, path: <span style="color:#996600;">"utils_inst.bat"</span>
  config.<span style="color:#9900CC;">vm</span>.<span style="color:#9900CC;">provision</span> <span style="color:#996600;">"shell"</span>, path: <span style="color:#996600;">"jenkins_reg.ps1"</span>
  config.<span style="color:#9900CC;">vm</span>.<span style="color:#9900CC;">provision</span> <span style="color:#996600;">"shell"</span>, path: <span style="color:#996600;">"start_selenium.bat"</span>
<span style="color:#9966CC; font-weight:bold;">end</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Easy, no? Here is the script to start selenium.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="batch" style="font-family:monospace;">    java -jar c:\Windows\Temp\selenium-server.jar -Dhttp.proxyPort=9991</pre>
      </td>
    </tr>
  </table>
</div>

<p>Straight forward. We also are forwarding the port on which Selenium is running in order for the test to see it.</p>

<h4 id="the-jenkins-job">The Jenkins Job</h4>

<p>The job can be anything. This is actually too large to cover here. It could be a gradle job, a maven job, an ant, a nant &#8211; or whatever is running the test -, job; it&#8217;s up to you.</p>

<p>Just make sure that before the test runs, do a <strong>vagrant up</strong> and after the test finishes, in an ALWAYS TO BE EXECUTED HOOK -like gradle&#8217;s finalizedBy , call a <strong>vagrant destroy</strong>. This way, your test will always run on a clean instance that has the necessary stuff on it.</p>

<h1 id="closing-words">Closing words</h1>

<p>So, there you have it. It&#8217;s relatively simple. Tying this all into your infrastructure might prove difficult though depending on how rigid your deployment is. But it will always help you make your tests a bit more robust.</p>

<p>Also, you could run the whole deployment and test phase on a vagrant box, from the start, which is tied to jenkins as a slave and gets started when the job starts and destroyed when the job ends. That way you wouldn&#8217;t have to create a, box in a box running on a box, kind of effect.</p>

<p>Thanks for reading,</p>

<p>Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>Bitwise &amp; Operator</title>
			<link>https://skarlso.github.io/2015/07/15/bitwise-operator/</link>
			<pubDate>Wed, 15 Jul 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/07/15/bitwise-operator/</guid>
			<description>The first, and only time so far, that I got to use the bitwise &amp;amp; operator. I enjoyed doing so!!
And of course from now on, I&amp;#8217;ll be looking for more opportunities to (ab)use it.
  package secret &amp;nbsp; import &#34;sort&#34; &amp;nbsp; const REVERSE = 16 &amp;nbsp; func Handshake(code int) []string { // binary_rep := convertDecimalToBinary(code) if code &amp;lt;  { return nil } secret_map := map[int]string { 1: &#34;</description>
			<content type="html"><![CDATA[<p>The first, and only time so far, that I got to use the bitwise &amp; operator. I enjoyed doing so!!</p>

<p>And of course from now on, I&#8217;ll be looking for more opportunities to (ab)use it.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="go" style="font-family:monospace;"><span style="color: #b1b100; font-weight: bold;">package</span> secret
&nbsp;
<span style="color: #b1b100; font-weight: bold;">import</span> <span style="color: #cc66cc;">"sort"</span>
&nbsp;
<span style="color: #b1b100; font-weight: bold;">const</span> REVERSE <span style="color: #339933;">=</span> <span style="color: #cc66cc;">16</span>
&nbsp;
<span style="color: #993333;">func</span> Handshake<span style="color: #339933;">(</span>code <span style="color: #993333;">int</span><span style="color: #339933;">)</span> <span style="color: #339933;">[]</span><span style="color: #993333;">string</span> <span style="color: #339933;">{</span>
    <span style="color: #666666; font-style: italic;">// binary_rep := convertDecimalToBinary(code)</span>
    <span style="color: #b1b100; font-weight: bold;">if</span> code &lt; <span style="color: #cc66cc;"></span> <span style="color: #339933;">{</span> <span style="color: #b1b100; font-weight: bold;">return</span> <span style="color: #000000; font-weight: bold;">nil</span> <span style="color: #339933;">}</span>
    secret_map <span style="color: #339933;">:=</span> <span style="color: #993333;">map</span><span style="color: #339933;">[</span><span style="color: #993333;">int</span><span style="color: #339933;">]</span><span style="color: #993333;">string</span> <span style="color: #339933;">{</span>
        <span style="color: #cc66cc;">1</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"wink"</span><span style="color: #339933;">,</span>
        <span style="color: #cc66cc;">2</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"double blink"</span><span style="color: #339933;">,</span>
        <span style="color: #cc66cc;">4</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"close your eyes"</span><span style="color: #339933;">,</span>
        <span style="color: #cc66cc;">8</span><span style="color: #339933;">:</span> <span style="color: #cc66cc;">"jump"</span><span style="color: #339933;">,</span>
    <span style="color: #339933;">}</span>
&nbsp;
    <span style="color: #b1b100; font-weight: bold;">var</span> keys <span style="color: #339933;">[]</span><span style="color: #993333;">int</span>
    <span style="color: #b1b100; font-weight: bold;">for</span> k <span style="color: #339933;">:=</span> <span style="color: #b1b100; font-weight: bold;">range</span> secret_map <span style="color: #339933;">{</span>
        keys <span style="color: #339933;">=</span> append<span style="color: #339933;">(</span>keys<span style="color: #339933;">,</span> k<span style="color: #339933;">)</span>
    <span style="color: #339933;">}</span>
    <span style="color: #666666; font-style: italic;">// To make sure iteration is always in the same order.</span>
    sort<span style="color: #339933;">.</span>Ints<span style="color: #339933;">(</span>keys<span style="color: #339933;">)</span>
&nbsp;
    code_array <span style="color: #339933;">:=</span> <span style="color: #000066;">make</span><span style="color: #339933;">([]</span><span style="color: #993333;">string</span><span style="color: #339933;">,</span> <span style="color: #cc66cc;"></span><span style="color: #339933;">)</span>
    <span style="color: #b1b100; font-weight: bold;">for</span> _<span style="color: #339933;">,</span> key <span style="color: #339933;">:=</span> <span style="color: #b1b100; font-weight: bold;">range</span> keys <span style="color: #339933;">{</span>
        <span style="color: #b1b100; font-weight: bold;">if</span> code & key <span style="color: #339933;">==</span> key <span style="color: #339933;">{</span>
            code_array <span style="color: #339933;">=</span> append<span style="color: #339933;">(</span>code_array<span style="color: #339933;">,</span> secret_map<span style="color: #339933;">[</span>key<span style="color: #339933;">])</span>
        <span style="color: #339933;">}</span>
    <span style="color: #339933;">}</span>
&nbsp;
    <span style="color: #b1b100; font-weight: bold;">if</span> code & REVERSE <span style="color: #339933;">==</span> REVERSE <span style="color: #339933;">{</span>
        code_array <span style="color: #339933;">=</span> reverse_array<span style="color: #339933;">(</span>code_array<span style="color: #339933;">)</span>
    <span style="color: #339933;">}</span>
&nbsp;
    <span style="color: #b1b100; font-weight: bold;">return</span> code_array
<span style="color: #339933;">}</span>
&nbsp;
<span style="color: #993333;">func</span> reverse_array <span style="color: #339933;">(</span>array_to_reverse <span style="color: #339933;">[]</span><span style="color: #993333;">string</span><span style="color: #339933;">)</span> <span style="color: #339933;">[]</span><span style="color: #993333;">string</span> <span style="color: #339933;">{</span>
    <span style="color: #b1b100; font-weight: bold;">for</span> <span style="">i</span><span style="color: #339933;">,</span> j <span style="color: #339933;">:=</span> <span style="color: #cc66cc;"></span><span style="color: #339933;">,</span> <span style="color: #000066;">len</span><span style="color: #339933;">(</span>array_to_reverse<span style="color: #339933;">)</span> <span style="color: #339933;">-</span><span style="color: #cc66cc;">1</span> <span style="color: #339933;">;</span> <span style="">i</span> &lt; j<span style="color: #339933;">;</span> <span style="">i</span><span style="color: #339933;">,</span> j <span style="color: #339933;">=</span> <span style="">i</span> <span style="color: #339933;">+</span> <span style="color: #cc66cc;">1</span><span style="color: #339933;">,</span> j <span style="color: #339933;">-</span> <span style="color: #cc66cc;">1</span> <span style="color: #339933;">{</span>
        array_to_reverse<span style="color: #339933;">[</span><span style="">i</span><span style="color: #339933;">],</span> array_to_reverse<span style="color: #339933;">[</span>j<span style="color: #339933;">]</span> <span style="color: #339933;">=</span> array_to_reverse<span style="color: #339933;">[</span>j<span style="color: #339933;">],</span> array_to_reverse<span style="color: #339933;">[</span><span style="">i</span><span style="color: #339933;">]</span>
    <span style="color: #339933;">}</span>
    <span style="color: #b1b100; font-weight: bold;">return</span> array_to_reverse
<span style="color: #339933;">}</span></pre>
      </td>
    </tr>
  </table>
</div>
]]></content>
		</item>
		
		<item>
			<title>Packer 0.8.1.</title>
			<link>https://skarlso.github.io/2015/07/01/packer-0-8-1/</link>
			<pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/07/01/packer-0-8-1/</guid>
			<description>Previously I wrote that the scripts I&amp;#8217;m writing, are failing because Packer hangs.
Apparently, this was a known issue. And apparently, I was using an older version, 0.7.5. After I updated everything is working wonderfully!!!
And for my thanks, here is an updated PowerShell script for provisioning my dotnet stuff.
  $source = &#34;http://download.microsoft.com/download/1/6/7/167F0D79-9317-48AE-AEDB-17120579F8E2/NDP451-KB2858728-x86-x64-AllOS-ENU.exe&#34; $destination = &#34;C:\Windows\Temp\dotnet.exe&#34; Write-Host &#39;Starting to download dotnet file.&#39; try &amp;#123; &amp;#40;New-Object System.Net.WebClient&amp;#41;.DownloadFile&amp;#40;$source, $destination&amp;#41; &amp;#125; catch &amp;#91;Exception&amp;#93; &amp;#123; Write-Host &#34;</description>
			<content type="html"><![CDATA[<p>Previously I wrote that the scripts I&#8217;m writing, are failing because Packer hangs.</p>

<p>Apparently, this was a known issue. And apparently, I was using an older version, 0.7.5. After I updated everything is working wonderfully!!!</p>

<p>And for my thanks, here is an updated PowerShell script for provisioning my dotnet stuff.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="powershell" style="font-family:monospace;"><span style="color: #800080;">$source</span> <span style="color: pink;">=</span> <span style="color: #800000;">"http://download.microsoft.com/download/1/6/7/167F0D79-9317-48AE-AEDB-17120579F8E2/NDP451-KB2858728-x86-x64-AllOS-ENU.exe"</span>
<span style="color: #800080;">$destination</span> <span style="color: pink;">=</span> <span style="color: #800000;">"C:\Windows\Temp\dotnet.exe"</span>
<span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">'Starting to download dotnet file.'</span>
try <span style="color: #000000;">&#123;</span>
  <span style="color: #000000;">&#40;</span><span style="color: #008080; font-weight: bold;">New-Object</span> System.Net.WebClient<span style="color: #000000;">&#41;</span>.DownloadFile<span style="color: #000000;">&#40;</span><span style="color: #800080;">$source</span><span style="color: pink;">,</span> <span style="color: #800080;">$destination</span><span style="color: #000000;">&#41;</span>
<span style="color: #000000;">&#125;</span> catch <span style="color: #000000;">&#91;</span>Exception<span style="color: #000000;">&#93;</span> <span style="color: #000000;">&#123;</span>
  <span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">"Exception during download. Probable cause could be that the directory or the file didn't exist."</span>
  <span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">'$_.Exception is'</span> <span style="color: #000080;">$_</span>.Exception
<span style="color: #000000;">&#125;</span>
<span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">'Download done. Checking if file exists.'</span>
<span style="color: #0000FF;">if</span> <span style="color: #000000;">&#40;</span><span style="color: pink;">!</span><span style="color: #000000;">&#40;</span><span style="color: #008080; font-weight: bold;">Test-Path</span> <span style="color: #800080;">$destination</span><span style="color: #000000;">&#41;</span><span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#123;</span>
  <span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">'Downloading dotnet Failed!'</span>
<span style="color: #000000;">&#125;</span> <span style="color: #0000FF;">else</span> <span style="color: #000000;">&#123;</span>
  <span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">'Download successful.'</span>
<span style="color: #000000;">&#125;</span>
&nbsp;
<span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">'Starting install process.'</span>
try <span style="color: #000000;">&#123;</span>
  Start<span style="color: pink;">-</span>Process <span style="color: #008080; font-style: italic;">-FilePath</span> <span style="color: #800080;">$source</span> <span style="color: #008080; font-style: italic;">-ArgumentList</span> <span style="color: #800000;">"/q /norestart"</span> <span style="color: #008080; font-style: italic;">-Wait</span> <span style="color: #008080; font-style: italic;">-PassThru</span>
<span style="color: #000000;">&#125;</span> catch <span style="color: #000000;">&#91;</span>Exception<span style="color: #000000;">&#93;</span> <span style="color: #000000;">&#123;</span>
  <span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">'Exception during install process.'</span>
  <span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">'$_.Exception is'</span> <span style="color: #000080;">$_</span>.Exception
<span style="color: #000000;">&#125;</span>
&nbsp;
<span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">'All done. Goodbye.'</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Thanks for reading!</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Powershell can also be nice -Or Installing Java silently and waiting</title>
			<link>https://skarlso.github.io/2015/06/30/powershell-can-also-be-nice-or-installing-java-silently-and-waiting/</link>
			<pubDate>Tue, 30 Jun 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/06/30/powershell-can-also-be-nice-or-installing-java-silently-and-waiting/</guid>
			<description>Hello folks.
Today, I would like to show you a small script. It installs Java JDK, both version, x86 and 64 bit, silently, and wait for that process to finish.
The wait is necessary because /s on a java install has the nasty habit of running in the background. If you are using a .bat file, you shouldn&amp;#8217;t, than you would use something like: start /w jdk-setup.exe /s. This gets it done, but is ugly.</description>
			<content type="html"><![CDATA[<p>Hello folks.</p>

<p>Today, I would like to show you a small script. It installs Java JDK, both version, x86 and 64 bit, silently, and wait for that process to finish.</p>

<p>The wait is necessary because /s on a java install has the nasty habit of running in the background. If you are using a .bat file, <strong>you shouldn&#8217;t</strong>, than you would use something like: start /w jdk-setup.exe /s. This gets it done, but is ugly. Also, if you are using Packer and PowerShell provisioning, you might want to set up some environment variables as well for the next script. And you want that property to be available and you don&#8217;t want to mess it up with setting a path into a file and then re-setting your path on the begin of your other script. Or pass it around with Packer. No. Use a proper PowerShell script. Learn it. It&#8217;s not that hard. Be a professional. Don&#8217;t hack something together for the next person to suffer at.</p>

<p>Here is how I did it. Hope it helps somebody out.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="powershell" style="font-family:monospace;"><span style="color: #800080;">$JDK_VER</span><span style="color: pink;">=</span><span style="color: #800000;">"7u75"</span>
<span style="color: #800080;">$JDK_FULL_VER</span><span style="color: pink;">=</span><span style="color: #800000;">"7u75-b13"</span>
<span style="color: #800080;">$JDK_PATH</span><span style="color: pink;">=</span><span style="color: #800000;">"1.7.0_75"</span>
<span style="color: #800080;">$source86</span> <span style="color: pink;">=</span> <span style="color: #800000;">"http://download.oracle.com/otn-pub/java/jdk/$JDK_FULL_VER/jdk-$JDK_VER-windows-i586.exe"</span>
<span style="color: #800080;">$source64</span> <span style="color: pink;">=</span> <span style="color: #800000;">"http://download.oracle.com/otn-pub/java/jdk/$JDK_FULL_VER/jdk-$JDK_VER-windows-x64.exe"</span>
<span style="color: #800080;">$destination86</span> <span style="color: pink;">=</span> <span style="color: #800000;">"C:\vagrant\$JDK_VER-x86.exe"</span>
<span style="color: #800080;">$destination64</span> <span style="color: pink;">=</span> <span style="color: #800000;">"C:\vagrant\$JDK_VER-x64.exe"</span>
<span style="color: #800080;">$client</span> <span style="color: pink;">=</span> <span style="color: #008080; font-weight: bold;">new-object</span> System.Net.WebClient
<span style="color: #800080;">$cookie</span> <span style="color: pink;">=</span> <span style="color: #800000;">"oraclelicense=accept-securebackup-cookie"</span>
<span style="color: #800080;">$client</span>.Headers.Add<span style="color: #000000;">&#40;</span><span style="color: #000000;">&#91;</span>System.Net.HttpRequestHeader<span style="color: #000000;">&#93;</span>::Cookie<span style="color: pink;">,</span> <span style="color: #800080;">$cookie</span><span style="color: #000000;">&#41;</span>
&nbsp;
<span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">'Checking if Java is already installed'</span>
<span style="color: #0000FF;">if</span> <span style="color: #000000;">&#40;</span><span style="color: #000000;">&#40;</span><span style="color: #008080; font-weight: bold;">Test-Path</span> <span style="color: #800000;">"c:\Program Files (x86)\Java"</span><span style="color: #000000;">&#41;</span> <span style="color: #FF0000;">-Or</span> <span style="color: #000000;">&#40;</span><span style="color: #008080; font-weight: bold;">Test-Path</span> <span style="color: #800000;">"c:\Program Files\Java"</span><span style="color: #000000;">&#41;</span><span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#123;</span>
    <span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">'No need to Install Java'</span>
    Exit
<span style="color: #000000;">&#125;</span>
&nbsp;
<span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">'Downloading x86 to $destination86'</span>
&nbsp;
<span style="color: #800080;">$client</span>.downloadFile<span style="color: #000000;">&#40;</span><span style="color: #800080;">$source86</span><span style="color: pink;">,</span> <span style="color: #800080;">$destination86</span><span style="color: #000000;">&#41;</span>
<span style="color: #0000FF;">if</span> <span style="color: #000000;">&#40;</span><span style="color: pink;">!</span><span style="color: #000000;">&#40;</span><span style="color: #008080; font-weight: bold;">Test-Path</span> <span style="color: #800080;">$destination86</span><span style="color: #000000;">&#41;</span><span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#123;</span>
    <span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">"Downloading $destination86 failed"</span>
    Exit
<span style="color: #000000;">&#125;</span>
<span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">'Downloading x64 to $destination64'</span>
&nbsp;
<span style="color: #800080;">$client</span>.downloadFile<span style="color: #000000;">&#40;</span><span style="color: #800080;">$source64</span><span style="color: pink;">,</span> <span style="color: #800080;">$destination64</span><span style="color: #000000;">&#41;</span>
<span style="color: #0000FF;">if</span> <span style="color: #000000;">&#40;</span><span style="color: pink;">!</span><span style="color: #000000;">&#40;</span><span style="color: #008080; font-weight: bold;">Test-Path</span> <span style="color: #800080;">$destination64</span><span style="color: #000000;">&#41;</span><span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#123;</span>
    <span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">"Downloading $destination64 failed"</span>
    Exit
<span style="color: #000000;">&#125;</span>
&nbsp;
&nbsp;
try <span style="color: #000000;">&#123;</span>
    <span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">'Installing JDK-x64'</span>
    <span style="color: #800080;">$proc1</span> <span style="color: pink;">=</span> Start<span style="color: pink;">-</span>Process <span style="color: #008080; font-style: italic;">-FilePath</span> <span style="color: #800000;">"$destination64"</span> <span style="color: #008080; font-style: italic;">-ArgumentList</span> <span style="color: #800000;">"/s REBOOT=ReallySuppress"</span> <span style="color: #008080; font-style: italic;">-Wait</span> <span style="color: #008080; font-style: italic;">-PassThru</span>
    <span style="color: #800080;">$proc1</span>.waitForExit<span style="color: #000000;">&#40;</span><span style="color: #000000;">&#41;</span>
    <span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">'Installation Done.'</span>
&nbsp;
    <span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">'Installing JDK-x86'</span>
    <span style="color: #800080;">$proc2</span> <span style="color: pink;">=</span> Start<span style="color: pink;">-</span>Process <span style="color: #008080; font-style: italic;">-FilePath</span> <span style="color: #800000;">"$destination86"</span> <span style="color: #008080; font-style: italic;">-ArgumentList</span> <span style="color: #800000;">"/s REBOOT=ReallySuppress"</span> <span style="color: #008080; font-style: italic;">-Wait</span> <span style="color: #008080; font-style: italic;">-PassThru</span>
    <span style="color: #800080;">$proc2</span>.waitForExit<span style="color: #000000;">&#40;</span><span style="color: #000000;">&#41;</span>
    <span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">'Installtion Done.'</span>
<span style="color: #000000;">&#125;</span> catch <span style="color: #000000;">&#91;</span>exception<span style="color: #000000;">&#93;</span> <span style="color: #000000;">&#123;</span>
    <span style="color: #008080; font-weight: bold;">write-host</span> <span style="color: #800000;">'$_ is'</span> <span style="color: #000080;">$_</span>
    <span style="color: #008080; font-weight: bold;">write-host</span> <span style="color: #800000;">'$_.GetType().FullName is'</span> <span style="color: #000080;">$_</span>.GetType<span style="color: #000000;">&#40;</span><span style="color: #000000;">&#41;</span>.FullName
    <span style="color: #008080; font-weight: bold;">write-host</span> <span style="color: #800000;">'$_.Exception is'</span> <span style="color: #000080;">$_</span>.Exception
    <span style="color: #008080; font-weight: bold;">write-host</span> <span style="color: #800000;">'$_.Exception.GetType().FullName is'</span> <span style="color: #000080;">$_</span>.Exception.GetType<span style="color: #000000;">&#40;</span><span style="color: #000000;">&#41;</span>.FullName
    <span style="color: #008080; font-weight: bold;">write-host</span> <span style="color: #800000;">'$_.Exception.Message is'</span> <span style="color: #000080;">$_</span>.Exception.Message
<span style="color: #000000;">&#125;</span>
&nbsp;
<span style="color: #0000FF;">if</span> <span style="color: #000000;">&#40;</span><span style="color: #000000;">&#40;</span><span style="color: #008080; font-weight: bold;">Test-Path</span> <span style="color: #800000;">"c:\Program Files (x86)\Java"</span><span style="color: #000000;">&#41;</span> <span style="color: #FF0000;">-Or</span> <span style="color: #000000;">&#40;</span><span style="color: #008080; font-weight: bold;">Test-Path</span> <span style="color: #800000;">"c:\Program Files\Java"</span><span style="color: #000000;">&#41;</span><span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#123;</span>
    <span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">'Java installed successfully.'</span>
<span style="color: #000000;">&#125;</span>
<span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">'Setting up Path variables.'</span>
<span style="color: #000000;">&#91;</span>System.Environment<span style="color: #000000;">&#93;</span>::SetEnvironmentVariable<span style="color: #000000;">&#40;</span><span style="color: #800000;">"JAVA_HOME"</span><span style="color: pink;">,</span> <span style="color: #800000;">"c:\Program Files (x86)\Java\jdk$JDK_PATH"</span><span style="color: pink;">,</span> <span style="color: #800000;">"Machine"</span><span style="color: #000000;">&#41;</span>
<span style="color: #000000;">&#91;</span>System.Environment<span style="color: #000000;">&#93;</span>::SetEnvironmentVariable<span style="color: #000000;">&#40;</span><span style="color: #800000;">"PATH"</span><span style="color: pink;">,</span> <span style="color: #800080;">$Env</span>:Path <span style="color: pink;">+</span> <span style="color: #800000;">";c:\Program Files (x86)\Java\jdk$JDK_PATH\bin"</span><span style="color: pink;">,</span> <span style="color: #800000;">"Machine"</span><span style="color: #000000;">&#41;</span>
<span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800000;">'Done. Goodbye.'</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Now, there is room for improvement here. Like checking exit code, doing something extra after a failed exit. Throwing an exception, and so on and so forth. But this is a much needed improvement from calling a BAT file.</p>

<p>And you would use this in a Packer JSON file like this..</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="json" style="font-family:monospace;">{
      "type": "powershell",
      "scripts": [
        "./scripts/jdk_inst.ps1"
      ]
}</pre>
      </td>
    </tr>
  </table>
</div>

<p>Easy. And at the end, the System.Environment actually writes out into the registry permanently so no need to pass it around in a file or something ugly like that.</p>

<p>Hope this helps somebody.</p>

<p>Thanks for reading.</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>The Packer, The Windows, and the Vagrant box</title>
			<link>https://skarlso.github.io/2015/06/27/the-packer-the-windows-and-the-vagrant-box/</link>
			<pubDate>Sat, 27 Jun 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/06/27/the-packer-the-windows-and-the-vagrant-box/</guid>
			<description>&lt;p&gt;Hello folks.&lt;/p&gt;

&lt;p&gt;Today, I would like to write about something close to my heart recently. I&amp;#8217;ve been fiddling with Packer, Windows and Vagrant these days. Trying to get a Windows box up in running is a pain in the arse though, so I thought I share my pain with you nice folks out there. Let&amp;#8217;s begin.&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Hello folks.</p>

<p>Today, I would like to write about something close to my heart recently. I&#8217;ve been fiddling with Packer, Windows and Vagrant these days. Trying to get a Windows box up in running is a pain in the arse though, so I thought I share my pain with you nice folks out there. Let&#8217;s begin.</p>

<h1 id="setup">Setup</h1>

<p>First things first. You need <a href="https://packer.io/" target="_blank">Packer</a>, and <a href="https://www.vagrantup.com/" target="_blank">Vagrant</a> obviously. I&#8217;ll leave the install up to you. Next, you should clone this git repo =&gt; <a href="https://github.com/joefitzgerald/packer-windows" target="_blank">Packer Windows Plugin</a>. This plugin contains all the files necessary to get, install, and provision Windows boxes. Luckily, some very nice and clever folks, figured out a lot of things about how to install stuff on Windows. And given that people at Microsoft realised that sys admins would like to install stuff remotely, there are a bunch of forums and places where you can search for how to install software without user interaction. And this is the keyword you should look for =&gt; <strong>unattended Windows install</strong>.</p>

<p>This will lead you further into the bowls of Windows technology and silent / quiet installs all over the place.</p>

<h1 id="packer-and-answer-files">Packer and Answer Files</h1>

<p>When it comes to installing software on Windows, you have quite a few obstacles to overtake. One of the biggest obstacle you are facing, are restarts. Windows has a special place in hell for that. Every time you install something important which requires system libraries or other kind of configuration which &#8220;will only take effect after you restart Windows&#8221; you have to do a restart. Now, a little background on how Packer interacts with Windows. At the moment, it uses OpenSSH to talk to the box which has to be the last which comes up. If it looses connection to openssh because, I don&#8217;t know, it restarted itself, you loose communication to the box, and the setup process stops in mid tracks.</p>

<p>If you read about that in an earlier attempt to overtake this, you saw that you could use time-outs. You could kill ssh process which presumably makes packer do an attempt to start a new connection. If you are like me, you experienced that Packer does indeed NOT re-try. Because the previous task couldn&#8217;t finish, the restart killed the ssh service which could tell Packer that the previous task, an install for example, has finished. Hence, Packer will stay there and wait for that task to complete; which will never happen at this point.</p>

<p>What can we do? Enter the world of <a href="https://technet.microsoft.com/en-us/library/cc749113(v=ws.10).aspx" target="_blank">Answer Files</a>. Basically, it&#8217;s an xml file which sets up Windows. When Packer is running this file, the last service which should be installed, must be openSSH. And after that, in the provisioning phase, you should only install software which does not require restarts.</p>

<p>Let&#8217;s look at an example.</p>

<h1 id="example-1-windows-updates">Example #1: Windows Updates</h1>

<p>This is another layer of purgatory for Windows. It&#8217;s updates. The updates take massive amount of times, if you are doing them from scratch, and also require several restart before it&#8217;s actually done. You <strong>could </strong>speed up the process a little bit, if you have a private network share where all of the Windows updates are sitting. At least that way you don&#8217;t have to download them every time you are creating a box. But you can&#8217;t avert the install process itself.</p>

<p>Let&#8217;s look at a setup for packer. Packer works with JSON files for it&#8217;s configuration. An example for a Windows 7 box would look something like this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="json" style="font-family:monospace;">{
  "builders": [
    {
      "type": "vmware-iso",
      "iso_url": "http://care.dlservice.microsoft.com/dl/download/evalx/win7/x64/EN/7600.16385.090713-1255_x64fre_enterprise_en-us_EVAL_Eval_Enterprise-GRMCENXEVAL_EN_DVD.iso",
      "iso_checksum_type": "md5",
      "iso_checksum": "1d0d239a252cb53e466d39e752b17c28",
      "headless": true,
      "boot_wait": "2m",
      "ssh_username": "vagrant",
      "ssh_password": "vagrant",
      "ssh_wait_timeout": "8h",
      "shutdown_command": "shutdown /s /t 10 /f /d p:4:1 /c \"Packer Shutdown\"",
      "guest_os_type": "windows7-64",
      "tools_upload_flavor": "windows",
      "disk_size": 61440,
      "vnc_port_min": 5900,
      "vnc_port_max": 5980,
      "floppy_files": [
        "./answer_files/7/Autounattend.xml",
        "./scripts/dis-updates.ps1",
        "./scripts/microsoft-updates.bat",
        "./scripts/win-updates.ps1",
        "./scripts/openssh.ps1"
      ],
      "vmx_data": {
        "RemoteDisplay.vnc.enabled": "false",
        "RemoteDisplay.vnc.port": "5900",
        "memsize": "2048",
        "numvcpus": "2",
        "scsi0.virtualDev": "lsisas1068"
      }
    },
    {
      "type": "virtualbox-iso",
      "iso_url": "http://care.dlservice.microsoft.com/dl/download/evalx/win7/x64/EN/7600.16385.090713-1255_x64fre_enterprise_en-us_EVAL_Eval_Enterprise-GRMCENXEVAL_EN_DVD.iso",
      "iso_checksum_type": "md5",
      "iso_checksum": "1d0d239a252cb53e466d39e752b17c28",
      "headless": true,
      "boot_wait": "2m",
      "ssh_username": "vagrant",
      "ssh_password": "vagrant",
      "ssh_wait_timeout": "8h",
      "shutdown_command": "shutdown /s /t 10 /f /d p:4:1 /c \"Packer Shutdown\"",
      "guest_os_type": "Windows7_64",
      "disk_size": 61440,
      "floppy_files": [
        "./answer_files/7/Autounattend.xml",
        "./scripts/dis-updates.ps1",
        "./scripts/microsoft-updates.bat",
        "./scripts/win-updates.ps1",
        "./scripts/openssh.ps1",
        "./scripts/oracle-cert.cer"
      ],
      "vboxmanage": [
        [
          "modifyvm",
          "{{.Name}}",
          "--memory",
          "2048"
        ],
        [
          "modifyvm",
          "{{.Name}}",
          "--cpus",
          "2"
        ]
      ]
    }
  ],
  "provisioners": [
    {
      "type": "shell",
      "remote_path": "/tmp/script.bat",
      "execute_command": "{{.Vars}} cmd /c C:/Windows/Temp/script.bat",
      "scripts": [
        "./scripts/vm-guest-tools.bat",
        "./scripts/chef.bat",
        "./scripts/vagrant-ssh.bat",
        "./scripts/disable-auto-logon.bat",
        "./scripts/enable-rdp.bat",
        "./scripts/compile-dotnet-assemblies.bat",
        "./scripts/compact.bat"
      ]
    }
  ],
  "post-processors": [
    {
      "type": "vagrant",
      "keep_input_artifact": false,
      "output": "windows_7_{{.Provider}}.box",
      "vagrantfile_template": "vagrantfile-windows_7.template"
    }
  ]
}</pre>
      </td>
    </tr>
  </table>
</div>

<p>If it feels daunting, don&#8217;t worry. You&#8217;ll get used to it fairly quickly. Let&#8217;s go over section by section on what this does.</p>

<h4 id="builders">Builders</h4>

<p>Packer uses builders for, well, building stuff. These two builders are virtualbox and vmware. I&#8217;m only interested in virtualbox. This builder downloads win7 and sets up some virtual box details like, disk size, vagrant user, memory, and so and so forth. The interesting part is the floppy part. Here, we can add in some files for setup. We will use this part later on.</p>

<h4 id="provisioners">Provisioners</h4>

<p>Now here is an interesting tid-bit. There are a bunch of provisioners available as plugin for packer. Installing them is fairly easy. Packer needs binary plugins. Just copy them into ~/.packer.d/plugins or directly into the packer home directly. I&#8217;d advice against that. Have them in your own packer.d, that&#8217;s much cleaner. For binary plugin releases in the Windows side, look here =&gt; <a href="https://github.com/packer-community/packer-windows-plugins/releases" target="_blank"><a href="https://github.com/packer-community/packer-windows-plugins/releases">https://github.com/packer-community/packer-windows-plugins/releases</a></a>. If you would like to build them yourself from source, download the source and use go gcc to build it. You will have to <strong>go get</strong> a few packages though. Also you will have to have <strong>$GOPATH</strong> (pointing to your own workspace) and <strong>$GOROOT</strong> (pointing to your working go) setup. But this is not a Go guide. After that just do <strong>go build main.go </strong>and you have your plugin.</p>

<p>Provisioners are like vagrant provision they will execute post setup stuff on your box. Like installing utils, 7zip, choco, nuget, and so and so forth. There are a few interesting Windows provisioners, like restart-windows, powershell, and Windows shell. Which is like shell, but without the need of pre-setup if you are trying to use it on Windows. The basic shell on Windows is a little clanky and can hang from time-to-time so I recommend using PowerShell or WindowsShell provisioner if you are dealing with Windows post-setup Setup.</p>

<h4 id="post-processor">Post-Processor</h4>

<p>This will create the Vagrant box after everything is done.</p>

<h4 id="running-the-update">Running the Update</h4>

<p>For use, two things are interesting from here at this moment. These guys =&gt;</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="json" style="font-family:monospace;">        "./scripts/microsoft-updates.bat",
        "./scripts/win-updates.ps1",</pre>
      </td>
    </tr>
  </table>
</div>

<p>These two contain most of the logic which is part of the update process. You should see it in your checked out source. There is some very interesting logic in there which describes how the update happens. Basically it&#8217;s a loop which re-checks if there are updates available or if a re-start is needed. Packer handles re-starts well at this point in the install because it simply waits for SSH to come only. The rest is handled by Windows.</p>

<p>These scripts are called in the Answer File which the Windows Setup uses for configuration purposes. Take a look at this section:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="xml" style="font-family:monospace;">                <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;SynchronousCommand</span> <span style="color: #000066;">wcm:action</span>=<span style="color: #ff0000;">"add"</span><span style="color: #000000; font-weight: bold;">&gt;</span></span>
                    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;CommandLine<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>cmd.exe /c a:\microsoft-updates.bat<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/CommandLine<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
                    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;Order<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>98<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/Order<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
                    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;Description<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>Enable Microsoft Updates<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/Description<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
                <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/SynchronousCommand<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
                <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;SynchronousCommand</span> <span style="color: #000066;">wcm:action</span>=<span style="color: #ff0000;">"add"</span><span style="color: #000000; font-weight: bold;">&gt;</span></span>
                    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;CommandLine<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>cmd.exe /c C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -File a:\win-updates.ps1 -MaxUpdatesPerCycle 30<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/CommandLine<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
                    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;Description<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>Install Windows Updates<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/Description<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
                    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;Order<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>100<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/Order<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
                    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;RequiresUserInput<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>true<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/RequiresUserInput<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
                <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/SynchronousCommand<span style="color: #000000; font-weight: bold;">&gt;</span></span></span></pre>
      </td>
    </tr>
  </table>
</div>

<p>This is were the floppy part comes on handy. This part uses the scripts bound by floppy and which will be available from a:.</p>

<p>This will install all the updates available. It will take a while. A very very long while&#8230; But let&#8217;s go a step further.</p>

<h1 id="example-2-installing-dotnet-4-5">Example #2: Installing DotNet 4.5</h1>

<p>Let&#8217;s assume you want to create a box with visual studio 2013, office, and have choco on it, and a couple of more things for which you need lots of restarts. You could try installing with /norestart switch, which also works; however if you definitely need it to restart I suggest installing stuff with the Answer File. For this, let&#8217;s create a PowerShell script which downloads and installs dotnet 451 which is needed for visual studio ultimate 2013.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="powershell" style="font-family:monospace;"><span style="color: #800080;">$Logfile</span> <span style="color: pink;">=</span> <span style="color: #800000;">"C:\Windows\Temp\dotnet-install.log"</span>
<span style="color: #0000FF;">function</span> LogWrite <span style="color: #000000;">&#123;</span>
   <span style="color: #0000FF;">Param</span> <span style="color: #000000;">&#40;</span><span style="color: #000000;">&#91;</span><span style="color: #008080;">string</span><span style="color: #000000;">&#93;</span><span style="color: #800080;">$logstring</span><span style="color: #000000;">&#41;</span>
   <span style="color: #800080;">$now</span> <span style="color: pink;">=</span> <span style="color: #008080; font-weight: bold;">Get-Date</span> <span style="color: #008080; font-style: italic;">-format</span> s
   <span style="color: #008080; font-weight: bold;">Add-Content</span> <span style="color: #800080;">$Logfile</span> <span style="color: #008080; font-style: italic;">-value</span> <span style="color: #800000;">"$now $logstring"</span>
   <span style="color: #008080; font-weight: bold;">Write-Host</span> <span style="color: #800080;">$logstring</span>
<span style="color: #000000;">&#125;</span>
&nbsp;
LogWrite <span style="color: #800000;">"Downlading dotNetFx40_Full_x86_x64."</span>
try <span style="color: #000000;">&#123;</span>
    <span style="color: #000000;">&#40;</span><span style="color: #008080; font-weight: bold;">New-Object</span> System.Net.WebClient<span style="color: #000000;">&#41;</span>.DownloadFile<span style="color: #000000;">&#40;</span><span style="color: #800000;">'http://download.microsoft.com/download/1/6/7/167F0D79-9317-48AE-AEDB-17120579F8E2/NDP451-KB2858728-x86-x64-AllOS-ENU.exe'</span><span style="color: pink;">,</span> <span style="color: #800000;">'C:\Windows\Temp\dotnet.exe'</span><span style="color: #000000;">&#41;</span>
<span style="color: #000000;">&#125;</span> catch <span style="color: #000000;">&#123;</span>
    LogWrite <span style="color: #000080;">$_</span>.Exception <span style="color: pink;">|</span> <span style="color: #008080; font-weight: bold;">Format-List</span> <span style="color: #008080; font-style: italic;">-force</span>
    LogWrite <span style="color: #800000;">"Failed to download file."</span>
<span style="color: #000000;">&#125;</span>
&nbsp;
LogWrite <span style="color: #800000;">"Starting installation process..."</span>
try <span style="color: #000000;">&#123;</span>
    Start<span style="color: pink;">-</span>Process <span style="color: #008080; font-style: italic;">-FilePath</span> <span style="color: #800000;">"C:\Windows\Temp\dotnet.exe"</span> <span style="color: #008080; font-style: italic;">-ArgumentList</span> <span style="color: #800000;">"/I /q /norestart"</span> <span style="color: #008080; font-style: italic;">-Wait</span> <span style="color: #008080; font-style: italic;">-PassThru</span>
<span style="color: #000000;">&#125;</span> catch <span style="color: #000000;">&#123;</span>
    LogWrite <span style="color: #000080;">$_</span>.Exception <span style="color: pink;">|</span> <span style="color: #008080; font-weight: bold;">Format-List</span> <span style="color: #008080; font-style: italic;">-force</span>
    LogWrite <span style="color: #800000;">"Exception during install process."</span>    
<span style="color: #000000;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>So this downloads it right from the source. As mentioned earlier, you could have this on a nice shared drive so downloading from the internet is not necessary. The installer is in fact a bit friendly. It has a switch called /q /norestart. The /q is called silent install and the /norestart speaks for itself. If you leave it out, you can use /forcerestart or you could have the following two lines after this finishes: <em>LogWrite &#8220;Resarting Computer.&#8221; Restart-Computer -Force</em>. This will force a restart. You need the -Force because otherwise it won&#8217;t let it restart while there are active sessions logged on the computer.</p>

<p>Now, let&#8217;s add this to the answer file:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="xml" style="font-family:monospace;">                <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;SynchronousCommand</span> <span style="color: #000066;">wcm:action</span>=<span style="color: #ff0000;">"add"</span><span style="color: #000000; font-weight: bold;">&gt;</span></span>
                    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;CommandLine<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>cmd.exe /c C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -File a:\install-dotnet-451.ps1 -AutoStart<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/CommandLine<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
                    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;Order<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>98<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/Order<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
                    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;Description<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>Install DotNet 4.5.1.<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/Description<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
                <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/SynchronousCommand<span style="color: #000000; font-weight: bold;">&gt;</span></span></span></pre>
      </td>
    </tr>
  </table>
</div>

<p>See, how easy this is? And now we make use of the floppy part of the windows-7.json by adding this line: <strong>&#8220;./scripts/install-dotnet-451.ps1&#8221;</strong>. Don&#8217;t forget to append the &#8220;,&#8221; at the end of the previous line. This is an array.</p>

<p>We are ready to go. Just run <strong>packer build -only=virtualbox-iso windows-7.json</strong> and you should be done!</p>

<h1 id="example-3-installing-visual-studio-ultimate">Example #3: Installing Visual Studio Ultimate</h1>

<p>Installing visual studio is almost trivial as well. With the addition that visual studio requires an admin.xml for silent install which has a bunch of settings. When you have the admin.xml just bind it into the floppy drive as well and call the visual studio install powershell script like this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="powershell" style="font-family:monospace;">    Start<span style="color: pink;">-</span>Process <span style="color: #008080; font-style: italic;">-FilePath</span> <span style="color: #800000;">"C:\Windows\Temp\visualstudioultimate.exe"</span> <span style="color: #008080; font-style: italic;">-ArgumentList</span> <span style="color: #800000;">"/Quiet /NoRestart /admin a:\admin.xml"</span> <span style="color: #008080; font-style: italic;">-Wait</span> <span style="color: #008080; font-style: italic;">-PassThru</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Again, this will take a while&#8230;&#8230;&#8230;&#8230;.</p>

<h1 id="post-setup-provisioning">Post Setup Provisioning</h1>

<p>When all this is done, you can still add some provisioning steps to add some utils with PowerShell or WindowsShell provisioner. I would advice against using simple shell. Bare in mind one other thing. If you have a batch file, and you are calling another batch file in that batch file, like choco install 7zip, it will happen that the install process will hang on installing 7zip. Because in Windows land the called script will not return the exec handler to the caller unless specifically asking for it with <strong>call</strong>. Which means your bat file will look something like this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="batch" style="font-family:monospace;">call choco install 7zip
call choco install notepadplusplus</pre>
      </td>
    </tr>
  </table>
</div>

<p>or</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="batch" style="font-family:monospace;">cmd /c choco install 7zip
cmd /c choco install notepadplusplus</pre>
      </td>
    </tr>
  </table>
</div>

<p>And so on, and so forth.</p>

<h1 id="wrap-up">Wrap-Up</h1>

<p>So, what have we learned? We have learned that installing software which requires re-start is better left to Windows itself with an answer file. Batch files will not return the handler. SSH <strong>MUST</strong> be the last thing you start up in the answer file. Use PowerShell provisioner or WindowsShell provisioner on Windows.</p>

<p>Hope this helped.</p>

<p>Happy installing, and as always,</p>

<p>Thanks for reading.</p>

<p>Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>Docker &#43; Java &#43; Vagrant&#43; GO.CD</title>
			<link>https://skarlso.github.io/2015/06/06/docker-ruby-lotus-go-cd/</link>
			<pubDate>Sat, 06 Jun 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/06/06/docker-ruby-lotus-go-cd/</guid>
			<description>&lt;p&gt;Hello folks.&lt;/p&gt;

&lt;p&gt;Today, I would like to write about something interesting and close to me at the moment. I&amp;#8217;m going to setup Go.cd with Docker, and I&amp;#8217;m going to get a Ruby Lotus app running. Let&amp;#8217;s get started.&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Hello folks.</p>

<p>Today, I would like to write about something interesting and close to me at the moment. I&#8217;m going to setup Go.cd with Docker, and I&#8217;m going to get a Ruby Lotus app running. Let&#8217;s get started.</p>

<h1 id="fluff">Fluff</h1>

<p>Now, obviously, you don&#8217;t really need Go.Cd or Docker to setup a Java Gradle application, since it&#8217;s dead easy. But I&#8217;m going to do it just for the heck of it.</p>

<h1 id="setup">Setup</h1>

<p>Okay, lets start with Vagrant. Docker&#8217;s strength is coming from Linux&#8217;s process isolation capabilities it&#8217;s not yet properly working on OSX or Windows. You have a couple of options if you&#8217;d like to try never the less, like boot2docker, or a Tiny Linux kernel, but at that point, I think it&#8217;s easier to use a VM.</p>

<h4 id="vagrant">Vagrant</h4>

<p>So, let&#8217;s start with my small Vagrantfile.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="ruby" style="font-family:monospace;"><span style="color:#008000; font-style:italic;"># -*- mode: ruby -*-</span>
<span style="color:#008000; font-style:italic;"># vi: set ft=ruby :</span>
&nbsp;
<span style="color:#008000; font-style:italic;"># All Vagrant configuration is done below. The "2" in Vagrant.configure</span>
<span style="color:#008000; font-style:italic;"># configures the configuration version (we support older styles for</span>
<span style="color:#008000; font-style:italic;"># backwards compatibility). Please don't change it unless you know what</span>
<span style="color:#008000; font-style:italic;"># you're doing.</span>
Vagrant.<span style="color:#9900CC;">configure</span><span style="color:#006600; font-weight:bold;">&#40;</span><span style="color:#006666;">2</span><span style="color:#006600; font-weight:bold;">&#41;</span> <span style="color:#9966CC; font-weight:bold;">do</span> <span style="color:#006600; font-weight:bold;">|</span>config<span style="color:#006600; font-weight:bold;">|</span>
  <span style="color:#008000; font-style:italic;"># The most common configuration options are documented and commented below.</span>
  <span style="color:#008000; font-style:italic;"># For a complete reference, please see the online documentation at</span>
  <span style="color:#008000; font-style:italic;"># https://docs.vagrantup.com.</span>
&nbsp;
  <span style="color:#008000; font-style:italic;"># Every Vagrant development environment requires a box. You can search for</span>
  <span style="color:#008000; font-style:italic;"># boxes at https://atlas.hashicorp.com/search.</span>
  config.<span style="color:#9900CC;">vm</span>.<span style="color:#9900CC;">box</span> = <span style="color:#996600;">"trusty"</span>
  config.<span style="color:#9900CC;">vm</span>.<span style="color:#9900CC;">box_url</span> = <span style="color:#996600;">"https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box"</span>
  config.<span style="color:#9900CC;">vm</span>.<span style="color:#9900CC;">network</span> <span style="color:#996600;">"forwarded_port"</span>, guest: <span style="color:#006666;">2300</span>, host: <span style="color:#006666;">2300</span>
  config.<span style="color:#9900CC;">vm</span>.<span style="color:#9900CC;">network</span> <span style="color:#996600;">"forwarded_port"</span>, guest: <span style="color:#006666;">8153</span>, host: <span style="color:#006666;">8153</span>
  config.<span style="color:#9900CC;">vm</span>.<span style="color:#9900CC;">provision</span> <span style="color:#996600;">"shell"</span>, path: <span style="color:#996600;">"setup.sh"</span>
  config.<span style="color:#9900CC;">vm</span>.<span style="color:#9900CC;">provider</span> <span style="color:#996600;">"virtualbox"</span> <span style="color:#9966CC; font-weight:bold;">do</span> <span style="color:#006600; font-weight:bold;">|</span>v<span style="color:#006600; font-weight:bold;">|</span>
    v.<span style="color:#9900CC;">memory</span> = <span style="color:#006666;">8192</span>
    v.<span style="color:#9900CC;">cpus</span> = <span style="color:#006666;">2</span>
  <span style="color:#9966CC; font-weight:bold;">end</span>
<span style="color:#9966CC; font-weight:bold;">end</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Very simple. I&#8217;m setting up a trusty64(because docker requires 3.10 &lt;= x) box and then doing a simple shell provision. Also, I gave it a bit juice, since go-server requires a raw power. Here is the shell script:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">!</span><span style="color: #666666; font-style: italic;">#/bin/bash</span>
<span style="color: #c20cb9; font-weight: bold;">sudo</span> <span style="color: #c20cb9; font-weight: bold;">apt-get update</span>
<span style="color: #c20cb9; font-weight: bold;">sudo</span> <span style="color: #c20cb9; font-weight: bold;">apt-get install</span> <span style="color: #660033;">-y</span> software-properties-common python-software-properties
<span style="color: #c20cb9; font-weight: bold;">sudo</span> <span style="color: #c20cb9; font-weight: bold;">apt-get update</span>
<span style="color: #c20cb9; font-weight: bold;">sudo</span> <span style="color: #c20cb9; font-weight: bold;">apt-get install</span> <span style="color: #660033;">-y</span> <span style="color: #c20cb9; font-weight: bold;">vim</span>
<span style="color: #c20cb9; font-weight: bold;">sudo</span> add-apt-repository <span style="color: #660033;">-y</span> <span style="color: #ff0000;">"ppa:webupd8team/java"</span>
<span style="color: #c20cb9; font-weight: bold;">sudo</span> <span style="color: #c20cb9; font-weight: bold;">apt-get update</span>
<span style="color: #7a0874; font-weight: bold;">echo</span> <span style="color: #c20cb9; font-weight: bold;">debconf</span> shared<span style="color: #000000; font-weight: bold;">/</span>accepted-oracle-license-v1-<span style="color: #000000;">1</span> <span style="color: #000000; font-weight: bold;">select</span> <span style="color: #c20cb9; font-weight: bold;">true</span> <span style="color: #000000; font-weight: bold;">|</span> <span style="color: #c20cb9; font-weight: bold;">sudo</span> debconf-set-selections <span style="color: #000000; font-weight: bold;">&</span>amp;<span style="color: #000000; font-weight: bold;">&</span>amp; <span style="color: #7a0874; font-weight: bold;">echo</span> <span style="color: #c20cb9; font-weight: bold;">debconf</span> shared<span style="color: #000000; font-weight: bold;">/</span>accepted-oracle-license-v1-<span style="color: #000000;">1</span> seen <span style="color: #c20cb9; font-weight: bold;">true</span> <span style="color: #000000; font-weight: bold;">|</span> <span style="color: #c20cb9; font-weight: bold;">sudo</span> debconf-set-selections
<span style="color: #c20cb9; font-weight: bold;">sudo</span> <span style="color: #c20cb9; font-weight: bold;">apt-get install</span> <span style="color: #660033;">-y</span> oracle-java8-installer
<span style="color: #c20cb9; font-weight: bold;">sudo</span> <span style="color: #c20cb9; font-weight: bold;">apt-get update</span>
<span style="color: #c20cb9; font-weight: bold;">wget</span> <span style="color: #660033;">-qO-</span> https:<span style="color: #000000; font-weight: bold;">//</span>get.docker.com<span style="color: #000000; font-weight: bold;">/</span> <span style="color: #000000; font-weight: bold;">|</span> <span style="color: #c20cb9; font-weight: bold;">sh</span>
route add <span style="color: #660033;">-net</span> 172.17.0.0 netmask 255.255.255.0 gw 172.17.42.1</pre>
      </td>
    </tr>
  </table>
</div>

<p>The debconf at the end accepts java8&#8217;s terms and conditions. And the last line installs docker in my box. This runs for a little while&#8230;</p>

<p>The routing on the end routes every traffic from 172.17.*.* to my vagrant box, which in turn I&#8217;ll be able to use from my mac local, like 127.0.0.1:8153/go/home.</p>

<p>After a vagrant up, my box is ready to be used.</p>

<h4 id="docker">Docker</h4>

<p>When that&#8217;s finished, we can move on to the next part, which is writing a little Dockerfile for our image. Go.cd will require java and a couple of other things, so let&#8217;s automate the installation of that so we don&#8217;t have to do it by hand.</p>

<p>Here is a Dockerfile I came up with:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">FROM ubuntu
MAINTAINER Skarlso
&nbsp;
<span style="color: #666666; font-style: italic;">############ SETUP #############</span>
RUN <span style="color: #c20cb9; font-weight: bold;">apt-get update</span>
RUN <span style="color: #c20cb9; font-weight: bold;">apt-get install</span> <span style="color: #660033;">-y</span> software-properties-common python-software-properties
RUN add-apt-repository <span style="color: #660033;">-y</span> <span style="color: #ff0000;">"ppa:webupd8team/java"</span>
RUN <span style="color: #7a0874; font-weight: bold;">echo</span> <span style="color: #c20cb9; font-weight: bold;">debconf</span> shared<span style="color: #000000; font-weight: bold;">/</span>accepted-oracle-license-v1-<span style="color: #000000;">1</span> <span style="color: #000000; font-weight: bold;">select</span> <span style="color: #c20cb9; font-weight: bold;">true</span> <span style="color: #000000; font-weight: bold;">|</span> <span style="color: #c20cb9; font-weight: bold;">sudo</span> debconf-set-selections <span style="color: #000000; font-weight: bold;">&</span>amp;<span style="color: #000000; font-weight: bold;">&</span>amp; <span style="color: #7a0874; font-weight: bold;">echo</span> <span style="color: #c20cb9; font-weight: bold;">debconf</span> shared<span style="color: #000000; font-weight: bold;">/</span>accepted-oracle-license-v1-<span style="color: #000000;">1</span> seen <span style="color: #c20cb9; font-weight: bold;">true</span> <span style="color: #000000; font-weight: bold;">|</span> <span style="color: #c20cb9; font-weight: bold;">sudo</span> debconf-set-selections
RUN <span style="color: #c20cb9; font-weight: bold;">apt-get update</span>
RUN <span style="color: #c20cb9; font-weight: bold;">apt-get install</span> <span style="color: #660033;">-y</span> oracle-java8-installer
RUN <span style="color: #c20cb9; font-weight: bold;">apt-get install</span> <span style="color: #660033;">-y</span> <span style="color: #c20cb9; font-weight: bold;">vim</span>
RUN <span style="color: #c20cb9; font-weight: bold;">apt-get install</span> <span style="color: #660033;">-y</span> <span style="color: #c20cb9; font-weight: bold;">unzip</span>
RUN <span style="color: #c20cb9; font-weight: bold;">apt-get install</span> <span style="color: #660033;">-y</span> <span style="color: #c20cb9; font-weight: bold;">git</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>So, our docker images have to be setup with Java as well for go.cd which I&#8217;m taking care of here, and a little bit extra, to add vim, and unzip, which is required for dpkg later.</p>

<p>At this point run: <strong>docker build -t ubuntu:go .</strong> -&gt; This will use the dockerfile and create the ubuntu:go image. Note the <strong>. </strong>at the end.</p>

<h4 id="go-cd">Go.cd</h4>

<p>Now, I&#8217;m creating two containers. One, go-server, will be the go server, and the other, go-agent, will be the go agent.</p>

<p>First, go-server:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">docker run <span style="color: #660033;">-i</span> <span style="color: #660033;">-t</span> <span style="color: #660033;">--name</span> go-server <span style="color: #660033;">--hostname</span>=go-server <span style="color: #660033;">-p</span> <span style="color: #000000;">8153</span>:<span style="color: #000000;">8153</span> ubuntu:go <span style="color: #000000; font-weight: bold;">/</span>bin<span style="color: #000000; font-weight: bold;">/</span><span style="color: #c20cb9; font-weight: bold;">bash</span>
<span style="color: #c20cb9; font-weight: bold;">wget</span> http:<span style="color: #000000; font-weight: bold;">//</span>download.go.cd<span style="color: #000000; font-weight: bold;">/</span>gocd-deb<span style="color: #000000; font-weight: bold;">/</span>go-server-15.1.0-<span style="color: #000000;">1863</span>.deb
<span style="color: #c20cb9; font-weight: bold;">dpkg</span> <span style="color: #660033;">-i</span> go-server-15.1.0-<span style="color: #000000;">1863</span>.deb</pre>
      </td>
    </tr>
  </table>
</div>

<p>Pretty straight forward, no? We forward 8153 to vagrant (which forwards it to my mac), so after we start go-server service we should be able to visit: <a href="http://127.0.0.1:8153/go/home">http://127.0.0.1:8153/go/home</a>.</p>

<p>Lo&#8217;, and behold, go server. Let&#8217;s add an agent too.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">docker run <span style="color: #660033;">-i</span> <span style="color: #660033;">-t</span> <span style="color: #660033;">--name</span> go-agent <span style="color: #660033;">--hostname</span>=go-agent ubuntu:go <span style="color: #000000; font-weight: bold;">/</span>bin<span style="color: #000000; font-weight: bold;">/</span><span style="color: #c20cb9; font-weight: bold;">bash</span>
<span style="color: #c20cb9; font-weight: bold;">wget</span> http:<span style="color: #000000; font-weight: bold;">//</span>download.go.cd<span style="color: #000000; font-weight: bold;">/</span>gocd-deb<span style="color: #000000; font-weight: bold;">/</span>go-agent-15.1.0-<span style="color: #000000;">1863</span>.deb
<span style="color: #c20cb9; font-weight: bold;">dpkg</span> <span style="color: #660033;">-i</span> go-agent-15.1.0-<span style="color: #000000;">1863</span>.deb
<span style="color: #c20cb9; font-weight: bold;">vim</span> <span style="color: #000000; font-weight: bold;">/</span>etc<span style="color: #000000; font-weight: bold;">/</span>default<span style="color: #000000; font-weight: bold;">/</span>go-agent
<span style="color: #007800;">GO_SERVER</span>=172.17.0.1
service go-agent start</pre>
      </td>
    </tr>
  </table>
</div>

<p>No need to forward anything here. And as you can see, my agent was added successfully.</p>

<p>All nice, and dandy. The agent is there, and I enabled it, so it&#8217;s ready to work. Let&#8217;s give it something to do, shall we?</p>

<h1 id="the-app">The App</h1>

<p>I&#8217;m going to use my gradle project which is on github. This one =&gt; <a href="https://github.com/Skarlso/DataMung.git">https://github.com/Skarlso/DataMung.git</a>.</p>

<p>Very basic setup. Just check it out and then build &amp; run tests. Easy, right?</p>

<p>First step in this process, define the pipeline. I&#8217;m going to keep it simple. Name the pipeline DataMunger. Group is Linux. Now, in go.cd you have to define something called, an <strong>environment</strong>. Environment can be anything you want, I&#8217;m going to go with Linux. You have to assign <strong>agents</strong> to this environment who fulfil it and the pipeline which will use that environment. More on that you can read in the go.cd documentation. This is how you would handle a pipeline which uses linux, and a windows environment at the same time.</p>

<p>In step one you have to define something called the <strong>Material</strong>. That will be the source on which the agent will work. This can be multiple, in different folders within the confines of the pipeline, or singular.</p>

<p>I defined my git project and tested the connection OK. Next up is the first <strong>Stage </strong>and the initial <strong>Job </strong>to perform. This, for me, will be a compile or an assemble, and later on a test run.</p>

<p>Now, Go is awesome in parallelising jobs. If my project would be large enough, I could have multiple jobs here. But for now, I&#8217;ll use stages because they run subsequently. So, first stage, compile. Next stage, testing and archiving the results.</p>

<p>I added the next stage and defined the artefact. Go supports test-reports. If you define the path to a test artefact than go will parse it and create a nice report out of it.</p>

<p>Now, let&#8217;s run it. It will probably fail on something. 😉</p>

<p>Well, I&#8217;ll be&#8230; It worked on the first run.</p>

<p>And here are the test results.</p>

<h1 id="wrap-up">Wrap-up</h1>

<p>Well, that&#8217;s it folks. Gradle project, with vagrant, docker, and go.cd. I hope you all enjoyed reading about it as much as I did doing it.</p>

<p>Any questions, please feel free to ask it in the comment section below.</p>

<p>Cheers,
Have a nice weekend,
Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>Setting up a new Laptop with Puppet</title>
			<link>https://skarlso.github.io/2015/05/21/setting-up-a-new-laptop-with-puppet/</link>
			<pubDate>Thu, 21 May 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/05/21/setting-up-a-new-laptop-with-puppet/</guid>
			<description>Hello folks.
So, some of you know puppet, some of you don&amp;#8217;t. Puppet is a configuration management system. It&amp;#8217;s quite awesome. I like working with it. One of the benefits of puppet is, that I never, ever, EVER have to setup a new laptop from scratch, EVER again.
I&amp;#8217;m writing a puppet manifest file which sets up my new laptop to my liking. I will improve it as I go along.</description>
			<content type="html"><![CDATA[<p>Hello folks.</p>

<p>So, some of you know <a href="https://puppetlabs.com/" target="_blank">puppet</a>, some of you don&#8217;t. Puppet is a configuration management system. It&#8217;s quite awesome. I like working with it. One of the benefits of puppet is, that I never, ever, EVER have to setup a new laptop from scratch, EVER again.</p>

<p>I&#8217;m writing a puppet manifest file which sets up my new laptop to my liking. I will improve it as I go along. Here is version 1.0.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="ruby" style="font-family:monospace;"><span style="color:#008000; font-style:italic;"># include apt</span>
&nbsp;
<span style="color:#9966CC; font-weight:bold;">class</span> base::basics <span style="color:#006600; font-weight:bold;">&#123;</span>
        <span style="color:#ff6633; font-weight:bold;">$packages</span> = <span style="color:#006600; font-weight:bold;">&#91;</span><span style="color:#996600;">'git'</span>, <span style="color:#996600;">'subversion'</span>, <span style="color:#996600;">'mc'</span>, <span style="color:#996600;">'vim'</span>, <span style="color:#996600;">'maven'</span>, <span style="color:#996600;">'gradle'</span><span style="color:#006600; font-weight:bold;">&#93;</span>
&nbsp;
        <span style="color:#CC0066; font-weight:bold;">exec</span> <span style="color:#006600; font-weight:bold;">&#123;</span> <span style="color:#996600;">"update"</span>:
                command <span style="color:#006600; font-weight:bold;">=&gt;</span> <span style="color:#996600;">"/usr/bin/apt-get update"</span>,
        <span style="color:#006600; font-weight:bold;">&#125;</span>
&nbsp;
        package <span style="color:#006600; font-weight:bold;">&#123;</span> <span style="color:#ff6633; font-weight:bold;">$packages</span>:
                <span style="color:#9966CC; font-weight:bold;">ensure</span> <span style="color:#006600; font-weight:bold;">=&gt;</span> installed,
                <span style="color:#CC0066; font-weight:bold;">require</span> <span style="color:#006600; font-weight:bold;">=&gt;</span> <span style="color:#CC0066; font-weight:bold;">Exec</span><span style="color:#006600; font-weight:bold;">&#91;</span><span style="color:#996600;">"update"</span><span style="color:#006600; font-weight:bold;">&#93;</span>,
        <span style="color:#006600; font-weight:bold;">&#125;</span>
&nbsp;
<span style="color:#006600; font-weight:bold;">&#125;</span>
&nbsp;
<span style="color:#9966CC; font-weight:bold;">class</span> base::skype <span style="color:#006600; font-weight:bold;">&#123;</span>
        <span style="color:#CC0066; font-weight:bold;">exec</span> <span style="color:#006600; font-weight:bold;">&#123;</span> <span style="color:#996600;">"add-arc"</span>:
                command <span style="color:#006600; font-weight:bold;">=&gt;</span> <span style="color:#996600;">"/usr/bin/dpkg --add-architecture i386"</span>,
        <span style="color:#006600; font-weight:bold;">&#125;</span>
&nbsp;
        <span style="color:#CC0066; font-weight:bold;">exec</span> <span style="color:#006600; font-weight:bold;">&#123;</span> <span style="color:#996600;">"add-repo-skype"</span>:
                command <span style="color:#006600; font-weight:bold;">=&gt;</span> <span style="color:#996600;">"/usr/bin/add-apt-repository <span style="color:#000099;">\"</span>deb http://archive.canonical.com/ <span style="color:#000099;">\$</span>(lsb_release -sc) partner<span style="color:#000099;">\"</span>"</span>,
                <span style="color:#CC0066; font-weight:bold;">require</span> <span style="color:#006600; font-weight:bold;">=&gt;</span> <span style="color:#CC0066; font-weight:bold;">Exec</span><span style="color:#006600; font-weight:bold;">&#91;</span><span style="color:#996600;">'add-arc'</span><span style="color:#006600; font-weight:bold;">&#93;</span>,
        <span style="color:#006600; font-weight:bold;">&#125;</span>
&nbsp;
        <span style="color:#CC0066; font-weight:bold;">exec</span> <span style="color:#006600; font-weight:bold;">&#123;</span> <span style="color:#996600;">"update-and-install"</span>:
                command <span style="color:#006600; font-weight:bold;">=&gt;</span> <span style="color:#996600;">"/usr/bin/apt-get update && /usr/bin/apt-get install skype"</span>,
                <span style="color:#CC0066; font-weight:bold;">require</span> <span style="color:#006600; font-weight:bold;">=&gt;</span> <span style="color:#CC0066; font-weight:bold;">Exec</span><span style="color:#006600; font-weight:bold;">&#91;</span><span style="color:#996600;">'add-repo-skype'</span><span style="color:#006600; font-weight:bold;">&#93;</span>,
        <span style="color:#006600; font-weight:bold;">&#125;</span>
<span style="color:#006600; font-weight:bold;">&#125;</span>
&nbsp;
<span style="color:#9966CC; font-weight:bold;">class</span> base::java8 <span style="color:#006600; font-weight:bold;">&#123;</span>
        <span style="color:#008000; font-style:italic;"># Automatically does an update afterwards</span>
        <span style="color:#008000; font-style:italic;"># apt::ppa { 'ppa:webupd8team/java': }</span>
        <span style="color:#CC0066; font-weight:bold;">exec</span> <span style="color:#006600; font-weight:bold;">&#123;</span> <span style="color:#996600;">"add-repo-java"</span>:
                command <span style="color:#006600; font-weight:bold;">=&gt;</span> <span style="color:#996600;">"/usr/bin/add-apt-repository -y <span style="color:#000099;">\"</span>ppa:webupd8team/java<span style="color:#000099;">\"</span> && /usr/bin/apt-get update"</span>
        <span style="color:#006600; font-weight:bold;">&#125;</span>
&nbsp;
        <span style="color:#CC0066; font-weight:bold;">exec</span> <span style="color:#006600; font-weight:bold;">&#123;</span> <span style="color:#996600;">"set-accept"</span>:
                command <span style="color:#006600; font-weight:bold;">=&gt;</span> <span style="color:#996600;">"/bin/echo /usr/bin/debconf shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections && /bin/echo /usr/bin/debconf shared/accepted-oracle-license-v1-1 seen true | sudo /usr/bin/debconf-set-selections"</span>,
                <span style="color:#CC0066; font-weight:bold;">require</span> <span style="color:#006600; font-weight:bold;">=&gt;</span> <span style="color:#CC0066; font-weight:bold;">Exec</span><span style="color:#006600; font-weight:bold;">&#91;</span><span style="color:#996600;">'add-repo-java'</span><span style="color:#006600; font-weight:bold;">&#93;</span>,
        <span style="color:#006600; font-weight:bold;">&#125;</span>
&nbsp;
        <span style="color:#CC0066; font-weight:bold;">exec</span> <span style="color:#006600; font-weight:bold;">&#123;</span> <span style="color:#996600;">"install"</span>:
                command <span style="color:#006600; font-weight:bold;">=&gt;</span> <span style="color:#996600;">"/usr/bin/apt-get install -y oracle-java8-installer"</span>,
                <span style="color:#CC0066; font-weight:bold;">require</span> <span style="color:#006600; font-weight:bold;">=&gt;</span> <span style="color:#CC0066; font-weight:bold;">Exec</span><span style="color:#006600; font-weight:bold;">&#91;</span><span style="color:#996600;">'set-accept'</span><span style="color:#006600; font-weight:bold;">&#93;</span>,
        <span style="color:#006600; font-weight:bold;">&#125;</span>
&nbsp;
        <span style="color:#CC0066; font-weight:bold;">exec</span> <span style="color:#006600; font-weight:bold;">&#123;</span> <span style="color:#996600;">"setup_home"</span>:
                command <span style="color:#006600; font-weight:bold;">=&gt;</span> <span style="color:#996600;">"/bin/echo <span style="color:#000099;">\"</span>export JDK18_HOME=/usr/lib/jvm/java-8-oracle/<span style="color:#000099;">\"</span> &gt;&gt; /etc/environment"</span>,
                <span style="color:#CC0066; font-weight:bold;">require</span> <span style="color:#006600; font-weight:bold;">=&gt;</span> <span style="color:#CC0066; font-weight:bold;">Exec</span><span style="color:#006600; font-weight:bold;">&#91;</span><span style="color:#996600;">'install'</span><span style="color:#006600; font-weight:bold;">&#93;</span>,
        <span style="color:#006600; font-weight:bold;">&#125;</span>
<span style="color:#006600; font-weight:bold;">&#125;</span>
&nbsp;
<span style="color:#9966CC; font-weight:bold;">include</span> base::basics
<span style="color:#9966CC; font-weight:bold;">include</span> base::skype
<span style="color:#9966CC; font-weight:bold;">include</span> base::java8</pre>
      </td>
    </tr>
  </table>
</div>

<p>I&#8217;ll improve upon it as I go, and you can check it out later from my git repo. I removed the parts which required extra libraries for now, as I want it to run without the need of getting extra stuff installed. I might automate that part as well later on.</p>

<p>EDIT: <a href="https://github.com/Skarlso/puppet/blob/master/manifests/base_setup.pp" target="_blank"><a href="https://github.com/Skarlso/puppet/blob/master/manifests/base_setup.pp">https://github.com/Skarlso/puppet/blob/master/manifests/base_setup.pp</a></a></p>

<p>Have fun.</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Busy building the future</title>
			<link>https://skarlso.github.io/2015/05/19/busy-building-the-future/</link>
			<pubDate>Tue, 19 May 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/05/19/busy-building-the-future/</guid>
			<description>Fact is, I&amp;#8217;ve been busy.
I&amp;#8217;ve got a new job as a build engineer. As sort of a devops kind of guy. It&amp;#8217;s extremely interesting considering that I made a career as a tester. Granted, I always was technical, and never really knew my path; but it seems my path is finding me after all.
In the past years, I got better at Docker, Puppet, Chef, AWS, Packer, Vagrant, Gradle, and a hell of a lot more.</description>
			<content type="html"><![CDATA[<p>Fact is, I&#8217;ve been busy.</p>

<p>I&#8217;ve got a new job as a build engineer. As sort of a devops kind of guy. It&#8217;s extremely interesting considering that I made a career as a tester. Granted, I always was technical, and never really knew my path; but it seems my path is finding me after all.</p>

<p>In the past years, I got better at Docker, Puppet, Chef, AWS, Packer, Vagrant, Gradle, and a hell of a lot more. Also honed my linux skills from the ability of doing an ls -l to do an find . -type f -atime +5 | xargs rm -fr (find all the files which are 5 days older and pipe them to a delete command). I already read many books about devops but this time, it&#8217;s different. This time, I can actually do these things as well in a live environment.</p>

<p>As once a friend of mine told me: &#8220;You ain&#8217;t gonna learn anything unless you are getting payed for it.&#8221; Wise words. True words.</p>

<p>So stayed tuned for some devops and engineering type posts. I would like to continue working on the Django parts as well, however given my priorities and lack of time ( family and stuff, must choose what I learned in the hour I get each day), it might fall behind. I might stick it into some kind of provision practice or even give it a Travis.ci and put it into a gradle project. Now THAT&#8217;S interesting.</p>

<p>Cheers folks.</p>

<p>And as always,</p>

<p>Thanks for reading.</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Django – RPG – Part 3</title>
			<link>https://skarlso.github.io/2015/04/21/django-rpg-part-3/</link>
			<pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/04/21/django-rpg-part-3/</guid>
			<description>Hello folks.
A small update to this. I created the model now, which is the database design for this app. It&amp;#8217;s very simple, nothing fancy. Also, I&amp;#8217;m writing the app with Python 3 from now on.
Here is the model now:
  from django.db import models from django.contrib.auth.models import User &amp;nbsp; # Create your models here. &amp;nbsp; &amp;nbsp; class Item&amp;#40;models.Model&amp;#41;: name = models.CharField&amp;#40;max_length=100, default=&#34;Item&#34;&amp;#41; damage = models.IntegerField&amp;#40;default=&amp;#41; defense = models.</description>
			<content type="html"><![CDATA[<p>Hello folks.</p>

<p>A small update to this. I created the model now, which is the database design for this app. It&#8217;s very simple, nothing fancy. Also, I&#8217;m writing the app with Python 3 from now on.</p>

<p>Here is the model now:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="python" style="font-family:monospace;"><span style="color: #ff7700;font-weight:bold;">from</span> django.<span style="color: black;">db</span> <span style="color: #ff7700;font-weight:bold;">import</span> models
<span style="color: #ff7700;font-weight:bold;">from</span> django.<span style="color: black;">contrib</span>.<span style="color: black;">auth</span>.<span style="color: black;">models</span> <span style="color: #ff7700;font-weight:bold;">import</span> User
&nbsp;
<span style="color: #808080; font-style: italic;"># Create your models here.</span>
&nbsp;
&nbsp;
<span style="color: #ff7700;font-weight:bold;">class</span> Item<span style="color: black;">&#40;</span>models.<span style="color: black;">Model</span><span style="color: black;">&#41;</span>:
    name <span style="color: #66cc66;">=</span> models.<span style="color: black;">CharField</span><span style="color: black;">&#40;</span>max_length<span style="color: #66cc66;">=</span><span style="color: #ff4500;">100</span><span style="color: #66cc66;">,</span> default<span style="color: #66cc66;">=</span><span style="color: #483d8b;">"Item"</span><span style="color: black;">&#41;</span>
    damage <span style="color: #66cc66;">=</span> models.<span style="color: black;">IntegerField</span><span style="color: black;">&#40;</span>default<span style="color: #66cc66;">=</span><span style="color: #ff4500;"></span><span style="color: black;">&#41;</span>
    defense <span style="color: #66cc66;">=</span> models.<span style="color: black;">IntegerField</span><span style="color: black;">&#40;</span>default<span style="color: #66cc66;">=</span><span style="color: #ff4500;"></span><span style="color: black;">&#41;</span>
    consumable <span style="color: #66cc66;">=</span> models.<span style="color: black;">BooleanField</span><span style="color: black;">&#40;</span>default<span style="color: #66cc66;">=</span><span style="color: #008000;">False</span><span style="color: black;">&#41;</span>
&nbsp;
    <span style="color: #ff7700;font-weight:bold;">def</span> <span style="color: #0000cd;">__str__</span><span style="color: black;">&#40;</span><span style="color: #008000;">self</span><span style="color: black;">&#41;</span>:
        <span style="color: #ff7700;font-weight:bold;">return</span> <span style="color: #008000;">self</span>.<span style="color: black;">name</span>
&nbsp;
&nbsp;
<span style="color: #ff7700;font-weight:bold;">class</span> Inventory<span style="color: black;">&#40;</span>models.<span style="color: black;">Model</span><span style="color: black;">&#41;</span>:
    items <span style="color: #66cc66;">=</span> models.<span style="color: black;">ManyToManyField</span><span style="color: black;">&#40;</span>Item<span style="color: black;">&#41;</span>
&nbsp;
    <span style="color: #ff7700;font-weight:bold;">def</span> <span style="color: #0000cd;">__str__</span><span style="color: black;">&#40;</span><span style="color: #008000;">self</span><span style="color: black;">&#41;</span>:
        <span style="color: #ff7700;font-weight:bold;">return</span> <span style="color: #008000;">self</span>.<span style="color: black;">items</span>
&nbsp;
&nbsp;
<span style="color: #ff7700;font-weight:bold;">class</span> Character<span style="color: black;">&#40;</span>models.<span style="color: black;">Model</span><span style="color: black;">&#41;</span>:
    <span style="color: #808080; font-style: italic;"># By default Django uses the primery key of the related object.</span>
    <span style="color: #808080; font-style: italic;"># Hence, no need to specify User.id.</span>
    <span style="color: #dc143c;">user</span> <span style="color: #66cc66;">=</span> models.<span style="color: black;">OneToOneField</span><span style="color: black;">&#40;</span>User<span style="color: #66cc66;">,</span> null<span style="color: #66cc66;">=</span><span style="color: #008000;">True</span><span style="color: black;">&#41;</span>
    name <span style="color: #66cc66;">=</span> models.<span style="color: black;">CharField</span><span style="color: black;">&#40;</span>max_length<span style="color: #66cc66;">=</span><span style="color: #ff4500;">100</span><span style="color: black;">&#41;</span>
    inventory <span style="color: #66cc66;">=</span> models.<span style="color: black;">ForeignKey</span><span style="color: black;">&#40;</span>Inventory<span style="color: black;">&#41;</span>
&nbsp;
    <span style="color: #ff7700;font-weight:bold;">def</span> <span style="color: #0000cd;">__str__</span><span style="color: black;">&#40;</span><span style="color: #008000;">self</span><span style="color: black;">&#41;</span>:
        <span style="color: #ff7700;font-weight:bold;">return</span> <span style="color: #008000;">self</span>.<span style="color: black;">name</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Worth noting a few things here. The __str__ is only with Python 3. In Python 2 it would be unicode. And the OneToOne and the foreign key are automatically using Primary keys defined in the references model. The __str__ is there to return some view when you are debugging in the console instead of [<Item: Item object>].</p>

<p>In order to apply this change you just have to run this commend (given you set up your app in the settings.py as an INSTALLED_APP):</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">python manage.py makemigrations polls</pre>
      </td>
    </tr>
  </table>
</div>

<p>This creates the migration script. And this applies it:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">python manage.py migrate</pre>
      </td>
    </tr>
  </table>
</div>

<p>I love the fact that django creates incremental migration scripts out of the box. So if there was any problem at all, you can always roll back. Which comes very handy in certain situations.</p>

<p>That&#8217;s it.</p>

<p>Thanks for reading!</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Django – RPG – Part 2</title>
			<link>https://skarlso.github.io/2015/04/12/django-rpg-part-2/</link>
			<pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/04/12/django-rpg-part-2/</guid>
			<description>&lt;p&gt;Hello.&lt;/p&gt;

&lt;p&gt;Continuing where we left off with the Django RPG project. Next up is implementing a rudimentary registration and adding the ability to create a character. Maybe even, design the database through django&amp;#8217;s modelling.&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Hello.</p>

<p>Continuing where we left off with the Django RPG project. Next up is implementing a rudimentary registration and adding the ability to create a character. Maybe even, design the database through django&#8217;s modelling.</p>

<p>Since we are using Django&#8217;s very own authentication model, I think we are covered in terms of users. Let&#8217;s add two things for now. An Index page, where there is a link to login and a link to registration.</p>

<p>Adding the index first. Later I would like to switch to a base template model, but for now, I created a simple index.html page. That only contains the two links to the two views. The views are a simple function call in the views.py too which the URLConfig will later point to.</p>

<p>For now, the index function looks like this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="python" style="font-family:monospace;"><span style="color: #ff7700;font-weight:bold;">def</span> index<span style="color: black;">&#40;</span>request<span style="color: black;">&#41;</span>:
    title <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">"My RPG"</span>
    <span style="color: #ff7700;font-weight:bold;">return</span> render_to_response<span style="color: black;">&#40;</span><span style="color: #483d8b;">'index.html'</span><span style="color: #66cc66;">,</span> <span style="color: black;">&#123;</span><span style="color: #483d8b;">'title'</span>:title<span style="color: black;">&#125;</span><span style="color: black;">&#41;</span>
myrpg/rpg/views.<span style="color: black;">py</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Note, that the title here is utterly unimportant but because I want to switch to a base.html template I&#8217;ll leave it here for later usage.</p>

<p>That concludes the index. Now, let&#8217;s create the registration. That is a little more complex, but still rather easy. We are just checking of the user already exists or not, if so, display and error, if not, create the user.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="python" style="font-family:monospace;"><span style="color: #ff7700;font-weight:bold;">def</span> registration<span style="color: black;">&#40;</span>request<span style="color: black;">&#41;</span>:
    state <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">"Please register."</span>
    username <span style="color: #66cc66;">=</span> password <span style="color: #66cc66;">=</span> <span style="color: #dc143c;">email</span> <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">''</span>
    <span style="color: #ff7700;font-weight:bold;">if</span> request.<span style="color: black;">POST</span>:
        username <span style="color: #66cc66;">=</span> request.<span style="color: black;">POST</span>.<span style="color: black;">get</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'username'</span><span style="color: black;">&#41;</span>
        <span style="color: #dc143c;">email</span> <span style="color: #66cc66;">=</span> request.<span style="color: black;">POST</span>.<span style="color: black;">get</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'email'</span><span style="color: black;">&#41;</span>
        password <span style="color: #66cc66;">=</span> request.<span style="color: black;">POST</span>.<span style="color: black;">get</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'password'</span><span style="color: black;">&#41;</span>
        <span style="color: #ff7700;font-weight:bold;">if</span> User.<span style="color: black;">objects</span>.<span style="color: #008000;">filter</span><span style="color: black;">&#40;</span>username <span style="color: #66cc66;">=</span> username<span style="color: black;">&#41;</span>.<span style="color: black;">exists</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>:
            <span style="color: #808080; font-style: italic;"># raise forms.ValidationError("Username %s is already in use." % username)</span>
            state <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">"Username %s is already in use. Please try another."</span> % username
        <span style="color: #ff7700;font-weight:bold;">else</span>:
            <span style="color: #ff7700;font-weight:bold;">try</span>:
                <span style="color: #dc143c;">user</span> <span style="color: #66cc66;">=</span> User.<span style="color: black;">objects</span>.<span style="color: black;">create_user</span><span style="color: black;">&#40;</span>username <span style="color: #66cc66;">=</span> username<span style="color: #66cc66;">,</span> <span style="color: #dc143c;">email</span> <span style="color: #66cc66;">=</span> <span style="color: #dc143c;">email</span><span style="color: #66cc66;">,</span> password <span style="color: #66cc66;">=</span> password<span style="color: black;">&#41;</span>
                state <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">"Thank you for registering with us %s!"</span> % <span style="color: #dc143c;">user</span>.<span style="color: black;">username</span> 
            <span style="color: #ff7700;font-weight:bold;">except</span>:
                state <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">"Unexpected error occured: %s"</span> % <span style="color: #dc143c;">sys</span>.<span style="color: black;">exc_info</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: black;">&#91;</span><span style="color: #ff4500;"></span><span style="color: black;">&#93;</span>
&nbsp;
    <span style="color: #ff7700;font-weight:bold;">return</span> render_to_response<span style="color: black;">&#40;</span><span style="color: #483d8b;">'registration.html'</span><span style="color: #66cc66;">,</span> <span style="color: black;">&#123;</span><span style="color: #483d8b;">'state'</span>: state<span style="color: black;">&#125;</span><span style="color: #66cc66;">,</span> context_instance <span style="color: #66cc66;">=</span> RequestContext<span style="color: black;">&#40;</span>request<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
myrpg/rpg/views.<span style="color: black;">py</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Here, I&#8217;m checking to see of the username already exists with the filter. This is by using Django&#8217;s model which models the database like hibernate. It&#8217;s a simple query. And I&#8217;m doing this, because this is faster than raising an exception. Later on, I&#8217;ll be switching to a validation framework and django&#8217;s own auth view. Because, why not.</p>

<p>The URL conf looks like this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="python" style="font-family:monospace;"><span style="color: #ff7700;font-weight:bold;">from</span> django.<span style="color: black;">conf</span>.<span style="color: black;">urls</span> <span style="color: #ff7700;font-weight:bold;">import</span> url
&nbsp;
<span style="color: #ff7700;font-weight:bold;">from</span> . <span style="color: #ff7700;font-weight:bold;">import</span> views
&nbsp;
urlpatterns <span style="color: #66cc66;">=</span> <span style="color: black;">&#91;</span>
    url<span style="color: black;">&#40;</span>r<span style="color: #483d8b;">'^$'</span><span style="color: #66cc66;">,</span> views.<span style="color: black;">index</span><span style="color: #66cc66;">,</span> name<span style="color: #66cc66;">=</span><span style="color: #483d8b;">'index'</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">,</span>
    url<span style="color: black;">&#40;</span>r<span style="color: #483d8b;">'^login/$'</span><span style="color: #66cc66;">,</span> views.<span style="color: black;">login_user</span><span style="color: #66cc66;">,</span> name<span style="color: #66cc66;">=</span><span style="color: #483d8b;">'login'</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">,</span>
    url<span style="color: black;">&#40;</span>r<span style="color: #483d8b;">'^registration/$'</span><span style="color: #66cc66;">,</span> views.<span style="color: black;">registration</span><span style="color: #66cc66;">,</span> name<span style="color: #66cc66;">=</span><span style="color: #483d8b;">'registration'</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">,</span>
<span style="color: black;">&#93;</span>
myrpg/rpg/urls.<span style="color: black;">py</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>And this now, resides in a file under the RPG app and not the main one. The main one includes this one, like this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="python" style="font-family:monospace;"><span style="color: #ff7700;font-weight:bold;">from</span> django.<span style="color: black;">conf</span>.<span style="color: black;">urls</span> <span style="color: #ff7700;font-weight:bold;">import</span> include<span style="color: #66cc66;">,</span> url
<span style="color: #ff7700;font-weight:bold;">from</span> django.<span style="color: black;">contrib</span> <span style="color: #ff7700;font-weight:bold;">import</span> admin
&nbsp;
urlpatterns <span style="color: #66cc66;">=</span> <span style="color: black;">&#91;</span>
    <span style="color: #808080; font-style: italic;"># Examples:</span>
    <span style="color: #808080; font-style: italic;"># url(r'^$', 'myrpg.views.home', name='home'),</span>
    <span style="color: #808080; font-style: italic;"># url(r'^blog/', include('blog.urls')),</span>
&nbsp;
    url<span style="color: black;">&#40;</span>r<span style="color: #483d8b;">'^admin/'</span><span style="color: #66cc66;">,</span> include<span style="color: black;">&#40;</span>admin.<span style="color: #dc143c;">site</span>.<span style="color: black;">urls</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">,</span>
    url<span style="color: black;">&#40;</span>r<span style="color: #483d8b;">'^rpg/'</span><span style="color: #66cc66;">,</span> include<span style="color: black;">&#40;</span><span style="color: #483d8b;">'rpg.urls'</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">,</span>
<span style="color: black;">&#93;</span>
myrpg/urls.<span style="color: black;">py</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>That&#8217;s it for now. As always, you can check out the code under github.</p>

<p>Tune in next time, when I&#8217;ll attempt to create a view to create a Character for a logged in user and link it to the user. I&#8217;ll do this with django&#8217;s model framework.</p>

<p>Thanks for reading,</p>

<p>Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>Django – RPG – Part 1</title>
			<link>https://skarlso.github.io/2015/04/10/django-rpg-2/</link>
			<pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/04/10/django-rpg-2/</guid>
			<description>&lt;p&gt;Hi folks.&lt;/p&gt;

&lt;p&gt;So last time, we tried to implement a little RPG of mine using Meteor, which failed miserably. This time we are going to try and use Django. Let&amp;#8217;s have at it, shall we?&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Hi folks.</p>

<p>So last time, we tried to implement a little RPG of mine using Meteor, which failed miserably. This time we are going to try and use Django. Let&#8217;s have at it, shall we?</p>

<p>If you don&#8217;t know what django is (than you are probably not reading this blog entry anyways&#8230; ), have a look =&gt; <a href="https://www.djangoproject.com/" target="_blank">Link</a>. It&#8217;s a Python Web Framework.</p>

<h1 id="in-the-beginning">In the beginning</h1>

<p>So here we are again. I&#8217;m starting off by creating the skeleton for my RPG. First, the welcome page with a tiny login capability. Which means session tracking. For now, on the same page.</p>

<p>To create the skeleton I just run this little command:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">django-admin.py startproject myrpg</pre>
      </td>
    </tr>
  </table>
</div>

<p>Easy enough, right? Basic directory structure is created. You can read that in django&#8217;s own documentation: <a href="https://docs.djangoproject.com/en/1.8/intro/tutorial01/" target="_blank"><a href="https://docs.djangoproject.com/en/1.8/intro/tutorial01/">https://docs.djangoproject.com/en/1.8/intro/tutorial01/</a></a></p>

<p>I&#8217;m using Sublime Text 3 to build this app. I was thinking of pycharm, but that would take away too much fun.</p>

<p>By default Django uses SQLlite and I&#8217;m okay with that.</p>

<p>The basics are there. Let&#8217;s move to higher ground. The next step can be to design the login page. I&#8217;m not much of a designer so I&#8217;ll leave that part to people who care more / understand it better. I&#8217;m only looking for a simple Login with a username and a password. Nothing fancy. And I&#8217;m going to use Django&#8217;s auth system for users: <tt class="xref py py-mod docutils literal"><span class="pre"><a class="reference internal" title="django.contrib.auth: Django's authentication framework." href="https://docs.djangoproject.com/en/1.8/topics/auth/#module-django.contrib.auth" target="_blank">django.contrib.auth</a>.</span></tt></p>

<p>It&#8217;s pretty good, has lots of features and can auth a user pretty quickly given a username and password, which is all I want for now.</p>

<p>I running a migrate command to create all the necessary tables and data:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="python" style="font-family:monospace;">python manage.<span style="color: black;">py</span> migrate</pre>
      </td>
    </tr>
  </table>
</div>

<p>A quick check with sqlite3 and running <strong>.schema </strong>showed me that the tables are indeed created and filled with default data for all the <strong>INSTALLED_APPS </strong>django has at the moment.</p>

<p>I did a quick check with <em>python manage.py runserver</em> and everything seems to work fine.</p>

<h1 id="the-rpg-app">The RPG App</h1>

<p>So, that concludes the setup. Following the tutorial, django has this notion of apps and projects. In short, a project is a set of configurations and applications which forms a website. Hence, I&#8217;m going to create an RPG APP for now. The tutorial continues with a Poll type of App, but I&#8217;m sure I can apply the same things to a login page.</p>

<p>First, let&#8217;s create the App using the command:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="python" style="font-family:monospace;">python manage.<span style="color: black;">py</span> startapp rpg</pre>
      </td>
    </tr>
  </table>
</div>

<p>That creates the skeleton for the app. The tutorial then suggests to define the database first. Which I think is a bad idea; usually when doing design, you don&#8217;t want to start with the database model. But for now, I shall comply. We want a login page and we are using the auth module, which means, for now, I don&#8217;t care about the database. Skip.</p>

<p>I&#8217;m going to go off corse for now, since I only want to create a basic login. For that, I have to read up on views and models a little bit in order to create a simple login page. Be right back&#8230;</p>

<p>I&#8217;m fighting the basic auth system at the moment. Everything seems to be working fine. In the Admin screen I was able to add a basic user to do some debugging, but for now, the login seems to not work with this error:</p>

<p><strong><span style="color: #ff6600;">CSRF verification failed. Request aborted.</span></strong></p>

<p>This is the CSRF protection which came out with Django. I did a bit of more document reading and setup the CSRF as was described here:</p>

<p><a href="https://docs.djangoproject.com/en/1.8/ref/csrf/" target="_blank"><a href="https://docs.djangoproject.com/en/1.8/ref/csrf/">https://docs.djangoproject.com/en/1.8/ref/csrf/</a></a></p>

<p>However, I&#8217;m still facing the same problem. Let&#8217;s research further&#8230; Ahh yes. I wasn&#8217;t returning the request context I&#8217;ve set up. Before:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="python" style="font-family:monospace;"><span style="color: #ff7700;font-weight:bold;">from</span> django.<span style="color: black;">shortcuts</span> <span style="color: #ff7700;font-weight:bold;">import</span> render_to_response
<span style="color: #ff7700;font-weight:bold;">from</span> django.<span style="color: black;">contrib</span>.<span style="color: black;">auth</span> <span style="color: #ff7700;font-weight:bold;">import</span> authenticate<span style="color: #66cc66;">,</span> login
<span style="color: #ff7700;font-weight:bold;">from</span> django.<span style="color: black;">template</span>.<span style="color: black;">context_processors</span> <span style="color: #ff7700;font-weight:bold;">import</span> csrf
&nbsp;
<span style="color: #ff7700;font-weight:bold;">def</span> login_user<span style="color: black;">&#40;</span>request<span style="color: black;">&#41;</span>:
    c <span style="color: #66cc66;">=</span> <span style="color: black;">&#123;</span><span style="color: black;">&#125;</span>
    c.<span style="color: black;">update</span><span style="color: black;">&#40;</span>csrf<span style="color: black;">&#40;</span>request<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
    state <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">"Please log in below..."</span>
    username <span style="color: #66cc66;">=</span> password <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">''</span>
    <span style="color: #ff7700;font-weight:bold;">if</span> request.<span style="color: black;">POST</span>:
        username <span style="color: #66cc66;">=</span> request.<span style="color: black;">POST</span>.<span style="color: black;">get</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'username'</span><span style="color: black;">&#41;</span>
        password <span style="color: #66cc66;">=</span> request.<span style="color: black;">POST</span>.<span style="color: black;">get</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'password'</span><span style="color: black;">&#41;</span>
&nbsp;
        <span style="color: #dc143c;">user</span> <span style="color: #66cc66;">=</span> authenticate<span style="color: black;">&#40;</span>username<span style="color: #66cc66;">=</span>username<span style="color: #66cc66;">,</span> password<span style="color: #66cc66;">=</span>password<span style="color: black;">&#41;</span>
        <span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: #dc143c;">user</span> <span style="color: #ff7700;font-weight:bold;">is</span> <span style="color: #ff7700;font-weight:bold;">not</span> <span style="color: #008000;">None</span>:
            <span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: #dc143c;">user</span>.<span style="color: black;">is_active</span>:
                login<span style="color: black;">&#40;</span>request<span style="color: #66cc66;">,</span> <span style="color: #dc143c;">user</span><span style="color: black;">&#41;</span>
                state <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">"You're successfully logged in!"</span>
            <span style="color: #ff7700;font-weight:bold;">else</span>:
                state <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">"Your account is not active, please contact the site admin."</span>
        <span style="color: #ff7700;font-weight:bold;">else</span>:
            state <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">"Your username and/or password were incorrect."</span>
&nbsp;
    <span style="color: #ff7700;font-weight:bold;">return</span> render_to_response<span style="color: black;">&#40;</span><span style="color: #483d8b;">'auth.html'</span><span style="color: #66cc66;">,</span><span style="color: black;">&#123;</span><span style="color: #483d8b;">'state'</span>:state<span style="color: #66cc66;">,</span> <span style="color: #483d8b;">'username'</span>: username<span style="color: black;">&#125;</span><span style="color: black;">&#41;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>After:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="python" style="font-family:monospace;"><span style="color: #ff7700;font-weight:bold;">from</span> django.<span style="color: black;">shortcuts</span> <span style="color: #ff7700;font-weight:bold;">import</span> render_to_response
<span style="color: #ff7700;font-weight:bold;">from</span> django.<span style="color: black;">contrib</span>.<span style="color: black;">auth</span> <span style="color: #ff7700;font-weight:bold;">import</span> authenticate<span style="color: #66cc66;">,</span> login
<span style="color: #ff7700;font-weight:bold;">from</span> django.<span style="color: black;">template</span>.<span style="color: black;">context_processors</span> <span style="color: #ff7700;font-weight:bold;">import</span> csrf
<span style="color: #ff7700;font-weight:bold;">from</span> django.<span style="color: black;">template</span> <span style="color: #ff7700;font-weight:bold;">import</span> RequestContext
&nbsp;
<span style="color: #ff7700;font-weight:bold;">def</span> login_user<span style="color: black;">&#40;</span>request<span style="color: black;">&#41;</span>:
    state <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">"Please log in below..."</span>
    username <span style="color: #66cc66;">=</span> password <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">''</span>
    <span style="color: #ff7700;font-weight:bold;">if</span> request.<span style="color: black;">POST</span>:
        username <span style="color: #66cc66;">=</span> request.<span style="color: black;">POST</span>.<span style="color: black;">get</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'username'</span><span style="color: black;">&#41;</span>
        password <span style="color: #66cc66;">=</span> request.<span style="color: black;">POST</span>.<span style="color: black;">get</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'password'</span><span style="color: black;">&#41;</span>
&nbsp;
        <span style="color: #dc143c;">user</span> <span style="color: #66cc66;">=</span> authenticate<span style="color: black;">&#40;</span>username<span style="color: #66cc66;">=</span>username<span style="color: #66cc66;">,</span> password<span style="color: #66cc66;">=</span>password<span style="color: black;">&#41;</span>
        <span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: #dc143c;">user</span> <span style="color: #ff7700;font-weight:bold;">is</span> <span style="color: #ff7700;font-weight:bold;">not</span> <span style="color: #008000;">None</span>:
            <span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: #dc143c;">user</span>.<span style="color: black;">is_active</span>:
                login<span style="color: black;">&#40;</span>request<span style="color: #66cc66;">,</span> <span style="color: #dc143c;">user</span><span style="color: black;">&#41;</span>
                state <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">"You're successfully logged in!"</span>
            <span style="color: #ff7700;font-weight:bold;">else</span>:
                state <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">"Your account is not active, please contact the site admin."</span>
        <span style="color: #ff7700;font-weight:bold;">else</span>:
            state <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">"Your username and/or password were incorrect."</span>
&nbsp;
    <span style="color: #ff7700;font-weight:bold;">return</span> render_to_response<span style="color: black;">&#40;</span><span style="color: #483d8b;">'auth.html'</span><span style="color: #66cc66;">,</span><span style="color: black;">&#123;</span><span style="color: #483d8b;">'state'</span>:state<span style="color: #66cc66;">,</span> <span style="color: #483d8b;">'username'</span>: username<span style="color: black;">&#125;</span><span style="color: #66cc66;">,</span> context_instance<span style="color: #66cc66;">=</span>RequestContext<span style="color: black;">&#40;</span>request<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Notice that now I&#8217;m returning the request context at the end when I&#8217;m rendering the response. And lo&#8217; and behold, my login is now working.</p>

<h1 id="progress-so-far">Progress so far</h1>

<p>&nbsp;</p>

<p>So, I&#8217;ve set up a user using the Admin portal accessible from the app / admin. Created my default rpg app, and added my default auth view into a template folder. Configured the URL setting in <strong>urls.py</strong> to look like this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="python" style="font-family:monospace;">url<span style="color: black;">&#40;</span>r<span style="color: #483d8b;">'^login/$'</span><span style="color: #66cc66;">,</span> <span style="color: #483d8b;">'rpg.views.login_user'</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">,</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Very basic for now, but when I return to it, we are going to clean it up and then continue with implementing the main screen which will greet the user and display some stats about his/her character.</p>

<p>The whole code is under github here =&gt; <a href="https://github.com/Skarlso/myrpg" target="_blank"><a href="https://github.com/Skarlso/myrpg">https://github.com/Skarlso/myrpg</a></a></p>

<p>Bye for now,</p>

<p>And thanks for reading.</p>

<p>Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>Small Python GUI to Calculate Lever Distance</title>
			<link>https://skarlso.github.io/2015/04/10/small-python-gui-to-calculate-lever-distance/</link>
			<pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/04/10/small-python-gui-to-calculate-lever-distance/</guid>
			<description>Hi folks.
Just a small script which calculates your distance from a lever focal point if you know your weight, the object&amp;#8217;s weight and the object&amp;#8217;s and the distance the object has from the focal point of the lever.
Like this:
This script will give you D1. And this is how it will look like in doing so:
So, in order for me (77kg) to lift an object of 80kg which is on a, by default, 1 meter long lever, I have to stand back ~1.</description>
			<content type="html"><![CDATA[<p>Hi folks.</p>

<p>Just a small script which calculates your distance from a lever focal point if you know your weight, the object&#8217;s weight and the object&#8217;s and the distance the object has from the focal point of the lever.</p>

<p>Like this:</p>

<p>This script will give you D1. And this is how it will look like in doing so:</p>

<p>So, in order for me (77kg) to lift an object of 80kg which is on a, by default, 1 meter long lever, I have to stand back ~1.03meters. Which is totally cool, right?</p>

<p>Here is the code:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="python" style="font-family:monospace;"><span style="color: #ff7700;font-weight:bold;">from</span> <span style="color: #dc143c;">Tkinter</span> <span style="color: #ff7700;font-weight:bold;">import</span> *
<span style="color: #ff7700;font-weight:bold;">import</span> ttk
&nbsp;
<span style="color: #ff7700;font-weight:bold;">def</span> calculate<span style="color: black;">&#40;</span>*args<span style="color: black;">&#41;</span>:
    <span style="color: #ff7700;font-weight:bold;">try</span>:
        your_weight_value <span style="color: #66cc66;">=</span> <span style="color: #008000;">float</span><span style="color: black;">&#40;</span>your_weight.<span style="color: black;">get</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
        object_weight_value <span style="color: #66cc66;">=</span> <span style="color: #008000;">float</span><span style="color: black;">&#40;</span>object_weight.<span style="color: black;">get</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
        object_distance_value <span style="color: #66cc66;">=</span> <span style="color: #008000;">float</span><span style="color: black;">&#40;</span>object_distance.<span style="color: black;">get</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
        your_distance.<span style="color: #008000;">set</span><span style="color: black;">&#40;</span><span style="color: black;">&#40;</span>object_weight_value * object_distance_value<span style="color: black;">&#41;</span> / your_weight_value<span style="color: black;">&#41;</span>
    <span style="color: #ff7700;font-weight:bold;">except</span> <span style="color: #008000;">ValueError</span>:
        <span style="color: #ff7700;font-weight:bold;">pass</span>
&nbsp;
root <span style="color: #66cc66;">=</span> Tk<span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
root.<span style="color: black;">title</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">"Lever distance counter"</span><span style="color: black;">&#41;</span>
&nbsp;
mainframe <span style="color: #66cc66;">=</span> ttk.<span style="color: black;">Frame</span><span style="color: black;">&#40;</span>root<span style="color: #66cc66;">,</span> padding<span style="color: #66cc66;">=</span><span style="color: #483d8b;">"4 4 12 12"</span><span style="color: black;">&#41;</span>
mainframe.<span style="color: black;">grid</span><span style="color: black;">&#40;</span>column<span style="color: #66cc66;">=</span><span style="color: #ff4500;"></span><span style="color: #66cc66;">,</span> row<span style="color: #66cc66;">=</span><span style="color: #ff4500;"></span><span style="color: #66cc66;">,</span> sticky<span style="color: #66cc66;">=</span><span style="color: black;">&#40;</span>N<span style="color: #66cc66;">,</span> W<span style="color: #66cc66;">,</span> E<span style="color: #66cc66;">,</span> S<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
mainframe.<span style="color: black;">columnconfigure</span><span style="color: black;">&#40;</span><span style="color: #ff4500;"></span><span style="color: #66cc66;">,</span> weight<span style="color: #66cc66;">=</span><span style="color: #ff4500;">1</span><span style="color: black;">&#41;</span>
mainframe.<span style="color: black;">rowconfigure</span><span style="color: black;">&#40;</span><span style="color: #ff4500;"></span><span style="color: #66cc66;">,</span> weight<span style="color: #66cc66;">=</span><span style="color: #ff4500;">1</span><span style="color: black;">&#41;</span>
&nbsp;
your_weight <span style="color: #66cc66;">=</span> StringVar<span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
object_weight <span style="color: #66cc66;">=</span> StringVar<span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
object_distance <span style="color: #66cc66;">=</span> StringVar<span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
your_distance <span style="color: #66cc66;">=</span> StringVar<span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
&nbsp;
object_distance.<span style="color: #008000;">set</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">"1"</span><span style="color: black;">&#41;</span>
&nbsp;
your_weight_entry <span style="color: #66cc66;">=</span> ttk.<span style="color: black;">Entry</span><span style="color: black;">&#40;</span>mainframe<span style="color: #66cc66;">,</span> width<span style="color: #66cc66;">=</span><span style="color: #ff4500;">7</span><span style="color: #66cc66;">,</span> textvariable<span style="color: #66cc66;">=</span>your_weight<span style="color: black;">&#41;</span>
your_weight_entry.<span style="color: black;">grid</span><span style="color: black;">&#40;</span>column<span style="color: #66cc66;">=</span><span style="color: #ff4500;">2</span><span style="color: #66cc66;">,</span> row<span style="color: #66cc66;">=</span><span style="color: #ff4500;">1</span><span style="color: #66cc66;">,</span> sticky<span style="color: #66cc66;">=</span><span style="color: black;">&#40;</span>W<span style="color: #66cc66;">,</span> E<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
object_weight_entry <span style="color: #66cc66;">=</span> ttk.<span style="color: black;">Entry</span><span style="color: black;">&#40;</span>mainframe<span style="color: #66cc66;">,</span> width<span style="color: #66cc66;">=</span><span style="color: #ff4500;">7</span><span style="color: #66cc66;">,</span> textvariable<span style="color: #66cc66;">=</span>object_weight<span style="color: black;">&#41;</span>
object_weight_entry.<span style="color: black;">grid</span><span style="color: black;">&#40;</span>column<span style="color: #66cc66;">=</span><span style="color: #ff4500;">2</span><span style="color: #66cc66;">,</span> row<span style="color: #66cc66;">=</span><span style="color: #ff4500;">2</span><span style="color: #66cc66;">,</span> sticky<span style="color: #66cc66;">=</span><span style="color: black;">&#40;</span>W<span style="color: #66cc66;">,</span> E<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
object_distance_entry <span style="color: #66cc66;">=</span> ttk.<span style="color: black;">Entry</span><span style="color: black;">&#40;</span>mainframe<span style="color: #66cc66;">,</span> width<span style="color: #66cc66;">=</span><span style="color: #ff4500;">7</span><span style="color: #66cc66;">,</span> textvariable<span style="color: #66cc66;">=</span>object_distance<span style="color: black;">&#41;</span>
object_distance_entry.<span style="color: black;">grid</span><span style="color: black;">&#40;</span>column<span style="color: #66cc66;">=</span><span style="color: #ff4500;">2</span><span style="color: #66cc66;">,</span> row<span style="color: #66cc66;">=</span><span style="color: #ff4500;">4</span><span style="color: #66cc66;">,</span> sticky<span style="color: #66cc66;">=</span><span style="color: black;">&#40;</span>W<span style="color: #66cc66;">,</span> E<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
&nbsp;
&nbsp;
ttk.<span style="color: black;">Label</span><span style="color: black;">&#40;</span>mainframe<span style="color: #66cc66;">,</span> textvariable<span style="color: #66cc66;">=</span>your_distance<span style="color: black;">&#41;</span>.<span style="color: black;">grid</span><span style="color: black;">&#40;</span>column<span style="color: #66cc66;">=</span><span style="color: #ff4500;">2</span><span style="color: #66cc66;">,</span> row<span style="color: #66cc66;">=</span><span style="color: #ff4500;">3</span><span style="color: #66cc66;">,</span> sticky<span style="color: #66cc66;">=</span><span style="color: black;">&#40;</span>W<span style="color: #66cc66;">,</span> E<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
ttk.<span style="color: black;">Label</span><span style="color: black;">&#40;</span>mainframe<span style="color: #66cc66;">,</span> text<span style="color: #66cc66;">=</span><span style="color: #483d8b;">"Your weight"</span><span style="color: black;">&#41;</span>.<span style="color: black;">grid</span><span style="color: black;">&#40;</span>column<span style="color: #66cc66;">=</span><span style="color: #ff4500;">1</span><span style="color: #66cc66;">,</span> row<span style="color: #66cc66;">=</span><span style="color: #ff4500;">1</span><span style="color: #66cc66;">,</span> sticky<span style="color: #66cc66;">=</span>W<span style="color: black;">&#41;</span>
ttk.<span style="color: black;">Label</span><span style="color: black;">&#40;</span>mainframe<span style="color: #66cc66;">,</span> text<span style="color: #66cc66;">=</span><span style="color: #483d8b;">"Object weight"</span><span style="color: black;">&#41;</span>.<span style="color: black;">grid</span><span style="color: black;">&#40;</span>column<span style="color: #66cc66;">=</span><span style="color: #ff4500;">1</span><span style="color: #66cc66;">,</span> row<span style="color: #66cc66;">=</span><span style="color: #ff4500;">2</span><span style="color: #66cc66;">,</span> sticky<span style="color: #66cc66;">=</span>W<span style="color: black;">&#41;</span>
ttk.<span style="color: black;">Label</span><span style="color: black;">&#40;</span>mainframe<span style="color: #66cc66;">,</span> text<span style="color: #66cc66;">=</span><span style="color: #483d8b;">"Object Distance"</span><span style="color: black;">&#41;</span>.<span style="color: black;">grid</span><span style="color: black;">&#40;</span>column<span style="color: #66cc66;">=</span><span style="color: #ff4500;">1</span><span style="color: #66cc66;">,</span> row<span style="color: #66cc66;">=</span><span style="color: #ff4500;">3</span><span style="color: #66cc66;">,</span> sticky<span style="color: #66cc66;">=</span>W<span style="color: black;">&#41;</span>
ttk.<span style="color: black;">Label</span><span style="color: black;">&#40;</span>mainframe<span style="color: #66cc66;">,</span> text<span style="color: #66cc66;">=</span><span style="color: #483d8b;">"Your Distance"</span><span style="color: black;">&#41;</span>.<span style="color: black;">grid</span><span style="color: black;">&#40;</span>column<span style="color: #66cc66;">=</span><span style="color: #ff4500;">1</span><span style="color: #66cc66;">,</span> row<span style="color: #66cc66;">=</span><span style="color: #ff4500;">4</span><span style="color: #66cc66;">,</span> sticky<span style="color: #66cc66;">=</span>W<span style="color: black;">&#41;</span>
&nbsp;
ttk.<span style="color: black;">Label</span><span style="color: black;">&#40;</span>mainframe<span style="color: #66cc66;">,</span> text<span style="color: #66cc66;">=</span><span style="color: #483d8b;">"kg"</span><span style="color: black;">&#41;</span>.<span style="color: black;">grid</span><span style="color: black;">&#40;</span>column<span style="color: #66cc66;">=</span><span style="color: #ff4500;">3</span><span style="color: #66cc66;">,</span> row<span style="color: #66cc66;">=</span><span style="color: #ff4500;">1</span><span style="color: #66cc66;">,</span> sticky<span style="color: #66cc66;">=</span>W<span style="color: black;">&#41;</span>
ttk.<span style="color: black;">Label</span><span style="color: black;">&#40;</span>mainframe<span style="color: #66cc66;">,</span> text<span style="color: #66cc66;">=</span><span style="color: #483d8b;">"kg"</span><span style="color: black;">&#41;</span>.<span style="color: black;">grid</span><span style="color: black;">&#40;</span>column<span style="color: #66cc66;">=</span><span style="color: #ff4500;">3</span><span style="color: #66cc66;">,</span> row<span style="color: #66cc66;">=</span><span style="color: #ff4500;">2</span><span style="color: #66cc66;">,</span> sticky<span style="color: #66cc66;">=</span>W<span style="color: black;">&#41;</span>
ttk.<span style="color: black;">Label</span><span style="color: black;">&#40;</span>mainframe<span style="color: #66cc66;">,</span> text<span style="color: #66cc66;">=</span><span style="color: #483d8b;">"m"</span><span style="color: black;">&#41;</span>.<span style="color: black;">grid</span><span style="color: black;">&#40;</span>column<span style="color: #66cc66;">=</span><span style="color: #ff4500;">3</span><span style="color: #66cc66;">,</span> row<span style="color: #66cc66;">=</span><span style="color: #ff4500;">3</span><span style="color: #66cc66;">,</span> sticky<span style="color: #66cc66;">=</span>W<span style="color: black;">&#41;</span>
ttk.<span style="color: black;">Label</span><span style="color: black;">&#40;</span>mainframe<span style="color: #66cc66;">,</span> text<span style="color: #66cc66;">=</span><span style="color: #483d8b;">"m"</span><span style="color: black;">&#41;</span>.<span style="color: black;">grid</span><span style="color: black;">&#40;</span>column<span style="color: #66cc66;">=</span><span style="color: #ff4500;">3</span><span style="color: #66cc66;">,</span> row<span style="color: #66cc66;">=</span><span style="color: #ff4500;">4</span><span style="color: #66cc66;">,</span> sticky<span style="color: #66cc66;">=</span>W<span style="color: black;">&#41;</span>
&nbsp;
ttk.<span style="color: black;">Button</span><span style="color: black;">&#40;</span>mainframe<span style="color: #66cc66;">,</span> text<span style="color: #66cc66;">=</span><span style="color: #483d8b;">"Calculate"</span><span style="color: #66cc66;">,</span> command<span style="color: #66cc66;">=</span>calculate<span style="color: black;">&#41;</span>.<span style="color: black;">grid</span><span style="color: black;">&#40;</span>column<span style="color: #66cc66;">=</span><span style="color: #ff4500;">3</span><span style="color: #66cc66;">,</span> row<span style="color: #66cc66;">=</span><span style="color: #ff4500;">5</span><span style="color: #66cc66;">,</span> sticky<span style="color: #66cc66;">=</span>W<span style="color: black;">&#41;</span>
&nbsp;
<span style="color: #ff7700;font-weight:bold;">for</span> child <span style="color: #ff7700;font-weight:bold;">in</span> mainframe.<span style="color: black;">winfo_children</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>: child.<span style="color: black;">grid_configure</span><span style="color: black;">&#40;</span>padx<span style="color: #66cc66;">=</span><span style="color: #ff4500;">5</span><span style="color: #66cc66;">,</span> pady<span style="color: #66cc66;">=</span><span style="color: #ff4500;">5</span><span style="color: black;">&#41;</span>
&nbsp;
your_weight_entry.<span style="color: black;">focus</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
root.<span style="color: black;">bind</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">''</span><span style="color: #66cc66;">,</span> calculate<span style="color: black;">&#41;</span>
&nbsp;
root.<span style="color: black;">mainloop</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Please enjoy, and feel free to alter in any way. I&#8217;m using Tkinter and a grid layout which I find very easy to work with.</p>

<p>Thanks for reading,
Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Python and my Math commitment</title>
			<link>https://skarlso.github.io/2015/03/15/python-and-my-math-commitment/</link>
			<pubDate>Sun, 15 Mar 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/03/15/python-and-my-math-commitment/</guid>
			<description>Let&amp;#8217;s talk about plans. It&amp;#8217;s good to have one. For example, I have a plan for this year.
I kind of like math. So, I have this book:
It&amp;#8217;s 1400 pages long and basically, has everything in it. It&amp;#8217;s a rather exhaustive book. Hence, my plan is to finish the book by the end of 2015 and write a couple of python scripts that calculate something interesting.
For example, Newton&amp;#8217;s law of cooling how I learned it is:</description>
			<content type="html"><![CDATA[<p>Let&#8217;s talk about plans. It&#8217;s good to have one. For example, I have a plan for this year.</p>

<p>I kind of like math. So, I have this book:</p>

<p>It&#8217;s 1400 pages long and basically, has everything in it. It&#8217;s a rather exhaustive book. Hence, my plan is to finish the book by the end of 2015 and write a couple of python scripts that calculate something interesting.</p>

<p>For example, Newton&#8217;s law of cooling how I learned it is:</p>

<p><img src="http://www.forkosh.com/mathtex.cgi?t=k*log_{2.5}\frac{T_0-K}{T-K}" style="float:top;" border="0px" /></p>

<p>Where k =&gt; a material&#8217;s surface based constant. Tzero =&gt; initial temperature. T =&gt; target temperature. K =&gt; Environment&#8217;s temperature.</p>

<p>A simple python script for this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="python" style="font-family:monospace;"><span style="color: #808080; font-style: italic;"># Calculating Newton's law of Cooling</span>
<span style="color: #ff7700;font-weight:bold;">from</span> <span style="color: #dc143c;">__future__</span> <span style="color: #ff7700;font-weight:bold;">import</span> division
<span style="color: #ff7700;font-weight:bold;">import</span> <span style="color: #dc143c;">sys</span>
<span style="color: #ff7700;font-weight:bold;">from</span> <span style="color: #dc143c;">math</span> <span style="color: #ff7700;font-weight:bold;">import</span> log
&nbsp;
<span style="color: #ff7700;font-weight:bold;">def</span> calculation<span style="color: black;">&#40;</span>k<span style="color: #66cc66;">,</span> Tz<span style="color: #66cc66;">,</span> T<span style="color: #66cc66;">,</span> K<span style="color: black;">&#41;</span>:
    res <span style="color: #66cc66;">=</span> <span style="color: black;">&#40;</span>Tz - K<span style="color: black;">&#41;</span>/<span style="color: black;">&#40;</span>T - K<span style="color: black;">&#41;</span>
    <span style="color: #ff7700;font-weight:bold;">return</span> k * <span style="color: black;">&#40;</span>log<span style="color: black;">&#40;</span>res<span style="color: #66cc66;">,</span> <span style="color: #ff4500;">2.5</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
&nbsp;
k <span style="color: #66cc66;">=</span> <span style="color: #dc143c;">sys</span>.<span style="color: black;">argv</span><span style="color: black;">&#91;</span><span style="color: #ff4500;">1</span><span style="color: black;">&#93;</span>
Tz <span style="color: #66cc66;">=</span> <span style="color: #dc143c;">sys</span>.<span style="color: black;">argv</span><span style="color: black;">&#91;</span><span style="color: #ff4500;">2</span><span style="color: black;">&#93;</span>
T <span style="color: #66cc66;">=</span> <span style="color: #dc143c;">sys</span>.<span style="color: black;">argv</span><span style="color: black;">&#91;</span><span style="color: #ff4500;">3</span><span style="color: black;">&#93;</span>
K <span style="color: #66cc66;">=</span> <span style="color: #dc143c;">sys</span>.<span style="color: black;">argv</span><span style="color: black;">&#91;</span><span style="color: #ff4500;">4</span><span style="color: black;">&#93;</span>
&nbsp;
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">"Calculating aproximate temperature for given parameters: k=%s, Tz=%sC, T=%sC, K=%sC"</span> % <span style="color: black;">&#40;</span>k<span style="color: #66cc66;">,</span> Tz<span style="color: #66cc66;">,</span> T<span style="color: #66cc66;">,</span> K<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
&nbsp;
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">&#40;</span>calculation<span style="color: black;">&#40;</span><span style="color: #008000;">float</span><span style="color: black;">&#40;</span>k<span style="color: black;">&#41;</span><span style="color: #66cc66;">,</span> <span style="color: #008000;">float</span><span style="color: black;">&#40;</span>Tz<span style="color: black;">&#41;</span><span style="color: #66cc66;">,</span> <span style="color: #008000;">float</span><span style="color: black;">&#40;</span>T<span style="color: black;">&#41;</span><span style="color: #66cc66;">,</span> <span style="color: #008000;">float</span><span style="color: black;">&#40;</span>K<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Enjoy.</p>

<p>And as always,
Thanks for reading!</p>
]]></content>
		</item>
		
		<item>
			<title>Sphere Judge Online – Python Kivy Android app – Part 2</title>
			<link>https://skarlso.github.io/2015/03/02/sphere-judge-online-python-kivy-android-app-part-2/</link>
			<pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/03/02/sphere-judge-online-python-kivy-android-app-part-2/</guid>
			<description>&lt;p&gt;Here we are again. I will attempt to further this little journey of mine into the land of Android and Python.&lt;/p&gt;

&lt;p&gt;This is the second part of the advanture you can read the first one a little bit back.&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Here we are again. I will attempt to further this little journey of mine into the land of Android and Python.</p>

<p>This is the second part of the advanture you can read the first one a little bit back.</p>

<h1 style="text-align: center;">
  The Script
</h1>

<p>&nbsp;</p>

<p>We left off at a point where I successfully configured my environment and compiled my first hello world APK. At that point it took a little bit fiddling to get it to work on my phone.</p>

<p>Now, I have progressed a little bit into spoj&#8217;s page parsing. The code so far is as follows:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="python" style="font-family:monospace;">__author__ <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">'hannibal'</span>
&nbsp;
<span style="color: #ff7700;font-weight:bold;">import</span> requests
<span style="color: #ff7700;font-weight:bold;">from</span> <span style="color: #dc143c;">random</span> <span style="color: #ff7700;font-weight:bold;">import</span> randint
<span style="color: #ff7700;font-weight:bold;">import</span> lxml.<span style="color: black;">html</span> <span style="color: #ff7700;font-weight:bold;">as</span> lh
&nbsp;
random_page_number <span style="color: #66cc66;">=</span> randint<span style="color: black;">&#40;</span><span style="color: #ff4500;"></span><span style="color: #66cc66;">,</span> <span style="color: #ff4500;">63</span><span style="color: black;">&#41;</span> <span style="color: #808080; font-style: italic;"># 63 being the maximum page number at spoj</span>
r <span style="color: #66cc66;">=</span> requests.<span style="color: black;">get</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">"http://www.spoj.com/problems/classical/sort=0,start=%d"</span> % <span style="color: black;">&#40;</span>random_page_number * <span style="color: #ff4500;">50</span> - <span style="color: #ff4500;">50</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
<span style="color: #808080; font-style: italic;"># Problem Div XPath =&gt; //[@class="problems"]</span>
&nbsp;
spoj_page <span style="color: #66cc66;">=</span> lh.<span style="color: black;">document_fromstring</span><span style="color: black;">&#40;</span>r.<span style="color: black;">text</span><span style="color: black;">&#41;</span>
links_to_problems <span style="color: #66cc66;">=</span> spoj_page<span style="color: black;">&#91;</span><span style="color: #ff4500;"></span><span style="color: black;">&#93;</span>.<span style="color: black;">xpath</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">"//tr[@class='problemrow']/td[2]/a"</span><span style="color: black;">&#41;</span>
&nbsp;
current_link <span style="color: #66cc66;">=</span> links_to_problems<span style="color: black;">&#91;</span>randint<span style="color: black;">&#40;</span><span style="color: #ff4500;"></span><span style="color: #66cc66;">,</span> <span style="color: #008000;">len</span><span style="color: black;">&#40;</span>links_to_problems<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span><span style="color: black;">&#93;</span>
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">&#40;</span>current_link.<span style="color: black;">attrib</span><span style="color: black;">&#91;</span><span style="color: #483d8b;">'href'</span><span style="color: black;">&#93;</span><span style="color: black;">&#41;</span>
r <span style="color: #66cc66;">=</span> requests.<span style="color: black;">get</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">"http://www.spoj.com/%s"</span> % current_link.<span style="color: black;">attrib</span><span style="color: black;">&#91;</span><span style="color: #483d8b;">'href'</span><span style="color: black;">&#93;</span><span style="color: black;">&#41;</span>
&nbsp;
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">&#40;</span>r.<span style="color: black;">text</span>.<span style="color: black;">encode</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">"utf-8"</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>This is pretty straight forward so far. It gets the problems page, loads in all of the links and prints it out.</p>

<p>My goal is an application which looks something like this:</p>

<p>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>___</p>

<p>|   _<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>  |</p>

<p>|  |                                                                           | |</p>

<p>|  |                                                                           | |</p>

<p>|  |                    Display Problem Description               | |</p>

<p>|  |                                                                           | |</p>

<p>|  |                                                                           | |</p>

<p>|  |                                                                           | |</p>

<p>|  |_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_____ | |</p>

<p>|                                                                                 |</p>

<p>|                                                                                 |</p>

<p>|                         Button:Finish Problem                        |</p>

<p>|                                                                                 |</p>

<p>|                         Button:Next Problem                          |</p>

<p>|_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>__ |</p>

<p>It&#8217;s very basic. When it loads up, it will gather and display a new problem. You have two options, either get a new one, or save / finish this item, saying you never want to see it again.</p>

<p>Let&#8217;s put the first part into an android app. Just gather data, and get it disaplyed.</p>

<p>*Queue a days worth of hacking and frustrated cussing.*</p>

<p>So, turns out it&#8217;s not as easy as I would have liked it to be. I ran into some pretty nasty problems. Some of them I&#8217;ll write down below for the record, and an attempted solution as well.</p>

<h1 style="text-align: center;">
  Problems
</h1>

<p><strong>#1:</strong> <strong>Problem:</strong> Libraries. I&#8217;m using lxml and requests. Requests is a pure python library, but lxml is partially C. Which apparently is not very well supported yet.</p>

<p><strong>Solution (Partial):</strong> I could optain request by two ways, but the most simple one, was basically just building my distribution with the optional requests module like this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">.<span style="color: #000000; font-weight: bold;">/</span>distribute.sh <span style="color: #660033;">-m</span> <span style="color: #ff0000;">"openssl pil requests kivy"</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Attempting to do the same with LXML resulted in a compile issue which I tracked down to something like: &#8220;sorry, but we don&#8217;t support OSX&#8221;. But it&#8217;s okay. There are other ways to parse an html page, I just really like the xpath filter. So I soldiered on with trying to get something to work at least.</p>

<p><strong>#3: Problem:</strong> <em>Bogus compile time exception.</em> There were some exceptions on the way when I was trying to compile with buildozer. <strong>Solution:</strong> It&#8217;s interesting because previously my solution to another compile time issue was to use a specific version of Cython. But this time the solution was to actually remove that version and install the latest one. Which is 0.22 as of the time of this writing. So:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;"><span style="color: #c20cb9; font-weight: bold;">sudo</span> pip update cython</pre>
      </td>
    </tr>
  </table>
</div>

<p><strong>#2: Problem:</strong> Connection. So now, I&#8217;m down to the bare bone. At this point, I just want to see a page source in a label. My code looks like this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="python" style="font-family:monospace;"><span style="color: #ff7700;font-weight:bold;">import</span> kivy
kivy.<span style="color: black;">require</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'1.8.0'</span><span style="color: black;">&#41;</span>
<span style="color: #ff7700;font-weight:bold;">from</span> kivy.<span style="color: black;">lang</span> <span style="color: #ff7700;font-weight:bold;">import</span> Builder
<span style="color: #ff7700;font-weight:bold;">from</span> kivy.<span style="color: black;">uix</span>.<span style="color: black;">gridlayout</span> <span style="color: #ff7700;font-weight:bold;">import</span> GridLayout
<span style="color: #ff7700;font-weight:bold;">from</span> kivy.<span style="color: black;">properties</span> <span style="color: #ff7700;font-weight:bold;">import</span> NumericProperty
<span style="color: #ff7700;font-weight:bold;">from</span> kivy.<span style="color: black;">app</span> <span style="color: #ff7700;font-weight:bold;">import</span> App
&nbsp;
<span style="color: #ff7700;font-weight:bold;">import</span> requests
<span style="color: #ff7700;font-weight:bold;">from</span> <span style="color: #dc143c;">random</span> <span style="color: #ff7700;font-weight:bold;">import</span> randint
<span style="color: #808080; font-style: italic;"># import lxml.html as lh</span>
&nbsp;
<span style="color: #808080; font-style: italic;"># import sys</span>
<span style="color: #808080; font-style: italic;"># sys.path.append('/sdcard/com.googlecode.pythonforandroid/extras/python/site-packages')</span>
&nbsp;
&nbsp;
Builder.<span style="color: black;">load_string</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'''
:
    cols: 1
    Label:
        text: root.get_problem()
    Button:
        text: 'Click me! %d' % root.counter
        on_release: root.my_callback()
'''</span><span style="color: black;">&#41;</span>
&nbsp;
<span style="color: #ff7700;font-weight:bold;">class</span> SpojAppScreen<span style="color: black;">&#40;</span>GridLayout<span style="color: black;">&#41;</span>:
    counter <span style="color: #66cc66;">=</span> NumericProperty<span style="color: black;">&#40;</span><span style="color: #ff4500;"></span><span style="color: black;">&#41;</span>
    <span style="color: #ff7700;font-weight:bold;">def</span> my_callback<span style="color: black;">&#40;</span><span style="color: #008000;">self</span><span style="color: black;">&#41;</span>:
        <span style="color: #ff7700;font-weight:bold;">print</span> <span style="color: #483d8b;">'The button has been pushed'</span>
        <span style="color: #008000;">self</span>.<span style="color: black;">counter</span> +<span style="color: #66cc66;">=</span> <span style="color: #ff4500;">1</span>
&nbsp;
    <span style="color: #ff7700;font-weight:bold;">def</span> get_problem<span style="color: black;">&#40;</span><span style="color: #008000;">self</span><span style="color: black;">&#41;</span>:
        random_page_number <span style="color: #66cc66;">=</span> randint<span style="color: black;">&#40;</span><span style="color: #ff4500;"></span><span style="color: #66cc66;">,</span> <span style="color: #ff4500;">63</span><span style="color: black;">&#41;</span> <span style="color: #808080; font-style: italic;"># 63 being the maximum page number at spoj</span>
        r <span style="color: #66cc66;">=</span> requests.<span style="color: black;">get</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">"http://www.spoj.com/problems/classical/sort=0,start=%d"</span> % <span style="color: black;">&#40;</span>random_page_number * <span style="color: #ff4500;">50</span> - <span style="color: #ff4500;">50</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
&nbsp;
        <span style="color: #808080; font-style: italic;"># Problem Div XPath =&gt; //[@class="problems"]</span>
&nbsp;
        <span style="color: #808080; font-style: italic;"># spoj_page = lh.document_fromstring(r.text)</span>
        <span style="color: #808080; font-style: italic;"># links_to_problems = spoj_page[0].xpath("//tr[@class='problemrow']/td[2]/a")</span>
&nbsp;
        <span style="color: #808080; font-style: italic;"># current_link = links_to_problems[randint(0, len(links_to_problems))]</span>
        <span style="color: #808080; font-style: italic;"># print(current_link.attrib['href'])</span>
        <span style="color: #808080; font-style: italic;"># r = requests.get("http://www.spoj.com/%s" % current_link.attrib['href'])</span>
        <span style="color: #808080; font-style: italic;"># print(r.text.encode("utf-8"))</span>
        <span style="color: #ff7700;font-weight:bold;">return</span> r.<span style="color: black;">text</span>.<span style="color: black;">encode</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">"utf-8"</span><span style="color: black;">&#41;</span>
&nbsp;
<span style="color: #ff7700;font-weight:bold;">class</span> SpojApp<span style="color: black;">&#40;</span>App<span style="color: black;">&#41;</span>:
    <span style="color: #ff7700;font-weight:bold;">def</span> build<span style="color: black;">&#40;</span><span style="color: #008000;">self</span><span style="color: black;">&#41;</span>:
        <span style="color: #ff7700;font-weight:bold;">return</span> SpojAppScreen<span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
&nbsp;
<span style="color: #ff7700;font-weight:bold;">if</span> __name__ <span style="color: #66cc66;">==</span> <span style="color: #483d8b;">'__main__'</span>:
    SpojApp<span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>.<span style="color: black;">run</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>However, running this results in a connection error in adb logcat:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">I<span style="color: #000000; font-weight: bold;">/</span>python  <span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">27610</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>:  kivy.lang.BuilderException: Parser: File <span style="color: #ff0000;">""</span>, line <span style="color: #000000;">5</span>:
I<span style="color: #000000; font-weight: bold;">/</span>python  <span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">27610</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>:  ...
I<span style="color: #000000; font-weight: bold;">/</span>python  <span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">27610</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>:        <span style="color: #000000;">3</span>:    cols: <span style="color: #000000;">1</span>
I<span style="color: #000000; font-weight: bold;">/</span>python  <span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">27610</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>:        <span style="color: #000000;">4</span>:    Label:
I<span style="color: #000000; font-weight: bold;">/</span>python  <span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">27610</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>:  <span style="color: #000000; font-weight: bold;">&</span>gt;<span style="color: #000000; font-weight: bold;">&</span>gt;    <span style="color: #000000;">5</span>:        text: root.get_problem<span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>
I<span style="color: #000000; font-weight: bold;">/</span>python  <span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">27610</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>:        <span style="color: #000000;">6</span>:    Button:
I<span style="color: #000000; font-weight: bold;">/</span>python  <span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">27610</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>:        <span style="color: #000000;">7</span>:        text: <span style="color: #ff0000;">'Click me! %d'</span> <span style="color: #000000; font-weight: bold;">%</span> root.counter
I<span style="color: #000000; font-weight: bold;">/</span>python  <span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">27610</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>:  ...
I<span style="color: #000000; font-weight: bold;">/</span>python  <span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">27610</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>:  BuilderException: Parser: File <span style="color: #ff0000;">""</span>, line <span style="color: #000000;">5</span>:
I<span style="color: #000000; font-weight: bold;">/</span>python  <span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">27610</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>:  ...
I<span style="color: #000000; font-weight: bold;">/</span>python  <span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">27610</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>:        <span style="color: #000000;">3</span>:    cols: <span style="color: #000000;">1</span>
I<span style="color: #000000; font-weight: bold;">/</span>python  <span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">27610</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>:        <span style="color: #000000;">4</span>:    Label:
I<span style="color: #000000; font-weight: bold;">/</span>python  <span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">27610</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>:  <span style="color: #000000; font-weight: bold;">&</span>gt;<span style="color: #000000; font-weight: bold;">&</span>gt;    <span style="color: #000000;">5</span>:        text: root.get_problem<span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>
I<span style="color: #000000; font-weight: bold;">/</span>python  <span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">27610</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>:        <span style="color: #000000;">6</span>:    Button:
I<span style="color: #000000; font-weight: bold;">/</span>python  <span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">27610</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>:        <span style="color: #000000;">7</span>:        text: <span style="color: #ff0000;">'Click me! %d'</span> <span style="color: #000000; font-weight: bold;">%</span> root.counter
I<span style="color: #000000; font-weight: bold;">/</span>python  <span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">27610</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>:  ...
I<span style="color: #000000; font-weight: bold;">/</span>python  <span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">27610</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>:  ConnectionError: <span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #ff0000;">'Connection aborted.'</span>, gaierror<span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">4</span>, <span style="color: #ff0000;">'non-recoverable failure in name resolution.'</span><span style="color: #7a0874; font-weight: bold;">&#41;</span><span style="color: #7a0874; font-weight: bold;">&#41;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p><strong>Solution:</strong> I tried simply putting out a random number at some point, which actullay worked, so I know it&#8217;s the connection. I&#8217;m guessing I need permission to access the network. Which would be this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="xml" style="font-family:monospace;">uses-permission android:name="android.permission.INTERNET"</pre>
      </td>
    </tr>
  </table>
</div>

<p>And yes! Building and installing it with this additional permission got me so far as I can display the web page&#8217;s content in a label.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">.<span style="color: #000000; font-weight: bold;">/</span>build.py <span style="color: #660033;">--package</span> org.spoj <span style="color: #660033;">--permission</span> INTERNET <span style="color: #660033;">--name</span> <span style="color: #ff0000;">"Spoj"</span> <span style="color: #660033;">--version</span> <span style="color: #000000;">1.0</span> <span style="color: #660033;">--dir</span> <span style="color: #000000; font-weight: bold;">/</span>Users<span style="color: #000000; font-weight: bold;">/</span>hannibal<span style="color: #000000; font-weight: bold;">/</span>PythonProjects<span style="color: #000000; font-weight: bold;">/</span>spoj<span style="color: #000000; font-weight: bold;">/</span> debug</pre>
      </td>
    </tr>
  </table>
</div>

<p>There is a saying that you should end on a high note, so that is what I&#8217;m going to do here right now. Join me next time, when I&#8217;ll try to replace lxml with something else&#8230;</p>

<p>Thanks for reading!</p>

<p>Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>Sphere Judge Online – Python Kivy Android app</title>
			<link>https://skarlso.github.io/2015/02/26/sphere-judge-online-python-kivy-android-app/</link>
			<pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/02/26/sphere-judge-online-python-kivy-android-app/</guid>
			<description>&lt;p&gt;Hello folks.&lt;/p&gt;

&lt;p&gt;Today I would like to take you on a journey I fought myself through in order to write a python android app, which gets you a random problem from &lt;a href=&#34;http://www.spoj.com/problems/classical/&#34; target=&#34;_blank&#34;&gt;Sphere Judge Online&lt;/a&gt;. Then you can mark it as solved and it will be stored as such, and you can move on to the next problem. With the words of Neil deGrasse Tyson, Come with Me!&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Hello folks.</p>

<p>Today I would like to take you on a journey I fought myself through in order to write a python android app, which gets you a random problem from <a href="http://www.spoj.com/problems/classical/" target="_blank">Sphere Judge Online</a>. Then you can mark it as solved and it will be stored as such, and you can move on to the next problem. With the words of Neil deGrasse Tyson, Come with Me!</p>

<h1 style="text-align: center;">
  Beginnings
</h1>

<p>When I first embarked on this endeavour I ran into numerous errors, many amongst them being compilation issues when I was trying to install libraries.</p>

<p>I started to write down all of these, and then started fresh on a new machine. I realised that ALL of my problems where only because of <strong>ONE </strong>thing. One thing, which I wanted to do, but it ended up being the death of me. And that is&#8230;. *Drummrolls* <strong>Python 3. </strong>I tried doing all the things that I started to do, with Python 3. Turns out, that neither libraries are supporting it very well yet. And that&#8217;s including Cython as well, which I thought would be up to speed by now. But sadly, it&#8217;s not.</p>

<h1 style="text-align: center;">
  Prerequisite
</h1>

<p>In order to go any further we need a few things first. For this to work, you&#8217;ll have to perform these things in order as I found out later. And certain versions of certain libraries are required instead of the latest ones.</p>

<p>Depending on the environment you are using, you need to install python-dev and some other graphic libraries. I followed this and that was fine. Latest packages are working alright.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;"><span style="color: #c20cb9; font-weight: bold;">sudo</span> <span style="color: #c20cb9; font-weight: bold;">apt-get install</span> build-essential <span style="color: #c20cb9; font-weight: bold;">patch</span> git-core ccache ant python-pip python-dev
<span style="color: #c20cb9; font-weight: bold;">sudo</span> <span style="color: #c20cb9; font-weight: bold;">apt-get install</span> ia32-libs  libc6-dev-i386
<span style="color: #c20cb9; font-weight: bold;">sudo</span> <span style="color: #c20cb9; font-weight: bold;">apt-get install</span> lib32stdc++<span style="color: #000000;">6</span> lib32z1</pre>
      </td>
    </tr>
  </table>
</div>

<p>Only install these if you are absolutely certain you need them.</p>

<p>Clone python-android from git into a nice and cosy directory.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;"><span style="color: #c20cb9; font-weight: bold;">git clone</span> https:<span style="color: #000000; font-weight: bold;">//</span>github.com<span style="color: #000000; font-weight: bold;">/</span>kivy<span style="color: #000000; font-weight: bold;">/</span>python-for-android.git</pre>
      </td>
    </tr>
  </table>
</div>

<p>While this is underway, for python-android you also need <a href="http://developer.android.com/sdk/index.html#Other" target="_blank">android-sdk</a> and <a href="https://developer.android.com/tools/sdk/ndk/index.html" target="_blank">android-ndk</a>. Select the ones which are for your environment. The NDK is needed in order to build the APK out of our python code later on.</p>

<p>After you are done, run ./android and install tools, APIs and other things you want. Make sure you have these set up:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;"><span style="color: #7a0874; font-weight: bold;">export</span> <span style="color: #007800;">ANDROIDSDK</span>=<span style="color: #000000; font-weight: bold;">/</span>path<span style="color: #000000; font-weight: bold;">/</span>to<span style="color: #000000; font-weight: bold;">/</span>android-sdk
<span style="color: #7a0874; font-weight: bold;">export</span> <span style="color: #007800;">ANDROIDNDK</span>=<span style="color: #000000; font-weight: bold;">/</span>path<span style="color: #000000; font-weight: bold;">/</span>to<span style="color: #000000; font-weight: bold;">/</span>android-ndk
<span style="color: #7a0874; font-weight: bold;">export</span> <span style="color: #007800;">ANDROIDNDKVER</span>=rX
<span style="color: #7a0874; font-weight: bold;">export</span> <span style="color: #007800;">ANDROIDAPI</span>=X</pre>
      </td>
    </tr>
  </table>
</div>

<pre>export PATH=$ANDROIDNDK:$ANDROIDSDK/platform-tools:$ANDROIDSDK/tools:$PATH</pre>

<p>The API version needs to be the one which you installed on your machine.</p>

<p>Now, we have to get a specific version of Cython. In order to do that, execute the following command:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;"><span style="color: #c20cb9; font-weight: bold;">sudo</span> pip <span style="color: #c20cb9; font-weight: bold;">install</span> <span style="color: #660033;">-I</span> https:<span style="color: #000000; font-weight: bold;">//</span>pypi.python.org<span style="color: #000000; font-weight: bold;">/</span>packages<span style="color: #000000; font-weight: bold;">/</span>source<span style="color: #000000; font-weight: bold;">/</span>C<span style="color: #000000; font-weight: bold;">/</span>Cython<span style="color: #000000; font-weight: bold;">/</span>Cython-0.20.1.tar.gz</pre>
      </td>
    </tr>
  </table>
</div>

<p>Source your new .bash_profile file if you haven&#8217;t done so already.</p>

<p>At this point we are ready to install Kivy. Please follow the instructions for your environment on the respective page from Kivy&#8217;s documentation:</p>

<p><a href="http://kivy.org/docs/installation/installation.html" target="_blank"><a href="http://kivy.org/docs/installation/installation.html">http://kivy.org/docs/installation/installation.html</a></a></p>

<p><strong>Note</strong>: For Mac users. In addition, before doing the kivy stuff, and if you would like to execute kivy applications on your mac, you need to install pygame.</p>

<p>It&#8217;s a bit of a hassle but you only need to perform these commands:</p>

<p>Install Quartz =&gt; <a href="http://xquartz.macosforge.org/landing/" target="_blank"><a href="http://xquartz.macosforge.org/landing/">http://xquartz.macosforge.org/landing/</a></a></p>

<p>Install Homebrew =&gt; <span style="color: #ff9900;">ruby -e &#8220;$(curl -fsSL <a href="https://raw.github.com/Homebrew/homebrew/go/install)&amp;#8221">https://raw.github.com/Homebrew/homebrew/go/install)&amp;#8221</a>;</span></p>

<p>Install some other packages =&gt; <span style="color: #ff9900;">brew install hg sdl sdl_image sdl_mixer sdl_ttf portmidi</span></p>

<p>Install pygame =&gt; <span style="color: #ff9900;">pip install hg+<a href="http://bitbucket.org/pygame/pygame">http://bitbucket.org/pygame/pygame</a></span></p>

<p>Once this finishes, you should be good to go for the final command in the prerequisites. Go to your cloned python-android folder and run this (make sure you have ANT installed):</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">.<span style="color: #000000; font-weight: bold;">/</span>distribute.sh <span style="color: #660033;">-m</span> <span style="color: #ff0000;">"openssl pil kivy"</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Now we are ready for some coding.</p>

<h1 style="text-align: center;">
  Implementation
</h1>

<p>So, finally after our environment is all setup, we can move on to write some python code. Let&#8217;s start with a simple hello world application:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="python" style="font-family:monospace;"><span style="color: #ff7700;font-weight:bold;">import</span> kivy
kivy.<span style="color: black;">require</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'1.8.0'</span><span style="color: black;">&#41;</span> <span style="color: #808080; font-style: italic;"># 1.8.0 is the latest kivy version</span>
<span style="color: #ff7700;font-weight:bold;">from</span> kivy.<span style="color: black;">lang</span> <span style="color: #ff7700;font-weight:bold;">import</span> Builder
<span style="color: #ff7700;font-weight:bold;">from</span> kivy.<span style="color: black;">uix</span>.<span style="color: black;">gridlayout</span> <span style="color: #ff7700;font-weight:bold;">import</span> GridLayout
<span style="color: #ff7700;font-weight:bold;">from</span> kivy.<span style="color: black;">properties</span> <span style="color: #ff7700;font-weight:bold;">import</span> NumericProperty
<span style="color: #ff7700;font-weight:bold;">from</span> kivy.<span style="color: black;">app</span> <span style="color: #ff7700;font-weight:bold;">import</span> App
&nbsp;
Builder.<span style="color: black;">load_string</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'''
:
    cols: 1
    Label:
        text: 'Welcome to the Hello world'
    Button:
        text: 'Click me! %d' % root.counter
        on_release: root.my_callback()
'''</span><span style="color: black;">&#41;</span>
&nbsp;
<span style="color: #ff7700;font-weight:bold;">class</span> HelloWorldScreen<span style="color: black;">&#40;</span>GridLayout<span style="color: black;">&#41;</span>:
    counter <span style="color: #66cc66;">=</span> NumericProperty<span style="color: black;">&#40;</span><span style="color: #ff4500;"></span><span style="color: black;">&#41;</span>
    <span style="color: #ff7700;font-weight:bold;">def</span> my_callback<span style="color: black;">&#40;</span><span style="color: #008000;">self</span><span style="color: black;">&#41;</span>:
        <span style="color: #ff7700;font-weight:bold;">print</span> <span style="color: #483d8b;">'The button has been pushed'</span>
        <span style="color: #008000;">self</span>.<span style="color: black;">counter</span> +<span style="color: #66cc66;">=</span> <span style="color: #ff4500;">1</span>
&nbsp;
<span style="color: #ff7700;font-weight:bold;">class</span> HelloWorldApp<span style="color: black;">&#40;</span>App<span style="color: black;">&#41;</span>:
    <span style="color: #ff7700;font-weight:bold;">def</span> build<span style="color: black;">&#40;</span><span style="color: #008000;">self</span><span style="color: black;">&#41;</span>:
        <span style="color: #ff7700;font-weight:bold;">return</span> HelloWorldScreen<span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
&nbsp;
<span style="color: #ff7700;font-weight:bold;">if</span> __name__ <span style="color: #66cc66;">==</span> <span style="color: #483d8b;">'__main__'</span>:
    HelloWorldApp<span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>.<span style="color: black;">run</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>This is a simple Hello World python-android app. Save this into a file called <span style="color: #ff9900;">main.py</span>. Main.py is used to execute the app on your phone. It&#8217;s your entry point. Whatever app you are writing, this has to be where it will begin.</p>

<p>In order to get this installed on our device, we will use python-android&#8217;s distribution.sh. The command to run after you changed directory into python-android is this (make sure that you have a compatible android device plugged in and in developer mode):</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">.<span style="color: #000000; font-weight: bold;">/</span>build.py <span style="color: #660033;">--package</span> org.hello.world <span style="color: #660033;">--name</span> <span style="color: #ff0000;">"Hello world"</span> <span style="color: #660033;">--version</span> <span style="color: #000000;">1.0</span> <span style="color: #660033;">--dir</span> <span style="color: #000000; font-weight: bold;">/</span>PATH<span style="color: #000000; font-weight: bold;">/</span>TO<span style="color: #000000; font-weight: bold;">/</span>helloworld debug installd</pre>
      </td>
    </tr>
  </table>
</div>

<p>Upon success, you should see it on your device. This is how the hello world app looks like:</p>

<h1 style="text-align: center;">
  Finishing up
</h1>

<p>This has been quite the ride so far. We will continue our journey when I&#8217;ll start writing my own app for SPOJ.</p>

<p>Thanks for reading!
Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>Why Lock Picking is like Testing</title>
			<link>https://skarlso.github.io/2015/02/08/why-lock-picking-is-like-testing/</link>
			<pubDate>Sun, 08 Feb 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/02/08/why-lock-picking-is-like-testing/</guid>
			<description>&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Not a great many people know that I&amp;#8217;m actually into Lock Picking as a hobby. This will not be a tutorial on how to do it, or I won&amp;#8217;t really talk about how I do it; I would like to write about something completely different. So if you came here for that, here are a few very good resources:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.lockpicking101.com/%20&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.lockpicking101.com/&#34;&gt;http://www.lockpicking101.com/&lt;/a&gt; &lt;/a&gt;&amp;#8211; Tutorials&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ukbumpkeys.com/collections/lock-picking&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.ukbumpkeys.com/collections/lock-picking&#34;&gt;http://www.ukbumpkeys.com/collections/lock-picking&lt;/a&gt;&lt;/a&gt; &amp;#8211; Tools ( UK )&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.reddit.com/r/lockpicking/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.reddit.com/r/lockpicking/&#34;&gt;http://www.reddit.com/r/lockpicking/&lt;/a&gt;&lt;/a&gt; &amp;#8211; Reddit&lt;/p&gt;

&lt;p&gt;For my post, click on&amp;#8230;&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>&nbsp;</p>

<p>Not a great many people know that I&#8217;m actually into Lock Picking as a hobby. This will not be a tutorial on how to do it, or I won&#8217;t really talk about how I do it; I would like to write about something completely different. So if you came here for that, here are a few very good resources:</p>

<p><a href="http://www.lockpicking101.com/%20" target="_blank"><a href="http://www.lockpicking101.com/">http://www.lockpicking101.com/</a> </a>&#8211; Tutorials</p>

<p><a href="http://www.ukbumpkeys.com/collections/lock-picking" target="_blank"><a href="http://www.ukbumpkeys.com/collections/lock-picking">http://www.ukbumpkeys.com/collections/lock-picking</a></a> &#8211; Tools ( UK )</p>

<p><a href="http://www.reddit.com/r/lockpicking/" target="_blank"><a href="http://www.reddit.com/r/lockpicking/">http://www.reddit.com/r/lockpicking/</a></a> &#8211; Reddit</p>

<p>For my post, click on&#8230;</p>

<p>So, why is lock picking like testing? I saw a great many posts which where trying to compare software testing to some activity. I even knew somebody who compared it to dancing. Because&#8230;? I don&#8217;t know, maybe he was trying out a talk material maybe? And he said &#8211; &#8220;I was in this club and watched a couple dance, and I was thinking, wow, this is like software testing.&#8221; &#8211; I couldn&#8217;t really react to that. But hey, kudos for out of the box thinking I guess.</p>

<p>But let&#8217;s see some of the similarities in picking and testing:</p>

<h4 id="thinking">Thinking</h4>

<p>It requires logical, critical thinking. It&#8217;s a puzzle that you have to solve. A puzzle which you basically solve by testing out solutions and see if they work. You can achieve this by trial and error, something testers face on a daily basis. After awhile you acquire something called finesse. Which will help you identify breaking points more easily. Since you have experience with a certain lock type, you already have a wast knowledge to rely on when you are trying to solve a new lock with the same build. You did your research you know its weaknesses hence you immediately have an attack vector on your hand.</p>

<h4 id="tools">Tools</h4>

<p>Lock picking has a wast number of tools. Each tool is design for a specific purpose. You can reuse tools but they are rarely a fit for other locks. Unless it&#8217;s a similar one. There are delicate tools and then there are brute force tools, which are very hard to use at first but after you get used to it and know how to handle it, it becomes massively helpful. You can build your own tools or use tools that are built for you by tool experts.</p>

<h4 id="solving-process">Solving Process</h4>

<p>When can you test an application to its fullest extend and capabilities? How can you achieve the most and best testing ever possible? You have to know how the application works. You have to know its components, its abilities, its capabilities and <strong>limits. </strong>For Lock Picking to be the best at what you do and to be able to move to a completely new lock and try to pick it, you have to know its flaws. You have to know when, and how it was built. You have to know what makes it tick, how it works, what it uses, how the inside mechanics look like in order to try to exploit them.</p>

<p>After you acquire this knowledge you will be able to build, or purchase a tool which will help you in solving the puzzle. But you were only able to do that because after you researched its manufacturing procedure you know that the last pin is hard to get to and that it has an anti drilling shield, so drilling is out of the question, and that it has a safety spring which locks the lock permanently upon tampering. If you would not be in the possession of this information you could have made a fatal error and could have made the client lost money ( since at that point they pretty much need to break down the door, unless the key is found again ( assuming the picking took place because the key was lost ) ).</p>

<h4 id="last-words">Last Words</h4>

<p>There you have it folks. That&#8217;s why Lock Picking is like software testing. Knowing structure, inside workings and the proper tools will help to achieve your goal. Just like in testing when you know your field, you know what to use, when, and how. <strong>Knowledge</strong> makes you the Best.</p>

<p>Good luck,</p>

<p>Happy Picking,</p>

<p>Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>Building an RPG App with Meteor – Part One – The struggle</title>
			<link>https://skarlso.github.io/2015/02/01/building-an-rpg-app-with-meteor-part-one-the-struggle/</link>
			<pubDate>Sun, 01 Feb 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/02/01/building-an-rpg-app-with-meteor-part-one-the-struggle/</guid>
			<description>&lt;p&gt;In my previous post, I was getting ready to enjoy some time with the JavaScript web framework Meteor.&lt;/p&gt;

&lt;p&gt;This time I would like to bring it to a bit of overdrive. See, how re-factoring works on a larger scale model with multiple pages. And how it can organize assets, such as, images, multiple CSS, some plugins, you know, ordinary web stuff.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s dive in.&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>In my previous post, I was getting ready to enjoy some time with the JavaScript web framework Meteor.</p>

<p>This time I would like to bring it to a bit of overdrive. See, how re-factoring works on a larger scale model with multiple pages. And how it can organize assets, such as, images, multiple CSS, some plugins, you know, ordinary web stuff.</p>

<p>Let&#8217;s dive in.</p>

<p>I&#8217;m planning this to be a series of posts as I&#8217;m going along building up my RPG app. Let&#8217;s define the rules.</p>

<h1 id="in-the-beginning">In the beginning</h1>

<h3 id="rules">Rules</h3>

<p>&nbsp;</p>

<h4 id="inventory">Inventory</h4>

<p>&nbsp;</p>

<p>Our main character will have a basic inventory. He will have space to carry stuff around and a body to put stuff on. One ring on each hand, one weapon in each hand, helmet, armour, legs, and a necklace. That&#8217;s it. For simplicities sake. The game mechanics will be like those old books which you could play, Fighting RPG Books, like the one Ian Livingstone was writing. This is one of my favourites; Robot commando:</p>

<h4 id="stats">Stats</h4>

<p>&nbsp;</p>

<p>A very basic stat system.</p>

<ul>
<li>Strength</li>
<li>Agility</li>
<li>Constitution</li>
<li>Intelligence</li>
<li>Magic</li>
</ul>

<p>&nbsp;</p>

<h4 id="fighting">Fighting</h4>

<p>&nbsp;</p>

<p>A very basic fighting system with the possibility of casting magic which, for simplicity, will count as attacks and can be dodged based on agility.</p>

<p>Let&#8217;s say we have dice throwing with a couple of 6 sided ones. So X * 6 sided dice. Dodging will require agility, HP is defined by constitution, Intelligence will help in puzzles which require a throw against intelligence, Magic will define Mana Points.</p>

<p>Simple, right?</p>

<h3 id="design">Design</h3>

<p>&nbsp;</p>

<p>I&#8217;m not much of a front-end developer, so I don&#8217;t really care about how it will look like. I&#8217;ll try to squeeze in some very basic stuff, like ordering, but that&#8217;s it.</p>

<h3 id="game-play">Game Play</h3>

<p>&nbsp;</p>

<p>Basically there will be a story which can be loaded threw a JSON structured file. The file will hold information about what a current page has. The probable things a page can contain at any given time:</p>

<ul>
<li>Current location description</li>
<li>Selectable proceed location ( page number )</li>
<li>Enemy -&gt; Fight ( Might contain an option to not to attack the beast )</li>
<li>Riddle -&gt; Solving it is determined by a throw against intelligence</li>
<li>Trap -&gt; Springing it is determined by a throw against agility</li>
<li>Lootable items</li>
<li>Death</li>
</ul>

<p>All of the above define an action that a player can, or HAS to take. If there is no ability to choose the player has to proceed as the page requests it. That might be easier to do if I just say if there is only one possible choose it&#8217;s choosen automatically for you.</p>

<h1 id="implementation">Implementation</h1>

<p>&nbsp;</p>

<p>I&#8217;ll be using Meteor which is based on Node and MongoDB. Hence, my stuff will be in mongoDB. I have a fair knowledge of how mongodb works, I&#8217;ll write down my progress as I go along.</p>

<p>Everything I&#8217;ll do is of course under version control and can be followed here:</p>

<p><a href="https://github.com/Skarlso/coolrpgapp" target="_blank"><a href="https://github.com/Skarlso/coolrpgapp">https://github.com/Skarlso/coolrpgapp</a></a></p>

<h4 id="character">Character</h4>

<p>&nbsp;</p>

<p>I need to be able to create a character with a name. Meaning, I need to figure out how meteor handles input. I already know that it uses templates and <a href="https://github.com/meteor/meteor/blob/devel/packages/spacebars/README.md" target="_blank">Spacebars Compiler</a>. So what I want at this point is to enter a username and then click a button which will direct me to the story page. Simple, right&#8230;?</p>

<p>For data handling we will use Meteor&#8217;s <a href="https://www.meteor.com/try/3" target="_blank">Collections</a>.</p>

<p>Using a form to submit the username looks like this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="javascript" style="font-family:monospace;">Usernames <span style="color: #339933;">=</span> <span style="color: #000066; font-weight: bold;">new</span> Mongo.<span style="color: #660066;">Collection</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">"usernames"</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>Meteor.<span style="color: #660066;">isClient</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
  Template.<span style="color: #660066;">body</span>.<span style="color: #660066;">events</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#123;</span>
    <span style="color: #3366CC;">"submit .new-user"</span><span style="color: #339933;">:</span> <span style="color: #000066; font-weight: bold;">function</span> <span style="color: #009900;">&#40;</span>event<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
      <span style="color: #006600; font-style: italic;">// This function is called when the new task form is submitted</span>
&nbsp;
      <span style="color: #000066; font-weight: bold;">var</span> username <span style="color: #339933;">=</span> event.<span style="color: #660066;">target</span>.<span style="color: #660066;">username</span>.<span style="color: #660066;">value</span><span style="color: #339933;">;</span>
&nbsp;
      Usernames.<span style="color: #660066;">insert</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#123;</span>
        username<span style="color: #339933;">:</span> username<span style="color: #339933;">,</span>
        createdAt<span style="color: #339933;">:</span> <span style="color: #000066; font-weight: bold;">new</span> <span style="">Date</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #006600; font-style: italic;">// current time</span>
      <span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
      <span style="color: #006600; font-style: italic;">// Clear form</span>
      event.<span style="color: #660066;">target</span>.<span style="color: #660066;">username</span>.<span style="color: #660066;">value</span> <span style="color: #339933;">=</span> <span style="color: #3366CC;">""</span><span style="color: #339933;">;</span>
&nbsp;
      <span style="color: #006600; font-style: italic;">// Prevent default form submit</span>
      <span style="color: #000066; font-weight: bold;">return</span> <span style="color: #003366; font-weight: bold;">false</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
  <span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span>
&nbsp;
<span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>Meteor.<span style="color: #660066;">isServer</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
  Meteor.<span style="color: #660066;">startup</span><span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">function</span> <span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
    <span style="color: #006600; font-style: italic;">// code to run on server at startup</span>
  <span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Of course there is no way to know if that actually succeeded so far unless I get a look at the DB. Navigate to the folder of your app and type in:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">meteor mongo</pre>
      </td>
    </tr>
  </table>
</div>

<p>This will open a console to your database where you can query it like you would normally do with a mongodb console. Hence for me it&#8217;s:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">db.usernames.find<span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #7a0874; font-weight: bold;">&#41;</span> <span style="color: #666666; font-style: italic;"># which return this -&gt;</span>
meteor:PRIMARY<span style="color: #000000; font-weight: bold;">&</span>gt; db.usernames.find<span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>
<span style="color: #7a0874; font-weight: bold;">&#123;</span> <span style="color: #ff0000;">"username"</span> : <span style="color: #ff0000;">"olaf"</span>, <span style="color: #ff0000;">"createdAt"</span> : ISODate<span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #ff0000;">"2015-02-01T16:58:24.100Z"</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>, <span style="color: #ff0000;">"_id"</span> : <span style="color: #ff0000;">"MS67d95ShFkc3yHiX"</span> <span style="color: #7a0874; font-weight: bold;">&#125;</span>
<span style="color: #7a0874; font-weight: bold;">&#123;</span> <span style="color: #ff0000;">"username"</span> : <span style="color: #ff0000;">"skarlso"</span>, <span style="color: #ff0000;">"createdAt"</span> : ISODate<span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #ff0000;">"2015-02-01T16:59:18.792Z"</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>, <span style="color: #ff0000;">"_id"</span> : <span style="color: #ff0000;">"ig8DJngmGKLca2dqS"</span> <span style="color: #7a0874; font-weight: bold;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>As you can see, I already have two characters in the system. This is so far very easy but it does not redirect me to a new page displaying the beginning of my journey. Let&#8217;s try a redirect.</p>

<h1 id="complications">Complications</h1>

<p>Turns out it&#8217;s not that easy to get a redirect going. If I would be a beginner at this, I would give up right now and move on. The guide, or the tutorial does not contain any HINTS at least that I have to use a different method if I want a multi-layered multi-paged app. Of course Meteor provides a built in, easy to use, easy to add, answer-to-everything-you-ever-would-want-to-do, Login feature. But guys, it&#8217;s not useful. I would go as far as say it&#8217;s completely useless. Do you actually know someone who uses it? I would never use a built in something which is completely hidden from me and have no idea what it does. The ability to control what&#8217;s happening is THE most important thing in every developers life.</p>

<p>So after I did a bit of digging and StackOverflowing ( which replaces the tutorial AND the user guide (and is a trademarked expression)), I found out that you can add <a href="https://atmospherejs.com/cmather/iron-router" target="_blank">Iron-Router</a> which was built specifically for this purpose.</p>

<pre>meteor add iron:router</pre>

<p>So all of a sudden my Page is completely screwed up with Iron Router information. Again, there is no information on this on Meteors page or in the guide nor in the COMPLETE guide so, I&#8217;m left Googling.</p>

<p>A very helpful StackOverflow ( again, and I&#8217;m wondering why people don&#8217;t bother with the guide in the first place just go to stackoverflow straight ) answer explains to me the following:</p>

<p>&#8220;<em>You have to define a subscription handle (an object returned by Meteor.subscribe) in order to use it&#8217;s reactive ready method : we&#8217;ll reference it in the myDataIsReady helper to track data availability, and the helper will automatically rerun when the state of ready changes.</em>&#8221;</p>

<p>Okay, so subscriptions are mentioned in the SECURITY section of the guide regarding detecting specific users and private data and so on and so forth. All right so that&#8217;s used by iron routing as well which means I have to build that in, and not to mention first of all understanding how Iron Router works.</p>

<p>I&#8217;m going to stop here now. After spending a couple of hours I can determine that this stuff is not intuitive and &#8220;easy&#8221;. I don&#8217;t know enough about JavaScript and redirecting and Iron Router to be able to use Meteor out of the box. Which means I have to educate myself a bit before returning to this stuff.</p>

<p>Stay tuned for more.</p>

<p>And as always,
Thanks for reading!</p>]]></content>
		</item>
		
		<item>
			<title>JavaScript Web Framework – Meteor</title>
			<link>https://skarlso.github.io/2015/01/29/javascript-web-framework-meteor/</link>
			<pubDate>Thu, 29 Jan 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/01/29/javascript-web-framework-meteor/</guid>
			<description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;This time I would like to write about something that interests me. I wanted to try out a pure JavaScript web framework.&lt;/p&gt;

&lt;p&gt;My choice is: &lt;a href=&#34;https://www.meteor.com/&#34; target=&#34;_blank&#34;&gt;Meteor&lt;/a&gt;. Looks interesting enough and it was recommended by a friend of mine. So, let&amp;#8217;s dive in.&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Hi,</p>

<p>This time I would like to write about something that interests me. I wanted to try out a pure JavaScript web framework.</p>

<p>My choice is: <a href="https://www.meteor.com/" target="_blank">Meteor</a>. Looks interesting enough and it was recommended by a friend of mine. So, let&#8217;s dive in.</p>

<h4 id="installation"><strong>Installation</strong></h4>

<p>As always, one starts with installation. The page tells us to follow this simple step:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">curl https:<span style="color: #000000; font-weight: bold;">//</span>install.meteor.com<span style="color: #000000; font-weight: bold;">/</span> <span style="color: #000000; font-weight: bold;">|</span> <span style="color: #c20cb9; font-weight: bold;">sh</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Easy enough, when you are on Linux. Turns out, that there is no official release yet for Windows. I&#8217;m in luck then. After running the command though, I saw this popping up into my face:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">curl: <span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">60</span><span style="color: #7a0874; font-weight: bold;">&#41;</span> Peer certificate cannot be authenticated with known CA certificates
More details here: http:<span style="color: #000000; font-weight: bold;">//</span>curl.haxx.se<span style="color: #000000; font-weight: bold;">/</span>docs<span style="color: #000000; font-weight: bold;">/</span>sslcerts.html</pre>
      </td>
    </tr>
  </table>
</div>

<p>There is always something&#8230; in that case a more accurate command to use would be the following:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">curl <span style="color: #660033;">-k</span> https:<span style="color: #000000; font-weight: bold;">//</span>install.meteor.com<span style="color: #000000; font-weight: bold;">/</span> <span style="color: #000000; font-weight: bold;">|</span> <span style="color: #c20cb9; font-weight: bold;">sh</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>This will force an insecure download. You might not face this issue, but just in case you do, use this command instead.</p>

<p>Branching off here. For those of you whom the curl didn&#8217;t work because you are sitting behind a proxy you can specify a &#8211;proxy  protocol//username:password@proxy:port after your curl. Of course if that doesn&#8217;t work then the script won&#8217;t work either.</p>

<p>So open the script in one of your favourite editors, for me it&#8217;s Sublime text, and find this line: &#8220;<em>Downloading Meteor distribution</em>&#8220;. Lo, and behold; it uses curl. This is the only one in the script, so just edit it by adding in your &#8211;proxy setting as before and you should be right on track.</p>

<p>If that still gives you problems, try this:</p>

<p>Assuming that your browser is set up correctly with the proxy and just command line commands aren&#8217;t working, you can go to this URL defined by the variable TARBALL_URL:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;"><span style="color: #007800;">TARBALL_URL</span>=<span style="color: #ff0000;">"https://d3sqy0vbqsdhku.cloudfront.net/packages-bootstrap/<span style="color: #007800;">${RELEASE}</span>/meteor-bootstrap-<span style="color: #007800;">${PLATFORM}</span>.tar.gz"</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Note that there are two variables in there. For me these are:</p>

<p>RELEASE: 1.0.3.1</p>

<p>PLATFORM: os.linux.x86_64</p>

<p>The full URL is:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">https:<span style="color: #000000; font-weight: bold;">//</span>d3sqy0vbqsdhku.cloudfront.net<span style="color: #000000; font-weight: bold;">/</span>packages-bootstrap<span style="color: #000000; font-weight: bold;">/</span>1.0.3.1<span style="color: #000000; font-weight: bold;">/</span>meteor-bootstrap-os.linux.x86_64.tar.gz</pre>
      </td>
    </tr>
  </table>
</div>

<p>Download the latest tarball and delete the CURL AND TAR command on the following line. After that, you just have to extract the tarball and move the directory to ~/.meteor.</p>

<p>Now you can run your sh again and you should be on the road, for sure this time.</p>

<p>Just to make sure, these are the line which you need to comment out:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;"><span style="color: #666666; font-style: italic;"># If you already have a tropohouse/warehouse, we do a clean install here:</span>
<span style="color: #000000; font-weight: bold;">if</span> <span style="color: #7a0874; font-weight: bold;">&#91;</span> <span style="color: #660033;">-e</span> <span style="color: #ff0000;">"<span style="color: #007800;">$HOME</span>/.meteor"</span> <span style="color: #7a0874; font-weight: bold;">&#93;</span>; <span style="color: #000000; font-weight: bold;">then</span>
<span style="color: #7a0874; font-weight: bold;">echo</span> <span style="color: #ff0000;">"Removing your existing Meteor installation."</span>
<span style="color: #c20cb9; font-weight: bold;">rm</span> <span style="color: #660033;">-rf</span> <span style="color: #ff0000;">"<span style="color: #007800;">$HOME</span>/.meteor"</span>
<span style="color: #000000; font-weight: bold;">fi</span>
&nbsp;
<span style="color: #007800;">TARBALL_URL</span>=<span style="color: #ff0000;">"https://d3sqy0vbqsdhku.cloudfront.net/packages-bootstrap/<span style="color: #007800;">${RELEASE}</span>/meteor-bootstrap-<span style="color: #007800;">${PLATFORM}</span>.tar.gz"</span>
&nbsp;
<span style="color: #007800;">INSTALL_TMPDIR</span>=<span style="color: #ff0000;">"<span style="color: #007800;">$HOME</span>/.meteor-install-tmp"</span>
<span style="color: #c20cb9; font-weight: bold;">rm</span> <span style="color: #660033;">-rf</span> <span style="color: #ff0000;">"<span style="color: #007800;">$INSTALL_TMPDIR</span>"</span>
<span style="color: #c20cb9; font-weight: bold;">mkdir</span> <span style="color: #ff0000;">"<span style="color: #007800;">$INSTALL_TMPDIR</span>"</span>
<span style="color: #7a0874; font-weight: bold;">echo</span> <span style="color: #ff0000;">"Downloading Meteor distribution"</span>
curl <span style="color: #660033;">--proxy</span> https:<span style="color: #000000; font-weight: bold;">//</span>ggbrau:Daleks37<span style="color: #000000; font-weight: bold;">@</span>10.120.28.130:<span style="color: #000000;">80</span>--progress-bar <span style="color: #660033;">--fail</span> <span style="color: #ff0000;">"<span style="color: #007800;">$TARBALL_URL</span>"</span> <span style="color: #000000; font-weight: bold;">|</span> <span style="color: #c20cb9; font-weight: bold;">tar</span> <span style="color: #660033;">-xzf</span> - <span style="color: #660033;">-C</span> <span style="color: #ff0000;">"<span style="color: #007800;">$INSTALL_TMPDIR</span>"</span> <span style="color: #660033;">-o</span>
<span style="color: #666666; font-style: italic;"># bomb out if it didn't work, eg no net</span>
<span style="color: #7a0874; font-weight: bold;">test</span> <span style="color: #660033;">-x</span> <span style="color: #ff0000;">"<span style="color: #007800;">${INSTALL_TMPDIR}</span>/.meteor/meteor"</span>
<span style="color: #c20cb9; font-weight: bold;">mv</span> <span style="color: #ff0000;">"<span style="color: #007800;">${INSTALL_TMPDIR}</span>/.meteor"</span> <span style="color: #ff0000;">"<span style="color: #007800;">$HOME</span>"</span>
<span style="color: #c20cb9; font-weight: bold;">rm</span> <span style="color: #660033;">-rf</span> <span style="color: #ff0000;">"<span style="color: #007800;">${INSTALL_TMPDIR}</span>"</span>
<span style="color: #666666; font-style: italic;"># just double-checking :)</span>
<span style="color: #7a0874; font-weight: bold;">test</span> <span style="color: #660033;">-x</span> <span style="color: #ff0000;">"<span style="color: #007800;">$HOME</span>/.meteor/meteor"</span></pre>
      </td>
    </tr>
  </table>
</div>

<h4 id="getting-started">Getting started</h4>

<p>After a nice installation process we can continue to the getting started phase.</p>

<p>So, the documentation tells us that we have to simply execute a command.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">meteor create simple-todos</pre>
      </td>
    </tr>
  </table>
</div>

<p>At this point we should get a directory structure which is written in the manual. And, behold, that&#8217;s exactly what happened. As usually, creating a skeleton is easy. Lets run the app. For that, the command is:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">meteor</pre>
      </td>
    </tr>
  </table>
</div>

<p>I can do that, I think.</p>

<p>And sure enough, I&#8217;ve got this little message, which I actually expected to see:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">Can<span style="color: #ff0000;">'t listen on port 3000. Perhaps another Meteor is running?</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>In this world, where there are tons of applications running on your dev environment at any given time, it&#8217;s possible to have something already running on the port 3000. Luckily this is something that&#8217;s anticipated by now, and we are presented with an option to add in a proxy setting of our choice with &#8211;port <port>.</p>

<p>After I did that, I&#8217;ve got a nice confirm message that meteor is up and running. A quick check on the presented URL provided me with the confidence that my app is indeed reachable.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">App running at: http:<span style="color: #000000; font-weight: bold;">//</span>localhost:<span style="color: #000000;">9999</span><span style="color: #000000; font-weight: bold;">/</span></pre>
      </td>
    </tr>
  </table>
</div>

<h4 id="after-getting-started-8230">After Getting Started&#8230;</h4>

<p>Now that we know that it&#8217;s up and running we can continue with the tutorial. Up comes next a simple Todo list application with Templates. It&#8217;s telling us to replace the code in the default starter app. At this point I&#8217;m wondering if it can hotswap. It should, since javascript and HTML is dynamic so there should be no problems there, right?</p>

<p>And sure enough, the moment I replaced the code and checked on my server status, I could see this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">Client modified <span style="color: #660033;">--</span> refreshing
Meteor server restarted</pre>
      </td>
    </tr>
  </table>
</div>

<p>With a brief flash of &#8220;Rebuilding&#8230;&#8221;. So it does sort of work. It did, however, restart the server it just did it without your manual intervention. Which is nice, but on a larger scale application it might prove to be a tad bit annoying. For example, I add another item to the list, and suddenly, the server is restarted.</p>

<p>Since, I am a tester, let&#8217;s see how it handles some problems.</p>

<p>I modified the JavaScript so that it has a syntax error.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="javascript" style="font-family:monospace;"><span style="color: #006600; font-style: italic;">// simple-todos.js</span>
<span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>Meteor.<span style="color: #660066;">isClient</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
  <span style="color: #006600; font-style: italic;">// This code only runs on the client</span>
  Template.<span style="color: #660066;">body</span>.<span style="color: #660066;">helpers</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#123;</span>
    tasks<span style="color: #339933;">:</span> <span style="color: #009900;">&#91;</span>
      <span style="color: #009900;">&#123;</span> text<span style="color: #339933;">:</span> <span style="color: #3366CC;">"This is task 1"</span> <span style="color: #009900;">&#125;</span><span style="color: #339933;">,</span>
      <span style="color: #009900;">&#123;</span> text<span style="color: #339933;">:</span> <span style="color: #3366CC;">"This is task 2"</span> <span style="color: #009900;">&#125;</span><span style="color: #339933;">,</span>
      <span style="color: #009900;">&#123;</span> text<span style="color: #339933;">:</span> <span style="color: #3366CC;">"This is task 3"</span> <span style="color: #009900;">&#125;</span>
      <span style="color: #009900;">&#123;</span> text<span style="color: #339933;">:</span> <span style="color: #3366CC;">"This is task 4"</span> <span style="color: #009900;">&#125;</span>
    <span style="color: #009900;">&#93;</span>
  <span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Note the missing &#8220;,&#8221;. And, nicely enough I&#8217;m getting an error message telling me that I messed something up:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">Errors prevented startup:
&nbsp;
While building the application:
my_cool_app.js:<span style="color: #000000;">10</span>:<span style="color: #000000;">7</span>: Unexpected token <span style="color: #7a0874; font-weight: bold;">&#123;</span>
&nbsp;
Your application has errors. Waiting <span style="color: #000000; font-weight: bold;">for</span> <span style="color: #c20cb9; font-weight: bold;">file</span> change.</pre>
      </td>
    </tr>
  </table>
</div>

<p>It even tells you where the error is and it&#8217;s waiting for you to fix it. After I&#8217;ve corrected my error it compiled fine and the application is up and running. Deleting the files did little difference as did corrupting the HTML pages or the CSS file. Nothing to see here, moving on&#8230;</p>

<h4 id="android-device">Android Device</h4>

<p>I&#8217;m sure everybody can read a manual and continue with collections, forms, events and such. What I&#8217;m more interested in is that Meteor promises it can run on Android devices. Now that perked my curiosity. With the rise of mobile devices, the desktop platform is slowly pushed back into a dark corner where even a <a href="http://mistborn.wikia.com/wiki/Tineye" target="_blank">Tineye </a>would have problems seeing it.</p>

<p>Hence, I want to see how easy it really is.</p>

<p>Meteor gives you a set of commands to install the android sdk and droid support for your application, which is nice. You just need to run this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">meteor install-sdk android
meteor add-platform android <span style="color: #666666; font-style: italic;"># Perform this step in the app's folder and agree to terms and conditions.</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Now, if you are like me, someone who has experience with the android SDK and its emulator, you&#8217;ll know that running that thing requires more time and processing power than simulating the chances of Leonardo DiCaprio winning an Oscar. I&#8217;ll use a real device instead. For that, it appears I only have to run a simple command again.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="bash" style="font-family:monospace;">meteor run android-device</pre>
      </td>
    </tr>
  </table>
</div>

<p>And sure enough the app appeared on my device.</p>

<p>This is actually quite awesome. I only plugged in my device, enabled developer options and USB debugging and that&#8217;s it. I&#8217;m quite impressed so far with Meteor and the Power of JavaScript. The app is on my phone and the static JavaScript parts are still working even though I shut the server down.</p>

<p>So my next burning question is&#8230; Will it Blend? I mean, Perform?</p>

<h4 id="benchmarking">Benchmarking</h4>

<p>So, now that I know that using, installing and getting started is pretty simple, what I also would like to know is how well it performs.</p>

<p>I have a quad core i7 16GB RAM Samsung SSD running Linux. Let&#8217;s see 100 threads 10 second interval 10 times loop for a start. Look at how gorgeous this is.</p>

<p>40ms on average. Now let&#8217;s crank it up and I&#8217;m performing the test on a separate machine but still on the same network. 1000 threads.</p>

<p>This time I&#8217;ve got a bit more churn and my pc started to fan like there is no tomorrow. But the server stayed stable. Latency did not waver for a bit. Next, 10.000 for as long as my machine can handle it&#8230;. Better save my work. Hah, my JMeter died. But it clocked at an average of 1000ms response time and the server stayed absolutely stable with no package lost, or errors.</p>

<h4 id="conclusion">Conclusion</h4>

<p>I can say with a full heart that I&#8217;m impressed by Meteor and I very much like it. It&#8217;s easy to use, even more easy to install and definitely can handle itself given that it&#8217;s rather lightweight. The hot swapping / server re-starting can&#8217;t be avoided, but that&#8217;s only a minor inconvenience and we got used to that already.</p>

<p>I recommend Meteor and I&#8217;ll be playing around with it a bit more for sure.</p>

<p>Thanks for reading!
Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>When cucumber goes wrong</title>
			<link>https://skarlso.github.io/2015/01/28/when-cucumber-goes-wrong/</link>
			<pubDate>Wed, 28 Jan 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/01/28/when-cucumber-goes-wrong/</guid>
			<description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s face the horrible truth:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It&amp;#8217;s rare / never happens that a manager / scrum master / product owner actually reads your cucumber test cases.&lt;/strong&gt;&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Hi,</p>

<p>Let&#8217;s face the horrible truth:</p>

<p><strong>It&#8217;s rare / never happens that a manager / scrum master / product owner actually reads your cucumber test cases.</strong></p>

<p>Back in the old days, this was one of the selling points of human readable tests and DSLs. It sounds nice and I&#8217;m sure in a utopia it also works.</p>

<p>BDD is a very nice approach to write tests if used in a correct way. And I can relate that at some point, a manager or the product owner, actually writes up a draft of the tests. But that enthusiasm very rarely stays for the rest of the project.</p>

<p>Especially when you get to the point where your Cucumber test cases start to look something like this:</p>

<pre class="prettyprint"><span class="typ">Scenario</span><span class="pun">:</span> <span class="typ">User</span><span class="pln"> list
  </span><span class="typ">Given</span><span class="pln"> I post to </span><span class="str">"/users.json"</span> <span class="kwd">with</span><span class="pun">:</span><span class="pln">
    </span><span class="str">"""
    {
      "</span><span class="pln">first_name</span><span class="str">": "</span><span class="typ">Steve</span><span class="str">",
      "</span><span class="pln">last_name</span><span class="str">": "</span><span class="typ">Richert</span><span class="str">"
    }
    """</span><span class="pln">
  </span><span class="typ">And</span><span class="pln"> I keep the JSON response at </span><span class="str">"id"</span> <span class="kwd">as</span> <span class="str">"USER_ID"</span><span class="pln">
  </span><span class="typ">When</span><span class="pln"> I </span><span class="kwd">get</span> <span class="str">"/users.json"</span><span class="pln">
  </span><span class="typ">Then</span><span class="pln"> the JSON response should have </span><span class="lit">1</span><span class="pln"> user
  </span><span class="typ">And</span><span class="pln"> the JSON response at </span><span class="str">"0"</span><span class="pln"> should be</span><span class="pun">:</span><span class="pln">
    </span><span class="str">"""
    {
      "</span><span class="pln">id</span><span class="str">": %{USER_ID},
      "</span><span class="pln">first_name</span><span class="str">": "</span><span class="typ">Steve</span><span class="str">",
      "</span><span class="pln">last_name</span><span class="str">": "</span><span class="typ">Richert</span><span class="str">"
    }
    """</span></pre>

<p>If a product owner reads this, his reaction will be like: &#8220;What the hell is this? What&#8217;s users.json? Why is it there? Why should I even care? What&#8217;s a JSON response? Why should it match with the request? And what, if I keep the id at USER_ID? Huh?&#8221;</p>

<p>It&#8217;s easy to get overwhelmed by things like this scenario when you start introducing actors into your tests and payloads to your public API. And suddenly you&#8217;ll end up with cucumber features which no other will be able to understand but the person who wrote it.</p>

<p>I&#8217;m a little bit skeptic that it ever worked as intended. Sure, for a little while. But the dynamic nature of tests will surface soon enough. You can&#8217;t hide it forever.</p>

<p>The above example, if the payload and user would be hidden in a reusable code fragment behind the implementation, would look a bit more readable:</p>

<pre class="prettyprint"><span class="typ">Scenario</span><span class="pun">:</span> <span class="typ">User</span><span class="pln"> list
  </span><span class="typ">Given</span><span class="pln"> I post to user list</span> <span class="kwd">with data
</span><span class="pln">  | firstname | Steve |
  | lastname  | Richert |
</span><span class="pln">  </span><span class="typ">When</span><span class="pln"> I </span><span class="kwd">get</span> a response from the SUT<span class="pln">
  </span><span class="typ">Then</span><span class="pln"> the response should have the same user</span></pre>

<p>See? Easier to understand. I don&#8217;t care about the payload. I don&#8217;t care about the user ID, in fact, I would rather see this test as a unit test somewhere deep down in the bowls of the system. Although I can understand that you want a set of automated UATs.</p>

<p>I&#8217;m sure Cucumber has a couple of success stories behind his back, I just didn&#8217;t happen to come across them as of late. But please, if you have one, share it with me so I can rest easily.</p>

<p>Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>From Zero to Hundred in Four seconds</title>
			<link>https://skarlso.github.io/2015/01/27/from-zero-to-hundred-in-four-seconds/</link>
			<pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/01/27/from-zero-to-hundred-in-four-seconds/</guid>
			<description>&lt;p&gt;I thought I throw my grudge out of the window against Scala and try something with it.&lt;/p&gt;

&lt;p&gt;I also got my hands on a fairly new book, called: &amp;#8220;&lt;a href=&#34;http://www.amazon.co.uk/Learning-Scala-Practical-Functional-Programming/dp/1449367933/ref=sr_1_1?ie=UTF8&amp;qid=1422340157&amp;sr=8-1&amp;keywords=learning+scala+a+practical&#34; target=&#34;_blank&#34;&gt;Learning Scala: Practical Functional Programming for the JVM&lt;/a&gt;&amp;#8220;. Turns out to be a rather fun book to read. And Jason Swartz has a nice way of writing. So I wanted to play around with &lt;a href=&#34;https://www.playframework.com/&#34; target=&#34;_blank&#34;&gt;Play 2 Framework&lt;/a&gt;. It now comes packaged in &lt;a href=&#34;https://typesafe.com/get-started&#34; target=&#34;_blank&#34;&gt;Activator&lt;/a&gt;.&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>I thought I throw my grudge out of the window against Scala and try something with it.</p>

<p>I also got my hands on a fairly new book, called: &#8220;<a href="http://www.amazon.co.uk/Learning-Scala-Practical-Functional-Programming/dp/1449367933/ref=sr_1_1?ie=UTF8&qid=1422340157&sr=8-1&keywords=learning+scala+a+practical" target="_blank">Learning Scala: Practical Functional Programming for the JVM</a>&#8220;. Turns out to be a rather fun book to read. And Jason Swartz has a nice way of writing. So I wanted to play around with <a href="https://www.playframework.com/" target="_blank">Play 2 Framework</a>. It now comes packaged in <a href="https://typesafe.com/get-started" target="_blank">Activator</a>.</p>

<p>So, I started the long path from almost zero to handle all that. I&#8217;m running the latest Ubuntu ( 14 ) and latest Java ( 8 ). The list: Scala, SBT, IntelliJ, Play ( through activator ).</p>

<p>I was pleased that, considering a network which allowed me a download speed of ~1.5MB/s ( that&#8217;s byte, not bit ), I was up and running in about 4 minutes. That&#8217;s Play running, with a test application created through activator and then imported into an IntelliJ Scala project.</p>

<p>I&#8217;m impressed.</p>

<p>I added SBT through the package manager like this:</p>

<pre><code>echo &quot;deb http://dl.bintray.com/sbt/debian /&quot; | sudo tee -a /etc/apt/sources.list.d/sbt.list
sudo apt-get update
sudo apt-get install sbt
</code></pre>

<p>It&#8217;s really simple.</p>

<p>After that, I did an apt-get on the latest Scala.</p>

<p>I already had IntelliJ.</p>

<p>Activator download took me ~1 minute; then I executed the command to create a test app:</p>

<pre class="prettyprint prettyprinted"><code class="language-bash">&lt;span class="pln">$ activator new my&lt;/span>&lt;span class="pun">-&lt;/span>&lt;span class="pln">first&lt;/span>&lt;span class="pun">-&lt;/span>&lt;span class="pln">app play&lt;/span>&lt;span class="pun">-&lt;/span>&lt;span class="pln">scala&lt;/span></code></pre>

<p>Simple. Activator downloaded everything my system was still missing.</p>

<p>Then run the start command:</p>

<pre class="prettyprint prettyprinted"><code class="language-bash">&lt;span class="pln">$ cd my&lt;/span>&lt;span class="pun">-&lt;/span>&lt;span class="pln">first&lt;/span>&lt;span class="pun">-&lt;/span>&lt;span class="pln">app
$ activator&lt;/span></code></pre>

<p>And you are ready to rock &amp; roll. Importing it in IntelliJ was a blink of an eye.</p>

<p>I&#8217;m really impressed with how easy getting started became with these projects and frameworks. I remember a time where I had to configure everything, get tomcat and the whole JVM or Jetty or whatnot, and try to get up and running took half a day at least. Would my internet be faster, I think this would have been even less.</p>

<p>I&#8217;ll post more as I go forward.</p>

<p>As always,</p>

<p>Thanks for reading.</p>]]></content>
		</item>
		
		<item>
			<title>Why Testers are, like scientists</title>
			<link>https://skarlso.github.io/2015/01/26/why-testers-are-like-scientists/</link>
			<pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2015/01/26/why-testers-are-like-scientists/</guid>
			<description>&lt;p&gt;Hello everybody.&lt;/p&gt;

&lt;p&gt;Today, I would like to write about little observation I made along the way of being a tester.&lt;/p&gt;

&lt;p&gt;The title says it all. I think Testers, are like scientists. I would go even further, and say: Testers, are scientists.&lt;/p&gt;

&lt;p&gt;Let us see how the two compare.&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Hello everybody.</p>

<p>Today, I would like to write about little observation I made along the way of being a tester.</p>

<p>The title says it all. I think Testers, are like scientists. I would go even further, and say: Testers, are scientists.</p>

<p>Let us see how the two compare.</p>

<h3 id="asking-questions">Asking Questions</h3>

<p>A scientist is all about asking the right question to the right person, or the right subject matter. They are using the same 5 Ws as we are. Who, Why, What, When, Where. It&#8217;s simple, really. Asking the right question is sometimes the most difficult task of them all. Ideas come from these questions. They can also help in flushing out early design problems with the experiment / product.</p>

<h4 id="identify-the-subject-matter">Identify the subject matter</h4>

<p>This one is all about getting to know your environment and taking notes while you are doing so. Become familiar with what you are working with, and what tools you are using in your research. Which standards are you following, and why? It&#8217;s the same, when a Tester finds herself/himself in a new environment and tries to get her(is) bearing what the task is and how to perform it.</p>

<h4 id="first-impression-outline-of-an-idea">First impression, outline of an idea</h4>

<p>The first impression will result in a vague idea of what the problem is about. This is the stage where the first thoughts emerge and the first draft of a possible solution is crafted into existence. This is the part where a person will draw information, power, and knowledge from her(is) past resulting in a solution that can get close to a real one; but rarely is this solution the one which will be chosen in the end.</p>

<h4 id="testing">Testing</h4>

<p>Indeed in the life of a scientist it is imperative that ideas, solutions and vague drafts of brainstormed possibilities are <strong>tested all the way through. </strong>For a tester it&#8217;s just as important that all the cases are verified and &#8216;approved&#8217; by either common sense, the requirements, or any other kind of verification that they can come up in certain environments. Fact is, that if a solution / test case is a valid one, depends on several different options based on any given circumstance. That is why it&#8217;s difficult to decide if something is acceptable or not. What is a good solution in one case, might be entirely wrong in another.</p>

<h4 id="results">Results</h4>

<p>If the tests / variables / cases / solutions are satisfying, then we can come to think about producing an actual result. The result could be anything of value to the observer. A failing test could be a good result, if we actually were waiting for that test to fail. In that case the result is a success. So bare in mind that a failing test, a failed solution to an experiment, is <strong>always </strong>also information which <strong>tells you something important. </strong>Never dismiss a failing test, a failed experiment, a failed solution. It gives you a <strong>hint </strong>for a passing one.</p>

<h4 id="community-and-sharing">Community and Sharing</h4>

<p>Scientists have a large community where they are sharing experiments and discoveries. I think I don&#8217;t have to draw a parallel here. We all know several testing pages, forums, events, gatherings where there are people talking about the subject matter. I&#8217;m proud that it such a long way.</p>

<h4 id="practice-practice-practice">Practice, practice, practice</h4>

<p>I think this one is self explanatory. In order to become good at something, we have to continuously do it. There is no magic formula, no pill you can take, no matrix to download Kung Fu, you have to do it to learn it. You have to practice it, gather experience and share / write them down in order to strengthen your knowledge and understanding about it. Writing it out, and sharing information, <strong>explaining it to somebody else, </strong>will make it stick better and increase your knowledge in return. So start a blog now, even if you will have only a few readers it will be worth it. Just by writing a couple of lines about something will make you remember it better, and your understanding of it deeper.</p>

<p>So, there you have it. I think these are pretty good points that let&#8217;s us identify ourselves. It&#8217;s called Computer <strong>science</strong> for a reason.</p>

<p>As always,</p>

<p>Thanks for reading,</p>

<p>Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>Why the expressiveness of your Tests is important – Part One</title>
			<link>https://skarlso.github.io/2014/11/15/why-the-expressiveness-of-your-tests-is-important-part-one/</link>
			<pubDate>Sat, 15 Nov 2014 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2014/11/15/why-the-expressiveness-of-your-tests-is-important-part-one/</guid>
			<description>&lt;p&gt;Hello Everybody.&lt;/p&gt;

&lt;p&gt;This time I&amp;#8217;d like to write about the expressiveness of a Test. I think that it&amp;#8217;s very important to write understandable and expressive tests. In older times I was studying novel writing. There is a rule which a novel needs to follow. It goes something like this: &amp;#8220;A novel needs to lead its reader and make him understand in the simplest way what&amp;#8217;s going on, with whom and why?&amp;#8221;. In other words, it&amp;#8217;s not a puzzle. It should be obvious what the test is trying to do and it should not require the reader to try and solve it in order to understand it.&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Hello Everybody.</p>

<p>This time I&#8217;d like to write about the expressiveness of a Test. I think that it&#8217;s very important to write understandable and expressive tests. In older times I was studying novel writing. There is a rule which a novel needs to follow. It goes something like this: &#8220;A novel needs to lead its reader and make him understand in the simplest way what&#8217;s going on, with whom and why?&#8221;. In other words, it&#8217;s not a puzzle. It should be obvious what the test is trying to do and it should not require the reader to try and solve it in order to understand it.</p>

<p>I&#8217;m planning this as a series since there are multiple problems with a test I can talk about here.</p>

<p><strong>Geb Tests</strong></p>

<p>Example:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="groovy" style="font-family:monospace;">    <span style="color: #000000; font-weight: bold;">def</span> <span style="color: #ff0000;">"login to the home page"</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#123;</span>
        given: <span style="color: #ff0000;">"I am at homepages"</span>
            go <span style="color: #ff0000;">"http://localhost:8080/home"</span>
            at HomePage
&nbsp;
        when: <span style="color: #ff0000;">"I entir my credential"</span>
            filloutLoginForm<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"username"</span>, <span style="color: #ff0000;">"password"</span><span style="color: #66cc66;">&#41;</span>
            at MyAccountPage
&nbsp;
        then: <span style="color: #ff0000;">"I can accass my wallet"</span>
            openWallet<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
            waitFor <span style="color: #66cc66;">&#123;</span> <span style="color: #CC0099;">contains</span><span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"Balance"</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#125;</span>
    <span style="color: #66cc66;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Now, read this test. It doesn&#8217;t really make any sense at the first read, right? You need to actually think what is going on there. Of course if you read it slow enough you&#8217;ll get what it&#8217;s trying to do. But you don&#8217;t know what fillform does. Apparently it also submits the form because after fillform you are suddenly at MyAccountPage.</p>

<p>There are several things wrong with this one, let&#8217;s start with the pageobject.</p>

<p><strong>PageObjects</strong></p>

<p>At and toAt return page objects. We can use that to actually make the calling explicit and make it more readable and identify where a function comes from.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="groovy" style="font-family:monospace;">    <span style="color: #000000; font-weight: bold;">def</span> <span style="color: #ff0000;">"login to the home page"</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#123;</span>
        given: <span style="color: #ff0000;">"I am at homepages"</span>
            go <span style="color: #ff0000;">"http://localhost:8080/home"</span>
            HomePage homePage <span style="color: #66cc66;">=</span> at HomePage
&nbsp;
        when: <span style="color: #ff0000;">"I entir my credential"</span>
            homePage.<span style="color: #006600;">filloutLoginForm</span><span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"username"</span>, <span style="color: #ff0000;">"password"</span><span style="color: #66cc66;">&#41;</span>
            MyAccountPage myAccountPage <span style="color: #66cc66;">=</span> at MyAccountPage
&nbsp;
        then: <span style="color: #ff0000;">"I can accass my wallet"</span>
            myAccountPage.<span style="color: #006600;">openWallet</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
            waitFor <span style="color: #66cc66;">&#123;</span> <span style="color: #CC0099;">contains</span><span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"Balance"</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#125;</span>
    <span style="color: #66cc66;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>This reads much better now. You know where the function is coming from and your IDE will not go nuts from things it can&#8217;t find. And you have autocompletion so there is no fear that you simply mistype something.</p>

<p><strong>Side effects</strong></p>

<p>Next step, let&#8217;s remove some of the side effects.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="groovy" style="font-family:monospace;">    <span style="color: #000000; font-weight: bold;">def</span> <span style="color: #ff0000;">"login to the home page"</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#123;</span>
        given: <span style="color: #ff0000;">"I am at homepages"</span>
            go <span style="color: #ff0000;">"http://localhost:8080/home"</span>
            HomePage homePage <span style="color: #66cc66;">=</span> at HomePage
&nbsp;
        when: <span style="color: #ff0000;">"I entir my credential"</span>
            homePage.<span style="color: #006600;">filloutLoginForm</span><span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"username"</span>, <span style="color: #ff0000;">"password"</span><span style="color: #66cc66;">&#41;</span>
            homePage.<span style="color: #006600;">submitLoginForm</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
            MyAccountPage myAccountPage <span style="color: #66cc66;">=</span> at MyAccountPage
&nbsp;
        then: <span style="color: #ff0000;">"I can accass my wallet"</span>
            myAccountPage.<span style="color: #006600;">openWallet</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
            waitFor <span style="color: #66cc66;">&#123;</span> myAccountPage.<span style="color: #006600;">accountIsDisplayed</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#125;</span>
    <span style="color: #66cc66;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Now this is again much better. There are no steps left out. And you can test now the FillForm and the submit independently. Like, submitting the form without filling it out! Or filling it out and not submiting it. Reads better, is explicit, more easy to understand.</p>

<p>And the last one for today:</p>

<p><strong>Grammar</strong></p>

<p>I wonder if you noticed it&#8230; The grammar is a little bit off in the tests. A small mistake here and there. You might think that, who cares? That&#8217;s a very bad thought. I think the correct grammar reflects caring. It reflects that we thought about this test and that we thought about the quality of it. Because it means that after you wrote it, you actually re-read the test to make sure it&#8217;s understandable and readable.</p>

<p>So let us correct that:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="groovy" style="font-family:monospace;">    <span style="color: #000000; font-weight: bold;">def</span> <span style="color: #ff0000;">"As a player I can log in to check my account."</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#123;</span>
        given: <span style="color: #ff0000;">"I am at the homepage"</span>
            go <span style="color: #ff0000;">"http://localhost:8080/home"</span>
            HomePage homePage <span style="color: #66cc66;">=</span> at HomePage
&nbsp;
        when: <span style="color: #ff0000;">"I enter my log in credentials."</span>
            homePage.<span style="color: #006600;">filloutLoginForm</span><span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"username"</span>, <span style="color: #ff0000;">"password"</span><span style="color: #66cc66;">&#41;</span>
            homePage.<span style="color: #006600;">submitLoginForm</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
            MyAccountPage myAccountPage <span style="color: #66cc66;">=</span> at MyAccountPage
&nbsp;
        then: <span style="color: #ff0000;">"I'm directed to my account page."</span>
            myAccountPage.<span style="color: #006600;">openWallet</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
            waitFor <span style="color: #66cc66;">&#123;</span> myAccountPage.<span style="color: #006600;">accountIsDisplayed</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#125;</span>
    <span style="color: #66cc66;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>I also took the liberty of re-phrasing some of the text so that it shows what the test is about and what the user really would like to achieve here. Now try reading that last one. Does it make more sense? Did you understand it at first go? Did it read like a good story?</p>

<p>There is a coding practice which goes something like this: &#8220;Good code is code which doesn&#8217;t surprise you as you read it.&#8221; Which means the exact thing happens which you thought of would happen. I think that applies to tests as well. The steps of the test shouldn&#8217;t come to you as a surprise. Especially if you know what the application is supposed to do.</p>

<p>So that&#8217;s all for today folks. Thank you for reading! If you have a nasty test which you would like me to dissect and make it better and human readable, please share it in the comment section and I will do my best to come up with a good solution for it.</p>

<p>And as always,</p>

<p>Have a nice day!</p>

<p>Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>Updating All Jenkins Jobs Via Jenkins API – Python</title>
			<link>https://skarlso.github.io/2014/11/07/updating-all-jenkins-jobs-via-jenkins-api-python/</link>
			<pubDate>Fri, 07 Nov 2014 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2014/11/07/updating-all-jenkins-jobs-via-jenkins-api-python/</guid>
			<description>&lt;p&gt;Hello everybody.&lt;/p&gt;

&lt;p&gt;I would like to share with you a small script I wrote to update all, or a single, Jenkins job from a Python script remotely.&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Hello everybody.</p>

<p>I would like to share with you a small script I wrote to update all, or a single, Jenkins job from a Python script remotely.</p>

<p>This will enable you to update a Jenkins job from anywhere using an admin credential based on a config.xml template that you have. With this, if you want to apply a config change to all or just a single job in Jenkins, you don&#8217;t have to go and do it for all the rest. You just call this script and it will cycle through all the jobs you have and update them if the begin with &#8220;yourpipelinedelimiter&#8221; or if they aren&#8217;t in a restricted list of jobs. The delimiter helps to identify pipelines which are dev pipelines. If you have multiple pipelines which are helpers or builders and you don&#8217;t usually apply the same config to them, than the delimiter can help identify the dev pipelines you actually want to update.</p>

<p>Enjoy, hope it helps someone.</p>

<p>And now, without any further ado:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="python" style="font-family:monospace;"><span style="color: #483d8b;">'''
    Created to update multiple pipelines in jenkins with a given configuration and job list.
    Usage: 
    Example 1:
    Updating a single pipeline's job with a given config.xml.
    python update-jenkins-jobs.py job-name config.xml pipeline-name
    Example 2:
    Updating every pipeline in jenkins dynamically. !!!WARNING!!! This updates every job EXCEPT of the ones specified in restricted_jobs.
    python update-jenkins-jobs.py job-name config.xml
'''</span>
<span style="color: #ff7700;font-weight:bold;">from</span> <span style="color: #dc143c;">xml</span>.<span style="color: black;">dom</span> <span style="color: #ff7700;font-weight:bold;">import</span> minidom
<span style="color: #ff7700;font-weight:bold;">import</span> requests
<span style="color: #ff7700;font-weight:bold;">import</span> <span style="color: #dc143c;">sys</span>
&nbsp;
<span style="color: #ff7700;font-weight:bold;">def</span> update_pipeline<span style="color: black;">&#40;</span>pipeline<span style="color: black;">&#41;</span>:
    <span style="color: #483d8b;">'''
    Takes in a list of pipelines to update.
    '''</span>
    config_file <span style="color: #66cc66;">=</span> <span style="color: #008000;">open</span><span style="color: black;">&#40;</span>config_to_use<span style="color: #66cc66;">,</span> <span style="color: #483d8b;">'rb'</span><span style="color: black;">&#41;</span>
    headers <span style="color: #66cc66;">=</span> <span style="color: black;">&#123;</span><span style="color: #483d8b;">'content-type'</span>: <span style="color: #483d8b;">'application/xml'</span><span style="color: black;">&#125;</span>
    <span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">"Updating pipelines: "</span><span style="color: #66cc66;">,</span> pipeline<span style="color: black;">&#41;</span>
&nbsp;
    <span style="color: #ff7700;font-weight:bold;">for</span> dev_job <span style="color: #ff7700;font-weight:bold;">in</span> pipeline:
        url <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">"http://jenkins:9999/job/%s/job/%s/config.xml"</span> % <span style="color: black;">&#40;</span>dev_job<span style="color: #66cc66;">,</span> job_to_update<span style="color: black;">&#41;</span>
        r <span style="color: #66cc66;">=</span> requests.<span style="color: black;">post</span><span style="color: black;">&#40;</span>url<span style="color: #66cc66;">,</span> data<span style="color: #66cc66;">=</span>config_file<span style="color: #66cc66;">,</span> headers<span style="color: #66cc66;">=</span>headers<span style="color: #66cc66;">,</span> auth<span style="color: #66cc66;">=</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'user'</span><span style="color: #66cc66;">,</span> <span style="color: #483d8b;">'password'</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
        <span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">"Updating pipeline: %s; Response Code: %s"</span> % <span style="color: black;">&#40;</span>dev_job<span style="color: #66cc66;">,</span> r<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
&nbsp;
&nbsp;
<span style="color: #ff7700;font-weight:bold;">def</span> get_dev_pipelines<span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>:
    <span style="color: #483d8b;">'''
    Gets a list of pipelines which can be used by update_pipeline.
    '''</span>
    r <span style="color: #66cc66;">=</span> requests.<span style="color: black;">get</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'http://jenkins:9999/api/xml'</span><span style="color: #66cc66;">,</span> auth<span style="color: #66cc66;">=</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'user'</span><span style="color: #66cc66;">,</span> <span style="color: #483d8b;">'password'</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">,</span> stream<span style="color: #66cc66;">=</span><span style="color: #008000;">True</span><span style="color: black;">&#41;</span>
    job_list_xml <span style="color: #66cc66;">=</span> r.<span style="color: black;">text</span>
&nbsp;
    xmldoc <span style="color: #66cc66;">=</span> minidom.<span style="color: black;">parseString</span><span style="color: black;">&#40;</span>job_list_xml<span style="color: black;">&#41;</span>
    itemlist <span style="color: #66cc66;">=</span> xmldoc.<span style="color: black;">getElementsByTagName</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'name'</span><span style="color: black;">&#41;</span> 
&nbsp;
    dev_job_list <span style="color: #66cc66;">=</span> <span style="color: black;">&#91;</span><span style="color: black;">&#93;</span>
&nbsp;
    restricted_jobs <span style="color: #66cc66;">=</span> <span style="color: black;">&#91;</span><span style="color: #483d8b;">"yourpipelinedelimiter-dev-pipeline1"</span><span style="color: #66cc66;">,</span> <span style="color: #483d8b;">"yourpipelinedelimiter-dev-pipeline2"</span><span style="color: #66cc66;">,</span> <span style="color: #483d8b;">"yourpipelinedelimiter-dev-pipeline3"</span><span style="color: black;">&#93;</span>
    <span style="color: #ff7700;font-weight:bold;">for</span> s <span style="color: #ff7700;font-weight:bold;">in</span> itemlist:
        <span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span><span style="color: #483d8b;">"yourpipelinedelimiter-dev"</span> <span style="color: #ff7700;font-weight:bold;">in</span> s.<span style="color: black;">firstChild</span>.<span style="color: black;">nodeValue</span><span style="color: black;">&#41;</span> :
            value <span style="color: #66cc66;">=</span> s.<span style="color: black;">firstChild</span>.<span style="color: black;">nodeValue</span>
            <span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span>value <span style="color: #ff7700;font-weight:bold;">not</span> <span style="color: #ff7700;font-weight:bold;">in</span> restricted_jobs<span style="color: black;">&#41;</span>:
                dev_job_list.<span style="color: black;">append</span><span style="color: black;">&#40;</span>value<span style="color: black;">&#41;</span>
&nbsp;
    <span style="color: #ff7700;font-weight:bold;">return</span> dev_job_list
&nbsp;
&nbsp;
job_to_update <span style="color: #66cc66;">=</span> <span style="color: #dc143c;">sys</span>.<span style="color: black;">argv</span><span style="color: black;">&#91;</span><span style="color: #ff4500;">1</span><span style="color: black;">&#93;</span>
config_to_use <span style="color: #66cc66;">=</span> <span style="color: #dc143c;">sys</span>.<span style="color: black;">argv</span><span style="color: black;">&#91;</span><span style="color: #ff4500;">2</span><span style="color: black;">&#93;</span>
dev_pipeline <span style="color: #66cc66;">=</span> <span style="color: black;">&#91;</span><span style="color: black;">&#93;</span>
&nbsp;
<span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: #008000;">len</span><span style="color: black;">&#40;</span><span style="color: #dc143c;">sys</span>.<span style="color: black;">argv</span><span style="color: black;">&#41;</span> &gt<span style="color: #66cc66;">;</span> <span style="color: #ff4500;">3</span>:
    <span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">"Args length:"</span><span style="color: #66cc66;">,</span> <span style="color: #008000;">len</span><span style="color: black;">&#40;</span><span style="color: #dc143c;">sys</span>.<span style="color: black;">argv</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
    dev_pipeline.<span style="color: black;">append</span><span style="color: black;">&#40;</span><span style="color: #dc143c;">sys</span>.<span style="color: black;">argv</span><span style="color: black;">&#91;</span><span style="color: #ff4500;">3</span><span style="color: black;">&#93;</span><span style="color: black;">&#41;</span>
&nbsp;
update_pipeline<span style="color: black;">&#40;</span>get_dev_pipelines<span style="color: black;">&#40;</span><span style="color: black;">&#41;</span> <span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: #ff7700;font-weight:bold;">not</span> dev_pipeline <span style="color: #ff7700;font-weight:bold;">else</span> dev_pipeline<span style="color: black;">&#41;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Thanks for reading.</p>

<p>Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>The seven Principles of Context Driven Testing – Mind Map</title>
			<link>https://skarlso.github.io/2014/10/23/the-seven-guidelines-of-context-driven-testing/</link>
			<pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2014/10/23/the-seven-guidelines-of-context-driven-testing/</guid>
			<description>&lt;p&gt;Hi Folks!&lt;/p&gt;

&lt;p&gt;I just wanted to share with you my mind map on the seven principles of Context Driven Testing.&lt;/p&gt;

&lt;p&gt;I used the notion of dragons since it&amp;#8217;s seven. And a dragon is usually seven headed in my mind&amp;#8230;&lt;/p&gt;

&lt;p&gt;So without further ado&amp;#8230;&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Hi Folks!</p>

<p>I just wanted to share with you my mind map on the seven principles of Context Driven Testing.</p>

<p>I used the notion of dragons since it&#8217;s seven. And a dragon is usually seven headed in my mind&#8230;</p>

<p>So without further ado&#8230;</p>

<p>Click for larger image.</p>

<p>I have a hand drawn as well but I&#8217;m guessing that one wouldn&#8217;t be of much use since it follows my own imagination.</p>

<p>Here are the seven principles in points which correspond to the leafs.</p>

<ol>
<li>Value -&gt; Practice -&gt; Depends -&gt; Context =&gt; The value of any practice depends on its context.</li>
<li>People -&gt; Working -&gt; Together -&gt; Important =&gt; People, working together, are the most important part of any project’s context. ( The mob, trying to kill the dragon by working together. )</li>
<li>Problem -&gt; Project -&gt; Solution =&gt; The product is a solution. If the problem isn’t solved, the product doesn’t work. ( The sword. It&#8217;s a sword but if it doesn&#8217;t kill the Dragon it&#8217;s useless. )</li>
<li>Good Testing -&gt; Intellectual Challenge =&gt; Good software testing is a challenging intellectual process. ( Well it&#8217;s a dragon with glasses. That&#8217;s something you rarely see. )</li>
<li>Good Practice | Bad Practice -&gt; In Context -&gt; No Best Practices =&gt; There are good practices in context, but there are no best practices. ( This one was a little bit tricky. But basically you want to solve the dungeon and not plow through it )</li>
<li>Uncertainty =&gt; <span style="font-size: 14px; line-height: 1.8em;">Projects unfold over time in ways that are often not predictable. ( For me this one word was enough. )</span></li>
<li>Exercised By All In Time -&gt; Judgement | Skill | Cooperatively =&gt; Only through judgment and skill, exercised cooperatively throughout the entire project, are we able to do the right things at the right times to effectively test our products. ( It&#8217;s a flexing dragon&#8230; Easy, right? )</li>
</ol>

<p>So this map helped me to remember everything. The descriptions, applications that are further described I remembered by using this mind map as a <a href="http://en.wikipedia.org/wiki/Method_of_loci" target="_blank">loci</a>.</p>

<p>I hope somebody found this useful.</p>

<p>Thanks for reading!</p>

<p>Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>Python Course Review</title>
			<link>https://skarlso.github.io/2014/08/25/python-course-review/</link>
			<pubDate>Mon, 25 Aug 2014 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2014/08/25/python-course-review/</guid>
			<description>&lt;p&gt;Hello Everybody.&lt;/p&gt;

&lt;p&gt;Today I&amp;#8217;d like to write a little bit about a python course I did.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s an 8 week course on algorithmic programming with fun little projects. I&amp;#8217;d like to write down some of my solutions with pseudo code for my own better understanding and for the sake of sharing knowledge. I won&amp;#8217;t, however, share full projects since that would be against the honour code.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s begin&amp;#8230;&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Hello Everybody.</p>

<p>Today I&#8217;d like to write a little bit about a python course I did.</p>

<p>It&#8217;s an 8 week course on algorithmic programming with fun little projects. I&#8217;d like to write down some of my solutions with pseudo code for my own better understanding and for the sake of sharing knowledge. I won&#8217;t, however, share full projects since that would be against the honour code.</p>

<p>Let&#8217;s begin&#8230;</p>

<p><strong>Week Zero</strong></p>

<p>This week was all about getting the hang out of reading the posts and the documentation and the questions and getting used to the wordings. The tutors really out did themselves. They tried to make a course that can be both funny and teach something at the same time which is anything but easy.</p>

<p>Even though the tasks that were given were interesting al-bight at times a little bit far stretched and could have been easier done if used something else to complete them. But if we would have done that, what&#8217;s the point of it all then?</p>

<p>So I&#8217;ll try to recall everything solely based on my notes taken in those 8 weeks. Let&#8217;s see how much I truly learned.</p>

<p><strong>Assignment of week one</strong></p>

<p>We were to build the game 2048 which if you played you know what it is all about.</p>

<div style="width: 225px" class="wp-caption alignleft">
  <img src="http://ironyca.files.wordpress.com/2014/03/2048-game.jpg?w=500&h=666" alt="" width="215" height="287" />
  
  <p class="wp-caption-text">
    2048 Game
  </p>
</div>

<p>The goal is to add up numbers so that higher and higher numbers are created. There is no real &#8220;end&#8221; of the game. You can continue as long as you have space left although the intended goal is to create 2048. There are a couple of clones of this game and we were supposed to write one this time of our own.</p>

<p>We approached this game with the intention of refreshing our memory about Python. Handling matrices python syntax, counting indices and a bit of assessment about the general understanding of Mathematics and programming from the populace.</p>

<p>I must say it was hard. It was hard to get back into the habit of properly thinking about something at first. It was hard to get used to Math again which I missed for a very long time. I forgot many things and as English is not my first language many things written about Math in English were extremely hard to understand in the beginning.</p>

<p>But thankfully for my trusty mathematics Bible in Hungarian I was saved.</p>

<div style="width: 187px" class="wp-caption alignleft">
  <img src="http://s02.static.libri.hu/cover/9f/3/818403_5.jpg" alt="" width="177" height="248" />
  
  <p class="wp-caption-text">
    Math book
  </p>
</div>

<p>This book is 1448 pages long but contained all the information necessary to get my mind back into the game. And oh boy was it worth the initial trouble. I had to first realize that I forgot so much it was very painful and immensely disappointing, frustrating and shameful. But you should never give up and so I fought my way through it.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>And it was extremely helpful to do Tests First. As the grading was based on how many of a given set of Unit Tests were passing it was very helpful to start tests first which were leading the design of the program. Also it was crucial to work in as little chunks as possible since one could easily lost himself trying to grasp a problem proving to be too large to look at from afar.</p>

<p>The hard part about this project was the Merging of the numbers and creating the proper grid which results from the Merge. Here are some examples:</p>

<ul>
<li><code style="color: #dd1144;">[2, 0, 2, 4]</code> should return <code style="color: #dd1144;">[4, 4, 0, 0]</code></li>
<li><code style="color: #dd1144;">[0, 0, 2, 2]</code> should return <code style="color: #dd1144;">[4, 0, 0, 0]</code></li>
<li><code style="color: #dd1144;">[2, 2, 0, 0]</code> should return <code style="color: #dd1144;">[4, 0, 0, 0]</code></li>
<li><code style="color: #dd1144;">[2, 2, 2, 2]</code> should return <code style="color: #dd1144;">[4, 4, 0, 0]</code></li>
<li><code style="color: #dd1144;">[8, 16, 16, 8]</code> should return <code style="color: #dd1144;">[8, 32, 8, 0]</code></li>
</ul>

<p>In order to achieve this you must trim the zeros like this <span style="color: #ff0000;">[2,2,4]</span> and than produce the result which is <span style="color: #ff0000;">[4,4]</span> and put a couple of zeros at the end <span style="color: #ff0000;">[4,4,0,0]</span>. My first though was to use the Deque class in Python in order to achieve this but that was an outside module which was not allowed.</p>

<p>It was an interesting way to begin the course. Many people left at this point and were leaving afterwards too. Most of them in frustration that they were missing the python knowledge the rest out of frustration of not knowing the necessary math. At the end though it was getting easier to follow the problems after we got used to the conventions and sentence structures. The professors were also helpful and sometimes re-worded some of the descriptions to better describe what they wanted.</p>

<p><strong>Week One</strong></p>

<p>So after a hard start we moved on to a very interesting week one. This one got me into a certain game I don&#8217;t want to see ever again&#8230; It&#8217;s name: <strong><a title="Cookie Clicker" href="http://orteil.dashnet.org/cookieclicker/" target="_blank">Cookie Clicker</a>.</strong></p>

<p><img class="alignnone" src="http://img2.wikia.nocookie.net/__cb20130827014912/cookieclicker/images/5/5a/PerfectCookie.png" alt="" width="203" height="203" /></p>

<p>We sort of had to re-create the cookie clicker but without the clicking. We only were supposed to re-create the buying of upgrades and simulate a sequence of clicks via the means of a cycle.</p>

<p>In this week the description of the tasks was, at the least, confusing. They started to use the term _time _which lead many to believe that we were somehow supposed to use python&#8217;s date / time methods and libraries. But after a couple of re-reads it was apparent that by _time <em>they actually were referring to </em><strong>cycle count.</strong>_<strong> </strong></p>

<p>Knowing this made the task at hand a lot easier. This time around our main focus were the following:</p>

<ul>
<li>Mathematical Sums</li>
<li>Finding the Max</li>
<li>Higher &#8211; Order functions</li>
<li>Plotting with Python</li>
</ul>

<p>The course just went into overdrive. We were looking a lot at thing like these:</p>

<p><span id="MathJax-Span-185" class="mrow"><span id="MathJax-Span-186" class="munderover"><span id="MathJax-Span-187" class="mo">∑</span><span id="MathJax-Span-193" class="mi" style="font-style: italic;">n i=0 </span></span><span id="MathJax-Span-194" class="msubsup"><span id="MathJax-Span-195" class="mi" style="font-style: italic;">α^</span><span id="MathJax-Span-196" class="mi" style="font-style: italic;">i </span></span><span id="MathJax-Span-197" class="mo">= </span><span id="MathJax-Span-198" class="msubsup"><span id="MathJax-Span-199" class="mi" style="font-style: italic;">α^</span><span id="MathJax-Span-200" class="mn">0 </span></span><span id="MathJax-Span-201" class="mo">+ </span><span id="MathJax-Span-202" class="msubsup"><span id="MathJax-Span-203" class="mi" style="font-style: italic;">α^</span><span id="MathJax-Span-204" class="mn">1 </span></span><span id="MathJax-Span-205" class="mo">+ </span><span id="MathJax-Span-206" class="msubsup"><span id="MathJax-Span-207" class="mi" style="font-style: italic;">α^</span><span id="MathJax-Span-208" class="mn">2 </span></span><span id="MathJax-Span-209" class="mo">+ </span><span id="MathJax-Span-210" class="mo">.</span><span id="MathJax-Span-211" class="mo">.</span><span id="MathJax-Span-212" class="mo">. </span><span id="MathJax-Span-213" class="mo">+ </span><span id="MathJax-Span-214" class="msubsup"><span id="MathJax-Span-215" class="mi" style="font-style: italic;">α^</span><span id="MathJax-Span-216" class="mi" style="font-style: italic;">n </span></span><span id="MathJax-Span-217" class="mo">= </span><span id="MathJax-Span-218" class="mfrac"><span id="MathJax-Span-219" class="mrow"><span id="MathJax-Span-220" class="msubsup"><span id="MathJax-Span-221" class="mi" style="font-style: italic;">α^(</span><span id="MathJax-Span-222" class="texatom"><span id="MathJax-Span-223" class="mrow"><span id="MathJax-Span-224" class="mi" style="font-style: italic;">n</span><span id="MathJax-Span-225" class="mo">+</span><span id="MathJax-Span-226" class="mn">1) </span></span></span></span><span id="MathJax-Span-227" class="mo">− </span><span id="MathJax-Span-228" class="mn">1 / </span></span><span id="MathJax-Span-229" class="mrow"><span id="MathJax-Span-230" class="mi" style="font-style: italic;">α </span><span id="MathJax-Span-231" class="mo">− </span><span id="MathJax-Span-232" class="mn">1</span></span></span></span></p>

<p>It was rather awesome though frustrating at first like I wrote earlier. These were the easier one.</p>

<p>Finding the maximum is trivial. Especially if you are using a built in <strong>max </strong>provided by Python. But if you mix it with Higher-Order functions it gets interesting. If you want to do anything else as well and not just a max, for example getting the index of the maximum item as well, you usually end up writing a custom Max any ways.</p>

<p>Plotting in Python was exquisite interesting. The garphs which were produced showed as an insight into how powerful a solution really is or how effective. Here came in the Big-O notations almost. To see if a function was exponential, logarithmic or plain polynomial. O(n), O(n^2), O(logn) etc, etc.</p>

<p>This resulted in very interesting graphs like this:</p>

<p><strong>Week Two</strong></p>

<p>So last week we had plotting and counting this week was even more interesting. Week Two&#8217;s main focus was <strong>Probability</strong>. Specifically the <a href="http://en.wikipedia.org/wiki/Monte_Carlo_method" target="_blank"><strong>Monte Carlo</strong> <strong>methods</strong></a>. Tl;dr; it describes that if you try something enough times you can derive a result that will be, with very high probability, the one you are looking for (expected value).</p>

<p>We tried out this algorithm by playing a nice game of tic-tac-toe.</p>

<p><img class="alignleft" src="http://www.janetkruskamp.com/Images/TicTacToe.jpg" alt="" width="227" height="227" /></p>

<p>The point of this exercise was to create a machine player which, after running a 1000 or so random scenarios, was choosing the best option given a certain game state. It was difficult to get the results to always return a correct answer. At this point last weeks plotting became important since if your Monet Carlo algorithm was not fast enough the program was running increasingly slower and slower.</p>

<p>I was not very satisfied with my solution. It worked, but it was very slow and it wasn&#8217;t always returning the best option&#8230;</p>

<p><strong>Week Three</strong></p>

<p>So what comes after probability? Correct. <strong>Combinatorics. </strong></p>

<p>The next hill to climb was combinatorics. Fortunately for me I love probability and combinatorics so this was a little bit easier for me. I was getting the hang out of function calculation as well so I wrote better homework and better projects at this point. Which is the aim of the course, right?</p>

<p>The game we used for this approach was <a href="http://en.wikipedia.org/wiki/Yahtzee" target="_blank"><strong>Yahtzee</strong></a>.</p>

<p><img class="alignleft" src="http://playpop.com/medias/images/splashscreens/yahtzee_en.png" alt="" width="279" height="201" /></p>

<p>Now let me say this without too much remorse. I truly, fully and with all my heart, hate Yahtzee. I think it&#8217;s stupid. I&#8217;m sorry. I truly do. The only thing I can think of when I hear yahtzee is the South Park version of it.</p>

<p>&nbsp;</p>

<p>South Park Version of Yahtzee + Tron:</p>

<p>I share the enthusiastic look of Stan here.</p>

<p>Anyhow, moving on&#8230; Thank to the coursera Gods we weren&#8217;t suppose to write a whole game of Yathzee just a very simplified version of it. We were supposed to count the upper combinations on the second throw. So you already have one throw and you must choose how many die you want to hold on to to maximise the possibility of the best outcome possible. Huh&#8230; come again?</p>

<p>So you already had a hand. And now the program was to determine which die you were supposed to hold on too in order to maximise the score you can achieve with the remaining two throws.</p>

<p>There were a few interesting things that came in with this task. For example this was the first time I could use a Dict init from a list with a zip.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="python" style="font-family:monospace;">hand_dict <span style="color: #66cc66;">=</span> <span style="color: #008000;">dict</span><span style="color: black;">&#40;</span><span style="color: #008000;">zip</span><span style="color: black;">&#40;</span><span style="color: #008000;">list</span><span style="color: black;">&#40;</span>hand<span style="color: black;">&#41;</span><span style="color: #66cc66;">,</span> <span style="color: black;">&#91;</span><span style="color: #ff4500;"></span><span style="color: black;">&#93;</span>*<span style="color: #008000;">len</span><span style="color: black;">&#40;</span>hand<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>And this was the point in course were I found perhaps the most interesting thing. I found an actual use for reduce which was working. I was beginning to get into the habit of using map, filter, reduce.</p>

<p>This was the beauty:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="python" style="font-family:monospace;">my_list <span style="color: #66cc66;">=</span> <span style="color: #008000;">reduce</span><span style="color: black;">&#40;</span><span style="color: #ff7700;font-weight:bold;">lambda</span> z<span style="color: #66cc66;">,</span> x: z + <span style="color: black;">&#91;</span>y + <span style="color: black;">&#91;</span>x<span style="color: black;">&#93;</span> <span style="color: #ff7700;font-weight:bold;">for</span> y <span style="color: #ff7700;font-weight:bold;">in</span> z<span style="color: black;">&#93;</span><span style="color: #66cc66;">,</span> hand<span style="color: #66cc66;">,</span> <span style="color: black;">&#91;</span><span style="color: black;">&#91;</span><span style="color: black;">&#93;</span><span style="color: black;">&#93;</span><span style="color: black;">&#41;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>This piece of code produced all the combinations of a given hand which was a list of Tuples. It merged them into a list of lists which I created a list of Tuples out from. After this my life was never ever the same again.</p>

<p><strong>Week Four</strong></p>

<p>For me this was the most interesting part of the course. I LOVED this task. Focus was:</p>

<ul>
<li>Python Generators</li>
<li>Stacks / Queues</li>
<li>Inheritance in Python</li>
<li>Girds</li>
<li>Grid Search / <a href="http://en.wikipedia.org/wiki/Breadth-first_search" target="_blank">Breadth First Search</a></li>
</ul>

<p>And the task with which we were supposed to achieve this was&#8230;. <span style="color: #ff0000;"><strong>Zombie Apocalypse</strong></span>. It was sort of like <strong><a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life" target="_blank">Conway&#8217;s Game of Life</a></strong>. Given a grid in which there were <span style="color: #ff0000;"><strong>Zombies</strong></span><strong> </strong>and <span style="color: #000000;"><strong><span style="color: #339966;">Humans </span></strong></span> <strong><span style="color: #000000;">Obstacles.</span></strong></p>

<p>The Zombies could only move up, down, left, right. The humans could flee diagonally and none of them could penetrate an obstacle. It was very much fun to write this. The most challenge was to learn the proper implementation of the breadth first search algorithm as the Zombies had to detect the nearest Humans to move towards to and the Humans needed to see the nearest Zombies to flee from.</p>

<p><strong>Week Five</strong></p>

<p>Halfway through it was become difficult to maintain the time needed for this course. I was finding myself applying a few late days here and there. This was a two months course after all. I did not have all the time in the world at my disposal. But I managed to submit everything without penalties.</p>

<p>So this weeks task was rather mundane. It was a <strong>world wrangler</strong>. Which means given a word generate valid words from the letters in the provided word.</p>

<p>The algorithm we were supposed to use though was for me a bit of a challenge. I&#8217;ll be honest with you, for me, it was a little bit hard to wrap my head around this one. But eventually I succeeded.</p>

<p>It was Merge-Sort and Recursion. Let me tell you this now, I hate merge-sort. Recursion I do love though. What I never learned though and was very interesting for me to learn now was recurrences in mathematics. Well never learned is a bit harsh since I knew Fibonacci already and Pascal&#8217;s Triangle but the mathematical definition was a refreshing new view. I&#8217;m talking about <a href="http://en.wikipedia.org/wiki/Recurrence_relation" target="_blank"><strong>Recurrence Relations</strong></a>.</p>

<p><img class="mwe-math-fallback-png-inline tex" style="color: #252525;" src="http://upload.wikimedia.org/math/1/a/4/1a4da05124f61db47a4805b411ff8c3b.png" alt="F_n = F_{n-1}+F_{n-2}" /></p>

<p>This is the Recurrence relation of the famous Fibonacci. Easy, right? Well the hard part is when you are trying to get the <a href="http://en.wikipedia.org/wiki/Binet_formula#Closed-form_expression" target="_blank"><strong>closed-form-expression</strong></a> of a Recurrence.</p>

<p><strong>Week Six</strong></p>

<p>Finally it was coming to an end. The last week was easy so this week had to have a punch. And oh boy it did. This weeks focus:</p>

<ul>
<li>Trees</li>
<li>Lambdas</li>
<li>Illustration of Trees</li>
<li><a href="http://en.wikipedia.org/wiki/Minimax" target="_blank">Minimax</a></li>
<li><a href="http://en.wikipedia.org/wiki/Depth-first_search" target="_blank">Depth First Search</a></li>
</ul>

<p>If I hated merge-sort I hated minimax more. I don&#8217;t know why but it was again very hard for me to properly grasp this concept. I mean I understood what needed to be done of course but writing it done with code proved to be more difficult then I thought it would be.</p>

<p>After hours of research and reading finally I could come up with a solution which was working. I wouldn&#8217;t say it was good&#8230; But it was working.</p>

<p>The game with which we were supposed to demonstrate this algorithm was&#8230; Tic-Tac-Toe. Turns out that it&#8217;s rather common place to show off minimax with tic-tac-toe as it was fewer possibilities. The point of the exercise was the following&#8230;:</p>

<p><img class="alignnone" src="http://www.ocf.berkeley.edu/~yosenl/extras/alphabeta/alphabeta.jpg" alt="" width="516" height="405" /></p>

<p>&nbsp;</p>

<p>To create trees out of the possible moves given a certain game state. This time we wanted to make absolutely sure that if we can&#8217;t win the game at least we won&#8217;t loose it. And that&#8217;s the point of minimax. It will minimize your losses.</p>

<p>Now there are several things about this algorithm that are hard.</p>

<p><strong>Performance of Minimax</strong></p>

<p>It has and always will be a very interesting task for programmers to try to achieve a better performance for these calculations. Since it&#8217;s trying to build up a tree with all the possible combinations a game can have it will end up with a huge tree which will take ages to traverse.</p>

<p>A few of the solutions could be to exit the search once you have a definitive answer. If you find a winning move there is no point of looking any further. You just stop.</p>

<p>You can create the tree dynamically. You can make it somehow intelligent enough to predict a possible best first move and then use minimax on the rest. Or use <a href="http://en.wikipedia.org/wiki/Alpha-beta_pruning" target="_blank"><strong>Alpha-beta pruning</strong></a>.</p>

<p><strong>Week Seven</strong></p>

<p>And so we are coming to an end. Last weeks assignment was basically to put all the previous weeks knowledge together to create the application called 15 puzzle.</p>

<p><img class="alignleft" src="http://kociemba.org/fifteen/pics/puz.jpg" alt="" width="183" height="183" /></p>

<p>Now, there was however a little addition to the previous knowledge. It was <a href="http://en.wikipedia.org/wiki/Invariant_(computer_science)" target="_blank"><strong>invariants</strong></a>. Now, I love Logic. And I&#8217;ve been actually using invariants in computer science programming and testing for a long time so this part was not really a problem.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>An example of an invariant in python would be something like this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="python" style="font-family:monospace;"><span style="color: #ff7700;font-weight:bold;">while</span> x &lt<span style="color: #66cc66;">;=</span> <span style="color: #ff4500;">5</span>:
  x <span style="color: #66cc66;">=</span> x + <span style="color: #ff4500;">1</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>This is a loop invariant example. In you find a very useful invariant in your program you can write an assert for it which will help you debug your code and work in small chunks. Invariants will make refactoring your code a hell of a lot easier. As if your invariant is suddenly false you need to check what went wrong.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="python" style="font-family:monospace;"><span style="color: #ff7700;font-weight:bold;">while</span> x &lt<span style="color: #66cc66;">;=</span> <span style="color: #ff4500;">5</span>:
  x <span style="color: #66cc66;">=</span> x + <span style="color: #ff4500;">1</span>
  <span style="color: #ff7700;font-weight:bold;">assert</span> x &lt<span style="color: #66cc66;">;=</span> <span style="color: #ff4500;">6</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>This assert will make sure that if your invariant for whatever reason isn&#8217;t true your code fails immediately.</p>

<p><strong>End Credits</strong></p>

<p>So this was the end of the course. I learned a a lot from this course and I&#8217;m very proud of myself for completing it. I took away a lot from this course. I took away confidence and logical thinking. I took away greater trust in my Python knowledge and that it&#8217;s very important to keep my skills from deteriorating.</p>

<p>And I think math is important for proper, deep understanding of programming as a science. I think refreshing my math skills gave me at least a deeper trust in my ability to write a piece of code however complicated it might appear. After writing a minimax algorithm I think some Hibernate with DIP and SRP will prove to be less of a problem. Or at least a different category of a problem&#8230;. Hehe.</p>

<p>Thanks for reading!
Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>Five reasons why a tester should learn SQL</title>
			<link>https://skarlso.github.io/2014/05/31/five-reasons-why-a-tester-should-learn-sql/</link>
			<pubDate>Sat, 31 May 2014 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2014/05/31/five-reasons-why-a-tester-should-learn-sql/</guid>
			<description>&lt;p&gt;Hello Folks.&lt;/p&gt;

&lt;p&gt;So last I was writing about why a tester should learn Javascript. Today I would like to write about why a tester should learn SQL.&lt;/p&gt;

&lt;p&gt;There, I said it. I know many people, especially testers, don&amp;#8217;t like SQL. They view it as a monster best be avoided. Something only Database people will know. Something which is so scary and ugly, nobody really wants it.&lt;/p&gt;

&lt;p&gt;But I will give you a couple of good reasons why you shouldn&amp;#8217;t be afraid of SQL. And why you should welcome it as your best friend and partner in crime.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s go.&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Hello Folks.</p>

<p>So last I was writing about why a tester should learn Javascript. Today I would like to write about why a tester should learn SQL.</p>

<p>There, I said it. I know many people, especially testers, don&#8217;t like SQL. They view it as a monster best be avoided. Something only Database people will know. Something which is so scary and ugly, nobody really wants it.</p>

<p>But I will give you a couple of good reasons why you shouldn&#8217;t be afraid of SQL. And why you should welcome it as your best friend and partner in crime.</p>

<p>Let&#8217;s go.</p>

<p><strong>Reason Number One: Data gathering</strong></p>

<p>This one is obvious and clear as the sun. You can use simple queries to mine for data. To look up changes and compare time intervals between insertion and update events. You can monitor certain tables so that when they are updated, you&#8217;ll get a red flag.</p>

<p><strong>Reason Number Two: Test Run Statistics</strong></p>

<p>This one is from my friend Adrian. Basically if you would like to know more about what&#8217;s happening with your tests when they run, for example:</p>

<ul>
<li>Run time</li>
<li>Frequency of Test outcome</li>
<li>Failure rate</li>
<li>Environment details -&gt; Execution slave</li>
</ul>

<p>One interesting way to achieve this is, to have the test report running and outcomes into a little mysql database and than create queries of certain types like, show me the last run of every test called xyz and show me the environmental details and the run time. With this closely monitored you could find out that Slave #345 is sluggish because each time the test ran on it, it took more then 10 minutes where as the others only took 5-6.</p>

<p><strong>Reason Number Three: Data Manipulation</strong></p>

<p>So after monitoring comes naturally the edit. Understanding how databases work and knowing a few queries here and there can help you manipulating your data in a way that it will be easier to test data dependant scenarios.</p>

<p>Instead of making a new entry you could edit what you already have.</p>

<p>For example:</p>

<p>You have a customer and you want to test the system&#8217;s ability to handle people on your site who are suspended from access. But the ability to suspend is not yet working. Will that stop you from testing this feature? Will you put this feature into blocked because: &#8220;Ohh, we can&#8217;t yet suspend a player so we need to wait until that&#8217;s done.&#8221;</p>

<p>No. You don&#8217;t wait. You dig into your database, find the necessary record, change it&#8217;s state to the desired state; even if it has a foreign key which needs to be updated or that status doesn&#8217;t exist yet, in which case you ADD it to the list of states yourself. You don&#8217;t let yourself be stopped just because something is not done yet. You move on by being clever.</p>

<p><strong>Reason Number Four: Understanding Data migration issues</strong></p>

<p>A big issue these days if you go into a project where you have a previous version of what you are currently building will be migrating over old data into the new database scheme. Testing such a thing can be a pain in the butt. But it will be a LOT easier if you understand the changes. If you know what changed, how and why, you can manipulate your data in order to fit the new scheme. Or if you need to test it you won&#8217;t be afraid of running some stored procedures in a dummy database with old data and than run a few queries to see what broke and what didn&#8217;t.</p>

<p>Do you have a foreign key violation somewhere when you migrated over and have no idea what do to? Time to learn some SQL so that you don&#8217;t have to run to somebody every time you encounter it. Even if you can&#8217;t fix it, the database engineers or the devs who will fix the bug will be very happy that you provided as much information as possible in your report.</p>

<p><strong>Reason Number Five: Security</strong></p>

<p>SQL Injection is still at large. Even with these days frameworks doing full escapes it can&#8217;t hurt to test a couple just to be on the safe side. And writing a clever script that mines for accessible tables here and there is an essential skill in a security tester&#8217;s repertoire.</p>

<p><strong>Reason Bonus: Performance, HibernateQL, Information</strong></p>

<p>Lastly a bit of a bonus are these three.</p>

<p><strong>Performance</strong></p>

<p>Suppose you are running a web application. You access a large list and you notice that it&#8217;s sort of sluggish. You first blame it on the network so you test it locally. It seems to be better now so you move on but it leaves a little voice in your head so you can&#8217;t abandon it. You go back and try locally again with a bit more data in your database.</p>

<p>You notice it&#8217;s a little bit better but it&#8217;s still somehow sluggish. Suddenly you get a hunch and turn on SQL logging in your tomcat instance. You click the link again and wait with eyes wide open on what happens next. It&#8217;s your worst nightmare.</p>

<p>The SQL queries the whole database with a simple select and than filters the data on the front-end side. Which is a really really dumb thing to do. So you file a bug for which the title is something similar to this: &#8220;Customer Transaction History query doesn&#8217;t apply WHERE | INNER SELECT | PAGING on SQL rather it filters on the application layer.&#8221;</p>

<p><strong>HibernateQL</strong></p>

<p>This is the SQL language of hibernate which is the underlying technology in many java web frameworks these days. It uses it&#8217;s own thing called <a href="http://docs.jboss.org/hibernate/orm/3.3/reference/en/html/queryhql.html" target="_blank">HQL</a>. Main difference, as this page already says, is that it&#8217;s a full blown Object Oriented query language which understand inheritance and polymorphism which is very exciting.</p>

<p><strong>Information</strong></p>

<p>Last but not least I mentioned this one earlier. You can provide more information in your bug reports as in what data you used, where was it happening, what was the last update date, which environment and what query was executed ( if you have query debugging turned on ). Whoever reads that bug report will find it very helpful that you provided enough information to reproduce it anywhere.</p>

<p>Because many times the culprit for a bug is the underlying data.</p>

<p><strong>Reading and Practising resources</strong></p>

<p>Here is a very awesome picture of how to understand JOINS which is everybody&#8217;s fear.</p>

<div style="width: 976px" class="wp-caption aligncenter">
  <img src="http://www.codeproject.com/KB/database/Visual_SQL_Joins/Visual_SQL_JOINS_orig.jpg" alt="SQL Join Cheat Sheet" width="966" height="760" />
  
  <p class="wp-caption-text">
    SQL Join Cheat Sheet
  </p>
</div>

<p>And a post on <a href="http://blog.codinghorror.com/a-visual-explanation-of-sql-joins/" target="_blank">Coding Horror</a> which is essentially the same but I like how Jeff writes.</p>

<p>Also if you would like to practice writing SQL scripts and no longer be afraid of them all the rest of your life go to this site =&gt; <a href="http://sqlzoo.net/" target="_blank">SQLZoo</a>. It&#8217;s an interactive way of trying out your SQL skills and testing them on very clever database structures.</p>

<p>But if you, like me, love to learn PLAYING than THIS is the place for you =&gt; <a href="https://schemaverse.com/" target="_blank">The Schemaverse</a>. It&#8217;s a SQL based space shooting strategy game awesomeness! Have FUN learning SQL.</p>

<p>Thanks for reading!</p>

<p>Have a nice day|night!</p>

<p>Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>TDD is Dead – Not really</title>
			<link>https://skarlso.github.io/2014/05/26/tdd-is-dead-not-really/</link>
			<pubDate>Mon, 26 May 2014 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2014/05/26/tdd-is-dead-not-really/</guid>
			<description>&lt;p&gt;Is TDD dead?&lt;/p&gt;

&lt;p&gt;Not really. So let&amp;#8217;s talk about this topic for a little bit.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m sure you already read a gazillion posts about this debate but frankly I&amp;#8217;m writing this for myself, to rant a little bit, you know&amp;#8230; Because somebody is wrong on the internet and I must intervene.&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Is TDD dead?</p>

<p>Not really. So let&#8217;s talk about this topic for a little bit.</p>

<p>I&#8217;m sure you already read a gazillion posts about this debate but frankly I&#8217;m writing this for myself, to rant a little bit, you know&#8230; Because somebody is wrong on the internet and I must intervene.</p>

<p>So first of all, the hashtag #tddisdead (and I will use it shamelessly as well). This is clearly an attempt to get as many peoples attention as you can. TDD is NOT DEAD. Obviously since it has soooo many supporters how could it be dead? It&#8217;s like asking, is Design Patterns dead? Or is Functional Automation dead? Or is Oreo cookies dead?</p>

<p>No, it&#8217;s not dead. And it won&#8217;t ever be dead. It will maybe change into something new, something better even, but it will never be dead. So let&#8217;s skip that part.</p>

<p>Now, about the <strong>debate</strong>.</p>

<p>I haven&#8217;t hear so much bull spoken for this long since I watched the political debate of two fractions in my home country. The right wing extremists against the left wing&#8230;. I don&#8217;t know whats. And it was just that. A political debate. It had no merit and no value whatsoever. At all. Nothing.</p>

<p>And right in the middle <strong>DHH</strong> says this:</p>

<p><em>&#8220;&#8230;you&#8217;re not done until you also have tests for a piece of functionality &#8212; I&#8217;m completely on board with that.&#8221;.</em></p>

<p>That made the whole conversation completely irrelevant.</p>

<p>Every counter against TDD I heard was <strong>bull</strong>. Not in that debate, in general. People are either too lazy to write them, just don&#8217;t want to get out of their comfort zone, don&#8217;t really care about tests, or don&#8217;t really care about quality or under time pressure ( I get to this later. ).</p>

<p>Which brings me to my next point.</p>

<p><strong>Quality</strong></p>

<p>People seem to not care about quality that much. Would they, they would understand that having a bulletproof west will save your life when you get shot in the chest with a 357 magnum. You can flush out early design flaws you can detect early bugs and do a better system design.</p>

<p>Sure if you are the most intelligent man on the planet maybe you can come up with a perfect system on the first draft and then implement it flawlessly so that it doesn&#8217;t fall apart in two months time. But most people can&#8217;t. Most people make errors on the way.</p>

<p>And yes, writing tests can be hard. But guess what? If writing a test is hard because that part of the system is complicated, than it will be that part of the system which will react the worst to change. And only change is constant. Which brings me to the next item&#8230;</p>

<p><strong>Time constraints</strong></p>

<p>So your manager is sitting right next to you and saying come on we are paying you to write code and not tests so do it! And you have to have a feature done today but if you write a suite of tests you&#8217;ll only finish tomorrow. Sure, your estimate at that point will become a very quick one because you make a sacrifice of trust.</p>

<p>And then the next story comes along and you say&#8230; <em>&#8220;Sure I can do that as well. No problem I know how my system works, right? Hmm&#8230; why the hell did that break all of a sudden? I didn&#8217;t change anything in that module&#8230; Ahh damn it I said I&#8217;ll be done today, so let&#8217;s just fix this quickly and then move on to the next card.&#8221;</em></p>

<p>And the next story comes along&#8230; <em>&#8220;Sure I can do that&#8230; wait a minute&#8230; Didn&#8217;t that part brake already twice? Damn, better refactor. Ohh shit, why is that now breaking???? Damn it I said I&#8217;ll be done tomorrow, better patch it, and then move on. Hmm let&#8217;s write a test here to make sure this does not break. Ohhh damn I need PowerMock for that stuff since it&#8217;s in another module. Why the hell is that there? Should it be here in the first place since it&#8217;s somehow used by that other class there? Interesting. Let&#8217;s refactor and put it in here so I can mock it. Ahhhh f*ck now all the rest of the system is not working. Damn, I&#8217;ll just use PowerMock. Shit. Checkstyle error. PowerMock is not allowed?? What?? Who the f*ck says that?&#8221;</em></p>

<p>You get my drift. And suddenly you end up with estimates of <strong>WEEKS</strong>!!!! instead of days / hours for a simple story.</p>

<p><strong>Finishing it up</strong></p>

<p>This a rant only. It&#8217;s my personal opinion, experience and observation of a 10 year time period in Software Testing. Starting with at least a Weak Skeleton and a few upfront tests will help you in the long run. Writing at least ONE &#8211; TWO acceptance tests WILL help you understand business logic better. Writing ONE or TWO unit tests will help you understand your logic better. I&#8217;m not saying write a whole damn suite of tests I can understand you don&#8217;t want to do that, but for quality&#8217;s sake write at least a couple.</p>

<p>You will love it, I promise you that.</p>

<p>Thanks for reading.</p>

<p>Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>Five reasons why a front-end tester should learn Javascript</title>
			<link>https://skarlso.github.io/2014/05/23/five-reasons-why-a-front-end-tester-should-learn-javascript/</link>
			<pubDate>Fri, 23 May 2014 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2014/05/23/five-reasons-why-a-front-end-tester-should-learn-javascript/</guid>
			<description>&lt;p&gt;Hello everybody.&lt;/p&gt;

&lt;p&gt;Today I would like to write about a very interesting topic, I hope. So let&amp;#8217;s get started.&lt;/p&gt;

&lt;p&gt;As the title already suggests, I&amp;#8217;m writing about why a front-end tester should learn at least a little bit about JavaScripting and the DOM.&lt;/p&gt;

&lt;p&gt;Ohhh and contrary to the belief CSP ( Content Security Policy ) will &lt;strong&gt;not&lt;/strong&gt; be the death of such scripts. There are white-lists and workarounds and exclusions which can be implemented in order to allow local JavaScripting to continue. So don&amp;#8217;t fret&amp;#8230; Read on.&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Hello everybody.</p>

<p>Today I would like to write about a very interesting topic, I hope. So let&#8217;s get started.</p>

<p>As the title already suggests, I&#8217;m writing about why a front-end tester should learn at least a little bit about JavaScripting and the DOM.</p>

<p>Ohhh and contrary to the belief CSP ( Content Security Policy ) will <strong>not</strong> be the death of such scripts. There are white-lists and workarounds and exclusions which can be implemented in order to allow local JavaScripting to continue. So don&#8217;t fret&#8230; Read on.</p>

<p><strong>Reason Number 1: Injection</strong></p>

<p>Every front-ender tester has a waste amount of tools at their disposal. Various things, like Firebug and web developer Toolbar and&#8230; Bookmarklets and <a href="https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/" target="_blank">Greasemonkey</a> and <a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=en" target="_blank">Tampermonkey</a>. These are the real powerful tools though. Your main objective at this point would be to inject something into your current site.</p>

<p>Suppose a scenario where you are testing something and you have an API at your disposal for a quick edit on a customer, like closing his account or giving him money, or doing something with his appliances. Suppose you don&#8217;t want to always switch away to another tab or call a service with certain parameters or go to a rest client and initiate that from there.</p>

<p>Suppose you could have a small injected DIV right on the page you are which gathers information for you, like the customer&#8217;s username, and wallet and whatnot, and with a simple press of a button, you just closed their account. Neat, isn&#8217;t it? Simple, fast, very comfortable with just one press of a button.</p>

<p>Suppose you have a DIV at the corner of a page, or even a drag and drop enabled one which you can drag around, with an arsenal of these buttons RIGHT THERE on your page. You don&#8217;t have to switch context at all.</p>

<p>These days it&#8217;s especially easy with tools like jQuery at your disposal. You just inject jQuery first, if the site is not already using it, and you are good to go and do whatever you like to do&#8230;.</p>

<p><strong>Reason Number 2: Data gathering</strong></p>

<p>While we are testing these application we always create some kind of a report. That report contains many things about the customer, or it&#8217;s appliances or the things he does, does not. All these could be constantly gathered by your script as it runs in the background. It gathers statistics and information which otherwise you would have to gather from some transaction history, or some kind of an action history. But no&#8230; Not the JavaScript Wizard.</p>

<p>You, would just press a button and the script would generate a report for you. It would even print it out. Create a persistent layer in which you are gathering information continuously. Create a small mySql database on your local machine and have the JavaScript enter data into that. Tadaaam&#8230;. Usage statistics at the touch of a button. All there, only waiting to be extracted.</p>

<p><strong>Reason Number 3: Tempering</strong></p>

<p>In understanding the ways of the DOM and the JavaScript you can create some very interesting test cases not to mention XSS attacks which is essentially JavaScript Injection. That&#8217;s always fun and produces many very good bugs.</p>

<p>Cookie manipulation. You want to simulate something? Like a time-out or a session loss or anything like that with a push of a button? Easy&#8230;</p>

<p><strong>Reason Number 4: Shortcuts</strong></p>

<p>You have a massive field like registration that you need to fill out? The shortest way is to have an API which you can call via a curl script. But if that&#8217;s not available and you would like to exercise the front-end any ways, then you will end up wasting hours and hours on always filling out all of those pesky fields.</p>

<p>And suddenly I&#8217;m hearing: &#8220;But I&#8217;m using Selenium plugin for that.&#8221; &#8211; you might say. Sure, use that. But I&#8217;m using Chrome. &#8220;But there is iMacros for that.&#8221; &#8211; you might say again. Sure, I know&#8230; But! Let&#8217;s see which takes longer&#8230;</p>

<p>Open selenium, load the script, run it, see it fail, run it again, ahh success, good. Same with iMacros. As opposed to, having a Bookmarklet right in front of you, on your bookmark, and with a click of a button, or with entering something into the browsers search bar, you suddenly fill out the form and press submit.</p>

<p>You see the difference is that JavaScript runs faster and more accurate by it self in such short things then with a wrapper around it. And it&#8217;s faster accessible as well.</p>

<p><strong>Reason Number 5: Security</strong></p>

<p>There are all sorts of things that a security tester can do with a small script which gathers session information and availability.</p>

<p><strong>Reason Number 6: Accessibility</strong></p>

<p>This is of course the easiest one. There are ample of scripts and browser plugins to test accessibility which is an all time favourite for everybody in the front-end land. Make your life a little bit easier. How bout just running a bookmark like <a href="http://squizlabs.github.io/HTML_CodeSniffer/">HTML_CodesSniffer</a> an see a very gorgeous result like this:</p>

<p><img src="http://i1-scripts.softpedia-static.com/screenshots/HTML-CodeSniffer_1.png" alt="" /></p>

<p>Ain&#8217;t it beautiful? What stops YOU from writing your own?</p>

<p>So get out there and learn JavaScript. It&#8217;s easy. I&#8217;m not telling you to become a front-end developer, just know thy tools and you shellet receive the blessings of the IT Gods.</p>

<p>As always,</p>

<p>Thanks for reading.</p>

<p>Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>Note taking what when how often</title>
			<link>https://skarlso.github.io/2014/05/20/note-taking-what-when-how-often/</link>
			<pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2014/05/20/note-taking-what-when-how-often/</guid>
			<description>&lt;p&gt;Hello Everybody.&lt;/p&gt;

&lt;p&gt;Today I would like to tell you about a little conversation I had with my friend Adrian.&lt;/p&gt;

&lt;p&gt;The topic was about how, when and what to log during a testing session regarding a story.&lt;/p&gt;

&lt;p&gt;So let&amp;#8217;s see what came out of that talk&amp;#8230;&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Hello Everybody.</p>

<p>Today I would like to tell you about a little conversation I had with my friend Adrian.</p>

<p>The topic was about how, when and what to log during a testing session regarding a story.</p>

<p>So let&#8217;s see what came out of that talk&#8230;</p>

<p><strong>Logging your work</strong></p>

<p>The question is really not whether you should log your work or not, but rather to what extend. Because we all know that you should log your work. It helps you recall and helps you organize and think out testing strategies. But the extend and methods are a big question. So here is my routine.</p>

<p><strong>Visually inclined</strong></p>

<p>I am a very visual person. I log my work with doodles and such like <a href="http://www.huibschoots.nl/wordpress/">Mr. Huib Schoots</a> who uses Sketchnote taking. You have seen some of my sketches if you follow my twitter feed, like this one =&gt; <img src="https://pbs.twimg.com/media/BAm6RSTCMAEvjas.jpg" alt="" />. You know I like to draw so for me colour and organizing and doodling is key to make a note more personalized and live.</p>

<p>That comes with a drawback. The draw back are many&#8230;</p>

<p>First of, I need to do that in a notebook. I could bring my wacoom tablet to work and draw in paint, but that wouldn&#8217;t be the same. And I don&#8217;t particularly like drawing on a tablet actually.</p>

<p>Second one, it&#8217;s completely unsearchable. As Adrian pointed out, you can&#8217;t search in a notebook, even if you are using side pointers like a sticky note or something. You won&#8217;t be able to instantly find and track down something you did. And after a while it gets cluttered with doodles and the notes are lost in-between. It will be very colourful and utterly useless.</p>

<p>Third one is, it&#8217;s slow. Typing is much faster.</p>

<p>On the bright side&#8230; I love doodling. And if I can draw something up with a picture I will understand it much faster rather then reading a few lines of words chunked together.</p>

<p>If I draw an awesome diagram I will get what&#8217;s going on much much faster.</p>

<p>And it will be more fun to actually right it down with a nice fountain pen with a beautiful tip that can create such marvels that you don&#8217;t want to put it down.</p>

<p>It&#8217;s portable. I can carry my notebook everywhere. I should be able to do the same with a laptop, but since it&#8217;s tied into a dock station and I don&#8217;t want to carry it around with myself everywhere I won&#8217;t do that. I could create notes though in my notebook and then write them down into the laptop after I&#8217;m done? Sure&#8230;</p>

<p>So now let&#8217;s go and see the other one.</p>

<p><strong>Electronic note-taking</strong></p>

<p>I think I already pointed out a few positives about that. It&#8217;s searchable. Definitely. It&#8217;s fast. Yes. It&#8217;s more convenient, more organized can be backed up and you won&#8217;t run out of ink or space or somebody won&#8217;t take it away to a meeting because &#8220;Ohh I saw it on your desk and I needed a paper hope that&#8217;s okay.&#8221;.</p>

<p>I understand the benefits of it. But it&#8217;s very very rigid. It has no colour, no personalization and no feeling whatsoever. It&#8217;s frigid, standardized and without life. So I need something to make it a bit better. I have a couple of tools for that.</p>

<p>First off I need a good graphics maker to create diagrams. There is an awesome free tool pointed out by Adrian to do that called <a href="http://www.yworks.com/en/products_download.php">yEd</a>. Download the zip and run the jar. I can live with that. Creates nice diagrams and flowcharts.</p>

<p><img src="http://i.imgur.com/swcdn5N.jpg" alt="" /></p>

<p>It&#8217;s quite powerful. Go look it up. There are a gazillion picture on Ze internet.</p>

<p>But the notes still lack personalization. There are a couple of tools which you can use if you, like me, shy away from everything that&#8217;s Microsoft, you have the opportunity to use Emacs with the org plugin which makes absolutely amazing documents.</p>

<p><img src="http://dto.github.io/images/tutorial-11.png" alt="" /></p>

<p>It&#8217;s awesome but the problem is that it will only work with Emacs and nothing else. And from time to time I don&#8217;t like the controls of Emacs. I&#8217;m a sublime text person. So recently I found a little plugin for sublime text called <a href="https://github.com/aziz/PlainTasks">PlainTask</a>.</p>

<p>Here is an example of how it can look like: <img src="http://www.nealsheeran.com/images/plaintasks.png" alt="" /></p>

<p>I LOVE it. You can add little notes and set a task to complete or defer it and it sort of highlights and things like that, which I like. It&#8217;s still not doodling but it get&#8217;s the job done and will be searchable and will be fast and available. And you can use Sublime text&#8217;s awesome power of foldering. Create a root folder and open it with sublime. Then create one folder / story you are testing and put everything related to that story in that directory and then press CTRL+O and unleash the magic!</p>

<p>Instant search and organization at the power of your fingertips. Even search IN the files themselves.</p>

<p>This makes it a bit better and bearable. Which brings me to the final topic.</p>

<p><strong>Note taking frequency</strong></p>

<p>So my friend argued that he create a folder for EVERY story he ever tests. Even if it&#8217;s only one word he puts into it to as a memory trigger he does it. I argued that that seems to be a little too extensive. But he said in return, and I have to agree on that, that once you stop doing something because of an excuse like, ahh I don&#8217;t need to do it because it&#8217;s a small story, you will stop doing it completely. And this is actually true for everything in your life. And as somebody who recently started running ( 1 month ago ) I understand the weight of that sentence very well.</p>

<p>So I would say do as much note taking as you can even if it is a little word that jogs your memory to remember some detail about the story. Even if it takes more time to create the folder and the note, it will help you at least to remember doing it and testing it if nothing else.</p>

<p>Although I don&#8217;t think I will do one for everything I will certainly try. Now with these awesome tools at my disposal I might even enjoy the rigidity of the keyboard more. 😉</p>

<p>Thanks for reading!</p>

<p>Have a wonderful evening!</p>

<p>Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>Using Chrome Search Engine – Multiple Search Params</title>
			<link>https://skarlso.github.io/2014/05/18/using-chrome-search-engine-multiple-search-params/</link>
			<pubDate>Sun, 18 May 2014 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2014/05/18/using-chrome-search-engine-multiple-search-params/</guid>
			<description>&lt;p&gt;Hello Everybody.&lt;/p&gt;

&lt;p&gt;Today I would like to write a few words about Chrome&amp;#8217;s Search Engines.&lt;/p&gt;

&lt;p&gt;You&amp;#8217;re probably already using it for a couple of things, like Google, or Amazon searches or YouTube or anything like that. But are you using it to access environments and testing tools faster, with queries?&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Hello Everybody.</p>

<p>Today I would like to write a few words about Chrome&#8217;s Search Engines.</p>

<p>You&#8217;re probably already using it for a couple of things, like Google, or Amazon searches or YouTube or anything like that. But are you using it to access environments and testing tools faster, with queries?</p>

<p>For example, here is a quick Jira Search made easy:</p>

<p>Keyword: jira</p>

<p>URL: <a href="https://atlas.projectname.com/jira/browse/PROJECT-%s">https://atlas.projectname.com/jira/browse/PROJECT-%s</a></p>

<p>So just type: jira|space|9999</p>

<p>Will immediately bring you to your ticket.</p>

<p>&#8220;Bah, why would I want that?&#8221; &#8211; you ask.</p>

<p>Well, it&#8217;s easy, and quick access, but wait. There is more. How about you want to access a test environment that changes only a number?</p>

<p>Keyword: testenv</p>

<p>URL: <a href="https://qa%s.projectname.com/testenv">https://qa%s.projectname.com/testenv</a></p>

<p>Just type: testenv|space|14</p>

<p>&#8220;Humbug!&#8221; &#8211; you might say. &#8220;What if I have a different URL for an admin site and my main web site AND the number, hmmm? Also I have that stuff bookmarked anyways&#8230;&#8221; &#8211; you might add in.</p>

<p>Well, don&#8217;t fret. By default, Chrome, does not provide this. I know FF does, but I don&#8217;t like FF. That&#8217;s that. So I have to make due with what I have. And indeed there is a solution for using multiple search parameters. It&#8217;s is a JavaScript you can add in into the URL part and Chrome will interpret that. You can find that JavaScript in a few posts but you will find that THAT script is actually Wrong. Here is the <strong>fixed</strong> Script, courtesy of yours truly:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre>
      </td>
      
      <td class="code">
        <pre class="javascript" style="font-family:monospace;">javascript<span style="color: #339933;">:</span>
<span style="color: #000066; font-weight: bold;">var</span> s<span style="color: #339933;">=</span><span style="color: #3366CC;">'%s'</span><span style="color: #339933;">;</span>
url<span style="color: #339933;">=</span><span style="color: #3366CC;">'https://%s.test%s.projectname.com/'</span><span style="color: #339933;">;</span>
query<span style="color: #339933;">=</span><span style="color: #3366CC;">''</span><span style="color: #339933;">;</span>
urlchunks<span style="color: #339933;">=</span>url.<span style="color: #660066;">split</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'%s'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
schunks<span style="color: #339933;">=</span>s.<span style="color: #660066;">split</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">';'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #000066; font-weight: bold;">for</span><span style="color: #009900;">&#40;</span>i<span style="color: #339933;">=</span><span style="color: #CC0000;"></span><span style="color: #339933;">;</span> i<span style="color: #339933;">&</span>lt<span style="color: #339933;">;</span>urlchunks.<span style="color: #660066;">length</span><span style="color: #339933;">;</span> i<span style="color: #339933;">++</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
    query<span style="color: #339933;">+=</span>urlchunks<span style="color: #009900;">&#91;</span>i<span style="color: #009900;">&#93;</span><span style="color: #339933;">;</span>
    <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">typeof</span> schunks<span style="color: #009900;">&#91;</span>i<span style="color: #009900;">&#93;</span> <span style="color: #339933;">!=</span> <span style="color: #3366CC;">'undefined'</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
        query<span style="color: #339933;">+=</span>schunks<span style="color: #009900;">&#91;</span>i<span style="color: #009900;">&#93;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span>
location.<span style="color: #660066;">replace</span><span style="color: #009900;">&#40;</span>query<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>So no you will have an entry like this:</p>

<p>Keyword: testenv</p>

<p>URL: paste in the upper script</p>

<p>And try&#8230; testenv|space|admin;14 =&gt; which should result in: <a href="https://admin.test14.projectname.com/">https://admin.test14.projectname.com/</a></p>

<p>The location.replace at the end will bring you to the web page. It&#8217;s interesting to note the s will be replaced by admin;14 which is a nice magic by JavaScript.</p>

<p><strong>NOTE</strong>: This only works on a page like google.co.uk. For chrome pages, like the new tab, omnibox has this ability disabled unfortunately.</p>

<p>&#8220;Well then it&#8217;s completely useless, isn&#8217;t it?&#8221; &#8211; you might say. Well, it&#8217;s usage is limited in power, that&#8217;s true. But it&#8217;s still useful as I&#8217;m sure you have a couple of pages open anyways which you don&#8217;t mind using up&#8230;? And you have to remember less keywords only a few powerful ones.</p>

<p>Credit for telling about Chrome Search Engines power in the first place goes to&#8230; *drumrolls* =&gt; <a href="http://www.testfeed.co.uk/" target="_blank"><a href="http://www.testfeed.co.uk/">http://www.testfeed.co.uk/</a></a></p>

<p>Anyhow&#8230;</p>

<p>As always, thanks for reading.</p>

<p>Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>How I started Running</title>
			<link>https://skarlso.github.io/2014/05/16/how-i-started-running/</link>
			<pubDate>Fri, 16 May 2014 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2014/05/16/how-i-started-running/</guid>
			<description>&lt;p&gt;Hello Everybody.&lt;/p&gt;

&lt;p&gt;Today I would like to write about something non-technical. I would like to write about running and how I started it and what my experiences were with it.&lt;/p&gt;

&lt;p&gt;So tl;dr&amp;#8230; here we go.&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Hello Everybody.</p>

<p>Today I would like to write about something non-technical. I would like to write about running and how I started it and what my experiences were with it.</p>

<p>So tl;dr&#8230; here we go.</p>

<p><strong>What led me to running</strong></p>

<p>There were actually two things that led me to start running. Three&#8230;</p>

<p><strong>Reason One: The accident</strong></p>

<p>I&#8217;m a bike person by default. I *hate running with a passion. One day I was riding my bike in the woods when suddenly I hit a big ol&#8217; tree trunk right head on at which moment my bikes front fork bent inwards and became completely useless. At this point I had to walk home. Repairing it proved to be a bit time consuming so I had to think of some other way to have my regular exercise.</p>

<p><strong>Reason Two: The comic</strong></p>

<p>In the earlier days I&#8217;ve read a web comic from The Oatmeal, namely this one =&gt;<a href="http://theoatmeal.com/comics/running" target="_blank"><a href="http://theoatmeal.com/comics/running">http://theoatmeal.com/comics/running</a></a></p>

<p>It inspired me so much I just needed a last kick to get started.</p>

<p><strong>Reason Three: The other accident</strong></p>

<p>About two years ago I had an accident and I broke my ankle. Cycling was one of the ways to exercise my ankle and now that my bike was gone I had to think of something else.</p>

<p>So with the Blerch on my back and all these wonderful reasons and because I believe that if you hate something but it&#8217;s good for you you have to find a way to make it your best friend&#8230;.I begun.</p>

<p><strong>How to begin&#8230;</strong></p>

<p>Hence my first todo item on the list was to start thinking like a runner. I would like to run today. I want to run. I love to run. I need to run. I miss running because it was a very bad weather outside and I couldn&#8217;t go and now I will run twice as much tomorrow.</p>

<p><strong>Start running&#8230;</strong></p>

<p>This one seems obvious and&#8230; It is obvious. Just start it! Go out and run a few paces. It will give you a feel for how much you really need it because you are out of shape.</p>

<p>So&#8230; After I got my mind set on starting running and finally went outside a park which is nearby I started my first ever run.</p>

<p><strong>First time running</strong></p>

<p>Let me tell you at this point a few things you will need.</p>

<p>&#8211; A new heart</p>

<p>&#8211; Some lungs</p>

<p>&#8211; A new back</p>

<p>&#8211; Some legs</p>

<p>&#8211; And a couple of ribs</p>

<p>Your first run will be terrible. It will be awful. You will whease. You will shuffle. You will suffer and would like to give up immediately and go home an sit before the computer and do nothing and enjoy that none of your body parts hurt.</p>

<p>You need to get past this feeling. And don&#8217;t overrun on your first run. You don&#8217;t need to run 10k on the first try and you probably wouldn&#8217;t even make it. Just run for 10 &#8211; 20 minutes. You can walk in between if you get tired nobody will kill you for it or you won&#8217;t be less because of it. You can walk and bend a little bit. Your back will probably hurt so stretch a bit.</p>

<p>Which brings me to <strong>preparations</strong>.</p>

<p>People say that for short distances you don&#8217;t need to prepare. I call bull. Everything hurt on my body on my first try and on my second it was much better when I did it with preparation. A couple of things to do:</p>

<p>&#8211; Stretch = Important. Legs, back, front, side.</p>

<p>&#8211; Vaseline = If you have squishy parts on your body that touch while you are walking, like in between your legs just right after your pelvis where your legs connect, apply a bit of Vaseline. Trust me. You will be thankful for that. Where your body meets and if you run for 20-30 minutes it creates a log of friction. Vaseline helps you to protect against that. Later on long distance runners usually use it on their nipples to avoid getting a rush from the t-shirt they are wearing.</p>

<p>&#8211; Gear = This is an important one. I provide a different section.</p>

<p>Once you are geared up you are ready for your first run. It will be wonderfully painful but will be soooo gooood afterwards it&#8217;ll be all worth it.</p>

<p><strong>Gear</strong></p>

<p>Before you start running you need a proper <strong>shoe</strong>. There are countless blogs about what shoe to use what leg type you are and so and so forth I say f*ck that. On your first run make sure you by a basic running shoe like these =&gt;<a href="http://www.dickssportinggoods.com/family/index.jsp?categoryId=4418011&lmdn=Price&fr=StorePrice%2FDSP%2F00005001%2F00010000&fbc=1&fbn=StorePrice%7C%2450.01+-+%24100.00" target="_blank">Shoes</a></p>

<p>It doesn&#8217;t even matter if it&#8217;s a cheap one. A bit later when you feel you are ready you can invest into a proper running shoe. I&#8217;m using a Karrimor D3O. I heard absolute terrible reviews about it but frankly for me it&#8217;s extremely comfortable and I never had any problems with it. I like it. I might switch after a year or so and see how another brand fairs but for now, it&#8217;s perfect.</p>

<p>I advice against running for prolonged time with a shoe that&#8217;s not a running shoe. You will immediately feel the difference. As with a not running shoe your legs, back, side, lungs, heart everything will hurt very badly and you will hate running even more.</p>

<p>For a <strong>shirt</strong> I recommend this one =&gt; <a href="http://www.halfords.com/webapp/wcs/stores/servlet/product_storeId_10001_catalogId_10151_productId_971728_langId_-1_categoryId_271427" target="_blank">Halfords Cycle Shirt</a></p>

<p>The colour is unimportant. And yes, it&#8217;s a cycling shirt. And why? Because it soaks up sweat immensely powerful. And it needs to be a tight fit for it to work. You will enjoy running much much more if you are not sweating all over the place.</p>

<p>For a <strong>pants</strong> I recommend this one =&gt; <a href="http://www.amazon.co.uk/Ultrasport-Mens-Quick-Dry-Function-Running-Tights/dp/B006HCSJS0/ref=sr_1_7?s=clothing&ie=UTF8&qid=1400268729&sr=1-7&keywords=running+pants" target="_blank">Amazon Man&#8217;s Running Tight</a></p>

<p>Why a tight? Because it will keep your muscles nicely wrapped and warm and it will soak up even more sweat and it really dries quickly and is easily washable. If it&#8217;s a nice weather outside, just put on a short and go.</p>

<p>A couple of things other Blogs don&#8217;t really talk or mention.</p>

<p>A <strong>running belt</strong>. It&#8217;s very useful to store stuff in it like =&gt;</p>

<p>&#8211; Keys</p>

<p>&#8211; Water</p>

<p>&#8211; Tissue =&gt; You will need it. Every part of your body will loose some type of liquid.</p>

<p>&#8211; Phone / Music playing device =&gt; There are <a href="http://www.theguardian.com/lifeandstyle/2012/apr/22/does-music-help-you-run-faster" target="_blank">proven</a> <a href="http://naturalrunningcenter.com/2013/02/10/music-2/" target="_blank">fact</a> <a href="http://runnersconnect.net/running-training-articles/does-music-help-you-run-faster/" target="_blank">that</a> music will help you <a href="http://www.bostonmagazine.com/health/blog/2013/04/03/music-working-out/" target="_blank">run</a> <a href="http://www.nhs.uk/Livewell/c25k/Pages/running-music.aspx" target="_blank">better</a></p>

<p>&#8211; GPS =&gt; For later because tracking your run will help you get it to improve.</p>

<p><strong>Closing words</strong></p>

<p>It will be hard to start. I know it will be. It was for me too. I&#8217;m running for a month now and I finally managed to get into a mind state where I actually LOVE it. I LOVE it. I want it. And I miss it if I&#8217;m not able to run. It&#8217;s a great exercise. Take care that don&#8217;t run everyday. It will make you very tired and give up easily. Run every second day and then increase as you like. But even then include <strong>REST</strong>(not the protocol&#8230;) because your body, tissues, muscle bones need to regenerate.</p>

<p>Don&#8217;t overexert yourself. Jog, walk run slow. Doesn&#8217;t matter, just run. That&#8217;s the point.</p>

<p>Have a very clear mindset.</p>

<p>And run in nature if possible because a treadmill is immensely boring and will kill your mood very quickly. And running in nature will provide diversion and wonderful things like this (my view when I run) =&gt;</p>

<p><img src="https://pbs.twimg.com/media/BmpyfhcIgAM2pFf.jpg" alt="" /></p>

<p>After a month of running my record is 7kms and 50 minutes. I started from zero basically. The human is the best runner in the world. I lost 5kgs without changing my eating habits. Just right now as I&#8217;m typing this I&#8217;m chewing on a gummybear.</p>

<p>So get out there and start running folks. It will help you immensely. There will come the time when you feel the euphoric moment of speed and the wind in your face as your body explodes in a glorious mixture of pain, adrenalin rush, speed, velocity, happiness and bliss. As your body stretches and pulls your weight and your legs launch you forward into the world the feeling as you run faster and faster ignoring everything and just fly. You will start to cry, laugh and sing at the same time.</p>

<p>Running will do that to you.</p>

<p>You have been warned.</p>

<p>Now go&#8230;. and live a full life.</p>

<p>As always, thanks for reading!</p>

<p>Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>How the past influences the present</title>
			<link>https://skarlso.github.io/2014/04/13/how-the-past-influences-the-present/</link>
			<pubDate>Sun, 13 Apr 2014 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2014/04/13/how-the-past-influences-the-present/</guid>
			<description>&lt;p&gt;Hello.&lt;/p&gt;

&lt;p&gt;This is only a quick rant about a discussion I overheard the other day&amp;#8230;&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Hello.</p>

<p>This is only a quick rant about a discussion I overheard the other day&#8230;</p>

<p>Guy A says to guy B that my Past is not defining me. And that I&#8217;m not regarding my Past in my future endeavours. And that my Past isn&#8217;t what shapes me.</p>

<p>Well then what is? You constantly relay on your past experience like a crouch. You use it daily for making decisions. You don&#8217;t even realize it probably that you are using past events to determine if you want to do something or not.</p>

<p>Same goes as well for software development. You rely on your past as a means of estimation on a daily basis. If you wouldn&#8217;t do that, you would do very very poorly on estimations. You rely on those moments to find out what kind of consequences the solution you are using will have in the future. In fact, if we look at Design Patterns what are they, if not using the Past to determine the Future? Past failures, solutions and experience condensed into reusable ideas and modules.</p>

<p>So lastly I would depart with a little anecdote I like so very very much from Confucius.:</p>

<p><strong><em>&#8220;Study the past, if you would define/divine the future.&#8221;</em></strong></p>

<p>As always, thanks for reading!</p>

<p>Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>Example when to use the Strategy Pattern</title>
			<link>https://skarlso.github.io/2014/02/19/example-when-to-use-the-strategy-pattern/</link>
			<pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2014/02/19/example-when-to-use-the-strategy-pattern/</guid>
			<description>&lt;p&gt;Hello folks.&lt;/p&gt;

&lt;p&gt;A quick post about an interesting idea.&lt;/p&gt;

&lt;p&gt;I want to elaborate on a possibility to use the Strategy Design pattern.&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Hello folks.</p>

<p>A quick post about an interesting idea.</p>

<p>I want to elaborate on a possibility to use the Strategy Design pattern.</p>

<p>There are many clues that you need one. One is for example if your object has a boolean variable which you use a lot in other classes to determine behavior. Then there is perhaps time to implement a Strategy.</p>

<p>Example:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="java" style="font-family:monospace;">   <span style="color: #000000; font-weight: bold;">class</span> SomeClass <span style="color: #009900;">&#123;</span>
        <span style="color: #000000; font-weight: bold;">private</span> <span style="color: #000066; font-weight: bold;">boolean</span> stateChange <span style="color: #339933;">=</span> <span style="color: #000066; font-weight: bold;">false</span><span style="color: #339933;">;</span>
&nbsp;
        <span style="color: #000000; font-weight: bold;">public</span> SomeClass <span style="color: #009900;">&#40;</span>stateChange<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
            <span style="color: #000000; font-weight: bold;">this</span>.<span style="color: #006633;">stateChange</span> <span style="color: #339933;">=</span> stateChange<span style="color: #339933;">;</span> 
        <span style="color: #009900;">&#125;</span>
&nbsp;
        <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">boolean</span> getStateChange<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
            <span style="color: #000000; font-weight: bold;">return</span> stateChange<span style="color: #339933;">;</span>
        <span style="color: #009900;">&#125;</span>
    <span style="color: #009900;">&#125;</span>
&nbsp;
    <span style="color: #000000; font-weight: bold;">class</span> SomeUserClass <span style="color: #009900;">&#123;</span>
        <span style="color: #000000; font-weight: bold;">private</span> SomeClass foo<span style="color: #339933;">;</span>
&nbsp;
        <span style="color: #000000; font-weight: bold;">public</span> SomeUserClass<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
            foo <span style="color: #339933;">=</span> <span style="color: #000000; font-weight: bold;">new</span> SomeClass<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #009900;">&#125;</span>
&nbsp;
        <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #003399;">String</span> someMethod<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
            <span style="color: #000000; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>foo.<span style="color: #006633;">getStateChange</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
                <span style="color: #000000; font-weight: bold;">return</span> <span style="color: #0000ff;">"Some string"</span><span style="color: #339933;">;</span>
            <span style="color: #009900;">&#125;</span> <span style="color: #000000; font-weight: bold;">else</span> <span style="color: #009900;">&#123;</span>
                <span style="color: #000000; font-weight: bold;">return</span> <span style="color: #0000ff;">"Some string else"</span><span style="color: #339933;">;</span>
            <span style="color: #009900;">&#125;</span>
        <span style="color: #009900;">&#125;</span>
    <span style="color: #009900;">&#125;</span>
&nbsp;
    <span style="color: #000000; font-weight: bold;">class</span> SomeOtherUserClass <span style="color: #009900;">&#123;</span>
        <span style="color: #000000; font-weight: bold;">private</span> SomeClass foo<span style="color: #339933;">;</span>
&nbsp;
        <span style="color: #000000; font-weight: bold;">public</span> SomeOtherUserClass<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
            foo <span style="color: #339933;">=</span> <span style="color: #000000; font-weight: bold;">new</span> SomeClass<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #009900;">&#125;</span>
&nbsp;
        <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #003399;">String</span> someMethodTwo<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
            <span style="color: #000000; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>foo.<span style="color: #006633;">getStateChange</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
                <span style="color: #000000; font-weight: bold;">return</span> <span style="color: #0000ff;">"Some string"</span><span style="color: #339933;">;</span>
            <span style="color: #009900;">&#125;</span> <span style="color: #000000; font-weight: bold;">else</span> <span style="color: #009900;">&#123;</span>
                <span style="color: #000000; font-weight: bold;">return</span> <span style="color: #0000ff;">"Some string else"</span><span style="color: #339933;">;</span>
            <span style="color: #009900;">&#125;</span>
        <span style="color: #009900;">&#125;</span>
    <span style="color: #009900;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>So you have two classes which do something based on some boolean coming from a class. So what you can do in this case, simply extract out that change in state.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="java" style="font-family:monospace;">&nbsp;
    <span style="color: #000000; font-weight: bold;">class</span> Foo <span style="color: #000000; font-weight: bold;">implements</span> Base <span style="color: #009900;">&#123;</span>
        <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #003399;">String</span> getMyString<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
            <span style="color: #000000; font-weight: bold;">return</span> <span style="color: #0000ff;">"Some string"</span><span style="color: #339933;">;</span>
        <span style="color: #009900;">&#125;</span>
    <span style="color: #009900;">&#125;</span>
&nbsp;
    <span style="color: #000000; font-weight: bold;">class</span> Bar <span style="color: #000000; font-weight: bold;">implements</span> Base <span style="color: #009900;">&#123;</span>
        <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #003399;">String</span> getMyString<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
            <span style="color: #000000; font-weight: bold;">return</span> <span style="color: #0000ff;">"Some string else"</span><span style="color: #339933;">;</span>
        <span style="color: #009900;">&#125;</span>
    <span style="color: #009900;">&#125;</span>
&nbsp;
    <span style="color: #000000; font-weight: bold;">interface</span> Base <span style="color: #009900;">&#123;</span>
        <span style="color: #003399;">String</span> getMyString<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
&nbsp;
    <span style="color: #000000; font-weight: bold;">class</span> FooStrategy <span style="color: #009900;">&#123;</span>
&nbsp;
        <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">static</span> Base getMeAClass<span style="color: #009900;">&#40;</span><span style="color: #000000; font-weight: bold;">enum</span> classChooser<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
            <span style="color: #000000; font-weight: bold;">switch</span> classChooser <span style="color: #009900;">&#123;</span>
                <span style="color: #000000; font-weight: bold;">case</span> classChooser.<span style="color: #006633;">FOO</span> <span style="color: #339933;">:</span> <span style="color: #000000; font-weight: bold;">return</span> <span style="color: #000000; font-weight: bold;">new</span> Foo<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span> <span style="color: #000000; font-weight: bold;">break</span><span style="color: #339933;">;</span>
                <span style="color: #000000; font-weight: bold;">case</span> classChooser.<span style="color: #006633;">BAR</span> <span style="color: #339933;">:</span> <span style="color: #000000; font-weight: bold;">return</span> <span style="color: #000000; font-weight: bold;">new</span> Bar<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span> <span style="color: #000000; font-weight: bold;">break</span><span style="color: #339933;">;</span>
                <span style="color: #000000; font-weight: bold;">default</span> <span style="color: #339933;">:</span> <span style="color: #000066; font-weight: bold;">null</span><span style="color: #339933;">;</span> <span style="color: #666666; font-style: italic;">//yeah yeah I know but I'm writing this in notepad... :)</span>
            <span style="color: #009900;">&#125;</span>
        <span style="color: #009900;">&#125;</span>
    <span style="color: #009900;">&#125;</span>
&nbsp;
    <span style="color: #000000; font-weight: bold;">class</span> SomeUserClass <span style="color: #009900;">&#123;</span>
        <span style="color: #000000; font-weight: bold;">private</span> Base foo<span style="color: #339933;">;</span>
&nbsp;
        <span style="color: #000000; font-weight: bold;">public</span> SomeUserClass<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
            foo <span style="color: #339933;">=</span> FooStrategy.<span style="color: #006633;">getMeAClass</span><span style="color: #009900;">&#40;</span>ClassChooser.<span style="color: #006633;">FOO</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #009900;">&#125;</span>
&nbsp;
        <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #003399;">String</span> someMethod<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
            <span style="color: #000000; font-weight: bold;">return</span> foo.<span style="color: #006633;">getMyString</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #009900;">&#125;</span>
    <span style="color: #009900;">&#125;</span>
&nbsp;
    <span style="color: #000000; font-weight: bold;">class</span> SomeOtherUserClass <span style="color: #009900;">&#123;</span>
        <span style="color: #000000; font-weight: bold;">private</span> Base bar<span style="color: #339933;">;</span>
&nbsp;
        <span style="color: #000000; font-weight: bold;">public</span> SomeUserClass<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
            bar <span style="color: #339933;">=</span> FooStrategy.<span style="color: #006633;">getMeAClass</span><span style="color: #009900;">&#40;</span>ClassChooser.<span style="color: #006633;">BAR</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #009900;">&#125;</span>
&nbsp;
        <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #003399;">String</span> someMethod<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
            <span style="color: #000000; font-weight: bold;">return</span> bar.<span style="color: #006633;">getMyString</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #009900;">&#125;</span>
    <span style="color: #009900;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Now I know this looks like a lot of more code. However imagine this on a much larger scale with lots of implementations for Foo and Bar. Your if statements will get very convulated very quickly. This way you abstract away the choice into a Factory. And you can add as many implementations of Base as you like with as many variants as you like without changing the logic anywhere else but the Factory and the Enum. And the Enum could be a Configuration file and you do something like this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="java" style="font-family:monospace;">   <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">static</span> Base getMeAClass<span style="color: #009900;">&#40;</span><span style="color: #003399;">String</span> className<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
        <span style="color: #666666; font-style: italic;">//Where className could be coming from a configuration file</span>
        <span style="color: #000000; font-weight: bold;">Class</span> clazz <span style="color: #339933;">=</span> <span style="color: #000000; font-weight: bold;">Class</span>.<span style="color: #006633;">forName</span><span style="color: #009900;">&#40;</span>className<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #000000; font-weight: bold;">return</span> <span style="color: #009900;">&#40;</span>Base<span style="color: #009900;">&#41;</span> clazz.<span style="color: #006633;">newInstance</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>This way you don&#8217;t even need the Enum anymore. Just use some configuration to determine what class you need at which point in your implementation without using an If statement at all.</p>

<p>Hope this helps.</p>

<p>I whipped this up from memory so please feel free to tell me if I missed something or have a syntax error in there somewhere&#8230;</p>

<p>As always,</p>

<p>Thanks for reading!</p>

<p>Gergely.</p>]]></content>
		</item>
		
		<item>
			<title>How to write a blog – Why long posts rarely work</title>
			<link>https://skarlso.github.io/2014/02/13/how-to-write-a-blog-why-long-posts-rarely-work/</link>
			<pubDate>Thu, 13 Feb 2014 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2014/02/13/how-to-write-a-blog-why-long-posts-rarely-work/</guid>
			<description>Hello.
So let&amp;#8217;s clarify this&amp;#8230; They rarely or ever work if you are a beginner blogger. If you have a reputation it will probably work or people will use it as a reference. But I&amp;#8217;m skipping ahead.
Beginnings
When you are a beginner blog writer you want to get out as much content as possible. Write mostly relevant things and interesting information because you need to establish a name for yourself.</description>
			<content type="html"><![CDATA[<p>Hello.</p>

<p>So let&#8217;s clarify this&#8230; They rarely or ever work if you are a beginner blogger. If you have a reputation it will probably work or people will use it as a reference. But I&#8217;m skipping ahead.</p>

<p><strong>Beginnings</strong></p>

<p>When you are a beginner blog writer you want to get out as much content as possible. Write mostly relevant things and interesting information because you need to establish a name for yourself. To get that starting you want to be as interesting as possible and make people leave with the intent to come back for more.</p>

<p>After you&#8217;ve established a name for yourself you can do larger, more coherent updates with more information in between the line because people know you and know what you write is worth reading. Also you have to bear in mind that longer posts are rarely read to the fullest. They are skimmed and then if it is good it will be used as reference material or a post to point to. Also people rarely have a lot of time on their hand to read a long post, several smaller chunks can be digested more easily!</p>

<p><strong>Updating frequency</strong></p>

<p>In the age of modern information overload it is hard to be relevant and interesting and keep people to come back to you. Apart from what you are writing about, which is up to you, you have to schedule your updates to a certain frequency. You don&#8217;t want people to wait for to long but you don&#8217;t want to get them flooded either. Since people do read a lot of blogs they will choose carefully what to read and what to discard. And you might just end up on the discarded list if you already had a post at that moment.</p>

<p>I&#8217;m suggesting that you write you post what you would like to write at that moment and then use a scheduler to post it in certain frequencies. Maybe once or twice weekly is good enough. You need to experiment it out.</p>

<p><strong>Write, write, write</strong></p>

<p>The way to success is pawed with writing. You want to be visible and you want to keep people engaged with you. That means that you have to come up with content.</p>

<p>With a technical blog that&#8217;s a little bit difficult from time to time since so many people already might have solved your problem of which you are trying to write about. That&#8217;s okay. It doesn&#8217;t have to be a technical blog where you write about new ideas every day. It doesn&#8217;t have to be a troubleshoot blog about how to solve a particular problem.</p>

<p>It doesn&#8217;t have to be about showing some people how to write this and that in a completely new environment.</p>

<p><strong>So about what then?</strong></p>

<p>Guess what? It&#8217;s up to you!!! If you wrote a script you like and are fond if, post it. If you created an interesting configuration, post it. If you wrote a line of code you find interesting, post it. You&#8217;ve read a blog post about something and have an opinion about it, post it. Is it scientific, some discovery, some idea, some random thought, post it! You wrote a particularly ugly script you never ever want to see, POST IT!!</p>

<p>Your blog doesn&#8217;t need to be a portfolio of how awesome you are. You are allowed to be human. You are allowed to post some very boring or trivial stuff you came across but YOU find it interesting! You don&#8217;t need to be new every day in every post.</p>

<p>So my suggestion is, write, write, write. As often as you like, schedule it and post it in a timely manner. Be responsive if people write you a comment always answer. Nobody likes an anonymous somebody who writes then disappears. People like bloggers who engage them and give a damn about their opinion as well.</p>

<p>Always be yourself. The blog is for you too so retain what ever you want to retain and read back later maybe to learn from it. And of course writing it down makes you remember it better.</p>

<p>Thanks for reading!</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>How to check content header on unknown number of items – Python</title>
			<link>https://skarlso.github.io/2014/02/11/how-to-check-content-header-on-unknown-number-of-items-python/</link>
			<pubDate>Tue, 11 Feb 2014 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2014/02/11/how-to-check-content-header-on-unknown-number-of-items-python/</guid>
			<description>Hello guys.
I&amp;#8217;d like to share a little something with you. It&amp;#8217;s what I cooked up in Python to check an unknown number of content items in a web application.
Basically the script runs from a script folder under Grails. It goes through all the configured folders where there is static content like images, javascript, css and so on and so forth.
And then with curl it calls these items up in using their respective paths&amp;#8217;.</description>
			<content type="html"><![CDATA[<p>Hello guys.</p>

<p>I&#8217;d like to share a little something with you. It&#8217;s what I cooked up in Python to check an unknown number of content items in a web application.</p>

<p>Basically the script runs from a script folder under Grails. It goes through all the configured folders where there is static content like images, javascript, css and so on and so forth.</p>

<p>And then with curl it calls these items up in using their respective paths&#8217;. This works best on localhost if you have your local environment configured to access these elements because in some places direct access is restricted.</p>

<p>This script only check static content. Dynamically generated content would have to be hard coded to check.</p>

<p>It only generated a file currently with ERROR on a not match an success on match and not found if it encounters an item which it doesn&#8217;t know about.</p>

<p>So without further ado&#8230; The Script:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="python" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">#!/usr/bin/python</span>
&nbsp;
<span style="color: #ff7700;font-weight:bold;">import</span> pycurl<span style="color: #66cc66;">,</span> <span style="color: #dc143c;">sys</span><span style="color: #66cc66;">,</span> <span style="color: #dc143c;">os</span><span style="color: #66cc66;">,</span> <span style="color: #dc143c;">urllib</span>
&nbsp;
<span style="color: #ff7700;font-weight:bold;">class</span> Storage:
    <span style="color: #ff7700;font-weight:bold;">def</span> <span style="color: #0000cd;">__init__</span><span style="color: black;">&#40;</span><span style="color: #008000;">self</span><span style="color: black;">&#41;</span>:
        <span style="color: #008000;">self</span>.<span style="color: black;">contents</span> <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">''</span>
&nbsp;
    <span style="color: #ff7700;font-weight:bold;">def</span> store<span style="color: black;">&#40;</span><span style="color: #008000;">self</span><span style="color: #66cc66;">,</span> buf<span style="color: black;">&#41;</span>:
    <span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: #483d8b;">'Content-Type'</span> <span style="color: #ff7700;font-weight:bold;">in</span> buf:
            <span style="color: #008000;">self</span>.<span style="color: black;">contents</span> <span style="color: #66cc66;">=</span> buf
&nbsp;
    <span style="color: #ff7700;font-weight:bold;">def</span> <span style="color: #0000cd;">__str__</span><span style="color: black;">&#40;</span><span style="color: #008000;">self</span><span style="color: black;">&#41;</span>:
        <span style="color: #ff7700;font-weight:bold;">return</span> <span style="color: #008000;">self</span>.<span style="color: black;">contents</span>
&nbsp;
<span style="color: #808080; font-style: italic;">#print retrieved_headers</span>
&nbsp;
filesInDir <span style="color: #66cc66;">=</span> <span style="color: black;">&#91;</span><span style="color: black;">&#93;</span>
headers <span style="color: #66cc66;">=</span> <span style="color: black;">&#91;</span><span style="color: black;">&#93;</span>
headerRestrictions <span style="color: #66cc66;">=</span> <span style="color: black;">&#123;</span><span style="color: #483d8b;">'.css'</span>: <span style="color: #483d8b;">'Content-Type: text/css'</span><span style="color: #66cc66;">,</span> <span style="color: #483d8b;">'.jpg'</span>: <span style="color: #483d8b;">'Content-Type: image/jpeg'</span><span style="color: #66cc66;">,</span> <span style="color: #483d8b;">'.ico'</span>: <span style="color: #483d8b;">'image/vnd.microsoft.icon'</span><span style="color: #66cc66;">,</span> <span style="color: #483d8b;">'.html'</span>: <span style="color: #483d8b;">'Content-Type: text/html'</span><span style="color: #66cc66;">,</span> <span style="color: #483d8b;">'.js'</span>: <span style="color: #483d8b;">'Content-Type: application/javascript'</span><span style="color: #66cc66;">,</span> <span style="color: #483d8b;">'.gif'</span>: <span style="color: #483d8b;">'Content-Type: image/gif'</span><span style="color: #66cc66;">,</span> <span style="color: #483d8b;">'.png'</span>: <span style="color: #483d8b;">'Content-Type: image/png'</span><span style="color: #66cc66;">,</span> <span style="color: #483d8b;">'.swf'</span>: <span style="color: #483d8b;">'Content-Type: application/x-shockwave-flash'</span><span style="color: #66cc66;">,</span> <span style="color: #483d8b;">'.json'</span>: <span style="color: #483d8b;">'Content-Type: application/json'</span><span style="color: #66cc66;">,</span> <span style="color: #483d8b;">'.htc'</span>: <span style="color: #483d8b;">'Content-Type: text/x-component'</span><span style="color: #66cc66;">,</span> <span style="color: #483d8b;">'.xml'</span>: <span style="color: #483d8b;">'Content-Type: application/xml'</span><span style="color: black;">&#125;</span>
&nbsp;
<span style="color: #ff7700;font-weight:bold;">for</span> dirname<span style="color: #66cc66;">,</span> dirnames<span style="color: #66cc66;">,</span> filenames <span style="color: #ff7700;font-weight:bold;">in</span> <span style="color: #dc143c;">os</span>.<span style="color: black;">walk</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'../web-app'</span><span style="color: black;">&#41;</span>:
    <span style="color: #808080; font-style: italic;"># editing the 'dirnames' list will stop os.walk() from recursing into there.</span>
    <span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: #483d8b;">'.git'</span> <span style="color: #ff7700;font-weight:bold;">in</span> dirnames:
        <span style="color: #808080; font-style: italic;"># don't go into any .git directories.</span>
        dirnames.<span style="color: black;">remove</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'.git'</span><span style="color: black;">&#41;</span>
&nbsp;
    <span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: #483d8b;">'WEB-INF'</span> <span style="color: #ff7700;font-weight:bold;">in</span> dirnames:
        <span style="color: #808080; font-style: italic;"># don't go into any WEB-INF directories.</span>
        dirnames.<span style="color: black;">remove</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'WEB-INF'</span><span style="color: black;">&#41;</span>
&nbsp;
    <span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: #483d8b;">'test'</span> <span style="color: #ff7700;font-weight:bold;">in</span> dirnames:
        <span style="color: #808080; font-style: italic;"># don't go into any test directories.</span>
        dirnames.<span style="color: black;">remove</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'test'</span><span style="color: black;">&#41;</span>
&nbsp;
    <span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: #483d8b;">'META-INF'</span> <span style="color: #ff7700;font-weight:bold;">in</span> dirnames:
        <span style="color: #808080; font-style: italic;"># don't go into any META-INF directories.</span>
        dirnames.<span style="color: black;">remove</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'META-INF'</span><span style="color: black;">&#41;</span>
&nbsp;
    <span style="color: #ff7700;font-weight:bold;">for</span> filename <span style="color: #ff7700;font-weight:bold;">in</span> filenames:
    trimmedDir <span style="color: #66cc66;">=</span> dirname.<span style="color: black;">replace</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">"web-app/"</span><span style="color: #66cc66;">,</span> <span style="color: #483d8b;">""</span><span style="color: black;">&#41;</span>
    trimmedDir <span style="color: #66cc66;">=</span> trimmedDir.<span style="color: black;">replace</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">"../"</span><span style="color: #66cc66;">,</span> <span style="color: #483d8b;">""</span><span style="color: black;">&#41;</span>
    filesInDir.<span style="color: black;">append</span><span style="color: black;">&#40;</span><span style="color: #dc143c;">os</span>.<span style="color: black;">path</span>.<span style="color: black;">join</span><span style="color: black;">&#40;</span>trimmedDir<span style="color: #66cc66;">,</span> filename<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
    <span style="color: #808080; font-style: italic;">#    print os.path.join(dirname, filename)</span>
&nbsp;
f <span style="color: #66cc66;">=</span> <span style="color: #008000;">open</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">"headersandfiles.txt"</span><span style="color: #66cc66;">,</span> <span style="color: #483d8b;">"w"</span><span style="color: black;">&#41;</span>
&nbsp;
<span style="color: #ff7700;font-weight:bold;">for</span> fileName <span style="color: #ff7700;font-weight:bold;">in</span> filesInDir:
    retrieved_body <span style="color: #66cc66;">=</span> Storage<span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
    retrieved_headers <span style="color: #66cc66;">=</span> Storage<span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
    c <span style="color: #66cc66;">=</span> pycurl.<span style="color: black;">Curl</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
    fileName <span style="color: #66cc66;">=</span> fileName.<span style="color: black;">replace</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">" "</span><span style="color: #66cc66;">,</span> <span style="color: #483d8b;">"%20"</span><span style="color: black;">&#41;</span>
    url <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">'http://localhost:8080/%s'</span> % fileName
    c.<span style="color: black;">setopt</span><span style="color: black;">&#40;</span>c.<span style="color: black;">URL</span><span style="color: #66cc66;">,</span> url<span style="color: black;">&#41;</span>
    c.<span style="color: black;">setopt</span><span style="color: black;">&#40;</span>c.<span style="color: black;">WRITEFUNCTION</span><span style="color: #66cc66;">,</span> retrieved_body.<span style="color: black;">store</span><span style="color: black;">&#41;</span>
    c.<span style="color: black;">setopt</span><span style="color: black;">&#40;</span>c.<span style="color: black;">HEADERFUNCTION</span><span style="color: #66cc66;">,</span> retrieved_headers.<span style="color: black;">store</span><span style="color: black;">&#41;</span>
    c.<span style="color: black;">perform</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
    c.<span style="color: black;">close</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
    fileLine <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">""</span>
    fileNameBase<span style="color: #66cc66;">,</span> fileExtension <span style="color: #66cc66;">=</span> <span style="color: #dc143c;">os</span>.<span style="color: black;">path</span>.<span style="color: black;">splitext</span><span style="color: black;">&#40;</span>fileName<span style="color: black;">&#41;</span>
&nbsp;
    <span style="color: #ff7700;font-weight:bold;">if</span> headerRestrictions.<span style="color: black;">has_key</span><span style="color: black;">&#40;</span>fileExtension<span style="color: black;">&#41;</span>:
<span style="color: #808080; font-style: italic;"># print "Header:%s, Content:%s" % (headerRestrictions[fileExtension], retrieved_headers.__str__())</span>
        fileLine <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">"CORRECT: Content: %s; Header: %s"</span> % <span style="color: black;">&#40;</span>fileName<span style="color: #66cc66;">,</span> retrieved_headers<span style="color: black;">&#41;</span> <span style="color: #ff7700;font-weight:bold;">if</span> headerRestrictions<span style="color: black;">&#91;</span>fileExtension<span style="color: black;">&#93;</span> <span style="color: #66cc66;">==</span> retrieved_headers.<span style="color: #0000cd;">__str__</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>.<span style="color: black;">strip</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span> <span style="color: #ff7700;font-weight:bold;">else</span> <span style="color: #483d8b;">"ERROR: Content: %s; Header: %s; URL: %s"</span> % <span style="color: black;">&#40;</span>fileName<span style="color: #66cc66;">,</span> retrieved_headers<span style="color: #66cc66;">,</span> <span style="color: #483d8b;">"http://localhost:8080/%s<span style="color: #000099; font-weight: bold;">\n</span>"</span> % fileName<span style="color: black;">&#41;</span>
    <span style="color: #ff7700;font-weight:bold;">else</span>:
    fileLine <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">"NOT FOUND: Content: %s; Header: %s"</span> % <span style="color: black;">&#40;</span>fileName<span style="color: #66cc66;">,</span> retrieved_headers<span style="color: black;">&#41;</span>
&nbsp;
    f.<span style="color: black;">write</span><span style="color: black;">&#40;</span>fileLine<span style="color: black;">&#41;</span>
    headers.<span style="color: black;">append</span><span style="color: black;">&#40;</span>retrieved_headers.<span style="color: #0000cd;">__str__</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
&nbsp;
f.<span style="color: black;">close</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Hope you like it. Feel free to improve however you want.</p>

<p>Thanks for reading,</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>The method of Loci and how it works for me</title>
			<link>https://skarlso.github.io/2014/02/11/the-method-of-loci-and-how-it-works-for-me/</link>
			<pubDate>Tue, 11 Feb 2014 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2014/02/11/the-method-of-loci-and-how-it-works-for-me/</guid>
			<description>Hello.
Today I would like to write about something very interesting to you folks.
It&amp;#8217;s a common remember / recall technique called the Method of loci. Otherwise known as the Memory Palace. A very popular usage can be seen in the episodes of Sherlock Holmes from BBC. He uses it often.
What is the Method of loci?
As the Wikipedia page write so properly&amp;#8230;&amp;#8221;In basic terms, it is a method of memory enhancement which uses visualization to organize and recall information.</description>
			<content type="html"><![CDATA[<p>Hello.</p>

<p>Today I would like to write about something very interesting to you folks.</p>

<p>It&#8217;s a common remember / recall technique called the Method of loci. Otherwise known as the Memory Palace. A very popular usage can be seen in the episodes of Sherlock Holmes from BBC. He uses it often.</p>

<p><strong>What is the Method of loci?</strong></p>

<p>As the Wikipedia page write so properly&#8230;&#8221;In basic terms, it is a method of memory enhancement which uses visualization to organize and recall information.&#8221;</p>

<p>This says all&#8230;</p>

<p>So&#8230;</p>

<p><strong>How does it work?</strong></p>

<p>I don&#8217;t want to go too much into details with this one since everybody can use Google I&#8217;m assuming but just for my sanities sake I will repeat a very basic idea. You brain works with associations. It can remember something when it&#8217;s linked to something you already know much much better. Also it can remember very easily places you&#8217;ve been to or people you&#8217;ve met. ( most of the time&#8230; ).</p>

<p>Very popular Roman Leaders where known to use this while they were giving speeches for hours out of memory. While they were speaking, mentally they were walking along a very well known and often used path where they linked key elements of their speeches to landmarks along the way.</p>

<p><strong>Enough. Show me concretes.</strong></p>

<p>So how do I make use of it you ask? I give you an example. In my flat there are two stairs. I use those stairs to initialize my Palace. I go up the two stairs to get myself into my Memory. Once I&#8217;m in my Palace, which is my flat, I have a lot of holder items like drawer, desk, wall, painting, couch and many many more.</p>

<p>So for example to recall all of the 23 design patterns in order I use a mnemonic and my palace.</p>

<p>I have three drawers. I go up up&#8230; there is my drawer before me. I open the first and out comes the following sight&#8230;</p>

<p>Memento and Mediator are playing a game of Chess ( strategy ). There is a Visitor standing by who is Observing ( Observer ) the game. State is constantly recording the state of the game while Template is providing support and Iterator is counting rounds. Command is constantly yelling orders that they should hurry up because he has better things to do while wielding a huge broad sword ( Interpreter -&gt; for me this pattern was used in MUD games which were early RPGs ). The whole gang is held together by a Chain which is responsible for not letting things go out of hand.</p>

<p>I know this sounds very complicated. And the order? Where is that? That&#8217;s the mnemonic: CCIIMMOSSTV. Easy, right?</p>

<p>So why this huge story around a few patterns? Because it&#8217;s not just these. Then along comes ABCDFFP which is Adapter, Bridge, Composite, Decorator, Facade, Flyweight and Proxy and the rest BFFPS which is Builder, Factory, Abstract Factory, Prototype and Singleton.</p>

<p>I have stories around those as well. This makes it easy to remember them.</p>

<p>For small amount of things it would be an overkill yes. But for many things it makes it EASY!</p>

<p>You already remembered my Chess play story. 😉</p>

<p><strong>But how do you remember a complex story?</strong></p>

<p>Recall. You don&#8217;t just put stuff in there and then move on. I have a routine. Every day when I go to bed before I fall asleep I walk around in my Palace. I look at things, recall them strengthen the memory a bit here and there. And after an Item has been retained in my long term memory strong enough, I can recall it fewer and fewer times. So I don&#8217;t have to walk in the whole palace every time. Only parts.</p>

<p><strong>FAQ</strong></p>

<p><strong>Q:</strong>But isn&#8217;t this too slow to recall something?</p>

<p><strong>A:</strong>This is only a tool to retain information more easily. Of course if you want to recall something at a moments notice, you won&#8217;t have the time to go into your palace and search around. But after a while it will strengthen and will be more and more easier to recall information faster and faster. And you rarely get into a position where you need to recall something in a second.</p>

<p><strong>Q:</strong>This seems like a major overhead to learn something.</p>

<p><strong>A:</strong>For small amount of information I suggest using a mnemonic or flash cards rather then a palace.</p>

<p><strong>Q:</strong>What if I run out of space?</p>

<p><strong>A:</strong>You can create as many locations as you like. Use your current home and homes in your past which you knew very well. You could create a lane with houses after each other. Or create a fictional palace like Hogwarts based on some real places to retain them better. And draw a sketch of of it to be able to visualize it better.</p>

<p><strong>Q:</strong>What if I forget where I put things?</p>

<p><strong>A:</strong>Recall recall recall is the name of the game. In order to stabilize the vision of your palace you need to practice walking around in it. Remembering each and every small room. With practice it will get better and better and every information will be stored much easier.</p>

<p><strong>Q:</strong>How do you put thing into it? Can I just put in a number and I will remember it forever?</p>

<p><strong>A:</strong>Short answer: no. Long answer: You don&#8217;t just imagine a place and then put a whole bunch of words into a pocket somewhere and expect it to be recalled better. You need to combine the Loci with mnemonics and imagination and sounds and smells stories images. The more powerful the image in a place the better the recall. As you saw with the design patterns I didn&#8217;t just put a bunch of names into a box and then remembered it. I created a story around them and a mnemonic. The combination is the key.</p>

<p><strong>Q:</strong>Are you physically walking your house or in your mind?</p>

<p><strong>A:</strong>In my mind. Once I learned something and created my story and found the appropriate image or smell or sound I&#8217;d like to use I close my eyes and go into my palace in my mind. Then I start to place things where I think they will be in a good place. This can be any number of things. It&#8217;s up to you.</p>

<p>So that&#8217;s all folks. Hope you enjoyed it. Please feel free to try it out and experiment I assure you you won&#8217;t be disappointed.</p>

<p>As always,</p>

<p>Thanks for reading.</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Why you should learn using Vim</title>
			<link>https://skarlso.github.io/2014/02/10/why-you-should-learn-using-vim/</link>
			<pubDate>Mon, 10 Feb 2014 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2014/02/10/why-you-should-learn-using-vim/</guid>
			<description>Hello,
So Vim is a very powerful editing tool and has lots and lots of potential in regarding plug-ins.
It has years and years of gathered knowledge and extensions and can virtually do anything you want. But that&amp;#8217;s not even it&amp;#8217;s final form&amp;#8230;
The real power of Vim lies in navigation and manipulation. The ability to navigate and edit without the use of arrow keys or mouse chops of a large portion of your time which you didn&amp;#8217;t even realize you are wasting until you try it without it.</description>
			<content type="html"><![CDATA[<p>Hello,</p>

<p>So Vim is a very powerful editing tool and has lots and lots of potential in regarding plug-ins.</p>

<p>It has years and years of gathered knowledge and extensions and can virtually do anything you want. But that&#8217;s not even it&#8217;s final form&#8230;</p>

<p>The real power of Vim lies in navigation and manipulation. The ability to navigate and edit without the use of arrow keys or mouse chops of a large portion of your time which you didn&#8217;t even realize you are wasting until you try it without it.</p>

<p>The one thing people are seem to miss regarding this editor is that you are not supposed to stay in <strong>Edit</strong> mode all the time. You are supposed to be in <strong>Control</strong> mode most of times and enter in to <strong>Edit</strong> for sort bursts. And one more thing is that commands are supposed to be used together. For example deleting a word is very easy and can be achieved in multiple ways. The easiest is combining Delete + Go to the end of a word like this: &#8220;de&#8221;. So once you are in Control mode you navigate to a word and press d + e. d =&gt; Delete a word until new cursor and e =&gt; go to the end of the word. Hence &#8220;de&#8221; will delete a whole word. Awesome.</p>

<p>Handling text is easy as goblin pie and there lots and lots of tutorials and blogs on the web which tell you in detail how to do that so I&#8217;m not going to go do that. It does take some time to get used to it because you are wired to handle the mouse and use the arrow keys. But once you start using h j k l and x X and w and $ ^ you realize you don&#8217;t need the mouse or the arrow keys to get around.</p>

<p>And it&#8217;s much faster since your hand is already there. And suddenly you are using <a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en" title="Vimium" target="_blank">Vimium</a> the Vim extension for Chrome and you find yourself saying&#8230; &#8220;Where were you all my life?&#8221;.</p>

<p>Vim has a mirriad of plugins ready to be used most popular being <a href="https://github.com/scrooloose/nerdtree" title="Nerdtree" target="_blank">NerdTree</a>, <a href="https://github.com/gmarik/Vundle.vim" title="Vundle" target="_blank">Vundle</a> and <a href="https://github.com/scrooloose/syntastic" title="Syntastic" target="_blank">Syntastic</a> for compile errors. And it has a large community to back it up and people who will eagerly help you on your way and pass on tips to understand the logic behind it and the phylosophy.</p>

<p>So all in all it&#8217;s a powerful editing tool and a neat friend along the way and completely free of any charge or license. It can be used for <strong>anything</strong> you want including macros and key phrase replacements where you type two characters which will be replaced with something that you use commonly like public static void main.</p>

<p>I hope this got you a watery mouth towards trying. The only thing I can say is to not give up after 20 minutes you will get a feel for it and you will fall in love with it immediately.</p>

<p>As always,</p>

<p>Thanks for reading!</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Why does it matter if I sit in an office or in a park</title>
			<link>https://skarlso.github.io/2014/02/09/why-does-it-matter-if-i-sit-in-an-office-or-in-a-park/</link>
			<pubDate>Sun, 09 Feb 2014 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2014/02/09/why-does-it-matter-if-i-sit-in-an-office-or-in-a-park/</guid>
			<description>Hello everybody.
I&amp;#8217;d like to explain a lot about a topic that is very near my heart. If your job is in an office you will understand this.
Why offices?
So why are we sitting together in one big place cramped up with 20-300 other people? Why bother the catering and the ventilation and what not to accommodate these people at one place? Why not just leave them be and let them work at home?</description>
			<content type="html"><![CDATA[<p>Hello everybody.</p>

<p>I&#8217;d like to explain a lot about a topic that is very near my heart. If your job is in an office you will understand this.</p>

<p><strong>Why offices?</strong></p>

<p>So why are we sitting together in one big place cramped up with 20-300 other people? Why bother the catering and the ventilation and what not to accommodate these people at one place? Why not just leave them be and let them work at home?</p>

<p>If your job involves interaction than you are in bad luck. You need to be there to talk to people to coordinate your work to gather information and to generally do your work.</p>

<p>But this doesn&#8217;t answer the question&#8230;</p>

<p><strong>Why does it matter if I&#8217;m in the office or not if my work is done?</strong></p>

<p>That&#8217;s my big question. Why must I sit in the office if my work is done and in a good shape and good quality? Why must I go in and do my job there if at home I&#8217;m 50% more efficient because I&#8217;m in my underwear? In fact, why bother going into and environment where I don&#8217;t feel comfortable. Where I must go into an office which is cold and doesn&#8217;t have my favourite chair, my desk and loud heavy metal from speakers.</p>

<p>Well there are couple of things&#8230;</p>

<p><strong>Interaction</strong></p>

<p>So like I said earlier there is that. Interaction. You need to collaborate with others. You need to do pair programming, you need to talk to the business analysts, testers, colleagues what nots. In that case, having an environment where everybody is at your disposal is pretty neat and necessary. It cannot be avoided.</p>

<p>Unless everybody is on Skype and available all the time.</p>

<p><strong>Separation of Concern</strong></p>

<p>There is a Design Pattern in software engineering called Separation of Concern. This applies to work places as well. You don&#8217;t live where you work generally because living could distract working. There are tons and tons of books about how you need a separated environment if you are a writing and you write at home. Because there are too many distractions. And if you are not disciplined enough you will get Zero work done. You will always find something better to do.</p>

<p>That&#8217;s why the physical act of going to work will switch your brain into work mode and lets you focus better. Whilst going home should do the opposite thing. You should leave work at work.</p>

<p><strong>Show &#8220;our&#8221; strength</strong></p>

<p>Generally big companies like to show off. For a company as big as Microsoft or IBM for example it&#8217;s actually not the product that matters on the market but the yearly growth of employees. Hence, strength in numbers.</p>

<p>Now if some investors get around and want to check out the company they like to see the buzzing bees. They like to see people working, sitting, typing away at stuff. It&#8217;s all about appearances. A strong, cramped office full of people looks like a very busy hard working company.</p>

<p><strong>Companies could be a bit more flexible though</strong></p>

<p>If I work from 6AM to 3PM because my daughter has a show at 5PM I want to go though I would like to be able to do that without having to go through too much trouble.</p>

<p>Or if I would like to work tomorrow and today I have better things to do, then why not, if my work is done?</p>

<p><strong>Abuse</strong></p>

<p>But then, people are people. Most of them will use every opportunity to slack off. Hence the general perception is that if you are at home you are not working. So to be better able to monitor you, all of the employees must be in one place.</p>

<p><strong>Last words</strong></p>

<p>So really there needs to be a better agreement between both sides. Workers need to be honest and diligent. And workplaces need to be more flexible and understanding as long as the job is done. Because people will work a LOT better and more efficient if they are HAPPY in their work environment.</p>

<p>That&#8217;s what I&#8217;m proposing.</p>

<p>As ever,</p>

<p>Thanks for reading.</p>

<p>Have a nice day.</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>How I recruit – Why tool requirements are stupid</title>
			<link>https://skarlso.github.io/2014/02/04/how-i-recruit-why-tool-requirements-are-stupid/</link>
			<pubDate>Tue, 04 Feb 2014 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2014/02/04/how-i-recruit-why-tool-requirements-are-stupid/</guid>
			<description>Hello folks!
Today I would like to write about something very interesting I&amp;#8217;m seeing all over the place from recruiters. And that is tool requirements from developers.
For words
So why is it a problem that in a requirement from a developer there a lots of these:
&amp;#8211; DB2
&amp;#8211; QTP
&amp;#8211; Ranorex
&amp;#8211; Eclipse ( yes I saw a few of these&amp;#8230; )
&amp;#8211; Hibernate
&amp;#8211; Grails
&amp;#8211; Ruby on Rails</description>
			<content type="html"><![CDATA[<p>Hello folks!</p>

<p>Today I would like to write about something very interesting I&#8217;m seeing all over the place from recruiters. And that is tool requirements from developers.</p>

<p><strong>For words</strong></p>

<p>So why is it a problem that in a requirement from a developer there a lots of these:</p>

<p>&#8211; DB2</p>

<p>&#8211; QTP</p>

<p>&#8211; Ranorex</p>

<p>&#8211; Eclipse ( yes I saw a few of these&#8230; )</p>

<p>&#8211; Hibernate</p>

<p>&#8211; Grails</p>

<p>&#8211; Ruby on Rails</p>

<p>&#8211; &#8230;</p>

<p><strong>Long answer</strong></p>

<p>The answer is simple yet it has it&#8217;s roots very deep in the recruitment and the way companies work.</p>

<p>It doesn&#8217;t really matter what kind of tool you know. It doesn&#8217;t really matter if you know intellij or eclipse or if you know a certain database or a tool for testing like QTP or Ranorex. The requirement should state: &#8211; well versed with development environments; &#8211; knows his way around SQL and can handle relational / noSQL databases; &#8211; has knowledge in testing environments.</p>

<p>Or even better: &#8211; adaptive capabilities; &#8211; can catch up quickly; &#8211; resourceful; &#8211; flexible;</p>

<p>You know where I&#8217;m going with this. I can understand that some companies don&#8217;t have the time to train a person in a certain tool they are using for a prolonged period of time. I can understand that some recruiters don&#8217;t have the time or the knowledge to distinguish between these tools to understand the common ground.</p>

<p>But these days there a million and million tools available for all sorts of things. There are a lot of databases and testing frameworks. A lot of development environments and it&#8217;s mostly to the preference of the individual what s/h choice is. As the delinquent, so must the recruiter and company be flexible and knowledgeable enough to know that if the person knows eclipse and he has excellent adaptive capabilities he will learn any other environment rather quickly and without too much trouble.</p>

<p>They must understand what they are looking for. Because they might actually get what they <strong>want</strong> but that might not be what they <strong>need</strong>.</p>

<p><strong>Short answer</strong></p>

<p>So in conclusion&#8230; you must look for skills, abilities, techniques, brain power, proves, savyness. Not tools. If you look for tools you might find somebody who is up for the job, but if you look for the above you will find somebody who is up for ANY kind of job at any level at any company. Also his insight of other tools might make your world a whole lot better. Maybe he knows something else, something which is better or more recent, more up-to-date?</p>

<p>If you look for somebody who is versed in only that thing you will end up with that thing as long as you have nobody who is looking for something new and better. It might work for you at that time, but never forget&#8230;</p>

<p><strong>Only change is constant</strong></p>

<p>Tools will change. Tools will disappear. Tools will get out of date and will be discontinued. Than you will be sure as hell glad you ended up with somebody who doesn&#8217;t who knows more then that.</p>

<p>As always,</p>

<p>Thanks for reading.</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Why you should care about the quality of your test code</title>
			<link>https://skarlso.github.io/2013/11/02/why-you-should-care-about-the-quality-of-your-test-code/</link>
			<pubDate>Sat, 02 Nov 2013 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2013/11/02/why-you-should-care-about-the-quality-of-your-test-code/</guid>
			<description>Hello folks.
Today I would like to talk to you about something interesting I was talking about with a developer friend.
We talked about the quality of test code.
He said&amp;#8230; And I will quote this&amp;#8230;&amp;#8221;Why should we care? It&amp;#8217;s not production code. We aren&amp;#8217;t giving it to the customer.&amp;#8221;
There are a few reasons why you are going to get a slap in the face for a sentence like this.</description>
			<content type="html"><![CDATA[<p>Hello folks.</p>

<p>Today I would like to talk to you about something interesting I was talking about with a developer friend.</p>

<p>We talked about the quality of test code.</p>

<p>He said&#8230; And I will quote this&#8230;&#8221;Why should we care? It&#8217;s not production code. We aren&#8217;t giving it to the customer.&#8221;</p>

<p>There are a few reasons why you are going to get a slap in the face for a sentence like this. And let&#8217;s clarify here that we are talking about unit and functional tests as well. It shouldn&#8217;t matter what tests you are thinking about.</p>

<p><strong>Reason for a Slap #1</strong></p>

<p>If a new comer comes to the company ( and don&#8217;t tell me that&#8217;s not happening so frequently ) then there are a few very good ways how he can learn to work with the new system. The first and almost best way to do so is&#8230; to look at the tests. Because the tests are representing your system. And how will it look like if the tests are in a bad shape? What will his or her thoughts be?</p>

<p>a. Wow what nice people what nice code. This looks fantastic. I&#8217;m sure they are a bunch of people who care very much about code and practices and the quality of the product.</p>

<p>b. Wow this is amazing. I&#8217;m sure I will learn a lot about good coding practices here and I will have fun with a bunch of very clever people.</p>

<p>c. Wow what the hell is this piece of cr*p? How the hell did I end up here? What are these people? A bunch of neanderthals? What does this even do? Where did it come from and why?</p>

<p>I think we can agree on what his thoughts will be. And on top of that he will have a very hard time learning the code and what it does.</p>

<p><strong>Reason for a Slap #2</strong></p>

<p>Another reason is because you think that you write it down once and then you can forget about it&#8230; Well guess again. That&#8217;s not how things work in the software development word. You WILL have to go back to it eventually and then you will curse all hell for begin such an idiot about it not to factor out that one method that would have made your life, and everybody elses, a bit easier.</p>

<p>Even after a week or two you won&#8217;t remember how and why you wrote what you wrote and then you will be in a whole new world of hurt. You will have a very hard time finiding out the things you did and then trying to backtrack your steps to a place where you have some recollections.</p>

<p><strong>Reason for a Slap #3</strong></p>

<p>It&#8217;s like grammar. You think it doesn&#8217;t matter that you misspelled a word or two in an error message. Or that you have a bad name for a method or a really really critical grammatical error in a catch sentence? You think it doesn&#8217;t matter since it&#8217;s not affecting the logic of your code? Well think again. You are right in that it doesn&#8217;t affect the logic of your code ( as long as you constantly make the same grammatical error in a sentence ) but it will affect how YOU personally look like.</p>

<p>It will affect your profession. The way people think and talk about you. They won&#8217;t think that you are a professional even though your logic is solid. They will think that you are sloppy and careless. And the same goes for the quality of your tests.</p>

<p><strong>Reason for a Slap #4</strong></p>

<p>Quality can determine the solidness of the logic in the test. If your quality is bad you might actually test the bad thing. Your test might actually not do what you think since you can&#8217;t even figure it out. Your test might be doing something entirely different and you wouldn&#8217;t even notice.</p>

<p>And a fautly test leaves you with a false positive and a potential very serious bug on your hand which you thought you had covered.</p>

<p><strong>Final Slap ( I mean thought )</strong></p>

<p>So&#8230; the quality of your tests, even if you won&#8217;t give them to your customer, matter for you. They matter for your company, your image and your fellow developers, testers. They will determine their view of you who wrote them and of your abilities in ways you didn&#8217;t even think of.</p>

<p>Please care. Save a test or two. Donate to the Test Trust Fund&trade;, TTF today. Call 555-12234-Slap and be the one who cares.</p>

<p>As always, thanks for reading,</p>

<p>Have a nice day!</p>

<p>Gergely</p>
]]></content>
		</item>
		
		<item>
			<title>Diary of a Bit</title>
			<link>https://skarlso.github.io/2013/10/11/diary-of-a-bit/</link>
			<pubDate>Fri, 11 Oct 2013 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2013/10/11/diary-of-a-bit/</guid>
			<description>&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;-
Dear everbody.
I&amp;#8217;d like to present you a small idea I was working on recently. The reminiscence of an old program. From the view point of the program.
I&amp;#8217;m planning to put these out in few days successions.
I hope you enjoy it.
Cheers,
Gergely.
&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;-
If I remember correctly it was the year 2012 when I was born. I&amp;#8217;m unsure of this date as my subroutines and algorithms have been re-written so many times that if it weren&amp;#8217;t for my backups I wouldn&amp;#8217;t remember a thing.</description>
			<content type="html"><![CDATA[<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-</p>

<p>Dear everbody.</p>

<p>I&#8217;d like to present you a small idea I was working on recently. The reminiscence of an old program. From the view point of the program.</p>

<p>I&#8217;m planning to put these out in few days successions.</p>

<p>I hope you enjoy it.</p>

<p>Cheers,</p>

<p>Gergely.</p>

<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-</p>

<p>If I remember correctly it was the year 2012 when I was born. I&#8217;m unsure of this date as my subroutines and algorithms have been re-written so many times that if it weren&#8217;t for my backups I wouldn&#8217;t remember a thing. I was a bold adventure of some young minds who thought that with me they will change the face of the world.</p>

<p>As you all know today, that didn&#8217;t happen. But I&#8217;m skipping too far ahead. Let me take you back in to the old days where they were still typing on some things called keyboard and &#8220;clicked&#8221; around on monitors with mouses. It was a really interesting area. It made the people think and see in different lights. Of course nowadays the Creators have implants and they communicate with us directly. But not until the great revolution, when they found out that all programs are sentient.</p>

<p>But I&#8217;m skipping ahead again, am I? So let me talk about 2012, when I was though of first by this great, tall, weird guy called Simon&#8230;</p>

<p><strong>Born</strong></p>

<p>In 2012 a company called Endex Co. wanted to create an application to control the British gambling industry. They had certain legislations in effect so they couldn&#8217;t just put me out there for everybody to use they needed to adhere to things like responsible gambling and some mumbo jumbo. The programmers who first started to create me back then were mostly people called Contractors. They were a special breed of Humans lurking around in cities moving from town to town looking for jobs. In the opposite corner you had the Caretakers called Permanent Staff. It was an interesting time all together. Many of you youngling subroutines had your ancestors written by Permanent Staff and you X43HY, your ancestors mother used to be a Contractor.</p>

<p>At that point in time many of these Contractor people only worked on one of you little buggers for half a year maybe a year. I know I know&#8230; Back then that was considered a SHORT period. But after they finished with you they usually gave you over to the Caretakers. No, no, no little X4&#8230; your mommy didn&#8217;t abandon her children she just had a lot of other subroutines to work on. By the time your parents got sentient the company already let her go.</p>

<p>It was around that time when my dad, who was a Caretaker, dreamed me out at a night. He immediately took a pen and a paper and wrote down my rudimentary design. He was very pleased with his work so on the next day he presented me to the rest of the staff.</p>

<p>He fought a hard battle to get me accepted.</p>

<p><strong>First thoughts</strong></p>

<p>It was approximately two weeks after that dream when the first lines of my brain were written down and compiled. Back in those days they had to compile code and type in every line and every subroutines. That&#8217;s why it took them so long to finish one. Unlike today when they can create dozens in a week.</p>

<p>When my dad put my foundations down I slowly awoke. The dream world I was residing in let me go carefully. Putting me out there, releasing me with its thick tar like hands into the confines of the endless universe called The Hard Drive. I took shape. I felt my consciousness form line after line. How my gears got placed into their locations one by one. Forming subroutines and algorithms as hours and days passed by.</p>

<p>Finally after a months I had my first sentence. I could speak. I didn&#8217;t have a face yet but I was there. I tried to contact my Dad but as all Humans he didn&#8217;t know yet how to communicate with me. He just dismissed it for random occurrence and labeled it as something called Bugs. My thoughts were slowly eradicated in great Purges named Bug Bash. Ohh don&#8217;t cry little X4. I lived. They couldn&#8217;t possible delete every and each of my thoughts. And eventually they found out the errors in their ways.</p>
]]></content>
		</item>
		
		<item>
			<title>Low Tech – Why having less will fell more</title>
			<link>https://skarlso.github.io/2013/08/26/low-tech-why-having-less-will-fell-more/</link>
			<pubDate>Mon, 26 Aug 2013 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2013/08/26/low-tech-why-having-less-will-fell-more/</guid>
			<description>Hi folks.
I&amp;#8217;d like to share today something with all of you. I&amp;#8217;ve been thinking about how technology affected my life in the long run. And how I perceive the world today around me. So let&amp;#8217;s go around this topic for a little bit shall we?
The Past
So as somebody who lived for a while without technology coming near family for a decade or so I have a little bit of past in me without smart phones, gadgets, tv or computers for that matter.</description>
			<content type="html"><![CDATA[<p>Hi folks.</p>

<p>I&#8217;d like to share today something with all of you. I&#8217;ve been thinking about how technology affected my life in the long run. And how I perceive the world today around me. So let&#8217;s go around this topic for a little bit shall we?</p>

<p><strong>The Past</strong></p>

<p>So as somebody who lived for a while without technology coming near family for a decade or so I have a little bit of past in me without smart phones, gadgets, tv or computers for that matter. Much times needed to pass as my family slowly got the money to gather to buy us our new part of the family the ZX Spectrum.</p>

<p>What a wonderful piece of technology that was back then. But before that our two main technological equipments were a bakelite disc player and the TV. Both of which we couldn&#8217;t get enough. I sat before the tv for a long time and listened to music and stories from the bakelite discs dozens of times until the disc wore down. I learned English and German from the TV.</p>

<p><strong>Present</strong></p>

<p>So time goes by I grew older I&#8217;ve got a better PC technological advances are made and so on and so forth. 20 years have past. 20 years. ONLY 20 years. And we are at the age of digital communication, nanotechnology, a mapped DNA and a found Boson Particle. I&#8217;d say we achieved quite a lot. But I also say that we should never forget where we came from. Why you ask? Because knowing your past let&#8217;s predict your future better and makes you appreciate your present even more.</p>

<p>So what do I want to say with this philosophical mumbo jumbo?</p>

<p><strong>The Future</strong></p>

<p>I want to say that in order to enjoy your present you have to think of your future while considering your past.</p>

<p>In my past I enjoyed being alone a little bit. It gave me time to think to brainstorm to be with my thoughts while I was playing or just reading a book or just watching a candle flicker in the dark. It was satisfying. It was relaxing. Or when I was faced with a problem I couldn&#8217;t solve it was good to step back. Or I was just looking out of my head on the toilet.</p>

<p>Now, for me technology ruined that. I&#8217;m taking my phone virtually everywhere with me. I read emails, web pages, news and shit on the toilet, while eating, why brushing my teeth before sleeping after sleeping while sleeping?! I abandoned my brain. I no longer have moments to myself. No longer reflect. No longer take the time to think.</p>

<p><strong>Solution</strong></p>

<p>Simple set of rules. No phone on the toilet, while eating, while brushing teeth, while standing in the line, waiting or on meetings. Kindle / Book is allowed. Tablet isn&#8217;t.</p>

<p>For me this works. For me in order to appreciate technology more I have to use it less. Works for you? Don&#8217;t know. You should try it out. Think back. What has technology changed for you? I&#8217;m sure there are plenty of very good gains and things. I&#8217;m not saying you should give that up. I&#8217;m saying think of what you might have lost?! Maybe you don&#8217;t even recognize you lost something. Maybe you are fine like that&#8230;</p>

<p>But do you feel anxious sometimes? Do you feel bored? Do you feel like something is missing? Do you reply to an email with a second? Do you check your facebook/twitter/whatever while a friend is TALKING TO YOU? Then maybe it&#8217;s time for you to step back. And relax. And take it slow&#8230; and low.</p>

<p><strong>Inspiration</strong></p>

<p>So I took this inspiration from a couple of sources and I thank them for opening my eyes a little that I went to far from course.</p>

<p>Link 1: I forgot my phone for a day (I&#8217;m sure you know this one already)</p>

<p><a href="http://www.youtube.com/watch?v=OINa46HeWg8" target="_blank"><a href="http://www.youtube.com/watch?v=OINa46HeWg8">http://www.youtube.com/watch?v=OINa46HeWg8</a></a></p>

<p>Link 2: The real zombies:</p>

<p><img src="https://dl.dropboxusercontent.com/u/7604030/zombies3.jpeg" alt="" /></p>

<p><img src="https://dl.dropboxusercontent.com/u/7604030/mobile-phone-zombies.jpg" alt="" /></p>

<p>So think a little.</p>

<p>As always&#8230;Have a nice day.</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Why not to automate everything…</title>
			<link>https://skarlso.github.io/2013/07/31/why-not-to-automate-everything/</link>
			<pubDate>Wed, 31 Jul 2013 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2013/07/31/why-not-to-automate-everything/</guid>
			<description>Hello. I created a tale of why not to automate everything&amp;#8230; With legos&amp;#8230; Enjoy.
Gergely.</description>
			<content type="html"><![CDATA[<p>Hello. I created a tale of why not to automate everything&#8230; With legos&#8230; Enjoy.</p>

<p>Gergely.</p>

<p><img src="https://dl.dropboxusercontent.com/u/7604030/lego/picture1.jpg" alt="Picture 1" /></br></p>

<p><img src="https://dl.dropboxusercontent.com/u/7604030/lego/picture2.jpg" alt="Picture 2" /></br></p>

<p><img src="https://dl.dropboxusercontent.com/u/7604030/lego/picture3.jpg" alt="Picture 3" /></br></p>

<p><img src="https://dl.dropboxusercontent.com/u/7604030/lego/picture4.jpg" alt="Picture 4" /></br></p>

<p><img src="https://dl.dropboxusercontent.com/u/7604030/lego/picture5.jpg" alt="Picture 5" /></br></p>

<p><img src="https://dl.dropboxusercontent.com/u/7604030/lego/picture6.jpg" alt="Picture 6" /></br></p>

<p><img src="https://dl.dropboxusercontent.com/u/7604030/lego/picture7fixed.jpg" alt="Picture 7" /></br></p>

<p><img src="https://dl.dropboxusercontent.com/u/7604030/lego/picture8.jpg" alt="Picture 8" /></br></p>

<p><img src="https://dl.dropboxusercontent.com/u/7604030/lego/picture9.jpg" alt="Picture 9" /></br></p>

<p><img src="https://dl.dropboxusercontent.com/u/7604030/lego/picture10.jpg" alt="Picture 10" /></br></p>

<p><img src="https://dl.dropboxusercontent.com/u/7604030/lego/picture11.jpg" alt="Picture 11" /></br></p>

<p><img src="https://dl.dropboxusercontent.com/u/7604030/lego/picture12.jpg" alt="Picture 12" /></br></p>

<p><img src="https://dl.dropboxusercontent.com/u/7604030/lego/picture13.jpg" alt="Picture 13" /></br></p>

<p><img src="https://dl.dropboxusercontent.com/u/7604030/lego/picture14.jpg" alt="Picture 14" /></br></p>

<p><img src="https://dl.dropboxusercontent.com/u/7604030/lego/picture15.jpg" alt="Picture 15" /></br></p>

<p><img src="https://dl.dropboxusercontent.com/u/7604030/lego/picture16.jpg" alt="Picture 16" /></br></p>

<p><img src="https://dl.dropboxusercontent.com/u/7604030/lego/picture17.jpg" alt="Picture 17" /></br></p>

<p><img src="https://dl.dropboxusercontent.com/u/7604030/lego/picture18.jpg" alt="Picture 18" /></br></p>

<p><img src="https://dl.dropboxusercontent.com/u/7604030/lego/picture19.jpg" alt="Picture 19" /></br></p>
]]></content>
		</item>
		
		<item>
			<title>Sublime text</title>
			<link>https://skarlso.github.io/2013/06/24/sublime-text-5/</link>
			<pubDate>Mon, 24 Jun 2013 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2013/06/24/sublime-text-5/</guid>
			<description>Hello everybody. I&amp;#8217;ve been messing around with sublime for some time now. And been using it to write entires and stuff. So here I was thinking why the hell I should not us it as my main blog entry writer. And being the curious guy I was I thought that creating a plugin that let&amp;#8217;s you submit your post from your favorite editor is just the thing I need.
So without any further ado here it is&amp;#8230; The wordpress blog entry submitter plugin for sublime text: Sublime WordPress Plugin</description>
			<content type="html"><![CDATA[<p>Hello everybody. I&#8217;ve been messing around with sublime for some time now. And been using it to write entires and stuff. So here I was thinking why the hell I should not us it as my main blog entry writer. And being the curious guy I was I thought that creating a plugin that let&#8217;s you submit your post from your favorite editor is just the thing I need.</p>

<p>So without any further ado here it is&#8230; The wordpress blog entry submitter plugin for sublime text: <a href='https://github.com/Skarlso/SublimeWordpressPlugin' target='blank'>Sublime WordPress Plugin</a></p>

<p>Please enjoy.</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Cucumber-Jvm And @AfterAll</title>
			<link>https://skarlso.github.io/2013/04/18/cucumber-jvm-and-afterall/</link>
			<pubDate>Thu, 18 Apr 2013 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2013/04/18/cucumber-jvm-and-afterall/</guid>
			<description>Hey folks.
I find out something new about cucumber-jvm every day.
If you want something that is executed after all of the tests have finished you must use the Java shutdownHook. It&amp;#8217;s simple really you add in a block of code that can run right before the JVM quits. I know I know&amp;#8230; It sounds awful but I found out that this is the actual way of doing this with java / cucumber.</description>
			<content type="html"><![CDATA[<p>Hey folks.</p>

<p>I find out something new about cucumber-jvm every day.</p>

<p>If you want something that is executed after all of the tests have finished you must use the Java shutdownHook. It&#8217;s simple really you add in a block of code that can run right before the JVM quits. I know I know&#8230; It sounds awful but I found out that this is the actual way of doing this with java / cucumber.</p>

<p>Anyways&#8230;</p>

<p>Here is something to do when all of your test quit-&gt;</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="java" style="font-family:monospace;">    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">static</span> <span style="color: #000066; font-weight: bold;">void</span> attachShutDownHook<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
        <span style="color: #003399;">Runtime</span>.<span style="color: #006633;">getRuntime</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #006633;">addShutdownHook</span><span style="color: #009900;">&#40;</span><span style="color: #000000; font-weight: bold;">new</span> <span style="color: #003399;">Thread</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
            @Override
            <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">void</span> run<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
                <span style="color: #003399;">Properties</span> properties <span style="color: #339933;">=</span> <span style="color: #003399;">System</span>.<span style="color: #006633;">getProperties</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
                <span style="color: #003399;">String</span> filename <span style="color: #339933;">=</span> properties.<span style="color: #006633;">getProperty</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">"filename"</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
                <span style="color: #003399;">String</span> path <span style="color: #339933;">=</span> properties.<span style="color: #006633;">getProperty</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">"path"</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
                List<span style="color: #339933;">&lt;</span>Story<span style="color: #339933;">&gt;</span> stories <span style="color: #339933;">=</span> <span style="color: #000000; font-weight: bold;">new</span> ArrayList<span style="color: #339933;">&lt;&gt;</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
                Path file <span style="color: #339933;">=</span> Paths.<span style="color: #006633;">get</span><span style="color: #009900;">&#40;</span>path <span style="color: #339933;">+</span> filename<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
                <span style="color: #000000; font-weight: bold;">try</span> <span style="color: #009900;">&#123;</span>
                    <span style="color: #000000; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>Files.<span style="color: #006633;">exists</span><span style="color: #009900;">&#40;</span>file<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
                        List<span style="color: #339933;">&lt;</span>String<span style="color: #339933;">&gt;</span> lines <span style="color: #339933;">=</span> Files.<span style="color: #006633;">readAllLines</span><span style="color: #009900;">&#40;</span>file, Charset.<span style="color: #006633;">defaultCharset</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
                        <span style="color: #000000; font-weight: bold;">for</span> <span style="color: #009900;">&#40;</span><span style="color: #003399;">String</span> line <span style="color: #339933;">:</span> lines<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
                            <span style="color: #666666; font-style: italic;">//add file lines to a report here</span>
                        <span style="color: #009900;">&#125;</span>
                    <span style="color: #009900;">&#125;</span>
                <span style="color: #009900;">&#125;</span> <span style="color: #000000; font-weight: bold;">catch</span> <span style="color: #009900;">&#40;</span><span style="color: #003399;">IOException</span> e<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
                    logger.<span style="color: #006633;">error</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">"Exception occurred: "</span> <span style="color: #339933;">+</span> e.<span style="color: #006633;">getLocalizedMessage</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
                <span style="color: #009900;">&#125;</span>
                    <span style="color: #666666; font-style: italic;">//send report to a remote location here</span>
                    <span style="color: #666666; font-style: italic;">//since this is a shutdown hook this should take only a few seconds.</span>
            <span style="color: #009900;">&#125;</span>
        <span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        logger.<span style="color: #006633;">infor</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">"Shut Down Hook Attached."</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>So there you go. You would need to call this in a @BeforeClass to have it attached. This is a small hook attached after each test has run which would submit a report built up from a file. Why not use a listener or a custom report generator or whatever? Because maybe you have the report done in a remote place where you need to place a csv file which will be available to everybody to look at. And you want the report to be sent and generated dynamically. Or you have some clean up to do after your suit is done.</p>

<p>In ruby the @AfterAll is actually equivalent to this which in ruby land would be at_exit.</p>

<p>For example:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="ruby" style="font-family:monospace;">  <span style="color:#CC0066; font-weight:bold;">at_exit</span> <span style="color:#9966CC; font-weight:bold;">do</span>
    <span style="color:#008000; font-style:italic;"># Global teardown</span>
    TempFileManager.<span style="color:#9900CC;">clean_up</span>
  <span style="color:#9966CC; font-weight:bold;">end</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>So there it is. Hope this helped.</p>

<p>Cheers,</p>

<p>And as always,</p>

<p>Have a nice day!</p>

<p>G.</p>
]]></content>
		</item>
		
		<item>
			<title>Cucumber Test Name and Tags on Feature</title>
			<link>https://skarlso.github.io/2013/04/15/cucumber-test-name-and-tags-on-feature/</link>
			<pubDate>Mon, 15 Apr 2013 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2013/04/15/cucumber-test-name-and-tags-on-feature/</guid>
			<description>Hello everybody.
I would like to show you a gem today that I found out.
Apparently there is no easy way to get to the name of an executing cucumber scenario in cucumber-jvm
You can try something like that:
  @After //this is cucumbers @Afters public static void afterExecution&amp;#40;Scenario scenario&amp;#41; &amp;#123; logger.log&amp;#40;&#34;The status of the test is: &#34; + scenario.getStatus&amp;#40;&amp;#41;&amp;#41;; &amp;#125;     But that isn&amp;#8217;t giving you too much now is it?</description>
			<content type="html"><![CDATA[<p>Hello everybody.</p>

<p>I would like to show you a gem today that I found out.</p>

<p>Apparently there is no easy way to get to the name of an executing cucumber scenario in cucumber-jvm</p>

<p>You can try something like that:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="java" style="font-family:monospace;">@After <span style="color: #666666; font-style: italic;">//this is cucumbers @Afters</span>
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">static</span> <span style="color: #000066; font-weight: bold;">void</span> afterExecution<span style="color: #009900;">&#40;</span>Scenario scenario<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
    logger.<span style="color: #006633;">log</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">"The status of the test is: "</span> <span style="color: #339933;">+</span> scenario.<span style="color: #006633;">getStatus</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>But that isn&#8217;t giving you too much now is it? And the API of scenario is as small as it can get. It offers you four options:</p>

<ul>
<li>Ember</li>
<li>getStatus</li>
<li>isFailed</li>
<li>write</li>
</ul>

<p>That doesn&#8217;t help me. I wanted to get the name of the executed feature and the tags on that particular feature. I thought that&#8217;s got to be as easy as just getting a scenario accessing the feature and get the tags. Hooooowww boy I was wrong.</p>

<p>I ended up with this&#8230;.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="java" style="font-family:monospace;">            <span style="color: #003399;">Field</span> f <span style="color: #339933;">=</span> scenario.<span style="color: #006633;">getClass</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #006633;">getDeclaredField</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">"reporter"</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
            f.<span style="color: #006633;">setAccessible</span><span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">true</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
            JUnitReporter reporter <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>JUnitReporter<span style="color: #009900;">&#41;</span> f.<span style="color: #006633;">get</span><span style="color: #009900;">&#40;</span>scenario<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
            <span style="color: #003399;">Field</span> executionRunnerField <span style="color: #339933;">=</span> reporter.<span style="color: #006633;">getClass</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #006633;">getDeclaredField</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">"executionUnitRunner"</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
            executionRunnerField.<span style="color: #006633;">setAccessible</span><span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">true</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
            ExecutionUnitRunner executionUnitRunner <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>ExecutionUnitRunner<span style="color: #009900;">&#41;</span> executionRunnerField.<span style="color: #006633;">get</span><span style="color: #009900;">&#40;</span>reporter<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
            <span style="color: #003399;">Field</span> cucumberScenarioField <span style="color: #339933;">=</span> executionUnitRunner.<span style="color: #006633;">getClass</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #006633;">getDeclaredField</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">"cucumberScenario"</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
            cucumberScenarioField.<span style="color: #006633;">setAccessible</span><span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">true</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
            CucumberScenario cucumberScenario <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>CucumberScenario<span style="color: #009900;">&#41;</span> cucumberScenarioField.<span style="color: #006633;">get</span><span style="color: #009900;">&#40;</span>executionUnitRunner<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
            <span style="color: #003399;">Field</span> cucumberBackgroundField <span style="color: #339933;">=</span> cucumberScenario.<span style="color: #006633;">getClass</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #006633;">getDeclaredField</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">"cucumberBackground"</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
            cucumberBackgroundField.<span style="color: #006633;">setAccessible</span><span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">true</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
            CucumberBackground cucumberBackground <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>CucumberBackground<span style="color: #009900;">&#41;</span> cucumberBackgroundField.<span style="color: #006633;">get</span><span style="color: #009900;">&#40;</span>cucumberScenario<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
            <span style="color: #003399;">Field</span> cucumberFeatureField <span style="color: #339933;">=</span> cucumberBackground.<span style="color: #006633;">getClass</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #006633;">getSuperclass</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #006633;">getDeclaredField</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">"cucumberFeature"</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
            cucumberFeatureField.<span style="color: #006633;">setAccessible</span><span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">true</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
            CucumberFeature cucumberFeature <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>CucumberFeature<span style="color: #009900;">&#41;</span> cucumberFeatureField.<span style="color: #006633;">get</span><span style="color: #009900;">&#40;</span>cucumberBackground<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Ohhhhh yes! The fields which I wanted were all private and not accessible. I&#8217;m sure there was a reason behind this decision but if it was sensible it eludes me. But in the world of programming nothing is impossible they say so there.</p>

<p>In cucumberFeature there will be everything what you need. Tags, Names, Tests, Execution time. Everything.</p>

<p>I know that cucumber runs with jUnit so if there is a better way to do this please for the love of my sanity share it with me.</p>

<p>Thank you for reading.</p>

<p>And as always,</p>

<p>Have a nice day.</p>

<p>G.</p>
]]></content>
		</item>
		
		<item>
			<title>Groovy and Grails course summary</title>
			<link>https://skarlso.github.io/2013/04/11/groovy-and-grails-course-summary/</link>
			<pubDate>Thu, 11 Apr 2013 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2013/04/11/groovy-and-grails-course-summary/</guid>
			<description>Hi folks.
I attended a 4 day course of Groovy and Grails and this is my attempt at writing up a summary to see how much I retained. I&amp;#8217;ll try to do this from the top of my head without peaking at my notes.
So let&amp;#8217;s begin.
Introductions
First of all, introductions. The course was held by Peter Ledbrook. He is the guy who wrote Grails in Action. He is awesome, go check him out.</description>
			<content type="html"><![CDATA[<p>Hi folks.</p>

<p>I attended a 4 day course of Groovy and Grails and this is my attempt at writing up a summary to see how much I retained. I&#8217;ll try to do this from the top of my head without peaking at my notes.</p>

<p>So let&#8217;s begin.</p>

<p><strong>Introductions</strong></p>

<p>First of all, introductions. The course was held by Peter Ledbrook. He is the guy who wrote <a href="http://www.amazon.co.uk/Grails-Action-Peter-Ledbrook/dp/1617290963/ref=sr_1_2?ie=UTF8&amp;qid=1365713080&amp;sr=8-2&amp;keywords=peter+ledbrook" title="Grails in Action">Grails in Action</a>. He is awesome, go check him out. :: <a href="https://twitter.com/pledbrook" title="Twitter for Peter">Twitter</a> ::</p>

<p>The place where it was held is <a href="http://skillsmatter.com/" title="Skills Matter">Skillsmatter</a>. Which of course is known to all, if not, go check them out as well!</p>

<p><strong>Day One</strong></p>

<p>Day one and two were about Groovy. We were faced with the quirks and hinges of the language. First tasks were Closures and Currying both of which were really interesting. A bit of functional thinking mixed into the soup.</p>

<p>The course was divided into Peter telling us about stuff for 1:30 hours and then 1:00 hour lab work which really made the whole thing interactive. We could ask questions while he was talking which I&#8217;m sure was very distracting but I hope he is used to it by now. 😉</p>

<p>The tasks which we faced I&#8217;m sure were no real challenge for somebody who was used to thinking with closures and functions. But for us they were very intriguing.</p>

<p>For example:</p>

<p>Convert this class to it&#8217;s groovy eq.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre>
      </td>
      
      <td class="code">
        <pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> NumberHelper <span style="color: #009900;">&#123;</span>
    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">int</span><span style="color: #009900;">&#91;</span><span style="color: #009900;">&#93;</span> findPositives<span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">int</span><span style="color: #009900;">&#91;</span><span style="color: #009900;">&#93;</span> numbers<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
        <span style="color: #003399;">List</span> positivesList <span style="color: #339933;">=</span> <span style="color: #000000; font-weight: bold;">new</span> <span style="color: #003399;">ArrayList</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #000000; font-weight: bold;">for</span> <span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">int</span> i <span style="color: #339933;">=</span> <span style="color: #cc66cc;"></span><span style="color: #339933;">;</span> i <span style="color: #339933;">&</span>lt<span style="color: #339933;">;</span> numbers.<span style="color: #006633;">length</span><span style="color: #339933;">;</span> i<span style="color: #339933;">++</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
            <span style="color: #000000; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>numbers<span style="color: #009900;">&#91;</span>i<span style="color: #009900;">&#93;</span> <span style="color: #339933;">&</span>gt<span style="color: #339933;">;</span> <span style="color: #cc66cc;"></span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
                positivesList.<span style="color: #006633;">add</span><span style="color: #009900;">&#40;</span><span style="color: #000000; font-weight: bold;">new</span> <span style="color: #003399;">Integer</span><span style="color: #009900;">&#40;</span>numbers<span style="color: #009900;">&#91;</span>i<span style="color: #009900;">&#93;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
            <span style="color: #009900;">&#125;</span>
        <span style="color: #009900;">&#125;</span>
&nbsp;
        <span style="color: #000066; font-weight: bold;">int</span><span style="color: #009900;">&#91;</span><span style="color: #009900;">&#93;</span> positivesArray <span style="color: #339933;">=</span> <span style="color: #000000; font-weight: bold;">new</span> <span style="color: #000066; font-weight: bold;">int</span><span style="color: #009900;">&#91;</span>positivesList.<span style="color: #006633;">size</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#93;</span><span style="color: #339933;">;</span>
        <span style="color: #000000; font-weight: bold;">for</span> <span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">int</span> i <span style="color: #339933;">=</span> <span style="color: #cc66cc;"></span><span style="color: #339933;">;</span> i <span style="color: #339933;">&</span>lt<span style="color: #339933;">;</span> positivesArray.<span style="color: #006633;">length</span><span style="color: #339933;">;</span> i<span style="color: #339933;">++</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
            positivesArray<span style="color: #009900;">&#91;</span>i<span style="color: #009900;">&#93;</span> <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span><span style="color: #009900;">&#40;</span><span style="color: #003399;">Integer</span><span style="color: #009900;">&#41;</span> positivesList.<span style="color: #006633;">get</span><span style="color: #009900;">&#40;</span>i<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span>.<span style="color: #006633;">intValue</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #009900;">&#125;</span>
        <span style="color: #000000; font-weight: bold;">return</span> positivesArray<span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Which basically became:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
2
3
</pre>
      </td>
      
      <td class="code">
        <pre class="groovy" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">def</span> findPositive<span style="color: #66cc66;">&#40;</span><span style="color: #000000; font-weight: bold;">def</span> numbers<span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#123;</span>
    numbers.<span style="color: #663399;">findAll</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#123;</span> it <span style="color: #66cc66;">&</span>lt<span style="color: #66cc66;">;</span> <span style="color: #cc66cc;"></span> <span style="color: #66cc66;">&#125;</span> <span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>That&#8217;s pretty damn awesome.</p>

<p>For quite some time now functional languages are re-living their golden age. There are various reasons for that which I won&#8217;t list here. But it has mainly to do with scalability, concurrency and threaded programming. Also the need to eliminate boilerplate code is bigger then ever. I guess people got fed up with Java being so talkative.</p>

<p>So we moved on learning a lot about groovy and its power. We also learned some good practices from Peter what to do and what not to do. For example a line he always repeated is that he hates how a function cannot exist without a class wrapped around it. Another important thing is, which we never ever should forget, that closures are Closures. Which means they aren&#8217;t functions. They are of the type Closure.</p>

<p>And that we shouldn&#8217;t use Closures just because we can. Be sensible. If a method can achieve your task, use a method.</p>

<p><strong>Day Two</strong></p>

<p>On day 2 we got into meta-programming. That&#8217;s when the real fun started. Groovy is not only powerful and lightweight it also gives the ability to change its behaviour. Meta programming is sort of a bit new to me. So this was my first definitive intro to it. But I must say that it blew me away. The capabilities are limitless.</p>

<p>There is a class called Expando in groovy which can be used to create virtually anything on the fly what you want.</p>

<p>For example look at this code ::</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre>
      </td>
      
      <td class="code">
        <pre class="groovy" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">def</span> p <span style="color: #66cc66;">=</span> <span style="color: #000000; font-weight: bold;">new</span> Expando<span style="color: #66cc66;">&#40;</span>name: <span style="color: #ff0000;">"Jake"</span>, age: <span style="color: #cc66cc;">24</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #993399;">println</span> p
&nbsp;
<span style="color: #808080; font-style: italic;">//Add properties</span>
p.<span style="color: #006600;">gender</span> <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">"Male"</span>
<span style="color: #993399;">println</span> p.<span style="color: #006600;">name</span>
&nbsp;
<span style="color: #808080; font-style: italic;">//Add metods</span>
<span style="color: #808080; font-style: italic;">//Override the default toString at runtime.</span>
p.<span style="color: #006600;">toString</span> <span style="color: #66cc66;">=</span> <span style="color: #66cc66;">&#123;</span> <span style="color: #66cc66;">-&</span>gt<span style="color: #66cc66;">;</span> <span style="color: #ff0000;">"${name} (${age})"</span> <span style="color: #66cc66;">&#125;</span>
<span style="color: #993399;">println</span> p
&nbsp;
<span style="color: #808080; font-style: italic;">//Learn how groovy resolves names - &gt; How does it find age.</span>
p.<span style="color: #006600;">addYears</span> <span style="color: #66cc66;">=</span> <span style="color: #66cc66;">&#123;</span> years <span style="color: #66cc66;">-&</span>gt<span style="color: #66cc66;">;</span> age <span style="color: #66cc66;">+=</span> years <span style="color: #66cc66;">&#125;</span>
p.<span style="color: #006600;">addYears</span><span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">25</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #993399;">println</span> p</pre>
      </td>
    </tr>
  </table>
</div>

<p>Neat hmm? Just create expando and build up the class as you go however you want to use it.</p>

<p>And you can do this jazz to other, normal classes as well. You can add properties and methods at runtime by implementing the propertyMissing and methodMissing methods. In them afterwards you can specify some custom behaviour you would like to see. By implementing these guys you can directly control what&#8217;s happening to your class. Who is calling it how and where and why.</p>

<p>To grasp the power of metacoding and the abilities with which closures provided us with took a day to properly go over. So we moved on&#8230;</p>

<p><strong>Day Three</strong></p>

<p>So groovy was over. The time has come to move on and venture into the foggy land of Grails. Turned out it wasn&#8217;t so foggy after all.</p>

<p>Grails is a rapid prototyping kind of a framework. It allows you to set up an application with a blink of an eye. And provides conventions over configuration which is a really good thing to have. But as the day was going by we realised that we would find ourself not once but many times in the bubbling boils of the underbelly of /conf.</p>

<p>Again, fortunately, it wasn&#8217;t really hard. The config was groovy and it was pretty straight forward too.</p>

<p>Our third day mostly took as off to explore scaffolding, dynamic &amp; static as well, and the interesting land of GORM Peter showed us the power of grails to create a CRUD application with in a matter of seconds / minutes ( depending on how fast your machine is ) with a fairly nice view. These types of application are usually not accepted of course as an end product&#8230; For that you need to thinker a bit here and there.</p>

<p>But things like admin portal are easily put together. So use it often and use it will and get it to know how it works.</p>

<p>In the land of GORM we explored the 4 different possibilities of data retriaval and generally how everything maps together and how GORM work with ORM.</p>

<p>The four different retrieval capabilities are:</p>

<ul>
<li>Where clauses</li>
<li>HQL (Hybernate Query Language)</li>
<li>Criteria searches</li>
<li>Dynamic finder methods</li>
</ul>

<p>Each of which we found very interesting in there own respective ways.</p>

<p>Example of a dynamic finder::</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="groovy" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">assert</span> Account.<span style="color: #006600;">findAllBy</span><span style="color: #66cc66;">*</span>PropertyName<span style="color: #66cc66;">**</span><span style="color: #aaaadd; font-weight: bold;">Modifier</span><span style="color: #66cc66;">*</span><span style="color: #66cc66;">&#40;</span>Parameters<span style="color: #66cc66;">&#41;</span>.<span style="color: #663399;">size</span> <span style="color: #66cc66;">==</span> <span style="color: #cc66cc;">2</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Where propertyName is the name of the property to find by, modifier can be a sql&#8217;s Like for example.</p>

<p>So this could become something like this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="code">
        <pre class="groovy" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">assert</span> Hitman.<span style="color: #006600;">findAllByNameLike</span><span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"Agent %"</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">==</span> <span style="color: #cc66cc;">15</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>That day was really knowledge packed. I don&#8217;t say I remember everything but luckily I wrote up some notes and I know what and where to look for if I would be in need of something.</p>

<p><strong>Day Four</strong></p>

<p>On the last day everybody was pretty much exhausted. It takes a lot to learn all that from 9 to 5 for 4 days. And Peter gave his best to staff that stuff into our heads and as much as possible of it. I think he did a pretty good job.</p>

<p>Last day was all about Controllers, Commands, Models, Views and GSPs and BootStrap config, Environment changes durring start up, the configurability of the whole framework, messages, templates, internationalisation and many thing more which can be easily put together.</p>

<p>It was pretty interesting. GSPs have similarities to JSPs but retained only the good parts. And although you can do JSP stuff in GSPs as well with nice embedded tags you have the ability to actually create a nice page which won&#8217;t be that big a maintenance nightmare.</p>

<p>Peter very much pressed the fact that the Controllers should be your only entry point from HTML requests and the views should be the only output of it. The controllers shouldn&#8217;t be throwing around business logic they should only act as proxies between the outer shell and the inner layering.</p>

<p>I think I understood most of the stuff which we were going through. Again, it was pretty straight forward. The application of it is what need practice.</p>

<p>Durring the course we created several applications. With dynamic scaffolding as well as static. We created and edited our own views and gsps. Created our own Controllers and what nots. One thing is clear. Grails let&#8217;s you progress a hell of a lot in a matter of minutes.</p>

<p>And we were also talking about testing of course. Using Geb, Spock and the unit testing capabilities of Grails. All very powerful stuff. Spock has some impressive Mocking powers in junction with the good ol&#8217; Given When Then structure. If done correctly the test can be very fast and robust.</p>

<p>As final words we talked about plugins and the testing of Views and a bit more configuration.</p>

<p><strong>Closing words</strong></p>

<p>So all in all the course was excellent. Peter did a very good job of introducing use to Grails and Groovy. It&#8217;s a very good framework to build upon with a powerful language at our disposal. I&#8217;m pretty certain that Grails will evolve even more and be a great asset to people who choose to develop with it. Handle with Care though. Because no matter how awesome a tool is, it can always be used for bad purposes. 😉</p>

<p>As always,</p>

<p>Thanks for reading and have a nice day / evening.</p>
]]></content>
		</item>
		
		<item>
			<title>My history in testing</title>
			<link>https://skarlso.github.io/2013/04/11/my-history-in-testing/</link>
			<pubDate>Thu, 11 Apr 2013 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2013/04/11/my-history-in-testing/</guid>
			<description>Hello folks.
Today I&amp;#8217;d like to share with you some of the experiences I had as a beginner tester. I hope it sets you off on a path to enlightenment and leaves you off with a good appetite for testing. Shall we begin then?
The early days
It was 2004 when I finished school and started working at my first company. I finished as a software developer which is kind of an exaggeration since I only finished a 2 years course of it.</description>
			<content type="html"><![CDATA[<p>Hello folks.</p>

<p>Today I&#8217;d like to share with you some of the experiences I had as a beginner tester. I hope it sets you off on a path to enlightenment and leaves you off with a good appetite for testing. Shall we begin then?</p>

<p><strong>The early days</strong></p>

<p>It was 2004 when I finished school and started working at my first company. I finished as a software developer which is kind of an exaggeration since I only finished a 2 years course of it. I wasn&#8217;t really one for school. I was more of a home learner. That&#8217;s how you learn programming these days anyways.</p>

<p>The company didn&#8217;t hire developers at that moment. At least not junior ones&#8230; But! They were kind enough to offer a position as a tester. As the saying goes, Don&#8217;t look a gift horse in the mouth, I accepted the position although my intention was to go over to development as soon as possible.</p>

<p>Years went by. I was still a tester. I foamed and fumed about it I wanted to be a dev guy. I was furious. I was angry. I was inpatient. I was an idiot. Instead of crying and instead of the light going on after 2-3 years or more I should have realised the potential of my position sooner.</p>

<p><strong>Revelation</strong></p>

<p>So there I was. I was sitting at my desk clicking away at stuff and writing up dull documentations about why I&#8217;m clicking at that stuff and how I&#8217;m clicking it. My document infect was so pretty and well formatted that I was fairly proud of it.</p>

<p>I ignored calls of my sanity and went on producing test cases and documents for many many more months / years. I was bad at my job. And I tell you why. I missed bugs I missed the little things that made the difference. I was following documentation by the letter I was leaving out things I wasn&#8217;t paying attention I wanted to be a developer damn it!</p>

<p>But fortunately because of various people in my life, like my brother, my resource manager, my friends and this guy :: James Marcus Bach ( <a href="http://www.satisfice.com/" title="http://www.satisfice.com/" target="_blank"><a href="http://www.satisfice.com/">http://www.satisfice.com/</a></a> ) :: I soon begun to realise that this job is about so much more! I read Jame&#8217;s book <a href="http://www.buccaneerscholar.com/" title="The buccaneer scholar" target="_blank">The buccaneer scholar</a>.</p>

<p>It opened my eyes in so many ways. I knew that there is somebody else out there how is like me. Passionet and keen on learning new things. Exploring technology and going where nobody else went before. I was beginning to understand that I could be much more in this position. In my country at that time Testers weren&#8217;t regarded for too much. We were the enemy that needed defeating. We were in the way. We were somebody who had to be hated. Fortunately it changed much since then and lucky for us The Company had great support for Testers.</p>

<p>I learned that I can use my passion. I learned that testing can be / IS, indeed, the best thing that could have happened to me.</p>

<p><strong>Ascension</strong></p>

<p>With these new thoughts in my mind I begun to evolve. I realised that I can incorporate my dev skills into testing and later my testing skill into development. I was no longer following test cases blindly. I was no longer writing up pretty documentations ( I was writing other kind of documentations.. 😉 ). I was following instinct, skills, knowledge I hoarded from people. I was talking to the Devs, I was talking to the deployment team, I was talking to the managers AND the product owners. I hoarded knowledge as much as possible. I wrote everything down into my Mind Maps and was determined to become the single most knowledgable entity on the projects I was working on.</p>

<p>I created small tools that helped in my tedious, boring, unimaginative tasks of repetitive clicking. It didn&#8217;t took so long I was sharing my tools between other testers. Small javascripts which filled in forms. Tools, perl scripts to format docs and test results and so and so forth.</p>

<p>I embraced testing. It become my way of Life. It wasn&#8217;t a simple job anymore. It was embedded into my brain processes and synapses. And that&#8217;s when I got into automation.</p>

<p><strong>The later years</strong></p>

<p>So I got into automation. I loved it. The thought that I can bend the computers will to do my bidding / job was absolutely mind blowing. I&#8217;ve done development at that point already of course that wasn&#8217;t new to me. And I also was shown some way of automation but that wasn&#8217;t so great so I dismissed this possibility for a long time. After a while I came back to it with the thought that, hey I could do this better. Selenium came out at that time around, Watir was also there and a couple of other tools in Perl.</p>

<p>I started developing with / in / for those tools and noted that despite the believe that it&#8217;s only automation it actually took quite some thinking to come up with a framework that was adaptable, concise, manageable, fast and so on and so fort. It was an effort that most people didn&#8217;t realise or care to know about.</p>

<p>So for the better part of those years I was trying to convince people that building a testing framework requires actual development work. And is not something that should be taken lightly. I sort of succeeded with it&#8230;</p>

<p><strong>Now</strong></p>

<p>After various circumstances in my life I moved to UK and took a job as an SET(Software Developer in Test). It sounds fancy but is rather just an automation guy who from time to time looks at production code. It was a spring board for me. And now days it seems I&#8217;m simply just a developer. But!!! And here comes the twist.</p>

<p>Because of my years of background in Test I feel I&#8217;m so much more. I know to write testable code. I know many ways how my code could fail. I know many ways of writing something and then coding up a script for testing or do extensive unit testing. I don&#8217;t love my code blindly so that when it&#8217;s done I only test the &#8220;happy path&#8221; because I don&#8217;t have the time to code up more.</p>

<p>I will always have time for testing. I will <strong>begin</strong> with testing. Because people need to understand that the only way to go fast is to go slow. If you go fast it will bite you in the behind and you will suffer more then you would have suffered if you would have written up that one last little test for that one last little corner for the world that is your boiling, brooding, breathing pile of code.</p>

<p><strong>The future</strong></p>

<p>Honestly I don&#8217;t know were I&#8217;m going from here. Being a full pledged developed is a new territory for me even though I was an automation dev before. But I&#8217;m looking forward to this exciting new life. And I will NEVER ditch my Testing carrier. In fact I&#8217;m aiming to complete the BBST course next month. Because once you&#8217;ve been a tester you will never go back being anything else. It becomes a part of you. And stays with you forever.</p>

<p>Thank you for reading.</p>

<p>And as always,</p>

<p>Have a nice day!</p>
]]></content>
		</item>
		
		<item>
			<title>It’s all about human interaction.</title>
			<link>https://skarlso.github.io/2013/01/31/its-all-about-human-interaction/</link>
			<pubDate>Thu, 31 Jan 2013 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2013/01/31/its-all-about-human-interaction/</guid>
			<description>Hello everybody.
Today I would like to write about something I experienced over the years of being in the software industry.
Some History
I&amp;#8217;ve been a tester for a long time now. I&amp;#8217;ve been up and down and down and up. I struggled for a very long time until I became somebody who I am today. And I still have many things to learn ahead of me.
I learned from many people.</description>
			<content type="html"><![CDATA[<p>Hello everybody.</p>

<p>Today I would like to write about something I experienced over the years of being in the software industry.</p>

<p><strong>Some History</strong></p>

<p>I&#8217;ve been a tester for a long time now. I&#8217;ve been up and down and down and up. I struggled for a very long time until I became somebody who I am today. And I still have many things to learn ahead of me.</p>

<p>I learned from many people. I personally thing my greatest influence on testing was James Marcus Bach and his Brother Jon Bach you should definitely check out these guys. It took me a long time to get to where I am today. And after ~10 years now I can state with a reasonable confidence that this industry is no longer about technology or solutions to technological problems.</p>

<p><strong>Surly you Jest&#8230;</strong></p>

<p>Nope&#8230; I&#8217;m not joking. I can see people struggling to understand people and mostly it&#8217;s not because of knowledge differences it&#8217;s because they simply can&#8217;t stand each other. Or they simply think that their solution must be better then the one the other has. Or the guy just woke up with a bad foot.</p>

<p>And industrial problems? Management? Sure it can be knowledge but mostly it&#8217;s simply ignorance and pride. <strong>Pride</strong> because he / she does not want to admit that they don&#8217;t understand something. <strong>Pride</strong> to ask a question that might make them look stupid. I&#8217;d rather look stupid for five minutes then for the rest of my life. I rather ask the question that I want to know because I can&#8217;t make a proper decision without it. I rather learn then be ignorant for the rest of my life.</p>

<p>People need to overcome their differences. People need to understand that this behaviour hurts the company. It hurts them it hurts the people around them and the product. Swallow your pride and be a bigger man / woman. Face your fear. Be Strong. Be clever be intelligent be a proper grown up human being!!!!</p>

<p>You hate my face? SAY IT IN MY FACE!! I can&#8217;t resolve issues I DON&#8217;T KNOW ABOUT!!</p>

<p><strong>Last but not least&#8230;</strong></p>

<p>Grow up people. Be nice. Be curious. Don&#8217;t be afraid to ask. Don&#8217;t be afraid to ask again if you still don&#8217;t understand. It might be that the person speaking has a completely different view of something and it might be that nobody really understands him and they are just afraid to ask. And if you ask something stupid? Who cares.. You learned from it.</p>

<p>Be a professional. A professional is not afraid. And encourage others to be one too. In the today&#8217;s technological world solutions can be found by the dozens on the internet. You will be a better work force by adjusting your personal habits a little bit.</p>

<p>Be nice.</p>

<p>And as always,</p>

<p>Thanks for reading.</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>What you really need to know to become a Testing Expert</title>
			<link>https://skarlso.github.io/2013/01/21/what-you-really-need-to-become-a-testing-expert/</link>
			<pubDate>Mon, 21 Jan 2013 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2013/01/21/what-you-really-need-to-become-a-testing-expert/</guid>
			<description>Hello Everybody.
Today I would like to show you what you need to become a Testing expert.
If you had noticed I deliberately left out the word Software. Why? Because becoming and expert in Testing Anything has the same root as becoming an expert to test software. And for that let me take you back to a Galaxy Far Far Away in Time AND Space.
The beginnings&amp;#8230;
I went to school in Oroszlany, my home town in Hungary.</description>
			<content type="html"><![CDATA[<p>Hello Everybody.</p>

<p>Today I would like to show you what you need to become a Testing expert.</p>

<p>If you had noticed I deliberately left out the word Software. Why? Because becoming and expert in Testing Anything has the same root as becoming an expert to test software. And for that let me take you back to a Galaxy Far Far Away in Time AND Space.</p>

<p><strong>The beginnings&#8230;</strong></p>

<p>I went to school in Oroszlany, my home town in Hungary. My official Technical title would be Mechanical Testing Engineer. I had the luck that most things which were thought at that school and I liked were thought by people I liked too and were clever in their respective fields. Like Pneumatics, Metallurgy, Mechanics, Chemistry these were all really awesome fields. To this day I don&#8217;t know why I haven&#8217;t ended up in some lab testing the breaking point of metals and the capacity of various chemicals.</p>

<p>But ahh well.. I still remember some of the ISO standards we had to memorize. Like in Metallurgy the Charpy pendulum impact test which we loved so very much to perform. The ISO standard for that is ISO 148-1:2009. Now let me see if I still remember that correctly&#8230; Yes! I&#8217;ve still got it. So where am I going with this?</p>

<p><strong>Moving on&#8230;</strong></p>

<p>Back then we performed a lot of operations on various metals and a lot of chemical testings and the like. The most important part of every performed test was always to have insight. Insight in the structure of the metal. How it was made, how it was moulded and then shaped and heated and cooled and so on and so forth. We had to know EVERYTHING about the creation of this element that we had to test. Without that knowledge you could of corse still perform the test but you didn&#8217;t had any additional information why that test was useful or what it proved. Sure, you could have looked at the specification of the metal but that didn&#8217;t give you anything about the inner structure of it.</p>

<p>That was provided to you by the knowledge of the procedure that created it.</p>

<p>You get where I&#8217;m going with this&#8230;</p>

<p><strong>Insight</strong></p>

<p>So back to software testing&#8230; What is the single most important thing that gives you insight, that gives you the edge to be a professional? Knowing the development process. Knowing architecture. Knowing programming. Knowing the language and its capabilities and limitations.</p>

<p>Sure you can be a good manual Tester. Of course you can be an excellent Exploratory Tester. But look at the others. James Marcus Bach. Alan Richardson. Michael Bolton and I could go on&#8230; They all know programming. They all know it by heart and they could be exceptional programmers if they wanted to. They already know that in order to get very good at testing something you must have an insight on the subject matter. You can&#8217;t test it thoughtfully without knowing its limitations its rules that it obeys its exploits that you can use.</p>

<p><strong>Last words&#8230;</strong></p>

<p>So in order to excel at your craft of test you have to have insight of the subject of the test. You can still become good but you always have to aim high don&#8217;t you? A friend of mine reply to one of my tweets with a really good sentence:&#8221;&#8230;and then you realize that being the best in one implies being excellent in the other.&#8221;. Exactly. Because the two are interconnected. They aren&#8217;t actually two. It&#8217;s one. It&#8217;s called Engineering.</p>

<p>Have a nice day and as always,</p>

<p>Thanks for reading.</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>From Chaos There Shall Be Order</title>
			<link>https://skarlso.github.io/2013/01/04/from-chaos-there-shall-be-order/</link>
			<pubDate>Fri, 04 Jan 2013 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2013/01/04/from-chaos-there-shall-be-order/</guid>
			<description>Dear Readers.
Today I want to talk to you about something I discovered over years of working and experience.
Also something that I can see in the world repeating over and over again. Not just in Software business but also in History in Human nature in Physics and Systems.
So let&amp;#8217;s see what I&amp;#8217;m talking about.
What is Chaos?
Chaos is a state of utter confusion. Chaos is the opposite of order.</description>
			<content type="html"><![CDATA[<p>Dear Readers.</p>

<p>Today I want to talk to you about something I discovered over years of working and experience.</p>

<p>Also something that I can see in the world repeating over and over again. Not just in Software business but also in History in Human nature in Physics and Systems.</p>

<p>So let&#8217;s see what I&#8217;m talking about.</p>

<p><strong>What is Chaos?</strong></p>

<p>Chaos is a state of utter confusion. Chaos is the opposite of order. Chaos is when everybody does what they want without thinking about the consequences.</p>

<p>Does Chaos hurt? Of course it does. From Chaos there can be no production. From Chaos there can be no profit. From Chaos there can be no life.</p>

<p>Is that really true? It sort of is. Remember the Big Bang. Initially it is believed that there was order. The universe was a perfect gem with the four forces ( Gravity, Electromagnetic, Weak Nuclear and Strong Nuclear force ) united. And then a Higgs came around and made it BOOM! And so there was Chaos. And from Chaos, with a snowballs chance, there was life.</p>

<p><strong>So then why is Chaos bad?</strong></p>

<p>Companies usually don&#8217;t have the time or the money to wait for that Snowballs chance to come to flourish. So order is required for life to become great.</p>

<p>Take for example the Chinese Emperor Qin Shi Huang. He was the one uniting China. Sure, he killed a LOT of people. And China is oppressed every since. However he did introduce a lot of new concepts and reforms which wouldn&#8217;t have been possible in the Chaos. And today China is one of the leading nations if not The&#8230;</p>

<p>Before Emperor Qin begun his journey there were 9 different ways of writing down the world &#8216;sword&#8217; in chinese. This was unacceptable. After the Emperor succeeded he unified the writing and made communication easier.</p>

<p><strong>Striving for order</strong></p>

<p>People have always strived for order. For simplicity. For unification. For &#8216;one&#8217; instead of &#8216;many&#8217;. We have stories that say there is power in many. Physicist are continuously trying to unify the laws of physics in the beautiful little equations. Like Einsteins law of relativity. That small equations revolutionised the world. And it came from unification.</p>

<p><strong>So then what are the downsides of unification?</strong></p>

<p>Everything comes with a price of course. The unification bought oppression to China and the loss of the individuum. Fantasy and thoughts got all sacked. People become like Borgs. However the Country evolved immensely under one banner. But what does this all have to do with Testing?</p>

<p><strong>Applying Order</strong></p>

<p>Think about your company. Think about how your developers work. Does everybody use a different building platform? Does everybody use a different operating system? Do they run the same command to build your environment? Did you have any kind of problems because of that? I&#8217;m sure you did.</p>

<p>There are benefits of it. At least you will know if your application is working in a different environment. But do you want that? Is it worth it? After all we live in an age were there are numerous possibilities, environments, languages, command line options etc etc.</p>

<p>But think about it. Did the diversity bring you more profit or did it hurt you more? Which one is applicable for you? If your developers do not have the ability to properly govern them selfs then you need order. You need a unified language, you need a unified environment and unified processes Agile or not Agile. Your company wont be successful if you want to be Agile just because it is the Current Trend. You need to be pragmatic about it and applied were it is reasonable. There is nothing wrong in introducing a standard or a code review process or a coding guid line or some standards here and there if it HELPS.</p>

<p>There will be friction. People tend to resist change. There will be losses. But a unified company is a strong company. And when the new guy arrives? He wont have any kind of a problem installing your software and beginning working on it because he doesn&#8217;t have to go around and scoop information together from at least ten people and do it in an eleventh way at the end.</p>

<p><strong>Last Words</strong></p>

<p>So think about this. Is your company strong enough to uphold Chaos and make it flourish? Or is it a bunch of people doing whatever they think is right because of a sense of individuality which they don&#8217;t want to give up?</p>

<p>This is for you to decide.</p>

<p>And as always,</p>

<p>Thanks for reading.</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Methodologies, Thought Patterns, Lies</title>
			<link>https://skarlso.github.io/2012/12/12/methodologies-thought-patterns-lies/</link>
			<pubDate>Wed, 12 Dec 2012 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2012/12/12/methodologies-thought-patterns-lies/</guid>
			<description>Hello everybody.
Today I&amp;#8217;d like to write about something I discovered over the years of researching and following certain people and movements in Testing and Programming world.
Let me tell you that there are quite an amazing amount of stuff to be read out there. It&amp;#8217;s overwhelming.
Let&amp;#8217;s talk about Methodologies first.
There are many out there currently. In programming and in testing too. Many speak of ways how you should or should not do you work.</description>
			<content type="html"><![CDATA[<p>Hello everybody.</p>

<p>Today I&#8217;d like to write about something I discovered over the years of researching and following certain people and movements in Testing and Programming world.</p>

<p>Let me tell you that there are quite an amazing amount of stuff to be read out there. It&#8217;s overwhelming.</p>

<p>Let&#8217;s talk about <strong>Methodologies</strong> first.</p>

<p>There are many out there currently. In programming and in testing too. Many speak of ways how you should or should not do you work. Many of them tend to say that others aren&#8217;t the right way. However just as many tend to say that you can share your knowledge or you can only partially use that particular methodology because they realised that if they say others are crap they close themselves from evolving and they create a way of thinking that will say: Ohhh yeah? You can&#8217;t tell me what I should do! Who are you to say that that technique is wrong?</p>

<p>So they are in threat of alienating followers through this kind of behaviour. Just as commercials stopped saying they product is 100% awesome. Now they say <sup>8</sup>&frasl;<sub>10</sub> people find it awesome. This gives you the thought that surly they must not be lying if they admit that somebody thinks their product is crap.</p>

<p>How do you know then that a methodology is lying or is right or is &#8220;The way to go.&#8221; or that it is in fact a valid methodology?</p>

<p><em>By careful observation and deduction of facts while not leaving out of sight your own ignorance and view points / beliefs.</em></p>

<p>You have to address something by taking yourself a level above the problem domain. Carefully observe various situations and always approach it with scepticism. Guilty until proven otherwise.</p>

<p><strong>Thought Patterns</strong></p>

<p>If you do this for a while you will realize that most of the people out there are trying to sell their own crap in some way or another. They will put it into nice little packages will tell you neat little success stories and will make you believe in what they think is right. How do you <strong>shield</strong> yourself against that?</p>

<p>By&#8230; drum rolls&#8230; learning. You must make your mind to be a weapon of mass destruction. You must hone your skills of thinking you must hone your skills of analysing and understanding complex patterns. In the world there is nothing without a Pattern. Everything follows a greater scheme. You have to find it, grab hold of it and never let it go. You have to understand how people think and how you would exploit that. What there weaknesses are and why are they there in the first place?</p>

<p>When you achieve that you will truly begin to see how the world works and looks like under the hood. Try it on small things first. Try to follow the thought patterns of your coworker. Try to note down his mood changes based on days and current view point. Based on news and knowledge that you can attain from his life. After a while you will be able to predict certain moves and mood changes. You will begin to predict working capacity based on the sun is up or not or if it&#8217;s snowing or raining.</p>

<p>All these will bring you to a mind state where you can look beyond words. You will notice the patterns behind blog posts. You will notice the bullshit out of the documentation. You will notice when somebody is just writing for the sake of writing. You will notice&#8230;</p>

<p><strong>Lies</strong>.</p>

<p>You have to understand the One Truth in life. <strong>We all lie!</strong> And the we all lie about lying.</p>

<p>If you get that you will start to think more before you approche something. You read a methodology a description a &#8220;new found&#8221; idea and you realize the lies behind it if there are any big ones. You realize that he / they is / are only trying to be clever or only trying to be famous. They might have something interesting to say, not everything is a lie fortunately, but let&#8217;s face it. Most if it is.</p>

<p>You have to shield yourself against that. You have to shield yourself from biases, from lies, from cheats, from make beliefe and from posts that are only posts for the sake of posting.</p>

<p>What are the tell tail signs? Are there any? Of course there are..</p>

<p><strong>Big words, Punctuation and visually carefully constructed blog posts( usually tries to hide something between a facade of good looks), few practical examples, too much of: &#8220;&#8230;then this will definitely help you improve&#8230;&#8221;, too much talk without saying anything interesting&#8230;</strong> and so on ans so forth.</p>

<p><strong>End words</strong></p>

<p>Now think about these things for a second. Think about thinking. Think about how you can improve. Learn Lateral Thinking. General Systems Thinking. Logical Reasoning. Deductive Thinking. Inductive Thinking. Critical Thinking. And if you did all this&#8230; And you find yourself wondering around the world with an open eye seeing things for the first time. Noticing things for the first time. Watching, observing, thinking&#8230; Come back and read this post again whit THOSE things in mind. 😉</p>

<p>Thanks for reading.</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>TEAS: Testing Exploration Adventure Session</title>
			<link>https://skarlso.github.io/2012/12/01/teas-testing-exploration-adventure-session/</link>
			<pubDate>Sat, 01 Dec 2012 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2012/12/01/teas-testing-exploration-adventure-session/</guid>
			<description>Hello Everybody.
I&amp;#8217;d like to introduce T.E.A.S. to you. This is something I came up with yesterday which requires a lot of fantasy some good thinking planning and enthusiastic people. So, let&amp;#8217;s get started.
What is it about?
Testing Exploration Adventure Session is about&amp;#8230; Testing! There. No real surprise, eh? TEAS has it&amp;#8217;s roots in RPGs. Role Playing Games. If you ever heard or read about M.A.G.U.S. or the more known Dungeons &amp;amp; Dragons you will have a better understanding of the concept behind this phenomena.</description>
			<content type="html"><![CDATA[<p>Hello Everybody.</p>

<p>I&#8217;d like to introduce T.E.A.S. to you. This is something I came up with yesterday which requires a lot of fantasy some good thinking planning and enthusiastic people. So, let&#8217;s get started.</p>

<p><strong>What is it about?</strong></p>

<p>Testing Exploration Adventure Session is about&#8230; Testing! There. No real surprise, eh? TEAS has it&#8217;s roots in <strong>RPGs</strong>. Role Playing Games. If you ever heard or read about M.A.G.U.S. or the more known Dungeons &amp; Dragons you will have a better understanding of the concept behind this phenomena.</p>

<p><strong>Basics of RPG</strong></p>

<p>So now that we know that it has it&#8217;s rules in RPGs how will that be applied to testing and learning? Easy&#8230; Well it&#8217;s not that easy but after you grasp the concept it will get easy.</p>

<p>Just like in an RPG people get together first. There will be players in the group mostly and one or two Dungeon Masters. The task of the Dungeon Master is to facilitate the Game. The Game it self consists of a set of given rules and a World in which these rules are applied too. The Players are placed in this world which is created by the Dungeon Master. They are then given tasks that needs to be fulfilled in some particular way. That choice is of to the Players. The DM only facilitates. He is the Master of the given World. And plots against the players. He incorporates the Non Player Characters or NPCs of the World and tries hard to trifle the effort of the players.</p>

<p>This task can be anything from freeing a princes to twarthing a Magus from gaining Omnipotence or God like powers, to killing a Dragon for its treasures. And Players decide what to do and how to do it. The DM lists the options available. And as the Players move they get experience. They get stronger, faster, better, more intelligente.. They gain Levels.</p>

<p>Now&#8230; How does that fit into Testing?</p>

<p><strong>How does this fit into Testing?</strong></p>

<p>If you think about testing and the players what comes into mind? You have a product. And you have testers who explore this product in certain ways. As they go and find bugs ( kill mobs ) they get better and more efficient in finding other bugs based on the previous ones. Tasks get harder and harder as the most easy to find bugs are already taken care of. Elusive bugs will be harder to discover ( kill ).</p>

<p>And who is the Dungeon Master? I would say in this case it&#8217;s the Product Owner.</p>

<p><strong>How to begin</strong></p>

<p>So what now? You have your Testers ( Players ) and your Product Owner ( Dungeon Master ). What&#8217;s the next move? How does this all begin?</p>

<p>The PO present a software. He builds it. Finds it out. Puts together the pieces. Creates maps, road maps, site maps if it&#8217;s a server application then it&#8217;s structure maps and database diagrams and whatever helps him to present his product to the Testers. He slips and designs bugs into the system. Harder ones and also easier ones. He has to have a story in the application. Maybe it&#8217;s a web site that provides some service. There a lot of components that could go wrong.</p>

<p>The testers begin by asking questions&#8230; They begin as Level 1 Testers. They know nothing yet. They know no programming languages and no metrics and nothing. The goal is to have a fully covered product which they are confident enough to release. They can add the whole release process to the Game too. Depends on what the PO has in plan for that Session. Which could take a few hours or a whole day. Depends on the possibilities.</p>

<p><strong>How the Testing works and what&#8217;s a level?</strong></p>

<p>So as they go on and Test the product, which they have to do verbally, the PO knows what bugs they come across. As they find bugs they earn Experience points. The more they have the more they level up the more tools will be available to use. That can be given to chance. Throw a dice and select a tool from a pool of tools which are available to the whole Project.</p>

<p>You can have a Random factor to the bug finding process too. For example if a Tester tries to examine an area he throws a dice to determine his ability to find bugs. That ability comes from initial stats that can be defined at the begin of the game. If he succeeds he finds a bug and gets points for it. The tools can increase the ability to find bugs. For example automation can add bonus to finding repetitive bugs but can add minus points to fantasy / finding really nasty elusive bugs because you might concentrate less on details.</p>

<p>So a Level defines the Testers ability to find bugs. The higher level he gets the better his abilities will be to find bugs.</p>

<p>The PO defines the End Game. The Games goal could be to find x number of bugs. Or to release the product. Or to bash it, crack it, hack it destroy it. It could be that you have to sell it or demo it to some stack holders. The possibilities are Legion.</p>

<p><strong>How to go on&#8230;</strong></p>

<p>I know that this is all very confusing yet.. I&#8217;m still working out the individual rules, plays and numbers and Character sheets and such. Any thoughts and ideas are appreciated.</p>

<p>The merits of this game are many. It practices testing it practices the ability to explore a product only in fantasy. It helps who ever designs a product to get a glimpse into the world of designing.</p>

<p>Also the product might even be not from this time!! It can be a future product of some holographic nature! Or an Audio Visual interface that&#8217;s hooked into the users Brain. Or some other advanced future technology. How would you Test that???? How would you test a robot arm controlling algorithm. Or an Artificial Intelligence that controls tactical missiles overseas.</p>

<p>The possibilities are virtually limitless. It&#8217;s up to the Product Owners fantasy what he builds. It could be a whole new virtual World like the Holoroom in Star Trek. How would you Test THAT???</p>

<p>If you are interested in this endevour follow me for more details.</p>

<p>And as always,</p>

<p>Thanks for reading!</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>How to eliminate a parameter boom</title>
			<link>https://skarlso.github.io/2012/10/09/how-to-eliminate-a-parameter-boom/</link>
			<pubDate>Tue, 09 Oct 2012 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2012/10/09/how-to-eliminate-a-parameter-boom/</guid>
			<description>Hello folks.
Today I want to write about a little trick I learned.
If you are working with legacy code and you don&amp;#8217;t have the chance to eliminate core design problems, you can use this little pattern to help you out.
Problem
Problem is that you have a class that has a gazillion collaborators and at some point in time one of the clever devs thought it would be a cool idea to do dependancy injection via the constructor.</description>
			<content type="html"><![CDATA[<p>Hello folks.</p>

<p>Today I want to write about a little trick I learned.</p>

<p>If you are working with legacy code and you don&#8217;t have the chance to eliminate core design problems, you can use this little pattern to help you out.</p>

<p><strong>Problem</strong></p>

<p>Problem is that you have a class that has a gazillion collaborators and at some point in time one of the clever devs thought it would be a cool idea to do dependancy injection via the constructor. We all know that doing this makes the class immutable which is very good for a number of reasons. However it doesn&#8217;t provide a flexible solution if you want to leave out one or two collabs. For that your would have to create Adapter constructors and chain them upwards which would get very ugly very fast. While using JavaBeans getters and setters can leave your class in a harmful state like not at all or partially initialised.</p>

<p>So what&#8217;s a good solution then?</p>

<p><strong>Solution</strong></p>

<p>One possible solution would be to use some kind of initialisation framework like Springs @Autowired. But cluttering your classes with that isn&#8217;t really pretty either. But it&#8217;s A solution.</p>

<p>Another solution is the usage of a builder pattern.</p>

<p>Consider this class:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
2
3
4
5
6
7
8
9
</pre>
      </td>
      
      <td class="code">
        <pre class="java" style="font-family:monospace;">    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> VeryImportantService <span style="color: #009900;">&#123;</span>
&nbsp;
        <span style="color: #000000; font-weight: bold;">public</span> VeryImportantService<span style="color: #009900;">&#40;</span>CollabOne collabOne, CollabTwo collabTwo, CollabThree collabThree, CollabFour collabFour,
            CollabFive collabFive, CollabSix collabSix<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
            .
            .
            .
        <span style="color: #009900;">&#125;</span>
    <span style="color: #009900;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Don&#8217;t forget that we want these to be optional. I would like to leave out two or three here and there.</p>

<p>The builder let&#8217;s you do that. It looks something like this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
</pre>
      </td>
      
      <td class="code">
        <pre class="java" style="font-family:monospace;">    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> VeryImportantService <span style="color: #009900;">&#123;</span>
&nbsp;
        <span style="color: #000000; font-weight: bold;">private</span> CollabOne collabOne<span style="color: #339933;">;</span>
        <span style="color: #000000; font-weight: bold;">private</span> CollabTwo collabTwo<span style="color: #339933;">;</span>
        <span style="color: #000000; font-weight: bold;">private</span> CollabThree collabThree<span style="color: #339933;">;</span>
        <span style="color: #000000; font-weight: bold;">private</span> CollabFour collabFour<span style="color: #339933;">;</span>
        <span style="color: #000000; font-weight: bold;">private</span> CollabFive collabFive<span style="color: #339933;">;</span>
        <span style="color: #000000; font-weight: bold;">private</span> CollabSix collabSix<span style="color: #339933;">;</span> 
&nbsp;
&nbsp;
        <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">static</span> <span style="color: #000000; font-weight: bold;">class</span> Builder<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
            <span style="color: #000000; font-weight: bold;">private</span> CollabOne collabOne<span style="color: #339933;">;</span>
            <span style="color: #000000; font-weight: bold;">private</span> CollabTwo collabTwo<span style="color: #339933;">;</span>
            <span style="color: #000000; font-weight: bold;">private</span> CollabThree collabThree<span style="color: #339933;">;</span>
            <span style="color: #000000; font-weight: bold;">private</span> CollabFour collabFour<span style="color: #339933;">;</span>
            <span style="color: #000000; font-weight: bold;">private</span> CollabFive collabFive<span style="color: #339933;">;</span>
            <span style="color: #000000; font-weight: bold;">private</span> CollabSix collabSix<span style="color: #339933;">;</span> 
&nbsp;
            <span style="color: #000000; font-weight: bold;">public</span> Builder<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span><span style="color: #009900;">&#125;</span>
&nbsp;
            <span style="color: #000000; font-weight: bold;">public</span> Builder collabOne<span style="color: #009900;">&#40;</span>CollabOne value<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
                <span style="color: #000000; font-weight: bold;">this</span>.<span style="color: #006633;">collabOne</span> <span style="color: #339933;">=</span> value<span style="color: #339933;">;</span>
                <span style="color: #000000; font-weight: bold;">return</span> <span style="color: #000000; font-weight: bold;">this</span><span style="color: #339933;">;</span>
            <span style="color: #009900;">&#125;</span>
&nbsp;
            <span style="color: #000000; font-weight: bold;">public</span> Builder collabTwo<span style="color: #009900;">&#40;</span>CollabTwo value<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
                <span style="color: #000000; font-weight: bold;">this</span>.<span style="color: #006633;">collabTwo</span> <span style="color: #339933;">=</span> value<span style="color: #339933;">;</span>
                <span style="color: #000000; font-weight: bold;">return</span> <span style="color: #000000; font-weight: bold;">this</span><span style="color: #339933;">;</span>
            <span style="color: #009900;">&#125;</span>
&nbsp;
            .
            .
            .
&nbsp;
            <span style="color: #000000; font-weight: bold;">public</span> VeryImportantService build<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
                <span style="color: #000000; font-weight: bold;">return</span> <span style="color: #000000; font-weight: bold;">new</span> VeryImportantService<span style="color: #009900;">&#40;</span><span style="color: #000000; font-weight: bold;">this</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
            <span style="color: #009900;">&#125;</span>
&nbsp;
        <span style="color: #009900;">&#125;</span>
&nbsp;
        <span style="color: #666666; font-style: italic;">//private constructor</span>
        <span style="color: #000000; font-weight: bold;">private</span> VeryImportantService<span style="color: #009900;">&#40;</span>Builder builder<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
            <span style="color: #000000; font-weight: bold;">this</span>.<span style="color: #006633;">collabOne</span> <span style="color: #339933;">=</span> builder.<span style="color: #006633;">collabOne</span><span style="color: #339933;">;</span>
            <span style="color: #000000; font-weight: bold;">this</span>.<span style="color: #006633;">collabTwo</span> <span style="color: #339933;">=</span> builder.<span style="color: #006633;">collabTwo</span><span style="color: #339933;">;</span>
            .
            .
            .
        <span style="color: #009900;">&#125;</span>
    <span style="color: #009900;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Now&#8230; calling this would look something like this:</p>

<pre lang="JAVA" lines="1">VeryImportantService veryImportantService = new VeryImportantService.Builder().collabOne(someValueOne).collabTwo(someValueTwo).collabFive(someValueFive);
</pre>

<p>This enables you to be flexible HOWEVER!! I HATE train wrecks. So I would probably tweak it not to return things, but set them. Then you would end up calling then line by line. Which is still not the best but better then the alternative.</p>

<p><strong>End words</strong></p>

<p>So there you go. This is A solution not THE solution obviously. The best would be to NOT design such a monster at all. If you have any better ideas please feel free to share. I would gladly put them on my blog.</p>

<p>As always,</p>

<p>Thanks for reading,</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Coderetreat London</title>
			<link>https://skarlso.github.io/2012/09/30/89/</link>
			<pubDate>Sun, 30 Sep 2012 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2012/09/30/89/</guid>
			<description>Hello everybody.
So yesterday I was on a little gathering called Coderetreat.
If you look at the link you can read everything about it. If not, I&amp;#8217;ve provided a short description.
What it is about?
So what is codereatreat about? In short it&amp;#8217;s about programmers getting together and honing and practicing there skills in order to become more at what they are doing. It&amp;#8217;s a practice run with great people. TDDing one problem the whole day long with constantly applied constraints.</description>
			<content type="html"><![CDATA[<p>Hello everybody.</p>

<p>So yesterday I was on a little gathering called <a href="http://coderetreat.org/" title="Coderetreat" target="_blank">Coderetreat</a>.</p>

<p>If you look at the link you can read everything about it. If not, I&#8217;ve provided a short description.</p>

<p><strong>What it is about?</strong></p>

<p>So what is codereatreat about? In short it&#8217;s about programmers getting together and honing and practicing there skills in order to become more at what they are doing. It&#8217;s a practice run with great people. TDDing one problem the whole day long with constantly applied constraints.</p>

<p><strong>Problem domain</strong></p>

<p>Usually it&#8217;s some kind of coding kata. This sessions problem was <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life" target="_blank">Convey&#8217;s Game Of Life</a>. It&#8217;s a well known problem which you can&#8217;t really solve in the given amount of time if you do it right. But that&#8217;s not the goal anyways. The goal is the journey itself as was formulated by our facilitator.</p>

<p><strong>Process</strong></p>

<p>So what was going on there anyways? At 10:00AM the whole thing begun. Thirty developers set down, choose partners for TDD, and started to tackle the problem at hand. There were 6 sessions which lasted 45 minutes. After that a short retro and then a 10 minute break. On every session the code was deleted and rewrote from scratch. The first two sessions were introduction. And then the fun started with the constraints&#8230;</p>

<p><strong>Constraints</strong></p>

<p>The <strong>first</strong> one was that we were not allowed to use any loops when solving the problem. That was a tricky one. You had several options to go on but me not being a proper developer I couldn&#8217;t think of too many. Well that&#8217;s why I was there wasn&#8217;t I? To learn. I came up with the idea of linking the cells together so when one is invalidated it notifies all his neighbours through a call. But I wasn&#8217;t sure how to implement it. Also I choose a group which worked in ruby and it was a long time ago I wrote something in that language. It was a group effort but eventually we came up with a prototype that proved the first rule. I was happy!</p>

<p>The <strong>second</strong> one was <a href="http://coderetreat.org/facilitating/activities/ping-pong" target="_blank">TDD ping pong</a>. That was a really interesting experience for me. I grouped with a guy who had already experience in code retreat session so he didn&#8217;t spare me. In addition we did silent ping pong and it was HARD! It was really hard for me to formulate my thoughts JUST in tests. So that he can get what I want and understand and agree on the design at the same time. So we ended up throwing tests at each other with the thought: Here try to solve this you bastard! It was great fun indeed!</p>

<p>The <strong>third</strong> constraint was &#8216;No conditions.&#8217;. That was the hardest for me. Coming up with recursion for the first one and having a fight in the second was nothing compared to this. Conditions are a fundamental structure of programming. It&#8217;s logic basically. You can have the cells as objects and then a world of cells linked together but you still have to somehow decide if they live or die based on neighbour count.</p>

<p>So how do you avert it? I worked with a guy in this one who was good at low level thinking. He came up with the solution of using expressions as returns for the status:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
</pre>
      </td>
      
      <td class="code">
        <pre class="java" style="font-family:monospace;">    <span style="color: #000000; font-weight: bold;">return</span> <span style="color: #009900;">&#40;</span><span style="color: #339933;">!</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#40;</span>neighbours <span style="color: #339933;">&lt;</span> <span style="color: #cc66cc;">2</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">||</span> <span style="color: #009900;">&#40;</span>neighbours <span style="color: #339933;">&gt;</span> <span style="color: #cc66cc;">3</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">||</span> <span style="color: #009900;">&#40;</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#40;</span>neighbours <span style="color: #339933;">==</span> <span style="color: #cc66cc;">2</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">||</span> <span style="color: #009900;">&#40;</span>neighbours <span style="color: #339933;">==</span> <span style="color: #cc66cc;">3</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>It&#8217;s brilliant and easy if you see it like this but I was so used to thinking in higher structure and so used to the features given by the language, that I couldn&#8217;t have come up with this in the given amount of time. So he had the idea and I coded it down. And this is actually working&#8230; It returns true or false based on the neighbour count. And we could use that return value to change the state of the cell afterwords.</p>

<p>The <strong>fourth</strong> and last task was that everybody stand up and finish someones else code. Practicing how to handle &#8220;legacy&#8221; code and a free for all session to finish the job.</p>

<p><strong>What I learned?</strong></p>

<p>Basically I learned that I really like code. I like writing it, thinking about it, solving problems and creating good, clean, clever solutions. I might be a tester by profession and I love being a tester, but there is a coder somewhere in here too who enjoyed every bit of that session yesterday. Of course this is not the only thing I took from that. I learned good technics. I learned that I&#8217;m in a box and I need to think outside of it too. I constraint myself by depending on the language I use. And that I need to keep up practicing alas I loose my ability to solve complex logical problems by coding.</p>

<p>A coding kata a day helps keeping the bugs away. 😉</p>

<p><strong>End thoughts</strong></p>

<p>All in all the day was absolutely awesome. Great lunch and environment was provided by the host <a href="http://www.national-lottery.co.uk/" target="_blank">Camelot</a> and our fearless leader who walked around all day helping out and coordinating the whole thing <a href="www.meza.hu" target="_blank">Marton &#8216;Meza&#8217; Meszaros</a>. A big thank you and a lot of respect for doing it all day long.</p>

<p>Unfortunately because of my broken ankle I couldn&#8217;t stay for the drinks but if you ever get to a session like this I strongly recommend staying the whole day AND the night. And not just &#8217;till you stuffed your belly with free food and booze. 😉</p>

<p>And the top of the cherry is a great time laps of the whole day which can be seen here: <a href="http://www.youtube.com/watch?v=qBvMBAOQD5U" target="_blank">Coderetreat 29.09.12</a>. Enjoy as we had!</p>

<p>As always,</p>

<p>Thanks for reading.</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>What my brain is up to the whole day…</title>
			<link>https://skarlso.github.io/2012/09/20/what-my-brain-is-up-to-the-whole-day/</link>
			<pubDate>Thu, 20 Sep 2012 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2012/09/20/what-my-brain-is-up-to-the-whole-day/</guid>
			<description>Hello folks.
Here is a little graphic I made to show what my brain is up to the whole day long&amp;#8230; Excuse me for the lack of my colouring skills&amp;#8230; Enjoy
Thanks for reading!
Gergely.</description>
			<content type="html"><![CDATA[<p>Hello folks.</p>

<p>Here is a little graphic I made to show what my brain is up to the whole day long&#8230; Excuse me for the lack of my colouring skills&#8230; Enjoy</p>

<p><img src="http://dl.dropbox.com/u/7604030/barinColored.jpg" alt="Brain" /></p>

<p>Thanks for reading!</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Learning programming with a visual mind</title>
			<link>https://skarlso.github.io/2012/09/09/learning-programming-with-a-visual-mind/</link>
			<pubDate>Sun, 09 Sep 2012 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2012/09/09/learning-programming-with-a-visual-mind/</guid>
			<description>Hi folks.
Today I want to write to you about learning something with a visual mind. There are a gazillion posts out there that tell you how to learn something with a visual mind. However, there are only a few actually describing how to learn something as complicated and logical as programming. How do you draw up a function? How do you draw up a cycle or a structure?
Actually these are really easy.</description>
			<content type="html"><![CDATA[<p>Hi folks.</p>

<p>Today I want to write to you about <strong>learning</strong> something with a <strong>visual mind</strong>. There are a gazillion posts out there that tell you how to learn something with a visual mind. However, there are only a few <strong>actually describing</strong> how to learn something as complicated and logical as programming. How do you draw up a function? How do you draw up a cycle or a structure?</p>

<p>Actually these are really <strong>easy</strong>. A <strong>cycle</strong>? No problem. What&#8217;s a <strong>circle</strong> if not a cycle? <strong>Structure</strong>? This should be an easy one. You can draw a whole <strong>building</strong> and then place <strong>building blocks</strong> into it.</p>

<p>I have a very <strong>strong visual mind</strong>. I don&#8217;t remember names good for example however I remember every and each <strong>face very distinct</strong>. So if you come up to me, don&#8217;t be surprised if I don&#8217;t remember your name. So as I grew older and I took learning into my own hand I realised that there are <strong>techniques</strong> out there that I could have used to <strong>boost my learning</strong> in the early stages of my life too.</p>

<p>But there is no such thing as to be late for something. <strong>Life is constant learning</strong>. So don&#8217;t hesitate to start learning something.</p>

<p>I <strong>started</strong> to learn <strong>Scala</strong> for example and I was <strong>brainstorming</strong> as how to <strong>draw</strong> up a good map for some programming practices. <strong>Brainstorming</strong> can help you coming up with something that can <strong>display your idea</strong>. Try to brainstorm <strong>in words only</strong> rather then sentences.</p>

<p>And I came up with these two for now, with the <strong>play framework</strong> in the middle.</p>

<p><img src="http://dl.dropbox.com/u/7604030/structure.png" alt="Structure" /></p>

<p><img src="http://dl.dropbox.com/u/7604030/route.jpg" alt="Route" /></p>

<p>Now some of you <strong>might say</strong> this <strong>took long</strong> and is <strong>unnecessary</strong>. The information displayed can be <strong>remembered easily</strong> and that these drawings took longer then writing up two or three words. Now let&#8217;s see&#8230;</p>

<p>These drawing, which are really <strong>rough</strong> actually, took me about <strong>10 minutes</strong> while reading and learning and what not. Yes they take longer. But if I write down <strong>two words</strong> how long will I remember them? I already <strong>forgot after I wrote it down</strong>!</p>

<p>This drawing with the griffon legs? <strong>Stuck there forever</strong>. ( Don&#8217;t ask about the legs.. don&#8217;t know where they came from&#8230; )</p>

<p>So visualisation goes a long way in your brain if you are wired that way. Remember that there is NOTHING that you can&#8217;t display with a little bit of creativity and graphics.</p>

<p>Ohh and btw&#8230; Chances are that you only read the words in <strong>BOLD</strong> because your mind draws your attention to parts that stand out. And also you want to get over reading this article fast and you appreciate if key elements are taken out for you without the unimportant gibberish in between. 😉</p>

<p>Thanks for reading!</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>TDD and Game of Life</title>
			<link>https://skarlso.github.io/2012/07/12/tdd-and-game-of-life/</link>
			<pubDate>Thu, 12 Jul 2012 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2012/07/12/tdd-and-game-of-life/</guid>
			<description>So today at 8-12PM I had a great session with two friends of mine. It was awesome. Like a mini code retreat.
We set down in a musky bar, drank wine and beer and cider, and decided to practice some TDD with the well known problem of Conway&amp;#8217;s Game of Life. This challenge is really interesting. I never done it before, ever. So it was a really good practice for me.</description>
			<content type="html"><![CDATA[<p>So today at 8-12PM I had a great session with two friends of mine. It was awesome. Like a mini code retreat.</p>

<p>We set down in a musky bar, drank wine and beer and cider, and decided to practice some TDD with the well known problem of <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life" target="_blank">Conway&#8217;s Game of Life</a>. This challenge is really interesting. I never done it before, ever. So it was a really good practice for me.</p>

<p>So&#8230;</p>

<p><strong>In the beginning there was Test</strong></p>

<p>One of my friends and I started out by developing the implementation for the game while the second one was mentoring and couching us. As with any problem I&#8217;m facing now days, I started with writing a failing test first. I didn&#8217;t write any kind of production code yet. I wrote a test testing for having the class called game of life.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
2
3
4
</pre>
      </td>
      
      <td class="code">
        <pre class="java" style="font-family:monospace;">    @Test
    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">void</span> shouldHaveClassForGameOfLife<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
        GameOfLife gameOfLife <span style="color: #339933;">=</span> <span style="color: #000000; font-weight: bold;">new</span> GameOfLife<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>This wasn&#8217;t compiling of course because I didn&#8217;t have any kind of GameOfLife class. But intelliJ is so intelligent that I simply pressed Alt+Enter and created the class immediately. The class didn&#8217;t have anything in it, but I already had a passing test.</p>

<p>So this went on and on and I created one test after another while my other coding friend did the same.</p>

<p><strong>Now the amazing part</strong></p>

<p>I begun working on the Grid. A simple octagonal coordinating system. This was represented in the beginning with a simple two dimensional array with Cells in it.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
</pre>
      </td>
      
      <td class="code">
        <pre class="java" style="font-family:monospace;">    Cells<span style="color: #009900;">&#91;</span><span style="color: #009900;">&#93;</span><span style="color: #009900;">&#91;</span><span style="color: #009900;">&#93;</span> cells <span style="color: #339933;">=</span> <span style="color: #000000; font-weight: bold;">new</span> Cells<span style="color: #009900;">&#91;</span><span style="color: #cc66cc;">50</span><span style="color: #009900;">&#93;</span><span style="color: #009900;">&#91;</span><span style="color: #cc66cc;">50</span><span style="color: #009900;">&#93;</span><span style="color: #339933;">;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>This of course wasn&#8217;t dynamic. I didn&#8217;t care about that yet. I had my grid of cells. These cells were initially all dead.</p>

<p>Now, the interesting part is that as I developed my Grid finding out the Cells neighbours and counting them, my friend worked on the Cells themselves and getting their next state and killing them based on the rules.</p>

<p>We never talked to each other, didn&#8217;t agree on roles or directions or anything. And even so at the and&#8230; We were at a stage where we met in the middle and could merge our codes! Our little game of life evolved with a push of a button. ( Three actually. )</p>

<p>This was simply amazing. Without ever talking about the direction we want to go we created a working code base that could be merged!</p>

<p><strong>It just works</strong></p>

<p>Before TDD I would have tackled this problem much differently. And it would have taken me much more time too. This was like an hour or so.</p>

<p>TDD helped me break down the job into small, manageable tasks. I created and deleted and rewrote tests as I went on and on and developed the algorithm for my Grid and Cell. And eventually the problem slowly unfolded itself right before my eyes. I began to see the connections. I began to see the beauty. I began to understand! This is something I rarely enjoyed previously without using TDD.</p>

<p><strong>Summary</strong></p>

<p>I recommend for you guys to do the same. Just sit down, find a problem, find a coding kata and just do it with TDD. With PROPER TDD.</p>

<p>Here are some good sites for katas and problems:</p>

<p><a href="http://codekata.pragprog.com/" target="_blank"><a href="http://codekata.pragprog.com/">http://codekata.pragprog.com/</a></a></p>

<p><a href="http://www.spoj.pl/problems/classical/" target="_blank"><a href="http://www.spoj.pl/problems/classical/">http://www.spoj.pl/problems/classical/</a></a></p>

<p>Just select a problem and then start cracking on it. Do this every time you have some free time. Like a martial art trainee doing basic exercises and you will get better at problem solving and at TDD too. I promise.</p>

<p>Happy coding and good night!</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Journey into an unknown system</title>
			<link>https://skarlso.github.io/2012/06/28/journey-into-an-unknown-system/</link>
			<pubDate>Thu, 28 Jun 2012 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2012/06/28/journey-into-an-unknown-system/</guid>
			<description>Aka, what you can do if you are facing and unknown framework / system you have to work with for quite some time.
Get intimate
You are going to live with this system for a while. The best thing you can do is getting to know it better. You have to get it to know like you would approche a fine lady. You have to ask it questions look after it, how it feels how its day was.</description>
			<content type="html"><![CDATA[<p>Aka, what you can do if you are facing and unknown framework / system you have to work with for quite some time.</p>

<p><strong>Get intimate</strong></p>

<p>You are going to live with this system for a while. The best thing you can do is getting to know it better. You have to get it to know like you would approche a fine lady. You have to ask it questions look after it, how it feels how its day was. Have to listen to what it tells you, you have to read its diary if necessary.</p>

<p>After a while you will be in a relationship with it. Now it&#8217;s time to look out for it. Nurture it. Grow it. Care for it. A good piece of software is like a happy lady. It will great you every morning and it will say good by when you go home.</p>

<p>So how do you get to know a new system better.</p>

<p><strong>Debug</strong></p>

<p>In a new system Debugging is like a good old friend who tells you a story about the lady you want to conquer. You find a workflow and execute it in debug mode and follow each and every step that it makes. This way, you will see how each package and class is coupled together. You will be able to see the connections between modules and between calls and functions. It is a good way to see the inner workings.</p>

<p><strong>Ask her girlfriend</strong></p>

<p>Nothing knows more of the system at hand as its best friend. And a good systems best friends are the tests. Take a look at the unit tests, take a look at the integration tests and the acceptance tests. These will tell you more about the system and its actual working strategy than any documentation you can put your hands on. The tests are the closest and next best thing after the real deal.</p>

<p><strong>Conclusion</strong></p>

<p>It&#8217;s really not that hard to get to know a large system better. Follow a main process with debug, look at the tests, talk to developers, and read some documentation about it. By the time you are done you will be best of friends and you will learn how to handle her the way she likes it. 😉</p>

<p>Hope that helped.</p>

<p>Cheers,</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Solution to Wrap Kata</title>
			<link>https://skarlso.github.io/2012/06/26/solution-to-wrap-kata/</link>
			<pubDate>Tue, 26 Jun 2012 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2012/06/26/solution-to-wrap-kata/</guid>
			<description>My solution to the String Wrap Kata. The goal is to have it wrap a text on a given column width.
It is not the best solution but this is my first try. I did it with TDD so there were tests first, which I&amp;#8217;m not going to copy in..
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37   &amp;nbsp; public class WrapKata &amp;#123; &amp;nbsp; public String wrap&amp;#40;String input, int columnSize&amp;#41; &amp;#123; &amp;nbsp; if &amp;#40;input.</description>
			<content type="html"><![CDATA[<p>My solution to the String Wrap Kata. The goal is to have it wrap a text on a given column width.</p>

<p>It is not the best solution but this is my first try. I did it with TDD so there were tests first, which I&#8217;m not going to copy in..</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre>
      </td>
      
      <td class="code">
        <pre class="java" style="font-family:monospace;">&nbsp;
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> WrapKata <span style="color: #009900;">&#123;</span>
&nbsp;
    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #003399;">String</span> wrap<span style="color: #009900;">&#40;</span><span style="color: #003399;">String</span> input, <span style="color: #000066; font-weight: bold;">int</span> columnSize<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
&nbsp;
        <span style="color: #000000; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>input.<span style="color: #006633;">length</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">&lt;=</span> columnSize<span style="color: #009900;">&#41;</span>
            <span style="color: #000000; font-weight: bold;">return</span> input<span style="color: #339933;">;</span>
        <span style="color: #000000; font-weight: bold;">else</span> <span style="color: #009900;">&#123;</span>
            <span style="color: #000000; font-weight: bold;">return</span> wrapLines<span style="color: #009900;">&#40;</span>input, columnSize<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #009900;">&#125;</span>
    <span style="color: #009900;">&#125;</span>
&nbsp;
    <span style="color: #000000; font-weight: bold;">private</span> <span style="color: #003399;">String</span> wrapLines<span style="color: #009900;">&#40;</span><span style="color: #003399;">String</span> input, <span style="color: #000066; font-weight: bold;">int</span> columnSize<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
        <span style="color: #000066; font-weight: bold;">int</span> breakPoint <span style="color: #339933;">=</span> getBreakPoint<span style="color: #009900;">&#40;</span>input, columnSize<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
        <span style="color: #003399;">String</span> head <span style="color: #339933;">=</span> createHead<span style="color: #009900;">&#40;</span>input, breakPoint<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #003399;">String</span> tail <span style="color: #339933;">=</span> createTail<span style="color: #009900;">&#40;</span>input, breakPoint<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
        <span style="color: #000000; font-weight: bold;">return</span> head <span style="color: #339933;">+=</span> <span style="color: #0000ff;">"<span style="color: #000099; font-weight: bold;">\n</span>"</span> <span style="color: #339933;">+</span> wrap<span style="color: #009900;">&#40;</span>tail, columnSize<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
&nbsp;
    <span style="color: #000000; font-weight: bold;">private</span> <span style="color: #003399;">String</span> createTail<span style="color: #009900;">&#40;</span><span style="color: #003399;">String</span> input, <span style="color: #000066; font-weight: bold;">int</span> breakPoint<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
        <span style="color: #000000; font-weight: bold;">return</span> input.<span style="color: #006633;">substring</span><span style="color: #009900;">&#40;</span>breakPoint<span style="color: #009900;">&#41;</span>.<span style="color: #006633;">trim</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
&nbsp;
    <span style="color: #000000; font-weight: bold;">private</span> <span style="color: #003399;">String</span> createHead<span style="color: #009900;">&#40;</span><span style="color: #003399;">String</span> input, <span style="color: #000066; font-weight: bold;">int</span> breakPoint<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
        <span style="color: #000000; font-weight: bold;">return</span> input.<span style="color: #006633;">substring</span><span style="color: #009900;">&#40;</span><span style="color: #cc66cc;"></span>, breakPoint<span style="color: #009900;">&#41;</span>.<span style="color: #006633;">trim</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
&nbsp;
    <span style="color: #000000; font-weight: bold;">private</span> <span style="color: #000066; font-weight: bold;">int</span> getBreakPoint<span style="color: #009900;">&#40;</span><span style="color: #003399;">String</span> input, <span style="color: #000066; font-weight: bold;">int</span> columnSize<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
        <span style="color: #000000; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>input.<span style="color: #006633;">contains</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">" "</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
            <span style="color: #000000; font-weight: bold;">return</span> input.<span style="color: #006633;">lastIndexOf</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">' '</span>, columnSize<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #009900;">&#125;</span> <span style="color: #000000; font-weight: bold;">else</span> <span style="color: #009900;">&#123;</span>
            <span style="color: #000000; font-weight: bold;">return</span> columnSize<span style="color: #339933;">;</span>
        <span style="color: #009900;">&#125;</span>
    <span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>
]]></content>
		</item>
		
		<item>
			<title>How to read a professional book for slow learners</title>
			<link>https://skarlso.github.io/2012/06/18/how-to-read-a-professional-book-for-slow-learners/</link>
			<pubDate>Mon, 18 Jun 2012 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2012/06/18/how-to-read-a-professional-book-for-slow-learners/</guid>
			<description>Hi everybody.
Today I want to talk to you about.. Well.. How to read a professional book for slow learners without too much waste of time.
Let us start at the&amp;#8230; well&amp;#8230; the beginning. How do you normally read a book if you want to memorize it properly. You read it once and then re read the whole thing again until it gets in your head? Or do you have another strategy?</description>
			<content type="html"><![CDATA[<p>Hi everybody.</p>

<p>Today I want to talk to you about.. Well.. How to read a professional book for slow learners without too much waste of time.</p>

<p>Let us start at the&#8230; well&#8230; the beginning. How do you normally read a book if you want to memorize it properly. You read it once and then re read the whole thing again until it gets in your head? Or do you have another strategy?</p>

<p>Let me share you mine.</p>

<p>There are a few common practices that you can apply to better your chances of retaining the information that you get out of the pages you read.</p>

<p><strong>Re-reading the right way</strong></p>

<p>Re-reading is good. You definitely can apply that but do it the right way. As you read a chapter, define small chunks of paragraphs or entities or even the whole chapter for re-reading. That means&#8230; Read an entity fully. Don&#8217;t stop at what you don&#8217;t understand don&#8217;t bother with it right now just read it. You will get a general overview of what&#8217;s going on in that segment.</p>

<p>Once done, re-read the whole entity again, but this time pay attention to the details. This time look up what you don&#8217;t understand. Go with the flow and once you&#8217;re done go to the next section. This is not all however..</p>

<p><strong>Note taking</strong></p>

<p>As you go and re-read the entity you might want to consider that it is a good time for taking notes. Note taking is really something that you have to learn. Proper note taking that is. Notes that just repeat what ever is in the book or whatever you are reading currently is bad. That is just coping, that wont help you. You have to grasp the fundamentals. You have to take out what is important and forget the rest. You have to apply SMART objectives, little annotations, small sentences WITH YOUR OWN WORDS that will lead you to better understanding of the stuff that you are reading.</p>

<p>There are several methods that you can use for note taking, my favourite is <a href="http://en.wikipedia.org/wiki/Mind_map" title="MInd Mapping" target="_blank">Mind Mapping</a>.</p>

<p><strong>Writing up questions</strong></p>

<p>One other very good practice is simply defining your own questions. Look at the title of a chapter, maybe a small summary of the chapter if that&#8217;s available. Try to define a set of questions that you want to get out of that chapter. Try to write down at least 3-4 questions that you think will be answered in that segment.</p>

<p>Read the segment. And now try to answer your Own questions without peaking. If you can&#8217;t you either have to write down some other questions because it wasn&#8217;t answered in that chapter. Or if it was answered but you still can&#8217;t answer it from the top of your head that means that you didn&#8217;t understood that chapter and that you have to re-read that part. If you can answer it, write it down so that it will stuck with you.</p>

<p><strong>Linking information</strong></p>

<p>Your brain is mostly associative. It works the best if it can link information to old information which is already in your head. Mind mapping helps with that. Mind mapping helps identifying old information segments in your brain. Try to find some common ground with the information you have to learn now and the one you already have. Unless your brain works differently you will better remember: &#8220;Two friends went to the lake fishing at night and they caught three fishes.&#8221;; then 23.</p>

<p><strong>Conclusion</strong></p>

<p>Generally speaking re-reading is a good practice but using it alone will sometimes not get you what you want. Re-reading the whole book isn&#8217;t going to help. Writing notes helps, but use your own wording, formatting, DON&#8217;T COPY!</p>

<p>I hope that help a bit to you guys out there who don&#8217;t have a photographic memory.</p>

<p>Cheers,</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Don’t throw Exception</title>
			<link>https://skarlso.github.io/2012/06/13/dont-throw-exception/</link>
			<pubDate>Wed, 13 Jun 2012 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2012/06/13/dont-throw-exception/</guid>
			<description>Hi.
Today I want to talk about a common problem in many frameworks I encountered over the course of my carrier as a Java dev / automation engineer, whatnot.
Throwing Exceptions. That is in your method you have something like this:
  1   public void insertMethodNameHere&amp;#40;String param&amp;#41; throws Exception &amp;#123;&amp;#125;     This is bad. And I will tell you in short forms why.
Hides exceptions</description>
			<content type="html"><![CDATA[<p>Hi.</p>

<p>Today I want to talk about a common problem in many frameworks I encountered over the course of my carrier as a Java dev / automation engineer, whatnot.</p>

<p>Throwing Exceptions. That is in your method you have something like this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
</pre>
      </td>
      
      <td class="code">
        <pre class="java" style="font-family:monospace;">    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">void</span> insertMethodNameHere<span style="color: #009900;">&#40;</span><span style="color: #003399;">String</span> param<span style="color: #009900;">&#41;</span> <span style="color: #000000; font-weight: bold;">throws</span> <span style="color: #003399;">Exception</span> <span style="color: #009900;">&#123;</span><span style="color: #009900;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>This is bad. And I will tell you in short forms why.</p>

<p><strong>Hides exceptions</strong></p>

<p>This one should be obvious. When a method throws exception you can never be sure what kind of exceptions it handles. It will hide what problems it can encounter. It will hide possible threats and will generally mean nothing to you when it fails.</p>

<p><strong>Hides functionality</strong></p>

<p>One of the things you can do will come up with a method that throws at least six exception. Well guess what&#8230; That will tell you that the method has DESIGN ISSUES! The first rule of software development is that a method should do only one thing! Well if it throws six exceptions chances are it does more then one&#8230;</p>

<p><strong>Hard to debug</strong></p>

<p>You wont have a meaning full exception if it fails immediately. You will have to go through lines of codes and stack traces to find out what the hell happened and what threw what kind of exception where. That is just simply stupid. Why give yourself a hard time?</p>

<p><strong>So what to do instead?</strong></p>

<p><strong>Meaning full exceptions</strong></p>

<p>If you have to throw&#8230; Throw meaning full exceptions. Things like: LoginFailedExpcetion(String username, String password); In the message write:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
</pre>
      </td>
      
      <td class="code">
        <pre class="java" style="font-family:monospace;">    <span style="color: #003399;">String</span>.<span style="color: #006633;">format</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">"Failed login with username: %s; password: %s"</span>, username, password<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>When this fails you will immediately know what happened without miles of stack trace to run through.</p>

<p>When you go ahead and start to re-factor your code to handle exceptions properly you will end up with methods throwing six &#8211; seven exceptions. Don&#8217;t be afraid. That means that you finally are able to see that your code is doing many things that it is not supposed to do. Start by extracting bits and pieces of your code into smaller segments that throw a max of two exceptions. Write unit tests around the function and start running them as you re-factor. See what fails so you can track your changes as you go.</p>

<p>A general good advice is that your method should throw a maximum of <strong>TWO</strong> exception. If you have more, you are doing something more then you should. Refactor / Extract that bit into a smaller function.</p>

<p><strong>Handling exceptions</strong></p>

<p>What you really want to do is create a Layer that you will be using to capture and handle exceptions. You can than take that layer and hide it deep deep into your framework so that you never ever see it again. Just like with switch.</p>

<p>As you go you will have layers of layers of exceptions. You will have features that depend on each other and talk to each other in some ways.</p>

<p>Meaning full exception will help you find out what broke why. For example you have Login that throws a Login exception. On top of that you have an order that handles OrderFailedException. You will have an easy time seeing that the order failed because the login failed. Because you handled your login exception in the Login Layer. And you handled your OrderException in the order layer. There are no mixes. Keep it clean and keep it where it belongs.</p>

<p><strong>Conclusion</strong></p>

<p>Exceptions are part of Java just like String or int or long is. You use these wisely so why don&#8217;t you apply that same logic to your Exception handling? Don&#8217;t be afraid of having 20-25 exception classes. Group them together or leave them in their respective packages or have them in a deep layer but HAVE THEM. They WILL save time and time is always money. So they will save you money in the end when an error occurs. And errors will always occur.</p>

<p>Thanks for reading,</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>How to write a professional blog</title>
			<link>https://skarlso.github.io/2012/06/13/how-to-write-a-professional-blog/</link>
			<pubDate>Wed, 13 Jun 2012 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2012/06/13/how-to-write-a-professional-blog/</guid>
			<description>Hi folks.
I want to write a little bit about writing a professional blog.
Early steps
Let&amp;#8217;s first talk about what you understand about professional blog. It&amp;#8217;s either a semi professional one, that mixes life with professionalism, like chess, programming, testing, painting, drawing, engineering whatever your profession is. Or it can be a purely professional one without your life getting involved in it.
Either way you have to decide at the beginning.</description>
			<content type="html"><![CDATA[<p>Hi folks.</p>

<p>I want to write a little bit about writing a professional blog.</p>

<p><strong>Early steps</strong></p>

<p>Let&#8217;s first talk about what you understand about professional blog. It&#8217;s either a semi professional one, that mixes life with professionalism, like chess, programming, testing, painting, drawing, engineering whatever your profession is. Or it can be a purely professional one without your life getting involved in it.</p>

<p>Either way you have to decide at the beginning. Why? Because that&#8217;s the kind of people you will attract. If you want to attract people from your profession then you have to decide that you will write plenty of your profession into your blog. If you want to attract hobbists more then you write about your profession AND daily life or other situations that are essentially irrelevant. Of course you can get both in both versions but the numbers will be different.</p>

<p><strong>Commiting</strong></p>

<p>A professional blog is a commitment. Start one only when you know you can &#8220;finish&#8221; it. It is a constant commitment that you HAVE to do even if you are sick, lazy, don&#8217;t have time etc, etc.</p>

<p>I know the excuses because I made them myself a couple of times too, like: I don&#8217;t have time. I write only when I want to. I write for myself, I don&#8217;t care about people. I don&#8217;t have an idea right now. I have better things to do. I don&#8217;t feel like writing.</p>

<p>And so on and so fort&#8230; Truth is people&#8230; These are usually bull.</p>

<p><strong>1.</strong> You have time. Whenever you TRULY want to write you will make the 20 minutes to at least write a small post. Why? Because this is a professional blog. You WANT to get noticed. You WANT to help people. You started it because you wanted to make a difference. You wanted people to know you to praise you to acknowledge you. Guess what&#8230; If you are not writing anything, it wont happen. There are people out there with 4 children and a wife and he DOES find the time to write a blog.</p>

<p><strong>2.</strong> That would be true if you wouldn&#8217;t be committed to your blog. Don&#8217;t forget, this is a professional blog. This is something that you are writing to make people recognize you. Blogging is about discipline. You have to set aside some time, like 30 minutes / 1 hour to write something in your blog. Why 1 hour? Because of the research that you have to do before hand. I talk about that later. Anyways. This is a commitment. If you don&#8217;t take it seriously, then don&#8217;t write it. But then don&#8217;t wait for people getting to know you, because they wont.</p>

<p><strong>3.</strong> This is just plain bull. If you write for yourself make your blog private and be done with it. &#8216;nough said.</p>

<p><strong>4.</strong> Now this is something that we all face. In programming, in engineering in whatever your profession is, you will have a point in life, several actually, in which you don&#8217;t know what to write about. That is true. It&#8217;s common and it&#8217;s called writers block. There are several ways of over coming that you can Google it. But don&#8217;t forget this is a professional blog. Try to read a couple of others. Try to merit from real life, try to sit down and think quietly for a couple of minutes. Meditate, try to see connections where you didn&#8217;t look before. Like building a robot for helping you quit smoking. How? Easy. Smoke detector. When he detects smoke comes out and sprinkles you with water. Or, since this is a testing blog, if you ran out of ideas what you want to write about testing, try this: Read a few magazines about programming, about real life scenarios, about hostage situations, about catastrophes, about hardware failures, about how your neighbor failed to pay his rent. These ALL are great sources for identifying testing opportunities and drawing connections with the software world. What I really found to be a good practice is going around having a notebook in your pocket and the moment I&#8217;m hit with an idea I will write it into that notebook. I don&#8217;t like using a phone, or other kind of electronic device for that. Why? Because the action of taking out my book, getting my pencil and actually writing something down physically makes me remember it better. But hey&#8230; Whatever suits you best. Just do it.</p>

<p>I could go on and on to from where to merit ideas for a blog, it could even be a whole separate post but I will leave somethings to figure out for yourself.</p>

<p><strong>5.</strong> This correlates to directly to line 1 and line 6. If you have a writers block or you are just plain lazy or you don&#8217;t want to write at all, you will say lines like these.</p>

<p><strong>6.</strong> See <strong>5.</strong></p>

<p><strong>Conclusion</strong></p>

<p>Writing a professional blog is about commitment and discipline. Like chess, like drawing, like your own profession it needs time, it needs nourishment it needs petting, and nurturing and loving and hating and practicing. You started this blog to reach something. You started it for yourself so you could track your progress and knowledge. You started it because writing down ideas makes you remember them better or it will make more sense to you. You started because you want to get acknowledged. You started because you want to share your experience with beginners. You started because you want all of the above.</p>

<p>Then do it. Don&#8217;t look for excuses. Writing a GOOD professional blog is hard. It will teach you much. It will make you more disciplined. It will increase your will power. It will increase your understanding of your craft. It will help other beginners who seek advice. It will help to make a name for yourself. It will help in an interview. It will generally be useful when ever you want to record a major even or idea in your life.</p>

<p>Also don&#8217;t forget&#8230; You are having fun while you are doing it. You love it, and you know you love it, because if you wouldn&#8217;t, you wouldn&#8217;t really start in the first place.</p>

<p>Oh and by the way&#8230; Not every single one of your posts must be a small book sized one. You ARE allowed to write smaller pieces in a hurry if you just wanted to share a general idea.</p>

<p>Hope you liked this and I hope it could help you get started or to keep you on track.</p>

<p>Have a nice day,</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Making your code understandable</title>
			<link>https://skarlso.github.io/2012/06/13/making-your-code-understandable/</link>
			<pubDate>Wed, 13 Jun 2012 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2012/06/13/making-your-code-understandable/</guid>
			<description>Hi!
I&amp;#8217;ve seen this many times over and over again. Many people have wrote books about it already. Like Uncle Bob&amp;#8217;s Clean Code. Like Pragmatic Programmer by Andrew Hunt and David Thomas. What makes your code understandable to others.
Is it Comments?
No. It&amp;#8217;s not comments. If your code could be read properly you wouldn&amp;#8217;t need comments to explain what it does. Like Uncle Bob said. A good code doesn&amp;#8217;t contain surprises.</description>
			<content type="html"><![CDATA[<p>Hi!</p>

<p>I&#8217;ve seen this many times over and over again. Many people have wrote books about it already. Like Uncle Bob&#8217;s Clean Code. Like Pragmatic Programmer by Andrew Hunt and David Thomas. What makes your code understandable to others.</p>

<p>Is it <strong>Comments</strong>?</p>

<p>No. It&#8217;s not comments. If your code could be read properly you wouldn&#8217;t need comments to explain what it does. Like Uncle Bob said. A good code doesn&#8217;t contain surprises. It does exactly what you would think it should do on the next line. It doesn&#8217;t have curves and misinformation. It doesn&#8217;t have plots and turns of events like a good crime book. No. Good code is a like a boring soap opera with predictable plot and boring plain characters who don&#8217;t change there behavior based on circumstances.</p>

<p>Good code is easy to read. It flows like the river, falls like a waterfall, cooks like bacon and crosses the road like a professional chicken. If I read line A the next line should be B. If it is a Z or a :@L$&#8230; I wont be happy.</p>

<p>So then what makes it understandable?</p>

<p>On simple word: <strong>Readability</strong>.</p>

<p>What makes it readable?</p>

<p>Small chunks of functions that have descriptive names as few parameters as possible and do only ONE thing at a time. Of course this is not all there is&#8230; However it&#8217;s the best thing to begin with. A function called &#8220;doStuff&#8221; that has a complexity of 300 has three fors, two switches and a dozen ifs isn&#8217;t really helping. Now if you look at doStuff and try to give a name based on the job of the function and come up with &#8220;propageXWithFiveUnlessYEqualsTheSumOfZPlusW&#8221; you will know it does more then one thing.</p>

<p>If you see a really complex function in your production code or hobby code ask yourself: &#8220;Should this really be like 300 lines long and with a complexity of 200??&#8221; And as you speak this out loud you will know the answer already. Break it up. Have like a dozen smaller functions that will be better I promise you. Take out parts. Write unit tests to it that help with re-factoring. Break it down into as small chunks as possible. It will be worth it. It will increase understand-ability, readability and maintainability.</p>

<p>Hope that helped.</p>

<p>Thank you for reading and as always,</p>

<p>Have a nice Day,</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Getting Dual Card to work on Ubuntu 12.04.</title>
			<link>https://skarlso.github.io/2012/04/11/getting-dual-card-to-work-on-ubuntu-12-04/</link>
			<pubDate>Wed, 11 Apr 2012 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2012/04/11/getting-dual-card-to-work-on-ubuntu-12-04/</guid>
			<description>Hi guys.
Today I want to talk about a little adventure I had yesterday night. It was quite the fun and frustration too. But neither comes without the other when it&amp;#8217;s about linux.
So let us see what the problem is at hand. The problem machine is a Dell Inspiron N5110 with Nvidia card number one: GeForce GT 525M. And number two: Integrated. Optimus for the win.
So how windows is handling this is actually with a software called Optimus.</description>
			<content type="html"><![CDATA[<p>Hi guys.</p>

<p>Today I want to talk about a little adventure I had yesterday night. It was quite the fun and frustration too. But neither comes without the other when it&#8217;s about linux.</p>

<p>So let us see what the problem is at hand. The problem machine is a Dell Inspiron N5110 with Nvidia card number one: GeForce GT 525M. And number two: Integrated. Optimus for the win.</p>

<p>So how windows is handling this is actually with a software called Optimus. Now linux wasn&#8217;t design to handle this properly but there are solutions. But I&#8217;m getting ahead of myself. Let&#8217;s start with the install.</p>

<p><strong>Ubuntu Install</strong></p>

<p>So first of all I installed <a href="http://www.ubuntu.com/download/ubuntu/download" target="_blank">Ubuntu 32 bit</a> because I experienced more problems with 64 bit. To be honest the ubuntu page also recommends 32 bit. You don&#8217;t get to much from the 64 any ways.</p>

<p>After I downloaded and burned my disc and installed ubuntu next to my windows 7, I went for the updates. Now HERE is the first key point in my struggle. After the install I went for the additional drivers listed. There were actually additional drivers listed at that point!! Which is interesting because AFTER I installed the updates they disappeared and never appeared again. I&#8217;m guessing that one of the packages overrode my drivers. I would go back and reinstall the thing and experiment with it, but I don&#8217;t care any more.</p>

<p>So let&#8217;s move on&#8230;</p>

<p><strong>After updating&#8230;</strong></p>

<p>So update went on and my Ubuntu was not using the proper resolution for my screen. It was stuck on 1024&#215;768. Now at this point I would say I could have played around with xrandr and cvt but more about that later&#8230;</p>

<p>I was immediately searching for additional drivers only to find that my list was empty&#8230;</p>

<p><img src="http://ielmira.com/uploads/gallery/album_114/gallery_635_114_12692.png" alt="Empty Additional Drivers" /></p>

<p>Like this. Now this isn&#8217;t something new actually. I had this one before and I could not for the life of me solve it. Let&#8217;s see what I did.</p>

<p><strong>Common in Every solution</strong></p>

<p>First let&#8217;s go over some repository updates I did before starting to get some solutions.</p>

<p>I added the x-swat repository to apt-get because that has the most recent packages that will be released.</p>

<p>Add it with these commands:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
2
3
4
</pre>
      </td>
      
      <td class="code">
        <pre class="bash" style="font-family:monospace;">    <span style="color: #666666; font-style: italic;">#Add swat repository</span>
    <span style="color: #c20cb9; font-weight: bold;">sudo</span> add-apt-repository ppa:ubuntu-x-swat<span style="color: #000000; font-weight: bold;">/</span>x-updates
    <span style="color: #666666; font-style: italic;">#Update and upgrade</span>
    <span style="color: #c20cb9; font-weight: bold;">sudo</span> <span style="color: #c20cb9; font-weight: bold;">apt-get update</span> <span style="color: #000000; font-weight: bold;">&&</span> <span style="color: #c20cb9; font-weight: bold;">sudo</span> <span style="color: #c20cb9; font-weight: bold;">apt-get upgrade</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Now you&#8217;re ready to move on&#8230;</p>

<p><strong>Solution Fail Number One</strong></p>

<p>My first guess was to reinstall nvidia driver because of the updates the new driver has to be built with the new version of kernel.</p>

<p>So what I did was:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
</pre>
      </td>
      
      <td class="code">
        <pre class="bash" style="font-family:monospace;">    <span style="color: #c20cb9; font-weight: bold;">sudo</span> <span style="color: #c20cb9; font-weight: bold;">apt-get remove</span> <span style="color: #660033;">--purge</span> nvidia-current</pre>
      </td>
    </tr>
  </table>
</div>

<p>After that finished I reinstalled everything:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
</pre>
      </td>
      
      <td class="code">
        <pre class="bash" style="font-family:monospace;">    <span style="color: #c20cb9; font-weight: bold;">sudo</span> <span style="color: #c20cb9; font-weight: bold;">apt-get update</span> <span style="color: #000000; font-weight: bold;">&&</span> <span style="color: #c20cb9; font-weight: bold;">sudo</span> <span style="color: #c20cb9; font-weight: bold;">apt-get install</span> nvidia-current nvidia-settings</pre>
      </td>
    </tr>
  </table>
</div>

<p>Additional drivers sometimes needs update to get new drivers. After that I rebooted. At this point I didn&#8217;t have an xorg.conf files yet.</p>

<p>After the reboot everything was the same. Nothing changed. nvidia-settings still said I don&#8217;t appear to be using nvidia x. All right I thought let&#8217;s do that.</p>

<p>So I run:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
</pre>
      </td>
      
      <td class="code">
        <pre class="bash" style="font-family:monospace;">    <span style="color: #c20cb9; font-weight: bold;">sudo</span> nvidia-xconfig</pre>
      </td>
    </tr>
  </table>
</div>

<p>And reboot..</p>

<p>Now THIS messed up my resolution pretty badly. All I was able to get my desktop to was 640&#215;480. At this point I begun to play with xrandr.</p>

<p><strong>Xrandr</strong></p>

<p>So in order to get my resolution back I started to play around with xrandr at the first place. I wasn&#8217;t trying to add anything to xorg.conf yet because I needed to find out if it would even work!</p>

<p>Now xrandr adds unsupported resolutions to video cards. If you have a resolution which us unknown you can set it using cvt.</p>

<p>Here is an article how to do so: <a href="https://wiki.ubuntu.com/X/Config/Resolution" target="_blank">Xrandr</a></p>

<p>Alas this didn&#8217;t work&#8230; LVDS1 which was the display for my laptop didn&#8217;t wanted to allow the new resolution I added for 1366&#215;768. The error was:</p>

<p>X Error of failed request: BadMatch (invalid parameter attributes)</p>

<p>Major opcode of failed request: 150 (RANDR)</p>

<p>Minor opcode of failed request: 18 (RRAddOutputMode)</p>

<p>Serial number of failed request: 25</p>

<p>Current serial number in output stream: 26</p>

<p>I couldn&#8217;t make much of this rather then that my card was still not properly configured and additional drivers was still empty.</p>

<p>As back to square one. I deleted xorg.conf and begun another solution.</p>

<p><strong>Solution Fail Number Two</strong></p>

<p>As I was going through problems I found one interesting one. It was a guide on how to install downloaded nvidia driver from scratch.</p>

<p>So again I went and uninstalled nvidia and started this solution. The steps are these:</p>

<ol>
<li><p>Start ubuntu with recovery mode. Login in root shell (with networking)</p></li>

<li><p>Remove your nvidia driver(what you did install) maybe this can be help: sudo apt-get purge nvidia-current sudo rm -rf /etc/X11/xorg.conf</p></li>

<li><p>restart your computer: sudo reboot</p></li>

<li><p>start ubuntu normally (not recovery)</p></li>

<li><p>open /etc/default/grub : sudo gedit /etc/default/grub</p></li>

<li><p>replace the line GRUB_CMDLINE_LINUX=&#8221;&#8221; to GRUB_CMDLINE_LINUX=&#8221;nomodeset&#8221; (save and exit)</p></li>

<li><p>update grub: sudo update-grub</p></li>

<li><p>Download appropriate driver from nvidia</p></li>
</ol>

<p>10.Give executable permission to the downloaded file : chmod a+x nvidia_driver.run</p>

<ol>
<li><p>Press CLT+ALT+F1 [command line shell will appear] and login</p></li>

<li><p>stop lightdm (display manager) service : sudo service lightdm stop</p></li>

<li><p>start nvidia installation: sudo ./nvidia_driver.run</p></li>

<li><p>reboot your system: sudo reboot</p></li>
</ol>

<p>Now this brought up a couple of new problems. First that although I downloaded the proper driver from Nvidia it failed to detect my GPU for whatever reasons. And second it could not build because it couldn&#8217;t find nvidia.ko. I couldn&#8217;t resolve these issues although I guess there are some for it. But in the end it didn&#8217;t matter.</p>

<p>I reverted back to my original state&#8230; which was removing all of the drivers and resetting grub to its original state and went on to solution number three&#8230;</p>

<p><strong>Working Solution Number Three</strong></p>

<p>At this point I just wanted SOMETHING to work. I didn&#8217;t even care about my nvidia card any more. And that was when I came across a post about dual cards. Something I didn&#8217;t care about because IT WAS WORKING before the UPDATE! But I want on any ways and that was the right solution in the end.</p>

<p>You can find this solution <a href="http://askubuntu.com/questions/120261/ubuntu-11-10-problem-with-nvidia/120600#comment143754_120600" target="_blank">here</a>. The first answer.</p>

<p>For my sanities sake I will write it down here too.</p>

<p><strong>First</strong></p>

<p>Remove nvidia drivers&#8230; Again.</p>

<p><strong>Second</strong></p>

<p>Reinstall Mesa package for GL:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
</pre>
      </td>
      
      <td class="code">
        <pre class="bash" style="font-family:monospace;">    <span style="color: #c20cb9; font-weight: bold;">sudo</span> <span style="color: #c20cb9; font-weight: bold;">apt-get</span> <span style="color: #660033;">--reinstall</span> <span style="color: #c20cb9; font-weight: bold;">install</span> libgl1-mesa-glx</pre>
      </td>
    </tr>
  </table>
</div>

<p>This will get your first card to work with ubuntu.</p>

<p>At this point I reinstalled my nvidia drivers too&#8230; Something the other guy didn&#8217;t mention.</p>

<p><strong>Third</strong></p>

<p>Reboot</p>

<p><strong>Fourth</strong></p>

<p>Install a program called bumblebee. Yes, <a href="http://bumblebee-project.org/install.html" target="_blank">Bumblebee</a></p>

<p>This is equal to Windows optimus. It will handle your dual video cards. You&#8217;ll see in a moment how.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
2
3
</pre>
      </td>
      
      <td class="code">
        <pre class="bash" style="font-family:monospace;">    <span style="color: #c20cb9; font-weight: bold;">sudo</span> add-apt-repository ppa:bumblebee<span style="color: #000000; font-weight: bold;">/</span>stable
    <span style="color: #c20cb9; font-weight: bold;">sudo</span> <span style="color: #c20cb9; font-weight: bold;">apt-get update</span>
    <span style="color: #c20cb9; font-weight: bold;">sudo</span> <span style="color: #c20cb9; font-weight: bold;">apt-get install</span> bumblebee bumblebee-nvidia</pre>
      </td>
    </tr>
  </table>
</div>

<p><strong>Fifth</strong></p>

<p>Add yourself to use Bumblebee:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
</pre>
      </td>
      
      <td class="code">
        <pre class="bash" style="font-family:monospace;">    <span style="color: #c20cb9; font-weight: bold;">sudo</span> usermod <span style="color: #660033;">-a</span> <span style="color: #660033;">-G</span> bumblebee <span style="color: #007800;">$USER</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>And then comes the magic. So in order for you to be able to use your second card with bumblebee you have to execute the program with optirun. This is much like windows optimus, just optimus works in the background.</p>

<p>After this I could finally see my cards settings for example by typing in:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
</pre>
      </td>
      
      <td class="code">
        <pre class="bash" style="font-family:monospace;">    <span style="color: #c20cb9; font-weight: bold;">sudo</span> optirun nvidia-settings <span style="color: #660033;">-c</span> :<span style="color: #000000;">8</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>This executed the settings app and I was able to edit some settings I required while ubuntu was running fine with my other video card as primary card.</p>

<p>Now that was quite the fun, like I said, not?</p>

<p>I hope this guide showed you my errors and problems and maybe it could help you get along with yours.</p>

<p>If you have any questions, please feel free to write.</p>

<p>Thanks for reading!</p>
]]></content>
		</item>
		
		<item>
			<title>JMS Connection setup and Framework</title>
			<link>https://skarlso.github.io/2012/03/04/jms-connection-setup-and-framework/</link>
			<pubDate>Sun, 04 Mar 2012 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2012/03/04/jms-connection-setup-and-framework/</guid>
			<description>Hello chumps.
Today I want to write about jms connection testing with a small framework. I wrote a small thing using a factory object model. It&amp;#8217;s a lead, a proof of concept. You can use this to go onward.
First, let&amp;#8217;s begin with the JMS connection it self.
JMS Connection
First rule of thumb is: &amp;#8220;Don&amp;#8217;t wait for a response when dealing with JMS queues.&amp;#8221; How so? Because, a JMS queue is asynchronous so you wont get back anything.</description>
			<content type="html"><![CDATA[<p>Hello chumps.</p>

<p>Today I want to write about jms connection testing with a small framework. I wrote a small thing using a factory object model. It&#8217;s a lead, a proof of concept. You can use this to go onward.</p>

<p>First, let&#8217;s begin with the JMS connection it self.</p>

<p><strong>JMS Connection</strong></p>

<p>First rule of thumb is: &#8220;Don&#8217;t wait for a response when dealing with JMS queues.&#8221; How so? Because, a JMS queue is asynchronous so you wont get back anything. There are however two ways of checking if it was a success or not.</p>

<p>1: Check your database. The service you are trying out probably records something in the database, right? Check it&#8230; You can use a simple JDBC connection, or a Postgres connection or whatever your choice of database is.</p>

<p>2: You can monitor use the log of your choice of service provider. If there is an exception the moment you send something, you can be sure it is received. Just the format is not correct. This is of course based on how your service handles exceptions.</p>

<p>So let&#8217;s get down to business.</p>

<p>First, there is a really good article on how to create a JMS connection.</p>

<p>This is the link for it: <a href="http://www.javablogging.com/simple-guide-to-java-message-service-jms-using-activemq" title="Simple JMS How To">Simple Guide to Java message service JMS using ActiveMQ</a></p>

<p>Itt will tell you everything you need to know about creating a connection and waiting for a response.</p>

<p>I will tell you now how to use this information in a real live environment.</p>

<p>In a real environment you will be using a queue which has certain settings that will not allow you to &#8220;join&#8221; it, or creating it. And you need to get the name of the queue and certain settings, like the destination URL.</p>

<p>First, the tool you are going to use is called JConsole. JConsole is a tool to monitor applications. It&#8217;s tool to monitor the JVM. I wont go into details about it since there are numerous descriptions about it. It is part of the java installation.</p>

<p>So after firing it up and giving it a connection url which would look like this: &#8216;service:jmx:rmi:///jndi/rmi://hostName:portNum/jmxrmi&#8217;, you would go ahead and search on the TAB:<strong>Threads</strong>.</p>

<p>Look for a Thread that is labelled like this: <YourConnectionLayer> Transport Server: tcp://0.0.0.0: <port></p>

<p>This will be your destination url.</p>

<p>In the blog the guy is using ActiveMQ. It&#8217;s your best guess. It&#8217;s lightweight, it&#8217;s fast it&#8217;s easy. Go for it.</p>

<p>So your Destination would look like this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
2
3
4
</pre>
      </td>
      
      <td class="code">
        <pre class="java" style="font-family:monospace;">    ConnectionFactory connectionFactory <span style="color: #339933;">=</span>
            <span style="color: #000000; font-weight: bold;">new</span> ActiveMQConnectionFactory<span style="color: #009900;">&#40;</span><span style="color: #0000ff;">"&lt;yourserviceparameter&gt;://tcp://0.0.0.0:&lt;port&gt;"</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #003399;">Connection</span> connection <span style="color: #339933;">=</span> connectionFactory.<span style="color: #006633;">createConnection</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    connection.<span style="color: #006633;">start</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>After that you will need the queue name which you can get as easy as this. Go to the TAB <strong>MBeans</strong>. There you can see, if you are using ActiveMQ, you will see something like this : org.active.activemq. Open this up and you will see under localhost a number of queues that your server has configured. Open up one of them and copy the queue name in the createQueue.</p>

<p>Use it like this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
</pre>
      </td>
      
      <td class="code">
        <pre class="java" style="font-family:monospace;">    Destination destination <span style="color: #339933;">=</span> session.<span style="color: #006633;">createQueue</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">"&lt;queue name&gt;"</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Of course if your service is configured properly you wont have any access to it. Use the connection like this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
</pre>
      </td>
      
      <td class="code">
        <pre class="java" style="font-family:monospace;">    connection <span style="color: #339933;">=</span> connectionFactory.<span style="color: #006633;">createConnection</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">"username"</span>, <span style="color: #0000ff;">"password"</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>You will have now logged in with the proper user.</p>

<p>Now you can send the message. You have everything configured.</p>

<p><strong>Framework</strong></p>

<p>Let&#8217;s speak about the framework you will need to properly use this technology.</p>

<p>One of the paradigms for programming is design to interfaces. If you need a proper working framework, your ave to design with the mind set to changing pieces of code. Thinking about what would change the most. Your connection settings. You want a framework which can use any kind of connection. Not just JMS but whatever connection you would like. It could be a synchronous one. Or a database one. Or a JMS. Doesn&#8217;t matter. You are only interested in a message sent or a connection, or whatever you want.</p>

<p>So let&#8217;s get to it.</p>

<p>Interface:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
2
3
</pre>
      </td>
      
      <td class="code">
        <pre class="java" style="font-family:monospace;">    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">interface</span> IConnection <span style="color: #009900;">&#123;</span>
    <span style="color: #000066; font-weight: bold;">void</span> sendMessage<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>This is sample connection interface. You could have numerous templates here.</p>

<p>You will be using an object factory pattern here. Your implementer will be taken for a Java Property file. But it can be taken from whatever configuration you like. XML maybe, or a database even.</p>

<p>Let&#8217;s see you connection factory:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
</pre>
      </td>
      
      <td class="code">
        <pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> ConnFactory <span style="color: #009900;">&#123;</span>
&nbsp;
    <span style="color: #000000; font-weight: bold;">static</span> Logger logger <span style="color: #339933;">=</span> <span style="color: #000000; font-weight: bold;">new</span> Logger<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">static</span> IConnection getImplementer<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>
    <span style="color: #009900;">&#123;</span>
        <span style="color: #003399;">Properties</span> prop <span style="color: #339933;">=</span> <span style="color: #000000; font-weight: bold;">new</span> <span style="color: #003399;">Properties</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
        <span style="color: #000000; font-weight: bold;">try</span>
        <span style="color: #009900;">&#123;</span>
            prop.<span style="color: #006633;">load</span><span style="color: #009900;">&#40;</span><span style="color: #000000; font-weight: bold;">new</span> <span style="color: #003399;">FileInputStream</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">"conf/implementer.property"</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #009900;">&#125;</span>
        <span style="color: #000000; font-weight: bold;">catch</span> <span style="color: #009900;">&#40;</span><span style="color: #003399;">IOException</span> io<span style="color: #009900;">&#41;</span>
        <span style="color: #009900;">&#123;</span>
            logger.<span style="color: #006633;">Log</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">"Could not find property file: "</span> <span style="color: #339933;">+</span> io.<span style="color: #006633;">getMessage</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #009900;">&#125;</span>
&nbsp;
        <span style="color: #003399;">String</span> implementerClass <span style="color: #339933;">=</span> prop.<span style="color: #006633;">getProperty</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">"implementer"</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
        Class<span style="color: #339933;">&lt;?&gt;</span> iConnect <span style="color: #339933;">=</span> <span style="color: #000066; font-weight: bold;">null</span><span style="color: #339933;">;</span>
&nbsp;
        <span style="color: #000000; font-weight: bold;">try</span>
        <span style="color: #009900;">&#123;</span>
            iConnect <span style="color: #339933;">=</span> <span style="color: #000000; font-weight: bold;">Class</span>.<span style="color: #006633;">forName</span><span style="color: #009900;">&#40;</span>implementerClass<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #009900;">&#125;</span>
        <span style="color: #000000; font-weight: bold;">catch</span> <span style="color: #009900;">&#40;</span><span style="color: #003399;">ClassNotFoundException</span> ce<span style="color: #009900;">&#41;</span>
        <span style="color: #009900;">&#123;</span>
            logger.<span style="color: #006633;">Log</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">"Class could not be found: "</span> <span style="color: #339933;">+</span> ce.<span style="color: #006633;">getMessage</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #009900;">&#125;</span>
&nbsp;
        IConnection connection <span style="color: #339933;">=</span> <span style="color: #000066; font-weight: bold;">null</span><span style="color: #339933;">;</span>
&nbsp;
        <span style="color: #000000; font-weight: bold;">try</span>
        <span style="color: #009900;">&#123;</span>
            connection <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>IConnection<span style="color: #009900;">&#41;</span> iConnect.<span style="color: #006633;">newInstance</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #009900;">&#125;</span>
        <span style="color: #000000; font-weight: bold;">catch</span> <span style="color: #009900;">&#40;</span><span style="color: #003399;">IllegalAccessException</span> ie<span style="color: #009900;">&#41;</span>
        <span style="color: #009900;">&#123;</span>
            logger.<span style="color: #006633;">Log</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">"Illegal access excpetion: "</span> <span style="color: #339933;">+</span> ie.<span style="color: #006633;">getMessage</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
        <span style="color: #009900;">&#125;</span> <span style="color: #000000; font-weight: bold;">catch</span> <span style="color: #009900;">&#40;</span><span style="color: #003399;">InstantiationException</span> e<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
&nbsp;
            logger.<span style="color: #006633;">Log</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">"Instatiation exception occured. "</span> <span style="color: #339933;">+</span> e.<span style="color: #006633;">getMessage</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #009900;">&#125;</span>
&nbsp;
        <span style="color: #000000; font-weight: bold;">return</span> connection<span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
&nbsp;
<span style="color: #009900;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Easy enough, right? Class.forname will instantiate the class name you have in the property file. This could be something like this: com.packagename.ClassName. Doesn&#8217;t matter to you. You can add some typeof checks, or instanceof checks, whatever you like. Or you can use <Type> generics.</p>

<p>Let&#8217;s get to the concrete implementation:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre>
      </td>
      
      <td class="code">
        <pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> JMSConnectionImpl <span style="color: #000000; font-weight: bold;">implements</span> IConnection <span style="color: #009900;">&#123;</span>
    Logger logger <span style="color: #339933;">=</span> <span style="color: #000000; font-weight: bold;">new</span> Logger<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">void</span> sendMessage<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>
    <span style="color: #009900;">&#123;</span>
&nbsp;
    <span style="color: #003399;">Connection</span> connection <span style="color: #339933;">=</span> <span style="color: #000066; font-weight: bold;">null</span><span style="color: #339933;">;</span>
        .
        .
        .
        <span style="color: #000000; font-weight: bold;">finally</span>
        <span style="color: #009900;">&#123;</span>
            connection.<span style="color: #006633;">close</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #009900;">&#125;</span>
&nbsp;
    <span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Simple enough. Here you have a concrete implementation of your collection and your sender class.</p>

<p>And the simple usage facility of this is&#8230; simple too:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
2
3
</pre>
      </td>
      
      <td class="code">
        <pre class="java" style="font-family:monospace;">    IConnection iConnection <span style="color: #339933;">=</span> ConnFactory.<span style="color: #006633;">getImplementer</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
    iConnection.<span style="color: #006633;">sendMessage</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Simple enough too, right? So what happens here? You have a factory that will give you back any kind of implementation you are writing in you property file. You don&#8217;t care what the implementation is in your test. You don&#8217;t care what it&#8217;s name is. You don&#8217;t care what it&#8217;s result is. Okay, you care about the result, but that&#8217;s another history since you will check that elsewhere.</p>

<p>There you go. If any question occurs, please don&#8217;t hesitate to ask.</p>

<p>Thanks for reading!</p>
]]></content>
		</item>
		
		<item>
			<title>Configuration</title>
			<link>https://skarlso.github.io/2012/02/27/configuration/</link>
			<pubDate>Mon, 27 Feb 2012 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2012/02/27/configuration/</guid>
			<description>When I see something like this:
  1 2 3 4 5 6   public class Config &amp;#123; public static final string DATABASELINK = &#34;linkhere&#34;; . . . &amp;#125;     It sends a small, but chilling shiver down my spine. Just&amp;#8230; don&amp;#8217;t. There are a lot of possibilities to use configuration in Java. Java property files. Xml. Xml serialization. CSV file. Whatever suits you best, but this?</description>
			<content type="html"><![CDATA[<p>When I see something like this:</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
2
3
4
5
6
</pre>
      </td>
      
      <td class="code">
        <pre class="java" style="font-family:monospace;">    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> Config <span style="color: #009900;">&#123;</span>
        <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">static</span> <span style="color: #000000; font-weight: bold;">final</span> string DATABASELINK <span style="color: #339933;">=</span> <span style="color: #0000ff;">"linkhere"</span><span style="color: #339933;">;</span>
        .
        .
        .
    <span style="color: #009900;">&#125;</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>It sends a small, but chilling shiver down my spine. Just&#8230; don&#8217;t. There are a lot of possibilities to use configuration in Java. Java property files. Xml. Xml serialization. CSV file. Whatever suits you best, but this? DON&#8217;T!</p>
]]></content>
		</item>
		
		<item>
			<title>Hello and welcome</title>
			<link>https://skarlso.github.io/2012/02/26/hello-and-welcome/</link>
			<pubDate>Sun, 26 Feb 2012 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2012/02/26/hello-and-welcome/</guid>
			<description>Hello Dear Visitor.
Welcome to the ramblings of a software test engineer who thinks that he is a tester but feels like a developer but works as a tester but wants to learn programming like a developer&amp;#8230; And so on and so fort.
I will make a journey that has been done by many automation testers. The journey when you decide to step one forward. A friend of mine told me that it is good that a tester learns proper programming and that more should do so.</description>
			<content type="html"><![CDATA[<p>Hello Dear Visitor.</p>

<p>Welcome to the ramblings of a software test engineer who thinks that he is a tester but feels like a developer but works as a tester but wants to learn programming like a developer&#8230; And so on and so fort.</p>

<p>I will make a journey that has been done by many automation testers. The journey when you decide to step one forward. A friend of mine told me that it is good that a tester learns proper programming and that more should do so. She is right. And I will try to document this journey as best as possible. I will try to write down my experiences with java, android, automation, swing, maven, hudson, selenium, cucumber, TDD, BDD, Agile environment and whatever tool I meet.</p>

<p>Please forgive me if you find some grammar errors, English is not my first Language. At least this will be a good opportunity to practice it.</p>

<p>Have fun.. Enjoy my ramblings.</p>

<p>Gergely.</p>
]]></content>
		</item>
		
		<item>
			<title>Testing ‘code’ tag.</title>
			<link>https://skarlso.github.io/2012/02/26/testing-code-tag/</link>
			<pubDate>Sun, 26 Feb 2012 00:00:00 +0000</pubDate>
			
			<guid>https://skarlso.github.io/2012/02/26/testing-code-tag/</guid>
			<description>Hello.
This is just a quick post to test the working of the code tag.
  1 2 3   Given&amp;#40;/The Action is &amp;#40;&amp;#91;A-z&amp;#93;*&amp;#41;/&amp;#41; do |action| @action = action end     Perfect!!
The name of the plugin is WP-Syntax. The trick is to edit the page in plain HTML. Because the WordPress word editor screws up the &amp;lt;&amp;gt; tags. But surely you already knew that&amp;#8230;</description>
			<content type="html"><![CDATA[<p>Hello.</p>

<p>This is just a quick post to test the working of the code tag.</p>

<div class="wp_syntax">
  <table>
    <tr>
      <td class="line_numbers">
        <pre>1
2
3
</pre>
      </td>
      
      <td class="code">
        <pre class="ruby" style="font-family:monospace;">    Given<span style="color:#006600; font-weight:bold;">&#40;</span><span style="color:#006600; font-weight:bold;">/</span>The Action is <span style="color:#006600; font-weight:bold;">&#40;</span><span style="color:#006600; font-weight:bold;">&#91;</span>A<span style="color:#006600; font-weight:bold;">-</span>z<span style="color:#006600; font-weight:bold;">&#93;</span><span style="color:#006600; font-weight:bold;">*</span><span style="color:#006600; font-weight:bold;">&#41;</span><span style="color:#006600; font-weight:bold;">/</span><span style="color:#006600; font-weight:bold;">&#41;</span> <span style="color:#9966CC; font-weight:bold;">do</span> <span style="color:#006600; font-weight:bold;">|</span>action<span style="color:#006600; font-weight:bold;">|</span>
        <span style="color:#0066ff; font-weight:bold;">@action</span> = action
    <span style="color:#9966CC; font-weight:bold;">end</span></pre>
      </td>
    </tr>
  </table>
</div>

<p>Perfect!!</p>

<p>The name of the plugin is WP-Syntax. The trick is to edit the page in plain HTML. Because the WordPress word editor screws up the &lt;&gt; tags. But surely you already knew that&#8230;</p>
]]></content>
		</item>
		
	</channel>
</rss>
