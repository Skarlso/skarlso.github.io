<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ramblings of a build engineer</title>
    <link>https://skarlso.github.io/posts/</link>
    <description>Recent content in Posts on Ramblings of a build engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 10 Feb 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://skarlso.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Wercker Test</title>
      <link>https://skarlso.github.io/2016/02/10/wercker-test</link>
      <pubDate>Wed, 10 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/02/10/wercker-test</guid>
      <description>

&lt;h2 id=&#34;basics:94c3bb57ac4992da2673b905da613eb3&#34;&gt;Basics&lt;/h2&gt;

&lt;p&gt;This is a wercker Test.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Doing CORS in Go with Gin and JSON</title>
      <link>https://skarlso.github.io/2016/02/02/doing-cors-in-go-with-gin-and-json</link>
      <pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/02/02/doing-cors-in-go-with-gin-and-json</guid>
      <description>

&lt;h2 id=&#34;basics:2debf7d5538355b3343d354786c24e4a&#34;&gt;Basics&lt;/h2&gt;

&lt;p&gt;Hello folks.&lt;/p&gt;

&lt;p&gt;This will be a quick post about how to do CORS with jQuery, Gin in Go with a very simple ajax GET and Json.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m choosing JSON here because basically I don&amp;rsquo;t really like JSONP. And actually, it&amp;rsquo;s not very complicated to do CORS, it&amp;rsquo;s just hidden enough so that it doesn&amp;rsquo;t become transparent.&lt;/p&gt;

&lt;p&gt;First, what is CORS? It&amp;rsquo;s Cross-Platform Resource Sharing. It has been invented so that without your explicit authorization in the header of a request, Javascript can&amp;rsquo;t reach outside of your domain and be potentially harmful to your visitors.&lt;/p&gt;

&lt;p&gt;Now, suppose you have an architecture like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/architecture.png&#34; alt=&#34;Architecture&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You have multiple agents sitting on multiple nodes. You have one central server, and you have multiple front-ends. Everybody can only talk to the Server but the server does talk to everyone. You would like to have a dynamic front-end and would like to display data with ajax calls. Since your front-end sits on a different server, you will have to do something about CORS. This is how I solved it&amp;hellip;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m using &lt;a href=&#34;https://github.com/gin-gonic/gin&#34;&gt;Gin&lt;/a&gt; for my REST service for &lt;a href=&#34;https://github.com/Skarlso/dockmaster2&#34;&gt;Dockmaster&lt;/a&gt;. For this two work, you need to adjust two component.&lt;/p&gt;

&lt;h2 id=&#34;server:2debf7d5538355b3343d354786c24e4a&#34;&gt;Server&lt;/h2&gt;

&lt;p&gt;There is thing called a Preflight-Check. In essence, the preflight check is sent BEFORE the actual request to check if the next request is allowed to go out of the domain. The preflight check is sent to the same URI just with OPTIONS method. In order to tell the caller that the next one will be safe, you need three things.&lt;/p&gt;

&lt;p&gt;First, you need to set two Headers.
#1 -&amp;gt; Access-Control-Allow-Origin to &amp;ldquo;*&amp;ldquo;.
#2 -&amp;gt; Access-Control-Allow-Headers to &amp;ldquo;access-control-allow-origin, access-control-allow-headers&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;These are the minimum headers you can set. If you allow Access-Control-Allow-Origin you also have to allow it in the headers section because the next request will expect it to be there. Also, note here that setting Origin to * is only recommended in development environment. Otherwise it should be set to whatever your domain is.&lt;/p&gt;

&lt;p&gt;Second, you need to respond to the OPTIONS method with a 200. In order to do that, I added a simple rule with the same end-point but with OPTIONS.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {
    router := gin.Default()
    v1 := router.Group(APIBASE)
    {
        v1.GET(&amp;quot;/list&amp;quot;, listContainers)
        v1.POST(&amp;quot;/add&amp;quot;, addContainers)
        v1.POST(&amp;quot;/delete&amp;quot;, deleteContainers)
        v1.GET(&amp;quot;/inspect/:agentID/:containerID&amp;quot;, inspectContainer)
        v1.OPTIONS(&amp;quot;/inspect/:agentID/:containerID&amp;quot;, preflight)
        v1.POST(&amp;quot;/stopAll&amp;quot;, stopAll)
        v1.OPTIONS(&amp;quot;/stopAll&amp;quot;, preflight)
    }
    router.Run(&amp;quot;:8989&amp;quot;)
}

func preflight(c *gin.Context) {
    c.Header(&amp;quot;Access-Control-Allow-Origin&amp;quot;, &amp;quot;*&amp;quot;)
    c.Header(&amp;quot;Access-Control-Allow-Headers&amp;quot;, &amp;quot;access-control-allow-origin, access-control-allow-headers&amp;quot;)
    c.JSON(http.StatusOK, struct{}{})
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that the preflight method is there for two end-points. I added it to those end-points which will reach over the domain. The others are all local, thus they don&amp;rsquo;t need that. This leads to a little duplication, but that is fine. I have a very fine control over what actually is allowed to go outside of the domain.&lt;/p&gt;

&lt;p&gt;So, how do we call this?&lt;/p&gt;

&lt;h2 id=&#34;frontend:2debf7d5538355b3343d354786c24e4a&#34;&gt;Frontend&lt;/h2&gt;

&lt;p&gt;In the front-end&amp;rsquo;s web layout, I&amp;rsquo;m doing an Ajax GET, which looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;                $.ajax({
                    url: &#39;http://localhost:8989/api/1/inspect/&#39;+data.agentid+&#39;/&#39;+data.id,
                    type: &#39;GET&#39;,
                    dataType:&amp;quot;json&amp;quot;,
                    headers: {&amp;quot;Access-Control-Allow-Origin&amp;quot;: &amp;quot;*&amp;quot;, &amp;quot;Access-Control-Allow-Headers&amp;quot;: &amp;quot;access-control-allow-origin, access-control-allow-headers&amp;quot;},
                    processData: false,
                    success: function(data) {
                        var json = JSON.stringify(data, null, 4)
                        independentPopup.html(&amp;quot;&amp;lt;pre &amp;gt;&amp;quot;+json+&amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;);
                        $(link).after(independentPopup);
                    }
                });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the headers are set, the request will work nicely.&lt;/p&gt;

&lt;h2 id=&#34;y-u-no-middleware:2debf7d5538355b3343d354786c24e4a&#34;&gt;Y U No Middleware?&lt;/h2&gt;

&lt;p&gt;And now you could say that, why not just have a middleware which will always accept OPTIONS for every end-point. Because I like it better this way. Some would argue that this is too granular, but fact is, that in my opinion, this is more readable and immediatly visible. However, if you DO want to do that, you have several options to your disposal.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/itsjamie/gin-cors&#34;&gt;Cors Basic Http Middleware&lt;/a&gt; and for Gin &lt;a href=&#34;https://github.com/itsjamie/gin-cors&#34;&gt;Gin CORS Middleware&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;summary:2debf7d5538355b3343d354786c24e4a&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This is it. You can see the code in its entirety on Github. Have a better idea on how to do it? Please! Do not hesitate to share. I always like to learn.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;

&lt;p&gt;And as always,
Have a nice day!&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Journey in advent of code</title>
      <link>https://skarlso.github.io/2016/01/22/my-journey-in-advent-of-code</link>
      <pubDate>Fri, 22 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/01/22/my-journey-in-advent-of-code</guid>
      <description>

&lt;p&gt;Hello folks.&lt;/p&gt;

&lt;p&gt;I wanted to share with you my tale of working through the problems with &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent Of Code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is a nice tale and there are a few things I learned from it, especially in Go, since I used that solve all of the problems. So, let&amp;rsquo;s get started.&lt;/p&gt;

&lt;h1 id=&#34;solving-the-problems:6cd374f9da84942d68bc6821a2ecbf45&#34;&gt;Solving the problems&lt;/h1&gt;

&lt;p&gt;The most important lesson I learned while doing these exercises was, how to solve these problems. A couple of them were simple enough to not have to over think it, but most of them got very tricky. I could have gone with a brute force attempt, but as we see later, that wasn&amp;rsquo;t always a very good solution. And people who used that, actually just got lucky finding their solutions.&lt;/p&gt;

&lt;p&gt;The eight stages of breaking down a problem according to this book &lt;a href=&#34;http://www.amazon.co.uk/Think-Like-Programmer-Introduction-Creative/dp/1593274246/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1453449575&amp;amp;sr=1-1&amp;amp;keywords=thinking+like+a+programmer&#34;&gt;Thinking Like a Programmer&lt;/a&gt; are the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have a plan&lt;/li&gt;
&lt;li&gt;Rephrase&lt;/li&gt;
&lt;li&gt;Divide&lt;/li&gt;
&lt;li&gt;Start with what you know&lt;/li&gt;
&lt;li&gt;Reduce&lt;/li&gt;
&lt;li&gt;Analogies&lt;/li&gt;
&lt;li&gt;Experiment&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t get frustrated&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;have-a-plan-and-understanding-your-goal:6cd374f9da84942d68bc6821a2ecbf45&#34;&gt;Have a plan and understanding your goal&lt;/h2&gt;

&lt;p&gt;This is simple. Always have a plan of what you would like to do, and how to start. This will help you massively along the way to not to loose sight of what your goal is actually. For example, look at &lt;a href=&#34;http://adventofcode.com/day/24&#34;&gt;Day 24&lt;/a&gt;. At first, it looks like a permutational puzzle, but if you understand the solution we are looking for, you realize that there is an easier way of finding it. Since you only want the packages which consists of the fewest item counts, you would only care about the largest numbers because those will be the fewest which still give you the desired package weight. Suddenly the problem gets easier because you don&amp;rsquo;t have to worry about the other groups any longer.&lt;/p&gt;

&lt;h2 id=&#34;rephrase:6cd374f9da84942d68bc6821a2ecbf45&#34;&gt;Rephrase&lt;/h2&gt;

&lt;p&gt;Rephrasing the problem with your own words can help in understanding it better. Or even better, try explaining it to somebody else. If you cannot rephrase it, you didn&amp;rsquo;t understand it in the first place.&lt;/p&gt;

&lt;h2 id=&#34;divide:6cd374f9da84942d68bc6821a2ecbf45&#34;&gt;Divide&lt;/h2&gt;

&lt;p&gt;If the problem seems daunting because it&amp;rsquo;s massive, just divide it into smaller chunks. This is something that we usually do with large problems, but it&amp;rsquo;s more subtle than that. If you face a problem which seems complex, just factor out parts of it until you got a problem which you do understand. Even if you have to butcher the original puzzle problem. It doesn&amp;rsquo;t matter. Adding complexity later is easier than adding complexity in its infancy.&lt;/p&gt;

&lt;h2 id=&#34;start-with-what-you-know-finding-analogies:6cd374f9da84942d68bc6821a2ecbf45&#34;&gt;Start with what you know &amp;amp;&amp;amp; Finding analogies&lt;/h2&gt;

&lt;p&gt;This one speaks for itself. If you know parts of the problem, because you know analogy for it, or you faced something similar before, or exactly that, start with that.&lt;/p&gt;

&lt;h2 id=&#34;reduce:6cd374f9da84942d68bc6821a2ecbf45&#34;&gt;Reduce&lt;/h2&gt;

&lt;p&gt;If the problem seems too complex, remove complexity. Start with a smaller set. Preferably something testable (I&amp;rsquo;ll come back to that later). Remove constraints, or add them as desired. A constraint makes it harder to solve the puzzle? Remove it, and try solving it without. After that, the solution will give you insight into the problem and you can add that constraint back in.&lt;/p&gt;

&lt;p&gt;Consider &lt;a href=&#34;http://adventofcode.com/day/11&#34;&gt;Day 11&lt;/a&gt;. I had fun with this one. In order to easy it up a little, I first, removed the constraint of doing the increment with letters. I did it with numbers. I also removed the constraint of doing it within the confines of a limited length array. After I got that I&amp;rsquo;ll use modulo to make the numbers wrap around, it was way more easy to apply it to characters. And after a little fidgeting this came to life:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;passwd[i] -= &#39;a&#39;
passwd[i] = (passwd[i] + 1) % ((&#39;z&#39; - &#39;a&#39;) + 1)
passwd[i] += &#39;a&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The -,+ &amp;lsquo;a&amp;rsquo; is needed so that it&amp;rsquo;s dealing with ascii code from 0 - &amp;lsquo;z&amp;rsquo;. This basically makes it so that when I reach the end of the alphabet it will wrap around and start from &amp;lsquo;a&amp;rsquo; again.&lt;/p&gt;

&lt;h2 id=&#34;experiment:6cd374f9da84942d68bc6821a2ecbf45&#34;&gt;Experiment&lt;/h2&gt;

&lt;p&gt;This led to more solutions than I care to admit. Basically just start experimenting with solutions which are in your head. There is a chance, that what you come up with, will be the solution. This goes very well with the principle of &lt;em&gt;Make it work&lt;/em&gt;, &lt;em&gt;Make it right&lt;/em&gt;, &lt;em&gt;Make it fast&lt;/em&gt;. Just have something working first, and than you can make it work properly after. It&amp;rsquo;s always better to have &lt;em&gt;something&lt;/em&gt; rather than nothing.&lt;/p&gt;

&lt;p&gt;And last but not least&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;don-t-get-frustrated:6cd374f9da84942d68bc6821a2ecbf45&#34;&gt;Don&amp;rsquo;t get frustrated&lt;/h2&gt;

&lt;p&gt;This is something I cannot say strongly enough. Seriously. &lt;strong&gt;DO NOT GET FRUSTRATED&lt;/strong&gt;. Most of the problems were designed to be harder. Unless you work as a programmer professionally for several years now, or this is a field of interest for you, you will spend a day hacking around on a problem and trying to find a solution which is adequate. In these times, you will get frustrated and think you are too stupid for this, this couldn&amp;rsquo;t be more far from the truth! You might need some inspiration, you might need some time away from the screen, it helps if you draw out the problem in a piece of paper, or just think about it without seeing it for a while. Just take a break, eat something, watch a comedy and get back to it later with a fresh view.&lt;/p&gt;

&lt;h1 id=&#34;technical-gotchas:6cd374f9da84942d68bc6821a2ecbf45&#34;&gt;Technical Gotchas&lt;/h1&gt;

&lt;p&gt;So after the general problem solving side of things, I learned many things about Go, and about the tidbits of this language.&lt;/p&gt;

&lt;h2 id=&#34;byte-slices:6cd374f9da84942d68bc6821a2ecbf45&#34;&gt;Byte Slices&lt;/h2&gt;

&lt;p&gt;I already knew that []byte is more performant and that Go optimizes on them more, but not to this extent. As in my previous blog posts I discovered that using them can really make a huge difference. Go even has a library called &lt;code&gt;bytes&lt;/code&gt; which has helper functions similar to that of &lt;code&gt;strings&lt;/code&gt; to help you out in these situations. Go optimizes on map recalls as well when you cast to string from []byte and use that as a map key like this: myMap[string(data)].&lt;/p&gt;

&lt;h2 id=&#34;brute-force-or-looping:6cd374f9da84942d68bc6821a2ecbf45&#34;&gt;Brute Force or Looping&lt;/h2&gt;

&lt;p&gt;Most of the times you could get away with looping or trying to brute force out a solution. But there were times, where you really had to huddle down and think the problem through. Because simply looping, either took too long, or didn&amp;rsquo;t come up with a good answer. That&amp;rsquo;s why I rather always start with: &amp;lsquo;How could I solve this without looping?&amp;rsquo;. This will get you into the right mindset. Or thinking: &amp;lsquo;How could I solve this without taking each and every combination into account?&amp;rsquo;. These questions will help you to think about the problem without loops. Or only if you REALLY must use one.&lt;/p&gt;

&lt;p&gt;Doing this will get you into the right way of thinking. I know that in advent of code there is a Leaderboard and you could get on it if you were fast. But most of the times having a fast solution is far from having the right solution.&lt;/p&gt;

&lt;h2 id=&#34;structs-are-awesome:6cd374f9da84942d68bc6821a2ecbf45&#34;&gt;Structs are Awesome&lt;/h2&gt;

&lt;p&gt;I like using structs. They are a very lightweight way of defining objects, structures which stick together. For example in the &lt;a href=&#34;http://adventofcode.com/day/6&#34;&gt;Day 6&lt;/a&gt; Light puzzle, or even &lt;a href=&#34;http://adventofcode.com/day/3&#34;&gt;Day 3&lt;/a&gt; Traveling santa example, a struct which stuck x,y locations together and made it a map key, it was trivial to make my gif out of it with SVG -&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Skarlso/goprojects/master/advent/day3/day1.gif&#34; alt=&#34;Traveling Santa&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;go-is-simple-to-read:6cd374f9da84942d68bc6821a2ecbf45&#34;&gt;Go is Simple to Read&lt;/h2&gt;

&lt;p&gt;[opinion] I like Go because of its simplicity. You don&amp;rsquo;t see stuff in Go most of the times, where you need to look three times to understand what the heck is going on. I like filter, reduce, map and syntactic sugar, but they make for a very poor reading experience. Go, in that way, choose not to incorporate these paradigms and I find that refreshing. [/opinion]&lt;/p&gt;

&lt;h2 id=&#34;testing:6cd374f9da84942d68bc6821a2ecbf45&#34;&gt;Testing&lt;/h2&gt;

&lt;p&gt;TDD is something we all should know by now and care about. When I&amp;rsquo;m doing puzzles, or finger exercises, I tend to not write tests. But on a more complex puzzle, or a task, I always start with a test. Especially if you are given samples for a puzzle which work. That&amp;rsquo;s a gold mine. You can tweak your algorithm using those samples until they work and then simply apply a larger sample size.&lt;/p&gt;

&lt;p&gt;Tests will also help you with breaking down a problem and identifying parts which you already know.&lt;/p&gt;

&lt;p&gt;For example &lt;a href=&#34;http://adventofcode.com/day/13&#34;&gt;Day 13&lt;/a&gt;. Optimal Seating arrangements. Or the similar &lt;a href=&#34;http://adventofcode.com/day/9&#34;&gt;Day 9&lt;/a&gt;. Which was calculating shortest route distance. Or the password one, Day 11 which I showed before. In these cases, tests helped me make the core of the algorithm solid. Calculating connections, or the odd regex here and there, which was making sure that the password was validated properly.&lt;/p&gt;

&lt;p&gt;Tests will also help you to be able to move on after you found your solution. When I was done with the first iteration of passwords which was still using strings, I went on to optimize it, to use []byte. The tests helped me to know that the code was still working as expected after the refactoring.&lt;/p&gt;

&lt;h1 id=&#34;closing-words:6cd374f9da84942d68bc6821a2ecbf45&#34;&gt;Closing words&lt;/h1&gt;

&lt;p&gt;All in all it was a massive amount of fun doing these exercises and I&amp;rsquo;m thankful to the creator for making it. And I did enjoy the story behind the exercises as well. I think this site stood out because it had a fun factor. For simple exercises there are a lot of other sites -like Project Euler, or Sphere Judge Online-, which just plainly present you a problem and that&amp;rsquo;s it. It&amp;rsquo;s still fun, but it can also became boring very fast. Don&amp;rsquo;t forget the fun factor which makes you plow on and go into a blind frenzy that you cannot quit until it&amp;rsquo;s done. That&amp;rsquo;s the fun part.&lt;/p&gt;

&lt;p&gt;Thank you for reading!
Have a nice day.
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Improving performance with byte slice and int map</title>
      <link>https://skarlso.github.io/2016/01/05/improving-performance-with-byte-slice-and-int-map</link>
      <pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/01/05/improving-performance-with-byte-slice-and-int-map</guid>
      <description>&lt;p&gt;Hello Folks.&lt;/p&gt;

&lt;p&gt;Today I would like to share with you my little tale of refactoring my solution to &lt;a href=&#34;http://adventofcode.com/day/13&#34;&gt;Advent Of Code Day 13&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a lovely tale of action, adventure, drama, and comedy.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s being with my first iteration of the problem.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;bufio&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;math&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;strings&amp;quot;

	&amp;quot;github.com/skarlso/goutils/arrayutils&amp;quot;
)

var seatingCombinations = make([][]string, 0)
var table = make(map[string][]map[string]int)
var keys = make([]string, 0)

//Person a person
type Person struct {
	// neighbour *Person
	name string
	like int
}

func main() {
	file, _ := os.Open(&amp;quot;input.txt&amp;quot;)
	defer file.Close()
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()
		split := strings.Split(line, &amp;quot; &amp;quot;)
		like, _ := strconv.Atoi(split[3]) //If lose -&amp;gt; * -1
		if split[2] == &amp;quot;lose&amp;quot; {
			like *= -1
		}
		table[split[0]] = append(table[split[0]], map[string]int{strings.Trim(split[10], &amp;quot;.&amp;quot;): like})
		if !arrayutils.ContainsString(keys, split[0]) {
			keys = append(keys, split[0])
		}
	}
	generatePermutation(keys, len(keys))
	fmt.Println(&amp;quot;Best seating efficiency:&amp;quot;, calculateSeatingEfficiancy())
}

func generatePermutation(s []string, n int) {
	if n == 1 {
		news := make([]string, len(s))
		copy(news, s)
		seatingCombinations = append(seatingCombinations, news)
	}
	for i := 0; i &amp;lt; n; i++ {
		s[i], s[n-1] = s[n-1], s[i]
		generatePermutation(s, n-1)
		s[i], s[n-1] = s[n-1], s[i]
	}
}

func calculateSeatingEfficiancy() int {
	bestSeating := math.MinInt64
	for _, v := range seatingCombinations {
		calculatedOrder := 0

		for i := range v {
			left := (i - 1) % len(v)
			//This is to work around the fact that in Go
			//modulo of a negative number will not return a positive number.
			//So -1 % 4 will not return 3 but -1. In that case we add length.
			if left &amp;lt; 0 {
				left += len(v)
			}
			right := (i + 1) % len(v)
			// fmt.Printf(&amp;quot;Left: %d; Right: %d\n&amp;quot;, left, right)
			leftLike := getLikeForTargetConnect(v[i], v[left])
			rightLike := getLikeForTargetConnect(v[i], v[right])
			// fmt.Printf(&amp;quot;Name: %s; Left:%d; Right:%d\n&amp;quot;, v[i], leftLike, rightLike)
			calculatedOrder += leftLike + rightLike
		}
		// fmt.Printf(&amp;quot;Order for: %v; Calc:%d\n&amp;quot;, v, calculatedOrder)
		if calculatedOrder &amp;gt; bestSeating {
			bestSeating = calculatedOrder
		}
	}

	return bestSeating
}

func getLikeForTargetConnect(name string, neighbour string) int {
	neighbours := table[name]
	for _, t := range neighbours {
		if v, ok := t[neighbour]; ok {
			return v
		}
	}
	return 0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is quiet large. And takes a bit of explaining. So what is happening here? We are putting the names which correspond with numbers and neighbours into a map which has a map as a value. The map contains seating information for a person. For example, next to Alice, a bunch of people can sit, and they have a certain relationship to Alice, represented by a number.&lt;/p&gt;

&lt;p&gt;We could, at this point, represent it with a graph, but that would be overkill.&lt;/p&gt;

&lt;p&gt;Permutation is simple because I choose to represent a Table with a Circular Slice. This means that a slice like this =&amp;gt; Alice, Bob, Tom; means that Alice is sitting next to Bob and Tom. So Alice&amp;rsquo;s neighbour of -1 (left) is in fact i-1 % 3. And Bob is i + 1. For Tom, Alice is i + 1 % 3. After we got this, we just permutate the possible combinations into slices of slices and iterate over them.&lt;/p&gt;

&lt;p&gt;The benchmark for this is terrible.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
================With Strings================
20	 589571259 ns/op
ok  	github.com/skarlso/goprojects/advent/day13/part1	11.873s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, my first thought was, convert everything I can to []byte. But because slices cannot be map keys, because map keys need to be comparable, we are still stuck with the same ns/ops.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//var seatingCombinations = make([][]string, 0)
//var keys = make([]string, 0)
var seatingCombinations = make([][][]byte, 0)
var keys = make([][]byte, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I adjusted the code to work with []byte instead. What can we do to fix the map though? One obvious gain is, not to use string as a key. Because strings are immutable, working with them always means copy-ing and that&amp;rsquo;s why they get to be very slow. So removing them from Keys and using Numbers instead will mean a huge gain for us.&lt;/p&gt;

&lt;p&gt;To do this, I created a map which maps names with numbers. I could hardcode them with iota, but that is a very bad thing to do. It would mean, that when I add a new name, I would have to go, and re-compile my code, because data changed. That&amp;rsquo;s not what we want.&lt;/p&gt;

&lt;p&gt;So, I added this little tid-bit into the for cycle when I&amp;rsquo;m reading in the file lines =&amp;gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;...
if _, ok := nameMapping[split[0]]; !ok {
    nameMapping[split[0]] = id
    id++
}
if _, ok := nameMapping[trimmedNeighbour]; !ok {
    nameMapping[trimmedNeighbour] = id
    id++
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Id starts as Zero. And nameMapping is a simple map[string]int. After this, we fix all the map calls, from &lt;code&gt;table[split[0]]&lt;/code&gt; to &lt;code&gt;table[nameMapping[split[0]]]&lt;/code&gt;. Table&amp;rsquo;s map will now work with int, but we can still work with strings otherwise.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;table[nameMapping[split[0]]] = append(table[nameMapping[split[0]]], map[int]int{nameMapping[trimmedNeighbour]: like})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This has now a marginally better performance as before:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;BenchmarkCalculateSeating	      50	  32637879 ns/op
ok  	github.com/skarlso/goprojects/advent/day13/part1	1.698s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But, we can still do a HUGE one better. Can you notice the other bottleneck? See, how keys are still []byte? That&amp;rsquo;s, now completely unnecessary. We can use int, since our keys are ints! &lt;em&gt;Permutation&lt;/em&gt; changes, and the retrieve.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;...
func generatePermutation(s []int, n int) {
...

...
func getLikeForTargetConnect(name int, neighbour int) int {
	neighbours := table[name]
	for _, t := range neighbours {
		if v, ok := t[neighbour]; ok {
			return v
		}
	}
	return 0
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Permutation was the Other huge performance consumption. Now, our run time is&amp;hellip;. drum rolls&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;BenchmarkCalculateSeating	   10000	    166431 ns/op
ok  	github.com/skarlso/goprojects/advent/day13/part1	1.695s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Down to 166431 ns/op!!! From 32637879 ns/op!! And notice how suddenly, go&amp;rsquo;s benchmark jumped up in sample count. Our code is now blazing fast. It&amp;rsquo;s 0.05% of the previous run! It&amp;rsquo;s almost &lt;strong&gt;200 times faster&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;We could still improve it here and there. I&amp;rsquo;m sure I&amp;rsquo;m doing some extra stuff which is not needed or could be made easier somehow. But I&amp;rsquo;m actually quiet happy with this solution right now.&lt;/p&gt;

&lt;p&gt;The full code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;bufio&amp;quot;
	&amp;quot;math&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;strings&amp;quot;

	&amp;quot;github.com/skarlso/goutils/arrayutils&amp;quot;
)

var seatingCombinations = make([][]int, 0)
var table = make(map[int][]map[int]int)
var keys = make([]int, 0)
var nameMapping = make(map[string]int)

//Person a person
type Person struct {
	// neighbour *Person
	name string
	like int
}

func main() {
	CalculatePerfectSeating()
}

//CalculatePerfectSeating returns the perfect seating order based on Love/Hate relations
func CalculatePerfectSeating() {
	file, _ := os.Open(&amp;quot;input.txt&amp;quot;)
	defer file.Close()
	scanner := bufio.NewScanner(file)
	id := 0
	for scanner.Scan() {
		line := scanner.Text()
		split := strings.Split(line, &amp;quot; &amp;quot;)
		trimmedNeighbour := strings.Trim(split[10], &amp;quot;.&amp;quot;)
		like, _ := strconv.Atoi(split[3]) //If lose -&amp;gt; * -1
		if _, ok := nameMapping[split[0]]; !ok {
			nameMapping[split[0]] = id
			id++
		}
		if _, ok := nameMapping[trimmedNeighbour]; !ok {
			nameMapping[trimmedNeighbour] = id
			id++
		}
		if split[2] == &amp;quot;lose&amp;quot; {
			like *= -1
		}
		table[nameMapping[split[0]]] = append(table[nameMapping[split[0]]], map[int]int{nameMapping[trimmedNeighbour]: like})
		if !arrayutils.ContainsInt(keys, nameMapping[split[0]]) {
			keys = append(keys, nameMapping[split[0]])
		}
	}
	generatePermutation(keys, len(keys))
	// fmt.Println(&amp;quot;Best seating efficiency:&amp;quot;, calculateSeatingEfficiancy())
}

func generatePermutation(s []int, n int) {
	if n == 1 {
		news := make([]int, len(s))
		copy(news, s)
		seatingCombinations = append(seatingCombinations, news)
	}
	for i := 0; i &amp;lt; n; i++ {
		s[i], s[n-1] = s[n-1], s[i]
		generatePermutation(s, n-1)
		s[i], s[n-1] = s[n-1], s[i]
	}
}

func calculateSeatingEfficiancy() int {
	bestSeating := math.MinInt64
	for _, v := range seatingCombinations {
		calculatedOrder := 0

		for i := range v {
			left := (i - 1) % len(v)
			//This is to work around the fact that in Go
			//modulo of a negative number will not return a positive number.
			//So -1 % 4 will not return 3 but -1. In that case we add length.
			if left &amp;lt; 0 {
				left += len(v)
			}
			right := (i + 1) % len(v)
			calculatedOrder += getLikeForTargetConnect(v[i], v[left]) + getLikeForTargetConnect(v[i], v[right])
		}
		if calculatedOrder &amp;gt; bestSeating {
			bestSeating = calculatedOrder
		}
	}

	return bestSeating
}

func getLikeForTargetConnect(name int, neighbour int) int {
	neighbours := table[name]
	for _, t := range neighbours {
		if v, ok := t[neighbour]; ok {
			return v
		}
	}
	return 0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, on github =&amp;gt; &lt;a href=&#34;https://github.com/Skarlso/goprojects/tree/master/advent/day13&#34;&gt;Advent Of Code Day 13&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you very much for reading, this has been a massive fun to write and to refactor.&lt;/p&gt;

&lt;p&gt;Have something to say? Please don&amp;rsquo;t hesitate.&lt;/p&gt;

&lt;p&gt;And as always,&lt;/p&gt;

&lt;p&gt;Have a nice day!&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Byte arrays and Channels</title>
      <link>https://skarlso.github.io/2016/01/01/byte-arrays-and-channels</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/01/01/byte-arrays-and-channels</guid>
      <description>&lt;p&gt;Hi folks and a Happy new Year!&lt;/p&gt;

&lt;p&gt;Today, I would like to show you some interesting things you can do with channels. Consider the following simple example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	generatedPassword := make(chan int, 100)
	correctPassword := make(chan int)
	defer close(generatedPassword)
	defer close(correctPassword)
	go passwordIncrement(generatedPassword)
	go checkPassword(generatedPassword, correctPassword)
	pass := &amp;lt;-correctPassword
	fmt.Println(pass)
}

func checkPassword(input &amp;lt;-chan int, output chan&amp;lt;- int) {
	for {
		p := &amp;lt;-input
		//Introduce lengthy operation here
		// time.Sleep(time.Second)
		fmt.Println(&amp;quot;Checking p:&amp;quot;, p)
		if p &amp;gt; 100000 {
			output &amp;lt;- p
		}
	}
}

func passwordIncrement(out chan&amp;lt;- int) {
	p := 0
	for {
		p++
		out &amp;lt;- p
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The premise is as follows. It launches two go routines. One, which generates passwords, and an other which checks for validity. The two routines talk to each other through the channel &lt;code&gt;generatedPassword&lt;/code&gt;. That&amp;rsquo;s the providing connections between them. The channel &lt;code&gt;correctPassword&lt;/code&gt; provides output for the &lt;code&gt;checkPassword&lt;/code&gt; routine.&lt;/p&gt;

&lt;p&gt;If there is data received from &lt;code&gt;correctPassword&lt;/code&gt; channel, we found our first password and there is no need to look further so we, print the password and quit. The channels will close with defer. This works. But the password is usually either a []byte or a string. With string, it still works.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	generatedPassword := make(chan string, 100)
	correctPassword := make(chan string)
	defer close(generatedPassword)
	defer close(correctPassword)
	go passwordIncrement(generatedPassword)
	go checkPassword(generatedPassword, correctPassword)
	pass := &amp;lt;-correctPassword
	fmt.Println(pass)
}

func checkPassword(input &amp;lt;-chan string, output chan&amp;lt;- string) {
	for {
		p := &amp;lt;-input
		//Introduce lengthy operation here
		// time.Sleep(time.Second)
		fmt.Println(&amp;quot;Checking p:&amp;quot;, p)
		if performSomeCheckingOperation(p) {
			output &amp;lt;- p
		}
	}
}

func generateNewPassword(out chan&amp;lt;- string) {
	var p string
	for {
		p = generate(p)
		out &amp;lt;- p
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The generating happens based on the previously generated password. For example, we increment, or permeate. aaaa, aaab, aaac&amp;hellip;&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;generatedPassword&lt;/code&gt; is a buffered channel, it gathers a 100 passwords from which checking retrieves passwords one by one and works on them in a slower process.&lt;/p&gt;

&lt;p&gt;Now, this is fine, but using []byte arrays will always be more powerful and faster. So we would like to use []byte. Like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	generatedPassword := make(chan []byte, 100)
	correctPassword := make(chan []byte)
	defer close(generatedPassword)
	defer close(correctPassword)
	go passwordIncrement(generatedPassword)
	go checkPassword(generatedPassword, correctPassword)
	pass := &amp;lt;-correctPassword
	fmt.Println(string(pass))
}

func checkPassword(input &amp;lt;-chan []byte, output chan&amp;lt;- []byte) {
	for {
		p := &amp;lt;-input
		//Introduce lengthy operation here
		// time.Sleep(time.Second)
		fmt.Println(&amp;quot;Checking p:&amp;quot;, string(p))
		if performSomeCheckingOperation(p) {
			output &amp;lt;- p
		}
	}
}

func generateNewPassword(out chan&amp;lt;- []byte) {
	var p []byte
	for {
		p = generate(p)
		out &amp;lt;- p
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will not work. Why? Because []byte is a slice and thus will be constantly overwritten. The checking go routine will always only check the last data and many generated passwords will be lost. This is also noted in go&amp;rsquo;s scanner here =&amp;gt; &lt;a href=&#34;https://golang.org/pkg/bufio/#Scanner.Bytes&#34;&gt;Scanner.Bytes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have a couple of options here.&lt;/p&gt;

&lt;p&gt;We could use &lt;code&gt;string&lt;/code&gt; channels and convert to []byte after. This is still okay, because the conversion isn&amp;rsquo;t very CPU intensive.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;...
generatedPassword := make(chan string, 100)
correctPassword := make(chan string)
...
p := []byte(&amp;lt;-input) //This will work very nicely.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Options two would be If you have a fixed password to handle, fix data, for example MD5 hash, you can use a byte array. Like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

const PASSWD=13

func main() {
	generatedPassword := make(chan [PASSWD]byte, 100)
	correctPassword := make(chan [PASSWD]byte)
	defer close(generatedPassword)
	defer close(correctPassword)
	go passwordIncrement(generatedPassword)
	go checkPassword(generatedPassword, correctPassword)
	pass := &amp;lt;-correctPassword
	fmt.Println(string(pass))
}

func checkPassword(input &amp;lt;-chan [PASSWD]byte, output chan&amp;lt;- [PASSWD]byte) {
	for {
		p := &amp;lt;-input
		//Introduce lengthy operation here
		// time.Sleep(time.Second)
		fmt.Println(&amp;quot;Checking p:&amp;quot;, string(p))
		if performSomeCheckingOperation(p) {
			output &amp;lt;- p
		}
	}
}

func generateNewPassword(out chan&amp;lt;- [PASSWD]byte) {
	var p [PASSWD]byte
	for {
		p = generate(p)
		out &amp;lt;- p
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is also one solution. If you have to convert between the two, could go with &lt;code&gt;p := byte[:]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Conclusion is, that use conversion rather than string types and be aware that using slices in channels is dangerous.&lt;/p&gt;

&lt;p&gt;Thanks for reading!
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use Byte Array Instead of Strings</title>
      <link>https://skarlso.github.io/2015/12/29/use-byte-array-instead-of-strings/</link>
      <pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/29/use-byte-array-instead-of-strings/</guid>
      <description>&lt;p&gt;Hello Folks.&lt;/p&gt;

&lt;p&gt;This is just a quick post on the topic and a reminder for myself and everybody to ALWAYS USE []BYTE INSTEAD OF STRINGS.&lt;/p&gt;

&lt;p&gt;[]Byte is marginally faster than a simple Strings. In fact, I would say using []byte should be the standard instead of strings.&lt;/p&gt;

&lt;p&gt;Sample code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package solutions

import &amp;quot;fmt&amp;quot;

const (
    //INPUT input
    INPUT = &amp;quot;1321131112&amp;quot;
    //LIMIT limit
    LIMIT = 50
)

//LookAndSay translates numbers according to Look and Say algo
func LookAndSay(s string, c chan string) {
    charCount := 1
    look := &amp;quot;&amp;quot;
    for i := range s {
        if i+1 &amp;lt; len(s) {
            if s[i] == s[i+1] {
                charCount++
            } else {
                look += fmt.Sprintf(&amp;quot;%d%s&amp;quot;, charCount, string(s[i]))
                charCount = 1
            }
        } else {
            look += fmt.Sprintf(&amp;quot;%d%s&amp;quot;, charCount, string(s[i]))
        }
    }
    c &amp;lt;- look
}

//GetLengthOfLookAndSay Retrieve the Length of a lookandsay done Limit times
func GetLengthOfLookAndSay() {
    c := make(chan string, 0)
    go LookAndSay(INPUT, c)
    finalString := &amp;lt;-c
    for i := 0; i &amp;lt;= LIMIT-2; i++ {
        go LookAndSay(finalString, c)
        finalString = &amp;lt;-c
        // fmt.Println(finalString)
    }
    fmt.Println(&amp;quot;Lenght of final String:&amp;quot;, len(finalString))
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This, with the limit raised to 50 run for ~1 hour. Even with the routines although they were just for show since they had to wait for each others input.&lt;/p&gt;

&lt;p&gt;Now change this to []byte and the run time was almost under 2 seconds on my machine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package solutions

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;strconv&amp;quot;
)

const (
    //LIMIT limit
    LIMIT = 50
)

//INPUT puzzle input
//This used to be a string until I was reminded that BYTE ARRAY IS ALWAYS FASTER!
var INPUT = []byte(&amp;quot;1321131112&amp;quot;)

//LookAndSay translates numbers according to Look and Say algo
func LookAndSay(s []byte) (look []byte) {
    charCount := 1
    for i := range s {
        if i+1 &amp;lt; len(s) {
            if s[i] == s[i+1] {
                charCount++
            } else {
                b := []byte(strconv.FormatInt(int64(charCount), 10))
                look = append(look, b[0], s[i])
                charCount = 1
            }
        } else {
            b := []byte(strconv.FormatInt(int64(charCount), 10))
            look = append(look, b[0], s[i])
        }
    }
    return
}

//GetLengthOfLookAndSay Retrieve the Length of a lookandsay done Limit times
func GetLengthOfLookAndSay() {
    finalString := INPUT
    for i := 0; i &amp;lt;= LIMIT-1; i++ {
        finalString = LookAndSay(finalString)
    }
    fmt.Println(&amp;quot;Lenght of final String:&amp;quot;, len(finalString))
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the solution for Day 10 on &lt;a href=&#34;http://adventofcode.com/&#34;&gt;AdventOfCode&lt;/a&gt; by the way.&lt;/p&gt;

&lt;p&gt;Thanks for readin&amp;rsquo;.
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use Byte Slice Instead of Strings</title>
      <link>https://skarlso.github.io/2015/12/29/use-byte-slice-instead-of-strings/</link>
      <pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/29/use-byte-slice-instead-of-strings/</guid>
      <description>&lt;p&gt;Hello Folks.&lt;/p&gt;

&lt;p&gt;This is just a quick post on the topic and a reminder for myself and everybody to ALWAYS USE []BYTE INSTEAD OF STRINGS.&lt;/p&gt;

&lt;p&gt;[]Byte is marginally faster than a simple Strings. In fact, I would say using []byte should be the standard instead of strings.&lt;/p&gt;

&lt;p&gt;Sample code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package solutions

import &amp;quot;fmt&amp;quot;

const (
    //INPUT input
    INPUT = &amp;quot;1321131112&amp;quot;
    //LIMIT limit
    LIMIT = 50
)

//LookAndSay translates numbers according to Look and Say algo
func LookAndSay(s string, c chan string) {
    charCount := 1
    look := &amp;quot;&amp;quot;
    for i := range s {
        if i+1 &amp;lt; len(s) {
            if s[i] == s[i+1] {
                charCount++
            } else {
                look += fmt.Sprintf(&amp;quot;%d%s&amp;quot;, charCount, string(s[i]))
                charCount = 1
            }
        } else {
            look += fmt.Sprintf(&amp;quot;%d%s&amp;quot;, charCount, string(s[i]))
        }
    }
    c &amp;lt;- look
}

//GetLengthOfLookAndSay Retrieve the Length of a lookandsay done Limit times
func GetLengthOfLookAndSay() {
    c := make(chan string, 0)
    go LookAndSay(INPUT, c)
    finalString := &amp;lt;-c
    for i := 0; i &amp;lt;= LIMIT-2; i++ {
        go LookAndSay(finalString, c)
        finalString = &amp;lt;-c
        // fmt.Println(finalString)
    }
    fmt.Println(&amp;quot;Lenght of final String:&amp;quot;, len(finalString))
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This, with the limit raised to 50 run for ~1 hour. Even with the routines although they were just for show since they had to wait for each others input.&lt;/p&gt;

&lt;p&gt;Now change this to []byte and the run time was almost under 2 seconds on my machine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package solutions

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;strconv&amp;quot;
)

const (
    //LIMIT limit
    LIMIT = 50
)

//INPUT puzzle input
//This used to be a string until I was reminded that BYTE ARRAY IS ALWAYS FASTER!
var INPUT = []byte(&amp;quot;1321131112&amp;quot;)

//LookAndSay translates numbers according to Look and Say algo
func LookAndSay(s []byte) (look []byte) {
    charCount := 1
    for i := range s {
        if i+1 &amp;lt; len(s) {
            if s[i] == s[i+1] {
                charCount++
            } else {
                b := []byte(strconv.FormatInt(int64(charCount), 10))
                look = append(look, b[0], s[i])
                charCount = 1
            }
        } else {
            b := []byte(strconv.FormatInt(int64(charCount), 10))
            look = append(look, b[0], s[i])
        }
    }
    return
}

//GetLengthOfLookAndSay Retrieve the Length of a lookandsay done Limit times
func GetLengthOfLookAndSay() {
    finalString := INPUT
    for i := 0; i &amp;lt;= LIMIT-1; i++ {
        finalString = LookAndSay(finalString)
    }
    fmt.Println(&amp;quot;Lenght of final String:&amp;quot;, len(finalString))
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the solution for Day 10 on &lt;a href=&#34;http://adventofcode.com/&#34;&gt;AdventOfCode&lt;/a&gt; by the way.&lt;/p&gt;

&lt;p&gt;Thanks for readin&amp;rsquo;.
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Recursive Letter Frequency Count</title>
      <link>https://skarlso.github.io/2015/12/23/recursive-freq-count/</link>
      <pubDate>Wed, 23 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/23/recursive-freq-count/</guid>
      <description>&lt;p&gt;Hello everybody!&lt;/p&gt;

&lt;p&gt;I wanted to do a sort post about word frequency count. I did it many times now and I was curious as how a recursive solution would perform as opposed to looping.&lt;/p&gt;

&lt;p&gt;So I wrote it up quickly and added a few benchmarks with different sized data.&lt;/p&gt;

&lt;p&gt;First&amp;hellip;. The code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var freqMap = make(map[string]int, 0)

func countLettersRecursive(s string) string {
    if len(s) == 0 {
        return s
    }
    freqMap[string(s[0])]++
    return countLettersRecursive(s[1:])
}

func countLettersLoop(s string) {
    for _, v := range s {
        freqMap[string(v)]++
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Very simple. The first run with a small sample: &amp;ldquo;asdfasdfasdfasdfasdf&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;BenchmarkLoopFrequencyCount  5000000           377 ns/op
BenchmarkRecursiveFrequencyCount     5000000           380 ns/op
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They almost equal but Recursive seems to be lagging behind. So I increased the sample size to a text which was 496 long.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PASS
BenchmarkLoopFrequencyCount    30000         53336 ns/op
BenchmarkRecursiveFrequencyCount       20000         61780 ns/op
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, as expected, recursing is less performant than looping. Also, I think my machine would die from a larger data size&amp;hellip;&lt;/p&gt;

&lt;p&gt;But the recursive looks so much cooler though.&lt;/p&gt;

&lt;p&gt;Thanks for reading!
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go Development Environment</title>
      <link>https://skarlso.github.io/2015/12/08/go-development-environment/</link>
      <pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/08/go-development-environment/</guid>
      <description>&lt;p&gt;Hello folks.&lt;/p&gt;

&lt;p&gt;Here is a little something I&amp;rsquo;ve put together, since I&amp;rsquo;m doing it a lot.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Skarlso/godevelopment&#34;&gt;Go Development Environment&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I have a project I&amp;rsquo;d like to contribute, like &lt;a href=&#34;https://gohugo.io&#34;&gt;GoHugo&lt;/a&gt;, I have to setup a development environment, because most of the times, I&amp;rsquo;m on a Mac. And on OSX things work differently. I like to work in a Linux environment since that&amp;rsquo;s what most of the projects are built on.&lt;/p&gt;

&lt;p&gt;So here you go. Just download the files, and say &lt;strong&gt;vagrant up&lt;/strong&gt; which will do the magic.&lt;/p&gt;

&lt;p&gt;This sets up &lt;a href=&#34;https://github.com/fatih/vim-go&#34;&gt;vim-go&lt;/a&gt; with code completion given by YouCompleteMe and some go features like, fmt on save and build error highlighting.&lt;/p&gt;

&lt;p&gt;Also sets up ctags which will give you tags and the ability to do GoTo Declaration.&lt;/p&gt;

&lt;p&gt;Installs a bunch of utilities, and configures Go. There is an option to install docker as well. But it&amp;rsquo;s ignored at the moment.&lt;/p&gt;

&lt;p&gt;Just uncomment this line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#config.vm.provision &amp;quot;shell&amp;quot;, path: &amp;quot;install_docker.sh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any questions or request, feel free to submit an Issue!&lt;/p&gt;

&lt;p&gt;Thanks for reading!
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome To My New Blog</title>
      <link>https://skarlso.github.io/2015/12/07/welcome-to-my-new-blog/</link>
      <pubDate>Mon, 07 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/07/welcome-to-my-new-blog/</guid>
      <description>

&lt;h1 id=&#34;hello-folks:a50c05b7309340eeb1873281740215f2&#34;&gt;Hello Folks&lt;/h1&gt;

&lt;p&gt;Welcome to my new blog. I decided to move away for a number of reasons, but setting up a static page blog site is very cool if you don&amp;rsquo;t directly use a database. Since posts are just posts and I have a different way of hosting images, this really was just a matter of time.&lt;/p&gt;

&lt;p&gt;And &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; / Github pages provided the tools which made this move possible.&lt;/p&gt;

&lt;p&gt;Also, I love writing this post in Markdown. I always liked the formatting rules of it, so this is quiet the blast.&lt;/p&gt;

&lt;p&gt;Code will look a little more readble now as well:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {
    handlerChain := alice.New(Logging, PanicHandler)
    router := mux.NewRouter().StrictSlash(true)
    router.Handle(&amp;quot;/create&amp;quot;, handlerChain.ThenFunc(createIssue)).Methods(&amp;quot;POST&amp;quot;)
    router.Handle(&amp;quot;/&amp;quot;, handlerChain.ThenFunc(renderMainPage)).Methods(&amp;quot;GET&amp;quot;)
    router.PathPrefix(&amp;quot;/css/&amp;quot;).Handler(http.StripPrefix(&amp;quot;/css/&amp;quot;, http.FileServer(http.Dir(&amp;quot;./css&amp;quot;))))
    log.Printf(&amp;quot;Starting server to listen on port: 8989...&amp;quot;)
    http.ListenAndServe(&amp;quot;:8989&amp;quot;, router)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Much easier on the eyes. And linking is a breeze as well.&lt;/p&gt;

&lt;h2 id=&#34;things-to-notice:a50c05b7309340eeb1873281740215f2&#34;&gt;Things to notice&lt;/h2&gt;

&lt;p&gt;There is now a content on the side which will list the sections in a post. And there is an estimated read timer in the post&amp;rsquo;s title. It takes average reading speed and wordcount into account.&lt;/p&gt;

&lt;p&gt;Anyhow, thanks for joining me in the new realm, and happy reading!
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go JIRA API client</title>
      <link>https://skarlso.github.io/2015/11/20/go-jira-api-client/</link>
      <pubDate>Fri, 20 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/11/20/go-jira-api-client/</guid>
      <description>&lt;p&gt;Hi folks.&lt;/p&gt;

&lt;p&gt;So, I was playing around and created a client for JIRA written in Go. It was nice to do some JSON transformation. And sending POSTS was really trivial.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s still in it&amp;#8217;s infancy and I have a couple of more features I want to implement, but, here is the code&amp;#8230;&lt;/p&gt;

&lt;div class=&#34;wp_syntax&#34;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&#34;code&#34;&gt;
        &lt;pre class=&#34;go&#34; style=&#34;font-family:monospace;&#34;&gt;&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;package&lt;/span&gt; main
&amp;nbsp;
&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;bytes&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;encoding/json&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;flag&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;io/ioutil&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;log&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;net/http&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;os&#34;&lt;/span&gt;
&amp;nbsp;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;github.com/BurntSushi/toml&#34;&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;var&lt;/span&gt; configFile &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;~/.jira_config.toml&#34;&lt;/span&gt;
&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;var&lt;/span&gt; parameter &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;var&lt;/span&gt; flags &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    Comment     &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
    Description &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
    IssueKey    &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
    Priority    &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
    Resolution  &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
    Title       &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
    Project     &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//Issue is a representation of a Jira Issue&lt;/span&gt;
&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;type&lt;/span&gt; Issue &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    Fields &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        Project &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
            Key &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;key&#34;`&lt;/span&gt;
        &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;project&#34;`&lt;/span&gt;
        Summary     &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;summary&#34;`&lt;/span&gt;
        Description &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;description&#34;`&lt;/span&gt;
        Issuetype   &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
            Name &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;name&#34;`&lt;/span&gt;
        &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;issuetype&#34;`&lt;/span&gt;
        Priority &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
            ID &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;id&#34;`&lt;/span&gt;
        &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;priority&#34;`&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;fields&#34;`&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//Transition defines a transition json object. Used for starting, stoppinp&lt;/span&gt;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//generally for state stranfer&lt;/span&gt;
&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;type&lt;/span&gt; Transition &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    Fields &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        Resolution &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
            Name &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;name&#34;`&lt;/span&gt;
        &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;resolution&#34;`&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;fields&#34;`&lt;/span&gt;
    Transition &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        ID &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;id&#34;`&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;transition&#34;`&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//Credentials a representation of a JIRA config which helds API permissions&lt;/span&gt;
&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;type&lt;/span&gt; Credentials &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    Username &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
    Password &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
    URL      &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; init&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    flag&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;StringVar&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&amp;flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Comment&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;m&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Default Comment&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;A Comment when changing the status of an Issue.&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    flag&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;StringVar&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;&amp;&lt;/span&gt;flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Description&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;d&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Default Description&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Provide a description for a newly created Issue.&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    flag&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;StringVar&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;&amp;&lt;/span&gt;flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Priority&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;p&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;2&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;The priority of an Issue which will be set.&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    flag&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;StringVar&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;&amp;&lt;/span&gt;flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;IssueKey&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;k&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Issue key of an issue.&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    flag&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;StringVar&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;&amp;&lt;/span&gt;flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Resolution&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;r&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Done&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Resolution when an issue is closed. Ex.: Done, Fixed, Won&#39;t fix.&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    flag&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;StringVar&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;&amp;&lt;/span&gt;flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Title&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;t&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Default Title&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Title of an Issue.&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    flag&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;StringVar&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;&amp;&lt;/span&gt;flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Project&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;o&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;IT&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Define a Project to create a ticket in.&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    flag&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Parse&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;cred &lt;span style=&#34;color: #339933;&#34;&gt;*&lt;/span&gt;Credentials&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; initConfig&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; _&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; os&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Stat&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;configFile&lt;span style=&#34;color: #339933;&#34;&gt;);&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        log&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Fatalf&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Error using config file: %v&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; err&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; _&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; toml&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;DecodeFile&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;configFile&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; cred&lt;span style=&#34;color: #339933;&#34;&gt;);&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        log&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Fatal&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Error during decoding toml config: &#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; err&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; main&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #000066;&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;flag&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Args&lt;span style=&#34;color: #339933;&#34;&gt;())&lt;/span&gt; &amp;lt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        log&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Fatal&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Please provide an action to take. Usage information:&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
    parameter &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; flag&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Arg&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;switch&lt;/span&gt; parameter &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;close&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;:&lt;/span&gt;
        closeIssue&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;IssueKey&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;start&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;:&lt;/span&gt;
        startIssue&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;IssueKey&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;create&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;:&lt;/span&gt;
        createIssue&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; closeIssue&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;issueKey &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; issueKey &lt;span style=&#34;color: #339933;&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;&#34;&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        log&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Fatal&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Please provide an issueID with -k&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
    fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Closing issue number: &#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; issueKey&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
&amp;nbsp;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;var&lt;/span&gt; trans Transition
&amp;nbsp;
    &lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//TODO: Add the ability to define a comment for the close reason&lt;/span&gt;
    trans&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Fields&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Resolution&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Name&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Resolution&lt;/span&gt;
    trans&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Transition&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;ID&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;2&#34;&lt;/span&gt;
    marhsalledTrans&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; json&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Marshal&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;trans&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        log&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Fatal&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Error occured when marshaling transition: &#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; err&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
    fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Marshalled:&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; trans&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    sendRequest&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;marhsalledTrans&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;POST&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; issueKey&lt;span style=&#34;color: #339933;&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;/transitions?expand=transitions.fields&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; startIssue&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;issueID &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; issueID &lt;span style=&#34;color: #339933;&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;&#34;&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        log&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Fatal&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Please provide an issueID with -i&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
    fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Starting issue number:&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; issueID&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; createIssue&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Println&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Creating new issue.&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;var&lt;/span&gt; issue Issue
    issue&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Fields&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Description &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Description
    issue&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Fields&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Priority&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;ID &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Priority
    issue&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Fields&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Summary &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Title
    issue&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Fields&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Project&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Key &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Project
    issue&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Fields&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Issuetype&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Name &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Task&#34;&lt;/span&gt;
    marshalledIssue&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; json&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Marshal&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;issue&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        log&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Fatal&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Error occured when Marshaling Issue:&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; err&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
    sendRequest&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;marshalledIssue&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;POST&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; sendRequest&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;jsonStr &lt;span style=&#34;color: #339933;&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color: #993333;&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; method &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; url &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    cred &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; &amp;Credentials&lt;span style=&#34;color: #339933;&#34;&gt;{}&lt;/span&gt;
    cred&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;initConfig&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt;
    fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Println&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Json:&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;jsonStr&lt;span style=&#34;color: #339933;&#34;&gt;))&lt;/span&gt;
    req&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; http&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;NewRequest&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;method&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; cred&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;URL&lt;span style=&#34;color: #339933;&#34;&gt;+&lt;/span&gt;url&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; bytes&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;NewBuffer&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;jsonStr&lt;span style=&#34;color: #339933;&#34;&gt;))&lt;/span&gt;
    req&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Header&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Set&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Content-Type&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;application/json&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    req&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;SetBasicAuth&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;cred&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Username&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; cred&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Password&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
&amp;nbsp;
    client &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; &amp;http&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Client&lt;span style=&#34;color: #339933;&#34;&gt;{}&lt;/span&gt;
    resp&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; client&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Do&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;req&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #000066;&#34;&gt;panic&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;err&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;defer&lt;/span&gt; resp&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Body&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Close&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt;
&amp;nbsp;
    fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Println&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;response Status:&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; resp&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Status&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;response Headers:&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; resp&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Header&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    body&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; _ &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; ioutil&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;ReadAll&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;resp&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Body&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;response Body:&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;body&lt;span style=&#34;color: #339933;&#34;&gt;))&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;It can also be found under my github page: &lt;a href=&#34;https://github.com/Skarlso/goprojects/tree/master/gojira&#34; target=&#34;_blank&#34;&gt;GoJira Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feel free to open up issues if you would like to use it and need some features which you would find interesting. Currently the username and password for the API are stored in a local config file in your home folder. Later on, I&amp;#8217;ll add the ability to have a token rather than a username:password combination.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The One Hundred Day GitHub Challenge</title>
      <link>https://skarlso.github.io/2015/11/15/the-one-hundred-day-github-challenge/</link>
      <pubDate>Sun, 15 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/11/15/the-one-hundred-day-github-challenge/</guid>
      <description>&lt;p&gt;Hello folks.&lt;/p&gt;

&lt;p&gt;Today, I present to you the One Hundred Day Github Challenge.&lt;/p&gt;

&lt;p&gt;The rules are simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Minimum of &lt;strong&gt;One&lt;/strong&gt; commit every day for a &lt;strong&gt;Hundred days&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Commit has to be &lt;strong&gt;meaningful&lt;/strong&gt; but can be as little as a fix in a Readme.md.&lt;/li&gt;
&lt;li&gt;Doesn&amp;#8217;t matter if you are on vacation, there are no exceptions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;There. Are. No. Exceptions.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;If you &lt;strong&gt;fail&lt;/strong&gt; a day, you have to &lt;strong&gt;start over&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No cheating.&lt;/strong&gt; You only cheat yourself, so this is really up to you.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let me be more clear here, because it seems I wasn&amp;#8217;t clear enough. What you make out of this challenge, it&amp;#8217;s up to you. If you just update a readme.md for hundred days, that&amp;#8217;s fine. Just do it every day. It&amp;#8217;s a commitment. At least you&amp;#8217;ll have a nice Readme.&lt;/p&gt;

&lt;p&gt;Also, let me be clear on another thing. THERE ARE NO EXCEPTIONS. Even on holidays. No. Exceptions.&lt;/p&gt;

&lt;p&gt;So there you have it. It&amp;#8217;s easy, but then again, it&amp;#8217;s not.&lt;/p&gt;

&lt;p&gt;Mine starts today! 100&amp;#8230;&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;And happy coding.&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go Progress Quest</title>
      <link>https://skarlso.github.io/2015/11/09/go-progress-quest/</link>
      <pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/11/09/go-progress-quest/</guid>
      <description>&lt;p&gt;Hi Folks.&lt;/p&gt;

&lt;p&gt;I started to build a Progress Quest type of web app in Go.&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;d like to join, or just tag along, please drop by here =&amp;gt; &lt;a href=&#34;https://github.com/Skarlso/goprogressquest&#34; target=&#34;_blank&#34;&gt;Go Progress Quest&lt;/a&gt; and feel free to submit an issue if you have an idea, or would like to contribute!&lt;/p&gt;

&lt;p&gt;I will try and document the Progress&amp;#8230;&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kill a Program on Connecting to a specific WiFi – OSX</title>
      <link>https://skarlso.github.io/2015/10/26/kill-a-program-on-connecting-to-a-specific-wifi-osx/</link>
      <pubDate>Mon, 26 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/10/26/kill-a-program-on-connecting-to-a-specific-wifi-osx/</guid>
      <description>&lt;p&gt;Hi folks.&lt;/p&gt;

&lt;p&gt;If you have the tendency, like me, to forget that you are on the corporate VPN, or leave a certain software open when you bring your laptop to work, this might be helpful to you too.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s a small script which kills a program when you change your Wifi network.&lt;/p&gt;

&lt;p&gt;Script:&lt;/p&gt;

&lt;div class=&#34;wp_syntax&#34;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&#34;code&#34;&gt;
        &lt;pre class=&#34;bash&#34; style=&#34;font-family:monospace;&#34;&gt;&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;#!/bin/bash&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;function&lt;/span&gt; log &lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span style=&#34;color: #007800;&#34;&gt;directory&lt;/span&gt;=&lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;/Users/&amp;lt;username&amp;gt;/wifi_detect&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #007800;&#34;&gt;log_dir_exists&lt;/span&gt;=&lt;span style=&#34;color: #c20cb9; font-weight: bold;&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;&amp;#91;&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;!&lt;/span&gt; &lt;span style=&#34;color: #660033;&#34;&gt;-d&lt;/span&gt; &lt;span style=&#34;color: #007800;&#34;&gt;$directory&lt;/span&gt; &lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;&amp;#93;&lt;/span&gt;; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;then&lt;/span&gt;
        &lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;Attempting to create =&amp;gt; &lt;span style=&#34;color: #007800;&#34;&gt;$directory&lt;/span&gt;&#34;&lt;/span&gt;
        &lt;span style=&#34;color: #c20cb9; font-weight: bold;&#34;&gt;mkdir&lt;/span&gt; &lt;span style=&#34;color: #660033;&#34;&gt;-p&lt;/span&gt; &lt;span style=&#34;color: #007800;&#34;&gt;$directory&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;&amp;#91;&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;!&lt;/span&gt; &lt;span style=&#34;color: #660033;&#34;&gt;-d&lt;/span&gt; &lt;span style=&#34;color: #007800;&#34;&gt;$directory&lt;/span&gt; &lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;&amp;#93;&lt;/span&gt;; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;then&lt;/span&gt;
            &lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;Could not create directory. Continue to log to echo.&#34;&lt;/span&gt;
            &lt;span style=&#34;color: #007800;&#34;&gt;log_dir_exists&lt;/span&gt;=&lt;span style=&#34;color: #c20cb9; font-weight: bold;&#34;&gt;false&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;fi&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;fi&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #007800;&#34;&gt;$log_dir_exists&lt;/span&gt; ; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;then&lt;/span&gt;
        &lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;&lt;span style=&#34;color: #007800;&#34;&gt;$(date)&lt;/span&gt;:$1&#34;&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;&lt;span style=&#34;color: #007800;&#34;&gt;$directory&lt;/span&gt;/log.txt&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;else&lt;/span&gt;
        &lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;&lt;span style=&#34;color: #007800;&#34;&gt;$(date)&lt;/span&gt;:$1&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;function&lt;/span&gt; check_program &lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span style=&#34;color: #007800;&#34;&gt;to_kill&lt;/span&gt;=&lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;[&lt;span style=&#34;color: #007800;&#34;&gt;${1::1}&lt;/span&gt;]&lt;span style=&#34;color: #007800;&#34;&gt;${1:1}&lt;/span&gt;&#34;&lt;/span&gt;
    log &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;Checking if &lt;span style=&#34;color: #007800;&#34;&gt;$to_kill&lt;/span&gt; really quit.&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #007800;&#34;&gt;ps&lt;/span&gt;=$&lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #c20cb9; font-weight: bold;&#34;&gt;ps&lt;/span&gt; aux &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #c20cb9; font-weight: bold;&#34;&gt;grep&lt;/span&gt; &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;&lt;span style=&#34;color: #007800;&#34;&gt;$to_kill&lt;/span&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;&amp;#41;&lt;/span&gt;
    log &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;ps =&amp;gt; &lt;span style=&#34;color: #007800;&#34;&gt;$ps&lt;/span&gt;&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;&amp;#91;&lt;/span&gt; &lt;span style=&#34;color: #660033;&#34;&gt;-z&lt;/span&gt; &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;&lt;span style=&#34;color: #007800;&#34;&gt;$ps&lt;/span&gt;&#34;&lt;/span&gt; &lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;&amp;#93;&lt;/span&gt;; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;then&lt;/span&gt;
    &lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;# 0 - True&lt;/span&gt;
        &lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000;&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;else&lt;/span&gt;
    &lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;# 1 - False&lt;/span&gt;
        &lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000;&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;function&lt;/span&gt; kill_program &lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;&amp;#123;&lt;/span&gt;
    log &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;Killing program&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;`&lt;/span&gt;pkill &lt;span style=&#34;color: #660033;&#34;&gt;-f&lt;/span&gt; &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;$1&#34;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;`&lt;/span&gt;
    &lt;span style=&#34;color: #c20cb9; font-weight: bold;&#34;&gt;sleep&lt;/span&gt; &lt;span style=&#34;color: #000000;&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;!&lt;/span&gt; check_program &lt;span style=&#34;color: #007800;&#34;&gt;$1&lt;/span&gt; ; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;then&lt;/span&gt;
    log &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;$1 Did not quit!&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;else&lt;/span&gt;
    log &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;$1 quit successfully&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #007800;&#34;&gt;wifi_name&lt;/span&gt;=$&lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;&amp;#40;&lt;/span&gt;networksetup &lt;span style=&#34;color: #660033;&#34;&gt;-getairportnetwork&lt;/span&gt; en0 &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #c20cb9; font-weight: bold;&#34;&gt;awk&lt;/span&gt; &lt;span style=&#34;color: #660033;&#34;&gt;-F&lt;/span&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;: &#34;&lt;/span&gt; &lt;span style=&#34;color: #ff0000;&#34;&gt;&#39;{print $2}&#39;&lt;/span&gt;&lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;&amp;#41;&lt;/span&gt;
log &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;Wifi name: &lt;span style=&#34;color: #007800;&#34;&gt;$wifi_name&lt;/span&gt;&#34;&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;&amp;#91;&lt;/span&gt; &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;&lt;span style=&#34;color: #007800;&#34;&gt;$wifi_name&lt;/span&gt;&#34;&lt;/span&gt; = &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;&amp;lt;wifi_name&amp;gt;&#34;&lt;/span&gt; &lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;&amp;#93;&lt;/span&gt;; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;then&lt;/span&gt;
    log &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;On corporate network... Killing Program&#34;&lt;/span&gt;
    kill_program &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;&amp;lt;programname&amp;gt;&#34;&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;&amp;#91;&lt;/span&gt; &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;&lt;span style=&#34;color: #007800;&#34;&gt;$wifi_name&lt;/span&gt;&#34;&lt;/span&gt; = &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;&amp;lt;home_wifi_name&amp;gt;&#34;&lt;/span&gt; &lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;&amp;#93;&lt;/span&gt;; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;then&lt;/span&gt;
    &lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;# Kill &amp;lt;program&amp;gt; if enabled and if on &amp;lt;home_wifi&amp;gt; and if Tunnelblick is running.&lt;/span&gt;
    log &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;Not on corporate network... Killing &amp;lt;program&amp;gt; if Tunnelblick is active.&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;!&lt;/span&gt; check_program &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;Tunnelblick&#34;&lt;/span&gt; ; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;then&lt;/span&gt;
    log &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;Tunnelblick is active. Killing &amp;lt;program&amp;gt;&#34;&lt;/span&gt;
    kill_program &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;&amp;lt;program&amp;gt;&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;else&lt;/span&gt;
    log &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;All good... Happy coding.&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;else&lt;/span&gt;
    log &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;No known Network...&#34;&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;fi&lt;/span&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Now, the trick is, on OSX to only trigger this when your network changes. For this, you can have a &amp;#8216;launchd&amp;#8217; daemon, which is configured to watch three files which relate to a network being changed.&lt;/p&gt;

&lt;p&gt;The script sits under your ~/Library/LaunchAgents folder. Create something like, com.username.checknetwork.plist.&lt;/p&gt;

&lt;div class=&#34;wp_syntax&#34;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&#34;code&#34;&gt;
        &lt;pre class=&#34;xml&#34; style=&#34;font-family:monospace;&#34;&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;?xml&lt;/span&gt; &lt;span style=&#34;color: #000066;&#34;&gt;version&lt;/span&gt;=&lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;1.0&#34;&lt;/span&gt; &lt;span style=&#34;color: #000066;&#34;&gt;encoding&lt;/span&gt;=&lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;UTF-8&#34;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&#34;color: #00bbdd;&#34;&gt;&amp;lt;!DOCTYPE plist PUBLIC &#34;-//Apple Computer//DTD PLIST 1.0//EN&#34; \&lt;/span&gt;
&lt;span style=&#34;color: #00bbdd;&#34;&gt; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;plist&lt;/span&gt; &lt;span style=&#34;color: #000066;&#34;&gt;version&lt;/span&gt;=&lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;1.0&#34;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;dict&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;key&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;Label&lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;/key&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;string&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;ifup.ddns&lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;/string&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&amp;nbsp;
  &lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;key&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;LowPriorityIO&lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;/key&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;true&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&amp;nbsp;
  &lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;key&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;ProgramArguments&lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;/key&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;array&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;string&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;/Users/username/scripts/ddns-update.sh&lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;/string&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;/array&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&amp;nbsp;
  &lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;key&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;WatchPaths&lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;/key&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;array&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;string&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;/etc/resolv.conf&lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;/string&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;string&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;/Library/Preferences/SystemConfiguration/NetworkInterfaces.plist&lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;/string&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;string&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;/Library/Preferences/SystemConfiguration/com.apple.airport.preferences.plist&lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;/string&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;/array&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&amp;nbsp;
  &lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;key&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;RunAtLoad&lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;/key&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;true&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;/dict&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&#34;color: #009900;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;lt;/plist&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Now, when you change your network, to whatever your corporate network is, you&amp;#8217;ll kill Sublime.&lt;/p&gt;

&lt;p&gt;Hope this helps somebody.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Circular buffer in Go</title>
      <link>https://skarlso.github.io/2015/10/15/circular-buffer-in-go/</link>
      <pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/10/15/circular-buffer-in-go/</guid>
      <description>&lt;p&gt;I&amp;#8217;m proud of this one too. No peaking. I like how go let&amp;#8217;s you do this kind of stuff in a very nice way.&lt;/p&gt;

&lt;div class=&#34;wp_syntax&#34;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&#34;code&#34;&gt;
        &lt;pre class=&#34;go&#34; style=&#34;font-family:monospace;&#34;&gt;&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;package&lt;/span&gt; circular
&amp;nbsp;
&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//TestVersion testVersion&lt;/span&gt;
&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;const&lt;/span&gt; TestVersion &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//Buffer buffer type&lt;/span&gt;
&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;type&lt;/span&gt; Buffer &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    buffer &lt;span style=&#34;color: #339933;&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color: #993333;&#34;&gt;byte&lt;/span&gt;
    full   &lt;span style=&#34;color: #993333;&#34;&gt;int&lt;/span&gt;
    size   &lt;span style=&#34;color: #993333;&#34;&gt;int&lt;/span&gt;
    s&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; e   &lt;span style=&#34;color: #993333;&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//NewBuffer creates a new Buffer&lt;/span&gt;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; NewBuffer&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;size &lt;span style=&#34;color: #993333;&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;*&lt;/span&gt;Buffer &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;return&lt;/span&gt; &amp;Buffer&lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;buffer&lt;span style=&#34;color: #339933;&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000066;&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;([]&lt;/span&gt;&lt;span style=&#34;color: #993333;&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; size&lt;span style=&#34;color: #339933;&#34;&gt;),&lt;/span&gt; s&lt;span style=&#34;color: #339933;&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; e&lt;span style=&#34;color: #339933;&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; size&lt;span style=&#34;color: #339933;&#34;&gt;:&lt;/span&gt; size&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; full&lt;span style=&#34;color: #339933;&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//ReadByte reads a byte from b Buffer&lt;/span&gt;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;b &lt;span style=&#34;color: #339933;&#34;&gt;*&lt;/span&gt;Buffer&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; ReadByte&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #993333;&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; error&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;full &lt;span style=&#34;color: #339933;&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Errorf&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Danger Will Robinson: %s&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
    readByte &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;buffer&lt;span style=&#34;color: #339933;&#34;&gt;[&lt;/span&gt;b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;s&lt;span style=&#34;color: #339933;&#34;&gt;]&lt;/span&gt;
    b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;s &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;s &lt;span style=&#34;color: #339933;&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;%&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;size
    b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;full&lt;span style=&#34;color: #339933;&#34;&gt;--&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;return&lt;/span&gt; readByte&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//WriteByte writes c byte to the buffer&lt;/span&gt;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;b &lt;span style=&#34;color: #339933;&#34;&gt;*&lt;/span&gt;Buffer&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; WriteByte&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;c &lt;span style=&#34;color: #993333;&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; error &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;full&lt;span style=&#34;color: #339933;&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt; &amp;gt; b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;size &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;return&lt;/span&gt; fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Errorf&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Danger Will Robinson: %s&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
    b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;buffer&lt;span style=&#34;color: #339933;&#34;&gt;[&lt;/span&gt;b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;e&lt;span style=&#34;color: #339933;&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; c
    b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;e &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;e &lt;span style=&#34;color: #339933;&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;%&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;size
    b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;full&lt;span style=&#34;color: #339933;&#34;&gt;++&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//Overwrite overwrites the oldest byte in Buffer&lt;/span&gt;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;b &lt;span style=&#34;color: #339933;&#34;&gt;*&lt;/span&gt;Buffer&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; Overwrite&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;c &lt;span style=&#34;color: #993333;&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;buffer&lt;span style=&#34;color: #339933;&#34;&gt;[&lt;/span&gt;b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;s&lt;span style=&#34;color: #339933;&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; c
    b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;s &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;s &lt;span style=&#34;color: #339933;&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;%&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;size
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//Reset resets the buffer&lt;/span&gt;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;b &lt;span style=&#34;color: #339933;&#34;&gt;*&lt;/span&gt;Buffer&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; Reset&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;*&lt;/span&gt;b &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;*&lt;/span&gt;NewBuffer&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;size&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//String for a string representation of Buffer&lt;/span&gt;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;b &lt;span style=&#34;color: #339933;&#34;&gt;*&lt;/span&gt;Buffer&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; String&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;return&lt;/span&gt; fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Sprintf&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Buffer: %d, %d, %d, %d&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;buffer&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>