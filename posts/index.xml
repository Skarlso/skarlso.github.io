<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/posts/</link>
    <description>Recent content in Posts on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Mar 2018 23:01:00 +0100</lastBuildDate><atom:link href="https://skarlso.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes distributed application deployment with sample Face Recognition App</title>
      <link>https://skarlso.github.io/2018/03/15/kubernetes-distributed-application/</link>
      <pubDate>Thu, 15 Mar 2018 23:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/03/15/kubernetes-distributed-application/</guid>
      <description>Intro Alright folks. Settle in and get comfortable. This is going to be a long, but hopefully, fun ride.
I&amp;rsquo;m going to deploy a distributed application with Kubernetes. I attempted to create an application that I thought resembled a real world app. Obviously I had to cut some corners due to time and energy constraints.
My focus will be on Kubernetes and deployment.
Shall we delve right in?
The Application TL;DR The application itself consists of six parts.</description>
    </item>
    
    <item>
      <title>Go Budapest Meetup</title>
      <link>https://skarlso.github.io/2018/02/06/go-budapest-meetup/</link>
      <pubDate>Tue, 06 Feb 2018 23:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/02/06/go-budapest-meetup/</guid>
      <description>Intro So I was at Go Budapest Meetup yesterday, where the brilliant Johan Brandhorst gave a talk about his project based on gRPC using gRPC-web + GopherJS + protobuf. He also has some Go contributions and check out his project here: Protobuf. It&amp;rsquo;s GopherJS Bindings for ProtobufJS and gRPC-Web.
It was interesting to see where these projects could lead and I see the potential in them. I liked the usage of Protobuf and gRPC, I don&amp;rsquo;t have THAT much experience with them.</description>
    </item>
    
    <item>
      <title>Ansible &#43; Nginx &#43; LetsEncrypt &#43; Wiki &#43; Nagios</title>
      <link>https://skarlso.github.io/2018/01/23/nginx-certbot-ansible/</link>
      <pubDate>Tue, 23 Jan 2018 22:34:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/01/23/nginx-certbot-ansible/</guid>
      <description>Intro Hi folks.
Today, I would like demonstrate how to use Ansible in order to construct a server hosting multiple HTTPS domains with Nginx and LetsEncrypt. Are you ready? Let&amp;rsquo;s dive in.
TL;DR What you will need There is really only one thing you need in order for this to work and that is Ansible. If you would like to run local tests without a remote server, than you will need Vagrant and VirtualBox.</description>
    </item>
    
    <item>
      <title>Huge Furnace Update</title>
      <link>https://skarlso.github.io/2018/01/13/furnace-massive-update/</link>
      <pubDate>Sat, 13 Jan 2018 22:34:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/01/13/furnace-massive-update/</guid>
      <description>Intro Hi folks.
In the past couple of months I&amp;rsquo;ve been slowly updating Furnace.
There are three major changes that happened. Let&amp;rsquo;s take a look at them, shall we?
Google Cloud Platform Furnace now supports Google Cloud Platform (GCP). It provides the same API to handle GCP resource as with AWS. Namely, create, delete, status, update. I opted to leave out push because Google mostly works with git based repositories, meaning a push is literary just a push, than Google handles distributing the new code by itself.</description>
    </item>
    
    <item>
      <title>Commit-Build-Deploy With AWS CodeBuild and Lambda</title>
      <link>https://skarlso.github.io/2017/12/04/commit-build-deploy/</link>
      <pubDate>Mon, 04 Dec 2017 22:34:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/12/04/commit-build-deploy/</guid>
      <description>Intro Hi All.
Today I would like to write about an AWS finger practice.
Previously, I wrote about how I build and deploy my blog with Wercker. Since, I&amp;rsquo;m a cloud engineer and I dislike Oracle and it&amp;rsquo;s ever expending tenctacles into the abyss, I wanted to switch to use something else.
My build and deploy cycle is simple.
Commit to Blogsource Repo -&amp;gt; Wercker WebHook -&amp;gt; Builds my blog using Hugo -&amp;gt; Pushed to a Different Repository which my Github Blog.</description>
    </item>
    
    <item>
      <title>Furnace Ikea Manual</title>
      <link>https://skarlso.github.io/2017/11/06/furnace-ikea-manual/</link>
      <pubDate>Mon, 06 Nov 2017 20:34:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/11/06/furnace-ikea-manual/</guid>
      <description>Hi there folks.
Just a quick post, of how I went on and created an IKEA manual about Furnace.
Page 1: . Page 2: .
I drew these using Krita. I mostly used a mouse but I also used a Wacom Bamboo drawing tabled, for sketches and such.
Thanks, Gergely.</description>
    </item>
    
    <item>
      <title>Furnace Binaries</title>
      <link>https://skarlso.github.io/2017/09/03/furnace-binaries/</link>
      <pubDate>Sun, 03 Sep 2017 10:34:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/09/03/furnace-binaries/</guid>
      <description>Hey folks.
Quick note. Furnace now comes pre-compiled easy to access binaries which you can download and use out of the box.
No need to install anything, or compile the source. Just download, unzip and use.
Here is the website: Furnace Website.
Enjoy, Cheers, Gergely.</description>
    </item>
    
    <item>
      <title>Notetaking</title>
      <link>https://skarlso.github.io/2017/05/31/notetaking/</link>
      <pubDate>Wed, 31 May 2017 06:23:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/05/31/notetaking/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Replacing Eval with Object.send and a self written Parser</title>
      <link>https://skarlso.github.io/2017/05/28/replace-eval-with-object-send-and-a-parser/</link>
      <pubDate>Sun, 28 May 2017 19:23:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/05/28/replace-eval-with-object-send-and-a-parser/</guid>
      <description>Intro A while ago, I was added as a curator for a Gem called JsonPath. It&amp;rsquo;s a small but very useful and brilliant gem. It had a couple of problems which I fixed, but the hardest to eliminate proved to be a series of evals throughout the code.
You could opt in using eval with a constructor parameter, but generally, it was considered to be unsafe. Thus, normally when a project was using it, like Huginn they had to opt out by default, thus missing out on sweet parsing like this: $.</description>
    </item>
    
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 4</title>
      <link>https://skarlso.github.io/2017/04/16/building-furnace-part-4/</link>
      <pubDate>Sun, 16 Apr 2017 09:23:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/04/16/building-furnace-part-4/</guid>
      <description>Intro Hi folks.
Previously on this blog: Part 1. Part 2. Part 3.
In this part we are going to talk about Unit Testing Furnace and how to work some magic with AWS and Go.
Mock Stub Fake Dummy Canned  Unit testing in Go usually follows the Dependency Injection model of dealing with Mocks and Stubs.
##Â DI
Dependency Inject in short is one object supplying the dependencies of another object.</description>
    </item>
    
  </channel>
</rss>
