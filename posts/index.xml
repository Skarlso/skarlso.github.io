<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ramblings of a build engineer</title>
    <link>https://skarlso.github.io/posts/</link>
    <description>Recent content in Posts on Ramblings of a build engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 12 Jun 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://skarlso.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to do Google sign-in with Go</title>
      <link>https://skarlso.github.io/2016/06/12/google-signin-with-go</link>
      <pubDate>Sun, 12 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/06/12/google-signin-with-go</guid>
      <description>

&lt;p&gt;Hi folks.&lt;/p&gt;

&lt;p&gt;Today, I would like to write up a step - by - step guid with a sample web app on how to do Google assisted sign-in and user handling.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get started.&lt;/p&gt;

&lt;h1 id=&#34;setup&#34;&gt;Setup&lt;/h1&gt;

&lt;h2 id=&#34;google-oauth-token&#34;&gt;Google OAuth token&lt;/h2&gt;

&lt;p&gt;First thing first, what you need is, to register your application with Google, so you&amp;rsquo;ll get a Token that you can use for authentication purposes.&lt;/p&gt;

&lt;p&gt;You can do there here -&amp;gt; &lt;a href=&#34;https://console.developers.google.com/iam-admin/projects&#34;&gt;Google Developer Console&lt;/a&gt;. You&amp;rsquo;ll have to create a new project. Once it&amp;rsquo;s done, click on &lt;code&gt;Credentials&lt;/code&gt; and create an OAuth token. You should see something like this -&amp;gt; &amp;ldquo;To create an OAuth client ID, you must first set a product name on the consent screen.&amp;rdquo;. Go through the questions, like, what type your application is, and then you&amp;rsquo;re done. I&amp;rsquo;m selecting Web App for this tutorial. In the next, when you have created your app, in the redirect url write the url you wish to use when authenticating. Do NOT use &lt;code&gt;localhost&lt;/code&gt;. If you are running on your own, use &lt;a href=&#34;http://127.0.0.1:port/whatever&#34;&gt;http://127.0.0.1:port/whatever&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This will get you a &lt;code&gt;client ID&lt;/code&gt; and a &lt;code&gt;client secret&lt;/code&gt;. I&amp;rsquo;m going to save these into a file which will sit next to my web app. It could be stored more securely, for example, in a database or a mounted secure, encrypted drive, and so and so forth, but that&amp;rsquo;s not the point of this tutorial right now.&lt;/p&gt;

&lt;p&gt;Now that&amp;rsquo;s done, your application can now be identified, so login can happen using one&amp;rsquo;s Google creds.&lt;/p&gt;

&lt;h1 id=&#34;the-application&#34;&gt;The Application&lt;/h1&gt;

&lt;h2 id=&#34;library&#34;&gt;Library&lt;/h2&gt;

&lt;p&gt;Google has a nice little library to use with OAuth 2.0 which I shall be using as well. The library is available here =&amp;gt; &lt;a href=&#34;https://github.com/golang/oauth2&#34;&gt;Google OAth 2.0&lt;/a&gt;. It&amp;rsquo;s a bit cryptic at first to setup, but not to worry. After a little bit of fiddling you&amp;rsquo;ll understand fast what it does, and how you can use it.&lt;/p&gt;

&lt;h2 id=&#34;setup-creds&#34;&gt;Setup - Creds&lt;/h2&gt;

&lt;p&gt;So, first, let&amp;rsquo;s create a little setup which configures our credentials from the file. This is pretty straightforward.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Credentials which stores google ids.
type Credentials struct {
    Cid string `json:&amp;quot;cid&amp;quot;`
    Csecret string `json:&amp;quot;csecret&amp;quot;`
}

func init() {
    var c Credentials
    file, err := ioutil.ReadFile(&amp;quot;./creds.json&amp;quot;)
    if err != nil {
        fmt.Printf(&amp;quot;File error: %v\n&amp;quot;, err)
        os.Exit(1)
    }
    json.Unmarshal(file, &amp;amp;c)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we have the creds loaded, we can now go on to construct our OAuth client.&lt;/p&gt;

&lt;h2 id=&#34;setup-oauth-client&#34;&gt;Setup - OAuth client&lt;/h2&gt;

&lt;p&gt;First, construct the OAuth config.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;conf := &amp;amp;oauth2.Config{
  ClientID:     c.Cid,
  ClientSecret: c.Csecret,
  RedirectURL:  &amp;quot;http://localhost:9090/auth&amp;quot;, // If the loging is successful, this will be the redirected URL location to with a query param called &#39;code&#39;
  Scopes: []string{
    &amp;quot;https://www.googleapis.com/auth/userinfo.email&amp;quot;, // You have to select your own scope from here -&amp;gt; https://developers.google.com/identity/protocols/googlescopes#google_sign-in
  },
  Endpoint: google.Endpoint,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will give you a conf struct which you can then use to Authenticate your user. Once we have this, all we need to do is call &lt;code&gt;AuthCodeURL&lt;/code&gt; on this config. This will give us a URL we need to call which redirects to a Google Sign-In form. Once the user fills that out, it will redirect to the given URL with a callback and provide a TOKEN in form a query parameter called &lt;code&gt;code&lt;/code&gt;. This will look something like this &lt;code&gt;http://127.0.0.1:9090/auth?code=4FLKFskdjflf....&lt;/code&gt;. To get the URL let&amp;rsquo;s extract this into a small function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func getLoginURL() string {
    return conf.AuthCodeURL(&amp;quot;&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can put this URL as a link to a Button forexample.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func loginHandler(c *gin.Context) {
    c.Writer.Write([]byte(&amp;quot;&amp;lt;html&amp;gt;&amp;lt;title&amp;gt;Golang Google&amp;lt;/title&amp;gt; &amp;lt;body&amp;gt; &amp;lt;a href=&#39;&amp;quot; + getLoginURL() + &amp;quot;&#39;&amp;gt;&amp;lt;button&amp;gt;Login with Google!&amp;lt;/button&amp;gt; &amp;lt;/a&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the user clicks this, (s)he is redirected to Google Sign-In Form which, when filled out, will yield the above URL with a TOKEN in the code section.&lt;/p&gt;

&lt;h1 id=&#34;registration&#34;&gt;Registration&lt;/h1&gt;

&lt;p&gt;So what now? How do we actually get to the registration / login part of this? How does this all fit together? With Google, after you got the token, you can construct an authenticated Google HTTP Client.&lt;/p&gt;

&lt;h2 id=&#34;getting-the-client&#34;&gt;Getting the Client&lt;/h2&gt;

&lt;p&gt;To obtain the client, you need to do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;  // Handle the exchange code to initiate a transport.
tok, err := conf.Exchange(oauth2.NoContext, c.Query(&amp;quot;code&amp;quot;))
if err != nil {
	c.AbortWithError(http.StatusBadRequest, err)
}

client := conf.Client(oauth2.NoContext, tok)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That client will now be a Google Authenticated HTTP client. To get something that you can actually use from this do the following&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;obtaining-information-from-the-user&#34;&gt;Obtaining information from the user&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s their API url that you need to call with the authenticated client. The code for that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;resp, err := client.Get(&amp;quot;https://www.googleapis.com/oauth2/v3/userinfo&amp;quot;)
  if err != nil {
  c.AbortWithError(http.StatusBadRequest, err)
}
defer resp.Body.Close()
data, _ := ioutil.ReadAll(resp.Body)
log.Println(&amp;quot;Resp body: &amp;quot;, string(data))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this will yield a body like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
 &amp;quot;sub&amp;quot;: &amp;quot;1111111111111111111111&amp;quot;,
 &amp;quot;name&amp;quot;: &amp;quot;Your Name&amp;quot;,
 &amp;quot;given_name&amp;quot;: &amp;quot;Your&amp;quot;,
 &amp;quot;family_name&amp;quot;: &amp;quot;Name&amp;quot;,
 &amp;quot;profile&amp;quot;: &amp;quot;https://plus.google.com/1111111111111111111111&amp;quot;,
 &amp;quot;picture&amp;quot;: &amp;quot;https://lh3.googleusercontent.com/asdfadsf/AAAAAAAAAAI/Aasdfads/Xasdfasdfs/photo.jpg&amp;quot;,
 &amp;quot;email&amp;quot;: &amp;quot;your@gmail.com&amp;quot;,
 &amp;quot;email_verified&amp;quot;: true,
 &amp;quot;gender&amp;quot;: &amp;quot;male&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tadaam. Parse this, and you&amp;rsquo;ve got an email which you can store. Check this against a db record if you already have that email and you have your registration / login.&lt;/p&gt;

&lt;h1 id=&#34;putting-it-all-together&#34;&gt;Putting it all together&lt;/h1&gt;

&lt;p&gt;How does this all look together? Something like this. Though, I&amp;rsquo;ve built no front-end.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;encoding/json&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;os&amp;quot;
    &amp;quot;net/http&amp;quot;

    &amp;quot;github.com/gin-gonic/gin&amp;quot;
    &amp;quot;golang.org/x/oauth2&amp;quot;
    &amp;quot;golang.org/x/oauth2/google&amp;quot;
)

// Credentials which stores google ids.
type Credentials struct {
    Cid     string `json:&amp;quot;cid&amp;quot;`
    Csecret string `json:&amp;quot;csecret&amp;quot;`
}

// User is a retrieved and authentiacted user.
type User struct {
    Sub string `json:&amp;quot;sub&amp;quot;`
    Name string `json:&amp;quot;name&amp;quot;`
    GivenName string `json:&amp;quot;given_name&amp;quot;`
    FamilyName string `json:&amp;quot;family_name&amp;quot;`
    Profile string `json:&amp;quot;profile&amp;quot;`
    Picture string `json:&amp;quot;picture&amp;quot;`
    Email string `json:&amp;quot;email&amp;quot;`
    EmailVerified string `json:&amp;quot;email_verified&amp;quot;`
    Gender string `json:&amp;quot;gender&amp;quot;`
}

var cred Credentials
var conf *oauth2.Config

func indexHandler(c *gin.Context) {
    c.HTML(http.StatusOK, &amp;quot;index.tmpl&amp;quot;, gin.H{})
}

func battleHandler(c *gin.Context) {
    c.HTML(http.StatusOK, &amp;quot;battle.tmpl&amp;quot;, gin.H{
        &amp;quot;user&amp;quot;: &amp;quot;Anyad&amp;quot;,
    })
}

func init() {
    file, err := ioutil.ReadFile(&amp;quot;./creds.json&amp;quot;)
    if err != nil {
        log.Printf(&amp;quot;File error: %v\n&amp;quot;, err)
        os.Exit(1)
    }
    json.Unmarshal(file, &amp;amp;cred)

    conf = &amp;amp;oauth2.Config{
        ClientID:     cred.Cid,
        ClientSecret: cred.Csecret,
        RedirectURL:  &amp;quot;http://127.0.0.1:9090/auth&amp;quot;,
        Scopes: []string{
        &amp;quot;https://www.googleapis.com/auth/userinfo.email&amp;quot;, // You have to select your own scope from here -&amp;gt; https://developers.google.com/identity/protocols/googlescopes#google_sign-in
        },
        Endpoint: google.Endpoint,
    }
}

func getLoginURL() string {
    return conf.AuthCodeURL(&amp;quot;&amp;quot;)
}

func authHandler(c *gin.Context) {
    // Handle the exchange code to initiate a transport.
	tok, err := conf.Exchange(oauth2.NoContext, c.Query(&amp;quot;code&amp;quot;))
	if err != nil {
		c.AbortWithError(http.StatusBadRequest, err)
	}

	client := conf.Client(oauth2.NoContext, tok)
	email, err := client.Get(&amp;quot;https://www.googleapis.com/oauth2/v3/userinfo&amp;quot;)
    if err != nil {
		c.AbortWithError(http.StatusBadRequest, err)
	}
    defer email.Body.Close()
    data, _ := ioutil.ReadAll(email.Body)
    log.Println(&amp;quot;Email body: &amp;quot;, string(data))
    c.Status(http.StatusOK)
}

func loginHandler(c *gin.Context) {
    c.Writer.Write([]byte(&amp;quot;&amp;lt;html&amp;gt;&amp;lt;title&amp;gt;Golang Google&amp;lt;/title&amp;gt; &amp;lt;body&amp;gt; &amp;lt;a href=&#39;&amp;quot; + getLoginURL() + &amp;quot;&#39;&amp;gt;&amp;lt;button&amp;gt;Login with Google!&amp;lt;/button&amp;gt; &amp;lt;/a&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;))
}

func main() {
    router := gin.Default()
    router.Static(&amp;quot;/css&amp;quot;, &amp;quot;./static/css&amp;quot;)
    router.Static(&amp;quot;/img&amp;quot;, &amp;quot;./static/img&amp;quot;)
    router.LoadHTMLGlob(&amp;quot;templates/*&amp;quot;)

    router.GET(&amp;quot;/&amp;quot;, indexHandler)
    router.GET(&amp;quot;/login&amp;quot;, loginHandler)
    router.GET(&amp;quot;/auth&amp;quot;, authHandler)

    router.Run(&amp;quot;127.0.0.1:9090&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is it folks. Notice that there are some more stuff in there. Disregard them, or delete them. Like the index handler and the templates. They are just something that I used.&lt;/p&gt;

&lt;p&gt;After you have the email, you should be able to go on and store it and retrieve it later if you want. With Gin, you can even do authenticated end-points.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;authorized := r.Group(&amp;quot;/&amp;quot;)
// per group middleware! in this case we use the custom created
// AuthRequired() middleware just in the &amp;quot;authorized&amp;quot; group.
authorized.Use(AuthRequired)
{
    authorized.POST(&amp;quot;/login&amp;quot;, loginEndpoint)
    authorized.POST(&amp;quot;/submit&amp;quot;, submitEndpoint)
    authorized.POST(&amp;quot;/read&amp;quot;, readEndpoint)

    // nested group
    testing := authorized.Group(&amp;quot;testing&amp;quot;)
    testing.GET(&amp;quot;/analytics&amp;quot;, analyticsEndpoint)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have your Google Auth, you can access these URLS, or do a c.AbortWithError which will stop the chain and redirect the user to a Login page.&lt;/p&gt;

&lt;p&gt;I hope this helped. Any comments, please feel free to drop a comment.&lt;/p&gt;

&lt;h1 id=&#34;google-api-documentation&#34;&gt;Google API Documentation&lt;/h1&gt;

&lt;p&gt;The documentation to this whole process and MUCH more information can be found here =&amp;gt; &lt;a href=&#34;https://developers.google.com/identity/protocols/OAuth2&#34;&gt;Google API Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading,
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Minecraft world automatic backup to AWS S3 bucket - Part 2 (Custom functions)</title>
      <link>https://skarlso.github.io/2016/04/17/minecraft-server-aws-s3-backup-part2</link>
      <pubDate>Sun, 17 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/04/17/minecraft-server-aws-s3-backup-part2</guid>
      <description>&lt;p&gt;Hi folks.&lt;/p&gt;

&lt;p&gt;Got an update for the backup script. This time, you&amp;rsquo;ll have the ability to implement your own upload capabilities. I provide a mock implementation for the required functions.&lt;/p&gt;

&lt;p&gt;Here is the script again, now modified and a bit cleaned up. I hope it&amp;rsquo;s helpful.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

if [[ -t 1 ]]; then
    colors=$(tput colors)
    if [[ $colors ]]; then
        RED=&#39;\033[0;31m&#39;
        LIGHT_GREEN=&#39;\033[1;32m&#39;
        NC=&#39;\033[0m&#39;
    fi
fi

if [[ -z ${MINECRAFT_BUCKET} ]]; then
    printf &amp;quot;Please set the env variable %bMINECRAFT_BUCKET%b to the s3 archive bucket name.\n&amp;quot; &amp;quot;${RED}&amp;quot; &amp;quot;${NC}&amp;quot;
    exit 1
fi

if [[ -z ${MINECRAFT_ARCHIVE_LIMIT} ]]; then
    printf &amp;quot;Please set the env variable %bMINECRAFT_ARCHIVE_LIMIT%b to limit the number of archives to keep.\n&amp;quot; &amp;quot;${RED}&amp;quot; &amp;quot;${NC}&amp;quot;
    exit 1
fi

if [[ -z ${MINECRAFT_WORLD} ]]; then
    printf &amp;quot;Please set the env variable %bMINECRAFT_WORLD%b to specify what world to back-up.\n&amp;quot; &amp;quot;${RED}&amp;quot; &amp;quot;${NC}&amp;quot;
    exit 1
fi

backup_world=${MINECRAFT_WORLD}
backup_bucket=${MINECRAFT_BUCKET}
backup_limit=${MINECRAFT_ARCHIVE_LIMIT}
archive_name=&amp;quot;${backup_world}-$(date +&amp;quot;%H-%M-%S-%m-%d-%Y&amp;quot;).zip&amp;quot;

function create_archive {
    printf &amp;quot;Creating archive of %b${backup_world}%b\n&amp;quot; &amp;quot;${RED}&amp;quot; &amp;quot;${NC}&amp;quot;
    zip -r $archive_name $backup_world
}

function amazon_bak {

    create_archive

    printf &amp;quot;Checking if bucket has more than %b${backup_limit}%b files already.\n&amp;quot; &amp;quot;${RED}&amp;quot; &amp;quot;${NC}&amp;quot;
    content=( $(aws s3 ls s3://$backup_bucket | awk &#39;{print $4}&#39;) )

    if [[ ${#content[@]} -eq $backup_limit || ${#content[@]} -gt $backup_limit  ]]; then
        echo &amp;quot;There are too many archives. Deleting oldest one.&amp;quot;
        # We can assume here that the list is in cronological order
    	printf &amp;quot;%bs3://${backup_bucket}/${content[0]}\n%b&amp;quot; &amp;quot;${RED}&amp;quot; &amp;quot;${NC}&amp;quot;
        aws s3 rm s3://$backup_bucket/${content[0]}
    fi

    printf &amp;quot;Uploading %b${archive_name}%b to s3 archive bucket.\n&amp;quot; &amp;quot;${RED}&amp;quot; &amp;quot;${NC}&amp;quot;
    state=$(aws s3 cp $archive_name s3://$backup_bucket)

    if [[ &amp;quot;$state&amp;quot; =~ &amp;quot;upload:&amp;quot; ]]; then
        printf &amp;quot;File upload %bsuccessful%b.\n&amp;quot; &amp;quot;${LIGHT_GREEN}&amp;quot; &amp;quot;${NC}&amp;quot;
    else
        printf &amp;quot;%bError%b occured while uploading archive. Please investigate.\n&amp;quot; &amp;quot;${RED}&amp;quot; &amp;quot;${NC}&amp;quot;
    fi
}

function custom {
    if [[ -e custom.sh ]]; then
        source ./custom.sh
    else
        echo &amp;quot;custom.sh script not found. Please implement the apropriate functions.&amp;quot;
        exit 1
    fi

    echo &amp;quot;Checking for the number of files. Limit is: $backup_limit.&amp;quot;
    files=( $(list) )
    if [[ ${#files[@]} -eq $backup_limit || ${#files[@]} -gt $backup_limit ]]; then
        echo &amp;quot;Deleting extra file.&amp;quot;
        delete ${files[0]}
        if [[ $? != 0 ]]; then
            printf &amp;quot;%bFailed%b to delete file. Please investigate failure.&amp;quot; &amp;quot;${RED}&amp;quot; &amp;quot;${NC}&amp;quot;
            exit $?
        fi
    fi

    echo &amp;quot;Zipping world.&amp;quot;
    create_archive

    echo &amp;quot;Uploading world.&amp;quot;
    upload $archive_name

    if [[ $? != 0 ]]; then
        printf &amp;quot;%bFailed%b to upload archive. Please investigate the error.&amp;quot; &amp;quot;${RED}&amp;quot; &amp;quot;${NC}&amp;quot;
        exit $?
    fi

    printf &amp;quot;Upload %bsuccessful%b&amp;quot; &amp;quot;${LIGHT_GREEN}&amp;quot; &amp;quot;${NC}&amp;quot;
}

function help {
    echo &amp;quot;Usage:&amp;quot;
    echo &amp;quot;./backup_world [METHOD]&amp;quot;
    echo &amp;quot;Exp.: ./backup_world aws|./backup_world custom|./backup_world dropbox&amp;quot;
    echo &amp;quot;Each method has it&#39;s own environment properties that it requires.&amp;quot;
    echo &amp;quot;Global: MINECRAFT_WORLD|MINECRAFT_BUCKET|MINECRAFT_ARCHIVE_LIMIT&amp;quot;
    echo &amp;quot;Custom: Have a file, called &#39;custom.sh&#39; which is sourced.&amp;quot;
    echo &amp;quot;Implement these three functions: upload | list | delete.&amp;quot;
    echo &amp;quot;upload -&amp;gt; should return exit code 0 on success, should return exit code 1 on failure.&amp;quot;
    echo &amp;quot;list -&amp;gt; should return a list of cronologically ordered items.&amp;quot;
    echo &amp;quot;delete -&amp;gt; should return exit code 0 on success, should return exit code 1 on failure.&amp;quot;
}

case $1 in
    aws )
        amazon_bak
        ;;
    custom )
        custom
        ;;
    * )
        help
        ;;
esac
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the sample implementation for the custom upload functionality.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

function upload {
    echo &amp;quot;uploading&amp;quot;
    local result=0
    return $result
}

function delete {
    echo &amp;quot;deleting $1&amp;quot;
    local result=0
    return $result
}

function list {
    local arr=(&amp;quot;file1&amp;quot; &amp;quot;file2&amp;quot; &amp;quot;file3&amp;quot;)
    echo &amp;quot;${arr[@]}&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Minecraft world automatic backup to AWS S3 bucket</title>
      <link>https://skarlso.github.io/2016/04/16/minecraft-server-aws-s3-backup</link>
      <pubDate>Sat, 16 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/04/16/minecraft-server-aws-s3-backup</guid>
      <description>&lt;p&gt;Hi Folks.&lt;/p&gt;

&lt;p&gt;Previously we created a Minecraft server using Docker. After my server got popular in the family, and a lot of stuff started to pile up on it, as a good IT person, I&amp;rsquo;m backing up the world once in a while.&lt;/p&gt;

&lt;p&gt;For that, I&amp;rsquo;m using AWS S3 with the CLI and a little bash script which runs once a week.&lt;/p&gt;

&lt;p&gt;The script is really straightforward. I&amp;rsquo;m doing manual versioning, although S3 does provide one out of the box. However, amazon&amp;rsquo;s S3 versioning doesn&amp;rsquo;t allow limiting the number of versions being kept. And since I&amp;rsquo;m doing that anyways, might as well take care of the rest.&lt;/p&gt;

&lt;p&gt;Without further ado, here is the script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

if [[ -t 1 ]]; then
    colors=$(tput colors)
    if [[ $colors ]]; then
        RED=&#39;\033[0;31m&#39;
        LIGHT_GREEN=&#39;\033[1;32m&#39;
        NC=&#39;\033[0m&#39;
    fi
fi

if [[ -z ${MINECRAFT_BUCKET} ]]; then
	printf &amp;quot;Please set the env variable ${RED}MINECRAFT_BUCKET${NC} to the s3 archive bucket name.\n&amp;quot;
	exit 0
fi

if [[ -z ${MINECRAFT_ARCHIVE_LIMIT} ]]; then
	printf &amp;quot;Please set the env variable ${RED}MINECRAFT_ARCHIVE_LIMIT${NC} to limit the number of archives to keep.\n&amp;quot;
	exit 0
fi

backup_bucket=${MINECRAFT_BUCKET}
backup_limit=${MINECRAFT_ARCHIVE_LIMIT}
world=$1
printf &amp;quot;Creating archive of ${RED}${world}${NC}\n&amp;quot;
archive_name=&amp;quot;${world}-$(date +&amp;quot;%H-%M-%S-%m-%d-%Y&amp;quot;).zip&amp;quot;
zip -r $archive_name $world

printf &amp;quot;Checking if bucket has more than ${RED}${backup_limit}${NC} files already.\n&amp;quot;
content=( $(aws s3 ls s3://$backup_bucket | awk &#39;{print $4}&#39;) )

if [[ ${#content[@]} -eq $backup_limit || ${#content[@]} -gt $backup_limit  ]]; then
    echo &amp;quot;There are too many archives. Deleting oldest one.&amp;quot;
    # We can assume here that the list is in cronological order
	printf &amp;quot;${RED}s3://${backup_bucket}/${content[0]}\n&amp;quot;
    aws s3 rm s3://$backup_bucket/${content[0]}
fi

printf &amp;quot;Uploading ${RED}${archive_name}${NC} to s3 archive bucket.\n&amp;quot;
state=$(aws s3 cp $archive_name s3://$backup_bucket)

if [[ &amp;quot;$state&amp;quot; =~ &amp;quot;upload:&amp;quot; ]]; then
    printf &amp;quot;File upload ${LIGHT_GREEN}successful${NC}.\n&amp;quot;
else
    printf &amp;quot;${RED}Error${NC} occured while uploading archive. Please investigate.\n&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It uses environment properties to define where to upload the given world and how many versions to keep.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m calling this from a cron job, and it&amp;rsquo;s sitting next to where the Minecraft world is.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it folks.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll start expanding on this idea and implement various services, like your own server address, or dropbox, or what have you.&lt;/p&gt;

&lt;p&gt;Happy backing up.&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Minecraft Server with Docker on OSX &#43; Mods</title>
      <link>https://skarlso.github.io/2016/03/29/minecraft-server-with-docker-and-osx</link>
      <pubDate>Tue, 29 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/03/29/minecraft-server-with-docker-and-osx</guid>
      <description>

&lt;p&gt;Hi Folks.&lt;/p&gt;

&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Today, I wanted to write about how to create a secure server in a container. Ideally, you don&amp;rsquo;t want to run your server on your own machine. Running it in a container gives you a much needed control and an extra layer of security.&lt;/p&gt;

&lt;h1 id=&#34;docker-on-osx&#34;&gt;Docker On OSX&lt;/h1&gt;

&lt;p&gt;While on a mac, you have a couple of options to run docker.&lt;/p&gt;

&lt;h2 id=&#34;docker-machine&#34;&gt;Docker-Machine&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/machine/&#34;&gt;Docker-Machine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Docker machine is very simple. It just creates a Linux vm in the background on the given driver, for us it will be &lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;VirtualBox&lt;/a&gt;. Network, Memory and port-forwarding can all be managed through the VM directly. Then running and starting it is trivial through &lt;code&gt;docker-machine start&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;boot2docker&#34;&gt;Boot2Docker&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://boot2docker.io/&#34;&gt;Boot2Docker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Runs a tiny linux in which you can use Docker freely. This adds the benefit of not having to mess around with VirtualBox.&lt;/p&gt;

&lt;h2 id=&#34;dlite&#34;&gt;DLite&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/nlf/dlite&#34;&gt;DLite&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DLite is the newest addition in the Game. Since docker uses /var/run/docker.sock file to communicate with the daemon, and this file is not there on OSX, DLite takes care of that. After DLite is running, you just simply use Docker. That&amp;rsquo;s it. No VM, no fuss, just use Docker.&lt;/p&gt;

&lt;p&gt;I recommend to use DLite, however, it&amp;rsquo;s not an official tool, so for the sake of this guide, I&amp;rsquo;ll be writing up a docker-machine oriented solution.&lt;/p&gt;

&lt;h1 id=&#34;docker-container-a-vanilla-server&#34;&gt;Docker container - A Vanilla Server&lt;/h1&gt;

&lt;p&gt;First, you&amp;rsquo;ll need a Dockerfile. &lt;a href=&#34;https://github.com/Skarlso/devops/blob/master/minecraft/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;. The steps on how to setup this file are written down in the README file, located here: &lt;a href=&#34;https://github.com/Skarlso/devops/tree/master/minecraft&#34;&gt;Container Setup&lt;/a&gt;. The &lt;code&gt;pwd&lt;/code&gt; command will use your current directory as a shared volume to copy stuff into the container from your host operating system.&lt;/p&gt;

&lt;p&gt;This will download the Minecraft server version 1.9 (or whichever you define) and install java and vim. It uses /data as a shared folder. Data will also be the working directory which means we will run the server from there. This server will be a vanilla server, meaning, no modding. If you have a single player world which you would like to use, simply copy that to /data and rename it to &lt;em&gt;world&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The tricky part is to make this available on the internet. Because the container is in a VM we need to do a chain forwarding. Forward from the container to the vm, and from the vm to your host machine. If you are using a dns service like dyna or no-ip, you probably have a software which refreshes an IP for you to link to. And you&amp;rsquo;ll also have port forwarding setup on your router. I won&amp;rsquo;t be going into detail on that part. That&amp;rsquo;s a whole different post.&lt;/p&gt;

&lt;p&gt;Forwarding from virtualbox can be done through the UI or through command line. The UI is like this: &lt;em&gt;Settings =&amp;gt; Network =&amp;gt; Adapter 1 =&amp;gt; Advanced =&amp;gt; PortForwarding&lt;/em&gt;. Here, setup something like this:
Name: Minecraft; Protocol: TCP; Host IP: 192.168.0.X(x=your local machine); Host Port: 25565; Guest IP: Leave Blank; Guest Port: 25565.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/network.png&#34; alt=&#34;Network&#34; /&gt;
Where the number is missing, you&amp;rsquo;ll have to define your own local IP which you are using for your domain address.&lt;/p&gt;

&lt;p&gt;This should forward any ports coming from your VM to your local IP. In the container we have an expose and as the README states it&amp;rsquo;s started using -p 25565:25565 which will make sure that from the container, 25565 is exposed to the VM. And from the VM 25565 is exposed to your local. Chain forwarding.&lt;/p&gt;

&lt;p&gt;After that, once you start your server, it should all click together and you should have a running vanilla Minecraft server available under &lt;a href=&#34;http://yourdomain:25565&#34;&gt;http://yourdomain:25565&lt;/a&gt;. You won&amp;rsquo;t be able to check this by default on your own network. Check if the port is open with a different service like: &lt;a href=&#34;http://www.yougetsignal.com/tools/open-ports/&#34;&gt;Check If Port is Open&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;docker-container-modding&#34;&gt;Docker container - Modding&lt;/h1&gt;

&lt;p&gt;If you are not looking for anything, just a simple server, the above will be enough. You can still do /tp 1 1 1 to teleport, or can still use bans and op commands, and distribute items. However, if you would like to use mods, and as far as kids are concerned, they will want it, you&amp;rsquo;ll have to be a bit more clever.&lt;/p&gt;

&lt;p&gt;I dug far and deep and found that you have two options. Either go with a Forge server, or a Bukkit server. What does that mean? The vanilla server of Minecraft does not support modding. Modding, is modifying the implementation of Minecraft. It injects code and runs a pre-server in front of the original Minecraft server in order to append functionality. But fret not, this is all taken care of for you by either solutions.&lt;/p&gt;

&lt;p&gt;In order to jump into our container with the CMD omitted, we&amp;rsquo;ll have to run the following command instead of the one in the README.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it -v `pwd`:/data -p 25565:25565 --name mc_server minecraft:v1.9 bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will give you an interactive prompt in which now we can operate.&lt;/p&gt;

&lt;h2 id=&#34;forge&#34;&gt;Forge&lt;/h2&gt;

&lt;p&gt;Download the latest forge version from here =&amp;gt; &lt;a href=&#34;http://files.minecraftforge.net/&#34;&gt;Minecraft Forge&lt;/a&gt;. They are usually up-to-date. I&amp;rsquo;m using 1.9 so I downloaded the appropriate installer version. After I obtained it, it was a matter of running this piece of command line code from my container:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -jar forge-1.9-12.16.0.1813-1.9-installer.jar --extract --installServer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will unpack a bunch of things you don&amp;rsquo;t have to worry about in your current directory, which is /data. Now run the universal.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -jar forge-1.9-12.16.0.1813-1.9-universal.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Everything under the &lt;strong&gt;mods&lt;/strong&gt; folder will be loaded as a mod. Forge is very restrictive and can only use Forge based mods. It will usually warn you if you have a none forge mod in your mods folder. You can find these on Forge&amp;rsquo;s forum here: &lt;a href=&#34;http://www.minecraftforge.net/forum/index.php/board,30.0.html&#34;&gt;Forge Forum&lt;/a&gt;. Simply download a jar and put it into /data/mods.&lt;/p&gt;

&lt;h2 id=&#34;bukkit&#34;&gt;Bukkit&lt;/h2&gt;

&lt;p&gt;I found Bukkit to be the winner for me. Most of the mods the kid wanted worked with Bukkit and did not work with Forge. Others will swear on Forge, but it&amp;rsquo;s really up to you. Using Bukkit is similarly easy. Again, you&amp;rsquo;ll have to find and get the wrapper for your Minecraft version, which can be located here: &lt;a href=&#34;http://getspigot.org/&#34;&gt;GetSpigot&lt;/a&gt;. You can use Spigot as well, though I have no experience with that.&lt;/p&gt;

&lt;p&gt;Once, you got the wrapper, which is called &lt;code&gt;craftbukkit-1.9.jar&lt;/code&gt; for me, you run it the same way you would run Forge or Minecraft.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -jar craftbukkit-1.9.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will load mods from the &lt;strong&gt;plugins&lt;/strong&gt; folder. Plugins can be found here: &lt;a href=&#34;http://mods.curse.com/bukkit-plugins/minecraft/new&#34;&gt;Latest Bukkit Plugins&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the container, you can use wget or curl to get the mods, or simply use the shared volume which is setup for you.&lt;/p&gt;

&lt;h1 id=&#34;last-words&#34;&gt;Last Words&lt;/h1&gt;

&lt;p&gt;All in all this sounds complicated, but it&amp;rsquo;s actually not, once you&amp;rsquo;ll get the hang out of it. You never kill the container once it&amp;rsquo;s setup, you just do &lt;code&gt;docker stop mc_server&lt;/code&gt; and then &lt;code&gt;docker-machine stop&lt;/code&gt; if you want to stop the VM as well. To start it up simply do these steps:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker_machine start
eval $(docker-machine env)
docker start mc_server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We named the container mc_server on a previous step. If you named it something different, use that name.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it. Hope this was clear. Any feedback is appreciated. If you think you have an easier way, or if I wrote something incorrectly, feel free to tell me in the comment sections below.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wercker Fixed</title>
      <link>https://skarlso.github.io/2016/03/09/wercker-fixed</link>
      <pubDate>Wed, 09 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/03/09/wercker-fixed</guid>
      <description>&lt;p&gt;Hi Folks.&lt;/p&gt;

&lt;p&gt;So Wercker was not working. After a minor modification it seems to be okay now. The config file needed for it to work looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;box: golang 
build:
    steps:
        - arjen/hugo-build:
            theme: redlounge
deploy:
    steps:
        - install-packages:
            packages: git 
        - leipert/git-push:
            gh_oauth: $GIT_TOKEN
            repo: skarlso/skarlso.github.io
            branch: master
            basedir: public    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The modification is the box type to &lt;em&gt;golang&lt;/em&gt; and removed &lt;em&gt;ssh-client&lt;/em&gt; from &lt;em&gt;packages&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Thanks,
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wercker Test</title>
      <link>https://skarlso.github.io/2016/03/04/wercker-test-2</link>
      <pubDate>Fri, 04 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/03/04/wercker-test-2</guid>
      <description>

&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;

&lt;p&gt;This is a wercker Test.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Autodeploy with Wercker and Github - Pages</title>
      <link>https://skarlso.github.io/2016/02/10/hugo-autodeploy-with-wercker</link>
      <pubDate>Wed, 10 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/02/10/hugo-autodeploy-with-wercker</guid>
      <description>&lt;p&gt;There already is a nice tutorial on how to create github-pages with Hugo &lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;Here&lt;/a&gt; if you prefer deplying your pages to a different branch on the same repo. There is also a post about Wercker and Hugo &lt;a href=&#34;https://gohugo.io/tutorials/automated-deployments/&#34;&gt;Here&lt;/a&gt; deploying pages to said separate branch.&lt;/p&gt;

&lt;p&gt;However, I took an easier approach on the matter with a completely separate branch for my blog source and my compiled github pages.&lt;/p&gt;

&lt;p&gt;This blog sits here: &lt;a href=&#34;https://github.com/Skarlso/skarlso.github.io&#34;&gt;https://github.com/Skarlso/skarlso.github.io&lt;/a&gt;. In order to deploy to it, I just have to commit a new blog post to this repository: &lt;a href=&#34;https://github.com/Skarlso/blogsource&#34;&gt;Blog Source&lt;/a&gt;. After that, &lt;a href=&#34;http://wercker.com/&#34;&gt;Wercker&lt;/a&gt; takes care of the rest. It builds my blog, and pushes the generated pages to my blog&amp;rsquo;s repository to the master branch without creating the gh-pages branch.&lt;/p&gt;

&lt;p&gt;The Wercker yml for that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;box: debian
build:
    steps:
        - arjen/hugo-build:
            theme: redlounge
deploy:
    steps:
        - install-packages:
            packages: git ssh-client
        - leipert/git-push:
            gh_oauth: $GIT_TOKEN
            repo: skarlso/skarlso.github.io
            branch: master
            basedir: public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty easy. The $GIT_TOKEN is a variable set-up on Wercker containing a restricted token which is only good for pushing. And note that you have to use an explicit package name with git-push or else Wercker will not find that step. Hugo-build will build my blog with a simple command using redlounge theme.&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s it. No other setup is necessary and no new branch will be made. Any questions, please feel free to leave a comment.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wercker Test</title>
      <link>https://skarlso.github.io/2016/02/10/wercker-test</link>
      <pubDate>Wed, 10 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/02/10/wercker-test</guid>
      <description>

&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;

&lt;p&gt;This is a wercker Test.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Doing CORS in Go with Gin and JSON</title>
      <link>https://skarlso.github.io/2016/02/02/doing-cors-in-go-with-gin-and-json</link>
      <pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/02/02/doing-cors-in-go-with-gin-and-json</guid>
      <description>

&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;

&lt;p&gt;Hello folks.&lt;/p&gt;

&lt;p&gt;This will be a quick post about how to do CORS with jQuery, Gin in Go with a very simple ajax GET and Json.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m choosing JSON here because basically I don&amp;rsquo;t really like JSONP. And actually, it&amp;rsquo;s not very complicated to do CORS, it&amp;rsquo;s just hidden enough so that it doesn&amp;rsquo;t become transparent.&lt;/p&gt;

&lt;p&gt;First, what is CORS? It&amp;rsquo;s Cross-Platform Resource Sharing. It has been invented so that without your explicit authorization in the header of a request, Javascript can&amp;rsquo;t reach outside of your domain and be potentially harmful to your visitors.&lt;/p&gt;

&lt;p&gt;Now, suppose you have an architecture like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/architecture.png&#34; alt=&#34;Architecture&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You have multiple agents sitting on multiple nodes. You have one central server, and you have multiple front-ends. Everybody can only talk to the Server but the server does talk to everyone. You would like to have a dynamic front-end and would like to display data with ajax calls. Since your front-end sits on a different server, you will have to do something about CORS. This is how I solved it&amp;hellip;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m using &lt;a href=&#34;https://github.com/gin-gonic/gin&#34;&gt;Gin&lt;/a&gt; for my REST service for &lt;a href=&#34;https://github.com/Skarlso/dockmaster2&#34;&gt;Dockmaster&lt;/a&gt;. For this two work, you need to adjust two component.&lt;/p&gt;

&lt;h2 id=&#34;server&#34;&gt;Server&lt;/h2&gt;

&lt;p&gt;There is thing called a Preflight-Check. In essence, the preflight check is sent BEFORE the actual request to check if the next request is allowed to go out of the domain. The preflight check is sent to the same URI just with OPTIONS method. In order to tell the caller that the next one will be safe, you need three things.&lt;/p&gt;

&lt;p&gt;First, you need to set two Headers.
#1 -&amp;gt; Access-Control-Allow-Origin to &amp;ldquo;*&amp;ldquo;.
#2 -&amp;gt; Access-Control-Allow-Headers to &amp;ldquo;access-control-allow-origin, access-control-allow-headers&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;These are the minimum headers you can set. If you allow Access-Control-Allow-Origin you also have to allow it in the headers section because the next request will expect it to be there. Also, note here that setting Origin to * is only recommended in development environment. Otherwise it should be set to whatever your domain is.&lt;/p&gt;

&lt;p&gt;Second, you need to respond to the OPTIONS method with a 200. In order to do that, I added a simple rule with the same end-point but with OPTIONS.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {
    router := gin.Default()
    v1 := router.Group(APIBASE)
    {
        v1.GET(&amp;quot;/list&amp;quot;, listContainers)
        v1.POST(&amp;quot;/add&amp;quot;, addContainers)
        v1.POST(&amp;quot;/delete&amp;quot;, deleteContainers)
        v1.GET(&amp;quot;/inspect/:agentID/:containerID&amp;quot;, inspectContainer)
        v1.OPTIONS(&amp;quot;/inspect/:agentID/:containerID&amp;quot;, preflight)
        v1.POST(&amp;quot;/stopAll&amp;quot;, stopAll)
        v1.OPTIONS(&amp;quot;/stopAll&amp;quot;, preflight)
    }
    router.Run(&amp;quot;:8989&amp;quot;)
}

func preflight(c *gin.Context) {
    c.Header(&amp;quot;Access-Control-Allow-Origin&amp;quot;, &amp;quot;*&amp;quot;)
    c.Header(&amp;quot;Access-Control-Allow-Headers&amp;quot;, &amp;quot;access-control-allow-origin, access-control-allow-headers&amp;quot;)
    c.JSON(http.StatusOK, struct{}{})
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that the preflight method is there for two end-points. I added it to those end-points which will reach over the domain. The others are all local, thus they don&amp;rsquo;t need that. This leads to a little duplication, but that is fine. I have a very fine control over what actually is allowed to go outside of the domain.&lt;/p&gt;

&lt;p&gt;So, how do we call this?&lt;/p&gt;

&lt;h2 id=&#34;frontend&#34;&gt;Frontend&lt;/h2&gt;

&lt;p&gt;In the front-end&amp;rsquo;s web layout, I&amp;rsquo;m doing an Ajax GET, which looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;                $.ajax({
                    url: &#39;http://localhost:8989/api/1/inspect/&#39;+data.agentid+&#39;/&#39;+data.id,
                    type: &#39;GET&#39;,
                    dataType:&amp;quot;json&amp;quot;,
                    headers: {&amp;quot;Access-Control-Allow-Origin&amp;quot;: &amp;quot;*&amp;quot;, &amp;quot;Access-Control-Allow-Headers&amp;quot;: &amp;quot;access-control-allow-origin, access-control-allow-headers&amp;quot;},
                    processData: false,
                    success: function(data) {
                        var json = JSON.stringify(data, null, 4)
                        independentPopup.html(&amp;quot;&amp;lt;pre &amp;gt;&amp;quot;+json+&amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;);
                        $(link).after(independentPopup);
                    }
                });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the headers are set, the request will work nicely.&lt;/p&gt;

&lt;h2 id=&#34;y-u-no-middleware&#34;&gt;Y U No Middleware?&lt;/h2&gt;

&lt;p&gt;And now you could say that, why not just have a middleware which will always accept OPTIONS for every end-point. Because I like it better this way. Some would argue that this is too granular, but fact is, that in my opinion, this is more readable and immediatly visible. However, if you DO want to do that, you have several options to your disposal.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/itsjamie/gin-cors&#34;&gt;Cors Basic Http Middleware&lt;/a&gt; and for Gin &lt;a href=&#34;https://github.com/itsjamie/gin-cors&#34;&gt;Gin CORS Middleware&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This is it. You can see the code in its entirety on Github. Have a better idea on how to do it? Please! Do not hesitate to share. I always like to learn.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;

&lt;p&gt;And as always,
Have a nice day!&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Journey in advent of code</title>
      <link>https://skarlso.github.io/2016/01/22/my-journey-in-advent-of-code</link>
      <pubDate>Fri, 22 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/01/22/my-journey-in-advent-of-code</guid>
      <description>

&lt;p&gt;Hello folks.&lt;/p&gt;

&lt;p&gt;I wanted to share with you my tale of working through the problems with &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent Of Code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is a nice tale and there are a few things I learned from it, especially in Go, since I used that solve all of the problems. So, let&amp;rsquo;s get started.&lt;/p&gt;

&lt;h1 id=&#34;solving-the-problems&#34;&gt;Solving the problems&lt;/h1&gt;

&lt;p&gt;The most important lesson I learned while doing these exercises was, how to solve these problems. A couple of them were simple enough to not have to over think it, but most of them got very tricky. I could have gone with a brute force attempt, but as we see later, that wasn&amp;rsquo;t always a very good solution. And people who used that, actually just got lucky finding their solutions.&lt;/p&gt;

&lt;p&gt;The eight stages of breaking down a problem according to this book &lt;a href=&#34;http://www.amazon.co.uk/Think-Like-Programmer-Introduction-Creative/dp/1593274246/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1453449575&amp;amp;sr=1-1&amp;amp;keywords=thinking+like+a+programmer&#34;&gt;Thinking Like a Programmer&lt;/a&gt; are the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have a plan&lt;/li&gt;
&lt;li&gt;Rephrase&lt;/li&gt;
&lt;li&gt;Divide&lt;/li&gt;
&lt;li&gt;Start with what you know&lt;/li&gt;
&lt;li&gt;Reduce&lt;/li&gt;
&lt;li&gt;Analogies&lt;/li&gt;
&lt;li&gt;Experiment&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t get frustrated&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;have-a-plan-and-understanding-your-goal&#34;&gt;Have a plan and understanding your goal&lt;/h2&gt;

&lt;p&gt;This is simple. Always have a plan of what you would like to do, and how to start. This will help you massively along the way to not to loose sight of what your goal is actually. For example, look at &lt;a href=&#34;http://adventofcode.com/day/24&#34;&gt;Day 24&lt;/a&gt;. At first, it looks like a permutational puzzle, but if you understand the solution we are looking for, you realize that there is an easier way of finding it. Since you only want the packages which consists of the fewest item counts, you would only care about the largest numbers because those will be the fewest which still give you the desired package weight. Suddenly the problem gets easier because you don&amp;rsquo;t have to worry about the other groups any longer.&lt;/p&gt;

&lt;h2 id=&#34;rephrase&#34;&gt;Rephrase&lt;/h2&gt;

&lt;p&gt;Rephrasing the problem with your own words can help in understanding it better. Or even better, try explaining it to somebody else. If you cannot rephrase it, you didn&amp;rsquo;t understand it in the first place.&lt;/p&gt;

&lt;h2 id=&#34;divide&#34;&gt;Divide&lt;/h2&gt;

&lt;p&gt;If the problem seems daunting because it&amp;rsquo;s massive, just divide it into smaller chunks. This is something that we usually do with large problems, but it&amp;rsquo;s more subtle than that. If you face a problem which seems complex, just factor out parts of it until you got a problem which you do understand. Even if you have to butcher the original puzzle problem. It doesn&amp;rsquo;t matter. Adding complexity later is easier than adding complexity in its infancy.&lt;/p&gt;

&lt;h2 id=&#34;start-with-what-you-know-finding-analogies&#34;&gt;Start with what you know &amp;amp;&amp;amp; Finding analogies&lt;/h2&gt;

&lt;p&gt;This one speaks for itself. If you know parts of the problem, because you know analogy for it, or you faced something similar before, or exactly that, start with that.&lt;/p&gt;

&lt;h2 id=&#34;reduce&#34;&gt;Reduce&lt;/h2&gt;

&lt;p&gt;If the problem seems too complex, remove complexity. Start with a smaller set. Preferably something testable (I&amp;rsquo;ll come back to that later). Remove constraints, or add them as desired. A constraint makes it harder to solve the puzzle? Remove it, and try solving it without. After that, the solution will give you insight into the problem and you can add that constraint back in.&lt;/p&gt;

&lt;p&gt;Consider &lt;a href=&#34;http://adventofcode.com/day/11&#34;&gt;Day 11&lt;/a&gt;. I had fun with this one. In order to easy it up a little, I first, removed the constraint of doing the increment with letters. I did it with numbers. I also removed the constraint of doing it within the confines of a limited length array. After I got that I&amp;rsquo;ll use modulo to make the numbers wrap around, it was way more easy to apply it to characters. And after a little fidgeting this came to life:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;passwd[i] -= &#39;a&#39;
passwd[i] = (passwd[i] + 1) % ((&#39;z&#39; - &#39;a&#39;) + 1)
passwd[i] += &#39;a&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The -,+ &amp;lsquo;a&amp;rsquo; is needed so that it&amp;rsquo;s dealing with ascii code from 0 - &amp;lsquo;z&amp;rsquo;. This basically makes it so that when I reach the end of the alphabet it will wrap around and start from &amp;lsquo;a&amp;rsquo; again.&lt;/p&gt;

&lt;h2 id=&#34;experiment&#34;&gt;Experiment&lt;/h2&gt;

&lt;p&gt;This led to more solutions than I care to admit. Basically just start experimenting with solutions which are in your head. There is a chance, that what you come up with, will be the solution. This goes very well with the principle of &lt;em&gt;Make it work&lt;/em&gt;, &lt;em&gt;Make it right&lt;/em&gt;, &lt;em&gt;Make it fast&lt;/em&gt;. Just have something working first, and than you can make it work properly after. It&amp;rsquo;s always better to have &lt;em&gt;something&lt;/em&gt; rather than nothing.&lt;/p&gt;

&lt;p&gt;And last but not least&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;don-t-get-frustrated&#34;&gt;Don&amp;rsquo;t get frustrated&lt;/h2&gt;

&lt;p&gt;This is something I cannot say strongly enough. Seriously. &lt;strong&gt;DO NOT GET FRUSTRATED&lt;/strong&gt;. Most of the problems were designed to be harder. Unless you work as a programmer professionally for several years now, or this is a field of interest for you, you will spend a day hacking around on a problem and trying to find a solution which is adequate. In these times, you will get frustrated and think you are too stupid for this, this couldn&amp;rsquo;t be more far from the truth! You might need some inspiration, you might need some time away from the screen, it helps if you draw out the problem in a piece of paper, or just think about it without seeing it for a while. Just take a break, eat something, watch a comedy and get back to it later with a fresh view.&lt;/p&gt;

&lt;h1 id=&#34;technical-gotchas&#34;&gt;Technical Gotchas&lt;/h1&gt;

&lt;p&gt;So after the general problem solving side of things, I learned many things about Go, and about the tidbits of this language.&lt;/p&gt;

&lt;h2 id=&#34;byte-slices&#34;&gt;Byte Slices&lt;/h2&gt;

&lt;p&gt;I already knew that []byte is more performant and that Go optimizes on them more, but not to this extent. As in my previous blog posts I discovered that using them can really make a huge difference. Go even has a library called &lt;code&gt;bytes&lt;/code&gt; which has helper functions similar to that of &lt;code&gt;strings&lt;/code&gt; to help you out in these situations. Go optimizes on map recalls as well when you cast to string from []byte and use that as a map key like this: myMap[string(data)].&lt;/p&gt;

&lt;h2 id=&#34;brute-force-or-looping&#34;&gt;Brute Force or Looping&lt;/h2&gt;

&lt;p&gt;Most of the times you could get away with looping or trying to brute force out a solution. But there were times, where you really had to huddle down and think the problem through. Because simply looping, either took too long, or didn&amp;rsquo;t come up with a good answer. That&amp;rsquo;s why I rather always start with: &amp;lsquo;How could I solve this without looping?&amp;rsquo;. This will get you into the right mindset. Or thinking: &amp;lsquo;How could I solve this without taking each and every combination into account?&amp;rsquo;. These questions will help you to think about the problem without loops. Or only if you REALLY must use one.&lt;/p&gt;

&lt;p&gt;Doing this will get you into the right way of thinking. I know that in advent of code there is a Leaderboard and you could get on it if you were fast. But most of the times having a fast solution is far from having the right solution.&lt;/p&gt;

&lt;h2 id=&#34;structs-are-awesome&#34;&gt;Structs are Awesome&lt;/h2&gt;

&lt;p&gt;I like using structs. They are a very lightweight way of defining objects, structures which stick together. For example in the &lt;a href=&#34;http://adventofcode.com/day/6&#34;&gt;Day 6&lt;/a&gt; Light puzzle, or even &lt;a href=&#34;http://adventofcode.com/day/3&#34;&gt;Day 3&lt;/a&gt; Traveling santa example, a struct which stuck x,y locations together and made it a map key, it was trivial to make my gif out of it with SVG -&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Skarlso/goprojects/master/advent/day3/day1.gif&#34; alt=&#34;Traveling Santa&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;go-is-simple-to-read&#34;&gt;Go is Simple to Read&lt;/h2&gt;

&lt;p&gt;[opinion] I like Go because of its simplicity. You don&amp;rsquo;t see stuff in Go most of the times, where you need to look three times to understand what the heck is going on. I like filter, reduce, map and syntactic sugar, but they make for a very poor reading experience. Go, in that way, choose not to incorporate these paradigms and I find that refreshing. [/opinion]&lt;/p&gt;

&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;

&lt;p&gt;TDD is something we all should know by now and care about. When I&amp;rsquo;m doing puzzles, or finger exercises, I tend to not write tests. But on a more complex puzzle, or a task, I always start with a test. Especially if you are given samples for a puzzle which work. That&amp;rsquo;s a gold mine. You can tweak your algorithm using those samples until they work and then simply apply a larger sample size.&lt;/p&gt;

&lt;p&gt;Tests will also help you with breaking down a problem and identifying parts which you already know.&lt;/p&gt;

&lt;p&gt;For example &lt;a href=&#34;http://adventofcode.com/day/13&#34;&gt;Day 13&lt;/a&gt;. Optimal Seating arrangements. Or the similar &lt;a href=&#34;http://adventofcode.com/day/9&#34;&gt;Day 9&lt;/a&gt;. Which was calculating shortest route distance. Or the password one, Day 11 which I showed before. In these cases, tests helped me make the core of the algorithm solid. Calculating connections, or the odd regex here and there, which was making sure that the password was validated properly.&lt;/p&gt;

&lt;p&gt;Tests will also help you to be able to move on after you found your solution. When I was done with the first iteration of passwords which was still using strings, I went on to optimize it, to use []byte. The tests helped me to know that the code was still working as expected after the refactoring.&lt;/p&gt;

&lt;h1 id=&#34;closing-words&#34;&gt;Closing words&lt;/h1&gt;

&lt;p&gt;All in all it was a massive amount of fun doing these exercises and I&amp;rsquo;m thankful to the creator for making it. And I did enjoy the story behind the exercises as well. I think this site stood out because it had a fun factor. For simple exercises there are a lot of other sites -like Project Euler, or Sphere Judge Online-, which just plainly present you a problem and that&amp;rsquo;s it. It&amp;rsquo;s still fun, but it can also became boring very fast. Don&amp;rsquo;t forget the fun factor which makes you plow on and go into a blind frenzy that you cannot quit until it&amp;rsquo;s done. That&amp;rsquo;s the fun part.&lt;/p&gt;

&lt;p&gt;Thank you for reading!
Have a nice day.
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Improving performance with byte slice and int map</title>
      <link>https://skarlso.github.io/2016/01/05/improving-performance-with-byte-slice-and-int-map</link>
      <pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/01/05/improving-performance-with-byte-slice-and-int-map</guid>
      <description>&lt;p&gt;Hello Folks.&lt;/p&gt;

&lt;p&gt;Today I would like to share with you my little tale of refactoring my solution to &lt;a href=&#34;http://adventofcode.com/day/13&#34;&gt;Advent Of Code Day 13&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a lovely tale of action, adventure, drama, and comedy.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s being with my first iteration of the problem.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;bufio&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;math&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;strings&amp;quot;

	&amp;quot;github.com/skarlso/goutils/arrayutils&amp;quot;
)

var seatingCombinations = make([][]string, 0)
var table = make(map[string][]map[string]int)
var keys = make([]string, 0)

//Person a person
type Person struct {
	// neighbour *Person
	name string
	like int
}

func main() {
	file, _ := os.Open(&amp;quot;input.txt&amp;quot;)
	defer file.Close()
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()
		split := strings.Split(line, &amp;quot; &amp;quot;)
		like, _ := strconv.Atoi(split[3]) //If lose -&amp;gt; * -1
		if split[2] == &amp;quot;lose&amp;quot; {
			like *= -1
		}
		table[split[0]] = append(table[split[0]], map[string]int{strings.Trim(split[10], &amp;quot;.&amp;quot;): like})
		if !arrayutils.ContainsString(keys, split[0]) {
			keys = append(keys, split[0])
		}
	}
	generatePermutation(keys, len(keys))
	fmt.Println(&amp;quot;Best seating efficiency:&amp;quot;, calculateSeatingEfficiancy())
}

func generatePermutation(s []string, n int) {
	if n == 1 {
		news := make([]string, len(s))
		copy(news, s)
		seatingCombinations = append(seatingCombinations, news)
	}
	for i := 0; i &amp;lt; n; i++ {
		s[i], s[n-1] = s[n-1], s[i]
		generatePermutation(s, n-1)
		s[i], s[n-1] = s[n-1], s[i]
	}
}

func calculateSeatingEfficiancy() int {
	bestSeating := math.MinInt64
	for _, v := range seatingCombinations {
		calculatedOrder := 0

		for i := range v {
			left := (i - 1) % len(v)
			//This is to work around the fact that in Go
			//modulo of a negative number will not return a positive number.
			//So -1 % 4 will not return 3 but -1. In that case we add length.
			if left &amp;lt; 0 {
				left += len(v)
			}
			right := (i + 1) % len(v)
			// fmt.Printf(&amp;quot;Left: %d; Right: %d\n&amp;quot;, left, right)
			leftLike := getLikeForTargetConnect(v[i], v[left])
			rightLike := getLikeForTargetConnect(v[i], v[right])
			// fmt.Printf(&amp;quot;Name: %s; Left:%d; Right:%d\n&amp;quot;, v[i], leftLike, rightLike)
			calculatedOrder += leftLike + rightLike
		}
		// fmt.Printf(&amp;quot;Order for: %v; Calc:%d\n&amp;quot;, v, calculatedOrder)
		if calculatedOrder &amp;gt; bestSeating {
			bestSeating = calculatedOrder
		}
	}

	return bestSeating
}

func getLikeForTargetConnect(name string, neighbour string) int {
	neighbours := table[name]
	for _, t := range neighbours {
		if v, ok := t[neighbour]; ok {
			return v
		}
	}
	return 0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is quiet large. And takes a bit of explaining. So what is happening here? We are putting the names which correspond with numbers and neighbours into a map which has a map as a value. The map contains seating information for a person. For example, next to Alice, a bunch of people can sit, and they have a certain relationship to Alice, represented by a number.&lt;/p&gt;

&lt;p&gt;We could, at this point, represent it with a graph, but that would be overkill.&lt;/p&gt;

&lt;p&gt;Permutation is simple because I choose to represent a Table with a Circular Slice. This means that a slice like this =&amp;gt; Alice, Bob, Tom; means that Alice is sitting next to Bob and Tom. So Alice&amp;rsquo;s neighbour of -1 (left) is in fact i-1 % 3. And Bob is i + 1. For Tom, Alice is i + 1 % 3. After we got this, we just permutate the possible combinations into slices of slices and iterate over them.&lt;/p&gt;

&lt;p&gt;The benchmark for this is terrible.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
================With Strings================
20	 589571259 ns/op
ok  	github.com/skarlso/goprojects/advent/day13/part1	11.873s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, my first thought was, convert everything I can to []byte. But because slices cannot be map keys, because map keys need to be comparable, we are still stuck with the same ns/ops.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//var seatingCombinations = make([][]string, 0)
//var keys = make([]string, 0)
var seatingCombinations = make([][][]byte, 0)
var keys = make([][]byte, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I adjusted the code to work with []byte instead. What can we do to fix the map though? One obvious gain is, not to use string as a key. Because strings are immutable, working with them always means copy-ing and that&amp;rsquo;s why they get to be very slow. So removing them from Keys and using Numbers instead will mean a huge gain for us.&lt;/p&gt;

&lt;p&gt;To do this, I created a map which maps names with numbers. I could hardcode them with iota, but that is a very bad thing to do. It would mean, that when I add a new name, I would have to go, and re-compile my code, because data changed. That&amp;rsquo;s not what we want.&lt;/p&gt;

&lt;p&gt;So, I added this little tid-bit into the for cycle when I&amp;rsquo;m reading in the file lines =&amp;gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;...
if _, ok := nameMapping[split[0]]; !ok {
    nameMapping[split[0]] = id
    id++
}
if _, ok := nameMapping[trimmedNeighbour]; !ok {
    nameMapping[trimmedNeighbour] = id
    id++
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Id starts as Zero. And nameMapping is a simple map[string]int. After this, we fix all the map calls, from &lt;code&gt;table[split[0]]&lt;/code&gt; to &lt;code&gt;table[nameMapping[split[0]]]&lt;/code&gt;. Table&amp;rsquo;s map will now work with int, but we can still work with strings otherwise.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;table[nameMapping[split[0]]] = append(table[nameMapping[split[0]]], map[int]int{nameMapping[trimmedNeighbour]: like})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This has now a marginally better performance as before:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;BenchmarkCalculateSeating	      50	  32637879 ns/op
ok  	github.com/skarlso/goprojects/advent/day13/part1	1.698s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But, we can still do a HUGE one better. Can you notice the other bottleneck? See, how keys are still []byte? That&amp;rsquo;s, now completely unnecessary. We can use int, since our keys are ints! &lt;em&gt;Permutation&lt;/em&gt; changes, and the retrieve.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;...
func generatePermutation(s []int, n int) {
...

...
func getLikeForTargetConnect(name int, neighbour int) int {
	neighbours := table[name]
	for _, t := range neighbours {
		if v, ok := t[neighbour]; ok {
			return v
		}
	}
	return 0
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Permutation was the Other huge performance consumption. Now, our run time is&amp;hellip;. drum rolls&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;BenchmarkCalculateSeating	   10000	    166431 ns/op
ok  	github.com/skarlso/goprojects/advent/day13/part1	1.695s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Down to 166431 ns/op!!! From 32637879 ns/op!! And notice how suddenly, go&amp;rsquo;s benchmark jumped up in sample count. Our code is now blazing fast. It&amp;rsquo;s 0.05% of the previous run! It&amp;rsquo;s almost &lt;strong&gt;200 times faster&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;We could still improve it here and there. I&amp;rsquo;m sure I&amp;rsquo;m doing some extra stuff which is not needed or could be made easier somehow. But I&amp;rsquo;m actually quiet happy with this solution right now.&lt;/p&gt;

&lt;p&gt;The full code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;bufio&amp;quot;
	&amp;quot;math&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;strings&amp;quot;

	&amp;quot;github.com/skarlso/goutils/arrayutils&amp;quot;
)

var seatingCombinations = make([][]int, 0)
var table = make(map[int][]map[int]int)
var keys = make([]int, 0)
var nameMapping = make(map[string]int)

//Person a person
type Person struct {
	// neighbour *Person
	name string
	like int
}

func main() {
	CalculatePerfectSeating()
}

//CalculatePerfectSeating returns the perfect seating order based on Love/Hate relations
func CalculatePerfectSeating() {
	file, _ := os.Open(&amp;quot;input.txt&amp;quot;)
	defer file.Close()
	scanner := bufio.NewScanner(file)
	id := 0
	for scanner.Scan() {
		line := scanner.Text()
		split := strings.Split(line, &amp;quot; &amp;quot;)
		trimmedNeighbour := strings.Trim(split[10], &amp;quot;.&amp;quot;)
		like, _ := strconv.Atoi(split[3]) //If lose -&amp;gt; * -1
		if _, ok := nameMapping[split[0]]; !ok {
			nameMapping[split[0]] = id
			id++
		}
		if _, ok := nameMapping[trimmedNeighbour]; !ok {
			nameMapping[trimmedNeighbour] = id
			id++
		}
		if split[2] == &amp;quot;lose&amp;quot; {
			like *= -1
		}
		table[nameMapping[split[0]]] = append(table[nameMapping[split[0]]], map[int]int{nameMapping[trimmedNeighbour]: like})
		if !arrayutils.ContainsInt(keys, nameMapping[split[0]]) {
			keys = append(keys, nameMapping[split[0]])
		}
	}
	generatePermutation(keys, len(keys))
	// fmt.Println(&amp;quot;Best seating efficiency:&amp;quot;, calculateSeatingEfficiancy())
}

func generatePermutation(s []int, n int) {
	if n == 1 {
		news := make([]int, len(s))
		copy(news, s)
		seatingCombinations = append(seatingCombinations, news)
	}
	for i := 0; i &amp;lt; n; i++ {
		s[i], s[n-1] = s[n-1], s[i]
		generatePermutation(s, n-1)
		s[i], s[n-1] = s[n-1], s[i]
	}
}

func calculateSeatingEfficiancy() int {
	bestSeating := math.MinInt64
	for _, v := range seatingCombinations {
		calculatedOrder := 0

		for i := range v {
			left := (i - 1) % len(v)
			//This is to work around the fact that in Go
			//modulo of a negative number will not return a positive number.
			//So -1 % 4 will not return 3 but -1. In that case we add length.
			if left &amp;lt; 0 {
				left += len(v)
			}
			right := (i + 1) % len(v)
			calculatedOrder += getLikeForTargetConnect(v[i], v[left]) + getLikeForTargetConnect(v[i], v[right])
		}
		if calculatedOrder &amp;gt; bestSeating {
			bestSeating = calculatedOrder
		}
	}

	return bestSeating
}

func getLikeForTargetConnect(name int, neighbour int) int {
	neighbours := table[name]
	for _, t := range neighbours {
		if v, ok := t[neighbour]; ok {
			return v
		}
	}
	return 0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, on github =&amp;gt; &lt;a href=&#34;https://github.com/Skarlso/goprojects/tree/master/advent/day13&#34;&gt;Advent Of Code Day 13&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you very much for reading, this has been a massive fun to write and to refactor.&lt;/p&gt;

&lt;p&gt;Have something to say? Please don&amp;rsquo;t hesitate.&lt;/p&gt;

&lt;p&gt;And as always,&lt;/p&gt;

&lt;p&gt;Have a nice day!&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Byte arrays and Channels</title>
      <link>https://skarlso.github.io/2016/01/01/byte-arrays-and-channels</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/01/01/byte-arrays-and-channels</guid>
      <description>&lt;p&gt;Hi folks and a Happy new Year!&lt;/p&gt;

&lt;p&gt;Today, I would like to show you some interesting things you can do with channels. Consider the following simple example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	generatedPassword := make(chan int, 100)
	correctPassword := make(chan int)
	defer close(generatedPassword)
	defer close(correctPassword)
	go passwordIncrement(generatedPassword)
	go checkPassword(generatedPassword, correctPassword)
	pass := &amp;lt;-correctPassword
	fmt.Println(pass)
}

func checkPassword(input &amp;lt;-chan int, output chan&amp;lt;- int) {
	for {
		p := &amp;lt;-input
		//Introduce lengthy operation here
		// time.Sleep(time.Second)
		fmt.Println(&amp;quot;Checking p:&amp;quot;, p)
		if p &amp;gt; 100000 {
			output &amp;lt;- p
		}
	}
}

func passwordIncrement(out chan&amp;lt;- int) {
	p := 0
	for {
		p++
		out &amp;lt;- p
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The premise is as follows. It launches two go routines. One, which generates passwords, and an other which checks for validity. The two routines talk to each other through the channel &lt;code&gt;generatedPassword&lt;/code&gt;. That&amp;rsquo;s the providing connections between them. The channel &lt;code&gt;correctPassword&lt;/code&gt; provides output for the &lt;code&gt;checkPassword&lt;/code&gt; routine.&lt;/p&gt;

&lt;p&gt;If there is data received from &lt;code&gt;correctPassword&lt;/code&gt; channel, we found our first password and there is no need to look further so we, print the password and quit. The channels will close with defer. This works. But the password is usually either a []byte or a string. With string, it still works.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	generatedPassword := make(chan string, 100)
	correctPassword := make(chan string)
	defer close(generatedPassword)
	defer close(correctPassword)
	go passwordIncrement(generatedPassword)
	go checkPassword(generatedPassword, correctPassword)
	pass := &amp;lt;-correctPassword
	fmt.Println(pass)
}

func checkPassword(input &amp;lt;-chan string, output chan&amp;lt;- string) {
	for {
		p := &amp;lt;-input
		//Introduce lengthy operation here
		// time.Sleep(time.Second)
		fmt.Println(&amp;quot;Checking p:&amp;quot;, p)
		if performSomeCheckingOperation(p) {
			output &amp;lt;- p
		}
	}
}

func generateNewPassword(out chan&amp;lt;- string) {
	var p string
	for {
		p = generate(p)
		out &amp;lt;- p
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The generating happens based on the previously generated password. For example, we increment, or permeate. aaaa, aaab, aaac&amp;hellip;&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;generatedPassword&lt;/code&gt; is a buffered channel, it gathers a 100 passwords from which checking retrieves passwords one by one and works on them in a slower process.&lt;/p&gt;

&lt;p&gt;Now, this is fine, but using []byte arrays will always be more powerful and faster. So we would like to use []byte. Like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	generatedPassword := make(chan []byte, 100)
	correctPassword := make(chan []byte)
	defer close(generatedPassword)
	defer close(correctPassword)
	go passwordIncrement(generatedPassword)
	go checkPassword(generatedPassword, correctPassword)
	pass := &amp;lt;-correctPassword
	fmt.Println(string(pass))
}

func checkPassword(input &amp;lt;-chan []byte, output chan&amp;lt;- []byte) {
	for {
		p := &amp;lt;-input
		//Introduce lengthy operation here
		// time.Sleep(time.Second)
		fmt.Println(&amp;quot;Checking p:&amp;quot;, string(p))
		if performSomeCheckingOperation(p) {
			output &amp;lt;- p
		}
	}
}

func generateNewPassword(out chan&amp;lt;- []byte) {
	var p []byte
	for {
		p = generate(p)
		out &amp;lt;- p
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will not work. Why? Because []byte is a slice and thus will be constantly overwritten. The checking go routine will always only check the last data and many generated passwords will be lost. This is also noted in go&amp;rsquo;s scanner here =&amp;gt; &lt;a href=&#34;https://golang.org/pkg/bufio/#Scanner.Bytes&#34;&gt;Scanner.Bytes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have a couple of options here.&lt;/p&gt;

&lt;p&gt;We could use &lt;code&gt;string&lt;/code&gt; channels and convert to []byte after. This is still okay, because the conversion isn&amp;rsquo;t very CPU intensive.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;...
generatedPassword := make(chan string, 100)
correctPassword := make(chan string)
...
p := []byte(&amp;lt;-input) //This will work very nicely.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Options two would be If you have a fixed password to handle, fix data, for example MD5 hash, you can use a byte array. Like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

const PASSWD=13

func main() {
	generatedPassword := make(chan [PASSWD]byte, 100)
	correctPassword := make(chan [PASSWD]byte)
	defer close(generatedPassword)
	defer close(correctPassword)
	go passwordIncrement(generatedPassword)
	go checkPassword(generatedPassword, correctPassword)
	pass := &amp;lt;-correctPassword
	fmt.Println(string(pass))
}

func checkPassword(input &amp;lt;-chan [PASSWD]byte, output chan&amp;lt;- [PASSWD]byte) {
	for {
		p := &amp;lt;-input
		//Introduce lengthy operation here
		// time.Sleep(time.Second)
		fmt.Println(&amp;quot;Checking p:&amp;quot;, string(p))
		if performSomeCheckingOperation(p) {
			output &amp;lt;- p
		}
	}
}

func generateNewPassword(out chan&amp;lt;- [PASSWD]byte) {
	var p [PASSWD]byte
	for {
		p = generate(p)
		out &amp;lt;- p
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is also one solution. If you have to convert between the two, could go with &lt;code&gt;p := byte[:]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Conclusion is, that use conversion rather than string types and be aware that using slices in channels is dangerous.&lt;/p&gt;

&lt;p&gt;Thanks for reading!
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use Byte Array Instead of Strings</title>
      <link>https://skarlso.github.io/2015/12/29/use-byte-array-instead-of-strings/</link>
      <pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/29/use-byte-array-instead-of-strings/</guid>
      <description>&lt;p&gt;Hello Folks.&lt;/p&gt;

&lt;p&gt;This is just a quick post on the topic and a reminder for myself and everybody to ALWAYS USE []BYTE INSTEAD OF STRINGS.&lt;/p&gt;

&lt;p&gt;[]Byte is marginally faster than a simple Strings. In fact, I would say using []byte should be the standard instead of strings.&lt;/p&gt;

&lt;p&gt;Sample code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package solutions

import &amp;quot;fmt&amp;quot;

const (
    //INPUT input
    INPUT = &amp;quot;1321131112&amp;quot;
    //LIMIT limit
    LIMIT = 50
)

//LookAndSay translates numbers according to Look and Say algo
func LookAndSay(s string, c chan string) {
    charCount := 1
    look := &amp;quot;&amp;quot;
    for i := range s {
        if i+1 &amp;lt; len(s) {
            if s[i] == s[i+1] {
                charCount++
            } else {
                look += fmt.Sprintf(&amp;quot;%d%s&amp;quot;, charCount, string(s[i]))
                charCount = 1
            }
        } else {
            look += fmt.Sprintf(&amp;quot;%d%s&amp;quot;, charCount, string(s[i]))
        }
    }
    c &amp;lt;- look
}

//GetLengthOfLookAndSay Retrieve the Length of a lookandsay done Limit times
func GetLengthOfLookAndSay() {
    c := make(chan string, 0)
    go LookAndSay(INPUT, c)
    finalString := &amp;lt;-c
    for i := 0; i &amp;lt;= LIMIT-2; i++ {
        go LookAndSay(finalString, c)
        finalString = &amp;lt;-c
        // fmt.Println(finalString)
    }
    fmt.Println(&amp;quot;Lenght of final String:&amp;quot;, len(finalString))
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This, with the limit raised to 50 run for ~1 hour. Even with the routines although they were just for show since they had to wait for each others input.&lt;/p&gt;

&lt;p&gt;Now change this to []byte and the run time was almost under 2 seconds on my machine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package solutions

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;strconv&amp;quot;
)

const (
    //LIMIT limit
    LIMIT = 50
)

//INPUT puzzle input
//This used to be a string until I was reminded that BYTE ARRAY IS ALWAYS FASTER!
var INPUT = []byte(&amp;quot;1321131112&amp;quot;)

//LookAndSay translates numbers according to Look and Say algo
func LookAndSay(s []byte) (look []byte) {
    charCount := 1
    for i := range s {
        if i+1 &amp;lt; len(s) {
            if s[i] == s[i+1] {
                charCount++
            } else {
                b := []byte(strconv.FormatInt(int64(charCount), 10))
                look = append(look, b[0], s[i])
                charCount = 1
            }
        } else {
            b := []byte(strconv.FormatInt(int64(charCount), 10))
            look = append(look, b[0], s[i])
        }
    }
    return
}

//GetLengthOfLookAndSay Retrieve the Length of a lookandsay done Limit times
func GetLengthOfLookAndSay() {
    finalString := INPUT
    for i := 0; i &amp;lt;= LIMIT-1; i++ {
        finalString = LookAndSay(finalString)
    }
    fmt.Println(&amp;quot;Lenght of final String:&amp;quot;, len(finalString))
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the solution for Day 10 on &lt;a href=&#34;http://adventofcode.com/&#34;&gt;AdventOfCode&lt;/a&gt; by the way.&lt;/p&gt;

&lt;p&gt;Thanks for readin&amp;rsquo;.
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use Byte Slice Instead of Strings</title>
      <link>https://skarlso.github.io/2015/12/29/use-byte-slice-instead-of-strings/</link>
      <pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/29/use-byte-slice-instead-of-strings/</guid>
      <description>&lt;p&gt;Hello Folks.&lt;/p&gt;

&lt;p&gt;This is just a quick post on the topic and a reminder for myself and everybody to ALWAYS USE []BYTE INSTEAD OF STRINGS.&lt;/p&gt;

&lt;p&gt;[]Byte is marginally faster than a simple Strings. In fact, I would say using []byte should be the standard instead of strings.&lt;/p&gt;

&lt;p&gt;Sample code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package solutions

import &amp;quot;fmt&amp;quot;

const (
    //INPUT input
    INPUT = &amp;quot;1321131112&amp;quot;
    //LIMIT limit
    LIMIT = 50
)

//LookAndSay translates numbers according to Look and Say algo
func LookAndSay(s string, c chan string) {
    charCount := 1
    look := &amp;quot;&amp;quot;
    for i := range s {
        if i+1 &amp;lt; len(s) {
            if s[i] == s[i+1] {
                charCount++
            } else {
                look += fmt.Sprintf(&amp;quot;%d%s&amp;quot;, charCount, string(s[i]))
                charCount = 1
            }
        } else {
            look += fmt.Sprintf(&amp;quot;%d%s&amp;quot;, charCount, string(s[i]))
        }
    }
    c &amp;lt;- look
}

//GetLengthOfLookAndSay Retrieve the Length of a lookandsay done Limit times
func GetLengthOfLookAndSay() {
    c := make(chan string, 0)
    go LookAndSay(INPUT, c)
    finalString := &amp;lt;-c
    for i := 0; i &amp;lt;= LIMIT-2; i++ {
        go LookAndSay(finalString, c)
        finalString = &amp;lt;-c
        // fmt.Println(finalString)
    }
    fmt.Println(&amp;quot;Lenght of final String:&amp;quot;, len(finalString))
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This, with the limit raised to 50 run for ~1 hour. Even with the routines although they were just for show since they had to wait for each others input.&lt;/p&gt;

&lt;p&gt;Now change this to []byte and the run time was almost under 2 seconds on my machine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package solutions

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;strconv&amp;quot;
)

const (
    //LIMIT limit
    LIMIT = 50
)

//INPUT puzzle input
//This used to be a string until I was reminded that BYTE ARRAY IS ALWAYS FASTER!
var INPUT = []byte(&amp;quot;1321131112&amp;quot;)

//LookAndSay translates numbers according to Look and Say algo
func LookAndSay(s []byte) (look []byte) {
    charCount := 1
    for i := range s {
        if i+1 &amp;lt; len(s) {
            if s[i] == s[i+1] {
                charCount++
            } else {
                b := []byte(strconv.FormatInt(int64(charCount), 10))
                look = append(look, b[0], s[i])
                charCount = 1
            }
        } else {
            b := []byte(strconv.FormatInt(int64(charCount), 10))
            look = append(look, b[0], s[i])
        }
    }
    return
}

//GetLengthOfLookAndSay Retrieve the Length of a lookandsay done Limit times
func GetLengthOfLookAndSay() {
    finalString := INPUT
    for i := 0; i &amp;lt;= LIMIT-1; i++ {
        finalString = LookAndSay(finalString)
    }
    fmt.Println(&amp;quot;Lenght of final String:&amp;quot;, len(finalString))
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the solution for Day 10 on &lt;a href=&#34;http://adventofcode.com/&#34;&gt;AdventOfCode&lt;/a&gt; by the way.&lt;/p&gt;

&lt;p&gt;Thanks for readin&amp;rsquo;.
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Recursive Letter Frequency Count</title>
      <link>https://skarlso.github.io/2015/12/23/recursive-freq-count/</link>
      <pubDate>Wed, 23 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/23/recursive-freq-count/</guid>
      <description>&lt;p&gt;Hello everybody!&lt;/p&gt;

&lt;p&gt;I wanted to do a sort post about word frequency count. I did it many times now and I was curious as how a recursive solution would perform as opposed to looping.&lt;/p&gt;

&lt;p&gt;So I wrote it up quickly and added a few benchmarks with different sized data.&lt;/p&gt;

&lt;p&gt;First&amp;hellip;. The code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var freqMap = make(map[string]int, 0)

func countLettersRecursive(s string) string {
    if len(s) == 0 {
        return s
    }
    freqMap[string(s[0])]++
    return countLettersRecursive(s[1:])
}

func countLettersLoop(s string) {
    for _, v := range s {
        freqMap[string(v)]++
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Very simple. The first run with a small sample: &amp;ldquo;asdfasdfasdfasdfasdf&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;BenchmarkLoopFrequencyCount  5000000           377 ns/op
BenchmarkRecursiveFrequencyCount     5000000           380 ns/op
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They almost equal but Recursive seems to be lagging behind. So I increased the sample size to a text which was 496 long.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PASS
BenchmarkLoopFrequencyCount    30000         53336 ns/op
BenchmarkRecursiveFrequencyCount       20000         61780 ns/op
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, as expected, recursing is less performant than looping. Also, I think my machine would die from a larger data size&amp;hellip;&lt;/p&gt;

&lt;p&gt;But the recursive looks so much cooler though.&lt;/p&gt;

&lt;p&gt;Thanks for reading!
Gergely.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>