<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/tags/windows/</link>
    <description>Recent content in Windows on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 01 Jul 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://skarlso.github.io/tags/windows/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Packer 0.8.1.</title>
      <link>https://skarlso.github.io/2015/07/01/packer-0-8-1/</link>
      <pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/07/01/packer-0-8-1/</guid>
      <description>Previously I wrote that the scripts I&amp;rsquo;m writing, are failing because Packer hangs.
Apparently, this was a known issue. And apparently, I was using an older version, 0.7.5. After I updated everything is working wonderfully!!!
And for my thanks, here is an updated PowerShell script for provisioning my dotnet stuff.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  $source = &amp;#34;http://download.</description>
      <content type="html"><![CDATA[<p>Previously I wrote that the scripts I&rsquo;m writing, are failing because Packer hangs.</p>
<p>Apparently, this was a known issue. And apparently, I was using an older version, 0.7.5. After I updated everything is working wonderfully!!!</p>
<p>And for my thanks, here is an updated PowerShell script for provisioning my dotnet stuff.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-powershell" data-lang="powershell">
<span class="nv">$source</span> <span class="p">=</span> <span class="s2">&#34;http://download.microsoft.com/download/1/6/7/167F0D79-9317-48AE-AEDB-17120579F8E2/NDP451-KB2858728-x86-x64-AllOS-ENU.exe&#34;</span>
<span class="nv">$destination</span> <span class="p">=</span> <span class="s2">&#34;C:\Windows\Temp\dotnet.exe&#34;</span>
<span class="nb">Write-Host</span> <span class="s1">&#39;Starting to download dotnet file.&#39;</span>
<span class="k">try</span> <span class="p">{</span>
  <span class="p">(</span><span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Net</span><span class="p">.</span><span class="n">WebClient</span><span class="p">).</span><span class="n">DownloadFile</span><span class="p">(</span><span class="nv">$source</span><span class="p">,</span> <span class="nv">$destination</span><span class="p">)</span>
<span class="p">}</span> <span class="k">catch</span> <span class="no">[Exception]</span> <span class="p">{</span>
  <span class="nb">Write-Host</span> <span class="s2">&#34;Exception during download. Probable cause could be that the directory or the file didn&#39;t exist.&#34;</span>
  <span class="nb">Write-Host</span> <span class="s1">&#39;$_.Exception is&#39;</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span>
<span class="p">}</span>
<span class="nb">Write-Host</span> <span class="s1">&#39;Download done. Checking if file exists.&#39;</span>
<span class="k">if</span> <span class="p">(!(</span><span class="nb">Test-Path</span> <span class="nv">$destination</span><span class="p">))</span> <span class="p">{</span>
  <span class="nb">Write-Host</span> <span class="s1">&#39;Downloading dotnet Failed!&#39;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nb">Write-Host</span> <span class="s1">&#39;Download successful.&#39;</span>
<span class="p">}</span>

<span class="nb">Write-Host</span> <span class="s1">&#39;Starting install process.&#39;</span>
<span class="k">try</span> <span class="p">{</span>
  <span class="nb">Start-Process</span> <span class="n">-FilePath</span> <span class="nv">$source</span> <span class="n">-ArgumentList</span> <span class="s2">&#34;/q /norestart&#34;</span> <span class="n">-Wait</span> <span class="n">-PassThru</span>
<span class="p">}</span> <span class="k">catch</span> <span class="no">[Exception]</span> <span class="p">{</span>
  <span class="nb">Write-Host</span> <span class="s1">&#39;Exception during install process.&#39;</span>
  <span class="nb">Write-Host</span> <span class="s1">&#39;$_.Exception is&#39;</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span>
<span class="p">}</span>

<span class="nb">Write-Host</span> <span class="s1">&#39;All done. Goodbye.&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>Thanks for reading!</p>
<p>Gergely.</p>
]]></content>
    </item>
    
    <item>
      <title>Powershell can also be nice -Or Installing Java silently and waiting</title>
      <link>https://skarlso.github.io/2015/06/30/powershell-can-also-be-nice-or-installing-java-silently-and-waiting/</link>
      <pubDate>Tue, 30 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/06/30/powershell-can-also-be-nice-or-installing-java-silently-and-waiting/</guid>
      <description>Hello folks.
Today, I would like to show you a small script. It installs Java JDK, both version, x86 and 64 bit, silently, and wait for that process to finish.
The wait is necessary because /s on a java install has the nasty habit of running in the background. If you are using a .bat file, you shouldn&amp;rsquo;t, than you would use something like: start /w jdk-setup.exe /s. This gets it done, but is ugly.</description>
      <content type="html"><![CDATA[<p>Hello folks.</p>
<p>Today, I would like to show you a small script. It installs Java JDK, both version, x86 and 64 bit, silently, and wait for that process to finish.</p>
<p>The wait is necessary because /s on a java install has the nasty habit of running in the background. If you are using a .bat file, <strong>you shouldn&rsquo;t</strong>, than you would use something like: start /w jdk-setup.exe /s. This gets it done, but is ugly. Also, if you are using Packer and PowerShell provisioning, you might want to set up some environment variables as well for the next script. And you want that property to be available and you don&rsquo;t want to mess it up with setting a path into a file and then re-setting your path on the begin of your other script. Or pass it around with Packer. No. Use a proper PowerShell script. Learn it. It&rsquo;s not that hard. Be a professional. Don&rsquo;t hack something together for the next person to suffer at.</p>
<p>Here is how I did it. Hope it helps somebody out.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-powershell" data-lang="powershell">
<span class="nv">$JDK_VER</span><span class="p">=</span><span class="s2">&#34;7u75&#34;</span>
<span class="nv">$JDK_FULL_VER</span><span class="p">=</span><span class="s2">&#34;7u75-b13&#34;</span>
<span class="nv">$JDK_PATH</span><span class="p">=</span><span class="s2">&#34;1.7.0_75&#34;</span>
<span class="nv">$source86</span> <span class="p">=</span> <span class="s2">&#34;http://download.oracle.com/otn-pub/java/jdk/$JDK_FULL_VER/jdk-$JDK_VER-windows-i586.exe&#34;</span>
<span class="nv">$source64</span> <span class="p">=</span> <span class="s2">&#34;http://download.oracle.com/otn-pub/java/jdk/$JDK_FULL_VER/jdk-$JDK_VER-windows-x64.exe&#34;</span>
<span class="nv">$destination86</span> <span class="p">=</span> <span class="s2">&#34;C:\vagrant\$JDK_VER-x86.exe&#34;</span>
<span class="nv">$destination64</span> <span class="p">=</span> <span class="s2">&#34;C:\vagrant\$JDK_VER-x64.exe&#34;</span>
<span class="nv">$client</span> <span class="p">=</span> <span class="nb">new-object</span> <span class="n">System</span><span class="p">.</span><span class="n">Net</span><span class="p">.</span><span class="n">WebClient</span>
<span class="nv">$cookie</span> <span class="p">=</span> <span class="s2">&#34;oraclelicense=accept-securebackup-cookie&#34;</span>
<span class="nv">$client</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="no">[System.Net.HttpRequestHeader]</span><span class="p">::</span><span class="n">Cookie</span><span class="p">,</span> <span class="nv">$cookie</span><span class="p">)</span>

<span class="nb">Write-Host</span> <span class="s1">&#39;Checking if Java is already installed&#39;</span>
<span class="k">if</span> <span class="p">((</span><span class="nb">Test-Path</span> <span class="s2">&#34;c:\Program Files (x86)\Java&#34;</span><span class="p">)</span> <span class="o">-Or</span> <span class="p">(</span><span class="nb">Test-Path</span> <span class="s2">&#34;c:\Program Files\Java&#34;</span><span class="p">))</span> <span class="p">{</span>
    <span class="nb">Write-Host</span> <span class="s1">&#39;No need to Install Java&#39;</span>
    <span class="n">Exit</span>
<span class="p">}</span>

<span class="nb">Write-Host</span> <span class="s1">&#39;Downloading x86 to $destination86&#39;</span>

<span class="nv">$client</span><span class="p">.</span><span class="n">downloadFile</span><span class="p">(</span><span class="nv">$source86</span><span class="p">,</span> <span class="nv">$destination86</span><span class="p">)</span>
<span class="k">if</span> <span class="p">(!(</span><span class="nb">Test-Path</span> <span class="nv">$destination86</span><span class="p">))</span> <span class="p">{</span>
    <span class="nb">Write-Host</span> <span class="s2">&#34;Downloading $destination86 failed&#34;</span>
    <span class="n">Exit</span>
<span class="p">}</span>
<span class="nb">Write-Host</span> <span class="s1">&#39;Downloading x64 to $destination64&#39;</span>

<span class="nv">$client</span><span class="p">.</span><span class="n">downloadFile</span><span class="p">(</span><span class="nv">$source64</span><span class="p">,</span> <span class="nv">$destination64</span><span class="p">)</span>
<span class="k">if</span> <span class="p">(!(</span><span class="nb">Test-Path</span> <span class="nv">$destination64</span><span class="p">))</span> <span class="p">{</span>
    <span class="nb">Write-Host</span> <span class="s2">&#34;Downloading $destination64 failed&#34;</span>
    <span class="n">Exit</span>
<span class="p">}</span>


<span class="k">try</span> <span class="p">{</span>
    <span class="nb">Write-Host</span> <span class="s1">&#39;Installing JDK-x64&#39;</span>
    <span class="nv">$proc1</span> <span class="p">=</span> <span class="nb">Start-Process</span> <span class="n">-FilePath</span> <span class="s2">&#34;$destination64&#34;</span> <span class="n">-ArgumentList</span> <span class="s2">&#34;/s REBOOT=ReallySuppress&#34;</span> <span class="n">-Wait</span> <span class="n">-PassThru</span>
    <span class="nv">$proc1</span><span class="p">.</span><span class="n">waitForExit</span><span class="p">()</span>
    <span class="nb">Write-Host</span> <span class="s1">&#39;Installation Done.&#39;</span>

    <span class="nb">Write-Host</span> <span class="s1">&#39;Installing JDK-x86&#39;</span>
    <span class="nv">$proc2</span> <span class="p">=</span> <span class="nb">Start-Process</span> <span class="n">-FilePath</span> <span class="s2">&#34;$destination86&#34;</span> <span class="n">-ArgumentList</span> <span class="s2">&#34;/s REBOOT=ReallySuppress&#34;</span> <span class="n">-Wait</span> <span class="n">-PassThru</span>
    <span class="nv">$proc2</span><span class="p">.</span><span class="n">waitForExit</span><span class="p">()</span>
    <span class="nb">Write-Host</span> <span class="s1">&#39;Installtion Done.&#39;</span>
<span class="p">}</span> <span class="k">catch</span> <span class="no">[exception]</span> <span class="p">{</span>
    <span class="nb">write-host</span> <span class="s1">&#39;$_ is&#39;</span> <span class="nv">$_</span>
    <span class="nb">write-host</span> <span class="s1">&#39;$_.GetType().FullName is&#39;</span> <span class="nv">$_</span><span class="p">.</span><span class="n">GetType</span><span class="p">().</span><span class="n">FullName</span>
    <span class="nb">write-host</span> <span class="s1">&#39;$_.Exception is&#39;</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span>
    <span class="nb">write-host</span> <span class="s1">&#39;$_.Exception.GetType().FullName is&#39;</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span><span class="p">.</span><span class="n">GetType</span><span class="p">().</span><span class="n">FullName</span>
    <span class="nb">write-host</span> <span class="s1">&#39;$_.Exception.Message is&#39;</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span><span class="p">.</span><span class="n">Message</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">((</span><span class="nb">Test-Path</span> <span class="s2">&#34;c:\Program Files (x86)\Java&#34;</span><span class="p">)</span> <span class="o">-Or</span> <span class="p">(</span><span class="nb">Test-Path</span> <span class="s2">&#34;c:\Program Files\Java&#34;</span><span class="p">))</span> <span class="p">{</span>
    <span class="nb">Write-Host</span> <span class="s1">&#39;Java installed successfully.&#39;</span>
<span class="p">}</span>
<span class="nb">Write-Host</span> <span class="s1">&#39;Setting up Path variables.&#39;</span>
<span class="no">[System.Environment]</span><span class="p">::</span><span class="n">SetEnvironmentVariable</span><span class="p">(</span><span class="s2">&#34;JAVA_HOME&#34;</span><span class="p">,</span> <span class="s2">&#34;c:\Program Files (x86)\Java\jdk$JDK_PATH&#34;</span><span class="p">,</span> <span class="s2">&#34;Machine&#34;</span><span class="p">)</span>
<span class="no">[System.Environment]</span><span class="p">::</span><span class="n">SetEnvironmentVariable</span><span class="p">(</span><span class="s2">&#34;PATH&#34;</span><span class="p">,</span> <span class="nv">$Env:Path</span> <span class="p">+</span> <span class="s2">&#34;;c:\Program Files (x86)\Java\jdk$JDK_PATH\bin&#34;</span><span class="p">,</span> <span class="s2">&#34;Machine&#34;</span><span class="p">)</span>
<span class="nb">Write-Host</span> <span class="s1">&#39;Done. Goodbye.&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>Now, there is room for improvement here. Like checking exit code, doing something extra after a failed exit. Throwing an exception, and so on and so forth. But this is a much needed improvement from calling a BAT file.</p>
<p>And you would use this in a Packer JSON file like this..</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json">
<span class="p">{</span>
      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;powershell&#34;</span><span class="p">,</span>
      <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">&#34;./scripts/jdk_inst.ps1&#34;</span>
      <span class="p">]</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Easy. And at the end, the System.Environment actually writes out into the registry permanently so no need to pass it around in a file or something ugly like that.</p>
<p>Hope this helps somebody.</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>
]]></content>
    </item>
    
    <item>
      <title>The Packer, The Windows, and the Vagrant box</title>
      <link>https://skarlso.github.io/2015/06/27/the-packer-the-windows-and-the-vagrant-box/</link>
      <pubDate>Sat, 27 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/06/27/the-packer-the-windows-and-the-vagrant-box/</guid>
      <description>&lt;p&gt;Hello folks.&lt;/p&gt;
&lt;p&gt;Today, I would like to write about something close to my heart recently. I&amp;rsquo;ve been fiddling with Packer, Windows and Vagrant these days. Trying to get a Windows box up in running is a pain in the arse though, so I thought I share my pain with you nice folks out there. Let&amp;rsquo;s begin.&lt;/p&gt;</description>
      <content type="html"><![CDATA[<p>Hello folks.</p>
<p>Today, I would like to write about something close to my heart recently. I&rsquo;ve been fiddling with Packer, Windows and Vagrant these days. Trying to get a Windows box up in running is a pain in the arse though, so I thought I share my pain with you nice folks out there. Let&rsquo;s begin.</p>
<h1 id="setup">Setup</h1>
<p>First things first. You need <a href="https://packer.io/" target="_blank">Packer</a>, and <a href="https://www.vagrantup.com/" target="_blank">Vagrant</a> obviously. I&rsquo;ll leave the install up to you. Next, you should clone this git repo =&gt; <a href="https://github.com/joefitzgerald/packer-windows" target="_blank">Packer Windows Plugin</a>. This plugin contains all the files necessary to get, install, and provision Windows boxes. Luckily, some very nice and clever folks, figured out a lot of things about how to install stuff on Windows. And given that people at Microsoft realised that sys admins would like to install stuff remotely, there are a bunch of forums and places where you can search for how to install software without user interaction. And this is the keyword you should look for =&gt; <strong>unattended Windows install</strong>.</p>
<p>This will lead you further into the bowls of Windows technology and silent / quiet installs all over the place.</p>
<h1 id="packer-and-answer-files">Packer and Answer Files</h1>
<p>When it comes to installing software on Windows, you have quite a few obstacles to overtake. One of the biggest obstacle you are facing, are restarts. Windows has a special place in hell for that. Every time you install something important which requires system libraries or other kind of configuration which &ldquo;will only take effect after you restart Windows&rdquo; you have to do a restart. Now, a little background on how Packer interacts with Windows. At the moment, it uses OpenSSH to talk to the box which has to be the last which comes up. If it looses connection to openssh because, I don&rsquo;t know, it restarted itself, you loose communication to the box, and the setup process stops in mid tracks.</p>
<p>If you read about that in an earlier attempt to overtake this, you saw that you could use time-outs. You could kill ssh process which presumably makes packer do an attempt to start a new connection. If you are like me, you experienced that Packer does indeed NOT re-try. Because the previous task couldn&rsquo;t finish, the restart killed the ssh service which could tell Packer that the previous task, an install for example, has finished. Hence, Packer will stay there and wait for that task to complete; which will never happen at this point.</p>
<p>What can we do? Enter the world of <a href="https://technet.microsoft.com/en-us/library/cc749113(v=ws.10).aspx" target="_blank">Answer Files</a>. Basically, it&rsquo;s an xml file which sets up Windows. When Packer is running this file, the last service which should be installed, must be openSSH. And after that, in the provisioning phase, you should only install software which does not require restarts.</p>
<p>Let&rsquo;s look at an example.</p>
<h1 id="example-1-windows-updates">Example #1: Windows Updates</h1>
<p>This is another layer of purgatory for Windows. It&rsquo;s updates. The updates take massive amount of times, if you are doing them from scratch, and also require several restart before it&rsquo;s actually done. You **could **speed up the process a little bit, if you have a private network share where all of the Windows updates are sitting. At least that way you don&rsquo;t have to download them every time you are creating a box. But you can&rsquo;t avert the install process itself.</p>
<p>Let&rsquo;s look at a setup for packer. Packer works with JSON files for it&rsquo;s configuration. An example for a Windows 7 box would look something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span><span class="lnt">95
</span><span class="lnt">96
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json">
<span class="p">{</span>
  <span class="nt">&#34;builders&#34;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;vmware-iso&#34;</span><span class="p">,</span>
      <span class="nt">&#34;iso_url&#34;</span><span class="p">:</span> <span class="s2">&#34;http://care.dlservice.microsoft.com/dl/download/evalx/win7/x64/EN/7600.16385.090713-1255_x64fre_enterprise_en-us_EVAL_Eval_Enterprise-GRMCENXEVAL_EN_DVD.iso&#34;</span><span class="p">,</span>
      <span class="nt">&#34;iso_checksum_type&#34;</span><span class="p">:</span> <span class="s2">&#34;md5&#34;</span><span class="p">,</span>
      <span class="nt">&#34;iso_checksum&#34;</span><span class="p">:</span> <span class="s2">&#34;1d0d239a252cb53e466d39e752b17c28&#34;</span><span class="p">,</span>
      <span class="nt">&#34;headless&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="nt">&#34;boot_wait&#34;</span><span class="p">:</span> <span class="s2">&#34;2m&#34;</span><span class="p">,</span>
      <span class="nt">&#34;ssh_username&#34;</span><span class="p">:</span> <span class="s2">&#34;vagrant&#34;</span><span class="p">,</span>
      <span class="nt">&#34;ssh_password&#34;</span><span class="p">:</span> <span class="s2">&#34;vagrant&#34;</span><span class="p">,</span>
      <span class="nt">&#34;ssh_wait_timeout&#34;</span><span class="p">:</span> <span class="s2">&#34;8h&#34;</span><span class="p">,</span>
      <span class="nt">&#34;shutdown_command&#34;</span><span class="p">:</span> <span class="s2">&#34;shutdown /s /t 10 /f /d p:4:1 /c \&#34;Packer Shutdown\&#34;&#34;</span><span class="p">,</span>
      <span class="nt">&#34;guest_os_type&#34;</span><span class="p">:</span> <span class="s2">&#34;windows7-64&#34;</span><span class="p">,</span>
      <span class="nt">&#34;tools_upload_flavor&#34;</span><span class="p">:</span> <span class="s2">&#34;windows&#34;</span><span class="p">,</span>
      <span class="nt">&#34;disk_size&#34;</span><span class="p">:</span> <span class="mi">61440</span><span class="p">,</span>
      <span class="nt">&#34;vnc_port_min&#34;</span><span class="p">:</span> <span class="mi">5900</span><span class="p">,</span>
      <span class="nt">&#34;vnc_port_max&#34;</span><span class="p">:</span> <span class="mi">5980</span><span class="p">,</span>
      <span class="nt">&#34;floppy_files&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">&#34;./answer_files/7/Autounattend.xml&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/dis-updates.ps1&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/microsoft-updates.bat&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/win-updates.ps1&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/openssh.ps1&#34;</span>
      <span class="p">],</span>
      <span class="nt">&#34;vmx_data&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;RemoteDisplay.vnc.enabled&#34;</span><span class="p">:</span> <span class="s2">&#34;false&#34;</span><span class="p">,</span>
        <span class="nt">&#34;RemoteDisplay.vnc.port&#34;</span><span class="p">:</span> <span class="s2">&#34;5900&#34;</span><span class="p">,</span>
        <span class="nt">&#34;memsize&#34;</span><span class="p">:</span> <span class="s2">&#34;2048&#34;</span><span class="p">,</span>
        <span class="nt">&#34;numvcpus&#34;</span><span class="p">:</span> <span class="s2">&#34;2&#34;</span><span class="p">,</span>
        <span class="nt">&#34;scsi0.virtualDev&#34;</span><span class="p">:</span> <span class="s2">&#34;lsisas1068&#34;</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;virtualbox-iso&#34;</span><span class="p">,</span>
      <span class="nt">&#34;iso_url&#34;</span><span class="p">:</span> <span class="s2">&#34;http://care.dlservice.microsoft.com/dl/download/evalx/win7/x64/EN/7600.16385.090713-1255_x64fre_enterprise_en-us_EVAL_Eval_Enterprise-GRMCENXEVAL_EN_DVD.iso&#34;</span><span class="p">,</span>
      <span class="nt">&#34;iso_checksum_type&#34;</span><span class="p">:</span> <span class="s2">&#34;md5&#34;</span><span class="p">,</span>
      <span class="nt">&#34;iso_checksum&#34;</span><span class="p">:</span> <span class="s2">&#34;1d0d239a252cb53e466d39e752b17c28&#34;</span><span class="p">,</span>
      <span class="nt">&#34;headless&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="nt">&#34;boot_wait&#34;</span><span class="p">:</span> <span class="s2">&#34;2m&#34;</span><span class="p">,</span>
      <span class="nt">&#34;ssh_username&#34;</span><span class="p">:</span> <span class="s2">&#34;vagrant&#34;</span><span class="p">,</span>
      <span class="nt">&#34;ssh_password&#34;</span><span class="p">:</span> <span class="s2">&#34;vagrant&#34;</span><span class="p">,</span>
      <span class="nt">&#34;ssh_wait_timeout&#34;</span><span class="p">:</span> <span class="s2">&#34;8h&#34;</span><span class="p">,</span>
      <span class="nt">&#34;shutdown_command&#34;</span><span class="p">:</span> <span class="s2">&#34;shutdown /s /t 10 /f /d p:4:1 /c \&#34;Packer Shutdown\&#34;&#34;</span><span class="p">,</span>
      <span class="nt">&#34;guest_os_type&#34;</span><span class="p">:</span> <span class="s2">&#34;Windows7_64&#34;</span><span class="p">,</span>
      <span class="nt">&#34;disk_size&#34;</span><span class="p">:</span> <span class="mi">61440</span><span class="p">,</span>
      <span class="nt">&#34;floppy_files&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">&#34;./answer_files/7/Autounattend.xml&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/dis-updates.ps1&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/microsoft-updates.bat&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/win-updates.ps1&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/openssh.ps1&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/oracle-cert.cer&#34;</span>
      <span class="p">],</span>
      <span class="nt">&#34;vboxmanage&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">[</span>
          <span class="s2">&#34;modifyvm&#34;</span><span class="p">,</span>
          <span class="s2">&#34;{{.Name}}&#34;</span><span class="p">,</span>
          <span class="s2">&#34;--memory&#34;</span><span class="p">,</span>
          <span class="s2">&#34;2048&#34;</span>
        <span class="p">],</span>
        <span class="p">[</span>
          <span class="s2">&#34;modifyvm&#34;</span><span class="p">,</span>
          <span class="s2">&#34;{{.Name}}&#34;</span><span class="p">,</span>
          <span class="s2">&#34;--cpus&#34;</span><span class="p">,</span>
          <span class="s2">&#34;2&#34;</span>
        <span class="p">]</span>
      <span class="p">]</span>
    <span class="p">}</span>
  <span class="p">],</span>
  <span class="nt">&#34;provisioners&#34;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;shell&#34;</span><span class="p">,</span>
      <span class="nt">&#34;remote_path&#34;</span><span class="p">:</span> <span class="s2">&#34;/tmp/script.bat&#34;</span><span class="p">,</span>
      <span class="nt">&#34;execute_command&#34;</span><span class="p">:</span> <span class="s2">&#34;{{.Vars}} cmd /c C:/Windows/Temp/script.bat&#34;</span><span class="p">,</span>
      <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">&#34;./scripts/vm-guest-tools.bat&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/chef.bat&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/vagrant-ssh.bat&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/disable-auto-logon.bat&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/enable-rdp.bat&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/compile-dotnet-assemblies.bat&#34;</span><span class="p">,</span>
        <span class="s2">&#34;./scripts/compact.bat&#34;</span>
      <span class="p">]</span>
    <span class="p">}</span>
  <span class="p">],</span>
  <span class="nt">&#34;post-processors&#34;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;vagrant&#34;</span><span class="p">,</span>
      <span class="nt">&#34;keep_input_artifact&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="nt">&#34;output&#34;</span><span class="p">:</span> <span class="s2">&#34;windows_7_{{.Provider}}.box&#34;</span><span class="p">,</span>
      <span class="nt">&#34;vagrantfile_template&#34;</span><span class="p">:</span> <span class="s2">&#34;vagrantfile-windows_7.template&#34;</span>
    <span class="p">}</span>
  <span class="p">]</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>If it feels daunting, don&rsquo;t worry. You&rsquo;ll get used to it fairly quickly. Let&rsquo;s go over section by section on what this does.</p>
<h4 id="builders">Builders</h4>
<p>Packer uses builders for, well, building stuff. These two builders are virtualbox and vmware. I&rsquo;m only interested in virtualbox. This builder downloads win7 and sets up some virtual box details like, disk size, vagrant user, memory, and so and so forth. The interesting part is the floppy part. Here, we can add in some files for setup. We will use this part later on.</p>
<h4 id="provisioners">Provisioners</h4>
<p>Now here is an interesting tid-bit. There are a bunch of provisioners available as plugin for packer. Installing them is fairly easy. Packer needs binary plugins. Just copy them into ~/.packer.d/plugins or directly into the packer home directly. I&rsquo;d advice against that. Have them in your own packer.d, that&rsquo;s much cleaner. For binary plugin releases in the Windows side, look here =&gt; <a href="https://github.com/packer-community/packer-windows-plugins/releases" target="_blank"><a href="https://github.com/packer-community/packer-windows-plugins/releases">https://github.com/packer-community/packer-windows-plugins/releases</a></a>. If you would like to build them yourself from source, download the source and use go gcc to build it. You will have to <strong>go get</strong> a few packages though. Also you will have to have <strong>$GOPATH</strong> (pointing to your own workspace) and <strong>$GOROOT</strong> (pointing to your working go) setup. But this is not a Go guide. After that just do **go build main.go **and you have your plugin.</p>
<p>Provisioners are like vagrant provision they will execute post setup stuff on your box. Like installing utils, 7zip, choco, nuget, and so and so forth. There are a few interesting Windows provisioners, like restart-windows, powershell, and Windows shell. Which is like shell, but without the need of pre-setup if you are trying to use it on Windows. The basic shell on Windows is a little clanky and can hang from time-to-time so I recommend using PowerShell or WindowsShell provisioner if you are dealing with Windows post-setup Setup.</p>
<h4 id="post-processor">Post-Processor</h4>
<p>This will create the Vagrant box after everything is done.</p>
<h4 id="running-the-update">Running the Update</h4>
<p>For use, two things are interesting from here at this moment. These guys =&gt;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="s2">&#34;./scripts/microsoft-updates.bat&#34;</span><span class="err">,</span>
<span class="s2">&#34;./scripts/win-updates.ps1&#34;</span><span class="err">,</span>
</code></pre></td></tr></table>
</div>
</div><p>These two contain most of the logic which is part of the update process. You should see it in your checked out source. There is some very interesting logic in there which describes how the update happens. Basically it&rsquo;s a loop which re-checks if there are updates available or if a re-start is needed. Packer handles re-starts well at this point in the install because it simply waits for SSH to come only. The rest is handled by Windows.</p>
<p>These scripts are called in the Answer File which the Windows Setup uses for configuration purposes. Take a look at this section:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml">
                <span class="nt">&lt;SynchronousCommand</span> <span class="na">wcm:action=</span><span class="s">&#34;add&#34;</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;CommandLine&gt;</span>cmd.exe /c a:\microsoft-updates.bat<span class="nt">&lt;/CommandLine&gt;</span>
                    <span class="nt">&lt;Order&gt;</span>98<span class="nt">&lt;/Order&gt;</span>
                    <span class="nt">&lt;Description&gt;</span>Enable Microsoft Updates<span class="nt">&lt;/Description&gt;</span>
                <span class="nt">&lt;/SynchronousCommand&gt;</span>
                <span class="nt">&lt;SynchronousCommand</span> <span class="na">wcm:action=</span><span class="s">&#34;add&#34;</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;CommandLine&gt;</span>cmd.exe /c C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -File a:\win-updates.ps1 -MaxUpdatesPerCycle 30<span class="nt">&lt;/CommandLine&gt;</span>
                    <span class="nt">&lt;Description&gt;</span>Install Windows Updates<span class="nt">&lt;/Description&gt;</span>
                    <span class="nt">&lt;Order&gt;</span>100<span class="nt">&lt;/Order&gt;</span>
                    <span class="nt">&lt;RequiresUserInput&gt;</span>true<span class="nt">&lt;/RequiresUserInput&gt;</span>
                <span class="nt">&lt;/SynchronousCommand&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>This is were the floppy part comes on handy. This part uses the scripts bound by floppy and which will be available from a:.</p>
<p>This will install all the updates available. It will take a while. A very very long while. But let&rsquo;s go a step further.</p>
<h1 id="example-2-installing-dotnet-45">Example #2: Installing DotNet 4.5</h1>
<p>Let&rsquo;s assume you want to create a box with visual studio 2013, office, and have choco on it, and a couple of more things for which you need lots of restarts. You could try installing with /norestart switch, which also works; however if you definitely need it to restart I suggest installing stuff with the Answer File. For this, let&rsquo;s create a PowerShell script which downloads and installs dotnet 451 which is needed for visual studio ultimate 2013.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-powershell" data-lang="powershell">
<span class="nv">$Logfile</span> <span class="p">=</span> <span class="s2">&#34;C:\Windows\Temp\dotnet-install.log&#34;</span>
<span class="k">function</span> <span class="n">LogWrite</span> <span class="p">{</span>
   <span class="k">Param</span> <span class="p">(</span><span class="no">[string]</span><span class="nv">$logstring</span><span class="p">)</span>
   <span class="nv">$now</span> <span class="p">=</span> <span class="nb">Get-Date</span> <span class="n">-format</span> <span class="n">s</span>
   <span class="nb">Add-Content</span> <span class="nv">$Logfile</span> <span class="n">-value</span> <span class="s2">&#34;$now $logstring&#34;</span>
   <span class="nb">Write-Host</span> <span class="nv">$logstring</span>
<span class="p">}</span>

<span class="n">LogWrite</span> <span class="s2">&#34;Downlading dotNetFx40_Full_x86_x64.&#34;</span>
<span class="k">try</span> <span class="p">{</span>
    <span class="p">(</span><span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Net</span><span class="p">.</span><span class="n">WebClient</span><span class="p">).</span><span class="n">DownloadFile</span><span class="p">(</span><span class="s1">&#39;http://download.microsoft.com/download/1/6/7/167F0D79-9317-48AE-AEDB-17120579F8E2/NDP451-KB2858728-x86-x64-AllOS-ENU.exe&#39;</span><span class="p">,</span> <span class="s1">&#39;C:\Windows\Temp\dotnet.exe&#39;</span><span class="p">)</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
    <span class="n">LogWrite</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span> <span class="p">|</span> <span class="nb">Format-List</span> <span class="n">-force</span>
    <span class="n">LogWrite</span> <span class="s2">&#34;Failed to download file.&#34;</span>
<span class="p">}</span>

<span class="n">LogWrite</span> <span class="s2">&#34;Starting installation process...&#34;</span>
<span class="k">try</span> <span class="p">{</span>
    <span class="nb">Start-Process</span> <span class="n">-FilePath</span> <span class="s2">&#34;C:\Windows\Temp\dotnet.exe&#34;</span> <span class="n">-ArgumentList</span> <span class="s2">&#34;/I /q /norestart&#34;</span> <span class="n">-Wait</span> <span class="n">-PassThru</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
    <span class="n">LogWrite</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span> <span class="p">|</span> <span class="nb">Format-List</span> <span class="n">-force</span>
    <span class="n">LogWrite</span> <span class="s2">&#34;Exception during install process.&#34;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>So this downloads it right from the source. As mentioned earlier, you could have this on a nice shared drive so downloading from the internet is not necessary. The installer is in fact a bit friendly. It has a switch called /q /norestart. The /q is called silent install and the /norestart speaks for itself. If you leave it out, you can use /forcerestart or you could have the following two lines after this finishes: <em>LogWrite &ldquo;Resarting Computer.&rdquo; Restart-Computer -Force</em>. This will force a restart. You need the -Force because otherwise it won&rsquo;t let it restart while there are active sessions logged on the computer.</p>
<p>Now, let&rsquo;s add this to the answer file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml">
                <span class="nt">&lt;SynchronousCommand</span> <span class="na">wcm:action=</span><span class="s">&#34;add&#34;</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;CommandLine&gt;</span>cmd.exe /c C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -File a:\install-dotnet-451.ps1 -AutoStart<span class="nt">&lt;/CommandLine&gt;</span>
                    <span class="nt">&lt;Order&gt;</span>98<span class="nt">&lt;/Order&gt;</span>
                    <span class="nt">&lt;Description&gt;</span>Install DotNet 4.5.1.<span class="nt">&lt;/Description&gt;</span>
                <span class="nt">&lt;/SynchronousCommand&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>See, how easy this is? And now we make use of the floppy part of the windows-7.json by adding this line: <strong>&quot;./scripts/install-dotnet-451.ps1&quot;</strong>. Don&rsquo;t forget to append the &ldquo;,&rdquo; at the end of the previous line. This is an array.</p>
<p>We are ready to go. Just run <strong>packer build -only=virtualbox-iso windows-7.json</strong> and you should be done!</p>
<h1 id="example-3-installing-visual-studio-ultimate">Example #3: Installing Visual Studio Ultimate</h1>
<p>Installing visual studio is almost trivial as well. With the addition that visual studio requires an admin.xml for silent install which has a bunch of settings. When you have the admin.xml just bind it into the floppy drive as well and call the visual studio install powershell script like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-powershell" data-lang="powershell">    <span class="nb">Start-Process</span> <span class="n">-FilePath</span> <span class="s2">&#34;C:\Windows\Temp\visualstudioultimate.exe&#34;</span> <span class="n">-ArgumentList</span> <span class="s2">&#34;/Quiet /NoRestart /admin a:\admin.xml&#34;</span> <span class="n">-Wait</span> <span class="n">-PassThru</span>
</code></pre></td></tr></table>
</div>
</div><p>Again, this will take a while&hellip;..</p>
<h1 id="post-setup-provisioning">Post Setup Provisioning</h1>
<p>When all this is done, you can still add some provisioning steps to add some utils with PowerShell or WindowsShell provisioner. I would advice against using simple shell. Bare in mind one other thing. If you have a batch file, and you are calling another batch file in that batch file, like choco install 7zip, it will happen that the install process will hang on installing 7zip. Because in Windows land the called script will not return the exec handler to the caller unless specifically asking for it with <strong>call</strong>. Which means your bat file will look something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">
call choco install 7zip
call choco install notepadplusplus
</code></pre></td></tr></table>
</div>
</div><p>or</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">
cmd /c choco install 7zip
cmd /c choco install notepadplusplus
</code></pre></td></tr></table>
</div>
</div><p>And so on, and so forth.</p>
<h1 id="wrap-up">Wrap-Up</h1>
<p>So, what have we learned? We have learned that installing software which requires re-start is better left to Windows itself with an answer file. Batch files will not return the handler. SSH <strong>MUST</strong> be the last thing you start up in the answer file. Use PowerShell provisioner or WindowsShell provisioner on Windows.</p>
<p>Hope this helped.</p>
<p>Happy installing, and as always,</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>]]></content>
    </item>
    
  </channel>
</rss>