<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>readability on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/tags/readability/</link>
    <description>Recent content in readability on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 13 Jun 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://skarlso.github.io/tags/readability/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Making your code understandable</title>
      <link>https://skarlso.github.io/2012/06/13/making-your-code-understandable/</link>
      <pubDate>Wed, 13 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/13/making-your-code-understandable/</guid>
      <description type="html"><![CDATA[<p>Hi!</p>
<p>I&rsquo;ve seen this many times over and over again. Many people have wrote books about it already. Like Uncle Bob&rsquo;s Clean Code. Like Pragmatic Programmer by Andrew Hunt and David Thomas. What makes your code understandable to others.</p>
<p>Is it <strong>Comments</strong>?</p>
<p>No. It&rsquo;s not comments. If your code could be read properly you wouldn&rsquo;t need comments to explain what it does. Like Uncle Bob said. A good code doesn&rsquo;t contain surprises. It does exactly what you would think it should do on the next line. It doesn&rsquo;t have curves and misinformation. It doesn&rsquo;t have plots and turns of events like a good crime book. No. Good code is a like a boring soap opera with predictable plot and boring plain characters who don&rsquo;t change there behavior based on circumstances.</p>
<p>Good code is easy to read. It flows like the river, falls like a waterfall, cooks like bacon and crosses the road like a professional chicken. If I read line A the next line should be B. If it is a Z or a :@L$. I wont be happy.</p>
<p>So then what makes it understandable?</p>
<p>On simple word: <strong>Readability</strong>.</p>
<p>What makes it readable?</p>
<p>Small chunks of functions that have descriptive names as few parameters as possible and do only ONE thing at a time. Of course this is not all there is. However it&rsquo;s the best thing to begin with. A function called &ldquo;doStuff&rdquo; that has a complexity of 300 has three fors, two switches and a dozen ifs isn&rsquo;t really helping. Now if you look at doStuff and try to give a name based on the job of the function and come up with &ldquo;propageXWithFiveUnlessYEqualsTheSumOfZPlusW&rdquo; you will know it does more then one thing.</p>
<p>If you see a really complex function in your production code or hobby code ask yourself: &ldquo;Should this really be like 300 lines long and with a complexity of 200??&rdquo; And as you speak this out loud you will know the answer already. Break it up. Have like a dozen smaller functions that will be better I promise you. Take out parts. Write unit tests to it that help with re-factoring. Break it down into as small chunks as possible. It will be worth it. It will increase understand-ability, readability and maintainability.</p>
<p>Hope that helped.</p>
<p>Thank you for reading and as always,</p>
<p>Have a nice Day,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
  </channel>
</rss>