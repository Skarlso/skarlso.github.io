<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/tags/golang/</link>
    <description>Recent content in golang on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 19 Jul 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://skarlso.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Converting numbers into string representations</title>
      <link>https://skarlso.github.io/2015/07/19/converting-numbers-into-string-representations/</link>
      <pubDate>Sun, 19 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/07/19/converting-numbers-into-string-representations/</guid>
      <description>I quiet like this one. My first go program snippet without any peaking or googling. I&amp;rsquo;m proud, though it could be improved with a bit of struct magic and such and such. And it only counts &amp;lsquo;till 1000.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58  package main import &amp;#34;fmt&amp;#34; var words = map[int]string{1: &amp;#34;one&amp;#34;, 2: &amp;#34;two&amp;#34;, 3: &amp;#34;three&amp;#34;, 4: &amp;#34;four&amp;#34;, 5: &amp;#34;five&amp;#34;, 6: &amp;#34;six&amp;#34;, 7: &amp;#34;seven&amp;#34;, 8: &amp;#34;eight&amp;#34;, 9: &amp;#34;nine&amp;#34;, 10: &amp;#34;ten&amp;#34;, 11: &amp;#34;eleven&amp;#34;, 12: &amp;#34;twelve&amp;#34;, 13: &amp;#34;thirteen&amp;#34;, 14: &amp;#34;fourteen&amp;#34;, 15: &amp;#34;fifteen&amp;#34;, 16: &amp;#34;sixteen&amp;#34;, 17: &amp;#34;seventeen&amp;#34;, 18: &amp;#34;eighteen&amp;#34;, 19: &amp;#34;nineteen&amp;#34;, 20: &amp;#34;twenty&amp;#34;, 30: &amp;#34;thirty&amp;#34;, 40: &amp;#34;forty&amp;#34;, 50: &amp;#34;fifty&amp;#34;, 60: &amp;#34;sixty&amp;#34;, 70: &amp;#34;seventy&amp;#34;, 80: &amp;#34;eighty&amp;#34;, 90: &amp;#34;ninety&amp;#34;} // CountLetters count the letters in a long string number representation func CountLetters(limit int) { myLongNumberString := &amp;#34;&amp;#34; for i := 1; i &amp;lt;= limit; i++ { addLettersToMyString(&amp;amp;myLongNumberString, i) } // fmt.</description>
    </item>
    
    <item>
      <title>Bitwise &amp; Operator</title>
      <link>https://skarlso.github.io/2015/07/15/bitwise-operator/</link>
      <pubDate>Wed, 15 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/07/15/bitwise-operator/</guid>
      <description>The first, and only time so far, that I got to use the bitwise &amp;amp; operator. I enjoyed doing so!!
And of course from now on, I&amp;rsquo;ll be looking for more opportunities to (ab)use it.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  package secret import &amp;#34;sort&amp;#34; const REVERSE = 16 func Handshake(code int) []string { // binary_rep := convertDecimalToBinary(code)  if code &amp;lt; { return nil } secret_map := map[int]string { 1: &amp;#34;wink&amp;#34;, 2: &amp;#34;double blink&amp;#34;, 4: &amp;#34;close your eyes&amp;#34;, 8: &amp;#34;jump&amp;#34;, } var keys []int for k := range secret_map { keys = append(keys, k) } // To make sure iteration is always in the same order.</description>
    </item>
    
  </channel>
</rss>
