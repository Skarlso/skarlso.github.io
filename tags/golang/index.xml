<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/tags/golang/</link>
    <description>Recent content in golang on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Jul 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://skarlso.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Converting numbers into string representations</title>
      <link>https://skarlso.github.io/2015/07/19/converting-numbers-into-string-representations/</link>
      <pubDate>Sun, 19 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/07/19/converting-numbers-into-string-representations/</guid>
      <description>I quiet like this one. My first go program snippet without any peaking or googling. I&amp;#8217;m proud, though it could be improved with a bit of struct magic and such and such. And it only counts &amp;#8217;till 1000&amp;#8230;
  package main &amp;nbsp; import &#34;fmt&#34; &amp;nbsp; var words = map[int]string{1: &#34;one&#34;, 2: &#34;two&#34;, 3: &#34;three&#34;, 4: &#34;four&#34;, 5: &#34;five&#34;, 6: &#34;six&#34;, 7: &#34;seven&#34;, 8: &#34;eight&#34;, 9: &#34;nine&#34;, 10: &#34;ten&#34;, 11: &#34;</description>
    </item>
    
    <item>
      <title>Converting numbers into string representations</title>
      <link>https://skarlso.github.io/2015/07/19/converting-numbers-into-string-representations/</link>
      <pubDate>Sun, 19 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/07/19/converting-numbers-into-string-representations/</guid>
      <description>I quiet like this one. My first go program snippet without any peaking or googling. I&amp;#8217;m proud, though it could be improved with a bit of struct magic and such and such. And it only counts &amp;#8217;till 1000&amp;#8230;
  package main &amp;nbsp; import &#34;fmt&#34; &amp;nbsp; var words = map[int]string{1: &#34;one&#34;, 2: &#34;two&#34;, 3: &#34;three&#34;, 4: &#34;four&#34;, 5: &#34;five&#34;, 6: &#34;six&#34;, 7: &#34;seven&#34;, 8: &#34;eight&#34;, 9: &#34;nine&#34;, 10: &#34;ten&#34;, 11: &#34;</description>
    </item>
    
    <item>
      <title>Bitwise &amp; Operator</title>
      <link>https://skarlso.github.io/2015/07/15/bitwise-operator/</link>
      <pubDate>Wed, 15 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/07/15/bitwise-operator/</guid>
      <description>The first, and only time so far, that I got to use the bitwise &amp;amp; operator. I enjoyed doing so!!
And of course from now on, I&amp;#8217;ll be looking for more opportunities to (ab)use it.
  package secret &amp;nbsp; import &#34;sort&#34; &amp;nbsp; const REVERSE = 16 &amp;nbsp; func Handshake(code int) []string { // binary_rep := convertDecimalToBinary(code) if code &amp;lt;  { return nil } secret_map := map[int]string { 1: &#34;</description>
    </item>
    
    <item>
      <title>Bitwise &amp; Operator</title>
      <link>https://skarlso.github.io/2015/07/15/bitwise-operator/</link>
      <pubDate>Wed, 15 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/07/15/bitwise-operator/</guid>
      <description>The first, and only time so far, that I got to use the bitwise &amp;amp; operator. I enjoyed doing so!!
And of course from now on, I&amp;#8217;ll be looking for more opportunities to (ab)use it.
  package secret &amp;nbsp; import &#34;sort&#34; &amp;nbsp; const REVERSE = 16 &amp;nbsp; func Handshake(code int) []string { // binary_rep := convertDecimalToBinary(code) if code &amp;lt;  { return nil } secret_map := map[int]string { 1: &#34;</description>
    </item>
    
  </channel>
</rss>