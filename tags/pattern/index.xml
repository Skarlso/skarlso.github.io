<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Pattern on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/tags/pattern/</link>
    <description>Recent content in Pattern on Ramblings of a cloud engineer</description>
    <generator>Hugo -- 0.136.0</generator>
    <language>en</language>
    <lastBuildDate>Tue, 09 Oct 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://skarlso.github.io/tags/pattern/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to eliminate a parameter boom</title>
      <link>https://skarlso.github.io/2012/10/09/how-to-eliminate-a-parameter-boom/</link>
      <pubDate>Tue, 09 Oct 2012 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2012/10/09/how-to-eliminate-a-parameter-boom/</guid>
      <description>&lt;p&gt;Hello folks.&lt;/p&gt;
&lt;p&gt;Today I want to write about a little trick I learned.&lt;/p&gt;
&lt;p&gt;If you are working with legacy code and you don&amp;rsquo;t have the chance to eliminate core design problems, you can use this little pattern to help you out.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Problem is that you have a class that has a gazillion collaborators and at some point in time one of the clever devs thought it would be a cool idea to do dependancy injection via the constructor. We all know that doing this makes the class immutable which is very good for a number of reasons. However it doesn&amp;rsquo;t provide a flexible solution if you want to leave out one or two collabs. For that your would have to create Adapter constructors and chain them upwards which would get very ugly very fast. While using JavaBeans getters and setters can leave your class in a harmful state like not at all or partially initialised.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JMS Connection setup and Framework</title>
      <link>https://skarlso.github.io/2012/03/04/jms-connection-setup-and-framework/</link>
      <pubDate>Sun, 04 Mar 2012 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2012/03/04/jms-connection-setup-and-framework/</guid>
      <description>&lt;p&gt;Hello chumps.&lt;/p&gt;
&lt;p&gt;Today I want to write about jms connection testing with a small framework. I wrote a small thing using a factory object model. It&amp;rsquo;s a lead, a proof of concept. You can use this to go onward.&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s begin with the JMS connection it self.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JMS Connection&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First rule of thumb is: &amp;ldquo;Don&amp;rsquo;t wait for a response when dealing with JMS queues.&amp;rdquo; How so? Because, a JMS queue is asynchronous so you wont get back anything. There are however two ways of checking if it was a success or not.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
