<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pattern on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/tags/pattern/</link>
    <description>Recent content in pattern on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Oct 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://skarlso.github.io/tags/pattern/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to eliminate a parameter boom</title>
      <link>https://skarlso.github.io/2012/10/09/how-to-eliminate-a-parameter-boom/</link>
      <pubDate>Tue, 09 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/10/09/how-to-eliminate-a-parameter-boom/</guid>
      <description>Hello folks.
Today I want to write about a little trick I learned.
If you are working with legacy code and you don&amp;#8217;t have the chance to eliminate core design problems, you can use this little pattern to help you out.
Problem
Problem is that you have a class that has a gazillion collaborators and at some point in time one of the clever devs thought it would be a cool idea to do dependancy injection via the constructor.</description>
    </item>
    
    <item>
      <title>How to eliminate a parameter boom</title>
      <link>https://skarlso.github.io/2012/10/09/how-to-eliminate-a-parameter-boom/</link>
      <pubDate>Tue, 09 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/10/09/how-to-eliminate-a-parameter-boom/</guid>
      <description>Hello folks.
Today I want to write about a little trick I learned.
If you are working with legacy code and you don&amp;#8217;t have the chance to eliminate core design problems, you can use this little pattern to help you out.
Problem
Problem is that you have a class that has a gazillion collaborators and at some point in time one of the clever devs thought it would be a cool idea to do dependancy injection via the constructor.</description>
    </item>
    
    <item>
      <title>JMS Connection setup and Framework</title>
      <link>https://skarlso.github.io/2012/03/04/jms-connection-setup-and-framework/</link>
      <pubDate>Sun, 04 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/03/04/jms-connection-setup-and-framework/</guid>
      <description>Hello chumps.
Today I want to write about jms connection testing with a small framework. I wrote a small thing using a factory object model. It&amp;#8217;s a lead, a proof of concept. You can use this to go onward.
First, let&amp;#8217;s begin with the JMS connection it self.
JMS Connection
First rule of thumb is: &amp;#8220;Don&amp;#8217;t wait for a response when dealing with JMS queues.&amp;#8221; How so? Because, a JMS queue is asynchronous so you wont get back anything.</description>
    </item>
    
    <item>
      <title>JMS Connection setup and Framework</title>
      <link>https://skarlso.github.io/2012/03/04/jms-connection-setup-and-framework/</link>
      <pubDate>Sun, 04 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/03/04/jms-connection-setup-and-framework/</guid>
      <description>Hello chumps.
Today I want to write about jms connection testing with a small framework. I wrote a small thing using a factory object model. It&amp;#8217;s a lead, a proof of concept. You can use this to go onward.
First, let&amp;#8217;s begin with the JMS connection it self.
JMS Connection
First rule of thumb is: &amp;#8220;Don&amp;#8217;t wait for a response when dealing with JMS queues.&amp;#8221; How so? Because, a JMS queue is asynchronous so you wont get back anything.</description>
    </item>
    
  </channel>
</rss>