<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>django on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/tags/django/</link>
    <description>Recent content in django on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Sun, 12 Apr 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://skarlso.github.io/tags/django/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Django – RPG – Part 2</title>
      <link>https://skarlso.github.io/2015/04/12/django-rpg-part-2/</link>
      <pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2015/04/12/django-rpg-part-2/</guid>
      <description>&lt;p&gt;Hello.&lt;/p&gt;
&lt;p&gt;Continuing where we left off with the Django RPG project. Next up is implementing a rudimentary registration and adding the ability to create a character. Maybe even, design the database through django’s modelling.&lt;/p&gt;
&lt;p&gt;Since we are using Django’s very own authentication model, I think we are covered in terms of users. Let’s add two things for now. An Index page, where there is a link to login and a link to registration.&lt;/p&gt;
&lt;p&gt;Adding the index first. Later I would like to switch to a base template model, but for now, I created a simple index.html page. That only contains the two links to the two views. The views are a simple function call in the views.py too which the URLConfig will later point to.&lt;/p&gt;
&lt;p&gt;For now, the index function looks like this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Note, that the title here is utterly unimportant but because I want to switch to a base.html template I’ll leave it here for later usage.&lt;/p&gt;
&lt;p&gt;That concludes the index. Now, let’s create the registration. That is a little more complex, but still rather easy. We are just checking of the user already exists or not, if so, display and error, if not, create the user.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Here, I’m checking to see of the username already exists with the filter. This is by using Django’s model which models the database like hibernate. It’s a simple query. And I’m doing this, because this is faster than raising an exception. Later on, I’ll be switching to a validation framework and django’s own auth view. Because, why not.&lt;/p&gt;
&lt;p&gt;The URL conf looks like this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;And this now, resides in a file under the RPG app and not the main one. The main one includes this one, like this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;That’s it for now. As always, you can check out the code under github.&lt;/p&gt;
&lt;p&gt;Tune in next time, when I’ll attempt to create a view to create a Character for a logged in user and link it to the user. I’ll do this with django’s model framework.&lt;/p&gt;
&lt;p&gt;Thanks for reading,&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
