<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cucumber on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/tags/cucumber/</link>
    <description>Recent content in cucumber on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Wed, 28 Jan 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://skarlso.github.io/tags/cucumber/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>When cucumber goes wrong</title>
      <link>https://skarlso.github.io/2015/01/28/when-cucumber-goes-wrong/</link>
      <pubDate>Wed, 28 Jan 2015 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2015/01/28/when-cucumber-goes-wrong/</guid>
      <description>&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s face the horrible truth:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It&amp;rsquo;s rare / never happens that a manager / scrum master / product owner actually reads your cucumber test cases.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Back in the old days, this was one of the selling points of human readable tests and DSLs. It sounds nice and I&amp;rsquo;m sure in a utopia it also works.&lt;/p&gt;
&lt;p&gt;BDD is a very nice approach to write tests if used in a correct way. And I can relate that at some point, a manager or the product owner, actually writes up a draft of the tests. But that enthusiasm very rarely stays for the rest of the project.&lt;/p&gt;
&lt;p&gt;Especially when you get to the point where your Cucumber test cases start to look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Scenario: User list
  Given I post to &amp;quot;/users.json&amp;quot; with:
    &amp;quot;&amp;quot;&amp;quot;
    {
      &amp;quot;first_name&amp;quot;: &amp;quot;Steve&amp;quot;,
      &amp;quot;last_name&amp;quot;: &amp;quot;Richert&amp;quot;
    }
    &amp;quot;&amp;quot;&amp;quot;
  And I keep the JSON response at &amp;quot;id&amp;quot; as &amp;quot;USER_ID&amp;quot;
  When I get &amp;quot;/users.json&amp;quot;
  Then the JSON response should have 1 user
  And the JSON response at &amp;quot;0&amp;quot; should be:
    &amp;quot;&amp;quot;&amp;quot;
    {
      &amp;quot;id&amp;quot;: %{USER_ID},
      &amp;quot;first_name&amp;quot;: &amp;quot;Steve&amp;quot;,
      &amp;quot;last_name&amp;quot;: &amp;quot;Richert&amp;quot;
    }
    &amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If a product owner reads this, his reaction will be like: &amp;ldquo;What the hell is this? What&amp;rsquo;s users.json? Why is it there? Why should I even care? What&amp;rsquo;s a JSON response? Why should it match with the request? And what, if I keep the id at USER_ID? Huh?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s easy to get overwhelmed by things like this scenario when you start introducing actors into your tests and payloads to your public API. And suddenly you&amp;rsquo;ll end up with cucumber features which no other will be able to understand but the person who wrote it.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m a little bit skeptic that it ever worked as intended. Sure, for a little while. But the dynamic nature of tests will surface soon enough. You can&amp;rsquo;t hide it forever.&lt;/p&gt;
&lt;p&gt;The above example, if the payload and user would be hidden in a reusable code fragment behind the implementation, would look a bit more readable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Scenario: User list
  Given I post to user list with data
  | firstname | Steve |
  | lastname  | Richert |
  When I get a response from the SUT
  Then the response should have the same user
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;See? Easier to understand. I don&amp;rsquo;t care about the payload. I don&amp;rsquo;t care about the user ID, in fact, I would rather see this test as a unit test somewhere deep down in the bowls of the system. Although I can understand that you want a set of automated UATs.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m sure Cucumber has a couple of success stories behind his back, I just didn&amp;rsquo;t happen to come across them as of late. But please, if you have one, share it with me so I can rest easily.&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
