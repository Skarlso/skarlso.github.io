<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>problem solving on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/problem-solving/</link>
    <description>Recent content in problem solving on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Mon, 26 Oct 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://skarlso.github.io/categories/problem-solving/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Kill a Program on Connecting to a specific WiFi – OSX</title>
      <link>https://skarlso.github.io/2015/10/26/kill-a-program-on-connecting-to-a-specific-wifi-osx/</link>
      <pubDate>Mon, 26 Oct 2015 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2015/10/26/kill-a-program-on-connecting-to-a-specific-wifi-osx/</guid>
      <description>&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;If you have the tendency, like me, to forget that you are on the corporate VPN, or leave a certain software open when you bring your laptop to work, this might be helpful to you too.&lt;/p&gt;
&lt;p&gt;It’s a small script which kills a program when you change your Wifi network.&lt;/p&gt;
&lt;p&gt;Script:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Now, the trick is, on OSX to only trigger this when your network changes. For this, you can have a ‘launchd’ daemon, which is configured to watch three files which relate to a network being changed.&lt;/p&gt;
&lt;p&gt;The script sits under your ~/Library/LaunchAgents folder. Create something like, com.username.checknetwork.plist.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Now, when you change your network, to whatever your corporate network is, you’ll kill Sublime.&lt;/p&gt;
&lt;p&gt;Hope this helps somebody.&lt;/p&gt;
&lt;p&gt;Cheers,&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Circular buffer in Go</title>
      <link>https://skarlso.github.io/2015/10/15/circular-buffer-in-go/</link>
      <pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2015/10/15/circular-buffer-in-go/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m proud of this one too. No peaking. I like how go let&amp;rsquo;s you do this kind of stuff in a very nice way.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;circular&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;//TestVersion testVersion
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestVersion&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;//Buffer buffer type
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;full&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;//NewBuffer creates a new Buffer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewBuffer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer&lt;/span&gt;: make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;full&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;}
}

&lt;span style=&#34;color:#75715e&#34;&gt;//ReadByte reads a byte from b Buffer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;ReadByte&lt;/span&gt;() (&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;full&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Danger Will Robinson: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;readByte&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;]
	&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; = (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;full&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readByte&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;//WriteByte writes c byte to the buffer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;WriteByte&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;full&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Danger Will Robinson: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; = (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;full&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;//Overwrite overwrites the oldest byte in Buffer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Overwrite&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; = (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;//Reset resets the buffer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Reset&lt;/span&gt;() {
	&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;NewBuffer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Buffer: %d, %d, %d, %d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>DataMunger Kata with Go</title>
      <link>https://skarlso.github.io/2015/10/04/datamunger-kata-with-go/</link>
      <pubDate>Sun, 04 Oct 2015 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2015/10/04/datamunger-kata-with-go/</guid>
      <description>&lt;p&gt;Quickly wrote up the Data Munger code kata in Go.&lt;/p&gt;
&lt;p&gt;Next time, I want better abstractions. And a way to select columns based on their header data. For now, this is not bad.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>How to Aggregate Tests with Jenkins with Aggregate Plugin on non-relating jobs</title>
      <link>https://skarlso.github.io/2015/10/02/how-to-aggregate-tests-with-jenkins-with-aggregate-plugin-on-non-relating-jobs/</link>
      <pubDate>Fri, 02 Oct 2015 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2015/10/02/how-to-aggregate-tests-with-jenkins-with-aggregate-plugin-on-non-relating-jobs/</guid>
      <description>&lt;p&gt;Hello folks.&lt;/p&gt;
&lt;p&gt;Today, I would like to talk about something I came in contact with, and was hard to find a proper answer / solution for it.&lt;/p&gt;
&lt;p&gt;So I’m writing this down to document my findings. Like the title says, this is about aggregating test result with Jenkins, using the plug-in provided. If you, like me, have a pipeline structure which do not work on the same artifact, but do have a upstream-downstream relationship, you will have a hard time configuring and making Aggregation work. So here is how, I fixed the issue.&lt;/p&gt;
&lt;h1 id=&#34;connection&#34;&gt;Connection&lt;/h1&gt;
&lt;p&gt;In order for the aggregation to work, there needs to be an &lt;strong&gt;artifact connection&lt;/strong&gt; between the upstream and downstream projects. And that is the key. But if you don’t have that, well, let’s create one. I have a parent job configured like this one. =&amp;gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;As you can see, it’s pretty basic. It isn’t much. It’s supposed to be a trigger job for downstream projects. You could have this one at anything. Maybe scheduled, or have some kind of gathering here of some results, and so on and so forth. The end part of the configuration is the interesting bit.&lt;/p&gt;
&lt;p&gt;Aggregation is setup, but it won’t work, because despite there being an upstream/downstream relationship, there also needs to be an artifact connection which uses &lt;strong&gt;fingerprinting&lt;/strong&gt;. Fingerprinting for Jenkins is needed in oder to make the physical connection between the jobs via hashes. This is what you will get if that is not setup:&lt;/p&gt;
&lt;p&gt;But if there is no artifact between them, what do you do? You create one.&lt;/p&gt;
&lt;h1 id=&#34;the-artifact-which-binds-us&#34;&gt;The Artifact which Binds Us&lt;/h1&gt;
&lt;p&gt;Adding a simple &lt;strong&gt;timestamp file&lt;/strong&gt; is enough to make a connection. So let’s do that. This is how it will look like =&amp;gt;&lt;/p&gt;
&lt;p&gt;The important bits about this picture are the small echo which simply creates a file which will contain some time stamp data, and after that the archive artifact, which also fingerprints that file, marking it with a hash which identifies this job as using that particular artifact.&lt;/p&gt;
&lt;p&gt;Now, the next step is to create the connection. For that, you need the artifact copy plugin =&amp;gt; &lt;!-- raw HTML omitted --&gt;Copy Artifact Plugin&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;p&gt;With this, we create the childs configuration like this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Again, the improtant bit is this:&lt;/p&gt;
&lt;p&gt;After the copy is setup, we launch our parent job and if everything is correct, you should see something like this:&lt;/p&gt;
&lt;h1 id=&#34;wrapping-it-up&#34;&gt;Wrapping it Up&lt;/h1&gt;
&lt;p&gt;For final words, important bit to take away from this is that you need an &lt;strong&gt;artifact connection between the jobs&lt;/strong&gt; to make this work. Whatever your downstream / upstream connection is, it doesn’t matter. Also, there can be a problem that you have everything set up, and there are artifacts which bind the jobs together but you still can’t see the results, then your best option is to specify the jobs BY NAME in the aggregate test plug-in like this:&lt;/p&gt;
&lt;p&gt;I know this is a pain if there are multiple jobs, but at least, jenkins is providing you with Autoexpande once you start typing.&lt;/p&gt;
&lt;p&gt;Of course this also works with multiple downstream jobs if they copy the artifact to themselves.&lt;/p&gt;
&lt;p&gt;Any questions, please feel free to comment and I will answer to the best of my knowledge.&lt;/p&gt;
&lt;p&gt;Cheers,
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sieve of Eratosthenes in Go</title>
      <link>https://skarlso.github.io/2015/07/30/sieve-of-eratosthenes-in-go/</link>
      <pubDate>Thu, 30 Jul 2015 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2015/07/30/sieve-of-eratosthenes-in-go/</guid>
      <description>&lt;p&gt;I’m pretty proud of this one as well.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Quick Tip for Debugging Headless Locally</title>
      <link>https://skarlso.github.io/2015/07/22/quick-tip-for-debugging-headless-locally/</link>
      <pubDate>Wed, 22 Jul 2015 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2015/07/22/quick-tip-for-debugging-headless-locally/</guid>
      <description>&lt;p&gt;If you are installing something with Packer and you have Headless enabled(and you are lazy and don’t want to switch it off), it gets difficult, to see output.&lt;/p&gt;
&lt;p&gt;Especially on a windows install the Answer File / Unattended install can be like =&amp;gt; Waiting for SSH… for about an hour or two! If you are doing this locally fret not. Just start VirtualBox, and watch the Preview section which will display the current state even if it’s a headless install!&lt;/p&gt;
&lt;p&gt;It’s a small windows, but your can click on &lt;strong&gt;Show&lt;/strong&gt; which will open the VM in a proper view.&lt;/p&gt;
&lt;p&gt;Enjoy,
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Converting numbers into string representations</title>
      <link>https://skarlso.github.io/2015/07/19/converting-numbers-into-string-representations/</link>
      <pubDate>Sun, 19 Jul 2015 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2015/07/19/converting-numbers-into-string-representations/</guid>
      <description>&lt;p&gt;I quiet like this one. My first go program snippet without any peaking or googling. I’m proud, though it could be improved with a bit of struct magic and such and such. And it only counts ’till 1000…&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Selenium Testing with Packer and Vagrant</title>
      <link>https://skarlso.github.io/2015/07/16/selenium-testing-with-packer-and-vagrant/</link>
      <pubDate>Thu, 16 Jul 2015 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2015/07/16/selenium-testing-with-packer-and-vagrant/</guid>
      <description>&lt;p&gt;So, recently, the tester team talked to me, that their build takes too long, and why is that? A quick look at their configuration and build scripts showed me, that they are actually using a vagrant box, which never gets destroyed or re-started at least. To remedy this problem, I came up with the following solution…&lt;/p&gt;
&lt;h1 id=&#34;same-old8230&#34;&gt;Same old…&lt;/h1&gt;
&lt;p&gt;Same as in my previous post, we are going to build a Windows Machine for this purpose. The only addition to my previous settings, will be some Java install, downloading selenium and installing Chrome, and Firefox.&lt;/p&gt;
&lt;h1 id=&#34;installation&#34;&gt;Installation&lt;/h1&gt;
&lt;h4 id=&#34;answer-file&#34;&gt;Answer File&lt;/h4&gt;
&lt;p&gt;Here is the configuration and setup of Windows before the provision phase.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This is the part were I’m installing Java. The script for the jdk_inst.ps1 is in my previous post, but I’ll paste it here for ease of read.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This installs both x86 and 64 bit version of Java.&lt;/p&gt;
&lt;h1 id=&#34;provision&#34;&gt;Provision&lt;/h1&gt;
&lt;p&gt;I decided to put these into the provision phase to get log messages written out properly. Because in the unattended file, you can’t see any progress.&lt;/p&gt;
&lt;h4 id=&#34;chrome-and-firefox&#34;&gt;Chrome And Firefox&lt;/h4&gt;
&lt;p&gt;Installing these two proved a little bit more difficult. Chrome didn’t really like me to download their installer without accepting something first, like Java. Luckily, after a LOT of digging, I found a chrome installer which lets you install silently. Here is the script to install the two.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;They both install silently. Pretty neat.&lt;/p&gt;
&lt;h4 id=&#34;selenium&#34;&gt;Selenium&lt;/h4&gt;
&lt;p&gt;This only has to be downloaded, so this is pretty simple. Vagrant will handle the startup of course when it does a vagrant up.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Straightforward.&lt;/p&gt;
&lt;h4 id=&#34;the-packer-json-file&#34;&gt;The Packer Json File&lt;/h4&gt;
&lt;p&gt;So putting this all together, here is the Packer JSON file for this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h4 id=&#34;additional-software&#34;&gt;Additional Software&lt;/h4&gt;
&lt;p&gt;This is not done here. Obviously, in order to test your stuff, you first need to install your software on this box. Ideally, everything you need should be in the code you clone to this box, and should be contained mostly. And your application deployment should take core of that. But, if you require something like a DB, postgres, oracle, whatnot, than this is the place where you would install all that.&lt;/p&gt;
&lt;h1 id=&#34;vagrant-and-using-the-packer-box&#34;&gt;Vagrant and Using the Packer Box&lt;/h1&gt;
&lt;p&gt;Now, this has been interesting so far, but how do you actually go about using this image? That’s the real question now, isn’t it? Having a box, just sitting on a shared folder, doesn’t do you too much good. So let’s create a Jenkins job, which utilizes this box in a job which runs a bunch of tests for some application.&lt;/p&gt;
&lt;h4 id=&#34;vagrantfile&#34;&gt;Vagrantfile&lt;/h4&gt;
&lt;p&gt;Your vagrant file, could either be generated automatically, under source control ( which is preferred ) or sitting somewhere entirely elsewhere. In any case, it would look something like this.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Easy, no? Here is the script to start selenium.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Straight forward. We also are forwarding the port on which Selenium is running in order for the test to see it.&lt;/p&gt;
&lt;h4 id=&#34;the-jenkins-job&#34;&gt;The Jenkins Job&lt;/h4&gt;
&lt;p&gt;The job can be anything. This is actually too large to cover here. It could be a gradle job, a maven job, an ant, a nant – or whatever is running the test -, job; it’s up to you.&lt;/p&gt;
&lt;p&gt;Just make sure that before the test runs, do a &lt;strong&gt;vagrant up&lt;/strong&gt; and after the test finishes, in an ALWAYS TO BE EXECUTED HOOK -like gradle’s finalizedBy , call a &lt;strong&gt;vagrant destroy&lt;/strong&gt;. This way, your test will always run on a clean instance that has the necessary stuff on it.&lt;/p&gt;
&lt;h1 id=&#34;closing-words&#34;&gt;Closing words&lt;/h1&gt;
&lt;p&gt;So, there you have it. It’s relatively simple. Tying this all into your infrastructure might prove difficult though depending on how rigid your deployment is. But it will always help you make your tests a bit more robust.&lt;/p&gt;
&lt;p&gt;Also, you could run the whole deployment and test phase on a vagrant box, from the start, which is tied to jenkins as a slave and gets started when the job starts and destroyed when the job ends. That way you wouldn’t have to create a, box in a box running on a box, kind of effect.&lt;/p&gt;
&lt;p&gt;Thanks for reading,&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Packer 0.8.1.</title>
      <link>https://skarlso.github.io/2015/07/01/packer-0-8-1/</link>
      <pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2015/07/01/packer-0-8-1/</guid>
      <description>&lt;p&gt;Previously I wrote that the scripts I’m writing, are failing because Packer hangs.&lt;/p&gt;
&lt;p&gt;Apparently, this was a known issue. And apparently, I was using an older version, 0.7.5. After I updated everything is working wonderfully!!!&lt;/p&gt;
&lt;p&gt;And for my thanks, here is an updated PowerShell script for provisioning my dotnet stuff.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Powershell can also be nice -Or Installing Java silently and waiting</title>
      <link>https://skarlso.github.io/2015/06/30/powershell-can-also-be-nice-or-installing-java-silently-and-waiting/</link>
      <pubDate>Tue, 30 Jun 2015 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2015/06/30/powershell-can-also-be-nice-or-installing-java-silently-and-waiting/</guid>
      <description>&lt;p&gt;Hello folks.&lt;/p&gt;
&lt;p&gt;Today, I would like to show you a small script. It installs Java JDK, both version, x86 and 64 bit, silently, and wait for that process to finish.&lt;/p&gt;
&lt;p&gt;The wait is necessary because /s on a java install has the nasty habit of running in the background. If you are using a .bat file, &lt;strong&gt;you shouldn’t&lt;/strong&gt;, than you would use something like: start /w jdk-setup.exe /s. This gets it done, but is ugly. Also, if you are using Packer and PowerShell provisioning, you might want to set up some environment variables as well for the next script. And you want that property to be available and you don’t want to mess it up with setting a path into a file and then re-setting your path on the begin of your other script. Or pass it around with Packer. No. Use a proper PowerShell script. Learn it. It’s not that hard. Be a professional. Don’t hack something together for the next person to suffer at.&lt;/p&gt;
&lt;p&gt;Here is how I did it. Hope it helps somebody out.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Now, there is room for improvement here. Like checking exit code, doing something extra after a failed exit. Throwing an exception, and so on and so forth. But this is a much needed improvement from calling a BAT file.&lt;/p&gt;
&lt;p&gt;And you would use this in a Packer JSON file like this..&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Easy. And at the end, the System.Environment actually writes out into the registry permanently so no need to pass it around in a file or something ugly like that.&lt;/p&gt;
&lt;p&gt;Hope this helps somebody.&lt;/p&gt;
&lt;p&gt;Thanks for reading.&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Packer, The Windows, and the Vagrant box</title>
      <link>https://skarlso.github.io/2015/06/27/the-packer-the-windows-and-the-vagrant-box/</link>
      <pubDate>Sat, 27 Jun 2015 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2015/06/27/the-packer-the-windows-and-the-vagrant-box/</guid>
      <description>&lt;p&gt;Hello folks.&lt;/p&gt;
&lt;p&gt;Today, I would like to write about something close to my heart recently. I’ve been fiddling with Packer, Windows and Vagrant these days. Trying to get a Windows box up in running is a pain in the arse though, so I thought I share my pain with you nice folks out there. Let’s begin.&lt;/p&gt;
&lt;h1 id=&#34;setup&#34;&gt;Setup&lt;/h1&gt;
&lt;p&gt;First things first. You need &lt;!-- raw HTML omitted --&gt;Packer&lt;!-- raw HTML omitted --&gt;, and &lt;!-- raw HTML omitted --&gt;Vagrant&lt;!-- raw HTML omitted --&gt; obviously. I’ll leave the install up to you. Next, you should clone this git repo =&amp;gt; &lt;!-- raw HTML omitted --&gt;Packer Windows Plugin&lt;!-- raw HTML omitted --&gt;. This plugin contains all the files necessary to get, install, and provision Windows boxes. Luckily, some very nice and clever folks, figured out a lot of things about how to install stuff on Windows. And given that people at Microsoft realised that sys admins would like to install stuff remotely, there are a bunch of forums and places where you can search for how to install software without user interaction. And this is the keyword you should look for =&amp;gt; &lt;strong&gt;unattended Windows install&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This will lead you further into the bowls of Windows technology and silent / quiet installs all over the place.&lt;/p&gt;
&lt;h1 id=&#34;packer-and-answer-files&#34;&gt;Packer and Answer Files&lt;/h1&gt;
&lt;p&gt;When it comes to installing software on Windows, you have quite a few obstacles to overtake. One of the biggest obstacle you are facing, are restarts. Windows has a special place in hell for that. Every time you install something important which requires system libraries or other kind of configuration which “will only take effect after you restart Windows” you have to do a restart. Now, a little background on how Packer interacts with Windows. At the moment, it uses OpenSSH to talk to the box which has to be the last which comes up. If it looses connection to openssh because, I don’t know, it restarted itself, you loose communication to the box, and the setup process stops in mid tracks.&lt;/p&gt;
&lt;p&gt;If you read about that in an earlier attempt to overtake this, you saw that you could use time-outs. You could kill ssh process which presumably makes packer do an attempt to start a new connection. If you are like me, you experienced that Packer does indeed NOT re-try. Because the previous task couldn’t finish, the restart killed the ssh service which could tell Packer that the previous task, an install for example, has finished. Hence, Packer will stay there and wait for that task to complete; which will never happen at this point.&lt;/p&gt;
&lt;p&gt;What can we do? Enter the world of &lt;!-- raw HTML omitted --&gt;Answer Files&lt;!-- raw HTML omitted --&gt;. Basically, it’s an xml file which sets up Windows. When Packer is running this file, the last service which should be installed, must be openSSH. And after that, in the provisioning phase, you should only install software which does not require restarts.&lt;/p&gt;
&lt;p&gt;Let’s look at an example.&lt;/p&gt;
&lt;h1 id=&#34;example-1-windows-updates&#34;&gt;Example #1: Windows Updates&lt;/h1&gt;
&lt;p&gt;This is another layer of purgatory for Windows. It’s updates. The updates take massive amount of times, if you are doing them from scratch, and also require several restart before it’s actually done. You **could **speed up the process a little bit, if you have a private network share where all of the Windows updates are sitting. At least that way you don’t have to download them every time you are creating a box. But you can’t avert the install process itself.&lt;/p&gt;
&lt;p&gt;Let’s look at a setup for packer. Packer works with JSON files for it’s configuration. An example for a Windows 7 box would look something like this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;If it feels daunting, don’t worry. You’ll get used to it fairly quickly. Let’s go over section by section on what this does.&lt;/p&gt;
&lt;h4 id=&#34;builders&#34;&gt;Builders&lt;/h4&gt;
&lt;p&gt;Packer uses builders for, well, building stuff. These two builders are virtualbox and vmware. I’m only interested in virtualbox. This builder downloads win7 and sets up some virtual box details like, disk size, vagrant user, memory, and so and so forth. The interesting part is the floppy part. Here, we can add in some files for setup. We will use this part later on.&lt;/p&gt;
&lt;h4 id=&#34;provisioners&#34;&gt;Provisioners&lt;/h4&gt;
&lt;p&gt;Now here is an interesting tid-bit. There are a bunch of provisioners available as plugin for packer. Installing them is fairly easy. Packer needs binary plugins. Just copy them into ~/.packer.d/plugins or directly into the packer home directly. I’d advice against that. Have them in your own packer.d, that’s much cleaner. For binary plugin releases in the Windows side, look here =&amp;gt; &lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://github.com/packer-community/packer-windows-plugins/releases&#34;&gt;https://github.com/packer-community/packer-windows-plugins/releases&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;. If you would like to build them yourself from source, download the source and use go gcc to build it. You will have to &lt;strong&gt;go get&lt;/strong&gt; a few packages though. Also you will have to have &lt;strong&gt;$GOPATH&lt;/strong&gt; (pointing to your own workspace) and &lt;strong&gt;$GOROOT&lt;/strong&gt; (pointing to your working go) setup. But this is not a Go guide. After that just do **go build main.go **and you have your plugin.&lt;/p&gt;
&lt;p&gt;Provisioners are like vagrant provision they will execute post setup stuff on your box. Like installing utils, 7zip, choco, nuget, and so and so forth. There are a few interesting Windows provisioners, like restart-windows, powershell, and Windows shell. Which is like shell, but without the need of pre-setup if you are trying to use it on Windows. The basic shell on Windows is a little clanky and can hang from time-to-time so I recommend using PowerShell or WindowsShell provisioner if you are dealing with Windows post-setup Setup.&lt;/p&gt;
&lt;h4 id=&#34;post-processor&#34;&gt;Post-Processor&lt;/h4&gt;
&lt;p&gt;This will create the Vagrant box after everything is done.&lt;/p&gt;
&lt;h4 id=&#34;running-the-update&#34;&gt;Running the Update&lt;/h4&gt;
&lt;p&gt;For use, two things are interesting from here at this moment. These guys =&amp;gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;These two contain most of the logic which is part of the update process. You should see it in your checked out source. There is some very interesting logic in there which describes how the update happens. Basically it’s a loop which re-checks if there are updates available or if a re-start is needed. Packer handles re-starts well at this point in the install because it simply waits for SSH to come only. The rest is handled by Windows.&lt;/p&gt;
&lt;p&gt;These scripts are called in the Answer File which the Windows Setup uses for configuration purposes. Take a look at this section:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This is were the floppy part comes on handy. This part uses the scripts bound by floppy and which will be available from a:.&lt;/p&gt;
&lt;p&gt;This will install all the updates available. It will take a while. A very very long while… But let’s go a step further.&lt;/p&gt;
&lt;h1 id=&#34;example-2-installing-dotnet-45&#34;&gt;Example #2: Installing DotNet 4.5&lt;/h1&gt;
&lt;p&gt;Let’s assume you want to create a box with visual studio 2013, office, and have choco on it, and a couple of more things for which you need lots of restarts. You could try installing with /norestart switch, which also works; however if you definitely need it to restart I suggest installing stuff with the Answer File. For this, let’s create a PowerShell script which downloads and installs dotnet 451 which is needed for visual studio ultimate 2013.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;So this downloads it right from the source. As mentioned earlier, you could have this on a nice shared drive so downloading from the internet is not necessary. The installer is in fact a bit friendly. It has a switch called /q /norestart. The /q is called silent install and the /norestart speaks for itself. If you leave it out, you can use /forcerestart or you could have the following two lines after this finishes: &lt;em&gt;LogWrite “Resarting Computer.” Restart-Computer -Force&lt;/em&gt;. This will force a restart. You need the -Force because otherwise it won’t let it restart while there are active sessions logged on the computer.&lt;/p&gt;
&lt;p&gt;Now, let’s add this to the answer file:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;See, how easy this is? And now we make use of the floppy part of the windows-7.json by adding this line: &lt;strong&gt;“./scripts/install-dotnet-451.ps1”&lt;/strong&gt;. Don’t forget to append the “,” at the end of the previous line. This is an array.&lt;/p&gt;
&lt;p&gt;We are ready to go. Just run &lt;strong&gt;packer build -only=virtualbox-iso windows-7.json&lt;/strong&gt; and you should be done!&lt;/p&gt;
&lt;h1 id=&#34;example-3-installing-visual-studio-ultimate&#34;&gt;Example #3: Installing Visual Studio Ultimate&lt;/h1&gt;
&lt;p&gt;Installing visual studio is almost trivial as well. With the addition that visual studio requires an admin.xml for silent install which has a bunch of settings. When you have the admin.xml just bind it into the floppy drive as well and call the visual studio install powershell script like this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Again, this will take a while………….&lt;/p&gt;
&lt;h1 id=&#34;post-setup-provisioning&#34;&gt;Post Setup Provisioning&lt;/h1&gt;
&lt;p&gt;When all this is done, you can still add some provisioning steps to add some utils with PowerShell or WindowsShell provisioner. I would advice against using simple shell. Bare in mind one other thing. If you have a batch file, and you are calling another batch file in that batch file, like choco install 7zip, it will happen that the install process will hang on installing 7zip. Because in Windows land the called script will not return the exec handler to the caller unless specifically asking for it with &lt;strong&gt;call&lt;/strong&gt;. Which means your bat file will look something like this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;And so on, and so forth.&lt;/p&gt;
&lt;h1 id=&#34;wrap-up&#34;&gt;Wrap-Up&lt;/h1&gt;
&lt;p&gt;So, what have we learned? We have learned that installing software which requires re-start is better left to Windows itself with an answer file. Batch files will not return the handler. SSH &lt;strong&gt;MUST&lt;/strong&gt; be the last thing you start up in the answer file. Use PowerShell provisioner or WindowsShell provisioner on Windows.&lt;/p&gt;
&lt;p&gt;Hope this helped.&lt;/p&gt;
&lt;p&gt;Happy installing, and as always,&lt;/p&gt;
&lt;p&gt;Thanks for reading.&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why Lock Picking is like Testing</title>
      <link>https://skarlso.github.io/2015/02/08/why-lock-picking-is-like-testing/</link>
      <pubDate>Sun, 08 Feb 2015 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2015/02/08/why-lock-picking-is-like-testing/</guid>
      <description>&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Not a great many people know that I’m actually into Lock Picking as a hobby. This will not be a tutorial on how to do it, or I won’t really talk about how I do it; I would like to write about something completely different. So if you came here for that, here are a few very good resources:&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;http://www.lockpicking101.com/&#34;&gt;http://www.lockpicking101.com/&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;– Tutorials&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;http://www.ukbumpkeys.com/collections/lock-picking&#34;&gt;http://www.ukbumpkeys.com/collections/lock-picking&lt;/a&gt;&lt;!-- raw HTML omitted --&gt; – Tools ( UK )&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;http://www.reddit.com/r/lockpicking/&#34;&gt;http://www.reddit.com/r/lockpicking/&lt;/a&gt;&lt;!-- raw HTML omitted --&gt; – Reddit&lt;/p&gt;
&lt;p&gt;For my post, click on…&lt;/p&gt;
&lt;p&gt;So, why is lock picking like testing? I saw a great many posts which where trying to compare software testing to some activity. I even knew somebody who compared it to dancing. Because…? I don’t know, maybe he was trying out a talk material maybe? And he said – “I was in this club and watched a couple dance, and I was thinking, wow, this is like software testing.” – I couldn’t really react to that. But hey, kudos for out of the box thinking I guess.&lt;/p&gt;
&lt;p&gt;But let’s see some of the similarities in picking and testing:&lt;/p&gt;
&lt;h4 id=&#34;thinking&#34;&gt;Thinking&lt;/h4&gt;
&lt;p&gt;It requires logical, critical thinking. It’s a puzzle that you have to solve. A puzzle which you basically solve by testing out solutions and see if they work. You can achieve this by trial and error, something testers face on a daily basis. After awhile you acquire something called finesse. Which will help you identify breaking points more easily. Since you have experience with a certain lock type, you already have a wast knowledge to rely on when you are trying to solve a new lock with the same build. You did your research you know its weaknesses hence you immediately have an attack vector on your hand.&lt;/p&gt;
&lt;h4 id=&#34;tools&#34;&gt;Tools&lt;/h4&gt;
&lt;p&gt;Lock picking has a wast number of tools. Each tool is design for a specific purpose. You can reuse tools but they are rarely a fit for other locks. Unless it’s a similar one. There are delicate tools and then there are brute force tools, which are very hard to use at first but after you get used to it and know how to handle it, it becomes massively helpful. You can build your own tools or use tools that are built for you by tool experts.&lt;/p&gt;
&lt;h4 id=&#34;solving-process&#34;&gt;Solving Process&lt;/h4&gt;
&lt;p&gt;When can you test an application to its fullest extend and capabilities? How can you achieve the most and best testing ever possible? You have to know how the application works. You have to know its components, its abilities, its capabilities and **limits. **For Lock Picking to be the best at what you do and to be able to move to a completely new lock and try to pick it, you have to know its flaws. You have to know when, and how it was built. You have to know what makes it tick, how it works, what it uses, how the inside mechanics look like in order to try to exploit them.&lt;/p&gt;
&lt;p&gt;After you acquire this knowledge you will be able to build, or purchase a tool which will help you in solving the puzzle. But you were only able to do that because after you researched its manufacturing procedure you know that the last pin is hard to get to and that it has an anti drilling shield, so drilling is out of the question, and that it has a safety spring which locks the lock permanently upon tampering. If you would not be in the possession of this information you could have made a fatal error and could have made the client lost money ( since at that point they pretty much need to break down the door, unless the key is found again ( assuming the picking took place because the key was lost ) ).&lt;/p&gt;
&lt;h4 id=&#34;last-words&#34;&gt;Last Words&lt;/h4&gt;
&lt;p&gt;There you have it folks. That’s why Lock Picking is like software testing. Knowing structure, inside workings and the proper tools will help to achieve your goal. Just like in testing when you know your field, you know what to use, when, and how. &lt;strong&gt;Knowledge&lt;/strong&gt; makes you the Best.&lt;/p&gt;
&lt;p&gt;Good luck,&lt;/p&gt;
&lt;p&gt;Happy Picking,&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Example when to use the Strategy Pattern</title>
      <link>https://skarlso.github.io/2014/02/19/example-when-to-use-the-strategy-pattern/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2014/02/19/example-when-to-use-the-strategy-pattern/</guid>
      <description>&lt;p&gt;Hello folks.&lt;/p&gt;
&lt;p&gt;A quick post about an interesting idea.&lt;/p&gt;
&lt;p&gt;I want to elaborate on a possibility to use the Strategy Design pattern.&lt;/p&gt;
&lt;p&gt;There are many clues that you need one. One is for example if your object has a boolean variable which you use a lot in other classes to determine behavior. Then there is perhaps time to implement a Strategy.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;So you have two classes which do something based on some boolean coming from a class. So what you can do in this case, simply extract out that change in state.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Now I know this looks like a lot of more code. However imagine this on a much larger scale with lots of implementations for Foo and Bar. Your if statements will get very convulated very quickly. This way you abstract away the choice into a Factory. And you can add as many implementations of Base as you like with as many variants as you like without changing the logic anywhere else but the Factory and the Enum. And the Enum could be a Configuration file and you do something like this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This way you don’t even need the Enum anymore. Just use some configuration to determine what class you need at which point in your implementation without using an If statement at all.&lt;/p&gt;
&lt;p&gt;Hope this helps.&lt;/p&gt;
&lt;p&gt;I whipped this up from memory so please feel free to tell me if I missed something or have a syntax error in there somewhere…&lt;/p&gt;
&lt;p&gt;As always,&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to check content header on unknown number of items – Python</title>
      <link>https://skarlso.github.io/2014/02/11/how-to-check-content-header-on-unknown-number-of-items-python/</link>
      <pubDate>Tue, 11 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2014/02/11/how-to-check-content-header-on-unknown-number-of-items-python/</guid>
      <description>&lt;p&gt;Hello guys.&lt;/p&gt;
&lt;p&gt;I’d like to share a little something with you. It’s what I cooked up in Python to check an unknown number of content items in a web application.&lt;/p&gt;
&lt;p&gt;Basically the script runs from a script folder under Grails. It goes through all the configured folders where there is static content like images, javascript, css and so on and so forth.&lt;/p&gt;
&lt;p&gt;And then with curl it calls these items up in using their respective paths’. This works best on localhost if you have your local environment configured to access these elements because in some places direct access is restricted.&lt;/p&gt;
&lt;p&gt;This script only check static content. Dynamically generated content would have to be hard coded to check.&lt;/p&gt;
&lt;p&gt;It only generated a file currently with ERROR on a not match an success on match and not found if it encounters an item which it doesn’t know about.&lt;/p&gt;
&lt;p&gt;So without further ado… The Script:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Hope you like it. Feel free to improve however you want.&lt;/p&gt;
&lt;p&gt;Thanks for reading,&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why does it matter if I sit in an office or in a park</title>
      <link>https://skarlso.github.io/2014/02/09/why-does-it-matter-if-i-sit-in-an-office-or-in-a-park/</link>
      <pubDate>Sun, 09 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2014/02/09/why-does-it-matter-if-i-sit-in-an-office-or-in-a-park/</guid>
      <description>&lt;p&gt;Hello everybody.&lt;/p&gt;
&lt;p&gt;I’d like to explain a lot about a topic that is very near my heart. If your job is in an office you will understand this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why offices?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So why are we sitting together in one big place cramped up with 20-300 other people? Why bother the catering and the ventilation and what not to accommodate these people at one place? Why not just leave them be and let them work at home?&lt;/p&gt;
&lt;p&gt;If your job involves interaction than you are in bad luck. You need to be there to talk to people to coordinate your work to gather information and to generally do your work.&lt;/p&gt;
&lt;p&gt;But this doesn’t answer the question…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why does it matter if I’m in the office or not if my work is done?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That’s my big question. Why must I sit in the office if my work is done and in a good shape and good quality? Why must I go in and do my job there if at home I’m 50% more efficient because I’m in my underwear? In fact, why bother going into and environment where I don’t feel comfortable. Where I must go into an office which is cold and doesn’t have my favourite chair, my desk and loud heavy metal from speakers.&lt;/p&gt;
&lt;p&gt;Well there are couple of things…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interaction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So like I said earlier there is that. Interaction. You need to collaborate with others. You need to do pair programming, you need to talk to the business analysts, testers, colleagues what nots. In that case, having an environment where everybody is at your disposal is pretty neat and necessary. It cannot be avoided.&lt;/p&gt;
&lt;p&gt;Unless everybody is on Skype and available all the time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Separation of Concern&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There is a Design Pattern in software engineering called Separation of Concern. This applies to work places as well. You don’t live where you work generally because living could distract working. There are tons and tons of books about how you need a separated environment if you are a writing and you write at home. Because there are too many distractions. And if you are not disciplined enough you will get Zero work done. You will always find something better to do.&lt;/p&gt;
&lt;p&gt;That’s why the physical act of going to work will switch your brain into work mode and lets you focus better. Whilst going home should do the opposite thing. You should leave work at work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Show “our” strength&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Generally big companies like to show off. For a company as big as Microsoft or IBM for example it’s actually not the product that matters on the market but the yearly growth of employees. Hence, strength in numbers.&lt;/p&gt;
&lt;p&gt;Now if some investors get around and want to check out the company they like to see the buzzing bees. They like to see people working, sitting, typing away at stuff. It’s all about appearances. A strong, cramped office full of people looks like a very busy hard working company.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Companies could be a bit more flexible though&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If I work from 6AM to 3PM because my daughter has a show at 5PM I want to go though I would like to be able to do that without having to go through too much trouble.&lt;/p&gt;
&lt;p&gt;Or if I would like to work tomorrow and today I have better things to do, then why not, if my work is done?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abuse&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But then, people are people. Most of them will use every opportunity to slack off. Hence the general perception is that if you are at home you are not working. So to be better able to monitor you, all of the employees must be in one place.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Last words&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So really there needs to be a better agreement between both sides. Workers need to be honest and diligent. And workplaces need to be more flexible and understanding as long as the job is done. Because people will work a LOT better and more efficient if they are HAPPY in their work environment.&lt;/p&gt;
&lt;p&gt;That’s what I’m proposing.&lt;/p&gt;
&lt;p&gt;As ever,&lt;/p&gt;
&lt;p&gt;Thanks for reading.&lt;/p&gt;
&lt;p&gt;Have a nice day.&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sublime text</title>
      <link>https://skarlso.github.io/2013/06/24/sublime-text-5/</link>
      <pubDate>Mon, 24 Jun 2013 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2013/06/24/sublime-text-5/</guid>
      <description>&lt;p&gt;Hello everybody. I’ve been messing around with sublime for some time now. And been using it to write entires and stuff. So here I was thinking why the hell I should not us it as my main blog entry writer. And being the curious guy I was I thought that creating a plugin that let’s you submit your post from your favorite editor is just the thing I need.&lt;/p&gt;
&lt;p&gt;So without any further ado here it is… The wordpress blog entry submitter plugin for sublime text: &lt;!-- raw HTML omitted --&gt;Sublime WordPress Plugin&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Please enjoy.&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cucumber-Jvm And @AfterAll</title>
      <link>https://skarlso.github.io/2013/04/18/cucumber-jvm-and-afterall/</link>
      <pubDate>Thu, 18 Apr 2013 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2013/04/18/cucumber-jvm-and-afterall/</guid>
      <description>&lt;p&gt;Hey folks.&lt;/p&gt;
&lt;p&gt;I find out something new about cucumber-jvm every day.&lt;/p&gt;
&lt;p&gt;If you want something that is executed after all of the tests have finished you must use the Java shutdownHook. It’s simple really you add in a block of code that can run right before the JVM quits. I know I know… It sounds awful but I found out that this is the actual way of doing this with java / cucumber.&lt;/p&gt;
&lt;p&gt;Anyways…&lt;/p&gt;
&lt;p&gt;Here is something to do when all of your test quit-&amp;gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;So there you go. You would need to call this in a @BeforeClass to have it attached. This is a small hook attached after each test has run which would submit a report built up from a file. Why not use a listener or a custom report generator or whatever? Because maybe you have the report done in a remote place where you need to place a csv file which will be available to everybody to look at. And you want the report to be sent and generated dynamically. Or you have some clean up to do after your suit is done.&lt;/p&gt;
&lt;p&gt;In ruby the @AfterAll is actually equivalent to this which in ruby land would be at_exit.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;So there it is. Hope this helped.&lt;/p&gt;
&lt;p&gt;Cheers,&lt;/p&gt;
&lt;p&gt;And as always,&lt;/p&gt;
&lt;p&gt;Have a nice day!&lt;/p&gt;
&lt;p&gt;G.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cucumber Test Name and Tags on Feature</title>
      <link>https://skarlso.github.io/2013/04/15/cucumber-test-name-and-tags-on-feature/</link>
      <pubDate>Mon, 15 Apr 2013 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2013/04/15/cucumber-test-name-and-tags-on-feature/</guid>
      <description>&lt;p&gt;Hello everybody.&lt;/p&gt;
&lt;p&gt;I would like to show you a gem today that I found out.&lt;/p&gt;
&lt;p&gt;Apparently there is no easy way to get to the name of an executing cucumber scenario in cucumber-jvm&lt;/p&gt;
&lt;p&gt;You can try something like that:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;But that isn’t giving you too much now is it? And the API of scenario is as small as it can get. It offers you four options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ember&lt;/li&gt;
&lt;li&gt;getStatus&lt;/li&gt;
&lt;li&gt;isFailed&lt;/li&gt;
&lt;li&gt;write&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That doesn’t help me. I wanted to get the name of the executed feature and the tags on that particular feature. I thought that’s got to be as easy as just getting a scenario accessing the feature and get the tags. Hooooowww boy I was wrong.&lt;/p&gt;
&lt;p&gt;I ended up with this….&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Ohhhhh yes! The fields which I wanted were all private and not accessible. I’m sure there was a reason behind this decision but if it was sensible it eludes me. But in the world of programming nothing is impossible they say so there.&lt;/p&gt;
&lt;p&gt;In cucumberFeature there will be everything what you need. Tags, Names, Tests, Execution time. Everything.&lt;/p&gt;
&lt;p&gt;I know that cucumber runs with jUnit so if there is a better way to do this please for the love of my sanity share it with me.&lt;/p&gt;
&lt;p&gt;Thank you for reading.&lt;/p&gt;
&lt;p&gt;And as always,&lt;/p&gt;
&lt;p&gt;Have a nice day.&lt;/p&gt;
&lt;p&gt;G.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>It’s all about human interaction.</title>
      <link>https://skarlso.github.io/2013/01/31/its-all-about-human-interaction/</link>
      <pubDate>Thu, 31 Jan 2013 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2013/01/31/its-all-about-human-interaction/</guid>
      <description>&lt;p&gt;Hello everybody.&lt;/p&gt;
&lt;p&gt;Today I would like to write about something I experienced over the years of being in the software industry.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Some History&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’ve been a tester for a long time now. I’ve been up and down and down and up. I struggled for a very long time until I became somebody who I am today. And I still have many things to learn ahead of me.&lt;/p&gt;
&lt;p&gt;I learned from many people. I personally thing my greatest influence on testing was James Marcus Bach and his Brother Jon Bach you should definitely check out these guys. It took me a long time to get to where I am today. And after ~10 years now I can state with a reasonable confidence that this industry is no longer about technology or solutions to technological problems.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Surly you Jest…&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nope… I’m not joking. I can see people struggling to understand people and mostly it’s not because of knowledge differences it’s because they simply can’t stand each other. Or they simply think that their solution must be better then the one the other has. Or the guy just woke up with a bad foot.&lt;/p&gt;
&lt;p&gt;And industrial problems? Management? Sure it can be knowledge but mostly it’s simply ignorance and pride. &lt;strong&gt;Pride&lt;/strong&gt; because he / she does not want to admit that they don’t understand something. &lt;strong&gt;Pride&lt;/strong&gt; to ask a question that might make them look stupid. I’d rather look stupid for five minutes then for the rest of my life. I rather ask the question that I want to know because I can’t make a proper decision without it. I rather learn then be ignorant for the rest of my life.&lt;/p&gt;
&lt;p&gt;People need to overcome their differences. People need to understand that this behaviour hurts the company. It hurts them it hurts the people around them and the product. Swallow your pride and be a bigger man / woman. Face your fear. Be Strong. Be clever be intelligent be a proper grown up human being!!!!&lt;/p&gt;
&lt;p&gt;You hate my face? SAY IT IN MY FACE!! I can’t resolve issues I DON’T KNOW ABOUT!!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Last but not least…&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Grow up people. Be nice. Be curious. Don’t be afraid to ask. Don’t be afraid to ask again if you still don’t understand. It might be that the person speaking has a completely different view of something and it might be that nobody really understands him and they are just afraid to ask. And if you ask something stupid? Who cares.. You learned from it.&lt;/p&gt;
&lt;p&gt;Be a professional. A professional is not afraid. And encourage others to be one too. In the today’s technological world solutions can be found by the dozens on the internet. You will be a better work force by adjusting your personal habits a little bit.&lt;/p&gt;
&lt;p&gt;Be nice.&lt;/p&gt;
&lt;p&gt;And as always,&lt;/p&gt;
&lt;p&gt;Thanks for reading.&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From Chaos There Shall Be Order</title>
      <link>https://skarlso.github.io/2013/01/04/from-chaos-there-shall-be-order/</link>
      <pubDate>Fri, 04 Jan 2013 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2013/01/04/from-chaos-there-shall-be-order/</guid>
      <description>&lt;p&gt;Dear Readers.&lt;/p&gt;
&lt;p&gt;Today I want to talk to you about something I discovered over years of working and experience.&lt;/p&gt;
&lt;p&gt;Also something that I can see in the world repeating over and over again. Not just in Software business but also in History in Human nature in Physics and Systems.&lt;/p&gt;
&lt;p&gt;So let’s see what I’m talking about.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is Chaos?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Chaos is a state of utter confusion. Chaos is the opposite of order. Chaos is when everybody does what they want without thinking about the consequences.&lt;/p&gt;
&lt;p&gt;Does Chaos hurt? Of course it does. From Chaos there can be no production. From Chaos there can be no profit. From Chaos there can be no life.&lt;/p&gt;
&lt;p&gt;Is that really true? It sort of is. Remember the Big Bang. Initially it is believed that there was order. The universe was a perfect gem with the four forces ( Gravity, Electromagnetic, Weak Nuclear and Strong Nuclear force ) united. And then a Higgs came around and made it BOOM! And so there was Chaos. And from Chaos, with a snowballs chance, there was life.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So then why is Chaos bad?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Companies usually don’t have the time or the money to wait for that Snowballs chance to come to flourish. So order is required for life to become great.&lt;/p&gt;
&lt;p&gt;Take for example the Chinese Emperor Qin Shi Huang. He was the one uniting China. Sure, he killed a LOT of people. And China is oppressed every since. However he did introduce a lot of new concepts and reforms which wouldn’t have been possible in the Chaos. And today China is one of the leading nations if not The…&lt;/p&gt;
&lt;p&gt;Before Emperor Qin begun his journey there were 9 different ways of writing down the world ‘sword’ in chinese. This was unacceptable. After the Emperor succeeded he unified the writing and made communication easier.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Striving for order&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;People have always strived for order. For simplicity. For unification. For ‘one’ instead of ‘many’. We have stories that say there is power in many. Physicist are continuously trying to unify the laws of physics in the beautiful little equations. Like Einsteins law of relativity. That small equations revolutionised the world. And it came from unification.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So then what are the downsides of unification?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Everything comes with a price of course. The unification bought oppression to China and the loss of the individuum. Fantasy and thoughts got all sacked. People become like Borgs. However the Country evolved immensely under one banner. But what does this all have to do with Testing?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Applying Order&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Think about your company. Think about how your developers work. Does everybody use a different building platform? Does everybody use a different operating system? Do they run the same command to build your environment? Did you have any kind of problems because of that? I’m sure you did.&lt;/p&gt;
&lt;p&gt;There are benefits of it. At least you will know if your application is working in a different environment. But do you want that? Is it worth it? After all we live in an age were there are numerous possibilities, environments, languages, command line options etc etc.&lt;/p&gt;
&lt;p&gt;But think about it. Did the diversity bring you more profit or did it hurt you more? Which one is applicable for you? If your developers do not have the ability to properly govern them selfs then you need order. You need a unified language, you need a unified environment and unified processes Agile or not Agile. Your company wont be successful if you want to be Agile just because it is the Current Trend. You need to be pragmatic about it and applied were it is reasonable. There is nothing wrong in introducing a standard or a code review process or a coding guid line or some standards here and there if it HELPS.&lt;/p&gt;
&lt;p&gt;There will be friction. People tend to resist change. There will be losses. But a unified company is a strong company. And when the new guy arrives? He wont have any kind of a problem installing your software and beginning working on it because he doesn’t have to go around and scoop information together from at least ten people and do it in an eleventh way at the end.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Last Words&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So think about this. Is your company strong enough to uphold Chaos and make it flourish? Or is it a bunch of people doing whatever they think is right because of a sense of individuality which they don’t want to give up?&lt;/p&gt;
&lt;p&gt;This is for you to decide.&lt;/p&gt;
&lt;p&gt;And as always,&lt;/p&gt;
&lt;p&gt;Thanks for reading.&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
