<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>knowledge on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/knowledge/</link>
    <description>Recent content in knowledge on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 15 Oct 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://skarlso.github.io/categories/knowledge/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Jenkins Job DSL and Groovy goodness</title>
      <link>https://skarlso.github.io/2015/10/15/jenkins-job-dsl-and-groovy-goodness/</link>
      <pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/10/15/jenkins-job-dsl-and-groovy-goodness/</guid>
      <description><![CDATA[<p>Hi Folks.</p>
<p>Ever used <a href="https://wiki.jenkins-ci.org/display/JENKINS/Job+DSL+Plugin" target="_blank">Job DSL plugin</a> for Jenkins? What is that you say? Well, it&rsquo;s TEH most awesome plug-in for Jenkins to have, because you can CODE your job configuration and put it under source control.</p>
<p>Today, however, I&rsquo;m not going to write about that because the tutorials on Jenkins JOB DSL are very extensive and very well done. Anyone can pick them up.</p>
<p>Today, I would like to write about a part of it which is even more interesting. And that is, extracting re-occurring parts in your job configurations.</p>
<p>If you have jobs, which have a common part that is repeated everywhere, you usually have an urge to extracted that into one place, lest it changes and you have to go an apply the change everywhere. That&rsquo;s not very efficient. But how do you do that in something which looks like a JSON descriptor?</p>
<p>Fret not, it is just Groovy. And being just groovy, you can use Groovy to implement parts of the job description and then apply that implementation to the job in the DSL.</p>
<p>Suppose you have an email which you send after every job for which the DSL looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy">
<span class="n">job</span><span class="o">(</span><span class="s1">&#39;MyTestJob&#39;</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">description</span> <span class="s1">&#39;&lt;strong&gt;GENERATED - do not modify&lt;/strong&gt;&#39;</span>
    <span class="n">label</span><span class="o">(</span><span class="s1">&#39;machine_label&#39;</span><span class="o">)</span>
    <span class="n">logRotator</span><span class="o">(</span><span class="mi">30</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span>
    <span class="n">parameters</span> <span class="o">{</span>
        <span class="n">stringParam</span><span class="o">(</span><span class="s1">&#39;somestringparam&#39;</span><span class="o">,</span> <span class="s1">&#39;default_valye&#39;</span><span class="o">,</span> <span class="s1">&#39;Description&#39;</span><span class="o">)</span>
    <span class="o">}</span>
    <span class="n">wrappers</span> <span class="o">{</span>
        <span class="n">timeout</span> <span class="o">{</span>
            <span class="n">noActivity</span><span class="o">(</span><span class="mi">600</span><span class="o">)</span>
            <span class="n">abortBuild</span><span class="o">()</span>
            <span class="n">failBuild</span><span class="o">()</span>
            <span class="n">writeDescription</span><span class="o">(</span><span class="s1">&#39;Build failed due to timeout after {0} minutes&#39;</span><span class="o">)</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="n">deliveryPipelineConfiguration</span><span class="o">(</span><span class="s2">&#34;Main&#34;</span><span class="o">,</span> <span class="s2">&#34;MyTestJob&#34;</span><span class="o">)</span>
    <span class="n">wrappers</span> <span class="o">{</span>
        <span class="n">preBuildCleanup</span> <span class="o">{</span>
            <span class="n">deleteDirectories</span><span class="o">()</span>
        <span class="o">}</span>
        <span class="n">timestamps</span><span class="o">()</span>
    <span class="o">}</span>
    <span class="n">triggers</span> <span class="o">{</span>
        <span class="n">cron</span><span class="o">(</span><span class="s1">&#39;H 12 * * 1,2&#39;</span><span class="o">)</span>
    <span class="o">}</span>
    <span class="n">steps</span> <span class="o">{</span>
        <span class="n">batchFile</span><span class="o">(</span><span class="n">readFileFromWorkspace</span><span class="o">(</span><span class="s1">&#39;relative/path/to/file&#39;</span><span class="o">))</span>
    <span class="o">}</span>
            <span class="n">publishers</span> <span class="o">{</span>
                <span class="n">wsCleanup</span><span class="o">()</span>
                <span class="n">extendedEmail</span><span class="o">(</span><span class="s1">&#39;email@address.com&#39;</span><span class="o">,</span> <span class="s1">&#39;$DEFAULT_SUBJECT&#39;</span><span class="o">,</span> <span class="s1">&#39;$DEFAULT_CONTENT&#39;</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">configure</span> <span class="o">{</span> <span class="n">node</span> <span class="o">-&gt;</span>
                        <span class="n">node</span> <span class="s">/ presendScript &lt;&lt; readFileFromWorkspace(&#39;email_templates/</span><span class="n">emailtemplate</span><span class="o">.</span><span class="na">groovy</span><span class="s1">&#39;)
</span><span class="s1">                        node / replyTo &lt;&lt; &#39;</span><span class="n">$DEFAULT_REPLYTO</span><span class="s1">&#39;
</span><span class="s1">                        node / contentType &lt;&lt; &#39;</span><span class="k">default</span><span class="s1">&#39;
</span><span class="s1">                    }
</span><span class="s1">                    trigger(triggerName: &#39;</span><span class="n">StillUnstable</span><span class="s1">&#39;, subject: &#39;</span><span class="n">$DEFAULT_SUBJECT</span><span class="s1">&#39;, body: &#39;</span><span class="n">$DEFAULT_CONTENT</span><span class="s1">&#39;, replyTo: &#39;</span><span class="n">$DEFAULT_REPLYTO</span><span class="s1">&#39;, sendToDevelopers: true, sendToRecipientList: true)
</span><span class="s1">                    trigger(triggerName: &#39;</span><span class="n">Fixed</span><span class="s1">&#39;, subject: &#39;</span><span class="n">$DEFAULT_SUBJECT</span><span class="s1">&#39;, body: &#39;</span><span class="n">$DEFAULT_CONTENT</span><span class="s1">&#39;, replyTo: &#39;</span><span class="n">$DEFAULT_REPLYTO</span><span class="s1">&#39;, sendToDevelopers: true, sendToRecipientList: true)
</span><span class="s1">                    trigger(triggerName: &#39;</span><span class="n">Failure</span><span class="s1">&#39;, subject: &#39;</span><span class="n">$DEFAULT_SUBJECT</span><span class="s1">&#39;, body: &#39;</span><span class="n">$DEFAULT_CONTENT</span><span class="s1">&#39;, replyTo: &#39;</span><span class="n">$DEFAULT_REPLYTO</span><span class="err">&#39;</span><span class="o">,</span> <span class="nl">sendToDevelopers:</span> <span class="kc">true</span><span class="o">,</span> <span class="nl">sendToRecipientList:</span> <span class="kc">true</span><span class="o">)</span>
                <span class="o">}</span>

            <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Now, that big chunk of email setting is copied into a bunch of files, which is pretty ugly. And once you try to change it, you&rsquo;ll have to change it everywhere. Also, the interesting bits here are those readFileFromWorkspace parts. Those allow us to export even larger chunks of the script into external files. Now, because the slave might be located somewhere else, you should not use new File(&lsquo;file&rsquo;).text in your job DSL. readFileFromWorkspace in the background does that, but applies correct way to the PATH it looks on for the file specified.</p>
<p>Let&rsquo;s put this into a groovy script, shall we? Create a utilities folder where the DSL is and create a groovy file in it like this one:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy">
<span class="kn">package</span> <span class="n">utilities</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JobCommonTemplate</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">addEmailTemplate</span><span class="o">(</span><span class="kt">def</span> <span class="n">job</span><span class="o">,</span> <span class="kt">def</span> <span class="n">dslFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">emailScript</span> <span class="o">=</span> <span class="n">dslFactory</span><span class="o">.</span><span class="na">readFileFromWorkspace</span><span class="o">(</span><span class="s2">&#34;email_template/EmailTemplate.groovy&#34;</span><span class="o">)</span>
        <span class="n">job</span><span class="o">.</span><span class="na">with</span> <span class="o">{</span>
            <span class="n">publishers</span> <span class="o">{</span>
                <span class="n">wsCleanup</span><span class="o">()</span>
                <span class="n">extendedEmail</span><span class="o">(</span><span class="s1">&#39;email@address.com&#39;</span><span class="o">,</span> <span class="s1">&#39;$DEFAULT_SUBJECT&#39;</span><span class="o">,</span> <span class="s1">&#39;$DEFAULT_CONTENT&#39;</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">configure</span> <span class="o">{</span> <span class="n">node</span> <span class="o">-&gt;</span>
                        <span class="n">node</span> <span class="s">/ presendScript &lt;&lt; emailScript
</span><span class="s">                        node /</span> <span class="n">replyTo</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;$DEFAULT_REPLYTO&#39;</span>
                        <span class="n">node</span> <span class="o">/</span> <span class="n">contentType</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;default&#39;</span>
                    <span class="o">}</span>
                    <span class="n">trigger</span><span class="o">(</span><span class="nl">triggerName:</span> <span class="s1">&#39;StillUnstable&#39;</span><span class="o">,</span> <span class="nl">subject:</span> <span class="s1">&#39;$DEFAULT_SUBJECT&#39;</span><span class="o">,</span> <span class="nl">body:</span> <span class="s1">&#39;$DEFAULT_CONTENT&#39;</span><span class="o">,</span> <span class="nl">replyTo:</span> <span class="s1">&#39;$DEFAULT_REPLYTO&#39;</span><span class="o">,</span> <span class="nl">sendToDevelopers:</span> <span class="kc">true</span><span class="o">,</span> <span class="nl">sendToRecipientList:</span> <span class="kc">true</span><span class="o">)</span>
                    <span class="n">trigger</span><span class="o">(</span><span class="nl">triggerName:</span> <span class="s1">&#39;Fixed&#39;</span><span class="o">,</span> <span class="nl">subject:</span> <span class="s1">&#39;$DEFAULT_SUBJECT&#39;</span><span class="o">,</span> <span class="nl">body:</span> <span class="s1">&#39;$DEFAULT_CONTENT&#39;</span><span class="o">,</span> <span class="nl">replyTo:</span> <span class="s1">&#39;$DEFAULT_REPLYTO&#39;</span><span class="o">,</span> <span class="nl">sendToDevelopers:</span> <span class="kc">true</span><span class="o">,</span> <span class="nl">sendToRecipientList:</span> <span class="kc">true</span><span class="o">)</span>
                    <span class="n">trigger</span><span class="o">(</span><span class="nl">triggerName:</span> <span class="s1">&#39;Failure&#39;</span><span class="o">,</span> <span class="nl">subject:</span> <span class="s1">&#39;$DEFAULT_SUBJECT&#39;</span><span class="o">,</span> <span class="nl">body:</span> <span class="s1">&#39;$DEFAULT_CONTENT&#39;</span><span class="o">,</span> <span class="nl">replyTo:</span> <span class="s1">&#39;$DEFAULT_REPLYTO&#39;</span><span class="o">,</span> <span class="nl">sendToDevelopers:</span> <span class="kc">true</span><span class="o">,</span> <span class="nl">sendToRecipientList:</span> <span class="kc">true</span><span class="o">)</span>
                <span class="o">}</span>

            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The function addEmailTemplate gets two parameters. A job, which is an implementation of a Job, and a dslFactory which is a DslFactory. That factory is an interface which defines our readFileFromWorkspace. Where do we get the implementation from then? That will be from the Job. Let&rsquo;s alter our job to apply this Groovy script.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy">
<span class="kn">import</span> <span class="nn">utilities.JobCommonTemplate</span>

<span class="kt">def</span> <span class="n">myJob</span> <span class="o">=</span> <span class="n">job</span><span class="o">(</span><span class="s1">&#39;MyTestJob&#39;</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">description</span> <span class="s1">&#39;&lt;strong&gt;GENERATED - do not modify&lt;/strong&gt;&#39;</span>
    <span class="n">label</span><span class="o">(</span><span class="s1">&#39;machine_label&#39;</span><span class="o">)</span>
    <span class="n">logRotator</span><span class="o">(</span><span class="mi">30</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span>
    <span class="n">parameters</span> <span class="o">{</span>
        <span class="n">stringParam</span><span class="o">(</span><span class="s1">&#39;somestringparam&#39;</span><span class="o">,</span> <span class="s1">&#39;default_valye&#39;</span><span class="o">,</span> <span class="s1">&#39;Description&#39;</span><span class="o">)</span>
    <span class="o">}</span>
    <span class="n">wrappers</span> <span class="o">{</span>
        <span class="n">timeout</span> <span class="o">{</span>
            <span class="n">noActivity</span><span class="o">(</span><span class="mi">600</span><span class="o">)</span>
            <span class="n">abortBuild</span><span class="o">()</span>
            <span class="n">failBuild</span><span class="o">()</span>
            <span class="n">writeDescription</span><span class="o">(</span><span class="s1">&#39;Build failed due to timeout after {0} minutes&#39;</span><span class="o">)</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="n">deliveryPipelineConfiguration</span><span class="o">(</span><span class="s2">&#34;Main&#34;</span><span class="o">,</span> <span class="s2">&#34;MyTestJob&#34;</span><span class="o">)</span>
    <span class="n">wrappers</span> <span class="o">{</span>
        <span class="n">preBuildCleanup</span> <span class="o">{</span>
            <span class="n">deleteDirectories</span><span class="o">()</span>
        <span class="o">}</span>
        <span class="n">timestamps</span><span class="o">()</span>
    <span class="o">}</span>
    <span class="n">triggers</span> <span class="o">{</span>
        <span class="n">cron</span><span class="o">(</span><span class="s1">&#39;H 12 * * 1,2&#39;</span><span class="o">)</span>
    <span class="o">}</span>
    <span class="n">steps</span> <span class="o">{</span>
        <span class="n">batchFile</span><span class="o">(</span><span class="n">readFileFromWorkspace</span><span class="o">(</span><span class="s1">&#39;relative/path/to/file&#39;</span><span class="o">))</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="n">JobCommonTemplate</span><span class="o">.</span><span class="na">addEmailTemplate</span><span class="o">(</span><span class="n">myJob</span><span class="o">,</span> <span class="k">this</span><span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><p>Notice three things here.</p>
<p>#1 =&gt; <strong>import</strong>. We import the script from utilities folder which we created and placed the script into it.</p>
<p>#2 =&gt; <strong>def myJob</strong>. We create a variable which will contain our job&rsquo;s description.</p>
<p>#3 =&gt; <strong>this</strong>. &lsquo;this&rsquo; will be the DslFactory. That&rsquo;s where we get our readFileFromWorkspace implementation.</p>
<p>And that&rsquo;s it. We have extracted a part of our job which is re-occurring and we found our implementation for our readFileFromWorkspace. DslFactory has most of the things which you need in a job description, would you want to expand on this and extract other bits and pieces.</p>
<p>Have fun, and happy coding!</p>
<p>As always,</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Why Lock Picking is like Testing</title>
      <link>https://skarlso.github.io/2015/02/08/why-lock-picking-is-like-testing/</link>
      <pubDate>Sun, 08 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/02/08/why-lock-picking-is-like-testing/</guid>
      <description><![CDATA[<p> </p>
<p>Not a great many people know that I&rsquo;m actually into Lock Picking as a hobby. This will not be a tutorial on how to do it, or I won&rsquo;t really talk about how I do it; I would like to write about something completely different. So if you came here for that, here are a few very good resources:</p>
<p><a href="http://www.lockpicking101.com/%20" target="_blank"><a href="http://www.lockpicking101.com/">http://www.lockpicking101.com/</a> </a>- Tutorials</p>
<p><a href="http://www.ukbumpkeys.com/collections/lock-picking" target="_blank"><a href="http://www.ukbumpkeys.com/collections/lock-picking">http://www.ukbumpkeys.com/collections/lock-picking</a></a> - Tools ( UK )</p>
<p><a href="http://www.reddit.com/r/lockpicking/" target="_blank"><a href="http://www.reddit.com/r/lockpicking/">http://www.reddit.com/r/lockpicking/</a></a> - Reddit</p>
<p>For my post, click on.</p>
<p>So, why is lock picking like testing? I saw a great many posts which where trying to compare software testing to some activity. I even knew somebody who compared it to dancing. Because.? I don&rsquo;t know, maybe he was trying out a talk material maybe? And he said - &ldquo;I was in this club and watched a couple dance, and I was thinking, wow, this is like software testing.&rdquo; - I couldn&rsquo;t really react to that. But hey, kudos for out of the box thinking I guess.</p>
<p>But let&rsquo;s see some of the similarities in picking and testing:</p>
<h4 id="thinking">Thinking</h4>
<p>It requires logical, critical thinking. It&rsquo;s a puzzle that you have to solve. A puzzle which you basically solve by testing out solutions and see if they work. You can achieve this by trial and error, something testers face on a daily basis. After awhile you acquire something called finesse. Which will help you identify breaking points more easily. Since you have experience with a certain lock type, you already have a wast knowledge to rely on when you are trying to solve a new lock with the same build. You did your research you know its weaknesses hence you immediately have an attack vector on your hand.</p>
<h4 id="tools">Tools</h4>
<p>Lock picking has a wast number of tools. Each tool is design for a specific purpose. You can reuse tools but they are rarely a fit for other locks. Unless it&rsquo;s a similar one. There are delicate tools and then there are brute force tools, which are very hard to use at first but after you get used to it and know how to handle it, it becomes massively helpful. You can build your own tools or use tools that are built for you by tool experts.</p>
<h4 id="solving-process">Solving Process</h4>
<p>When can you test an application to its fullest extend and capabilities? How can you achieve the most and best testing ever possible? You have to know how the application works. You have to know its components, its abilities, its capabilities and **limits. **For Lock Picking to be the best at what you do and to be able to move to a completely new lock and try to pick it, you have to know its flaws. You have to know when, and how it was built. You have to know what makes it tick, how it works, what it uses, how the inside mechanics look like in order to try to exploit them.</p>
<p>After you acquire this knowledge you will be able to build, or purchase a tool which will help you in solving the puzzle. But you were only able to do that because after you researched its manufacturing procedure you know that the last pin is hard to get to and that it has an anti drilling shield, so drilling is out of the question, and that it has a safety spring which locks the lock permanently upon tampering. If you would not be in the possession of this information you could have made a fatal error and could have made the client lost money ( since at that point they pretty much need to break down the door, unless the key is found again ( assuming the picking took place because the key was lost ) ).</p>
<h4 id="last-words">Last Words</h4>
<p>There you have it folks. That&rsquo;s why Lock Picking is like software testing. Knowing structure, inside workings and the proper tools will help to achieve your goal. Just like in testing when you know your field, you know what to use, when, and how. <strong>Knowledge</strong> makes you the Best.</p>
<p>Good luck,</p>
<p>Happy Picking,</p>
<p>Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>JavaScript Web Framework – Meteor</title>
      <link>https://skarlso.github.io/2015/01/29/javascript-web-framework-meteor/</link>
      <pubDate>Thu, 29 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/01/29/javascript-web-framework-meteor/</guid>
      <description><![CDATA[<p>Hi,</p>
<p>This time I would like to write about something that interests me. I wanted to try out a pure JavaScript web framework.</p>
<p>My choice is: <a href="https://www.meteor.com/" target="_blank">Meteor</a>. Looks interesting enough and it was recommended by a friend of mine. So, let&rsquo;s dive in.</p>
<h4 id="installation"><strong>Installation</strong></h4>
<p>As always, one starts with installation. The page tells us to follow this simple step:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">curl https://install.meteor.com/ | sh
</code></pre></td></tr></table>
</div>
</div><p>Easy enough, when you are on Linux. Turns out, that there is no official release yet for Windows. I&rsquo;m in luck then. After running the command though, I saw this popping up into my face:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">curl: (60) Peer certificate cannot be authenticated with known CA certificates
More details here: http://curl.haxx.se/docs/sslcerts.html
</code></pre></td></tr></table>
</div>
</div><p>There is always something. in that case a more accurate command to use would be the following:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">curl -k https://install.meteor.com/ | sh
</code></pre></td></tr></table>
</div>
</div><p>This will force an insecure download. You might not face this issue, but just in case you do, use this command instead.</p>
<p>Branching off here. For those of you whom the curl didn&rsquo;t work because you are sitting behind a proxy you can specify a -proxy  protocol//username:password@proxy:port after your curl. Of course if that doesn&rsquo;t work then the script won&rsquo;t work either.</p>
<p>So open the script in one of your favourite editors, for me it&rsquo;s Sublime text, and find this line: &ldquo;<em>Downloading Meteor distribution</em>&rdquo;. Lo, and behold; it uses curl. This is the only one in the script, so just edit it by adding in your -proxy setting as before and you should be right on track.</p>
<p>If that still gives you problems, try this:</p>
<p>Assuming that your browser is set up correctly with the proxy and just command line commands aren&rsquo;t working, you can go to this URL defined by the variable TARBALL_URL:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">TARBALL_URL=&#34;https://d3sqy0vbqsdhku.cloudfront.net/packages-bootstrap/${RELEASE}/meteor-bootstrap-${PLATFORM}.tar.gz&#34;
</code></pre></td></tr></table>
</div>
</div><p>Note that there are two variables in there. For me these are:</p>
<p>RELEASE: 1.0.3.1</p>
<p>PLATFORM: os.linux.x86_64</p>
<p>The full URL is:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">https://d3sqy0vbqsdhku.cloudfront.net/packages-bootstrap/1.0.3.1/meteor-bootstrap-os.linux.x86_64.tar.gz
</code></pre></td></tr></table>
</div>
</div><p>Download the latest tarball and delete the CURL AND TAR command on the following line. After that, you just have to extract the tarball and move the directory to ~/.meteor.</p>
<p>Now you can run your sh again and you should be on the road, for sure this time.</p>
<p>Just to make sure, these are the line which you need to comment out:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">
<span class="c1"># If you already have a tropohouse/warehouse, we do a clean install here:</span>
<span class="k">if</span> <span class="o">[</span> -e <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.meteor&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
<span class="nb">echo</span> <span class="s2">&#34;Removing your existing Meteor installation.&#34;</span>
rm -rf <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.meteor&#34;</span>
<span class="k">fi</span>

<span class="nv">TARBALL_URL</span><span class="o">=</span><span class="s2">&#34;https://d3sqy0vbqsdhku.cloudfront.net/packages-bootstrap/</span><span class="si">${</span><span class="nv">RELEASE</span><span class="si">}</span><span class="s2">/meteor-bootstrap-</span><span class="si">${</span><span class="nv">PLATFORM</span><span class="si">}</span><span class="s2">.tar.gz&#34;</span>

<span class="nv">INSTALL_TMPDIR</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.meteor-install-tmp&#34;</span>
rm -rf <span class="s2">&#34;</span><span class="nv">$INSTALL_TMPDIR</span><span class="s2">&#34;</span>
mkdir <span class="s2">&#34;</span><span class="nv">$INSTALL_TMPDIR</span><span class="s2">&#34;</span>
<span class="nb">echo</span> <span class="s2">&#34;Downloading Meteor distribution&#34;</span>
curl --proxy https://ggbrau:Daleks37@10.120.28.130:80--progress-bar --fail <span class="s2">&#34;</span><span class="nv">$TARBALL_URL</span><span class="s2">&#34;</span> <span class="p">|</span> tar -xzf - -C <span class="s2">&#34;</span><span class="nv">$INSTALL_TMPDIR</span><span class="s2">&#34;</span> -o
<span class="c1"># bomb out if it didn&#39;t work, eg no net</span>
<span class="nb">test</span> -x <span class="s2">&#34;</span><span class="si">${</span><span class="nv">INSTALL_TMPDIR</span><span class="si">}</span><span class="s2">/.meteor/meteor&#34;</span>
mv <span class="s2">&#34;</span><span class="si">${</span><span class="nv">INSTALL_TMPDIR</span><span class="si">}</span><span class="s2">/.meteor&#34;</span> <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">&#34;</span>
rm -rf <span class="s2">&#34;</span><span class="si">${</span><span class="nv">INSTALL_TMPDIR</span><span class="si">}</span><span class="s2">&#34;</span>
<span class="c1"># just double-checking :)</span>
<span class="nb">test</span> -x <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.meteor/meteor&#34;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="getting-started">Getting started</h4>
<p>After a nice installation process we can continue to the getting started phase.</p>
<p>So, the documentation tells us that we have to simply execute a command.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">meteor create simple-todos
</code></pre></td></tr></table>
</div>
</div><p>At this point we should get a directory structure which is written in the manual. And, behold, that&rsquo;s exactly what happened. As usually, creating a skeleton is easy. Lets run the app. For that, the command is:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">meteor
</code></pre></td></tr></table>
</div>
</div><p>I can do that, I think.</p>
<p>And sure enough, I&rsquo;ve got this little message, which I actually expected to see:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Can&#39;t listen on port 3000. Perhaps another Meteor is running?
</code></pre></td></tr></table>
</div>
</div><p>In this world, where there are tons of applications running on your dev environment at any given time, it&rsquo;s possible to have something already running on the port 3000. Luckily this is something that&rsquo;s anticipated by now, and we are presented with an option to add in a proxy setting of our choice with -port <port>.</p>
<p>After I did that, I&rsquo;ve got a nice confirm message that meteor is up and running. A quick check on the presented URL provided me with the confidence that my app is indeed reachable.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">App running at: http://localhost:9999/
</code></pre></td></tr></table>
</div>
</div><h4 id="after-getting-started">After Getting Started.</h4>
<p>Now that we know that it&rsquo;s up and running we can continue with the tutorial. Up comes next a simple Todo list application with Templates. It&rsquo;s telling us to replace the code in the default starter app. At this point I&rsquo;m wondering if it can hotswap. It should, since javascript and HTML is dynamic so there should be no problems there, right?</p>
<p>And sure enough, the moment I replaced the code and checked on my server status, I could see this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Client modified -- refreshing
Meteor server restarted
</code></pre></td></tr></table>
</div>
</div><p>With a brief flash of &ldquo;Rebuilding.&rdquo;. So it does sort of work. It did, however, restart the server it just did it without your manual intervention. Which is nice, but on a larger scale application it might prove to be a tad bit annoying. For example, I add another item to the list, and suddenly, the server is restarted.</p>
<p>Since, I am a tester, let&rsquo;s see how it handles some problems.</p>
<p>I modified the JavaScript so that it has a syntax error.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript">
<span class="c1">// simple-todos.js
</span><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="nx">Meteor</span><span class="p">.</span><span class="nx">isClient</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// This code only runs on the client
</span><span class="c1"></span>  <span class="nx">Template</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">helpers</span><span class="p">({</span>
    <span class="nx">tasks</span><span class="o">:</span> <span class="p">[</span>
      <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&#34;This is task 1&#34;</span> <span class="p">},</span>
      <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&#34;This is task 2&#34;</span> <span class="p">},</span>
      <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&#34;This is task 3&#34;</span> <span class="p">}</span>
      <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&#34;This is task 4&#34;</span> <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Note the missing &ldquo;,&rdquo;. And, nicely enough I&rsquo;m getting an error message telling me that I messed something up:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Errors prevented startup:

While building the application:
my_cool_app.js:10:7: Unexpected token {

Your application has errors. Waiting for file change.
</code></pre></td></tr></table>
</div>
</div><p>It even tells you where the error is and it&rsquo;s waiting for you to fix it. After I&rsquo;ve corrected my error it compiled fine and the application is up and running. Deleting the files did little difference as did corrupting the HTML pages or the CSS file. Nothing to see here, moving on.</p>
<h4 id="android-device">Android Device</h4>
<p>I&rsquo;m sure everybody can read a manual and continue with collections, forms, events and such. What I&rsquo;m more interested in is that Meteor promises it can run on Android devices. Now that perked my curiosity. With the rise of mobile devices, the desktop platform is slowly pushed back into a dark corner where even a <a href="http://mistborn.wikia.com/wiki/Tineye" target="_blank">Tineye </a>would have problems seeing it.</p>
<p>Hence, I want to see how easy it really is.</p>
<p>Meteor gives you a set of commands to install the android sdk and droid support for your application, which is nice. You just need to run this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">
meteor install-sdk android
meteor add-platform android # Perform this step in the app&#39;s folder and agree to terms and conditions.
</code></pre></td></tr></table>
</div>
</div><p>Now, if you are like me, someone who has experience with the android SDK and its emulator, you&rsquo;ll know that running that thing requires more time and processing power than simulating the chances of Leonardo DiCaprio winning an Oscar. I&rsquo;ll use a real device instead. For that, it appears I only have to run a simple command again.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">meteor run android-device
</code></pre></td></tr></table>
</div>
</div><p>And sure enough the app appeared on my device.</p>
<p>This is actually quite awesome. I only plugged in my device, enabled developer options and USB debugging and that&rsquo;s it. I&rsquo;m quite impressed so far with Meteor and the Power of JavaScript. The app is on my phone and the static JavaScript parts are still working even though I shut the server down.</p>
<p>So my next burning question is. Will it Blend? I mean, Perform?</p>
<h4 id="benchmarking">Benchmarking</h4>
<p>So, now that I know that using, installing and getting started is pretty simple, what I also would like to know is how well it performs.</p>
<p>I have a quad core i7 16GB RAM Samsung SSD running Linux. Let&rsquo;s see 100 threads 10 second interval 10 times loop for a start. Look at how gorgeous this is.</p>
<p>40ms on average. Now let&rsquo;s crank it up and I&rsquo;m performing the test on a separate machine but still on the same network. 1000 threads.</p>
<p>This time I&rsquo;ve got a bit more churn and my pc started to fan like there is no tomorrow. But the server stayed stable. Latency did not waver for a bit. Next, 10.000 for as long as my machine can handle it.. Better save my work. Hah, my JMeter died. But it clocked at an average of 1000ms response time and the server stayed absolutely stable with no package lost, or errors.</p>
<h4 id="conclusion">Conclusion</h4>
<p>I can say with a full heart that I&rsquo;m impressed by Meteor and I very much like it. It&rsquo;s easy to use, even more easy to install and definitely can handle itself given that it&rsquo;s rather lightweight. The hot swapping / server re-starting can&rsquo;t be avoided, but that&rsquo;s only a minor inconvenience and we got used to that already.</p>
<p>I recommend Meteor and I&rsquo;ll be playing around with it a bit more for sure.</p>
<p>Thanks for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>The seven Principles of Context Driven Testing – Mind Map</title>
      <link>https://skarlso.github.io/2014/10/23/the-seven-guidelines-of-context-driven-testing/</link>
      <pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/10/23/the-seven-guidelines-of-context-driven-testing/</guid>
      <description><![CDATA[<p>Hi Folks!</p>
<p>I just wanted to share with you my mind map on the seven principles of Context Driven Testing.</p>
<p>I used the notion of dragons since it&rsquo;s seven. And a dragon is usually seven headed in my mind.</p>
<p>So without further ado.</p>
<p>Click for larger image.</p>
<p>I have a hand drawn as well but I&rsquo;m guessing that one wouldn&rsquo;t be of much use since it follows my own imagination.</p>
<p>Here are the seven principles in points which correspond to the leafs.</p>
<ol>
<li>Value -&gt; Practice -&gt; Depends -&gt; Context =&gt; The value of any practice depends on its context.</li>
<li>People -&gt; Working -&gt; Together -&gt; Important =&gt; People, working together, are the most important part of any project’s context. ( The mob, trying to kill the dragon by working together. )</li>
<li>Problem -&gt; Project -&gt; Solution =&gt; The product is a solution. If the problem isn’t solved, the product doesn’t work. ( The sword. It&rsquo;s a sword but if it doesn&rsquo;t kill the Dragon it&rsquo;s useless. )</li>
<li>Good Testing -&gt; Intellectual Challenge =&gt; Good software testing is a challenging intellectual process. ( Well it&rsquo;s a dragon with glasses. That&rsquo;s something you rarely see. )</li>
<li>Good Practice | Bad Practice -&gt; In Context -&gt; No Best Practices =&gt; There are good practices in context, but there are no best practices. ( This one was a little bit tricky. But basically you want to solve the dungeon and not plow through it )</li>
<li>Uncertainty =&gt; <span style="font-size: 14px; line-height: 1.8em;">Projects unfold over time in ways that are often not predictable. ( For me this one word was enough. )</span></li>
<li>Exercised By All In Time -&gt; Judgement | Skill | Cooperatively =&gt; Only through judgment and skill, exercised cooperatively throughout the entire project, are we able to do the right things at the right times to effectively test our products. ( It&rsquo;s a flexing dragon. Easy, right? )</li>
</ol>
<p>So this map helped me to remember everything. The descriptions, applications that are further described I remembered by using this mind map as a <a href="http://en.wikipedia.org/wiki/Method_of_loci" target="_blank">loci</a>.</p>
<p>I hope somebody found this useful.</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Using Chrome Search Engine – Multiple Search Params</title>
      <link>https://skarlso.github.io/2014/05/18/using-chrome-search-engine-multiple-search-params/</link>
      <pubDate>Sun, 18 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/05/18/using-chrome-search-engine-multiple-search-params/</guid>
      <description><![CDATA[<p>Hello Everybody.</p>
<p>Today I would like to write a few words about Chrome&rsquo;s Search Engines.</p>
<p>You&rsquo;re probably already using it for a couple of things, like Google, or Amazon searches or YouTube or anything like that. But are you using it to access environments and testing tools faster, with queries?</p>
<p>For example, here is a quick Jira Search made easy:</p>
<p>Keyword: jira</p>
<p>URL: <a href="https://atlas.projectname.com/jira/browse/PROJECT-%25s">https://atlas.projectname.com/jira/browse/PROJECT-%s</a></p>
<p>So just type: jira|space|9999</p>
<p>Will immediately bring you to your ticket.</p>
<p>&ldquo;Bah, why would I want that?&rdquo; - you ask.</p>
<p>Well, it&rsquo;s easy, and quick access, but wait. There is more. How about you want to access a test environment that changes only a number?</p>
<p>Keyword: testenv</p>
<p>URL: <a href="https://qa%25s.projectname.com/testenv">https://qa%s.projectname.com/testenv</a></p>
<p>Just type: testenv|space|14</p>
<p>&ldquo;Humbug!&rdquo; - you might say. &ldquo;What if I have a different URL for an admin site and my main web site AND the number, hmmm? Also I have that stuff bookmarked anyways.&rdquo; - you might add in.</p>
<p>Well, don&rsquo;t fret. By default, Chrome, does not provide this. I know FF does, but I don&rsquo;t like FF. That&rsquo;s that. So I have to make due with what I have. And indeed there is a solution for using multiple search parameters. It&rsquo;s is a JavaScript you can add in into the URL part and Chrome will interpret that. You can find that JavaScript in a few posts but you will find that THAT script is actually Wrong. Here is the <strong>fixed</strong> Script, courtesy of yours truly:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="s1">&#39;%s&#39;</span><span class="p">;</span>
<span class="nx">url</span><span class="o">=</span><span class="s1">&#39;https://%s.test%s.projectname.com/&#39;</span><span class="p">;</span>
<span class="nx">query</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">;</span>
<span class="nx">urlchunks</span><span class="o">=</span><span class="nx">url</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;%s&#39;</span><span class="p">);</span>
<span class="nx">schunks</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;;&#39;</span><span class="p">);</span>
<span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="p">;</span> <span class="nx">i</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">urlchunks</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">query</span><span class="o">+=</span><span class="nx">urlchunks</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
	<span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">schunks</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">query</span><span class="o">+=</span><span class="nx">schunks</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="nx">location</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">query</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>So no you will have an entry like this:</p>
<p>Keyword: testenv</p>
<p>URL: paste in the upper script</p>
<p>And try. testenv|space|admin;14 =&gt; which should result in: <a href="https://admin.test14.projectname.com/">https://admin.test14.projectname.com/</a></p>
<p>The location.replace at the end will bring you to the web page. It&rsquo;s interesting to note the s will be replaced by admin;14 which is a nice magic by JavaScript.</p>
<p><strong>NOTE</strong>: This only works on a page like google.co.uk. For chrome pages, like the new tab, omnibox has this ability disabled unfortunately.</p>
<p>&ldquo;Well then it&rsquo;s completely useless, isn&rsquo;t it?&rdquo; - you might say. Well, it&rsquo;s usage is limited in power, that&rsquo;s true. But it&rsquo;s still useful as I&rsquo;m sure you have a couple of pages open anyways which you don&rsquo;t mind using up.? And you have to remember less keywords only a few powerful ones.</p>
<p>Credit for telling about Chrome Search Engines power in the first place goes to. *drumrolls* =&gt; <a href="http://www.testfeed.co.uk/" target="_blank"><a href="http://www.testfeed.co.uk/">http://www.testfeed.co.uk/</a></a></p>
<p>Anyhow.</p>
<p>As always, thanks for reading.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How to write a blog – Why long posts rarely work</title>
      <link>https://skarlso.github.io/2014/02/13/how-to-write-a-blog-why-long-posts-rarely-work/</link>
      <pubDate>Thu, 13 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/02/13/how-to-write-a-blog-why-long-posts-rarely-work/</guid>
      <description><![CDATA[<p>Hello.</p>
<p>So let&rsquo;s clarify this. They rarely or ever work if you are a beginner blogger. If you have a reputation it will probably work or people will use it as a reference. But I&rsquo;m skipping ahead.</p>
<p><strong>Beginnings</strong></p>
<p>When you are a beginner blog writer you want to get out as much content as possible. Write mostly relevant things and interesting information because you need to establish a name for yourself. To get that starting you want to be as interesting as possible and make people leave with the intent to come back for more.</p>
<p>After you&rsquo;ve established a name for yourself you can do larger, more coherent updates with more information in between the line because people know you and know what you write is worth reading. Also you have to bear in mind that longer posts are rarely read to the fullest. They are skimmed and then if it is good it will be used as reference material or a post to point to. Also people rarely have a lot of time on their hand to read a long post, several smaller chunks can be digested more easily!</p>
<p><strong>Updating frequency</strong></p>
<p>In the age of modern information overload it is hard to be relevant and interesting and keep people to come back to you. Apart from what you are writing about, which is up to you, you have to schedule your updates to a certain frequency. You don&rsquo;t want people to wait for to long but you don&rsquo;t want to get them flooded either. Since people do read a lot of blogs they will choose carefully what to read and what to discard. And you might just end up on the discarded list if you already had a post at that moment.</p>
<p>I&rsquo;m suggesting that you write you post what you would like to write at that moment and then use a scheduler to post it in certain frequencies. Maybe once or twice weekly is good enough. You need to experiment it out.</p>
<p><strong>Write, write, write</strong></p>
<p>The way to success is pawed with writing. You want to be visible and you want to keep people engaged with you. That means that you have to come up with content.</p>
<p>With a technical blog that&rsquo;s a little bit difficult from time to time since so many people already might have solved your problem of which you are trying to write about. That&rsquo;s okay. It doesn&rsquo;t have to be a technical blog where you write about new ideas every day. It doesn&rsquo;t have to be a troubleshoot blog about how to solve a particular problem.</p>
<p>It doesn&rsquo;t have to be about showing some people how to write this and that in a completely new environment.</p>
<p><strong>So about what then?</strong></p>
<p>Guess what? It&rsquo;s up to you!!! If you wrote a script you like and are fond if, post it. If you created an interesting configuration, post it. If you wrote a line of code you find interesting, post it. You&rsquo;ve read a blog post about something and have an opinion about it, post it. Is it scientific, some discovery, some idea, some random thought, post it! You wrote a particularly ugly script you never ever want to see, POST IT!!</p>
<p>Your blog doesn&rsquo;t need to be a portfolio of how awesome you are. You are allowed to be human. You are allowed to post some very boring or trivial stuff you came across but YOU find it interesting! You don&rsquo;t need to be new every day in every post.</p>
<p>So my suggestion is, write, write, write. As often as you like, schedule it and post it in a timely manner. Be responsive if people write you a comment always answer. Nobody likes an anonymous somebody who writes then disappears. People like bloggers who engage them and give a damn about their opinion as well.</p>
<p>Always be yourself. The blog is for you too so retain what ever you want to retain and read back later maybe to learn from it. And of course writing it down makes you remember it better.</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How to check content header on unknown number of items – Python</title>
      <link>https://skarlso.github.io/2014/02/11/how-to-check-content-header-on-unknown-number-of-items-python/</link>
      <pubDate>Tue, 11 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/02/11/how-to-check-content-header-on-unknown-number-of-items-python/</guid>
      <description><![CDATA[<p>Hello guys.</p>
<p>I&rsquo;d like to share a little something with you. It&rsquo;s what I cooked up in Python to check an unknown number of content items in a web application.</p>
<p>Basically the script runs from a script folder under Grails. It goes through all the configured folders where there is static content like images, javascript, css and so on and so forth.</p>
<p>And then with curl it calls these items up in using their respective paths'. This works best on localhost if you have your local environment configured to access these elements because in some places direct access is restricted.</p>
<p>This script only check static content. Dynamically generated content would have to be hard coded to check.</p>
<p>It only generated a file currently with ERROR on a not match an success on match and not found if it encounters an item which it doesn&rsquo;t know about.</p>
<p>So without further ado. The Script:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="ch">#!/usr/bin/python</span>

<span class="kn">import</span> <span class="nn">pycurl</span><span class="o">,</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">urllib</span>

<span class="k">class</span> <span class="nc">Storage</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">contents</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>

    <span class="k">def</span> <span class="nf">store</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">buf</span><span class="p">):</span>
	<span class="k">if</span> <span class="s1">&#39;Content-Type&#39;</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">contents</span> <span class="o">=</span> <span class="n">buf</span>

    <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">contents</span>

<span class="c1">#print retrieved_headers</span>

<span class="n">filesInDir</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">headers</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">headerRestrictions</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;.css&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: text/css&#39;</span><span class="p">,</span> <span class="s1">&#39;.jpg&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: image/jpeg&#39;</span><span class="p">,</span> <span class="s1">&#39;.ico&#39;</span><span class="p">:</span> <span class="s1">&#39;image/vnd.microsoft.icon&#39;</span><span class="p">,</span> <span class="s1">&#39;.html&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: text/html&#39;</span><span class="p">,</span> <span class="s1">&#39;.js&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: application/javascript&#39;</span><span class="p">,</span> <span class="s1">&#39;.gif&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: image/gif&#39;</span><span class="p">,</span> <span class="s1">&#39;.png&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: image/png&#39;</span><span class="p">,</span> <span class="s1">&#39;.swf&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: application/x-shockwave-flash&#39;</span><span class="p">,</span> <span class="s1">&#39;.json&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: application/json&#39;</span><span class="p">,</span> <span class="s1">&#39;.htc&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: text/x-component&#39;</span><span class="p">,</span> <span class="s1">&#39;.xml&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: application/xml&#39;</span><span class="p">}</span>

<span class="k">for</span> <span class="n">dirname</span><span class="p">,</span> <span class="n">dirnames</span><span class="p">,</span> <span class="n">filenames</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="s1">&#39;../web-app&#39;</span><span class="p">):</span>
    <span class="c1"># editing the &#39;dirnames&#39; list will stop os.walk() from recursing into there.</span>
    <span class="k">if</span> <span class="s1">&#39;.git&#39;</span> <span class="ow">in</span> <span class="n">dirnames</span><span class="p">:</span>
        <span class="c1"># don&#39;t go into any .git directories.</span>
        <span class="n">dirnames</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;.git&#39;</span><span class="p">)</span>

    <span class="k">if</span> <span class="s1">&#39;WEB-INF&#39;</span> <span class="ow">in</span> <span class="n">dirnames</span><span class="p">:</span>
        <span class="c1"># don&#39;t go into any WEB-INF directories.</span>
        <span class="n">dirnames</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;WEB-INF&#39;</span><span class="p">)</span>

    <span class="k">if</span> <span class="s1">&#39;test&#39;</span> <span class="ow">in</span> <span class="n">dirnames</span><span class="p">:</span>
        <span class="c1"># don&#39;t go into any test directories.</span>
        <span class="n">dirnames</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">)</span>

    <span class="k">if</span> <span class="s1">&#39;META-INF&#39;</span> <span class="ow">in</span> <span class="n">dirnames</span><span class="p">:</span>
        <span class="c1"># don&#39;t go into any META-INF directories.</span>
        <span class="n">dirnames</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;META-INF&#39;</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">filenames</span><span class="p">:</span>
	<span class="n">trimmedDir</span> <span class="o">=</span> <span class="n">dirname</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;web-app/&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
	<span class="n">trimmedDir</span> <span class="o">=</span> <span class="n">trimmedDir</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;../&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
	<span class="n">filesInDir</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">trimmedDir</span><span class="p">,</span> <span class="n">filename</span><span class="p">))</span>
    <span class="c1">#    print os.path.join(dirname, filename)</span>

<span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;headersandfiles.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">fileName</span> <span class="ow">in</span> <span class="n">filesInDir</span><span class="p">:</span>
    <span class="n">retrieved_body</span> <span class="o">=</span> <span class="n">Storage</span><span class="p">()</span>
    <span class="n">retrieved_headers</span> <span class="o">=</span> <span class="n">Storage</span><span class="p">()</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">pycurl</span><span class="o">.</span><span class="n">Curl</span><span class="p">()</span>
    <span class="n">fileName</span> <span class="o">=</span> <span class="n">fileName</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">,</span> <span class="s2">&#34;%20&#34;</span><span class="p">)</span>
    <span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;http://localhost:8080/</span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="n">fileName</span>
    <span class="n">c</span><span class="o">.</span><span class="n">setopt</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">URL</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
    <span class="n">c</span><span class="o">.</span><span class="n">setopt</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">WRITEFUNCTION</span><span class="p">,</span> <span class="n">retrieved_body</span><span class="o">.</span><span class="n">store</span><span class="p">)</span>
    <span class="n">c</span><span class="o">.</span><span class="n">setopt</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">HEADERFUNCTION</span><span class="p">,</span> <span class="n">retrieved_headers</span><span class="o">.</span><span class="n">store</span><span class="p">)</span>
    <span class="n">c</span><span class="o">.</span><span class="n">perform</span><span class="p">()</span>
    <span class="n">c</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
    <span class="n">fileLine</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
    <span class="n">fileNameBase</span><span class="p">,</span> <span class="n">fileExtension</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">splitext</span><span class="p">(</span><span class="n">fileName</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">headerRestrictions</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="n">fileExtension</span><span class="p">):</span>
<span class="c1">#	print &#34;Header:%s, Content:%s&#34; % (headerRestrictions[fileExtension], retrieved_headers.__str__())</span>
        <span class="n">fileLine</span> <span class="o">=</span> <span class="s2">&#34;CORRECT: Content: </span><span class="si">%s</span><span class="s2">; Header: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="n">retrieved_headers</span><span class="p">)</span> <span class="k">if</span> <span class="n">headerRestrictions</span><span class="p">[</span><span class="n">fileExtension</span><span class="p">]</span> <span class="o">==</span> <span class="n">retrieved_headers</span><span class="o">.</span><span class="fm">__str__</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="k">else</span> <span class="s2">&#34;ERROR: Content: </span><span class="si">%s</span><span class="s2">; Header: </span><span class="si">%s</span><span class="s2">; URL: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="n">retrieved_headers</span><span class="p">,</span> <span class="s2">&#34;http://localhost:8080/</span><span class="si">%s</span><span class="se">\n</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">fileName</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
	<span class="n">fileLine</span> <span class="o">=</span> <span class="s2">&#34;NOT FOUND: Content: </span><span class="si">%s</span><span class="s2">; Header: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="n">retrieved_headers</span><span class="p">)</span>

    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">fileLine</span><span class="p">)</span>
    <span class="n">headers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">retrieved_headers</span><span class="o">.</span><span class="fm">__str__</span><span class="p">())</span>

<span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>Hope you like it. Feel free to improve however you want.</p>
<p>Thanks for reading,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>The method of Loci and how it works for me</title>
      <link>https://skarlso.github.io/2014/02/11/the-method-of-loci-and-how-it-works-for-me/</link>
      <pubDate>Tue, 11 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/02/11/the-method-of-loci-and-how-it-works-for-me/</guid>
      <description><![CDATA[<p>Hello.</p>
<p>Today I would like to write about something very interesting to you folks.</p>
<p>It&rsquo;s a common remember / recall technique called the Method of loci. Otherwise known as the Memory Palace. A very popular usage can be seen in the episodes of Sherlock Holmes from BBC. He uses it often.</p>
<p><strong>What is the Method of loci?</strong></p>
<p>As the Wikipedia page write so properly.&ldquo;In basic terms, it is a method of memory enhancement which uses visualization to organize and recall information.&rdquo;</p>
<p>This says all.</p>
<p>So.</p>
<p><strong>How does it work?</strong></p>
<p>I don&rsquo;t want to go too much into details with this one since everybody can use Google I&rsquo;m assuming but just for my sanities sake I will repeat a very basic idea. You brain works with associations. It can remember something when it&rsquo;s linked to something you already know much much better. Also it can remember very easily places you&rsquo;ve been to or people you&rsquo;ve met. ( most of the time. ).</p>
<p>Very popular Roman Leaders where known to use this while they were giving speeches for hours out of memory. While they were speaking, mentally they were walking along a very well known and often used path where they linked key elements of their speeches to landmarks along the way.</p>
<p><strong>Enough. Show me concretes.</strong></p>
<p>So how do I make use of it you ask? I give you an example. In my flat there are two stairs. I use those stairs to initialize my Palace. I go up the two stairs to get myself into my Memory. Once I&rsquo;m in my Palace, which is my flat, I have a lot of holder items like drawer, desk, wall, painting, couch and many many more.</p>
<p>So for example to recall all of the 23 design patterns in order I use a mnemonic and my palace.</p>
<p>I have three drawers. I go up up. there is my drawer before me. I open the first and out comes the following sight.</p>
<p>Memento and Mediator are playing a game of Chess ( strategy ). There is a Visitor standing by who is Observing ( Observer ) the game. State is constantly recording the state of the game while Template is providing support and Iterator is counting rounds. Command is constantly yelling orders that they should hurry up because he has better things to do while wielding a huge broad sword ( Interpreter -&gt; for me this pattern was used in MUD games which were early RPGs ). The whole gang is held together by a Chain which is responsible for not letting things go out of hand.</p>
<p>I know this sounds very complicated. And the order? Where is that? That&rsquo;s the mnemonic: CCIIMMOSSTV. Easy, right?</p>
<p>So why this huge story around a few patterns? Because it&rsquo;s not just these. Then along comes ABCDFFP which is Adapter, Bridge, Composite, Decorator, Facade, Flyweight and Proxy and the rest BFFPS which is Builder, Factory, Abstract Factory, Prototype and Singleton.</p>
<p>I have stories around those as well. This makes it easy to remember them.</p>
<p>For small amount of things it would be an overkill yes. But for many things it makes it EASY!</p>
<p>You already remembered my Chess play story. 😉</p>
<p><strong>But how do you remember a complex story?</strong></p>
<p>Recall. You don&rsquo;t just put stuff in there and then move on. I have a routine. Every day when I go to bed before I fall asleep I walk around in my Palace. I look at things, recall them strengthen the memory a bit here and there. And after an Item has been retained in my long term memory strong enough, I can recall it fewer and fewer times. So I don&rsquo;t have to walk in the whole palace every time. Only parts.</p>
<p><strong>FAQ</strong></p>
<p>**Q:**But isn&rsquo;t this too slow to recall something?</p>
<p>**A:**This is only a tool to retain information more easily. Of course if you want to recall something at a moments notice, you won&rsquo;t have the time to go into your palace and search around. But after a while it will strengthen and will be more and more easier to recall information faster and faster. And you rarely get into a position where you need to recall something in a second.</p>
<p>**Q:**This seems like a major overhead to learn something.</p>
<p>**A:**For small amount of information I suggest using a mnemonic or flash cards rather then a palace.</p>
<p>**Q:**What if I run out of space?</p>
<p>**A:**You can create as many locations as you like. Use your current home and homes in your past which you knew very well. You could create a lane with houses after each other. Or create a fictional palace like Hogwarts based on some real places to retain them better. And draw a sketch of of it to be able to visualize it better.</p>
<p>**Q:**What if I forget where I put things?</p>
<p>**A:**Recall recall recall is the name of the game. In order to stabilize the vision of your palace you need to practice walking around in it. Remembering each and every small room. With practice it will get better and better and every information will be stored much easier.</p>
<p>**Q:**How do you put thing into it? Can I just put in a number and I will remember it forever?</p>
<p>**A:**Short answer: no. Long answer: You don&rsquo;t just imagine a place and then put a whole bunch of words into a pocket somewhere and expect it to be recalled better. You need to combine the Loci with mnemonics and imagination and sounds and smells stories images. The more powerful the image in a place the better the recall. As you saw with the design patterns I didn&rsquo;t just put a bunch of names into a box and then remembered it. I created a story around them and a mnemonic. The combination is the key.</p>
<p>**Q:**Are you physically walking your house or in your mind?</p>
<p>**A:**In my mind. Once I learned something and created my story and found the appropriate image or smell or sound I&rsquo;d like to use I close my eyes and go into my palace in my mind. Then I start to place things where I think they will be in a good place. This can be any number of things. It&rsquo;s up to you.</p>
<p>So that&rsquo;s all folks. Hope you enjoyed it. Please feel free to try it out and experiment I assure you you won&rsquo;t be disappointed.</p>
<p>As always,</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Why you should learn using Vim</title>
      <link>https://skarlso.github.io/2014/02/10/why-you-should-learn-using-vim/</link>
      <pubDate>Mon, 10 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/02/10/why-you-should-learn-using-vim/</guid>
      <description><![CDATA[<p>Hello,</p>
<p>So Vim is a very powerful editing tool and has lots and lots of potential in regarding plug-ins.</p>
<p>It has years and years of gathered knowledge and extensions and can virtually do anything you want. But that&rsquo;s not even it&rsquo;s final form.</p>
<p>The real power of Vim lies in navigation and manipulation. The ability to navigate and edit without the use of arrow keys or mouse chops of a large portion of your time which you didn&rsquo;t even realize you are wasting until you try it without it.</p>
<p>The one thing people are seem to miss regarding this editor is that you are not supposed to stay in <strong>Edit</strong> mode all the time. You are supposed to be in <strong>Control</strong> mode most of times and enter in to <strong>Edit</strong> for sort bursts. And one more thing is that commands are supposed to be used together. For example deleting a word is very easy and can be achieved in multiple ways. The easiest is combining Delete + Go to the end of a word like this: &ldquo;de&rdquo;. So once you are in Control mode you navigate to a word and press d + e. d =&gt; Delete a word until new cursor and e =&gt; go to the end of the word. Hence &ldquo;de&rdquo; will delete a whole word. Awesome.</p>
<p>Handling text is easy as goblin pie and there lots and lots of tutorials and blogs on the web which tell you in detail how to do that so I&rsquo;m not going to go do that. It does take some time to get used to it because you are wired to handle the mouse and use the arrow keys. But once you start using h j k l and x X and w and $ ^ you realize you don&rsquo;t need the mouse or the arrow keys to get around.</p>
<p>And it&rsquo;s much faster since your hand is already there. And suddenly you are using <a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en" title="Vimium" target="_blank">Vimium</a> the Vim extension for Chrome and you find yourself saying. &ldquo;Where were you all my life?&rdquo;.</p>
<p>Vim has a mirriad of plugins ready to be used most popular being <a href="https://github.com/scrooloose/nerdtree" title="Nerdtree" target="_blank">NerdTree</a>, <a href="https://github.com/gmarik/Vundle.vim" title="Vundle" target="_blank">Vundle</a> and <a href="https://github.com/scrooloose/syntastic" title="Syntastic" target="_blank">Syntastic</a> for compile errors. And it has a large community to back it up and people who will eagerly help you on your way and pass on tips to understand the logic behind it and the phylosophy.</p>
<p>So all in all it&rsquo;s a powerful editing tool and a neat friend along the way and completely free of any charge or license. It can be used for <strong>anything</strong> you want including macros and key phrase replacements where you type two characters which will be replaced with something that you use commonly like public static void main.</p>
<p>I hope this got you a watery mouth towards trying. The only thing I can say is to not give up after 20 minutes you will get a feel for it and you will fall in love with it immediately.</p>
<p>As always,</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Low Tech – Why having less will fell more</title>
      <link>https://skarlso.github.io/2013/08/26/low-tech-why-having-less-will-fell-more/</link>
      <pubDate>Mon, 26 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/08/26/low-tech-why-having-less-will-fell-more/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>I&rsquo;d like to share today something with all of you. I&rsquo;ve been thinking about how technology affected my life in the long run. And how I perceive the world today around me. So let&rsquo;s go around this topic for a little bit shall we?</p>
<p><strong>The Past</strong></p>
<p>So as somebody who lived for a while without technology coming near family for a decade or so I have a little bit of past in me without smart phones, gadgets, tv or computers for that matter. Much times needed to pass as my family slowly got the money to gather to buy us our new part of the family the ZX Spectrum.</p>
<p>What a wonderful piece of technology that was back then. But before that our two main technological equipments were a bakelite disc player and the TV. Both of which we couldn&rsquo;t get enough. I sat before the tv for a long time and listened to music and stories from the bakelite discs dozens of times until the disc wore down. I learned English and German from the TV.</p>
<p><strong>Present</strong></p>
<p>So time goes by I grew older I&rsquo;ve got a better PC technological advances are made and so on and so forth. 20 years have past. 20 years. ONLY 20 years. And we are at the age of digital communication, nanotechnology, a mapped DNA and a found Boson Particle. I&rsquo;d say we achieved quite a lot. But I also say that we should never forget where we came from. Why you ask? Because knowing your past let&rsquo;s predict your future better and makes you appreciate your present even more.</p>
<p>So what do I want to say with this philosophical mumbo jumbo?</p>
<p><strong>The Future</strong></p>
<p>I want to say that in order to enjoy your present you have to think of your future while considering your past.</p>
<p>In my past I enjoyed being alone a little bit. It gave me time to think to brainstorm to be with my thoughts while I was playing or just reading a book or just watching a candle flicker in the dark. It was satisfying. It was relaxing. Or when I was faced with a problem I couldn&rsquo;t solve it was good to step back. Or I was just looking out of my head on the toilet.</p>
<p>Now, for me technology ruined that. I&rsquo;m taking my phone virtually everywhere with me. I read emails, web pages, news and shit on the toilet, while eating, why brushing my teeth before sleeping after sleeping while sleeping?! I abandoned my brain. I no longer have moments to myself. No longer reflect. No longer take the time to think.</p>
<p><strong>Solution</strong></p>
<p>Simple set of rules. No phone on the toilet, while eating, while brushing teeth, while standing in the line, waiting or on meetings. Kindle / Book is allowed. Tablet isn&rsquo;t.</p>
<p>For me this works. For me in order to appreciate technology more I have to use it less. Works for you? Don&rsquo;t know. You should try it out. Think back. What has technology changed for you? I&rsquo;m sure there are plenty of very good gains and things. I&rsquo;m not saying you should give that up. I&rsquo;m saying think of what you might have lost?! Maybe you don&rsquo;t even recognize you lost something. Maybe you are fine like that.</p>
<p>But do you feel anxious sometimes? Do you feel bored? Do you feel like something is missing? Do you reply to an email with a second? Do you check your facebook/twitter/whatever while a friend is TALKING TO YOU? Then maybe it&rsquo;s time for you to step back. And relax. And take it slow. and low.</p>
<p><strong>Inspiration</strong></p>
<p>So I took this inspiration from a couple of sources and I thank them for opening my eyes a little that I went to far from course.</p>
<p>Link 1: I forgot my phone for a day (I&rsquo;m sure you know this one already)</p>
<p><a href="http://www.youtube.com/watch?v=OINa46HeWg8" target="_blank"><a href="http://www.youtube.com/watch?v=OINa46HeWg8">http://www.youtube.com/watch?v=OINa46HeWg8</a></a></p>
<p>Link 2: The real zombies:</p>
<p><img src="https://dl.dropboxusercontent.com/u/7604030/zombies3.jpeg" alt=""></p>
<p><img src="https://dl.dropboxusercontent.com/u/7604030/mobile-phone-zombies.jpg" alt=""></p>
<p>So think a little.</p>
<p>As always.Have a nice day.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Why not to automate everything…</title>
      <link>https://skarlso.github.io/2013/07/31/why-not-to-automate-everything/</link>
      <pubDate>Wed, 31 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/07/31/why-not-to-automate-everything/</guid>
      <description><![CDATA[<p>Hello. I created a tale of why not to automate everything. With legos. Enjoy.</p>
<p>Gergely.</p>
<p><img src="/img/2013/07/31/picture1.jpg" alt="Picture 1"></br>
<img src="/img/2013/07/31/picture2.jpg" alt="Picture 2"></br>
<img src="/img/2013/07/31/picture3.jpg" alt="Picture 3"></br>
<img src="/img/2013/07/31/picture4.jpg" alt="Picture 4"></br>
<img src="/img/2013/07/31/picture5.jpg" alt="Picture 5"></br>
<img src="/img/2013/07/31/picture6.jpg" alt="Picture 6"></br>
<img src="/img/2013/07/31/picture7.jpg" alt="Picture 7"></br>
<img src="/img/2013/07/31/picture8.jpg" alt="Picture 8"></br>
<img src="/img/2013/07/31/picture9.jpg" alt="Picture 9"></br>
<img src="/img/2013/07/31/picture10.jpg" alt="Picture 10"></br>
<img src="/img/2013/07/31/picture11.jpg" alt="Picture 11"></br>
<img src="/img/2013/07/31/picture12.jpg" alt="Picture 12"></br>
<img src="/img/2013/07/31/picture13.jpg" alt="Picture 13"></br>
<img src="/img/2013/07/31/picture14.jpg" alt="Picture 14"></br>
<img src="/img/2013/07/31/picture15.jpg" alt="Picture 15"></br>
<img src="/img/2013/07/31/picture16.jpg" alt="Picture 16"></br>
<img src="/img/2013/07/31/picture17.jpg" alt="Picture 17"></br>
<img src="/img/2013/07/31/picture18.jpg" alt="Picture 18"></br>
<img src="/img/2013/07/31/picture19.jpg" alt="Picture 19"></br></p>
]]></description>
    </item>
    
    <item>
      <title>Groovy and Grails course summary</title>
      <link>https://skarlso.github.io/2013/04/11/groovy-and-grails-course-summary/</link>
      <pubDate>Thu, 11 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/04/11/groovy-and-grails-course-summary/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>I attended a 4 day course of Groovy and Grails and this is my attempt at writing up a summary to see how much I retained. I&rsquo;ll try to do this from the top of my head without peaking at my notes.</p>
<p>So let&rsquo;s begin.</p>
<p><strong>Introductions</strong></p>
<p>First of all, introductions. The course was held by Peter Ledbrook. He is the guy who wrote <a href="http://www.amazon.co.uk/Grails-Action-Peter-Ledbrook/dp/1617290963/ref=sr_1_2?ie=UTF8&amp;qid=1365713080&amp;sr=8-2&amp;keywords=peter+ledbrook" title="Grails in Action">Grails in Action</a>. He is awesome, go check him out. :: <a href="https://twitter.com/pledbrook" title="Twitter for Peter">Twitter</a> ::</p>
<p>The place where it was held is <a href="http://skillsmatter.com/" title="Skills Matter">Skillsmatter</a>. Which of course is known to all, if not, go check them out as well!</p>
<p><strong>Day One</strong></p>
<p>Day one and two were about Groovy. We were faced with the quirks and hinges of the language. First tasks were Closures and Currying both of which were really interesting. A bit of functional thinking mixed into the soup.</p>
<p>The course was divided into Peter telling us about stuff for 1:30 hours and then 1:00 hour lab work which really made the whole thing interactive. We could ask questions while he was talking which I&rsquo;m sure was very distracting but I hope he is used to it by now. 😉</p>
<p>The tasks which we faced I&rsquo;m sure were no real challenge for somebody who was used to thinking with closures and functions. But for us they were very intriguing.</p>
<p>For example:</p>
<p>Convert this class to it&rsquo;s groovy eq.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NumberHelper</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">findPositives</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span> <span class="n">positivesList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">numbers</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">)</span> <span class="o">{</span>
                <span class="n">positivesList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">]));</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">positivesArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">positivesList</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">positivesArray</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">positivesArray</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">((</span><span class="n">Integer</span><span class="o">)</span> <span class="n">positivesList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)).</span><span class="na">intValue</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">positivesArray</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Which basically became:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy"><span class="kt">def</span> <span class="nf">findPositive</span><span class="o">(</span><span class="kt">def</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">numbers</span><span class="o">.</span><span class="na">findAll</span><span class="o">(</span> <span class="o">{</span> <span class="n">it</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span>  <span class="o">}</span> <span class="o">)</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>That&rsquo;s pretty damn awesome.</p>
<p>For quite some time now functional languages are re-living their golden age. There are various reasons for that which I won&rsquo;t list here. But it has mainly to do with scalability, concurrency and threaded programming. Also the need to eliminate boilerplate code is bigger then ever. I guess people got fed up with Java being so talkative.</p>
<p>So we moved on learning a lot about groovy and its power. We also learned some good practices from Peter what to do and what not to do. For example a line he always repeated is that he hates how a function cannot exist without a class wrapped around it. Another important thing is, which we never ever should forget, that closures are Closures. Which means they aren&rsquo;t functions. They are of the type Closure.</p>
<p>And that we shouldn&rsquo;t use Closures just because we can. Be sensible. If a method can achieve your task, use a method.</p>
<p><strong>Day Two</strong></p>
<p>On day 2 we got into meta-programming. That&rsquo;s when the real fun started. Groovy is not only powerful and lightweight it also gives the ability to change its behaviour. Meta programming is sort of a bit new to me. So this was my first definitive intro to it. But I must say that it blew me away. The capabilities are limitless.</p>
<p>There is a class called Expando in groovy which can be used to create virtually anything on the fly what you want.</p>
<p>For example look at this code ::</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy"><span class="kt">def</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Expando</span><span class="o">(</span><span class="nl">name:</span> <span class="s2">&#34;Jake&#34;</span><span class="o">,</span> <span class="nl">age:</span> <span class="mi">24</span><span class="o">)</span>
<span class="n">println</span> <span class="n">p</span>

<span class="c1">//Add properties
</span><span class="c1"></span><span class="n">p</span><span class="o">.</span><span class="na">gender</span> <span class="o">=</span> <span class="s2">&#34;Male&#34;</span>
<span class="n">println</span> <span class="n">p</span><span class="o">.</span><span class="na">name</span>

<span class="c1">//Add metods
</span><span class="c1">//Override the default toString at runtime.
</span><span class="c1"></span><span class="n">p</span><span class="o">.</span><span class="na">toString</span> <span class="o">=</span> <span class="o">{</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="s2">&#34;${name} (${age})&#34;</span> <span class="o">}</span>
<span class="n">println</span> <span class="n">p</span>

<span class="c1">//Learn how groovy resolves names - &gt; How does it find age.
</span><span class="c1"></span><span class="n">p</span><span class="o">.</span><span class="na">addYears</span> <span class="o">=</span> <span class="o">{</span> <span class="n">years</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">age</span> <span class="o">+=</span> <span class="n">years</span> <span class="o">}</span>
<span class="n">p</span><span class="o">.</span><span class="na">addYears</span><span class="o">(</span><span class="mi">25</span><span class="o">)</span>
<span class="n">println</span> <span class="n">p</span>
</code></pre></td></tr></table>
</div>
</div><p>Neat hmm? Just create expando and build up the class as you go however you want to use it.</p>
<p>And you can do this jazz to other, normal classes as well. You can add properties and methods at runtime by implementing the propertyMissing and methodMissing methods. In them afterwards you can specify some custom behaviour you would like to see. By implementing these guys you can directly control what&rsquo;s happening to your class. Who is calling it how and where and why.</p>
<p>To grasp the power of metacoding and the abilities with which closures provided us with took a day to properly go over. So we moved on.</p>
<p><strong>Day Three</strong></p>
<p>So groovy was over. The time has come to move on and venture into the foggy land of Grails. Turned out it wasn&rsquo;t so foggy after all.</p>
<p>Grails is a rapid prototyping kind of a framework. It allows you to set up an application with a blink of an eye. And provides conventions over configuration which is a really good thing to have. But as the day was going by we realised that we would find ourself not once but many times in the bubbling boils of the underbelly of /conf.</p>
<p>Again, fortunately, it wasn&rsquo;t really hard. The config was groovy and it was pretty straight forward too.</p>
<p>Our third day mostly took as off to explore scaffolding, dynamic &amp; static as well, and the interesting land of GORM Peter showed us the power of grails to create a CRUD application with in a matter of seconds / minutes ( depending on how fast your machine is ) with a fairly nice view. These types of application are usually not accepted of course as an end product. For that you need to thinker a bit here and there.</p>
<p>But things like admin portal are easily put together. So use it often and use it will and get it to know how it works.</p>
<p>In the land of GORM we explored the 4 different possibilities of data retriaval and generally how everything maps together and how GORM work with ORM.</p>
<p>The four different retrieval capabilities are:</p>
<ul>
<li>Where clauses</li>
<li>HQL (Hybernate Query Language)</li>
<li>Criteria searches</li>
<li>Dynamic finder methods</li>
</ul>
<p>Each of which we found very interesting in there own respective ways.</p>
<p>Example of a dynamic finder::</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy"><span class="k">assert</span> <span class="n">Account</span><span class="o">.</span><span class="na">findAllBy</span><span class="o">*</span><span class="n">PropertyName</span><span class="o">**</span><span class="n">Modifier</span><span class="o">*(</span><span class="n">Parameters</span><span class="o">).</span><span class="na">size</span> <span class="o">==</span> <span class="mi">2</span>
</code></pre></td></tr></table>
</div>
</div><p>Where propertyName is the name of the property to find by, modifier can be a sql&rsquo;s Like for example.</p>
<p>So this could become something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy"><span class="k">assert</span> <span class="n">Hitman</span><span class="o">.</span><span class="na">findAllByNameLike</span><span class="o">(</span><span class="s2">&#34;Agent %&#34;</span><span class="o">)</span> <span class="o">==</span> <span class="mi">15</span>
</code></pre></td></tr></table>
</div>
</div><p>That day was really knowledge packed. I don&rsquo;t say I remember everything but luckily I wrote up some notes and I know what and where to look for if I would be in need of something.</p>
<p><strong>Day Four</strong></p>
<p>On the last day everybody was pretty much exhausted. It takes a lot to learn all that from 9 to 5 for 4 days. And Peter gave his best to staff that stuff into our heads and as much as possible of it. I think he did a pretty good job.</p>
<p>Last day was all about Controllers, Commands, Models, Views and GSPs and BootStrap config, Environment changes durring start up, the configurability of the whole framework, messages, templates, internationalisation and many thing more which can be easily put together.</p>
<p>It was pretty interesting. GSPs have similarities to JSPs but retained only the good parts. And although you can do JSP stuff in GSPs as well with nice embedded tags you have the ability to actually create a nice page which won&rsquo;t be that big a maintenance nightmare.</p>
<p>Peter very much pressed the fact that the Controllers should be your only entry point from HTML requests and the views should be the only output of it. The controllers shouldn&rsquo;t be throwing around business logic they should only act as proxies between the outer shell and the inner layering.</p>
<p>I think I understood most of the stuff which we were going through. Again, it was pretty straight forward. The application of it is what need practice.</p>
<p>Durring the course we created several applications. With dynamic scaffolding as well as static. We created and edited our own views and gsps. Created our own Controllers and what nots. One thing is clear. Grails let&rsquo;s you progress a hell of a lot in a matter of minutes.</p>
<p>And we were also talking about testing of course. Using Geb, Spock and the unit testing capabilities of Grails. All very powerful stuff. Spock has some impressive Mocking powers in junction with the good ol' Given When Then structure. If done correctly the test can be very fast and robust.</p>
<p>As final words we talked about plugins and the testing of Views and a bit more configuration.</p>
<p><strong>Closing words</strong></p>
<p>So all in all the course was excellent. Peter did a very good job of introducing use to Grails and Groovy. It&rsquo;s a very good framework to build upon with a powerful language at our disposal. I&rsquo;m pretty certain that Grails will evolve even more and be a great asset to people who choose to develop with it. Handle with Care though. Because no matter how awesome a tool is, it can always be used for bad purposes. 😉</p>
<p>As always,</p>
<p>Thanks for reading and have a nice day / evening.</p>
]]></description>
    </item>
    
    <item>
      <title>My history in testing</title>
      <link>https://skarlso.github.io/2013/04/11/my-history-in-testing/</link>
      <pubDate>Thu, 11 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/04/11/my-history-in-testing/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>Today I&rsquo;d like to share with you some of the experiences I had as a beginner tester. I hope it sets you off on a path to enlightenment and leaves you off with a good appetite for testing. Shall we begin then?</p>
<p><strong>The early days</strong></p>
<p>It was 2004 when I finished school and started working at my first company. I finished as a software developer which is kind of an exaggeration since I only finished a 2 years course of it. I wasn&rsquo;t really one for school. I was more of a home learner. That&rsquo;s how you learn programming these days anyways.</p>
<p>The company didn&rsquo;t hire developers at that moment. At least not junior ones. But! They were kind enough to offer a position as a tester. As the saying goes, Don&rsquo;t look a gift horse in the mouth, I accepted the position although my intention was to go over to development as soon as possible.</p>
<p>Years went by. I was still a tester. I foamed and fumed about it I wanted to be a dev guy. I was furious. I was angry. I was inpatient. I was an idiot. Instead of crying and instead of the light going on after 2-3 years or more I should have realised the potential of my position sooner.</p>
<p><strong>Revelation</strong></p>
<p>So there I was. I was sitting at my desk clicking away at stuff and writing up dull documentations about why I&rsquo;m clicking at that stuff and how I&rsquo;m clicking it. My document infect was so pretty and well formatted that I was fairly proud of it.</p>
<p>I ignored calls of my sanity and went on producing test cases and documents for many many more months / years. I was bad at my job. And I tell you why. I missed bugs I missed the little things that made the difference. I was following documentation by the letter I was leaving out things I wasn&rsquo;t paying attention I wanted to be a developer damn it!</p>
<p>But fortunately because of various people in my life, like my brother, my resource manager, my friends and this guy :: James Marcus Bach ( <a href="http://www.satisfice.com/" title="http://www.satisfice.com/" target="_blank"><a href="http://www.satisfice.com/">http://www.satisfice.com/</a></a> ) :: I soon begun to realise that this job is about so much more! I read Jame&rsquo;s book <a href="http://www.buccaneerscholar.com/" title="The buccaneer scholar" target="_blank">The buccaneer scholar</a>.</p>
<p>It opened my eyes in so many ways. I knew that there is somebody else out there how is like me. Passionet and keen on learning new things. Exploring technology and going where nobody else went before. I was beginning to understand that I could be much more in this position. In my country at that time Testers weren&rsquo;t regarded for too much. We were the enemy that needed defeating. We were in the way. We were somebody who had to be hated. Fortunately it changed much since then and lucky for us The Company had great support for Testers.</p>
<p>I learned that I can use my passion. I learned that testing can be / IS, indeed, the best thing that could have happened to me.</p>
<p><strong>Ascension</strong></p>
<p>With these new thoughts in my mind I begun to evolve. I realised that I can incorporate my dev skills into testing and later my testing skill into development. I was no longer following test cases blindly. I was no longer writing up pretty documentations ( I was writing other kind of documentations.. 😉 ). I was following instinct, skills, knowledge I hoarded from people. I was talking to the Devs, I was talking to the deployment team, I was talking to the managers AND the product owners. I hoarded knowledge as much as possible. I wrote everything down into my Mind Maps and was determined to become the single most knowledgable entity on the projects I was working on.</p>
<p>I created small tools that helped in my tedious, boring, unimaginative tasks of repetitive clicking. It didn&rsquo;t took so long I was sharing my tools between other testers. Small javascripts which filled in forms. Tools, perl scripts to format docs and test results and so and so forth.</p>
<p>I embraced testing. It become my way of Life. It wasn&rsquo;t a simple job anymore. It was embedded into my brain processes and synapses. And that&rsquo;s when I got into automation.</p>
<p><strong>The later years</strong></p>
<p>So I got into automation. I loved it. The thought that I can bend the computers will to do my bidding / job was absolutely mind blowing. I&rsquo;ve done development at that point already of course that wasn&rsquo;t new to me. And I also was shown some way of automation but that wasn&rsquo;t so great so I dismissed this possibility for a long time. After a while I came back to it with the thought that, hey I could do this better. Selenium came out at that time around, Watir was also there and a couple of other tools in Perl.</p>
<p>I started developing with / in / for those tools and noted that despite the believe that it&rsquo;s only automation it actually took quite some thinking to come up with a framework that was adaptable, concise, manageable, fast and so on and so fort. It was an effort that most people didn&rsquo;t realise or care to know about.</p>
<p>So for the better part of those years I was trying to convince people that building a testing framework requires actual development work. And is not something that should be taken lightly. I sort of succeeded with it.</p>
<p><strong>Now</strong></p>
<p>After various circumstances in my life I moved to UK and took a job as an SET(Software Developer in Test). It sounds fancy but is rather just an automation guy who from time to time looks at production code. It was a spring board for me. And now days it seems I&rsquo;m simply just a developer. But!!! And here comes the twist.</p>
<p>Because of my years of background in Test I feel I&rsquo;m so much more. I know to write testable code. I know many ways how my code could fail. I know many ways of writing something and then coding up a script for testing or do extensive unit testing. I don&rsquo;t love my code blindly so that when it&rsquo;s done I only test the &ldquo;happy path&rdquo; because I don&rsquo;t have the time to code up more.</p>
<p>I will always have time for testing. I will <strong>begin</strong> with testing. Because people need to understand that the only way to go fast is to go slow. If you go fast it will bite you in the behind and you will suffer more then you would have suffered if you would have written up that one last little test for that one last little corner for the world that is your boiling, brooding, breathing pile of code.</p>
<p><strong>The future</strong></p>
<p>Honestly I don&rsquo;t know were I&rsquo;m going from here. Being a full pledged developed is a new territory for me even though I was an automation dev before. But I&rsquo;m looking forward to this exciting new life. And I will NEVER ditch my Testing carrier. In fact I&rsquo;m aiming to complete the BBST course next month. Because once you&rsquo;ve been a tester you will never go back being anything else. It becomes a part of you. And stays with you forever.</p>
<p>Thank you for reading.</p>
<p>And as always,</p>
<p>Have a nice day!</p>
]]></description>
    </item>
    
    <item>
      <title>It’s all about human interaction.</title>
      <link>https://skarlso.github.io/2013/01/31/its-all-about-human-interaction/</link>
      <pubDate>Thu, 31 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/01/31/its-all-about-human-interaction/</guid>
      <description><![CDATA[<p>Hello everybody.</p>
<p>Today I would like to write about something I experienced over the years of being in the software industry.</p>
<p><strong>Some History</strong></p>
<p>I&rsquo;ve been a tester for a long time now. I&rsquo;ve been up and down and down and up. I struggled for a very long time until I became somebody who I am today. And I still have many things to learn ahead of me.</p>
<p>I learned from many people. I personally thing my greatest influence on testing was James Marcus Bach and his Brother Jon Bach you should definitely check out these guys. It took me a long time to get to where I am today. And after ~10 years now I can state with a reasonable confidence that this industry is no longer about technology or solutions to technological problems.</p>
<p><strong>Surly you Jest.</strong></p>
<p>Nope. I&rsquo;m not joking. I can see people struggling to understand people and mostly it&rsquo;s not because of knowledge differences it&rsquo;s because they simply can&rsquo;t stand each other. Or they simply think that their solution must be better then the one the other has. Or the guy just woke up with a bad foot.</p>
<p>And industrial problems? Management? Sure it can be knowledge but mostly it&rsquo;s simply ignorance and pride. <strong>Pride</strong> because he / she does not want to admit that they don&rsquo;t understand something. <strong>Pride</strong> to ask a question that might make them look stupid. I&rsquo;d rather look stupid for five minutes then for the rest of my life. I rather ask the question that I want to know because I can&rsquo;t make a proper decision without it. I rather learn then be ignorant for the rest of my life.</p>
<p>People need to overcome their differences. People need to understand that this behaviour hurts the company. It hurts them it hurts the people around them and the product. Swallow your pride and be a bigger man / woman. Face your fear. Be Strong. Be clever be intelligent be a proper grown up human being!!!!</p>
<p>You hate my face? SAY IT IN MY FACE!! I can&rsquo;t resolve issues I DON&rsquo;T KNOW ABOUT!!</p>
<p><strong>Last but not least.</strong></p>
<p>Grow up people. Be nice. Be curious. Don&rsquo;t be afraid to ask. Don&rsquo;t be afraid to ask again if you still don&rsquo;t understand. It might be that the person speaking has a completely different view of something and it might be that nobody really understands him and they are just afraid to ask. And if you ask something stupid? Who cares.. You learned from it.</p>
<p>Be a professional. A professional is not afraid. And encourage others to be one too. In the today&rsquo;s technological world solutions can be found by the dozens on the internet. You will be a better work force by adjusting your personal habits a little bit.</p>
<p>Be nice.</p>
<p>And as always,</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>What you really need to know to become a Testing Expert</title>
      <link>https://skarlso.github.io/2013/01/21/what-you-really-need-to-become-a-testing-expert/</link>
      <pubDate>Mon, 21 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/01/21/what-you-really-need-to-become-a-testing-expert/</guid>
      <description><![CDATA[<p>Hello Everybody.</p>
<p>Today I would like to show you what you need to become a Testing expert.</p>
<p>If you had noticed I deliberately left out the word Software. Why? Because becoming and expert in Testing Anything has the same root as becoming an expert to test software. And for that let me take you back to a Galaxy Far Far Away in Time AND Space.</p>
<p><strong>The beginnings.</strong></p>
<p>I went to school in Oroszlany, my home town in Hungary. My official Technical title would be Mechanical Testing Engineer. I had the luck that most things which were thought at that school and I liked were thought by people I liked too and were clever in their respective fields. Like Pneumatics, Metallurgy, Mechanics, Chemistry these were all really awesome fields. To this day I don&rsquo;t know why I haven&rsquo;t ended up in some lab testing the breaking point of metals and the capacity of various chemicals.</p>
<p>But ahh well.. I still remember some of the ISO standards we had to memorize. Like in Metallurgy the Charpy pendulum impact test which we loved so very much to perform. The ISO standard for that is ISO 148-1:2009. Now let me see if I still remember that correctly. Yes! I&rsquo;ve still got it. So where am I going with this?</p>
<p><strong>Moving on.</strong></p>
<p>Back then we performed a lot of operations on various metals and a lot of chemical testings and the like. The most important part of every performed test was always to have insight. Insight in the structure of the metal. How it was made, how it was moulded and then shaped and heated and cooled and so on and so forth. We had to know EVERYTHING about the creation of this element that we had to test. Without that knowledge you could of corse still perform the test but you didn&rsquo;t had any additional information why that test was useful or what it proved. Sure, you could have looked at the specification of the metal but that didn&rsquo;t give you anything about the inner structure of it.</p>
<p>That was provided to you by the knowledge of the procedure that created it.</p>
<p>You get where I&rsquo;m going with this.</p>
<p><strong>Insight</strong></p>
<p>So back to software testing. What is the single most important thing that gives you insight, that gives you the edge to be a professional? Knowing the development process. Knowing architecture. Knowing programming. Knowing the language and its capabilities and limitations.</p>
<p>Sure you can be a good manual Tester. Of course you can be an excellent Exploratory Tester. But look at the others. James Marcus Bach. Alan Richardson. Michael Bolton and I could go on. They all know programming. They all know it by heart and they could be exceptional programmers if they wanted to. They already know that in order to get very good at testing something you must have an insight on the subject matter. You can&rsquo;t test it thoughtfully without knowing its limitations its rules that it obeys its exploits that you can use.</p>
<p><strong>Last words.</strong></p>
<p>So in order to excel at your craft of test you have to have insight of the subject of the test. You can still become good but you always have to aim high don&rsquo;t you? A friend of mine reply to one of my tweets with a really good sentence:&quot;.and then you realize that being the best in one implies being excellent in the other.&quot;. Exactly. Because the two are interconnected. They aren&rsquo;t actually two. It&rsquo;s one. It&rsquo;s called Engineering.</p>
<p>Have a nice day and as always,</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>From Chaos There Shall Be Order</title>
      <link>https://skarlso.github.io/2013/01/04/from-chaos-there-shall-be-order/</link>
      <pubDate>Fri, 04 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/01/04/from-chaos-there-shall-be-order/</guid>
      <description><![CDATA[<p>Dear Readers.</p>
<p>Today I want to talk to you about something I discovered over years of working and experience.</p>
<p>Also something that I can see in the world repeating over and over again. Not just in Software business but also in History in Human nature in Physics and Systems.</p>
<p>So let&rsquo;s see what I&rsquo;m talking about.</p>
<p><strong>What is Chaos?</strong></p>
<p>Chaos is a state of utter confusion. Chaos is the opposite of order. Chaos is when everybody does what they want without thinking about the consequences.</p>
<p>Does Chaos hurt? Of course it does. From Chaos there can be no production. From Chaos there can be no profit. From Chaos there can be no life.</p>
<p>Is that really true? It sort of is. Remember the Big Bang. Initially it is believed that there was order. The universe was a perfect gem with the four forces ( Gravity, Electromagnetic, Weak Nuclear and Strong Nuclear force ) united. And then a Higgs came around and made it BOOM! And so there was Chaos. And from Chaos, with a snowballs chance, there was life.</p>
<p><strong>So then why is Chaos bad?</strong></p>
<p>Companies usually don&rsquo;t have the time or the money to wait for that Snowballs chance to come to flourish. So order is required for life to become great.</p>
<p>Take for example the Chinese Emperor Qin Shi Huang. He was the one uniting China. Sure, he killed a LOT of people. And China is oppressed every since. However he did introduce a lot of new concepts and reforms which wouldn&rsquo;t have been possible in the Chaos. And today China is one of the leading nations if not The.</p>
<p>Before Emperor Qin begun his journey there were 9 different ways of writing down the world &lsquo;sword&rsquo; in chinese. This was unacceptable. After the Emperor succeeded he unified the writing and made communication easier.</p>
<p><strong>Striving for order</strong></p>
<p>People have always strived for order. For simplicity. For unification. For &lsquo;one&rsquo; instead of &lsquo;many&rsquo;. We have stories that say there is power in many. Physicist are continuously trying to unify the laws of physics in the beautiful little equations. Like Einsteins law of relativity. That small equations revolutionised the world. And it came from unification.</p>
<p><strong>So then what are the downsides of unification?</strong></p>
<p>Everything comes with a price of course. The unification bought oppression to China and the loss of the individuum. Fantasy and thoughts got all sacked. People become like Borgs. However the Country evolved immensely under one banner. But what does this all have to do with Testing?</p>
<p><strong>Applying Order</strong></p>
<p>Think about your company. Think about how your developers work. Does everybody use a different building platform? Does everybody use a different operating system? Do they run the same command to build your environment? Did you have any kind of problems because of that? I&rsquo;m sure you did.</p>
<p>There are benefits of it. At least you will know if your application is working in a different environment. But do you want that? Is it worth it? After all we live in an age were there are numerous possibilities, environments, languages, command line options etc etc.</p>
<p>But think about it. Did the diversity bring you more profit or did it hurt you more? Which one is applicable for you? If your developers do not have the ability to properly govern them selfs then you need order. You need a unified language, you need a unified environment and unified processes Agile or not Agile. Your company wont be successful if you want to be Agile just because it is the Current Trend. You need to be pragmatic about it and applied were it is reasonable. There is nothing wrong in introducing a standard or a code review process or a coding guid line or some standards here and there if it HELPS.</p>
<p>There will be friction. People tend to resist change. There will be losses. But a unified company is a strong company. And when the new guy arrives? He wont have any kind of a problem installing your software and beginning working on it because he doesn&rsquo;t have to go around and scoop information together from at least ten people and do it in an eleventh way at the end.</p>
<p><strong>Last Words</strong></p>
<p>So think about this. Is your company strong enough to uphold Chaos and make it flourish? Or is it a bunch of people doing whatever they think is right because of a sense of individuality which they don&rsquo;t want to give up?</p>
<p>This is for you to decide.</p>
<p>And as always,</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Methodologies, Thought Patterns, Lies</title>
      <link>https://skarlso.github.io/2012/12/12/methodologies-thought-patterns-lies/</link>
      <pubDate>Wed, 12 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/12/12/methodologies-thought-patterns-lies/</guid>
      <description><![CDATA[<p>Hello everybody.</p>
<p>Today I&rsquo;d like to write about something I discovered over the years of researching and following certain people and movements in Testing and Programming world.</p>
<p>Let me tell you that there are quite an amazing amount of stuff to be read out there. It&rsquo;s overwhelming.</p>
<p>Let&rsquo;s talk about <strong>Methodologies</strong> first.</p>
<p>There are many out there currently. In programming and in testing too. Many speak of ways how you should or should not do you work. Many of them tend to say that others aren&rsquo;t the right way. However just as many tend to say that you can share your knowledge or you can only partially use that particular methodology because they realised that if they say others are crap they close themselves from evolving and they create a way of thinking that will say: Ohhh yeah? You can&rsquo;t tell me what I should do! Who are you to say that that technique is wrong?</p>
<p>So they are in threat of alienating followers through this kind of behaviour. Just as commercials stopped saying they product is 100% awesome. Now they say 8/10 people find it awesome. This gives you the thought that surly they must not be lying if they admit that somebody thinks their product is crap.</p>
<p>How do you know then that a methodology is lying or is right or is &ldquo;The way to go.&rdquo; or that it is in fact a valid methodology?</p>
<p><em>By careful observation and deduction of facts while not leaving out of sight your own ignorance and view points / beliefs.</em></p>
<p>You have to address something by taking yourself a level above the problem domain. Carefully observe various situations and always approach it with scepticism. Guilty until proven otherwise.</p>
<p><strong>Thought Patterns</strong></p>
<p>If you do this for a while you will realize that most of the people out there are trying to sell their own crap in some way or another. They will put it into nice little packages will tell you neat little success stories and will make you believe in what they think is right. How do you <strong>shield</strong> yourself against that?</p>
<p>By. drum rolls. learning. You must make your mind to be a weapon of mass destruction. You must hone your skills of thinking you must hone your skills of analysing and understanding complex patterns. In the world there is nothing without a Pattern. Everything follows a greater scheme. You have to find it, grab hold of it and never let it go. You have to understand how people think and how you would exploit that. What there weaknesses are and why are they there in the first place?</p>
<p>When you achieve that you will truly begin to see how the world works and looks like under the hood. Try it on small things first. Try to follow the thought patterns of your coworker. Try to note down his mood changes based on days and current view point. Based on news and knowledge that you can attain from his life. After a while you will be able to predict certain moves and mood changes. You will begin to predict working capacity based on the sun is up or not or if it&rsquo;s snowing or raining.</p>
<p>All these will bring you to a mind state where you can look beyond words. You will notice the patterns behind blog posts. You will notice the bullshit out of the documentation. You will notice when somebody is just writing for the sake of writing. You will notice.</p>
<p><strong>Lies</strong>.</p>
<p>You have to understand the One Truth in life. <strong>We all lie!</strong> And the we all lie about lying.</p>
<p>If you get that you will start to think more before you approche something. You read a methodology a description a &ldquo;new found&rdquo; idea and you realize the lies behind it if there are any big ones. You realize that he / they is / are only trying to be clever or only trying to be famous. They might have something interesting to say, not everything is a lie fortunately, but let&rsquo;s face it. Most if it is.</p>
<p>You have to shield yourself against that. You have to shield yourself from biases, from lies, from cheats, from make beliefe and from posts that are only posts for the sake of posting.</p>
<p>What are the tell tail signs? Are there any? Of course there are..</p>
<p><strong>Big words, Punctuation and visually carefully constructed blog posts( usually tries to hide something between a facade of good looks), few practical examples, too much of: &ldquo;.then this will definitely help you improve.&rdquo;, too much talk without saying anything interesting.</strong> and so on ans so forth.</p>
<p><strong>End words</strong></p>
<p>Now think about these things for a second. Think about thinking. Think about how you can improve. Learn Lateral Thinking. General Systems Thinking. Logical Reasoning. Deductive Thinking. Inductive Thinking. Critical Thinking. And if you did all this. And you find yourself wondering around the world with an open eye seeing things for the first time. Noticing things for the first time. Watching, observing, thinking. Come back and read this post again whit THOSE things in mind. 😉</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>TEAS: Testing Exploration Adventure Session</title>
      <link>https://skarlso.github.io/2012/12/01/teas-testing-exploration-adventure-session/</link>
      <pubDate>Sat, 01 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/12/01/teas-testing-exploration-adventure-session/</guid>
      <description><![CDATA[<p>Hello Everybody.</p>
<p>I&rsquo;d like to introduce T.E.A.S. to you. This is something I came up with yesterday which requires a lot of fantasy some good thinking planning and enthusiastic people. So, let&rsquo;s get started.</p>
<p><strong>What is it about?</strong></p>
<p>Testing Exploration Adventure Session is about. Testing! There. No real surprise, eh? TEAS has it&rsquo;s roots in <strong>RPGs</strong>. Role Playing Games. If you ever heard or read about M.A.G.U.S. or the more known Dungeons &amp; Dragons you will have a better understanding of the concept behind this phenomena.</p>
<p><strong>Basics of RPG</strong></p>
<p>So now that we know that it has it&rsquo;s rules in RPGs how will that be applied to testing and learning? Easy. Well it&rsquo;s not that easy but after you grasp the concept it will get easy.</p>
<p>Just like in an RPG people get together first. There will be players in the group mostly and one or two Dungeon Masters. The task of the Dungeon Master is to facilitate the Game. The Game it self consists of a set of given rules and a World in which these rules are applied too. The Players are placed in this world which is created by the Dungeon Master. They are then given tasks that needs to be fulfilled in some particular way. That choice is of to the Players. The DM only facilitates. He is the Master of the given World. And plots against the players. He incorporates the Non Player Characters or NPCs of the World and tries hard to trifle the effort of the players.</p>
<p>This task can be anything from freeing a princes to twarthing a Magus from gaining Omnipotence or God like powers, to killing a Dragon for its treasures. And Players decide what to do and how to do it. The DM lists the options available. And as the Players move they get experience. They get stronger, faster, better, more intelligente.. They gain Levels.</p>
<p>Now. How does that fit into Testing?</p>
<p><strong>How does this fit into Testing?</strong></p>
<p>If you think about testing and the players what comes into mind? You have a product. And you have testers who explore this product in certain ways. As they go and find bugs ( kill mobs ) they get better and more efficient in finding other bugs based on the previous ones. Tasks get harder and harder as the most easy to find bugs are already taken care of. Elusive bugs will be harder to discover ( kill ).</p>
<p>And who is the Dungeon Master? I would say in this case it&rsquo;s the Product Owner.</p>
<p><strong>How to begin</strong></p>
<p>So what now? You have your Testers ( Players ) and your Product Owner ( Dungeon Master ). What&rsquo;s the next move? How does this all begin?</p>
<p>The PO present a software. He builds it. Finds it out. Puts together the pieces. Creates maps, road maps, site maps if it&rsquo;s a server application then it&rsquo;s structure maps and database diagrams and whatever helps him to present his product to the Testers. He slips and designs bugs into the system. Harder ones and also easier ones. He has to have a story in the application. Maybe it&rsquo;s a web site that provides some service. There a lot of components that could go wrong.</p>
<p>The testers begin by asking questions. They begin as Level 1 Testers. They know nothing yet. They know no programming languages and no metrics and nothing. The goal is to have a fully covered product which they are confident enough to release. They can add the whole release process to the Game too. Depends on what the PO has in plan for that Session. Which could take a few hours or a whole day. Depends on the possibilities.</p>
<p><strong>How the Testing works and what&rsquo;s a level?</strong></p>
<p>So as they go on and Test the product, which they have to do verbally, the PO knows what bugs they come across. As they find bugs they earn Experience points. The more they have the more they level up the more tools will be available to use. That can be given to chance. Throw a dice and select a tool from a pool of tools which are available to the whole Project.</p>
<p>You can have a Random factor to the bug finding process too. For example if a Tester tries to examine an area he throws a dice to determine his ability to find bugs. That ability comes from initial stats that can be defined at the begin of the game. If he succeeds he finds a bug and gets points for it. The tools can increase the ability to find bugs. For example automation can add bonus to finding repetitive bugs but can add minus points to fantasy / finding really nasty elusive bugs because you might concentrate less on details.</p>
<p>So a Level defines the Testers ability to find bugs. The higher level he gets the better his abilities will be to find bugs.</p>
<p>The PO defines the End Game. The Games goal could be to find x number of bugs. Or to release the product. Or to bash it, crack it, hack it destroy it. It could be that you have to sell it or demo it to some stack holders. The possibilities are Legion.</p>
<p><strong>How to go on.</strong></p>
<p>I know that this is all very confusing yet.. I&rsquo;m still working out the individual rules, plays and numbers and Character sheets and such. Any thoughts and ideas are appreciated.</p>
<p>The merits of this game are many. It practices testing it practices the ability to explore a product only in fantasy. It helps who ever designs a product to get a glimpse into the world of designing.</p>
<p>Also the product might even be not from this time!! It can be a future product of some holographic nature! Or an Audio Visual interface that&rsquo;s hooked into the users Brain. Or some other advanced future technology. How would you Test that???? How would you test a robot arm controlling algorithm. Or an Artificial Intelligence that controls tactical missiles overseas.</p>
<p>The possibilities are virtually limitless. It&rsquo;s up to the Product Owners fantasy what he builds. It could be a whole new virtual World like the Holoroom in Star Trek. How would you Test THAT???</p>
<p>If you are interested in this endevour follow me for more details.</p>
<p>And as always,</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How to eliminate a parameter boom</title>
      <link>https://skarlso.github.io/2012/10/09/how-to-eliminate-a-parameter-boom/</link>
      <pubDate>Tue, 09 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/10/09/how-to-eliminate-a-parameter-boom/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>Today I want to write about a little trick I learned.</p>
<p>If you are working with legacy code and you don&rsquo;t have the chance to eliminate core design problems, you can use this little pattern to help you out.</p>
<p><strong>Problem</strong></p>
<p>Problem is that you have a class that has a gazillion collaborators and at some point in time one of the clever devs thought it would be a cool idea to do dependancy injection via the constructor. We all know that doing this makes the class immutable which is very good for a number of reasons. However it doesn&rsquo;t provide a flexible solution if you want to leave out one or two collabs. For that your would have to create Adapter constructors and chain them upwards which would get very ugly very fast. While using JavaBeans getters and setters can leave your class in a harmful state like not at all or partially initialised.</p>
<p>So what&rsquo;s a good solution then?</p>
<p><strong>Solution</strong></p>
<p>One possible solution would be to use some kind of initialisation framework like Springs @Autowired. But cluttering your classes with that isn&rsquo;t really pretty either. But it&rsquo;s A solution.</p>
<p>Another solution is the usage of a builder pattern.</p>
<p>Consider this class:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">VeryImportantService</span> <span class="o">{</span>

        <span class="kd">public</span> <span class="nf">VeryImportantService</span><span class="o">(</span><span class="n">CollabOne</span> <span class="n">collabOne</span><span class="o">,</span> <span class="n">CollabTwo</span> <span class="n">collabTwo</span><span class="o">,</span> <span class="n">CollabThree</span> <span class="n">collabThree</span><span class="o">,</span> <span class="n">CollabFour</span> <span class="n">collabFour</span><span class="o">,</span>
            <span class="n">CollabFive</span> <span class="n">collabFive</span><span class="o">,</span> <span class="n">CollabSix</span> <span class="n">collabSix</span><span class="o">)</span> <span class="o">{</span>
            <span class="o">.</span>
            <span class="o">.</span>
            <span class="o">.</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Don&rsquo;t forget that we want these to be optional. I would like to leave out two or three here and there.</p>
<p>The builder let&rsquo;s you do that. It looks something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">VeryImportantService</span> <span class="o">{</span>

        <span class="kd">private</span> <span class="n">CollabOne</span> <span class="n">collabOne</span><span class="o">;</span>
        <span class="kd">private</span> <span class="n">CollabTwo</span> <span class="n">collabTwo</span><span class="o">;</span>
        <span class="kd">private</span> <span class="n">CollabThree</span> <span class="n">collabThree</span><span class="o">;</span>
        <span class="kd">private</span> <span class="n">CollabFour</span> <span class="n">collabFour</span><span class="o">;</span>
        <span class="kd">private</span> <span class="n">CollabFive</span> <span class="n">collabFive</span><span class="o">;</span>
        <span class="kd">private</span> <span class="n">CollabSix</span> <span class="n">collabSix</span><span class="o">;</span>


        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nf">Builder</span><span class="o">()</span> <span class="o">{</span>
            <span class="kd">private</span> <span class="n">CollabOne</span> <span class="n">collabOne</span><span class="o">;</span>
            <span class="kd">private</span> <span class="n">CollabTwo</span> <span class="n">collabTwo</span><span class="o">;</span>
            <span class="kd">private</span> <span class="n">CollabThree</span> <span class="n">collabThree</span><span class="o">;</span>
            <span class="kd">private</span> <span class="n">CollabFour</span> <span class="n">collabFour</span><span class="o">;</span>
            <span class="kd">private</span> <span class="n">CollabFive</span> <span class="n">collabFive</span><span class="o">;</span>
            <span class="kd">private</span> <span class="n">CollabSix</span> <span class="n">collabSix</span><span class="o">;</span>

            <span class="kd">public</span> <span class="nf">Builder</span><span class="o">()</span> <span class="o">{}</span>

            <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">collabOne</span><span class="o">(</span><span class="n">CollabOne</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">this</span><span class="o">.</span><span class="na">collabOne</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
                <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">collabTwo</span><span class="o">(</span><span class="n">CollabTwo</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">this</span><span class="o">.</span><span class="na">collabTwo</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
                <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="o">.</span>
            <span class="o">.</span>
            <span class="o">.</span>

            <span class="kd">public</span> <span class="n">VeryImportantService</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="n">VeryImportantService</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
            <span class="o">}</span>

        <span class="o">}</span>

        <span class="c1">//private constructor
</span><span class="c1"></span>        <span class="kd">private</span> <span class="nf">VeryImportantService</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">collabOne</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">collabOne</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">collabTwo</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">collabTwo</span><span class="o">;</span>
            <span class="o">.</span>
            <span class="o">.</span>
            <span class="o">.</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Now. calling this would look something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="n">VeryImportantService</span> <span class="n">veryImportantService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">VeryImportantService</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">collabOne</span><span class="o">(</span><span class="n">someValueOne</span><span class="o">).</span><span class="na">collabTwo</span><span class="o">(</span><span class="n">someValueTwo</span><span class="o">).</span><span class="na">collabFive</span><span class="o">(</span><span class="n">someValueFive</span><span class="o">);</span>
</code></pre></td></tr></table>
</div>
</div><p>This enables you to be flexible HOWEVER!! I HATE train wrecks. So I would probably tweak it not to return things, but set them. Then you would end up calling then line by line. Which is still not the best but better then the alternative.</p>
<p><strong>End words</strong></p>
<p>So there you go. This is A solution not THE solution obviously. The best would be to NOT design such a monster at all. If you have any better ideas please feel free to share. I would gladly put them on my blog.</p>
<p>As always,</p>
<p>Thanks for reading,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>What my brain is up to the whole day…</title>
      <link>https://skarlso.github.io/2012/09/20/what-my-brain-is-up-to-the-whole-day/</link>
      <pubDate>Thu, 20 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/09/20/what-my-brain-is-up-to-the-whole-day/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>Here is a little graphic I made to show what my brain is up to the whole day long. Excuse me for the lack of my colouring skills. Enjoy</p>
<p>![Brain]<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="http://dl.dropbox.com/u/7604030/barinColored.jpg">http://dl.dropbox.com/u/7604030/barinColored.jpg</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></description>
    </item>
    
    <item>
      <title>Learning programming with a visual mind</title>
      <link>https://skarlso.github.io/2012/09/09/learning-programming-with-a-visual-mind/</link>
      <pubDate>Sun, 09 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/09/09/learning-programming-with-a-visual-mind/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>Today I want to write to you about <strong>learning</strong> something with a <strong>visual mind</strong>. There are a gazillion posts out there that tell you how to learn something with a visual mind. However, there are only a few <strong>actually describing</strong> how to learn something as complicated and logical as programming. How do you draw up a function? How do you draw up a cycle or a structure?</p>
<p>Actually these are really <strong>easy</strong>. A <strong>cycle</strong>? No problem. What&rsquo;s a <strong>circle</strong> if not a cycle? <strong>Structure</strong>? This should be an easy one. You can draw a whole <strong>building</strong> and then place <strong>building blocks</strong> into it.</p>
<p>I have a very <strong>strong visual mind</strong>. I don&rsquo;t remember names good for example however I remember every and each <strong>face very distinct</strong>. So if you come up to me, don&rsquo;t be surprised if I don&rsquo;t remember your name. So as I grew older and I took learning into my own hand I realised that there are <strong>techniques</strong> out there that I could have used to <strong>boost my learning</strong> in the early stages of my life too.</p>
<p>But there is no such thing as to be late for something. <strong>Life is constant learning</strong>. So don&rsquo;t hesitate to start learning something.</p>
<p>I <strong>started</strong> to learn <strong>Scala</strong> for example and I was <strong>brainstorming</strong> as how to <strong>draw</strong> up a good map for some programming practices. <strong>Brainstorming</strong> can help you coming up with something that can <strong>display your idea</strong>. Try to brainstorm <strong>in words only</strong> rather then sentences.</p>
<p>And I came up with these two for now, with the <strong>play framework</strong> in the middle.</p>
<p>![Structure]<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>![Route]<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>Now some of you <strong>might say</strong> this <strong>took long</strong> and is <strong>unnecessary</strong>. The information displayed can be <strong>remembered easily</strong> and that these drawings took longer then writing up two or three words. Now let&rsquo;s see.</p>
<p>These drawing, which are really <strong>rough</strong> actually, took me about <strong>10 minutes</strong> while reading and learning and what not. Yes they take longer. But if I write down <strong>two words</strong> how long will I remember them? I already <strong>forgot after I wrote it down</strong>!</p>
<p>This drawing with the griffon legs? <strong>Stuck there forever</strong>. ( Don&rsquo;t ask about the legs.. don&rsquo;t know where they came from. )</p>
<p>So visualisation goes a long way in your brain if you are wired that way. Remember that there is NOTHING that you can&rsquo;t display with a little bit of creativity and graphics.</p>
<p>Ohh and btw. Chances are that you only read the words in <strong>BOLD</strong> because your mind draws your attention to parts that stand out. And also you want to get over reading this article fast and you appreciate if key elements are taken out for you without the unimportant gibberish in between. 😉</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="http://dl.dropbox.com/u/7604030/structure.png">http://dl.dropbox.com/u/7604030/structure.png</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><a href="http://dl.dropbox.com/u/7604030/route.jpg">http://dl.dropbox.com/u/7604030/route.jpg</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></description>
    </item>
    
    <item>
      <title>TDD and Game of Life</title>
      <link>https://skarlso.github.io/2012/07/12/tdd-and-game-of-life/</link>
      <pubDate>Thu, 12 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/07/12/tdd-and-game-of-life/</guid>
      <description><![CDATA[<p>So today at 8-12PM I had a great session with two friends of mine. It was awesome. Like a mini code retreat.</p>
<p>We set down in a musky bar, drank wine and beer and cider, and decided to practice some TDD with the well known problem of <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life" target="_blank">Conway&rsquo;s Game of Life</a>. This challenge is really interesting. I never done it before, ever. So it was a really good practice for me.</p>
<p>So.</p>
<p><strong>In the beginning there was Test</strong></p>
<p>One of my friends and I started out by developing the implementation for the game while the second one was mentoring and couching us. As with any problem I&rsquo;m facing now days, I started with writing a failing test first. I didn&rsquo;t write any kind of production code yet. I wrote a test testing for having the class called game of life.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldHaveClassForGameOfLife</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">GameOfLife</span> <span class="n">gameOfLife</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GameOfLife</span><span class="o">();</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This wasn&rsquo;t compiling of course because I didn&rsquo;t have any kind of GameOfLife class. But intelliJ is so intelligent that I simply pressed Alt+Enter and created the class immediately. The class didn&rsquo;t have anything in it, but I already had a passing test.</p>
<p>So this went on and on and I created one test after another while my other coding friend did the same.</p>
<p><strong>Now the amazing part</strong></p>
<p>I begun working on the Grid. A simple octagonal coordinating system. This was represented in the beginning with a simple two dimensional array with Cells in it.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">Cells</span><span class="o">[][]</span> <span class="n">cells</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cells</span><span class="o">[</span><span class="n">50</span><span class="o">][</span><span class="n">50</span><span class="o">];</span>
</code></pre></td></tr></table>
</div>
</div><p>This of course wasn&rsquo;t dynamic. I didn&rsquo;t care about that yet. I had my grid of cells. These cells were initially all dead.</p>
<p>Now, the interesting part is that as I developed my Grid finding out the Cells neighbours and counting them, my friend worked on the Cells themselves and getting their next state and killing them based on the rules.</p>
<p>We never talked to each other, didn&rsquo;t agree on roles or directions or anything. And even so at the and. We were at a stage where we met in the middle and could merge our codes! Our little game of life evolved with a push of a button. ( Three actually. )</p>
<p>This was simply amazing. Without ever talking about the direction we want to go we created a working code base that could be merged!</p>
<p><strong>It just works</strong></p>
<p>Before TDD I would have tackled this problem much differently. And it would have taken me much more time too. This was like an hour or so.</p>
<p>TDD helped me break down the job into small, manageable tasks. I created and deleted and rewrote tests as I went on and on and developed the algorithm for my Grid and Cell. And eventually the problem slowly unfolded itself right before my eyes. I began to see the connections. I began to see the beauty. I began to understand! This is something I rarely enjoyed previously without using TDD.</p>
<p><strong>Summary</strong></p>
<p>I recommend for you guys to do the same. Just sit down, find a problem, find a coding kata and just do it with TDD. With PROPER TDD.</p>
<p>Here are some good sites for katas and problems:</p>
<p><a href="http://codekata.pragprog.com/" target="_blank"><a href="http://codekata.pragprog.com/">http://codekata.pragprog.com/</a></a></p>
<p><a href="http://www.spoj.pl/problems/classical/" target="_blank"><a href="http://www.spoj.pl/problems/classical/">http://www.spoj.pl/problems/classical/</a></a></p>
<p>Just select a problem and then start cracking on it. Do this every time you have some free time. Like a martial art trainee doing basic exercises and you will get better at problem solving and at TDD too. I promise.</p>
<p>Happy coding and good night!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Journey into an unknown system</title>
      <link>https://skarlso.github.io/2012/06/28/journey-into-an-unknown-system/</link>
      <pubDate>Thu, 28 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/28/journey-into-an-unknown-system/</guid>
      <description><![CDATA[<p>Aka, what you can do if you are facing and unknown framework / system you have to work with for quite some time.</p>
<p><strong>Get intimate</strong></p>
<p>You are going to live with this system for a while. The best thing you can do is getting to know it better. You have to get it to know like you would approche a fine lady. You have to ask it questions look after it, how it feels how its day was. Have to listen to what it tells you, you have to read its diary if necessary.</p>
<p>After a while you will be in a relationship with it. Now it&rsquo;s time to look out for it. Nurture it. Grow it. Care for it. A good piece of software is like a happy lady. It will great you every morning and it will say good by when you go home.</p>
<p>So how do you get to know a new system better.</p>
<p><strong>Debug</strong></p>
<p>In a new system Debugging is like a good old friend who tells you a story about the lady you want to conquer. You find a workflow and execute it in debug mode and follow each and every step that it makes. This way, you will see how each package and class is coupled together. You will be able to see the connections between modules and between calls and functions. It is a good way to see the inner workings.</p>
<p><strong>Ask her girlfriend</strong></p>
<p>Nothing knows more of the system at hand as its best friend. And a good systems best friends are the tests. Take a look at the unit tests, take a look at the integration tests and the acceptance tests. These will tell you more about the system and its actual working strategy than any documentation you can put your hands on. The tests are the closest and next best thing after the real deal.</p>
<p><strong>Conclusion</strong></p>
<p>It&rsquo;s really not that hard to get to know a large system better. Follow a main process with debug, look at the tests, talk to developers, and read some documentation about it. By the time you are done you will be best of friends and you will learn how to handle her the way she likes it. 😉</p>
<p>Hope that helped.</p>
<p>Cheers,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Solution to Wrap Kata</title>
      <link>https://skarlso.github.io/2012/06/26/solution-to-wrap-kata/</link>
      <pubDate>Tue, 26 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/26/solution-to-wrap-kata/</guid>
      <description><![CDATA[<p>My solution to the String Wrap Kata. The goal is to have it wrap a text on a given column width.</p>
<p>It is not the best solution but this is my first try. I did it with TDD so there were tests first, which I&rsquo;m not going to copy in..</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WrapKata</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">wrap</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">,</span> <span class="kt">int</span> <span class="n">columnSize</span><span class="o">)</span> <span class="o">{</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="n">columnSize</span><span class="o">)</span>
            <span class="k">return</span> <span class="n">input</span><span class="o">;</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">wrapLines</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="n">columnSize</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="nf">wrapLines</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">,</span> <span class="kt">int</span> <span class="n">columnSize</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">breakPoint</span> <span class="o">=</span> <span class="n">getBreakPoint</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="n">columnSize</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">head</span> <span class="o">=</span> <span class="n">createHead</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="n">breakPoint</span><span class="o">);</span>
        <span class="n">String</span> <span class="n">tail</span> <span class="o">=</span> <span class="n">createTail</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="n">breakPoint</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">head</span> <span class="o">+=</span> <span class="s">&#34;\n&#34;</span> <span class="o">+</span> <span class="n">wrap</span><span class="o">(</span><span class="n">tail</span><span class="o">,</span> <span class="n">columnSize</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="nf">createTail</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">,</span> <span class="kt">int</span> <span class="n">breakPoint</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">breakPoint</span><span class="o">).</span><span class="na">trim</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="nf">createHead</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">,</span> <span class="kt">int</span> <span class="n">breakPoint</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">substring</span><span class="o">(,</span> <span class="n">breakPoint</span><span class="o">).</span><span class="na">trim</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">getBreakPoint</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">,</span> <span class="kt">int</span> <span class="n">columnSize</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34; &#34;</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">lastIndexOf</span><span class="o">(</span><span class="sc">&#39; &#39;</span><span class="o">,</span> <span class="n">columnSize</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">columnSize</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
    </item>
    
    <item>
      <title>How to read a professional book for slow learners</title>
      <link>https://skarlso.github.io/2012/06/18/how-to-read-a-professional-book-for-slow-learners/</link>
      <pubDate>Mon, 18 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/18/how-to-read-a-professional-book-for-slow-learners/</guid>
      <description><![CDATA[<p>Hi everybody.</p>
<p>Today I want to talk to you about.. Well.. How to read a professional book for slow learners without too much waste of time.</p>
<p>Let us start at the. well. the beginning. How do you normally read a book if you want to memorize it properly. You read it once and then re read the whole thing again until it gets in your head? Or do you have another strategy?</p>
<p>Let me share you mine.</p>
<p>There are a few common practices that you can apply to better your chances of retaining the information that you get out of the pages you read.</p>
<p><strong>Re-reading the right way</strong></p>
<p>Re-reading is good. You definitely can apply that but do it the right way. As you read a chapter, define small chunks of paragraphs or entities or even the whole chapter for re-reading. That means. Read an entity fully. Don&rsquo;t stop at what you don&rsquo;t understand don&rsquo;t bother with it right now just read it. You will get a general overview of what&rsquo;s going on in that segment.</p>
<p>Once done, re-read the whole entity again, but this time pay attention to the details. This time look up what you don&rsquo;t understand. Go with the flow and once you&rsquo;re done go to the next section. This is not all however..</p>
<p><strong>Note taking</strong></p>
<p>As you go and re-read the entity you might want to consider that it is a good time for taking notes. Note taking is really something that you have to learn. Proper note taking that is. Notes that just repeat what ever is in the book or whatever you are reading currently is bad. That is just coping, that wont help you. You have to grasp the fundamentals. You have to take out what is important and forget the rest. You have to apply SMART objectives, little annotations, small sentences WITH YOUR OWN WORDS that will lead you to better understanding of the stuff that you are reading.</p>
<p>There are several methods that you can use for note taking, my favourite is <a href="http://en.wikipedia.org/wiki/Mind_map" title="MInd Mapping" target="_blank">Mind Mapping</a>.</p>
<p><strong>Writing up questions</strong></p>
<p>One other very good practice is simply defining your own questions. Look at the title of a chapter, maybe a small summary of the chapter if that&rsquo;s available. Try to define a set of questions that you want to get out of that chapter. Try to write down at least 3-4 questions that you think will be answered in that segment.</p>
<p>Read the segment. And now try to answer your Own questions without peaking. If you can&rsquo;t you either have to write down some other questions because it wasn&rsquo;t answered in that chapter. Or if it was answered but you still can&rsquo;t answer it from the top of your head that means that you didn&rsquo;t understood that chapter and that you have to re-read that part. If you can answer it, write it down so that it will stuck with you.</p>
<p><strong>Linking information</strong></p>
<p>Your brain is mostly associative. It works the best if it can link information to old information which is already in your head. Mind mapping helps with that. Mind mapping helps identifying old information segments in your brain. Try to find some common ground with the information you have to learn now and the one you already have. Unless your brain works differently you will better remember: &ldquo;Two friends went to the lake fishing at night and they caught three fishes.&quot;; then 23.</p>
<p><strong>Conclusion</strong></p>
<p>Generally speaking re-reading is a good practice but using it alone will sometimes not get you what you want. Re-reading the whole book isn&rsquo;t going to help. Writing notes helps, but use your own wording, formatting, DON&rsquo;T COPY!</p>
<p>I hope that help a bit to you guys out there who don&rsquo;t have a photographic memory.</p>
<p>Cheers,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Don’t throw Exception</title>
      <link>https://skarlso.github.io/2012/06/13/dont-throw-exception/</link>
      <pubDate>Wed, 13 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/13/dont-throw-exception/</guid>
      <description><![CDATA[<p>Hi.</p>
<p>Today I want to talk about a common problem in many frameworks I encountered over the course of my carrier as a Java dev / automation engineer, whatnot.</p>
<p>Throwing Exceptions. That is in your method you have something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertMethodNameHere</span><span class="o">(</span><span class="n">String</span> <span class="n">param</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{}</span>
</code></pre></td></tr></table>
</div>
</div><p>This is bad. And I will tell you in short forms why.</p>
<p><strong>Hides exceptions</strong></p>
<p>This one should be obvious. When a method throws exception you can never be sure what kind of exceptions it handles. It will hide what problems it can encounter. It will hide possible threats and will generally mean nothing to you when it fails.</p>
<p><strong>Hides functionality</strong></p>
<p>One of the things you can do will come up with a method that throws at least six exception. Well guess what. That will tell you that the method has DESIGN ISSUES! The first rule of software development is that a method should do only one thing! Well if it throws six exceptions chances are it does more then one.</p>
<p><strong>Hard to debug</strong></p>
<p>You wont have a meaning full exception if it fails immediately. You will have to go through lines of codes and stack traces to find out what the hell happened and what threw what kind of exception where. That is just simply stupid. Why give yourself a hard time?</p>
<p><strong>So what to do instead?</strong></p>
<p><strong>Meaning full exceptions</strong></p>
<p>If you have to throw. Throw meaning full exceptions. Things like: LoginFailedExpcetion(String username, String password); In the message write:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;Failed login with username: %s; password: %s&#34;</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</code></pre></td></tr></table>
</div>
</div><p>When this fails you will immediately know what happened without miles of stack trace to run through.</p>
<p>When you go ahead and start to re-factor your code to handle exceptions properly you will end up with methods throwing six - seven exceptions. Don&rsquo;t be afraid. That means that you finally are able to see that your code is doing many things that it is not supposed to do. Start by extracting bits and pieces of your code into smaller segments that throw a max of two exceptions. Write unit tests around the function and start running them as you re-factor. See what fails so you can track your changes as you go.</p>
<p>A general good advice is that your method should throw a maximum of <strong>TWO</strong> exception. If you have more, you are doing something more then you should. Refactor / Extract that bit into a smaller function.</p>
<p><strong>Handling exceptions</strong></p>
<p>What you really want to do is create a Layer that you will be using to capture and handle exceptions. You can than take that layer and hide it deep deep into your framework so that you never ever see it again. Just like with switch.</p>
<p>As you go you will have layers of layers of exceptions. You will have features that depend on each other and talk to each other in some ways.</p>
<p>Meaning full exception will help you find out what broke why. For example you have Login that throws a Login exception. On top of that you have an order that handles OrderFailedException. You will have an easy time seeing that the order failed because the login failed. Because you handled your login exception in the Login Layer. And you handled your OrderException in the order layer. There are no mixes. Keep it clean and keep it where it belongs.</p>
<p><strong>Conclusion</strong></p>
<p>Exceptions are part of Java just like String or int or long is. You use these wisely so why don&rsquo;t you apply that same logic to your Exception handling? Don&rsquo;t be afraid of having 20-25 exception classes. Group them together or leave them in their respective packages or have them in a deep layer but HAVE THEM. They WILL save time and time is always money. So they will save you money in the end when an error occurs. And errors will always occur.</p>
<p>Thanks for reading,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How to write a professional blog</title>
      <link>https://skarlso.github.io/2012/06/13/how-to-write-a-professional-blog/</link>
      <pubDate>Wed, 13 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/13/how-to-write-a-professional-blog/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>I want to write a little bit about writing a professional blog.</p>
<p><strong>Early steps</strong></p>
<p>Let&rsquo;s first talk about what you understand about professional blog. It&rsquo;s either a semi professional one, that mixes life with professionalism, like chess, programming, testing, painting, drawing, engineering whatever your profession is. Or it can be a purely professional one without your life getting involved in it.</p>
<p>Either way you have to decide at the beginning. Why? Because that&rsquo;s the kind of people you will attract. If you want to attract people from your profession then you have to decide that you will write plenty of your profession into your blog. If you want to attract hobbists more then you write about your profession AND daily life or other situations that are essentially irrelevant. Of course you can get both in both versions but the numbers will be different.</p>
<p><strong>Commiting</strong></p>
<p>A professional blog is a commitment. Start one only when you know you can &ldquo;finish&rdquo; it. It is a constant commitment that you HAVE to do even if you are sick, lazy, don&rsquo;t have time etc, etc.</p>
<p>I know the excuses because I made them myself a couple of times too, like: I don&rsquo;t have time. I write only when I want to. I write for myself, I don&rsquo;t care about people. I don&rsquo;t have an idea right now. I have better things to do. I don&rsquo;t feel like writing.</p>
<p>And so on and so fort. Truth is people. These are usually bull.</p>
<p><strong>1.</strong> You have time. Whenever you TRULY want to write you will make the 20 minutes to at least write a small post. Why? Because this is a professional blog. You WANT to get noticed. You WANT to help people. You started it because you wanted to make a difference. You wanted people to know you to praise you to acknowledge you. Guess what. If you are not writing anything, it wont happen. There are people out there with 4 children and a wife and he DOES find the time to write a blog.</p>
<p><strong>2.</strong> That would be true if you wouldn&rsquo;t be committed to your blog. Don&rsquo;t forget, this is a professional blog. This is something that you are writing to make people recognize you. Blogging is about discipline. You have to set aside some time, like 30 minutes / 1 hour to write something in your blog. Why 1 hour? Because of the research that you have to do before hand. I talk about that later. Anyways. This is a commitment. If you don&rsquo;t take it seriously, then don&rsquo;t write it. But then don&rsquo;t wait for people getting to know you, because they wont.</p>
<p><strong>3.</strong> This is just plain bull. If you write for yourself make your blog private and be done with it. &lsquo;nough said.</p>
<p><strong>4.</strong> Now this is something that we all face. In programming, in engineering in whatever your profession is, you will have a point in life, several actually, in which you don&rsquo;t know what to write about. That is true. It&rsquo;s common and it&rsquo;s called writers block. There are several ways of over coming that you can Google it. But don&rsquo;t forget this is a professional blog. Try to read a couple of others. Try to merit from real life, try to sit down and think quietly for a couple of minutes. Meditate, try to see connections where you didn&rsquo;t look before. Like building a robot for helping you quit smoking. How? Easy. Smoke detector. When he detects smoke comes out and sprinkles you with water. Or, since this is a testing blog, if you ran out of ideas what you want to write about testing, try this: Read a few magazines about programming, about real life scenarios, about hostage situations, about catastrophes, about hardware failures, about how your neighbor failed to pay his rent. These ALL are great sources for identifying testing opportunities and drawing connections with the software world. What I really found to be a good practice is going around having a notebook in your pocket and the moment I&rsquo;m hit with an idea I will write it into that notebook. I don&rsquo;t like using a phone, or other kind of electronic device for that. Why? Because the action of taking out my book, getting my pencil and actually writing something down physically makes me remember it better. But hey. Whatever suits you best. Just do it.</p>
<p>I could go on and on to from where to merit ideas for a blog, it could even be a whole separate post but I will leave somethings to figure out for yourself.</p>
<p><strong>5.</strong> This correlates to directly to line 1 and line 6. If you have a writers block or you are just plain lazy or you don&rsquo;t want to write at all, you will say lines like these.</p>
<p><strong>6.</strong> See <strong>5.</strong></p>
<p><strong>Conclusion</strong></p>
<p>Writing a professional blog is about commitment and discipline. Like chess, like drawing, like your own profession it needs time, it needs nourishment it needs petting, and nurturing and loving and hating and practicing. You started this blog to reach something. You started it for yourself so you could track your progress and knowledge. You started it because writing down ideas makes you remember them better or it will make more sense to you. You started because you want to get acknowledged. You started because you want to share your experience with beginners. You started because you want all of the above.</p>
<p>Then do it. Don&rsquo;t look for excuses. Writing a GOOD professional blog is hard. It will teach you much. It will make you more disciplined. It will increase your will power. It will increase your understanding of your craft. It will help other beginners who seek advice. It will help to make a name for yourself. It will help in an interview. It will generally be useful when ever you want to record a major even or idea in your life.</p>
<p>Also don&rsquo;t forget. You are having fun while you are doing it. You love it, and you know you love it, because if you wouldn&rsquo;t, you wouldn&rsquo;t really start in the first place.</p>
<p>Oh and by the way. Not every single one of your posts must be a small book sized one. You ARE allowed to write smaller pieces in a hurry if you just wanted to share a general idea.</p>
<p>Hope you liked this and I hope it could help you get started or to keep you on track.</p>
<p>Have a nice day,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Making your code understandable</title>
      <link>https://skarlso.github.io/2012/06/13/making-your-code-understandable/</link>
      <pubDate>Wed, 13 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/13/making-your-code-understandable/</guid>
      <description><![CDATA[<p>Hi!</p>
<p>I&rsquo;ve seen this many times over and over again. Many people have wrote books about it already. Like Uncle Bob&rsquo;s Clean Code. Like Pragmatic Programmer by Andrew Hunt and David Thomas. What makes your code understandable to others.</p>
<p>Is it <strong>Comments</strong>?</p>
<p>No. It&rsquo;s not comments. If your code could be read properly you wouldn&rsquo;t need comments to explain what it does. Like Uncle Bob said. A good code doesn&rsquo;t contain surprises. It does exactly what you would think it should do on the next line. It doesn&rsquo;t have curves and misinformation. It doesn&rsquo;t have plots and turns of events like a good crime book. No. Good code is a like a boring soap opera with predictable plot and boring plain characters who don&rsquo;t change there behavior based on circumstances.</p>
<p>Good code is easy to read. It flows like the river, falls like a waterfall, cooks like bacon and crosses the road like a professional chicken. If I read line A the next line should be B. If it is a Z or a :@L$. I wont be happy.</p>
<p>So then what makes it understandable?</p>
<p>On simple word: <strong>Readability</strong>.</p>
<p>What makes it readable?</p>
<p>Small chunks of functions that have descriptive names as few parameters as possible and do only ONE thing at a time. Of course this is not all there is. However it&rsquo;s the best thing to begin with. A function called &ldquo;doStuff&rdquo; that has a complexity of 300 has three fors, two switches and a dozen ifs isn&rsquo;t really helping. Now if you look at doStuff and try to give a name based on the job of the function and come up with &ldquo;propageXWithFiveUnlessYEqualsTheSumOfZPlusW&rdquo; you will know it does more then one thing.</p>
<p>If you see a really complex function in your production code or hobby code ask yourself: &ldquo;Should this really be like 300 lines long and with a complexity of 200??&rdquo; And as you speak this out loud you will know the answer already. Break it up. Have like a dozen smaller functions that will be better I promise you. Take out parts. Write unit tests to it that help with re-factoring. Break it down into as small chunks as possible. It will be worth it. It will increase understand-ability, readability and maintainability.</p>
<p>Hope that helped.</p>
<p>Thank you for reading and as always,</p>
<p>Have a nice Day,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>JMS Connection setup and Framework</title>
      <link>https://skarlso.github.io/2012/03/04/jms-connection-setup-and-framework/</link>
      <pubDate>Sun, 04 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/03/04/jms-connection-setup-and-framework/</guid>
      <description><![CDATA[<p>Hello chumps.</p>
<p>Today I want to write about jms connection testing with a small framework. I wrote a small thing using a factory object model. It&rsquo;s a lead, a proof of concept. You can use this to go onward.</p>
<p>First, let&rsquo;s begin with the JMS connection it self.</p>
<p><strong>JMS Connection</strong></p>
<p>First rule of thumb is: &ldquo;Don&rsquo;t wait for a response when dealing with JMS queues.&rdquo; How so? Because, a JMS queue is asynchronous so you wont get back anything. There are however two ways of checking if it was a success or not.</p>
<p>1: Check your database. The service you are trying out probably records something in the database, right? Check it. You can use a simple JDBC connection, or a Postgres connection or whatever your choice of database is.</p>
<p>2: You can monitor use the log of your choice of service provider. If there is an exception the moment you send something, you can be sure it is received. Just the format is not correct. This is of course based on how your service handles exceptions.</p>
<p>So let&rsquo;s get down to business.</p>
<p>First, there is a really good article on how to create a JMS connection.</p>
<p>This is the link for it: <a href="http://www.javablogging.com/simple-guide-to-java-message-service-jms-using-activemq" title="Simple JMS How To">Simple Guide to Java message service JMS using ActiveMQ</a></p>
<p>Itt will tell you everything you need to know about creating a connection and waiting for a response.</p>
<p>I will tell you now how to use this information in a real live environment.</p>
<p>In a real environment you will be using a queue which has certain settings that will not allow you to &ldquo;join&rdquo; it, or creating it. And you need to get the name of the queue and certain settings, like the destination URL.</p>
<p>First, the tool you are going to use is called JConsole. JConsole is a tool to monitor applications. It&rsquo;s tool to monitor the JVM. I wont go into details about it since there are numerous descriptions about it. It is part of the java installation.</p>
<p>So after firing it up and giving it a connection url which would look like this: &lsquo;service:jmx:rmi:///jndi/rmi://hostName:portNum/jmxrmi&rsquo;, you would go ahead and search on the TAB:<strong>Threads</strong>.</p>
<p>Look for a Thread that is labelled like this: <YourConnectionLayer> Transport Server: tcp://0.0.0.0: <port></p>
<p>This will be your destination url.</p>
<p>In the blog the guy is using ActiveMQ. It&rsquo;s your best guess. It&rsquo;s lightweight, it&rsquo;s fast it&rsquo;s easy. Go for it.</p>
<p>So your Destination would look like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">ConnectionFactory</span> <span class="n">connectionFactory</span> <span class="o">=</span>
            <span class="k">new</span> <span class="n">ActiveMQConnectionFactory</span><span class="o">(</span><span class="s">&#34;&lt;yourserviceparameter&gt;://tcp://0.0.0.0:&lt;port&gt;&#34;</span><span class="o">);</span>
    <span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">connectionFactory</span><span class="o">.</span><span class="na">createConnection</span><span class="o">();</span>
    <span class="n">connection</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</code></pre></td></tr></table>
</div>
</div><p>After that you will need the queue name which you can get as easy as this. Go to the TAB <strong>MBeans</strong>. There you can see, if you are using ActiveMQ, you will see something like this : org.active.activemq. Open this up and you will see under localhost a number of queues that your server has configured. Open up one of them and copy the queue name in the createQueue.</p>
<p>Use it like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">Destination</span> <span class="n">destination</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createQueue</span><span class="o">(</span><span class="s">&#34;&lt;queue name&gt;&#34;</span><span class="o">);</span>
</code></pre></td></tr></table>
</div>
</div><p>Of course if your service is configured properly you wont have any access to it. Use the connection like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">connection</span> <span class="o">=</span> <span class="n">connectionFactory</span><span class="o">.</span><span class="na">createConnection</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">,</span> <span class="s">&#34;password&#34;</span><span class="o">);</span>
</code></pre></td></tr></table>
</div>
</div><p>You will have now logged in with the proper user.</p>
<p>Now you can send the message. You have everything configured.</p>
<p><strong>Framework</strong></p>
<p>Let&rsquo;s speak about the framework you will need to properly use this technology.</p>
<p>One of the paradigms for programming is design to interfaces. If you need a proper working framework, your ave to design with the mind set to changing pieces of code. Thinking about what would change the most. Your connection settings. You want a framework which can use any kind of connection. Not just JMS but whatever connection you would like. It could be a synchronous one. Or a database one. Or a JMS. Doesn&rsquo;t matter. You are only interested in a message sent or a connection, or whatever you want.</p>
<p>So let&rsquo;s get to it.</p>
<p>Interface:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">IConnection</span> <span class="o">{</span>
	<span class="kt">void</span> <span class="nf">sendMessage</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This is sample connection interface. You could have numerous templates here.</p>
<p>You will be using an object factory pattern here. Your implementer will be taken for a Java Property file. But it can be taken from whatever configuration you like. XML maybe, or a database even.</p>
<p>Let&rsquo;s see you connection factory:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConnFactory</span> <span class="o">{</span>

	<span class="kd">static</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Logger</span><span class="o">();</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="n">IConnection</span> <span class="nf">getImplementer</span><span class="o">()</span>
	<span class="o">{</span>
		<span class="n">Properties</span> <span class="n">prop</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>

		<span class="k">try</span>
		<span class="o">{</span>
			<span class="n">prop</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&#34;conf/implementer.property&#34;</span><span class="o">));</span>
		<span class="o">}</span>
		<span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">io</span><span class="o">)</span>
		<span class="o">{</span>
			<span class="n">logger</span><span class="o">.</span><span class="na">Log</span><span class="o">(</span><span class="s">&#34;Could not find property file: &#34;</span> <span class="o">+</span> <span class="n">io</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
		<span class="o">}</span>

		<span class="n">String</span> <span class="n">implementerClass</span> <span class="o">=</span> <span class="n">prop</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&#34;implementer&#34;</span><span class="o">);</span>

		<span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">iConnect</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

		<span class="k">try</span>
		<span class="o">{</span>
			<span class="n">iConnect</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">implementerClass</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">catch</span> <span class="o">(</span><span class="n">ClassNotFoundException</span> <span class="n">ce</span><span class="o">)</span>
		<span class="o">{</span>
			<span class="n">logger</span><span class="o">.</span><span class="na">Log</span><span class="o">(</span><span class="s">&#34;Class could not be found: &#34;</span> <span class="o">+</span> <span class="n">ce</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
		<span class="o">}</span>

		<span class="n">IConnection</span> <span class="n">connection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

		<span class="k">try</span>
		<span class="o">{</span>
			<span class="n">connection</span> <span class="o">=</span> <span class="o">(</span><span class="n">IConnection</span><span class="o">)</span> <span class="n">iConnect</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
		<span class="o">}</span>
		<span class="k">catch</span> <span class="o">(</span><span class="n">IllegalAccessException</span> <span class="n">ie</span><span class="o">)</span>
		<span class="o">{</span>
			<span class="n">logger</span><span class="o">.</span><span class="na">Log</span><span class="o">(</span><span class="s">&#34;Illegal access excpetion: &#34;</span> <span class="o">+</span> <span class="n">ie</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>

		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InstantiationException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>

			<span class="n">logger</span><span class="o">.</span><span class="na">Log</span><span class="o">(</span><span class="s">&#34;Instatiation exception occured. &#34;</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
		<span class="o">}</span>

		<span class="k">return</span> <span class="n">connection</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Easy enough, right? Class.forname will instantiate the class name you have in the property file. This could be something like this: com.packagename.ClassName. Doesn&rsquo;t matter to you. You can add some typeof checks, or instanceof checks, whatever you like. Or you can use <Type> generics.</p>
<p>Let&rsquo;s get to the concrete implementation:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JMSConnectionImpl</span> <span class="kd">implements</span> <span class="n">IConnection</span> <span class="o">{</span>
    <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Logger</span><span class="o">();</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendMessage</span><span class="o">()</span>
    <span class="o">{</span>

   	<span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">.</span>
        <span class="o">.</span>
        <span class="o">.</span>
        <span class="k">finally</span>
        <span class="o">{</span>
            <span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span>

    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Simple enough. Here you have a concrete implementation of your collection and your sender class.</p>
<p>And the simple usage facility of this is. simple too:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">IConnection</span> <span class="n">iConnection</span> <span class="o">=</span> <span class="n">ConnFactory</span><span class="o">.</span><span class="na">getImplementer</span><span class="o">();</span>

    <span class="n">iConnection</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">();</span>
</code></pre></td></tr></table>
</div>
</div><p>Simple enough too, right? So what happens here? You have a factory that will give you back any kind of implementation you are writing in you property file. You don&rsquo;t care what the implementation is in your test. You don&rsquo;t care what it&rsquo;s name is. You don&rsquo;t care what it&rsquo;s result is. Okay, you care about the result, but that&rsquo;s another history since you will check that elsewhere.</p>
<p>There you go. If any question occurs, please don&rsquo;t hesitate to ask.</p>
<p>Thanks for reading!</p>
]]></description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://skarlso.github.io/2012/02/27/configuration/</link>
      <pubDate>Mon, 27 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/02/27/configuration/</guid>
      <description><![CDATA[<p>When I see something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">string</span> <span class="n">DATABASELINK</span> <span class="o">=</span> <span class="s">&#34;linkhere&#34;</span><span class="o">;</span>
        <span class="o">.</span>
        <span class="o">.</span>
        <span class="o">.</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>It sends a small, but chilling shiver down my spine. Just. don&rsquo;t. There are a lot of possibilities to use configuration in Java. Java property files. Xml. Xml serialization. CSV file. Whatever suits you best, but this? DON&rsquo;T!</p>
]]></description>
    </item>
    
  </channel>
</rss>