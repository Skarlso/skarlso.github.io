<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tdd on Ramblings of a build engineer</title>
    <link>https://skarlso.github.io/categories/tdd/</link>
    <description>Recent content in Tdd on Ramblings of a build engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 26 May 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://skarlso.github.io/categories/tdd/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>TDD is Dead â€“ Not really</title>
      <link>https://skarlso.github.io/2014/05/26/tdd-is-dead-not-really/</link>
      <pubDate>Mon, 26 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/05/26/tdd-is-dead-not-really/</guid>
      <description>&lt;p&gt;Is TDD dead?&lt;/p&gt;

&lt;p&gt;Not really. So let&amp;#8217;s talk about this topic for a little bit.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m sure you already read a gazillion posts about this debate but frankly I&amp;#8217;m writing this for myself, to rant a little bit, you know&amp;#8230; Because somebody is wrong on the internet and I must intervene.&lt;/p&gt;

&lt;p&gt;So first of all, the hashtag #tddisdead (and I will use it shamelessly as well). This is clearly an attempt to get as many peoples attention as you can. TDD is NOT DEAD. Obviously since it has soooo many supporters how could it be dead? It&amp;#8217;s like asking, is Design Patterns dead? Or is Functional Automation dead? Or is Oreo cookies dead?&lt;/p&gt;

&lt;p&gt;No, it&amp;#8217;s not dead. And it won&amp;#8217;t ever be dead. It will maybe change into something new, something better even, but it will never be dead. So let&amp;#8217;s skip that part.&lt;/p&gt;

&lt;p&gt;Now, about the &lt;strong&gt;debate&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I haven&amp;#8217;t hear so much bull spoken for this long since I watched the political debate of two fractions in my home country. The right wing extremists against the left wing&amp;#8230;. I don&amp;#8217;t know whats. And it was just that. A political debate. It had no merit and no value whatsoever. At all. Nothing.&lt;/p&gt;

&lt;p&gt;And right in the middle &lt;strong&gt;DHH&lt;/strong&gt; says this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8220;&amp;#8230;you&amp;#8217;re not done until you also have tests for a piece of functionality &amp;#8212; I&amp;#8217;m completely on board with that.&amp;#8221;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That made the whole conversation completely irrelevant.&lt;/p&gt;

&lt;p&gt;Every counter against TDD I heard was &lt;strong&gt;bull&lt;/strong&gt;. Not in that debate, in general. People are either too lazy to write them, just don&amp;#8217;t want to get out of their comfort zone, don&amp;#8217;t really care about tests, or don&amp;#8217;t really care about quality or under time pressure ( I get to this later. ).&lt;/p&gt;

&lt;p&gt;Which brings me to my next point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quality&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;People seem to not care about quality that much. Would they, they would understand that having a bulletproof west will save your life when you get shot in the chest with a 357 magnum. You can flush out early design flaws you can detect early bugs and do a better system design.&lt;/p&gt;

&lt;p&gt;Sure if you are the most intelligent man on the planet maybe you can come up with a perfect system on the first draft and then implement it flawlessly so that it doesn&amp;#8217;t fall apart in two months time. But most people can&amp;#8217;t. Most people make errors on the way.&lt;/p&gt;

&lt;p&gt;And yes, writing tests can be hard. But guess what? If writing a test is hard because that part of the system is complicated, than it will be that part of the system which will react the worst to change. And only change is constant. Which brings me to the next item&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time constraints&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So your manager is sitting right next to you and saying come on we are paying you to write code and not tests so do it! And you have to have a feature done today but if you write a suite of tests you&amp;#8217;ll only finish tomorrow. Sure, your estimate at that point will become a very quick one because you make a sacrifice of trust.&lt;/p&gt;

&lt;p&gt;And then the next story comes along and you say&amp;#8230; &lt;em&gt;&amp;#8220;Sure I can do that as well. No problem I know how my system works, right? Hmm&amp;#8230; why the hell did that break all of a sudden? I didn&amp;#8217;t change anything in that module&amp;#8230; Ahh damn it I said I&amp;#8217;ll be done today, so let&amp;#8217;s just fix this quickly and then move on to the next card.&amp;#8221;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And the next story comes along&amp;#8230; &lt;em&gt;&amp;#8220;Sure I can do that&amp;#8230; wait a minute&amp;#8230; Didn&amp;#8217;t that part brake already twice? Damn, better refactor. Ohh shit, why is that now breaking???? Damn it I said I&amp;#8217;ll be done tomorrow, better patch it, and then move on. Hmm let&amp;#8217;s write a test here to make sure this does not break. Ohhh damn I need PowerMock for that stuff since it&amp;#8217;s in another module. Why the hell is that there? Should it be here in the first place since it&amp;#8217;s somehow used by that other class there? Interesting. Let&amp;#8217;s refactor and put it in here so I can mock it. Ahhhh f*ck now all the rest of the system is not working. Damn, I&amp;#8217;ll just use PowerMock. Shit. Checkstyle error. PowerMock is not allowed?? What?? Who the f*ck says that?&amp;#8221;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You get my drift. And suddenly you end up with estimates of &lt;strong&gt;WEEKS&lt;/strong&gt;!!!! instead of days / hours for a simple story.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finishing it up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This a rant only. It&amp;#8217;s my personal opinion, experience and observation of a 10 year time period in Software Testing. Starting with at least a Weak Skeleton and a few upfront tests will help you in the long run. Writing at least ONE &amp;#8211; TWO acceptance tests WILL help you understand business logic better. Writing ONE or TWO unit tests will help you understand your logic better. I&amp;#8217;m not saying write a whole damn suite of tests I can understand you don&amp;#8217;t want to do that, but for quality&amp;#8217;s sake write at least a couple.&lt;/p&gt;

&lt;p&gt;You will love it, I promise you that.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Coderetreat London</title>
      <link>https://skarlso.github.io/2012/09/30/89/</link>
      <pubDate>Sun, 30 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/09/30/89/</guid>
      <description>&lt;p&gt;Hello everybody.&lt;/p&gt;

&lt;p&gt;So yesterday I was on a little gathering called &lt;a href=&#34;http://coderetreat.org/&#34; title=&#34;Coderetreat&#34; target=&#34;_blank&#34;&gt;Coderetreat&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you look at the link you can read everything about it. If not, I&amp;#8217;ve provided a short description.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What it is about?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So what is codereatreat about? In short it&amp;#8217;s about programmers getting together and honing and practicing there skills in order to become more at what they are doing. It&amp;#8217;s a practice run with great people. TDDing one problem the whole day long with constantly applied constraints.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem domain&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Usually it&amp;#8217;s some kind of coding kata. This sessions problem was &lt;a href=&#34;http://en.wikipedia.org/wiki/Conway&#39;s_Game_of_Life&#34; target=&#34;_blank&#34;&gt;Convey&amp;#8217;s Game Of Life&lt;/a&gt;. It&amp;#8217;s a well known problem which you can&amp;#8217;t really solve in the given amount of time if you do it right. But that&amp;#8217;s not the goal anyways. The goal is the journey itself as was formulated by our facilitator.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Process&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So what was going on there anyways? At 10:00AM the whole thing begun. Thirty developers set down, choose partners for TDD, and started to tackle the problem at hand. There were 6 sessions which lasted 45 minutes. After that a short retro and then a 10 minute break. On every session the code was deleted and rewrote from scratch. The first two sessions were introduction. And then the fun started with the constraints&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Constraints&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;first&lt;/strong&gt; one was that we were not allowed to use any loops when solving the problem. That was a tricky one. You had several options to go on but me not being a proper developer I couldn&amp;#8217;t think of too many. Well that&amp;#8217;s why I was there wasn&amp;#8217;t I? To learn. I came up with the idea of linking the cells together so when one is invalidated it notifies all his neighbours through a call. But I wasn&amp;#8217;t sure how to implement it. Also I choose a group which worked in ruby and it was a long time ago I wrote something in that language. It was a group effort but eventually we came up with a prototype that proved the first rule. I was happy!&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;second&lt;/strong&gt; one was &lt;a href=&#34;http://coderetreat.org/facilitating/activities/ping-pong&#34; target=&#34;_blank&#34;&gt;TDD ping pong&lt;/a&gt;. That was a really interesting experience for me. I grouped with a guy who had already experience in code retreat session so he didn&amp;#8217;t spare me. In addition we did silent ping pong and it was HARD! It was really hard for me to formulate my thoughts JUST in tests. So that he can get what I want and understand and agree on the design at the same time. So we ended up throwing tests at each other with the thought: Here try to solve this you bastard! It was great fun indeed!&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;third&lt;/strong&gt; constraint was &amp;#8216;No conditions.&amp;#8217;. That was the hardest for me. Coming up with recursion for the first one and having a fight in the second was nothing compared to this. Conditions are a fundamental structure of programming. It&amp;#8217;s logic basically. You can have the cells as objects and then a world of cells linked together but you still have to somehow decide if they live or die based on neighbour count.&lt;/p&gt;

&lt;p&gt;So how do you avert it? I worked with a guy in this one who was good at low level thinking. He came up with the solution of using expressions as returns for the status:&lt;/p&gt;

&lt;div class=&#34;wp_syntax&#34;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&#34;line_numbers&#34;&gt;
        &lt;pre&gt;1
&lt;/pre&gt;
      &lt;/td&gt;
      
      &lt;td class=&#34;code&#34;&gt;
        &lt;pre class=&#34;java&#34; style=&#34;font-family:monospace;&#34;&gt;    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;neighbours &lt;span style=&#34;color: #339933;&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;neighbours &lt;span style=&#34;color: #339933;&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;neighbours &lt;span style=&#34;color: #339933;&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;neighbours &lt;span style=&#34;color: #339933;&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;It&amp;#8217;s brilliant and easy if you see it like this but I was so used to thinking in higher structure and so used to the features given by the language, that I couldn&amp;#8217;t have come up with this in the given amount of time. So he had the idea and I coded it down. And this is actually working&amp;#8230; It returns true or false based on the neighbour count. And we could use that return value to change the state of the cell afterwords.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;fourth&lt;/strong&gt; and last task was that everybody stand up and finish someones else code. Practicing how to handle &amp;#8220;legacy&amp;#8221; code and a free for all session to finish the job.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I learned?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Basically I learned that I really like code. I like writing it, thinking about it, solving problems and creating good, clean, clever solutions. I might be a tester by profession and I love being a tester, but there is a coder somewhere in here too who enjoyed every bit of that session yesterday. Of course this is not the only thing I took from that. I learned good technics. I learned that I&amp;#8217;m in a box and I need to think outside of it too. I constraint myself by depending on the language I use. And that I need to keep up practicing alas I loose my ability to solve complex logical problems by coding.&lt;/p&gt;

&lt;p&gt;A coding kata a day helps keeping the bugs away. ðŸ˜‰&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;End thoughts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All in all the day was absolutely awesome. Great lunch and environment was provided by the host &lt;a href=&#34;http://www.national-lottery.co.uk/&#34; target=&#34;_blank&#34;&gt;Camelot&lt;/a&gt; and our fearless leader who walked around all day helping out and coordinating the whole thing &lt;a href=&#34;www.meza.hu&#34; target=&#34;_blank&#34;&gt;Marton &amp;#8216;Meza&amp;#8217; Meszaros&lt;/a&gt;. A big thank you and a lot of respect for doing it all day long.&lt;/p&gt;

&lt;p&gt;Unfortunately because of my broken ankle I couldn&amp;#8217;t stay for the drinks but if you ever get to a session like this I strongly recommend staying the whole day AND the night. And not just &amp;#8217;till you stuffed your belly with free food and booze. ðŸ˜‰&lt;/p&gt;

&lt;p&gt;And the top of the cherry is a great time laps of the whole day which can be seen here: &lt;a href=&#34;http://www.youtube.com/watch?v=qBvMBAOQD5U&#34; target=&#34;_blank&#34;&gt;Coderetreat 29.09.12&lt;/a&gt;. Enjoy as we had!&lt;/p&gt;

&lt;p&gt;As always,&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TDD and Game of Life</title>
      <link>https://skarlso.github.io/2012/07/12/tdd-and-game-of-life/</link>
      <pubDate>Thu, 12 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/07/12/tdd-and-game-of-life/</guid>
      <description>&lt;p&gt;So today at 8-12PM I had a great session with two friends of mine. It was awesome. Like a mini code retreat.&lt;/p&gt;

&lt;p&gt;We set down in a musky bar, drank wine and beer and cider, and decided to practice some TDD with the well known problem of &lt;a href=&#34;http://en.wikipedia.org/wiki/Conway&#39;s_Game_of_Life&#34; target=&#34;_blank&#34;&gt;Conway&amp;#8217;s Game of Life&lt;/a&gt;. This challenge is really interesting. I never done it before, ever. So it was a really good practice for me.&lt;/p&gt;

&lt;p&gt;So&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In the beginning there was Test&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of my friends and I started out by developing the implementation for the game while the second one was mentoring and couching us. As with any problem I&amp;#8217;m facing now days, I started with writing a failing test first. I didn&amp;#8217;t write any kind of production code yet. I wrote a test testing for having the class called game of life.&lt;/p&gt;

&lt;div class=&#34;wp_syntax&#34;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&#34;line_numbers&#34;&gt;
        &lt;pre&gt;1
2
3
4
&lt;/pre&gt;
      &lt;/td&gt;
      
      &lt;td class=&#34;code&#34;&gt;
        &lt;pre class=&#34;java&#34; style=&#34;font-family:monospace;&#34;&gt;    @Test
    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;void&lt;/span&gt; shouldHaveClassForGameOfLife&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;
        GameOfLife gameOfLife &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;new&lt;/span&gt; GameOfLife&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This wasn&amp;#8217;t compiling of course because I didn&amp;#8217;t have any kind of GameOfLife class. But intelliJ is so intelligent that I simply pressed Alt+Enter and created the class immediately. The class didn&amp;#8217;t have anything in it, but I already had a passing test.&lt;/p&gt;

&lt;p&gt;So this went on and on and I created one test after another while my other coding friend did the same.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now the amazing part&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I begun working on the Grid. A simple octagonal coordinating system. This was represented in the beginning with a simple two dimensional array with Cells in it.&lt;/p&gt;

&lt;div class=&#34;wp_syntax&#34;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&#34;line_numbers&#34;&gt;
        &lt;pre&gt;1
&lt;/pre&gt;
      &lt;/td&gt;
      
      &lt;td class=&#34;code&#34;&gt;
        &lt;pre class=&#34;java&#34; style=&#34;font-family:monospace;&#34;&gt;    Cells&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#91;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#93;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#91;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#93;&lt;/span&gt; cells &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;new&lt;/span&gt; Cells&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#91;&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#93;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#91;&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#93;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This of course wasn&amp;#8217;t dynamic. I didn&amp;#8217;t care about that yet. I had my grid of cells. These cells were initially all dead.&lt;/p&gt;

&lt;p&gt;Now, the interesting part is that as I developed my Grid finding out the Cells neighbours and counting them, my friend worked on the Cells themselves and getting their next state and killing them based on the rules.&lt;/p&gt;

&lt;p&gt;We never talked to each other, didn&amp;#8217;t agree on roles or directions or anything. And even so at the and&amp;#8230; We were at a stage where we met in the middle and could merge our codes! Our little game of life evolved with a push of a button. ( Three actually. )&lt;/p&gt;

&lt;p&gt;This was simply amazing. Without ever talking about the direction we want to go we created a working code base that could be merged!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It just works&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before TDD I would have tackled this problem much differently. And it would have taken me much more time too. This was like an hour or so.&lt;/p&gt;

&lt;p&gt;TDD helped me break down the job into small, manageable tasks. I created and deleted and rewrote tests as I went on and on and developed the algorithm for my Grid and Cell. And eventually the problem slowly unfolded itself right before my eyes. I began to see the connections. I began to see the beauty. I began to understand! This is something I rarely enjoyed previously without using TDD.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I recommend for you guys to do the same. Just sit down, find a problem, find a coding kata and just do it with TDD. With PROPER TDD.&lt;/p&gt;

&lt;p&gt;Here are some good sites for katas and problems:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codekata.pragprog.com/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://codekata.pragprog.com/&#34;&gt;http://codekata.pragprog.com/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.spoj.pl/problems/classical/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.spoj.pl/problems/classical/&#34;&gt;http://www.spoj.pl/problems/classical/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just select a problem and then start cracking on it. Do this every time you have some free time. Like a martial art trainee doing basic exercises and you will get better at problem solving and at TDD too. I promise.&lt;/p&gt;

&lt;p&gt;Happy coding and good night!&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>