<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/hugo/</link>
    <description>Recent content in Hugo on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Tue, 19 Mar 2019 22:01:00 +0100</lastBuildDate>
    <atom:link href="https://skarlso.github.io/categories/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Deploy a Hugo Blog Github Actions</title>
      <link>https://skarlso.github.io/2019/03/19/deploy-hugo-blog-github-actions/</link>
      <pubDate>Tue, 19 Mar 2019 22:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2019/03/19/deploy-hugo-blog-github-actions/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Today I thought I show you how you can use &lt;a href=&#34;https://github.com/features/actions&#34;&gt;Github Actions&lt;/a&gt; to deploy a hugo based blog like this one.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s dive in.&lt;/p&gt;
&lt;h1 id=&#34;actions&#34;&gt;Actions&lt;/h1&gt;
&lt;p&gt;What are actions? If you read the above linked document they are basically steps performed in containers based on some events that happened with your repository. Events can be such as pushing, creating a PR or creating/closing an issue etc.&lt;/p&gt;
&lt;p&gt;We need an even on a push.&lt;/p&gt;
&lt;p&gt;Actions is in beta right now so much of the documentation has some gaps but they are fairly okay. I recommend reading through this one carefully: &lt;a href=&#34;https://developer.github.com/actions/&#34;&gt;Developer Guide&lt;/a&gt;. This describes for example accessing the environment. That is important because we will need to access the generated content from one action in the next action.&lt;/p&gt;
&lt;h1 id=&#34;dockerfile&#34;&gt;Dockerfile&lt;/h1&gt;
&lt;p&gt;Each action requires a Dockerfile which will be used to create a container to run this particular action in. The Dockerfile uses LABELS to mark a container. It is recommended to create an ENTRYPOINT in the Dockerfile that can work with CMDs passed in from the action.&lt;/p&gt;
&lt;p&gt;For example my pusher container has the ability to push into any repository thanks to using arguments for the entrypoint.sh script.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll see that later on.&lt;/p&gt;
&lt;h1 id=&#34;blog-actions&#34;&gt;Blog actions&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s look at the two actions in detail which we&amp;rsquo;ll be using.&lt;/p&gt;
&lt;h2 id=&#34;builder&#34;&gt;Builder&lt;/h2&gt;
&lt;p&gt;First, we need to build the blog. This is accomplished pretty much the same as I wrote earlier in the travis blog part but with a little extra information.&lt;/p&gt;
&lt;p&gt;This is the Dockerfile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; golang:latest&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hugo Builder&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;maintainer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Gergely Brautigam &amp;lt;gergely@gergelybrautigam.com&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.github.actions.name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Go Builder&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.github.actions.description&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Build a hugo blog&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.github.actions.icon&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;package&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.github.actions.color&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#E0EBF5&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  apt-get update &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  apt-get install -y ca-certificates openssl git &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  update-ca-certificates &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  rm -rf /var/lib/apt&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; go get github.com/gohugoio/hugo&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt; entrypoint.sh /entrypoint.sh&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/entrypoint.sh&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pretty simple. The entrypoint script looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
set -e
set -x
set -o pipefail

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$GITHUB_WORKSPACE&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Set the GITHUB_WORKSPACE env variable.&amp;#34;&lt;/span&gt;
  exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$GITHUB_REPOSITORY&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Set the GITHUB_REPOSITORY env variable.&amp;#34;&lt;/span&gt;
  exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

root_path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$GITHUB_WORKSPACE&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Root path is: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;root_path&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
blog_path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$GITHUB_WORKSPACE&lt;span style=&#34;color:#e6db74&#34;&gt;/.blog&amp;#34;&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blog path is: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;blog_path&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
mkdir -p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$blog_path&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
mkdir -p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$root_path&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
cd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$root_path&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Preparing to build blog&amp;#34;&lt;/span&gt;
hugo --theme hermit
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Building is done. Copying over generated files&amp;#34;&lt;/span&gt;
cp -R public/* &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$blog_path&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;/
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Copy is done.&amp;#34;&lt;/span&gt;

exit &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The interesting parts here are &lt;code&gt;GITHUB_WORKSPACE&lt;/code&gt; and &lt;code&gt;GITHUB_REPOSITORY&lt;/code&gt;. The workspace is where the repository is located at.&lt;/p&gt;
&lt;p&gt;This is the place where we will copy our built blog files. Since this is a mount basically on the local build machine the next action which comes along will see the folder &lt;code&gt;.blog&lt;/code&gt;. This is how we pass artifacts between actions.&lt;/p&gt;
&lt;p&gt;This action can be found here: &lt;a href=&#34;https://github.com/Skarlso/blog-builder&#34;&gt;Hugo Blog Builder Action&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;publisher&#34;&gt;Publisher&lt;/h2&gt;
&lt;p&gt;Once the building finishes successfully we can push it to the new location.&lt;/p&gt;
&lt;p&gt;Dockerfile is similar to the one above in every regard. Except for the name and that it doesn&amp;rsquo;t need Hugo and the command&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; golang:latest&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hugo Pusher&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;maintainer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Gergely Brautigam &amp;lt;gergely@gergelybrautigam.com&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.github.actions.name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Go Pusher&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.github.actions.description&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Push a hugo blog&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.github.actions.icon&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;package&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.github.actions.color&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#E0EBF5&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  apt-get update &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  apt-get install -y ca-certificates openssl git &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  update-ca-certificates &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  rm -rf /var/lib/apt&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt; entrypoint.sh /entrypoint.sh&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/entrypoint.sh&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CMD&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Skarlso/skarlso.github.io.git&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Why do we require the CMD? Let&amp;rsquo;s take a look at the script.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
set -e
set -x

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$GITHUB_WORKSPACE&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Set the GITHUB_WORKSPACE env variable.&amp;#34;&lt;/span&gt;
  exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$GITHUB_REPOSITORY&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Set the GITHUB_REPOSITORY env variable.&amp;#34;&lt;/span&gt;
  exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

setup_git&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  repo&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$1
  git config --global user.email &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bot@github.com&amp;#34;&lt;/span&gt;
  git config --global user.name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Github Actions&amp;#34;&lt;/span&gt;
  git init
  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Starting to clone blog repository&amp;#34;&lt;/span&gt;
  git remote add origin https://&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PUSH_TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;@github.com/&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;repo&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &amp;gt; /dev/null 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  git pull origin master
  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cloning is done&amp;#34;&lt;/span&gt;
  ls -l
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

commit_website_files&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  git add .
  git commit -am &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Github Action Build &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;GITHUB_SHA&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

upload_files&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  git push --quiet --set-upstream origin master
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Beginning publishing workflow&amp;#34;&lt;/span&gt;
repo&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$1
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;repo&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Repo must be defined.&amp;#34;&lt;/span&gt;
    exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Using repository &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;repo&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; to push to&amp;#34;&lt;/span&gt;
mkdir /opt/publish &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd /opt/publish
blog_path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$GITHUB_WORKSPACE&lt;span style=&#34;color:#e6db74&#34;&gt;/.blog&amp;#34;&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blog is located at: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;blog_path&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
ls -l &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;blog_path&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Setting up git&amp;#34;&lt;/span&gt;
setup_git &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;repo&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
cp -R &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;blog_path&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;/* .
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Copied over generated content from blog path. Committing.&amp;#34;&lt;/span&gt;
commit_website_files
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Committed. Pushing.&amp;#34;&lt;/span&gt;
upload_files
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;All done.&amp;#34;&lt;/span&gt;
exit &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now this is a lot more involved. I&amp;rsquo;m leaving as many echos in here as possible for esae of debugging.&lt;/p&gt;
&lt;p&gt;The interesting part in here is the &lt;code&gt;repo=$1&lt;/code&gt;. This is why we need CMD specified. But this is what makes this Action a bit more flexible too. It can push anywhere it has access to.&lt;/p&gt;
&lt;p&gt;This action can be found here: &lt;a href=&#34;https://github.com/Skarlso/blog-publisher&#34;&gt;Hugo Blog Publisher Action&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-workflow-file&#34;&gt;The Workflow file&lt;/h2&gt;
&lt;p&gt;How does this all fit together? You have to create a workflow file which looks something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;workflow &amp;quot;Publish Blog&amp;quot; {
  on = &amp;quot;push&amp;quot;
  resolves = [&amp;quot;blog-publisher&amp;quot;]
}

action &amp;quot;blog-builder&amp;quot; {
  uses = &amp;quot;skarlso/blog-builder@master&amp;quot;
  secrets = [&amp;quot;GITHUB_TOKEN&amp;quot;]
}

action &amp;quot;blog-publisher&amp;quot; {
  uses = &amp;quot;skarlso/blog-publisher@master&amp;quot;
  needs = [&amp;quot;blog-builder&amp;quot;]
  secrets = [&amp;quot;GITHUB_TOKEN&amp;quot;, &amp;quot;PUSH_TOKEN&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is located in your repositroy under &lt;code&gt;.github/main.workdflow&lt;/code&gt;. Notice the secrets. GITHUB_TOKEN is created for you by Github. This is a basic token which lets you access the github API. But it can&amp;rsquo;t be used for pushing code. Thus, we need another token. This can be defined under your repository / settings / secrets. Once you have a token, add a new secret called PUSH_TOKEN and&amp;hellip; done.&lt;/p&gt;
&lt;p&gt;Everything should be ready to go.&lt;/p&gt;
&lt;h2 id=&#34;location-of-the-actions&#34;&gt;Location of the actions&lt;/h2&gt;
&lt;p&gt;Now, I read the doc and should have been possible to have these actions in the repositroy itself. However, I faced some problems with that setup so I ended up having actions in their respectice repository. That&amp;rsquo;s why &lt;code&gt;uses&lt;/code&gt; is set up to be &lt;code&gt;skarlso/&amp;lt;action-name&amp;gt;@branch&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;On a push now the blog is built and published. If a step fails it won&amp;rsquo;t be published. It&amp;rsquo;s actually a lot faster than my travis build was.&lt;/p&gt;
&lt;p&gt;Thank you for reading,&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploy a Hugo Blog with Travis on Git Push</title>
      <link>https://skarlso.github.io/2019/03/18/hugo-blog-with-travis-deployment/</link>
      <pubDate>Mon, 18 Mar 2019 21:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2019/03/18/hugo-blog-with-travis-deployment/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been using the Hugo build for wercker for a long time now. Recent problems occurred though where I did not understand at first
what the problem was. It was quite difficult to debug since I did not have too much insight on the wercker build itself. Turned
out that I deleted the GITHUB token that the process was using. However, the error message was telling me that a function failed
to load some other function. Which was totally unrelated.&lt;/p&gt;
&lt;p&gt;Thus, I thought that I&amp;rsquo;m going to shift away from this outside medium to a different one that I&amp;rsquo;m already familiar with and have
greater control over.&lt;/p&gt;
&lt;p&gt;Hence, Travis. Incidentally, since I will no longer be dependend on a third party component (which was the image wercker was
using), I&amp;rsquo;ll be able to switch away from this build platform easily. For example, to CircleCI.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m using github pages, but without the whole convoluted submodule init, different branch stuff. I find that that simply adds unnecessary complexity to the whole thing. I&amp;rsquo;m keeping the source and the website in a different repository.&lt;/p&gt;
&lt;p&gt;The steps are simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get the source&lt;/li&gt;
&lt;li&gt;Generate the content locally using &lt;code&gt;hugo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Setup Git&lt;/li&gt;
&lt;li&gt;Get the source for the generated web site&lt;/li&gt;
&lt;li&gt;Copy in the newly generated code&lt;/li&gt;
&lt;li&gt;Push the code up to git&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sounds simple&amp;hellip; In fact it&amp;rsquo;s so simple, it&amp;rsquo;s three files.&lt;/p&gt;
&lt;h3 id=&#34;travis&#34;&gt;Travis&lt;/h3&gt;
&lt;p&gt;The travis modification is such:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;language&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;go&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;install&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;go get github.com/gohugoio/hugo&lt;/span&gt;
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;sudo apt-get install -y git&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;.travis/build.sh&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;after_success&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;cd ${TRAVIS_BUILD_DIR} &amp;amp;&amp;amp; .travis/push.sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Easy, it&amp;rsquo;s a standard Go based travis file. There are two things here which stand out. The &lt;code&gt;scripts&lt;/code&gt; section and the
&lt;code&gt;after_success&lt;/code&gt; section. Why &lt;code&gt;after_success&lt;/code&gt;? Because if we made a mistake, we don&amp;rsquo;t want to destroy the website. Thus we only
push in case build.sh was successful.&lt;/p&gt;
&lt;h3 id=&#34;building&#34;&gt;Building&lt;/h3&gt;
&lt;p&gt;In this light, building the blog is simple. In fact the whole script is such:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
set -e
set -x

mkdir /opt/blog
git clone --recurse-submodules https://github.com/Skarlso/blogsource.git /opt/app
echo Build started on &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;date&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
cd /opt/app
hugo --theme hermit
cp -R public/* /opt/blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For clone, &lt;code&gt;--recurse-submodules&lt;/code&gt; is required because the theme is a submodule. Once this script runs successfull,
we can push the new version of the site.&lt;/p&gt;
&lt;h3 id=&#34;pushing&#34;&gt;Pushing&lt;/h3&gt;
&lt;p&gt;Pushing is a bit more involved. There are four steps involved in this process.&lt;/p&gt;
&lt;h4 id=&#34;setup-git&#34;&gt;Setup git&lt;/h4&gt;
&lt;p&gt;First, we set up git to use some specific name so we know where the push came from.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;setup_git&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  git config --global user.email &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;travis@travis-ci.org&amp;#34;&lt;/span&gt;
  git config --global user.name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Travis CI&amp;#34;&lt;/span&gt;
  git init
  git remote add origin https://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;GITHUB_TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;@github.com/Skarlso/skarlso.github.io.git &amp;gt; /dev/null 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  git pull origin master
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Github token is a secret environment property. We also pull the blog source in this step.&lt;/p&gt;
&lt;h4 id=&#34;copy&#34;&gt;Copy&lt;/h4&gt;
&lt;p&gt;Then copy everything from the built site&amp;rsquo;s public folder (which was we already copied to /opt/blog) to this folder.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cp -R /opt/blog/* .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;commit-the-changes&#34;&gt;Commit the changes&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;commit_website_files&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  git add .
  git commit -am &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Travis build: &lt;/span&gt;$TRAVIS_BUILD_NUMBER&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is extracted for clarity.&lt;/p&gt;
&lt;h4 id=&#34;pushing-the-changes&#34;&gt;Pushing the changes&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;upload_files&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  git push --quiet --set-upstream origin master
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The script in it&amp;rsquo;s entirety here: &lt;a href=&#34;#push-sh&#34;&gt;push.sh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s it. The site is changed and updated. This can be executed in any environment and the only requirement is hugo and git being present. If you still prefer the branch method of Github pages, this is easily altered to checkout the right branch and push the changes from there.&lt;/p&gt;
&lt;p&gt;No dependency on anything. Just how I like my build processes.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
&lt;h1 id=&#34;appendix&#34;&gt;Appendix&lt;/h1&gt;
&lt;h2 id=&#34;pushsh&#34;&gt;push.sh&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
set -e
set -x

setup_git&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  git config --global user.email &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;travis@travis-ci.org&amp;#34;&lt;/span&gt;
  git config --global user.name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Travis CI&amp;#34;&lt;/span&gt;
  git init
  git remote add origin https://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;GITHUB_TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;@github.com/Skarlso/skarlso.github.io.git &amp;gt; /dev/null 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  git pull origin master
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

commit_website_files&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  git add .
  git commit -am &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Travis build: &lt;/span&gt;$TRAVIS_BUILD_NUMBER&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

upload_files&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  git push --quiet --set-upstream origin master
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

mkdir /opt/publish &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd /opt/publish
setup_git
cp -R /opt/blog/* .
commit_website_files
upload_files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>How to HTTPS with Hugo LetsEncrypt and HAProxy</title>
      <link>https://skarlso.github.io/2017/02/15/how-to-https-with-hugo-letsencrypt-haproxy/</link>
      <pubDate>Wed, 15 Feb 2017 19:20:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2017/02/15/how-to-https-with-hugo-letsencrypt-haproxy/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Today, I would like to write about how to do HTTPS for a website, without the need to buy a certificate and set it up via your DNS provider. Let&amp;rsquo;s begin.&lt;/p&gt;
&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;What you will achieve by the end of this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every call to HTTP will be redirected to HTTPS via &lt;a href=&#34;https://www.haproxy.com&#34;&gt;haproxy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;HTTPS will be served with Haproxy and &lt;a href=&#34;https://letsencrypt.org&#34;&gt;LetsEncrypt&lt;/a&gt; as the Certificate provider.&lt;/li&gt;
&lt;li&gt;Automatically update the certificate before its expiration.&lt;/li&gt;
&lt;li&gt;No need for IPTable rules to route 8080 to 80.&lt;/li&gt;
&lt;li&gt;Traffic to and from your page will be encrypted.&lt;/li&gt;
&lt;li&gt;This all will cost you nothing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will use a static website generator for this called &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; which, if you know me, is my favorite generator tool. These instructions
are for haproxy and hugo, if you wish to use apache and nginx for example, you&amp;rsquo;ll have to dig for the corresponding settings for letsencrypt and certbot.&lt;/p&gt;
&lt;h1 id=&#34;what-you-will-need&#34;&gt;What You Will Need&lt;/h1&gt;
&lt;h2 id=&#34;hugo&#34;&gt;Hugo&lt;/h2&gt;
&lt;p&gt;You will need hugo, which can be downloaded from here: &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;. A simple website will be enough. For themes, you can take a look
at the humongous list located here: &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;HugoThemes&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;haproxy&#34;&gt;Haproxy&lt;/h2&gt;
&lt;p&gt;Haproxy can be found here: &lt;a href=&#34;https://www.haproxy.com&#34;&gt;Haproxy&lt;/a&gt;. There are a number of options to install haproxy. I chose a simple
&lt;code&gt;apt-get install haproxy&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;lets-encrypt&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/h2&gt;
&lt;p&gt;Information about Let&amp;rsquo;s Encrypt can be found on their website here: &lt;a href=&#34;https://letsencrypt.org&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;.
Let&amp;rsquo;s Encrypt&amp;rsquo;s client is now called &lt;a href=&#34;https://certbot.eff.org/&#34;&gt;Certbot&lt;/a&gt; which is used to generate the certificates. To get the latest code
you either clone the repository &lt;a href=&#34;https://github.com/certbot/certbot&#34;&gt;Certbot&lt;/a&gt;, or use an auto downloader:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;user@webserver:~$ wget https://dl.eff.org/certbot-auto
user@webserver:~$ chmod a+x ./certbot-auto
user@webserver:~$ ./certbot-auto --help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Either way, I&amp;rsquo;m using the current latest version: &lt;em&gt;v0.11.1&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;sudo&#34;&gt;Sudo&lt;/h2&gt;
&lt;p&gt;This goes without saying, but that these operations will require you to have sudo privileges. I suggest staying in sudo for ease of use.
This means that the commands, I&amp;rsquo;ll write here, will assume you are in &lt;code&gt;sudo su&lt;/code&gt; mode thus no &lt;code&gt;sudo&lt;/code&gt; prefix will be used.&lt;/p&gt;
&lt;h2 id=&#34;portforwarding&#34;&gt;Portforwarding&lt;/h2&gt;
&lt;p&gt;In order for your website to work under https this guide assumes that you have port &lt;em&gt;80&lt;/em&gt; and &lt;em&gt;443&lt;/em&gt; open on your router / network security group.&lt;/p&gt;
&lt;h1 id=&#34;setup&#34;&gt;Setup&lt;/h1&gt;
&lt;h2 id=&#34;single-server-environment&#34;&gt;Single Server Environment&lt;/h2&gt;
&lt;p&gt;It is possible for haproxy, certbot and your website to run on designated servers. Haproxy&amp;rsquo;s abilities allows to define multiple server sources.
In this guide, my haproxy, website and certbot will all run on the same server; thus redirecting to 127.0.0.1 and local ips. This is more
convenient, because otherwise the haproxy IP would have to be a permanent local/remote ip. Or an automated script would have to be setup which is
notified upon IP change and updates the ip records.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-certificate&#34;&gt;Creating a Certificate&lt;/h2&gt;
&lt;p&gt;Diving in, the first thing you will require is a certificate. A certificate will allow for encrypted traffic and an authenticated website.
Let&amp;rsquo;s Encrypt which is basically functioning as an independent, free, automated CA (Certificate Authority). Usually,
the process would be to pay a CA to give you a signed, generated certificate for your website, and you would have to set that up with your DNS
provider. Let&amp;rsquo;s Encrypt has that all automated, and free of any charge. Neat.&lt;/p&gt;
&lt;h3 id=&#34;certbot&#34;&gt;Certbot&lt;/h3&gt;
&lt;p&gt;So let&amp;rsquo;s get started. Clone the repository into &lt;code&gt;/opt/letsencrypt&lt;/code&gt; for further usage.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/certbot/certbot /opt/letsencrypt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;generating-the-certificate&#34;&gt;Generating the certificate&lt;/h3&gt;
&lt;p&gt;Make sure that there is nothing listening on ports: 80, 443. To list usage:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;netstat -nlt | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:80\s&amp;#39;&lt;/span&gt;
netstat -nlt | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:443\s&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kill everything that might be on these ports, like apache2 and httpd. These will be used by haproxy and certbot for challenges
and redirecting traffic.&lt;/p&gt;
&lt;p&gt;You will be creating a &lt;a href=&#34;https://certbot.eff.org/docs/using.html#standalone&#34;&gt;standalone&lt;/a&gt; certificate. This is the reason we need port 80 and 443 open.
Run certbot by defining the &lt;code&gt;certonly&lt;/code&gt; and &lt;code&gt;--standalone&lt;/code&gt; flags. For domain validation you are going to use port 443, tls-sni-01 challenge.
The whole command looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cd /opt/letsencrypt
./certbot-auto certonly --standalone -d example.com -d www.example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If this displays something like, &amp;ldquo;couldn&amp;rsquo;t connect&amp;rdquo; you probably still have something running on a port it tries to use. The
generated certificate will be located under &lt;code&gt;/etc/letsencrypt/archive&lt;/code&gt; and &lt;code&gt;/etc/letsencrypt/keys&lt;/code&gt; while &lt;code&gt;/etc/letsencrypt/live&lt;/code&gt; is
a symlink to the latest version of the cert. It&amp;rsquo;s wise to not copy these away from here, since the live link is always updated to the latest version.
Our script will handle haproxy, which requires one cert file made from privkey + fullchain|.pem files.&lt;/p&gt;
&lt;h3 id=&#34;setup-auto-renewal&#34;&gt;Setup Auto-Renewal&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s Encrypt issues short lived certificates (90 days). In order to not have to do this procedure every 89 days, certbot provides a nifty
command called &lt;code&gt;renew&lt;/code&gt;. However, for the cert to be generated, the port 443 has to be open. This means, haproxy needs to be stopped before
doing the renew. Now, you COULD write a script which stops it, and after the certificate has been renewed, starts it again, but certbot has
you covered again in that department. It provides hooks called &lt;code&gt;pre-hook&lt;/code&gt; and &lt;code&gt;post-hook&lt;/code&gt;. Thus, all you have to write is the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
cd /opt/letsencrypt
./certbot-auto renew --pre-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;service haproxy stop&amp;#34;&lt;/span&gt; --post-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;service haproxy start&amp;#34;&lt;/span&gt;
DOMAIN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;example.com&amp;#39;&lt;/span&gt; sudo -E bash -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cat /etc/letsencrypt/live/$DOMAIN/fullchain.pem /etc/letsencrypt/live/$DOMAIN/privkey.pem &amp;gt; /etc/haproxy/certs/$DOMAIN.pem&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you would like to test it first, just include the switch &lt;code&gt;--dry-run&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In case of success you should see something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@raspberrypi:/opt/letsencrypt# ./certbot-auto renew --pre-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;service haproxy stop&amp;#34;&lt;/span&gt; --post-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;service haproxy start&amp;#34;&lt;/span&gt; --dry-run
Saving debug log to /var/log/letsencrypt/letsencrypt.log

-------------------------------------------------------------------------------
Processing /etc/letsencrypt/renewal/example.com.conf
-------------------------------------------------------------------------------
Cert not due &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; renewal, but simulating renewal &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; dry run
Running pre-hook command: service haproxy stop
Renewing an existing certificate
Performing the following challenges:
tls-sni-01 challenge &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; example.com
Waiting &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; verification...
Cleaning up challenges
Generating key &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; bits&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: /etc/letsencrypt/keys/0002_key-certbot.pem
Creating CSR: /etc/letsencrypt/csr/0002_csr-certbot.pem
** DRY RUN: simulating &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;certbot renew&amp;#39;&lt;/span&gt; close to cert expiry
**          &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;The test certificates below have not been saved.&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

Congratulations, all renewals succeeded. The following certs have been renewed:
  /etc/letsencrypt/live/example.com/fullchain.pem &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;success&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
** DRY RUN: simulating &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;certbot renew&amp;#39;&lt;/span&gt; close to cert expiry
**          &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;The test certificates above have not been saved.&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Running post-hook command: service haproxy start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Put this script into a crontab to run every 89 days like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;crontab -e
&lt;span style=&#34;color:#75715e&#34;&gt;# Open crontab for edit and paste in this line&lt;/span&gt;
* * */89 * * /root/renew-cert.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And you should be all set. Now we move on the configure haproxy to redirect and to use our newly generated certificate.&lt;/p&gt;
&lt;h2 id=&#34;haproxy-1&#34;&gt;Haproxy&lt;/h2&gt;
&lt;p&gt;Like I said, haproxy requires a single file certificate in order to encrypt traffic to and from the website. To do this, we need to combine
&lt;code&gt;privkey.pem&lt;/code&gt; and &lt;code&gt;fullchain.pem&lt;/code&gt;. As of this writing, there are a couple of solutions to automate this via a post hook on renewal. And also,
there is an open ticket with certbot to implement a simpler solution located here: &lt;a href=&#34;https://github.com/certbot/certbot/issues/1201&#34;&gt;https://github.com/certbot/certbot/issues/1201&lt;/a&gt;. I, for now,
have chosen to simply concatenate the two files together with &lt;code&gt;cat&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;DOMAIN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;example.com&amp;#39;&lt;/span&gt; sudo -E bash -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cat /etc/letsencrypt/live/$DOMAIN/fullchain.pem /etc/letsencrypt/live/$DOMAIN/privkey.pem &amp;gt; /etc/haproxy/certs/$DOMAIN.pem&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It will create a combined cert under &lt;code&gt;/etc/haproxy/certs/example.com.pem&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;haproxy-configuration&#34;&gt;Haproxy configuration&lt;/h3&gt;
&lt;p&gt;If haproxy happens to be running, stop it with &lt;code&gt;service haproxy stop&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, save the default configuration file: &lt;code&gt;cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.old&lt;/code&gt;. Now, overwrite the old one with this
new one (comments about what each setting does, are in-lined; they are safe to copy):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;global
    daemon
    &lt;span style=&#34;color:#75715e&#34;&gt;# Set this to your desired maximum connection count.&lt;/span&gt;
    maxconn &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# https://cbonte.github.io/haproxy-dconv/configuration-1.5.html#3.2-tune.ssl.default-dh-param&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# bit setting for Diffie - Hellman key size.&lt;/span&gt;
    tune.ssl.default-dh-param &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;

defaults
    option forwardfor
    option http-server-close

    log     global
    mode    http
    option  httplog
    option  dontlognull
    timeout connect &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;
    timeout client  &lt;span style=&#34;color:#ae81ff&#34;&gt;50000&lt;/span&gt;
    timeout server  &lt;span style=&#34;color:#ae81ff&#34;&gt;50000&lt;/span&gt;
    errorfile &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt; /etc/haproxy/errors/400.http
    errorfile &lt;span style=&#34;color:#ae81ff&#34;&gt;403&lt;/span&gt; /etc/haproxy/errors/403.http
    errorfile &lt;span style=&#34;color:#ae81ff&#34;&gt;408&lt;/span&gt; /etc/haproxy/errors/408.http
    errorfile &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt; /etc/haproxy/errors/500.http
    errorfile &lt;span style=&#34;color:#ae81ff&#34;&gt;502&lt;/span&gt; /etc/haproxy/errors/502.http
    errorfile &lt;span style=&#34;color:#ae81ff&#34;&gt;503&lt;/span&gt; /etc/haproxy/errors/503.http
    errorfile &lt;span style=&#34;color:#ae81ff&#34;&gt;504&lt;/span&gt; /etc/haproxy/errors/504.http

&lt;span style=&#34;color:#75715e&#34;&gt;# In case it&amp;#39;s a simple http call, we redirect to the basic backend server&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# which in turn, if it isn&amp;#39;t an SSL call, will redirect to HTTPS that is&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# handled by the frontend setting called &amp;#39;www-https&amp;#39;.&lt;/span&gt;
frontend www-http
    &lt;span style=&#34;color:#75715e&#34;&gt;# Redirect HTTP to HTTPS&lt;/span&gt;
    bind *:80
    &lt;span style=&#34;color:#75715e&#34;&gt;# Adds http header to end of end of the HTTP request&lt;/span&gt;
    reqadd X-Forwarded-Proto:&lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;http
    &lt;span style=&#34;color:#75715e&#34;&gt;# Sets the default backend to use which is defined below with name &amp;#39;www-backend&amp;#39;&lt;/span&gt;
    default_backend www-backend

&lt;span style=&#34;color:#75715e&#34;&gt;# If the call is HTTPS we set a challenge to letsencrypt backend which&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# verifies our certificate and than direct traffic to the backend server&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# which is the running hugo site that is served under https if the challenge succeeds.&lt;/span&gt;
frontend www-https
    &lt;span style=&#34;color:#75715e&#34;&gt;# Bind 443 with the generated letsencrypt cert.&lt;/span&gt;
    bind *:443 ssl crt /etc/haproxy/certs/skarlso.com.pem
    &lt;span style=&#34;color:#75715e&#34;&gt;# set x-forward to https&lt;/span&gt;
    reqadd X-Forwarded-Proto:&lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;https
    &lt;span style=&#34;color:#75715e&#34;&gt;# set X-SSL in case of ssl_fc &amp;lt;- explained below&lt;/span&gt;
    http-request set-header X-SSL %&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ssl_fc&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Select a Challenge&lt;/span&gt;
    acl letsencrypt-acl path_beg /.well-known/acme-challenge/
    &lt;span style=&#34;color:#75715e&#34;&gt;# Use the challenge backend if the challenge is set&lt;/span&gt;
    use_backend letsencrypt-backend &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; letsencrypt-acl
    default_backend www-backend

backend www-backend
   &lt;span style=&#34;color:#75715e&#34;&gt;# Redirect with code 301 so the browser understands it is a redirect. If it&amp;#39;s not SSL_FC.&lt;/span&gt;
   &lt;span style=&#34;color:#75715e&#34;&gt;# ssl_fc: Returns true when the front connection was made via an SSL/TLS transport&lt;/span&gt;
   &lt;span style=&#34;color:#75715e&#34;&gt;# layer and is locally deciphered. This means it has matched a socket declared&lt;/span&gt;
   &lt;span style=&#34;color:#75715e&#34;&gt;# with a &amp;#34;bind&amp;#34; line having the &amp;#34;ssl&amp;#34; option.&lt;/span&gt;
   redirect scheme https code &lt;span style=&#34;color:#ae81ff&#34;&gt;301&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; ssl_fc &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color:#75715e&#34;&gt;# Server for the running hugo site.&lt;/span&gt;
   server www-1 192.168.0.17:8080 check

backend letsencrypt-backend
   &lt;span style=&#34;color:#75715e&#34;&gt;# Lets encrypt backend server&lt;/span&gt;
   server letsencrypt 127.0.0.1:54321
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Save this, and start haproxy with &lt;code&gt;services haproxy start&lt;/code&gt;. If you did everything right, it should say nothing.
If, however, there went something wrong with starting the proxy, it usually displays something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Job &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; haproxy.service failed. See &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;systemctl status haproxy.service&amp;#39;&lt;/span&gt; and &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;journalctl -xn&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; details.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also gather some more information on what went wrong from &lt;code&gt;less /var/log/haproxy.log&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;starting-the-server&#34;&gt;Starting the Server&lt;/h1&gt;
&lt;p&gt;Everything should be ready to go. Hugo has the concept of a baseUrl. Everything that it loads, and tries to access
will be prefixed with it. You can either set it through it&amp;rsquo;s &lt;code&gt;config.yaml&lt;/code&gt; file, or from the command line.&lt;/p&gt;
&lt;p&gt;To start the server, call this from the site&amp;rsquo;s root folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;hugo server --bind&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;192.168.x.x --port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt; --baseUrl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;https://example.com --appendPort&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Interesting thing here to note is &lt;code&gt;https&lt;/code&gt; and the port. The IP could be 127.0.0.1 as well. I experienced problems though
with not binding to network IP when I was debugging the site from a different laptop on the same network.&lt;/p&gt;
&lt;p&gt;Once the server is started, you should be able to open up your website from a different browser, not on your local network,
and see that it has a valid certificate installed. In Chrome you should see a green icon telling you that the cert is valid.&lt;/p&gt;
&lt;h1 id=&#34;last-words&#34;&gt;Last Words&lt;/h1&gt;
&lt;p&gt;And that is all. The site should be up and running and the proxy should auto-renew your site&amp;rsquo;s certificate. If you happened to
change DNS or change the server, you&amp;rsquo;ll have to reissue the certificate.&lt;/p&gt;
&lt;p&gt;Thanks for reading!
Any questions or trouble setting something up, please feel free to leave a comment.&lt;/p&gt;
&lt;p&gt;Cheers,
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Autodeploy with Wercker and Github - Pages</title>
      <link>https://skarlso.github.io/2016/02/10/hugo-autodeploy-with-wercker/</link>
      <pubDate>Wed, 10 Feb 2016 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2016/02/10/hugo-autodeploy-with-wercker/</guid>
      <description>&lt;p&gt;There already is a nice tutorial on how to create github-pages with Hugo &lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;Here&lt;/a&gt; if you prefer deplying your pages to a different branch on the same repo. There is also a post about Wercker and Hugo &lt;a href=&#34;https://gohugo.io/tutorials/automated-deployments/&#34;&gt;Here&lt;/a&gt; deploying pages to said separate branch.&lt;/p&gt;
&lt;p&gt;However, I took an easier approach on the matter with a completely separate branch for my blog source and my compiled github pages.&lt;/p&gt;
&lt;p&gt;This blog sits here: &lt;a href=&#34;https://github.com/Skarlso/skarlso.github.io&#34;&gt;https://github.com/Skarlso/skarlso.github.io&lt;/a&gt;. In order to deploy to it, I just have to commit a new blog post to this repository: &lt;a href=&#34;https://github.com/Skarlso/blogsource&#34;&gt;Blog Source&lt;/a&gt;. After that, &lt;a href=&#34;http://wercker.com/&#34;&gt;Wercker&lt;/a&gt; takes care of the rest. It builds my blog, and pushes the generated pages to my blog&amp;rsquo;s repository to the master branch without creating the gh-pages branch.&lt;/p&gt;
&lt;p&gt;The Wercker yml for that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;box&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;debian&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;build&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;arjen/hugo-build&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;theme&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;redlounge&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;deploy&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;install-packages&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;packages&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;git ssh-client&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;leipert/git-push&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;gh_oauth&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;$GIT_TOKEN&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;repo&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;skarlso/skarlso.github.io&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;branch&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;master&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;basedir&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;public&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pretty easy. The $GIT_TOKEN is a variable set-up on Wercker containing a restricted token which is only good for pushing. And note that you have to use an explicit package name with git-push or else Wercker will not find that step. Hugo-build will build my blog with a simple command using redlounge theme.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s it. No other setup is necessary and no new branch will be made. Any questions, please feel free to leave a comment.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
