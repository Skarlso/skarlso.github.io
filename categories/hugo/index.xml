<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hugo on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/hugo/</link>
    <description>Recent content in Hugo on Ramblings of a cloud engineer</description>
    <generator>Hugo -- 0.136.0</generator>
    <language>en</language>
    <lastBuildDate>Tue, 19 Mar 2019 22:01:00 +0100</lastBuildDate>
    <atom:link href="https://skarlso.github.io/categories/hugo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deploy a Hugo Blog Github Actions</title>
      <link>https://skarlso.github.io/2019/03/19/deploy-hugo-blog-github-actions/</link>
      <pubDate>Tue, 19 Mar 2019 22:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2019/03/19/deploy-hugo-blog-github-actions/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Today I thought I show you how you can use &lt;a href=&#34;https://github.com/features/actions&#34;&gt;Github Actions&lt;/a&gt; to deploy a hugo based blog like this one.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s dive in.&lt;/p&gt;
&lt;h1 id=&#34;actions&#34;&gt;Actions&lt;/h1&gt;
&lt;p&gt;What are actions? If you read the above linked document they are basically steps performed in containers based on some events that happened with your repository. Events can be such as pushing, creating a PR or creating/closing an issue etc.&lt;/p&gt;
&lt;p&gt;We need an even on a push.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deploy a Hugo Blog with Travis on Git Push</title>
      <link>https://skarlso.github.io/2019/03/18/hugo-blog-with-travis-deployment/</link>
      <pubDate>Mon, 18 Mar 2019 21:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2019/03/18/hugo-blog-with-travis-deployment/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been using the Hugo build for wercker for a long time now. Recent problems occurred though where I did not understand at first
what the problem was. It was quite difficult to debug since I did not have too much insight on the wercker build itself. Turned
out that I deleted the GITHUB token that the process was using. However, the error message was telling me that a function failed
to load some other function. Which was totally unrelated.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to HTTPS with Hugo LetsEncrypt and HAProxy</title>
      <link>https://skarlso.github.io/2017/02/15/how-to-https-with-hugo-letsencrypt-haproxy/</link>
      <pubDate>Wed, 15 Feb 2017 19:20:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2017/02/15/how-to-https-with-hugo-letsencrypt-haproxy/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Today, I would like to write about how to do HTTPS for a website, without the need to buy a certificate and set it up via your DNS provider. Let&amp;rsquo;s begin.&lt;/p&gt;
&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;What you will achieve by the end of this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every call to HTTP will be redirected to HTTPS via &lt;a href=&#34;https://www.haproxy.com&#34;&gt;haproxy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;HTTPS will be served with Haproxy and &lt;a href=&#34;https://letsencrypt.org&#34;&gt;LetsEncrypt&lt;/a&gt; as the Certificate provider.&lt;/li&gt;
&lt;li&gt;Automatically update the certificate before its expiration.&lt;/li&gt;
&lt;li&gt;No need for IPTable rules to route 8080 to 80.&lt;/li&gt;
&lt;li&gt;Traffic to and from your page will be encrypted.&lt;/li&gt;
&lt;li&gt;This all will cost you nothing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will use a static website generator for this called &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; which, if you know me, is my favorite generator tool. These instructions
are for haproxy and hugo, if you wish to use apache and nginx for example, you&amp;rsquo;ll have to dig for the corresponding settings for letsencrypt and certbot.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo Autodeploy with Wercker and Github - Pages</title>
      <link>https://skarlso.github.io/2016/02/10/hugo-autodeploy-with-wercker/</link>
      <pubDate>Wed, 10 Feb 2016 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2016/02/10/hugo-autodeploy-with-wercker/</guid>
      <description>&lt;p&gt;There already is a nice tutorial on how to create github-pages with Hugo &lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;Here&lt;/a&gt; if you prefer deplying your pages to a different branch on the same repo. There is also a post about Wercker and Hugo &lt;a href=&#34;https://gohugo.io/tutorials/automated-deployments/&#34;&gt;Here&lt;/a&gt; deploying pages to said separate branch.&lt;/p&gt;
&lt;p&gt;However, I took an easier approach on the matter with a completely separate branch for my blog source and my compiled github pages.&lt;/p&gt;
&lt;p&gt;This blog sits here: &lt;a href=&#34;https://github.com/Skarlso/skarlso.github.io&#34;&gt;https://github.com/Skarlso/skarlso.github.io&lt;/a&gt;. In order to deploy to it, I just have to commit a new blog post to this repository: &lt;a href=&#34;https://github.com/Skarlso/blogsource&#34;&gt;Blog Source&lt;/a&gt;. After that, &lt;a href=&#34;http://wercker.com/&#34;&gt;Wercker&lt;/a&gt; takes care of the rest. It builds my blog, and pushes the generated pages to my blog&amp;rsquo;s repository to the master branch without creating the gh-pages branch.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
