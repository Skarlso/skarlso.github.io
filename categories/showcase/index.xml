<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>showcase on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/showcase/</link>
    <description>Recent content in showcase on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 19 Oct 2022 01:01:00 +0100</lastBuildDate><atom:link href="https://skarlso.github.io/categories/showcase/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Generate a sample YAML file from a CRD</title>
      <link>https://skarlso.github.io/2022/10/19/crd-to-yaml/</link>
      <pubDate>Wed, 19 Oct 2022 01:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2022/10/19/crd-to-yaml/</guid>
      <description>Hello.
This one is a quick update. Just a showcase really.
I wrote a tool to generate a sample YAML file from a CRD.
Given a CRD like this one, it would output a generate yaml sample like this:
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1 kind: AWSCluster metadata: {} spec: additionalTags: {} bastion: allowedCIDRBlocks: [&amp;#34;string&amp;#34;] ami: string disableIngressRules: true enabled: true instanceType: string controlPlaneEndpoint: host: string port: 1 controlPlaneLoadBalancer: additionalSecurityGroups: [&amp;#34;string&amp;#34;] crossZoneLoadBalancing: true healthCheckProtocol: string name: string scheme: string subnets: [&amp;#34;string&amp;#34;] identityRef: kind: AWSCluster name: string imageLookupBaseOS: string imageLookupFormat: string imageLookupOrg: string network: cni: cniIngressRules: - description: string fromPort: 1 protocol: string toPort: 1 securityGroupOverrides: {} subnets: - availabilityZone: string cidrBlock: string id: string ipv6CidrBlock: string isIpv6: true isPublic: true natGatewayId: string routeTableId: string tags: {} vpc: availabilityZoneSelection: string availabilityZoneUsageLimit: 1 cidrBlock: string id: string internetGatewayId: string ipv6: cidrBlock: string egressOnlyInternetGatewayId: string poolId: string tags: {} region: string s3Bucket: controlPlaneIAMInstanceProfile: string name: string nodesIAMInstanceProfiles: [&amp;#34;string&amp;#34;] sshKeyName: string status: bastion: addresses: - address: string type: string availabilityZone: string ebsOptimized: true enaSupport: true iamProfile: string id: string imageId: string instanceState: string networkInterfaces: [&amp;#34;string&amp;#34;] nonRootVolumes: - deviceName: string encrypted: true encryptionKey: string iops: 1 size: 1 throughput: 1 type: string privateIp: string publicIp: string rootVolume: deviceName: string encrypted: true encryptionKey: string iops: 1 size: 1 throughput: 1 type: string securityGroupIds: [&amp;#34;string&amp;#34;] spotMarketOptions: maxPrice: string sshKeyName: string subnetId: string tags: {} tenancy: string type: string userData: string volumeIDs: [&amp;#34;string&amp;#34;] conditions: - lastTransitionTime: string message: string reason: string severity: string status: string type: string failureDomains: {} networkStatus: apiServerElb: attributes: crossZoneLoadBalancing: true idleTimeout: 1 availabilityZones: [&amp;#34;string&amp;#34;] dnsName: string healthChecks: healthyThreshold: 1 interval: 1 target: string timeout: 1 unhealthyThreshold: 1 listeners: - instancePort: 1 instanceProtocol: string port: 1 protocol: string name: string scheme: string securityGroupIds: [&amp;#34;string&amp;#34;] subnetIds: [&amp;#34;string&amp;#34;] tags: {} securityGroups: {} ready: true The link to the repo is here.</description>
    </item>
    
  </channel>
</rss>
