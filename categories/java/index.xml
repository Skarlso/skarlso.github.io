<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>java on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/java/</link>
    <description>Recent content in java on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 06 Jun 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://skarlso.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker &#43; Java &#43; Vagrant&#43; GO.CD</title>
      <link>https://skarlso.github.io/2015/06/06/docker-ruby-lotus-go-cd/</link>
      <pubDate>Sat, 06 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/06/06/docker-ruby-lotus-go-cd/</guid>
      <description>&lt;p&gt;Hello folks.&lt;/p&gt;
&lt;p&gt;Today, I would like to write about something interesting and close to me at the moment. I&amp;rsquo;m going to setup Go.cd with Docker, and I&amp;rsquo;m going to get a Ruby Lotus app running. Let&amp;rsquo;s get started.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Example when to use the Strategy Pattern</title>
      <link>https://skarlso.github.io/2014/02/19/example-when-to-use-the-strategy-pattern/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/02/19/example-when-to-use-the-strategy-pattern/</guid>
      <description>&lt;p&gt;Hello folks.&lt;/p&gt;
&lt;p&gt;A quick post about an interesting idea.&lt;/p&gt;
&lt;p&gt;I want to elaborate on a possibility to use the Strategy Design pattern.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cucumber-Jvm And @AfterAll</title>
      <link>https://skarlso.github.io/2013/04/18/cucumber-jvm-and-afterall/</link>
      <pubDate>Thu, 18 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/04/18/cucumber-jvm-and-afterall/</guid>
      <description>Hey folks.
I find out something new about cucumber-jvm every day.
If you want something that is executed after all of the tests have finished you must use the Java shutdownHook. It&amp;rsquo;s simple really you add in a block of code that can run right before the JVM quits. I know I know. It sounds awful but I found out that this is the actual way of doing this with java / cucumber.</description>
    </item>
    
    <item>
      <title>Cucumber Test Name and Tags on Feature</title>
      <link>https://skarlso.github.io/2013/04/15/cucumber-test-name-and-tags-on-feature/</link>
      <pubDate>Mon, 15 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/04/15/cucumber-test-name-and-tags-on-feature/</guid>
      <description>Hello everybody.
I would like to show you a gem today that I found out.
Apparently there is no easy way to get to the name of an executing cucumber scenario in cucumber-jvm
You can try something like that:
@After //this is cucumbers @Afters public static void afterExecution(Scenario scenario) { logger.log(&amp;#34;The status of the test is: &amp;#34; + scenario.getStatus()); } But that isn&amp;rsquo;t giving you too much now is it? And the API of scenario is as small as it can get.</description>
    </item>
    
    <item>
      <title>How to eliminate a parameter boom</title>
      <link>https://skarlso.github.io/2012/10/09/how-to-eliminate-a-parameter-boom/</link>
      <pubDate>Tue, 09 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/10/09/how-to-eliminate-a-parameter-boom/</guid>
      <description>Hello folks.
Today I want to write about a little trick I learned.
If you are working with legacy code and you don&amp;rsquo;t have the chance to eliminate core design problems, you can use this little pattern to help you out.
Problem
Problem is that you have a class that has a gazillion collaborators and at some point in time one of the clever devs thought it would be a cool idea to do dependancy injection via the constructor.</description>
    </item>
    
    <item>
      <title>TDD and Game of Life</title>
      <link>https://skarlso.github.io/2012/07/12/tdd-and-game-of-life/</link>
      <pubDate>Thu, 12 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/07/12/tdd-and-game-of-life/</guid>
      <description>So today at 8-12PM I had a great session with two friends of mine. It was awesome. Like a mini code retreat.
We set down in a musky bar, drank wine and beer and cider, and decided to practice some TDD with the well known problem of Conway&amp;rsquo;s Game of Life. This challenge is really interesting. I never done it before, ever. So it was a really good practice for me.</description>
    </item>
    
    <item>
      <title>Solution to Wrap Kata</title>
      <link>https://skarlso.github.io/2012/06/26/solution-to-wrap-kata/</link>
      <pubDate>Tue, 26 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/26/solution-to-wrap-kata/</guid>
      <description>My solution to the String Wrap Kata. The goal is to have it wrap a text on a given column width.
It is not the best solution but this is my first try. I did it with TDD so there were tests first, which I&amp;rsquo;m not going to copy in..
public class WrapKata { public String wrap(String input, int columnSize) { if (input.length() &amp;lt;= columnSize) return input; else { return wrapLines(input, columnSize); } } private String wrapLines(String input, int columnSize) { int breakPoint = getBreakPoint(input, columnSize); String head = createHead(input, breakPoint); String tail = createTail(input, breakPoint); return head += &amp;#34;\n&amp;#34; + wrap(tail, columnSize); } private String createTail(String input, int breakPoint) { return input.</description>
    </item>
    
    <item>
      <title>Donâ€™t throw Exception</title>
      <link>https://skarlso.github.io/2012/06/13/dont-throw-exception/</link>
      <pubDate>Wed, 13 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/13/dont-throw-exception/</guid>
      <description>Hi.
Today I want to talk about a common problem in many frameworks I encountered over the course of my carrier as a Java dev / automation engineer, whatnot.
Throwing Exceptions. That is in your method you have something like this:
public void insertMethodNameHere(String param) throws Exception {} This is bad. And I will tell you in short forms why.
Hides exceptions
This one should be obvious. When a method throws exception you can never be sure what kind of exceptions it handles.</description>
    </item>
    
    <item>
      <title>JMS Connection setup and Framework</title>
      <link>https://skarlso.github.io/2012/03/04/jms-connection-setup-and-framework/</link>
      <pubDate>Sun, 04 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/03/04/jms-connection-setup-and-framework/</guid>
      <description>Hello chumps.
Today I want to write about jms connection testing with a small framework. I wrote a small thing using a factory object model. It&amp;rsquo;s a lead, a proof of concept. You can use this to go onward.
First, let&amp;rsquo;s begin with the JMS connection it self.
JMS Connection
First rule of thumb is: &amp;ldquo;Don&amp;rsquo;t wait for a response when dealing with JMS queues.&amp;rdquo; How so? Because, a JMS queue is asynchronous so you wont get back anything.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://skarlso.github.io/2012/02/27/configuration/</link>
      <pubDate>Mon, 27 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/02/27/configuration/</guid>
      <description>When I see something like this:
public class Config { public static final string DATABASELINK = &amp;#34;linkhere&amp;#34;; . . . } It sends a small, but chilling shiver down my spine. Just. don&amp;rsquo;t. There are a lot of possibilities to use configuration in Java. Java property files. Xml. Xml serialization. CSV file. Whatever suits you best, but this? DON&amp;rsquo;T!</description>
    </item>
    
  </channel>
</rss>
