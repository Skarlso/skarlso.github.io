<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/java/</link>
    <description>Recent content in java on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Sat, 06 Jun 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://skarlso.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docker &#43; Java &#43; Vagrant&#43; GO.CD</title>
      <link>https://skarlso.github.io/2015/06/06/docker-ruby-lotus-go-cd/</link>
      <pubDate>Sat, 06 Jun 2015 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2015/06/06/docker-ruby-lotus-go-cd/</guid>
      <description>&lt;p&gt;Hello folks.&lt;/p&gt;
&lt;p&gt;Today, I would like to write about something interesting and close to me at the moment. I’m going to setup Go.cd with Docker, and I’m going to get a Ruby Lotus app running. Let’s get started.&lt;/p&gt;
&lt;h1 id=&#34;fluff&#34;&gt;Fluff&lt;/h1&gt;
&lt;p&gt;Now, obviously, you don’t really need Go.Cd or Docker to setup a Java Gradle application, since it’s dead easy. But I’m going to do it just for the heck of it.&lt;/p&gt;
&lt;h1 id=&#34;setup&#34;&gt;Setup&lt;/h1&gt;
&lt;p&gt;Okay, lets start with Vagrant. Docker’s strength is coming from Linux’s process isolation capabilities it’s not yet properly working on OSX or Windows. You have a couple of options if you’d like to try never the less, like boot2docker, or a Tiny Linux kernel, but at that point, I think it’s easier to use a VM.&lt;/p&gt;
&lt;h4 id=&#34;vagrant&#34;&gt;Vagrant&lt;/h4&gt;
&lt;p&gt;So, let’s start with my small Vagrantfile.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Very simple. I’m setting up a trusty64(because docker requires 3.10 &amp;lt;= x) box and then doing a simple shell provision. Also, I gave it a bit juice, since go-server requires a raw power. Here is the shell script:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;The debconf at the end accepts java8’s terms and conditions. And the last line installs docker in my box. This runs for a little while…&lt;/p&gt;
&lt;p&gt;The routing on the end routes every traffic from 172.17.*.* to my vagrant box, which in turn I’ll be able to use from my mac local, like 127.0.0.1:8153/go/home.&lt;/p&gt;
&lt;p&gt;After a vagrant up, my box is ready to be used.&lt;/p&gt;
&lt;h4 id=&#34;docker&#34;&gt;Docker&lt;/h4&gt;
&lt;p&gt;When that’s finished, we can move on to the next part, which is writing a little Dockerfile for our image. Go.cd will require java and a couple of other things, so let’s automate the installation of that so we don’t have to do it by hand.&lt;/p&gt;
&lt;p&gt;Here is a Dockerfile I came up with:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;So, our docker images have to be setup with Java as well for go.cd which I’m taking care of here, and a little bit extra, to add vim, and unzip, which is required for dpkg later.&lt;/p&gt;
&lt;p&gt;At this point run: &lt;strong&gt;docker build -t ubuntu:go .&lt;/strong&gt; -&amp;gt; This will use the dockerfile and create the ubuntu:go image. Note the **. **at the end.&lt;/p&gt;
&lt;h4 id=&#34;gocd&#34;&gt;Go.cd&lt;/h4&gt;
&lt;p&gt;Now, I’m creating two containers. One, go-server, will be the go server, and the other, go-agent, will be the go agent.&lt;/p&gt;
&lt;p&gt;First, go-server:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Pretty straight forward, no? We forward 8153 to vagrant (which forwards it to my mac), so after we start go-server service we should be able to visit: http://127.0.0.1:8153/go/home.&lt;/p&gt;
&lt;p&gt;Lo’, and behold, go server. Let’s add an agent too.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;No need to forward anything here. And as you can see, my agent was added successfully.&lt;/p&gt;
&lt;p&gt;All nice, and dandy. The agent is there, and I enabled it, so it’s ready to work. Let’s give it something to do, shall we?&lt;/p&gt;
&lt;h1 id=&#34;the-app&#34;&gt;The App&lt;/h1&gt;
&lt;p&gt;I’m going to use my gradle project which is on github. This one =&amp;gt; https://github.com/Skarlso/DataMung.git.&lt;/p&gt;
&lt;p&gt;Very basic setup. Just check it out and then build &amp;amp; run tests. Easy, right?&lt;/p&gt;
&lt;p&gt;First step in this process, define the pipeline. I’m going to keep it simple. Name the pipeline DataMunger. Group is Linux. Now, in go.cd you have to define something called, an &lt;strong&gt;environment&lt;/strong&gt;. Environment can be anything you want, I’m going to go with Linux. You have to assign &lt;strong&gt;agents&lt;/strong&gt; to this environment who fulfil it and the pipeline which will use that environment. More on that you can read in the go.cd documentation. This is how you would handle a pipeline which uses linux, and a windows environment at the same time.&lt;/p&gt;
&lt;p&gt;In step one you have to define something called the &lt;strong&gt;Material&lt;/strong&gt;. That will be the source on which the agent will work. This can be multiple, in different folders within the confines of the pipeline, or singular.&lt;/p&gt;
&lt;p&gt;I defined my git project and tested the connection OK. Next up is the first **Stage **and the initial **Job **to perform. This, for me, will be a compile or an assemble, and later on a test run.&lt;/p&gt;
&lt;p&gt;Now, Go is awesome in parallelising jobs. If my project would be large enough, I could have multiple jobs here. But for now, I’ll use stages because they run subsequently. So, first stage, compile. Next stage, testing and archiving the results.&lt;/p&gt;
&lt;p&gt;I added the next stage and defined the artefact. Go supports test-reports. If you define the path to a test artefact than go will parse it and create a nice report out of it.&lt;/p&gt;
&lt;p&gt;Now, let’s run it. It will probably fail on something. 😉&lt;/p&gt;
&lt;p&gt;Well, I’ll be… It worked on the first run.&lt;/p&gt;
&lt;p&gt;And here are the test results.&lt;/p&gt;
&lt;h1 id=&#34;wrap-up&#34;&gt;Wrap-up&lt;/h1&gt;
&lt;p&gt;Well, that’s it folks. Gradle project, with vagrant, docker, and go.cd. I hope you all enjoyed reading about it as much as I did doing it.&lt;/p&gt;
&lt;p&gt;Any questions, please feel free to ask it in the comment section below.&lt;/p&gt;
&lt;p&gt;Cheers,
Have a nice weekend,
Gergely.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Example when to use the Strategy Pattern</title>
      <link>https://skarlso.github.io/2014/02/19/example-when-to-use-the-strategy-pattern/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2014/02/19/example-when-to-use-the-strategy-pattern/</guid>
      <description>&lt;p&gt;Hello folks.&lt;/p&gt;
&lt;p&gt;A quick post about an interesting idea.&lt;/p&gt;
&lt;p&gt;I want to elaborate on a possibility to use the Strategy Design pattern.&lt;/p&gt;
&lt;p&gt;There are many clues that you need one. One is for example if your object has a boolean variable which you use a lot in other classes to determine behavior. Then there is perhaps time to implement a Strategy.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;So you have two classes which do something based on some boolean coming from a class. So what you can do in this case, simply extract out that change in state.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Now I know this looks like a lot of more code. However imagine this on a much larger scale with lots of implementations for Foo and Bar. Your if statements will get very convulated very quickly. This way you abstract away the choice into a Factory. And you can add as many implementations of Base as you like with as many variants as you like without changing the logic anywhere else but the Factory and the Enum. And the Enum could be a Configuration file and you do something like this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This way you don’t even need the Enum anymore. Just use some configuration to determine what class you need at which point in your implementation without using an If statement at all.&lt;/p&gt;
&lt;p&gt;Hope this helps.&lt;/p&gt;
&lt;p&gt;I whipped this up from memory so please feel free to tell me if I missed something or have a syntax error in there somewhere…&lt;/p&gt;
&lt;p&gt;As always,&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cucumber-Jvm And @AfterAll</title>
      <link>https://skarlso.github.io/2013/04/18/cucumber-jvm-and-afterall/</link>
      <pubDate>Thu, 18 Apr 2013 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2013/04/18/cucumber-jvm-and-afterall/</guid>
      <description>&lt;p&gt;Hey folks.&lt;/p&gt;
&lt;p&gt;I find out something new about cucumber-jvm every day.&lt;/p&gt;
&lt;p&gt;If you want something that is executed after all of the tests have finished you must use the Java shutdownHook. It’s simple really you add in a block of code that can run right before the JVM quits. I know I know… It sounds awful but I found out that this is the actual way of doing this with java / cucumber.&lt;/p&gt;
&lt;p&gt;Anyways…&lt;/p&gt;
&lt;p&gt;Here is something to do when all of your test quit-&amp;gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;So there you go. You would need to call this in a @BeforeClass to have it attached. This is a small hook attached after each test has run which would submit a report built up from a file. Why not use a listener or a custom report generator or whatever? Because maybe you have the report done in a remote place where you need to place a csv file which will be available to everybody to look at. And you want the report to be sent and generated dynamically. Or you have some clean up to do after your suit is done.&lt;/p&gt;
&lt;p&gt;In ruby the @AfterAll is actually equivalent to this which in ruby land would be at_exit.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;So there it is. Hope this helped.&lt;/p&gt;
&lt;p&gt;Cheers,&lt;/p&gt;
&lt;p&gt;And as always,&lt;/p&gt;
&lt;p&gt;Have a nice day!&lt;/p&gt;
&lt;p&gt;G.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cucumber Test Name and Tags on Feature</title>
      <link>https://skarlso.github.io/2013/04/15/cucumber-test-name-and-tags-on-feature/</link>
      <pubDate>Mon, 15 Apr 2013 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2013/04/15/cucumber-test-name-and-tags-on-feature/</guid>
      <description>&lt;p&gt;Hello everybody.&lt;/p&gt;
&lt;p&gt;I would like to show you a gem today that I found out.&lt;/p&gt;
&lt;p&gt;Apparently there is no easy way to get to the name of an executing cucumber scenario in cucumber-jvm&lt;/p&gt;
&lt;p&gt;You can try something like that:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;But that isn’t giving you too much now is it? And the API of scenario is as small as it can get. It offers you four options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ember&lt;/li&gt;
&lt;li&gt;getStatus&lt;/li&gt;
&lt;li&gt;isFailed&lt;/li&gt;
&lt;li&gt;write&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That doesn’t help me. I wanted to get the name of the executed feature and the tags on that particular feature. I thought that’s got to be as easy as just getting a scenario accessing the feature and get the tags. Hooooowww boy I was wrong.&lt;/p&gt;
&lt;p&gt;I ended up with this….&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Ohhhhh yes! The fields which I wanted were all private and not accessible. I’m sure there was a reason behind this decision but if it was sensible it eludes me. But in the world of programming nothing is impossible they say so there.&lt;/p&gt;
&lt;p&gt;In cucumberFeature there will be everything what you need. Tags, Names, Tests, Execution time. Everything.&lt;/p&gt;
&lt;p&gt;I know that cucumber runs with jUnit so if there is a better way to do this please for the love of my sanity share it with me.&lt;/p&gt;
&lt;p&gt;Thank you for reading.&lt;/p&gt;
&lt;p&gt;And as always,&lt;/p&gt;
&lt;p&gt;Have a nice day.&lt;/p&gt;
&lt;p&gt;G.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to eliminate a parameter boom</title>
      <link>https://skarlso.github.io/2012/10/09/how-to-eliminate-a-parameter-boom/</link>
      <pubDate>Tue, 09 Oct 2012 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2012/10/09/how-to-eliminate-a-parameter-boom/</guid>
      <description>&lt;p&gt;Hello folks.&lt;/p&gt;
&lt;p&gt;Today I want to write about a little trick I learned.&lt;/p&gt;
&lt;p&gt;If you are working with legacy code and you don’t have the chance to eliminate core design problems, you can use this little pattern to help you out.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Problem is that you have a class that has a gazillion collaborators and at some point in time one of the clever devs thought it would be a cool idea to do dependancy injection via the constructor. We all know that doing this makes the class immutable which is very good for a number of reasons. However it doesn’t provide a flexible solution if you want to leave out one or two collabs. For that your would have to create Adapter constructors and chain them upwards which would get very ugly very fast. While using JavaBeans getters and setters can leave your class in a harmful state like not at all or partially initialised.&lt;/p&gt;
&lt;p&gt;So what’s a good solution then?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One possible solution would be to use some kind of initialisation framework like Springs @Autowired. But cluttering your classes with that isn’t really pretty either. But it’s A solution.&lt;/p&gt;
&lt;p&gt;Another solution is the usage of a builder pattern.&lt;/p&gt;
&lt;p&gt;Consider this class:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;
    &amp;lt;pre class=&amp;quot;java&amp;quot; style=&amp;quot;font-family:monospace;&amp;quot;&amp;gt;    &amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; VeryImportantService &amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#123;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 
&lt;!-- raw HTML omitted --&gt;public&lt;!-- raw HTML omitted --&gt; VeryImportantService&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;CollabOne collabOne, CollabTwo collabTwo, CollabThree collabThree, CollabFour collabFour,
CollabFive collabFive, CollabSix collabSix&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
.
.
.
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Don’t forget that we want these to be optional. I would like to leave out two or three here and there.&lt;/p&gt;
&lt;p&gt;The builder let’s you do that. It looks something like this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;
    &amp;lt;pre class=&amp;quot;java&amp;quot; style=&amp;quot;font-family:monospace;&amp;quot;&amp;gt;    &amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; VeryImportantService &amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#123;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 
&lt;!-- raw HTML omitted --&gt;private&lt;!-- raw HTML omitted --&gt; CollabOne collabOne&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;private&lt;!-- raw HTML omitted --&gt; CollabTwo collabTwo&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;private&lt;!-- raw HTML omitted --&gt; CollabThree collabThree&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;private&lt;!-- raw HTML omitted --&gt; CollabFour collabFour&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;private&lt;!-- raw HTML omitted --&gt; CollabFive collabFive&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;private&lt;!-- raw HTML omitted --&gt; CollabSix collabSix&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
 
 
&lt;!-- raw HTML omitted --&gt;public&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;static&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;class&lt;!-- raw HTML omitted --&gt; Builder&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;private&lt;!-- raw HTML omitted --&gt; CollabOne collabOne&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;private&lt;!-- raw HTML omitted --&gt; CollabTwo collabTwo&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;private&lt;!-- raw HTML omitted --&gt; CollabThree collabThree&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;private&lt;!-- raw HTML omitted --&gt; CollabFour collabFour&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;private&lt;!-- raw HTML omitted --&gt; CollabFive collabFive&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;private&lt;!-- raw HTML omitted --&gt; CollabSix collabSix&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;public&lt;!-- raw HTML omitted --&gt; Builder&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;public&lt;!-- raw HTML omitted --&gt; Builder collabOne&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;CollabOne value&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;this&lt;!-- raw HTML omitted --&gt;.&lt;!-- raw HTML omitted --&gt;collabOne&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;=&lt;!-- raw HTML omitted --&gt; value&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;return&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;this&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;public&lt;!-- raw HTML omitted --&gt; Builder collabTwo&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;CollabTwo value&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;this&lt;!-- raw HTML omitted --&gt;.&lt;!-- raw HTML omitted --&gt;collabTwo&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;=&lt;!-- raw HTML omitted --&gt; value&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;return&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;this&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
 
.
.
.
 
&lt;!-- raw HTML omitted --&gt;public&lt;!-- raw HTML omitted --&gt; VeryImportantService build&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;return&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;new&lt;!-- raw HTML omitted --&gt; VeryImportantService&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;this&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;//private constructor&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;private&lt;!-- raw HTML omitted --&gt; VeryImportantService&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;Builder builder&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;this&lt;!-- raw HTML omitted --&gt;.&lt;!-- raw HTML omitted --&gt;collabOne&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;=&lt;!-- raw HTML omitted --&gt; builder.&lt;!-- raw HTML omitted --&gt;collabOne&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;this&lt;!-- raw HTML omitted --&gt;.&lt;!-- raw HTML omitted --&gt;collabTwo&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;=&lt;!-- raw HTML omitted --&gt; builder.&lt;!-- raw HTML omitted --&gt;collabTwo&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
.
.
.
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Now… calling this would look something like this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This enables you to be flexible HOWEVER!! I HATE train wrecks. So I would probably tweak it not to return things, but set them. Then you would end up calling then line by line. Which is still not the best but better then the alternative.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;End words&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So there you go. This is A solution not THE solution obviously. The best would be to NOT design such a monster at all. If you have any better ideas please feel free to share. I would gladly put them on my blog.&lt;/p&gt;
&lt;p&gt;As always,&lt;/p&gt;
&lt;p&gt;Thanks for reading,&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TDD and Game of Life</title>
      <link>https://skarlso.github.io/2012/07/12/tdd-and-game-of-life/</link>
      <pubDate>Thu, 12 Jul 2012 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2012/07/12/tdd-and-game-of-life/</guid>
      <description>&lt;p&gt;So today at 8-12PM I had a great session with two friends of mine. It was awesome. Like a mini code retreat.&lt;/p&gt;
&lt;p&gt;We set down in a musky bar, drank wine and beer and cider, and decided to practice some TDD with the well known problem of &lt;!-- raw HTML omitted --&gt;Conway’s Game of Life&lt;!-- raw HTML omitted --&gt;. This challenge is really interesting. I never done it before, ever. So it was a really good practice for me.&lt;/p&gt;
&lt;p&gt;So…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In the beginning there was Test&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One of my friends and I started out by developing the implementation for the game while the second one was mentoring and couching us. As with any problem I’m facing now days, I started with writing a failing test first. I didn’t write any kind of production code yet. I wrote a test testing for having the class called game of life.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;
    &amp;lt;pre class=&amp;quot;java&amp;quot; style=&amp;quot;font-family:monospace;&amp;quot;&amp;gt;    @Test
&amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #000066; font-weight: bold;&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; shouldHaveClassForGameOfLife&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#40;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#41;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#123;&amp;lt;/span&amp;gt;
    GameOfLife gameOfLife &amp;lt;span style=&amp;quot;color: #339933;&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; GameOfLife&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#40;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#41;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #339933;&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#125;&amp;lt;/span&amp;gt;&amp;lt;/pre&amp;gt;
  &amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This wasn’t compiling of course because I didn’t have any kind of GameOfLife class. But intelliJ is so intelligent that I simply pressed Alt+Enter and created the class immediately. The class didn’t have anything in it, but I already had a passing test.&lt;/p&gt;
&lt;p&gt;So this went on and on and I created one test after another while my other coding friend did the same.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Now the amazing part&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I begun working on the Grid. A simple octagonal coordinating system. This was represented in the beginning with a simple two dimensional array with Cells in it.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;
    &amp;lt;pre class=&amp;quot;java&amp;quot; style=&amp;quot;font-family:monospace;&amp;quot;&amp;gt;    Cells&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#91;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#93;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#91;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#93;&amp;lt;/span&amp;gt; cells &amp;lt;span style=&amp;quot;color: #339933;&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; Cells&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#91;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #cc66cc;&amp;quot;&amp;gt;50&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#93;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#91;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #cc66cc;&amp;quot;&amp;gt;50&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#93;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #339933;&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;&amp;lt;/pre&amp;gt;
  &amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This of course wasn’t dynamic. I didn’t care about that yet. I had my grid of cells. These cells were initially all dead.&lt;/p&gt;
&lt;p&gt;Now, the interesting part is that as I developed my Grid finding out the Cells neighbours and counting them, my friend worked on the Cells themselves and getting their next state and killing them based on the rules.&lt;/p&gt;
&lt;p&gt;We never talked to each other, didn’t agree on roles or directions or anything. And even so at the and… We were at a stage where we met in the middle and could merge our codes! Our little game of life evolved with a push of a button. ( Three actually. )&lt;/p&gt;
&lt;p&gt;This was simply amazing. Without ever talking about the direction we want to go we created a working code base that could be merged!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It just works&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before TDD I would have tackled this problem much differently. And it would have taken me much more time too. This was like an hour or so.&lt;/p&gt;
&lt;p&gt;TDD helped me break down the job into small, manageable tasks. I created and deleted and rewrote tests as I went on and on and developed the algorithm for my Grid and Cell. And eventually the problem slowly unfolded itself right before my eyes. I began to see the connections. I began to see the beauty. I began to understand! This is something I rarely enjoyed previously without using TDD.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I recommend for you guys to do the same. Just sit down, find a problem, find a coding kata and just do it with TDD. With PROPER TDD.&lt;/p&gt;
&lt;p&gt;Here are some good sites for katas and problems:&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;http://codekata.pragprog.com/&#34;&gt;http://codekata.pragprog.com/&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;http://www.spoj.pl/problems/classical/&#34;&gt;http://www.spoj.pl/problems/classical/&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Just select a problem and then start cracking on it. Do this every time you have some free time. Like a martial art trainee doing basic exercises and you will get better at problem solving and at TDD too. I promise.&lt;/p&gt;
&lt;p&gt;Happy coding and good night!&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solution to Wrap Kata</title>
      <link>https://skarlso.github.io/2012/06/26/solution-to-wrap-kata/</link>
      <pubDate>Tue, 26 Jun 2012 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2012/06/26/solution-to-wrap-kata/</guid>
      <description>&lt;p&gt;My solution to the String Wrap Kata. The goal is to have it wrap a text on a given column width.&lt;/p&gt;
&lt;p&gt;It is not the best solution but this is my first try. I did it with TDD so there were tests first, which I’m not going to copy in..&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;
    &amp;lt;pre class=&amp;quot;java&amp;quot; style=&amp;quot;font-family:monospace;&amp;quot;&amp;gt;&amp;amp;nbsp;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;public&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;class&lt;!-- raw HTML omitted --&gt; WrapKata &lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;public&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;String&lt;!-- raw HTML omitted --&gt; wrap&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;String&lt;!-- raw HTML omitted --&gt; input, &lt;!-- raw HTML omitted --&gt;int&lt;!-- raw HTML omitted --&gt; columnSize&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;if&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;input.&lt;!-- raw HTML omitted --&gt;length&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;&amp;lt;=&lt;!-- raw HTML omitted --&gt; columnSize&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;return&lt;!-- raw HTML omitted --&gt; input&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;else&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;return&lt;!-- raw HTML omitted --&gt; wrapLines&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;input, columnSize&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;private&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;String&lt;!-- raw HTML omitted --&gt; wrapLines&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;String&lt;!-- raw HTML omitted --&gt; input, &lt;!-- raw HTML omitted --&gt;int&lt;!-- raw HTML omitted --&gt; columnSize&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;int&lt;!-- raw HTML omitted --&gt; breakPoint &lt;!-- raw HTML omitted --&gt;=&lt;!-- raw HTML omitted --&gt; getBreakPoint&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;input, columnSize&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;String&lt;!-- raw HTML omitted --&gt; head &lt;!-- raw HTML omitted --&gt;=&lt;!-- raw HTML omitted --&gt; createHead&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;input, breakPoint&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;String&lt;!-- raw HTML omitted --&gt; tail &lt;!-- raw HTML omitted --&gt;=&lt;!-- raw HTML omitted --&gt; createTail&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;input, breakPoint&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;return&lt;!-- raw HTML omitted --&gt; head &lt;!-- raw HTML omitted --&gt;+=&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;&amp;quot;&lt;!-- raw HTML omitted --&gt;\n&lt;!-- raw HTML omitted --&gt;&amp;quot;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;+&lt;!-- raw HTML omitted --&gt; wrap&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;tail, columnSize&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;private&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;String&lt;!-- raw HTML omitted --&gt; createTail&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;String&lt;!-- raw HTML omitted --&gt; input, &lt;!-- raw HTML omitted --&gt;int&lt;!-- raw HTML omitted --&gt; breakPoint&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;return&lt;!-- raw HTML omitted --&gt; input.&lt;!-- raw HTML omitted --&gt;substring&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;breakPoint&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;.&lt;!-- raw HTML omitted --&gt;trim&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;private&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;String&lt;!-- raw HTML omitted --&gt; createHead&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;String&lt;!-- raw HTML omitted --&gt; input, &lt;!-- raw HTML omitted --&gt;int&lt;!-- raw HTML omitted --&gt; breakPoint&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;return&lt;!-- raw HTML omitted --&gt; input.&lt;!-- raw HTML omitted --&gt;substring&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;, breakPoint&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;.&lt;!-- raw HTML omitted --&gt;trim&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;private&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;int&lt;!-- raw HTML omitted --&gt; getBreakPoint&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;String&lt;!-- raw HTML omitted --&gt; input, &lt;!-- raw HTML omitted --&gt;int&lt;!-- raw HTML omitted --&gt; columnSize&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;if&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;input.&lt;!-- raw HTML omitted --&gt;contains&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&amp;quot; &amp;ldquo;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;return&lt;!-- raw HTML omitted --&gt; input.&lt;!-- raw HTML omitted --&gt;lastIndexOf&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&#39; &amp;lsquo;&lt;!-- raw HTML omitted --&gt;, columnSize&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;else&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;return&lt;!-- raw HTML omitted --&gt; columnSize&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Don’t throw Exception</title>
      <link>https://skarlso.github.io/2012/06/13/dont-throw-exception/</link>
      <pubDate>Wed, 13 Jun 2012 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2012/06/13/dont-throw-exception/</guid>
      <description>&lt;p&gt;Hi.&lt;/p&gt;
&lt;p&gt;Today I want to talk about a common problem in many frameworks I encountered over the course of my carrier as a Java dev / automation engineer, whatnot.&lt;/p&gt;
&lt;p&gt;Throwing Exceptions. That is in your method you have something like this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;
    &amp;lt;pre class=&amp;quot;java&amp;quot; style=&amp;quot;font-family:monospace;&amp;quot;&amp;gt;    &amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #000066; font-weight: bold;&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; insertMethodNameHere&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#40;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #003399;&amp;quot;&amp;gt;String&amp;lt;/span&amp;gt; param&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#41;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;throws&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #003399;&amp;quot;&amp;gt;Exception&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#123;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#125;&amp;lt;/span&amp;gt;&amp;lt;/pre&amp;gt;
  &amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This is bad. And I will tell you in short forms why.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hides exceptions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This one should be obvious. When a method throws exception you can never be sure what kind of exceptions it handles. It will hide what problems it can encounter. It will hide possible threats and will generally mean nothing to you when it fails.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hides functionality&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One of the things you can do will come up with a method that throws at least six exception. Well guess what… That will tell you that the method has DESIGN ISSUES! The first rule of software development is that a method should do only one thing! Well if it throws six exceptions chances are it does more then one…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hard to debug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You wont have a meaning full exception if it fails immediately. You will have to go through lines of codes and stack traces to find out what the hell happened and what threw what kind of exception where. That is just simply stupid. Why give yourself a hard time?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So what to do instead?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Meaning full exceptions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you have to throw… Throw meaning full exceptions. Things like: LoginFailedExpcetion(String username, String password); In the message write:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;
    &amp;lt;pre class=&amp;quot;java&amp;quot; style=&amp;quot;font-family:monospace;&amp;quot;&amp;gt;    &amp;lt;span style=&amp;quot;color: #003399;&amp;quot;&amp;gt;String&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;quot;color: #006633;&amp;quot;&amp;gt;format&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#40;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff;&amp;quot;&amp;gt;&amp;quot;Failed login with username: %s; password: %s&amp;quot;&amp;lt;/span&amp;gt;, username, password&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#41;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #339933;&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;&amp;lt;/pre&amp;gt;
  &amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;When this fails you will immediately know what happened without miles of stack trace to run through.&lt;/p&gt;
&lt;p&gt;When you go ahead and start to re-factor your code to handle exceptions properly you will end up with methods throwing six – seven exceptions. Don’t be afraid. That means that you finally are able to see that your code is doing many things that it is not supposed to do. Start by extracting bits and pieces of your code into smaller segments that throw a max of two exceptions. Write unit tests around the function and start running them as you re-factor. See what fails so you can track your changes as you go.&lt;/p&gt;
&lt;p&gt;A general good advice is that your method should throw a maximum of &lt;strong&gt;TWO&lt;/strong&gt; exception. If you have more, you are doing something more then you should. Refactor / Extract that bit into a smaller function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Handling exceptions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What you really want to do is create a Layer that you will be using to capture and handle exceptions. You can than take that layer and hide it deep deep into your framework so that you never ever see it again. Just like with switch.&lt;/p&gt;
&lt;p&gt;As you go you will have layers of layers of exceptions. You will have features that depend on each other and talk to each other in some ways.&lt;/p&gt;
&lt;p&gt;Meaning full exception will help you find out what broke why. For example you have Login that throws a Login exception. On top of that you have an order that handles OrderFailedException. You will have an easy time seeing that the order failed because the login failed. Because you handled your login exception in the Login Layer. And you handled your OrderException in the order layer. There are no mixes. Keep it clean and keep it where it belongs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Exceptions are part of Java just like String or int or long is. You use these wisely so why don’t you apply that same logic to your Exception handling? Don’t be afraid of having 20-25 exception classes. Group them together or leave them in their respective packages or have them in a deep layer but HAVE THEM. They WILL save time and time is always money. So they will save you money in the end when an error occurs. And errors will always occur.&lt;/p&gt;
&lt;p&gt;Thanks for reading,&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JMS Connection setup and Framework</title>
      <link>https://skarlso.github.io/2012/03/04/jms-connection-setup-and-framework/</link>
      <pubDate>Sun, 04 Mar 2012 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2012/03/04/jms-connection-setup-and-framework/</guid>
      <description>&lt;p&gt;Hello chumps.&lt;/p&gt;
&lt;p&gt;Today I want to write about jms connection testing with a small framework. I wrote a small thing using a factory object model. It’s a lead, a proof of concept. You can use this to go onward.&lt;/p&gt;
&lt;p&gt;First, let’s begin with the JMS connection it self.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JMS Connection&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First rule of thumb is: “Don’t wait for a response when dealing with JMS queues.” How so? Because, a JMS queue is asynchronous so you wont get back anything. There are however two ways of checking if it was a success or not.&lt;/p&gt;
&lt;p&gt;1: Check your database. The service you are trying out probably records something in the database, right? Check it… You can use a simple JDBC connection, or a Postgres connection or whatever your choice of database is.&lt;/p&gt;
&lt;p&gt;2: You can monitor use the log of your choice of service provider. If there is an exception the moment you send something, you can be sure it is received. Just the format is not correct. This is of course based on how your service handles exceptions.&lt;/p&gt;
&lt;p&gt;So let’s get down to business.&lt;/p&gt;
&lt;p&gt;First, there is a really good article on how to create a JMS connection.&lt;/p&gt;
&lt;p&gt;This is the link for it: &lt;a href=&#34;http://www.javablogging.com/simple-guide-to-java-message-service-jms-using-activemq&#34; title=&#34;Simple JMS How To&#34;&gt;Simple Guide to Java message service JMS using ActiveMQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Itt will tell you everything you need to know about creating a connection and waiting for a response.&lt;/p&gt;
&lt;p&gt;I will tell you now how to use this information in a real live environment.&lt;/p&gt;
&lt;p&gt;In a real environment you will be using a queue which has certain settings that will not allow you to “join” it, or creating it. And you need to get the name of the queue and certain settings, like the destination URL.&lt;/p&gt;
&lt;p&gt;First, the tool you are going to use is called JConsole. JConsole is a tool to monitor applications. It’s tool to monitor the JVM. I wont go into details about it since there are numerous descriptions about it. It is part of the java installation.&lt;/p&gt;
&lt;p&gt;So after firing it up and giving it a connection url which would look like this: ‘service:jmx:rmi:///jndi/rmi://hostName:portNum/jmxrmi’, you would go ahead and search on the TAB:&lt;strong&gt;Threads&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Look for a Thread that is labelled like this: &lt;!-- raw HTML omitted --&gt; Transport Server: tcp://0.0.0.0: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;This will be your destination url.&lt;/p&gt;
&lt;p&gt;In the blog the guy is using ActiveMQ. It’s your best guess. It’s lightweight, it’s fast it’s easy. Go for it.&lt;/p&gt;
&lt;p&gt;So your Destination would look like this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;
    &amp;lt;pre class=&amp;quot;java&amp;quot; style=&amp;quot;font-family:monospace;&amp;quot;&amp;gt;    ConnectionFactory connectionFactory &amp;lt;span style=&amp;quot;color: #339933;&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt;
        &amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; ActiveMQConnectionFactory&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#40;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff;&amp;quot;&amp;gt;&amp;quot;&amp;amp;lt;yourserviceparameter&amp;amp;gt;://tcp://0.0.0.0:&amp;amp;lt;port&amp;amp;gt;&amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#41;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #339933;&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;quot;color: #003399;&amp;quot;&amp;gt;Connection&amp;lt;/span&amp;gt; connection &amp;lt;span style=&amp;quot;color: #339933;&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; connectionFactory.&amp;lt;span style=&amp;quot;color: #006633;&amp;quot;&amp;gt;createConnection&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#40;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#41;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #339933;&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;
connection.&amp;lt;span style=&amp;quot;color: #006633;&amp;quot;&amp;gt;start&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#40;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#41;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #339933;&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;&amp;lt;/pre&amp;gt;
  &amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;After that you will need the queue name which you can get as easy as this. Go to the TAB &lt;strong&gt;MBeans&lt;/strong&gt;. There you can see, if you are using ActiveMQ, you will see something like this : org.active.activemq. Open this up and you will see under localhost a number of queues that your server has configured. Open up one of them and copy the queue name in the createQueue.&lt;/p&gt;
&lt;p&gt;Use it like this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;
    &amp;lt;pre class=&amp;quot;java&amp;quot; style=&amp;quot;font-family:monospace;&amp;quot;&amp;gt;    Destination destination &amp;lt;span style=&amp;quot;color: #339933;&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; session.&amp;lt;span style=&amp;quot;color: #006633;&amp;quot;&amp;gt;createQueue&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#40;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff;&amp;quot;&amp;gt;&amp;quot;&amp;amp;lt;queue name&amp;amp;gt;&amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#41;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #339933;&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;&amp;lt;/pre&amp;gt;
  &amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Of course if your service is configured properly you wont have any access to it. Use the connection like this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;
    &amp;lt;pre class=&amp;quot;java&amp;quot; style=&amp;quot;font-family:monospace;&amp;quot;&amp;gt;    connection &amp;lt;span style=&amp;quot;color: #339933;&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; connectionFactory.&amp;lt;span style=&amp;quot;color: #006633;&amp;quot;&amp;gt;createConnection&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#40;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff;&amp;quot;&amp;gt;&amp;quot;username&amp;quot;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;quot;color: #0000ff;&amp;quot;&amp;gt;&amp;quot;password&amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#41;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #339933;&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;&amp;lt;/pre&amp;gt;
  &amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;You will have now logged in with the proper user.&lt;/p&gt;
&lt;p&gt;Now you can send the message. You have everything configured.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Framework&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let’s speak about the framework you will need to properly use this technology.&lt;/p&gt;
&lt;p&gt;One of the paradigms for programming is design to interfaces. If you need a proper working framework, your ave to design with the mind set to changing pieces of code. Thinking about what would change the most. Your connection settings. You want a framework which can use any kind of connection. Not just JMS but whatever connection you would like. It could be a synchronous one. Or a database one. Or a JMS. Doesn’t matter. You are only interested in a message sent or a connection, or whatever you want.&lt;/p&gt;
&lt;p&gt;So let’s get to it.&lt;/p&gt;
&lt;p&gt;Interface:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;
    &amp;lt;pre class=&amp;quot;java&amp;quot; style=&amp;quot;font-family:monospace;&amp;quot;&amp;gt;    &amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;interface&amp;lt;/span&amp;gt; IConnection &amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#123;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;quot;color: #000066; font-weight: bold;&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; sendMessage&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#40;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#41;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #339933;&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#125;&amp;lt;/span&amp;gt;&amp;lt;/pre&amp;gt;
  &amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This is sample connection interface. You could have numerous templates here.&lt;/p&gt;
&lt;p&gt;You will be using an object factory pattern here. Your implementer will be taken for a Java Property file. But it can be taken from whatever configuration you like. XML maybe, or a database even.&lt;/p&gt;
&lt;p&gt;Let’s see you connection factory:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;
    &amp;lt;pre class=&amp;quot;java&amp;quot; style=&amp;quot;font-family:monospace;&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; ConnFactory &amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#123;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 
&lt;!-- raw HTML omitted --&gt;static&lt;!-- raw HTML omitted --&gt; Logger logger &lt;!-- raw HTML omitted --&gt;=&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;new&lt;!-- raw HTML omitted --&gt; Logger&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;public&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;static&lt;!-- raw HTML omitted --&gt; IConnection getImplementer&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;Properties&lt;!-- raw HTML omitted --&gt; prop &lt;!-- raw HTML omitted --&gt;=&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;new&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;Properties&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;try&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
prop.&lt;!-- raw HTML omitted --&gt;load&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;new&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;FileInputStream&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&amp;ldquo;conf/implementer.property&amp;rdquo;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;catch&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;IOException&lt;!-- raw HTML omitted --&gt; io&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
logger.&lt;!-- raw HTML omitted --&gt;Log&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&amp;ldquo;Could not find property file: &amp;ldquo;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;+&lt;!-- raw HTML omitted --&gt; io.&lt;!-- raw HTML omitted --&gt;getMessage&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;String&lt;!-- raw HTML omitted --&gt; implementerClass &lt;!-- raw HTML omitted --&gt;=&lt;!-- raw HTML omitted --&gt; prop.&lt;!-- raw HTML omitted --&gt;getProperty&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&amp;ldquo;implementer&amp;rdquo;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
 
Class&lt;!-- raw HTML omitted --&gt;&amp;lt;?&amp;gt;&lt;!-- raw HTML omitted --&gt; iConnect &lt;!-- raw HTML omitted --&gt;=&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;null&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;try&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
iConnect &lt;!-- raw HTML omitted --&gt;=&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;Class&lt;!-- raw HTML omitted --&gt;.&lt;!-- raw HTML omitted --&gt;forName&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;implementerClass&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;catch&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;ClassNotFoundException&lt;!-- raw HTML omitted --&gt; ce&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
logger.&lt;!-- raw HTML omitted --&gt;Log&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&amp;ldquo;Class could not be found: &amp;ldquo;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;+&lt;!-- raw HTML omitted --&gt; ce.&lt;!-- raw HTML omitted --&gt;getMessage&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
 
IConnection connection &lt;!-- raw HTML omitted --&gt;=&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;null&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;try&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
connection &lt;!-- raw HTML omitted --&gt;=&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;IConnection&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt; iConnect.&lt;!-- raw HTML omitted --&gt;newInstance&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;catch&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;IllegalAccessException&lt;!-- raw HTML omitted --&gt; ie&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
logger.&lt;!-- raw HTML omitted --&gt;Log&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&amp;ldquo;Illegal access excpetion: &amp;ldquo;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;+&lt;!-- raw HTML omitted --&gt; ie.&lt;!-- raw HTML omitted --&gt;getMessage&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;catch&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;InstantiationException&lt;!-- raw HTML omitted --&gt; e&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
 
logger.&lt;!-- raw HTML omitted --&gt;Log&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&amp;ldquo;Instatiation exception occured. &amp;ldquo;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;+&lt;!-- raw HTML omitted --&gt; e.&lt;!-- raw HTML omitted --&gt;getMessage&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;return&lt;!-- raw HTML omitted --&gt; connection&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Easy enough, right? Class.forname will instantiate the class name you have in the property file. This could be something like this: com.packagename.ClassName. Doesn’t matter to you. You can add some typeof checks, or instanceof checks, whatever you like. Or you can use &lt;!-- raw HTML omitted --&gt; generics.&lt;/p&gt;
&lt;p&gt;Let’s get to the concrete implementation:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;
    &amp;lt;pre class=&amp;quot;java&amp;quot; style=&amp;quot;font-family:monospace;&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; JMSConnectionImpl &amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;implements&amp;lt;/span&amp;gt; IConnection &amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#123;&amp;lt;/span&amp;gt;
Logger logger &amp;lt;span style=&amp;quot;color: #339933;&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; Logger&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#40;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#41;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #339933;&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 
&lt;!-- raw HTML omitted --&gt;public&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;void&lt;!-- raw HTML omitted --&gt; sendMessage&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;Connection&lt;!-- raw HTML omitted --&gt; connection &lt;!-- raw HTML omitted --&gt;=&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;null&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
.
.
.
&lt;!-- raw HTML omitted --&gt;finally&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt;
connection.&lt;!-- raw HTML omitted --&gt;close&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
 
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Simple enough. Here you have a concrete implementation of your collection and your sender class.&lt;/p&gt;
&lt;p&gt;And the simple usage facility of this is… simple too:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;
    &amp;lt;pre class=&amp;quot;java&amp;quot; style=&amp;quot;font-family:monospace;&amp;quot;&amp;gt;    IConnection iConnection &amp;lt;span style=&amp;quot;color: #339933;&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; ConnFactory.&amp;lt;span style=&amp;quot;color: #006633;&amp;quot;&amp;gt;getImplementer&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#40;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#41;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #339933;&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 
iConnection.&lt;!-- raw HTML omitted --&gt;sendMessage&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;(&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;)&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Simple enough too, right? So what happens here? You have a factory that will give you back any kind of implementation you are writing in you property file. You don’t care what the implementation is in your test. You don’t care what it’s name is. You don’t care what it’s result is. Okay, you care about the result, but that’s another history since you will check that elsewhere.&lt;/p&gt;
&lt;p&gt;There you go. If any question occurs, please don’t hesitate to ask.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://skarlso.github.io/2012/02/27/configuration/</link>
      <pubDate>Mon, 27 Feb 2012 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2012/02/27/configuration/</guid>
      <description>&lt;p&gt;When I see something like this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;
    &amp;lt;pre class=&amp;quot;java&amp;quot; style=&amp;quot;font-family:monospace;&amp;quot;&amp;gt;    &amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; Config &amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#123;&amp;lt;/span&amp;gt;
    &amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #000000; font-weight: bold;&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; string DATABASELINK &amp;lt;span style=&amp;quot;color: #339933;&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #0000ff;&amp;quot;&amp;gt;&amp;quot;linkhere&amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #339933;&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;
    .
    .
    .
&amp;lt;span style=&amp;quot;color: #009900;&amp;quot;&amp;gt;&amp;amp;#125;&amp;lt;/span&amp;gt;&amp;lt;/pre&amp;gt;
  &amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;It sends a small, but chilling shiver down my spine. Just… don’t. There are a lot of possibilities to use configuration in Java. Java property files. Xml. Xml serialization. CSV file. Whatever suits you best, but this? DON’T!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
