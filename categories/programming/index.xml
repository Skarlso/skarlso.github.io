<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/programming/</link>
    <description>Recent content in programming on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 04 Mar 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://skarlso.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Wercker Test</title>
      <link>https://skarlso.github.io/2016/03/04/wercker-test-2/</link>
      <pubDate>Fri, 04 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/03/04/wercker-test-2/</guid>
      <description><![CDATA[<h2 id="basics">Basics</h2>
<p>This is a wercker Test.</p>
]]></description>
    </item>
    
    <item>
      <title>Wercker Test</title>
      <link>https://skarlso.github.io/2016/02/10/wercker-test/</link>
      <pubDate>Wed, 10 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/02/10/wercker-test/</guid>
      <description><![CDATA[<h2 id="basics">Basics</h2>
<p>This is a wercker Test.</p>
]]></description>
    </item>
    
    <item>
      <title>Doing CORS in Go with Gin and JSON</title>
      <link>https://skarlso.github.io/2016/02/02/doing-cors-in-go-with-gin-and-json/</link>
      <pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/02/02/doing-cors-in-go-with-gin-and-json/</guid>
      <description><![CDATA[<h2 id="basics">Basics</h2>
<p>Hello folks.</p>
<p>This will be a quick post about how to do CORS with jQuery, Gin in Go with a very simple ajax GET and Json.</p>
<p>I&rsquo;m choosing JSON here because basically I don&rsquo;t really like JSONP. And actually, it&rsquo;s not very complicated to do CORS, it&rsquo;s just hidden enough so that it doesn&rsquo;t become transparent.</p>
<p>First, what is CORS? It&rsquo;s Cross-Platform Resource Sharing. It has been invented so that without your explicit authorization in the header of a request, Javascript can&rsquo;t reach outside of your domain and be potentially harmful to your visitors.</p>
<p>Now, suppose you have an architecture like this.</p>
<p><img src="/img/architecture.png" alt="Architecture"></p>
<p>You have multiple agents sitting on multiple nodes. You have one central server, and you have multiple front-ends. Everybody can only talk to the Server but the server does talk to everyone. You would like to have a dynamic front-end and would like to display data with ajax calls. Since your front-end sits on a different server, you will have to do something about CORS. This is how I solved it&hellip;</p>
<p>I&rsquo;m using <a href="https://github.com/gin-gonic/gin">Gin</a> for my REST service for <a href="https://github.com/Skarlso/dockmaster2">Dockmaster</a>. For this two work, you need to adjust two component.</p>
<h2 id="server">Server</h2>
<p>There is thing called a Preflight-Check. In essence, the preflight check is sent BEFORE the actual request to check if the next request is allowed to go out of the domain. The preflight check is sent to the same URI just with OPTIONS method. In order to tell the caller that the next one will be safe, you need three things.</p>
<p>First, you need to set two Headers.
#1 -&gt; Access-Control-Allow-Origin to &ldquo;*&rdquo;.
#2 -&gt; Access-Control-Allow-Headers to &ldquo;access-control-allow-origin, access-control-allow-headers&rdquo;.</p>
<p>These are the minimum headers you can set. If you allow Access-Control-Allow-Origin you also have to allow it in the headers section because the next request will expect it to be there. Also, note here that setting Origin to * is only recommended in development environment. Otherwise it should be set to whatever your domain is.</p>
<p>Second, you need to respond to the OPTIONS method with a 200. In order to do that, I added a simple rule with the same end-point but with OPTIONS.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">router</span> <span class="o">:=</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">Default</span><span class="p">()</span>
    <span class="nx">v1</span> <span class="o">:=</span> <span class="nx">router</span><span class="p">.</span><span class="nf">Group</span><span class="p">(</span><span class="nx">APIBASE</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nx">v1</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/list&#34;</span><span class="p">,</span> <span class="nx">listContainers</span><span class="p">)</span>
        <span class="nx">v1</span><span class="p">.</span><span class="nf">POST</span><span class="p">(</span><span class="s">&#34;/add&#34;</span><span class="p">,</span> <span class="nx">addContainers</span><span class="p">)</span>
        <span class="nx">v1</span><span class="p">.</span><span class="nf">POST</span><span class="p">(</span><span class="s">&#34;/delete&#34;</span><span class="p">,</span> <span class="nx">deleteContainers</span><span class="p">)</span>
        <span class="nx">v1</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/inspect/:agentID/:containerID&#34;</span><span class="p">,</span> <span class="nx">inspectContainer</span><span class="p">)</span>
        <span class="nx">v1</span><span class="p">.</span><span class="nf">OPTIONS</span><span class="p">(</span><span class="s">&#34;/inspect/:agentID/:containerID&#34;</span><span class="p">,</span> <span class="nx">preflight</span><span class="p">)</span>
        <span class="nx">v1</span><span class="p">.</span><span class="nf">POST</span><span class="p">(</span><span class="s">&#34;/stopAll&#34;</span><span class="p">,</span> <span class="nx">stopAll</span><span class="p">)</span>
        <span class="nx">v1</span><span class="p">.</span><span class="nf">OPTIONS</span><span class="p">(</span><span class="s">&#34;/stopAll&#34;</span><span class="p">,</span> <span class="nx">preflight</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">router</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="s">&#34;:8989&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">preflight</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">c</span><span class="p">.</span><span class="nf">Header</span><span class="p">(</span><span class="s">&#34;Access-Control-Allow-Origin&#34;</span><span class="p">,</span> <span class="s">&#34;*&#34;</span><span class="p">)</span>
    <span class="nx">c</span><span class="p">.</span><span class="nf">Header</span><span class="p">(</span><span class="s">&#34;Access-Control-Allow-Headers&#34;</span><span class="p">,</span> <span class="s">&#34;access-control-allow-origin, access-control-allow-headers&#34;</span><span class="p">)</span>
    <span class="nx">c</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="kd">struct</span><span class="p">{}{})</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>You can see that the preflight method is there for two end-points. I added it to those end-points which will reach over the domain. The others are all local, thus they don&rsquo;t need that. This leads to a little duplication, but that is fine. I have a very fine control over what actually is allowed to go outside of the domain.</p>
<p>So, how do we call this?</p>
<h2 id="frontend">Frontend</h2>
<p>In the front-end&rsquo;s web layout, I&rsquo;m doing an Ajax GET, which looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript">                <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
                    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://localhost:8989/api/1/inspect/&#39;</span><span class="o">+</span><span class="nx">data</span><span class="p">.</span><span class="nx">agentid</span><span class="o">+</span><span class="s1">&#39;/&#39;</span><span class="o">+</span><span class="nx">data</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
                    <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
                    <span class="nx">dataType</span><span class="o">:</span><span class="s2">&#34;json&#34;</span><span class="p">,</span>
                    <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span><span class="s2">&#34;Access-Control-Allow-Origin&#34;</span><span class="o">:</span> <span class="s2">&#34;*&#34;</span><span class="p">,</span> <span class="s2">&#34;Access-Control-Allow-Headers&#34;</span><span class="o">:</span> <span class="s2">&#34;access-control-allow-origin, access-control-allow-headers&#34;</span><span class="p">},</span>
                    <span class="nx">processData</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
                    <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
                        <span class="kd">var</span> <span class="nx">json</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
                        <span class="nx">independentPopup</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s2">&#34;&lt;pre &gt;&#34;</span><span class="o">+</span><span class="nx">json</span><span class="o">+</span><span class="s2">&#34;&lt;/pre&gt;&#34;</span><span class="p">);</span>
                        <span class="nx">$</span><span class="p">(</span><span class="nx">link</span><span class="p">).</span><span class="nx">after</span><span class="p">(</span><span class="nx">independentPopup</span><span class="p">);</span>
                    <span class="p">}</span>
                <span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><p>After the headers are set, the request will work nicely.</p>
<h2 id="y-u-no-middleware">Y U No Middleware?</h2>
<p>And now you could say that, why not just have a middleware which will always accept OPTIONS for every end-point. Because I like it better this way. Some would argue that this is too granular, but fact is, that in my opinion, this is more readable and immediatly visible. However, if you DO want to do that, you have several options to your disposal.</p>
<p><a href="https://github.com/itsjamie/gin-cors">Cors Basic Http Middleware</a> and for Gin <a href="https://github.com/itsjamie/gin-cors">Gin CORS Middleware</a>.</p>
<h2 id="summary">Summary</h2>
<p>This is it. You can see the code in its entirety on Github. Have a better idea on how to do it? Please! Do not hesitate to share. I always like to learn.</p>
<p>Thank you for reading!</p>
<p>And as always,
Have a nice day!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>My Journey in advent of code</title>
      <link>https://skarlso.github.io/2016/01/22/my-journey-in-advent-of-code/</link>
      <pubDate>Fri, 22 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/01/22/my-journey-in-advent-of-code/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>I wanted to share with you my tale of working through the problems with <a href="http://adventofcode.com">Advent Of Code</a>.</p>
<p>It is a nice tale and there are a few things I learned from it, especially in Go, since I used that solve all of the problems. So, let&rsquo;s get started.</p>
<h1 id="solving-the-problems">Solving the problems</h1>
<p>The most important lesson I learned while doing these exercises was, how to solve these problems. A couple of them were simple enough to not have to over think it, but most of them got very tricky. I could have gone with a brute force attempt, but as we see later, that wasn&rsquo;t always a very good solution. And people who used that, actually just got lucky finding their solutions.</p>
<p>The eight stages of breaking down a problem according to this book <a href="http://www.amazon.co.uk/Think-Like-Programmer-Introduction-Creative/dp/1593274246/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1453449575&amp;sr=1-1&amp;keywords=thinking+like+a+programmer">Thinking Like a Programmer</a> are the following:</p>
<ul>
<li>Have a plan</li>
<li>Rephrase</li>
<li>Divide</li>
<li>Start with what you know</li>
<li>Reduce</li>
<li>Analogies</li>
<li>Experiment</li>
<li>Don&rsquo;t get frustrated</li>
</ul>
<h2 id="have-a-plan-and-understanding-your-goal">Have a plan and understanding your goal</h2>
<p>This is simple. Always have a plan of what you would like to do, and how to start. This will help you massively along the way to not to loose sight of what your goal is actually. For example, look at <a href="http://adventofcode.com/day/24">Day 24</a>. At first, it looks like a permutational puzzle, but if you understand the solution we are looking for, you realize that there is an easier way of finding it. Since you only want the packages which consists of the fewest item counts, you would only care about the largest numbers because those will be the fewest which still give you the desired package weight. Suddenly the problem gets easier because you don&rsquo;t have to worry about the other groups any longer.</p>
<h2 id="rephrase">Rephrase</h2>
<p>Rephrasing the problem with your own words can help in understanding it better. Or even better, try explaining it to somebody else. If you cannot rephrase it, you didn&rsquo;t understand it in the first place.</p>
<h2 id="divide">Divide</h2>
<p>If the problem seems daunting because it&rsquo;s massive, just divide it into smaller chunks. This is something that we usually do with large problems, but it&rsquo;s more subtle than that. If you face a problem which seems complex, just factor out parts of it until you got a problem which you do understand. Even if you have to butcher the original puzzle problem. It doesn&rsquo;t matter. Adding complexity later is easier than adding complexity in its infancy.</p>
<h2 id="start-with-what-you-know--finding-analogies">Start with what you know &amp;&amp; Finding analogies</h2>
<p>This one speaks for itself. If you know parts of the problem, because you know analogy for it, or you faced something similar before, or exactly that, start with that.</p>
<h2 id="reduce">Reduce</h2>
<p>If the problem seems too complex, remove complexity. Start with a smaller set. Preferably something testable (I&rsquo;ll come back to that later). Remove constraints, or add them as desired. A constraint makes it harder to solve the puzzle? Remove it, and try solving it without. After that, the solution will give you insight into the problem and you can add that constraint back in.</p>
<p>Consider <a href="http://adventofcode.com/day/11">Day 11</a>. I had fun with this one. In order to easy it up a little, I first, removed the constraint of doing the increment with letters. I did it with numbers. I also removed the constraint of doing it within the confines of a limited length array. After I got that I&rsquo;ll use modulo to make the numbers wrap around, it was way more easy to apply it to characters. And after a little fidgeting this came to life:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">passwd</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">-=</span> <span class="sc">&#39;a&#39;</span>
<span class="nx">passwd</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="p">(</span><span class="nx">passwd</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="p">((</span><span class="sc">&#39;z&#39;</span> <span class="o">-</span> <span class="sc">&#39;a&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
<span class="nx">passwd</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+=</span> <span class="sc">&#39;a&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>The -,+ &lsquo;a&rsquo; is needed so that it&rsquo;s dealing with ascii code from 0 - &lsquo;z&rsquo;. This basically makes it so that when I reach the end of the alphabet it will wrap around and start from &lsquo;a&rsquo; again.</p>
<h2 id="experiment">Experiment</h2>
<p>This led to more solutions than I care to admit. Basically just start experimenting with solutions which are in your head. There is a chance, that what you come up with, will be the solution. This goes very well with the principle of <em>Make it work</em>, <em>Make it right</em>, <em>Make it fast</em>. Just have something working first, and than you can make it work properly after. It&rsquo;s always better to have <em>something</em> rather than nothing.</p>
<p>And last but not least&hellip;</p>
<h2 id="dont-get-frustrated">Don&rsquo;t get frustrated</h2>
<p>This is something I cannot say strongly enough. Seriously. <strong>DO NOT GET FRUSTRATED</strong>. Most of the problems were designed to be harder. Unless you work as a programmer professionally for several years now, or this is a field of interest for you, you will spend a day hacking around on a problem and trying to find a solution which is adequate. In these times, you will get frustrated and think you are too stupid for this, this couldn&rsquo;t be more far from the truth! You might need some inspiration, you might need some time away from the screen, it helps if you draw out the problem in a piece of paper, or just think about it without seeing it for a while. Just take a break, eat something, watch a comedy and get back to it later with a fresh view.</p>
<h1 id="technical-gotchas">Technical Gotchas</h1>
<p>So after the general problem solving side of things, I learned many things about Go, and about the tidbits of this language.</p>
<h2 id="byte-slices">Byte Slices</h2>
<p>I already knew that []byte is more performant and that Go optimizes on them more, but not to this extent. As in my previous blog posts I discovered that using them can really make a huge difference. Go even has a library called <code>bytes</code> which has helper functions similar to that of <code>strings</code> to help you out in these situations. Go optimizes on map recalls as well when you cast to string from []byte and use that as a map key like this: myMap[string(data)].</p>
<h2 id="brute-force-or-looping">Brute Force or Looping</h2>
<p>Most of the times you could get away with looping or trying to brute force out a solution. But there were times, where you really had to huddle down and think the problem through. Because simply looping, either took too long, or didn&rsquo;t come up with a good answer. That&rsquo;s why I rather always start with: &lsquo;How could I solve this without looping?&rsquo;. This will get you into the right mindset. Or thinking: &lsquo;How could I solve this without taking each and every combination into account?&rsquo;. These questions will help you to think about the problem without loops. Or only if you REALLY must use one.</p>
<p>Doing this will get you into the right way of thinking. I know that in advent of code there is a Leaderboard and you could get on it if you were fast. But most of the times having a fast solution is far from having the right solution.</p>
<h2 id="structs-are-awesome">Structs are Awesome</h2>
<p>I like using structs. They are a very lightweight way of defining objects, structures which stick together. For example in the <a href="http://adventofcode.com/day/6">Day 6</a> Light puzzle, or even <a href="http://adventofcode.com/day/3">Day 3</a> Traveling santa example, a struct which stuck x,y locations together and made it a map key, it was trivial to make my gif out of it with SVG -&gt;</p>
<p><img src="https://raw.githubusercontent.com/Skarlso/goprojects/master/advent/day3/day1.gif" alt="Traveling Santa"></p>
<h2 id="go-is-simple-to-read">Go is Simple to Read</h2>
<p>[opinion] I like Go because of its simplicity. You don&rsquo;t see stuff in Go most of the times, where you need to look three times to understand what the heck is going on. I like filter, reduce, map and syntactic sugar, but they make for a very poor reading experience. Go, in that way, choose not to incorporate these paradigms and I find that refreshing. [/opinion]</p>
<h2 id="testing">Testing</h2>
<p>TDD is something we all should know by now and care about. When I&rsquo;m doing puzzles, or finger exercises, I tend to not write tests. But on a more complex puzzle, or a task, I always start with a test. Especially if you are given samples for a puzzle which work. That&rsquo;s a gold mine. You can tweak your algorithm using those samples until they work and then simply apply a larger sample size.</p>
<p>Tests will also help you with breaking down a problem and identifying parts which you already know.</p>
<p>For example <a href="http://adventofcode.com/day/13">Day 13</a>. Optimal Seating arrangements. Or the similar <a href="http://adventofcode.com/day/9">Day 9</a>. Which was calculating shortest route distance. Or the password one, Day 11 which I showed before. In these cases, tests helped me make the core of the algorithm solid. Calculating connections, or the odd regex here and there, which was making sure that the password was validated properly.</p>
<p>Tests will also help you to be able to move on after you found your solution. When I was done with the first iteration of passwords which was still using strings, I went on to optimize it, to use []byte. The tests helped me to know that the code was still working as expected after the refactoring.</p>
<h1 id="closing-words">Closing words</h1>
<p>All in all it was a massive amount of fun doing these exercises and I&rsquo;m thankful to the creator for making it. And I did enjoy the story behind the exercises as well. I think this site stood out because it had a fun factor. For simple exercises there are a lot of other sites -like Project Euler, or Sphere Judge Online-, which just plainly present you a problem and that&rsquo;s it. It&rsquo;s still fun, but it can also became boring very fast. Don&rsquo;t forget the fun factor which makes you plow on and go into a blind frenzy that you cannot quit until it&rsquo;s done. That&rsquo;s the fun part.</p>
<p>Thank you for reading!
Have a nice day.
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Improving performance with byte slice and int map</title>
      <link>https://skarlso.github.io/2016/01/05/improving-performance-with-byte-slice-and-int-map/</link>
      <pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/01/05/improving-performance-with-byte-slice-and-int-map/</guid>
      <description><![CDATA[<p>Hello Folks.</p>
<p>Today I would like to share with you my little tale of refactoring my solution to <a href="http://adventofcode.com/day/13">Advent Of Code Day 13</a>.</p>
<p>It&rsquo;s a lovely tale of action, adventure, drama, and comedy.</p>
<p>Let&rsquo;s being with my first iteration of the problem.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span><span class="lnt">95
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;bufio&#34;</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;math&#34;</span>
	<span class="s">&#34;os&#34;</span>
	<span class="s">&#34;strconv&#34;</span>
	<span class="s">&#34;strings&#34;</span>

	<span class="s">&#34;github.com/skarlso/goutils/arrayutils&#34;</span>
<span class="p">)</span>

<span class="kd">var</span> <span class="nx">seatingCombinations</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">string</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">table</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">keys</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

<span class="c1">//Person a person
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="c1">// neighbour *Person
</span><span class="c1"></span>	<span class="nx">name</span> <span class="kt">string</span>
	<span class="nx">like</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">file</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;input.txt&#34;</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
	<span class="nx">scanner</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewScanner</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
	<span class="k">for</span> <span class="nx">scanner</span><span class="p">.</span><span class="nf">Scan</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">line</span> <span class="o">:=</span> <span class="nx">scanner</span><span class="p">.</span><span class="nf">Text</span><span class="p">()</span>
		<span class="nx">split</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="nx">line</span><span class="p">,</span> <span class="s">&#34; &#34;</span><span class="p">)</span>
		<span class="nx">like</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Atoi</span><span class="p">(</span><span class="nx">split</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="c1">//If lose -&gt; * -1
</span><span class="c1"></span>		<span class="k">if</span> <span class="nx">split</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#34;lose&#34;</span> <span class="p">{</span>
			<span class="nx">like</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span>
		<span class="p">}</span>
		<span class="nx">table</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">table</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="nx">strings</span><span class="p">.</span><span class="nf">Trim</span><span class="p">(</span><span class="nx">split</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span> <span class="s">&#34;.&#34;</span><span class="p">):</span> <span class="nx">like</span><span class="p">})</span>
		<span class="k">if</span> <span class="p">!</span><span class="nx">arrayutils</span><span class="p">.</span><span class="nf">ContainsString</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
			<span class="nx">keys</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="nf">generatePermutation</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">keys</span><span class="p">))</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Best seating efficiency:&#34;</span><span class="p">,</span> <span class="nf">calculateSeatingEfficiancy</span><span class="p">())</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">generatePermutation</span><span class="p">(</span><span class="nx">s</span> <span class="p">[]</span><span class="kt">string</span><span class="p">,</span> <span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">n</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">{</span>
		<span class="nx">news</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span>
		<span class="nb">copy</span><span class="p">(</span><span class="nx">news</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
		<span class="nx">seatingCombinations</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">seatingCombinations</span><span class="p">,</span> <span class="nx">news</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="nx">s</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
		<span class="nf">generatePermutation</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
		<span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="nx">s</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">calculateSeatingEfficiancy</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="nx">bestSeating</span> <span class="o">:=</span> <span class="nx">math</span><span class="p">.</span><span class="nx">MinInt64</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">seatingCombinations</span> <span class="p">{</span>
		<span class="nx">calculatedOrder</span> <span class="o">:=</span> <span class="mi">0</span>

		<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">v</span> <span class="p">{</span>
			<span class="nx">left</span> <span class="o">:=</span> <span class="p">(</span><span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
			<span class="c1">//This is to work around the fact that in Go
</span><span class="c1"></span>			<span class="c1">//modulo of a negative number will not return a positive number.
</span><span class="c1"></span>			<span class="c1">//So -1 % 4 will not return 3 but -1. In that case we add length.
</span><span class="c1"></span>			<span class="k">if</span> <span class="nx">left</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
				<span class="nx">left</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
			<span class="p">}</span>
			<span class="nx">right</span> <span class="o">:=</span> <span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
			<span class="c1">// fmt.Printf(&#34;Left: %d; Right: %d\n&#34;, left, right)
</span><span class="c1"></span>			<span class="nx">leftLike</span> <span class="o">:=</span> <span class="nf">getLikeForTargetConnect</span><span class="p">(</span><span class="nx">v</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">v</span><span class="p">[</span><span class="nx">left</span><span class="p">])</span>
			<span class="nx">rightLike</span> <span class="o">:=</span> <span class="nf">getLikeForTargetConnect</span><span class="p">(</span><span class="nx">v</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">v</span><span class="p">[</span><span class="nx">right</span><span class="p">])</span>
			<span class="c1">// fmt.Printf(&#34;Name: %s; Left:%d; Right:%d\n&#34;, v[i], leftLike, rightLike)
</span><span class="c1"></span>			<span class="nx">calculatedOrder</span> <span class="o">+=</span> <span class="nx">leftLike</span> <span class="o">+</span> <span class="nx">rightLike</span>
		<span class="p">}</span>
		<span class="c1">// fmt.Printf(&#34;Order for: %v; Calc:%d\n&#34;, v, calculatedOrder)
</span><span class="c1"></span>		<span class="k">if</span> <span class="nx">calculatedOrder</span> <span class="p">&gt;</span> <span class="nx">bestSeating</span> <span class="p">{</span>
			<span class="nx">bestSeating</span> <span class="p">=</span> <span class="nx">calculatedOrder</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="nx">bestSeating</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">getLikeForTargetConnect</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">neighbour</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="nx">neighbours</span> <span class="o">:=</span> <span class="nx">table</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">t</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">neighbours</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">t</span><span class="p">[</span><span class="nx">neighbour</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">v</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="mi">0</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This is quiet large. And takes a bit of explaining. So what is happening here? We are putting the names which correspond with numbers and neighbours into a map which has a map as a value. The map contains seating information for a person. For example, next to Alice, a bunch of people can sit, and they have a certain relationship to Alice, represented by a number.</p>
<p>We could, at this point, represent it with a graph, but that would be overkill.</p>
<p>Permutation is simple because I choose to represent a Table with a Circular Slice. This means that a slice like this =&gt; Alice, Bob, Tom; means that Alice is sitting next to Bob and Tom. So Alice&rsquo;s neighbour of -1 (left) is in fact i-1 % 3. And Bob is i + 1. For Tom, Alice is i + 1 % 3. After we got this, we just permutate the possible combinations into slices of slices and iterate over them.</p>
<p>The benchmark for this is terrible.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">
<span class="o">================</span>With <span class="nv">Strings</span><span class="o">================</span>
20	 <span class="m">589571259</span> ns/op
ok  	github.com/skarlso/goprojects/advent/day13/part1	11.873s
</code></pre></td></tr></table>
</div>
</div><p>So, my first thought was, convert everything I can to []byte. But because slices cannot be map keys, because map keys need to be comparable, we are still stuck with the same ns/ops.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">//var seatingCombinations = make([][]string, 0)
</span><span class="c1">//var keys = make([]string, 0)
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">seatingCombinations</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([][][]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">keys</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>And I adjusted the code to work with []byte instead. What can we do to fix the map though? One obvious gain is, not to use string as a key. Because strings are immutable, working with them always means copy-ing and that&rsquo;s why they get to be very slow. So removing them from Keys and using Numbers instead will mean a huge gain for us.</p>
<p>To do this, I created a map which maps names with numbers. I could hardcode them with iota, but that is a very bad thing to do. It would mean, that when I add a new name, I would have to go, and re-compile my code, because data changed. That&rsquo;s not what we want.</p>
<p>So, I added this little tid-bit into the for cycle when I&rsquo;m reading in the file lines =&gt;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="o">...</span>
<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">nameMapping</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
    <span class="nx">nameMapping</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="p">=</span> <span class="nx">id</span>
    <span class="nx">id</span><span class="o">++</span>
<span class="p">}</span>
<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">nameMapping</span><span class="p">[</span><span class="nx">trimmedNeighbour</span><span class="p">];</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
    <span class="nx">nameMapping</span><span class="p">[</span><span class="nx">trimmedNeighbour</span><span class="p">]</span> <span class="p">=</span> <span class="nx">id</span>
    <span class="nx">id</span><span class="o">++</span>
<span class="p">}</span>
<span class="o">...</span>
</code></pre></td></tr></table>
</div>
</div><p>Id starts as Zero. And nameMapping is a simple map[string]int. After this, we fix all the map calls, from <code>table[split[0]]</code> to <code>table[nameMapping[split[0]]]</code>. Table&rsquo;s map will now work with int, but we can still work with strings otherwise.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">table</span><span class="p">[</span><span class="nx">nameMapping</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]]]</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">table</span><span class="p">[</span><span class="nx">nameMapping</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]]],</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="nx">nameMapping</span><span class="p">[</span><span class="nx">trimmedNeighbour</span><span class="p">]:</span> <span class="nx">like</span><span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>This has now a marginally better performance as before:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">BenchmarkCalculateSeating	      50	  <span class="m">32637879</span> ns/op
ok  	github.com/skarlso/goprojects/advent/day13/part1	1.698s
</code></pre></td></tr></table>
</div>
</div><p>But, we can still do a HUGE one better. Can you notice the other bottleneck? See, how keys are still []byte? That&rsquo;s, now completely unnecessary. We can use int, since our keys are ints! <em>Permutation</em> changes, and the retrieve.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="o">...</span>
<span class="kd">func</span> <span class="nf">generatePermutation</span><span class="p">(</span><span class="nx">s</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
<span class="o">...</span>

<span class="o">...</span>
<span class="kd">func</span> <span class="nf">getLikeForTargetConnect</span><span class="p">(</span><span class="nx">name</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">neighbour</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="nx">neighbours</span> <span class="o">:=</span> <span class="nx">table</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">t</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">neighbours</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">t</span><span class="p">[</span><span class="nx">neighbour</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">v</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="mi">0</span>
<span class="p">}</span>
<span class="o">...</span>
</code></pre></td></tr></table>
</div>
</div><p>Permutation was the Other huge performance consumption. Now, our run time is&hellip;. drum rolls&hellip;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">BenchmarkCalculateSeating	   10000	    <span class="m">166431</span> ns/op
ok  	github.com/skarlso/goprojects/advent/day13/part1	1.695s
</code></pre></td></tr></table>
</div>
</div><p>Down to 166431 ns/op!!! From 32637879 ns/op!! And notice how suddenly, go&rsquo;s benchmark jumped up in sample count. Our code is now blazing fast. It&rsquo;s 0.05% of the previous run! It&rsquo;s almost <strong>200 times faster</strong>!</p>
<p>We could still improve it here and there. I&rsquo;m sure I&rsquo;m doing some extra stuff which is not needed or could be made easier somehow. But I&rsquo;m actually quiet happy with this solution right now.</p>
<p>The full code:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;bufio&#34;</span>
	<span class="s">&#34;math&#34;</span>
	<span class="s">&#34;os&#34;</span>
	<span class="s">&#34;strconv&#34;</span>
	<span class="s">&#34;strings&#34;</span>

	<span class="s">&#34;github.com/skarlso/goutils/arrayutils&#34;</span>
<span class="p">)</span>

<span class="kd">var</span> <span class="nx">seatingCombinations</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">table</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">][]</span><span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">keys</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">nameMapping</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>

<span class="c1">//Person a person
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="c1">// neighbour *Person
</span><span class="c1"></span>	<span class="nx">name</span> <span class="kt">string</span>
	<span class="nx">like</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nf">CalculatePerfectSeating</span><span class="p">()</span>
<span class="p">}</span>

<span class="c1">//CalculatePerfectSeating returns the perfect seating order based on Love/Hate relations
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">CalculatePerfectSeating</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">file</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;input.txt&#34;</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
	<span class="nx">scanner</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewScanner</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
	<span class="nx">id</span> <span class="o">:=</span> <span class="mi">0</span>
	<span class="k">for</span> <span class="nx">scanner</span><span class="p">.</span><span class="nf">Scan</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">line</span> <span class="o">:=</span> <span class="nx">scanner</span><span class="p">.</span><span class="nf">Text</span><span class="p">()</span>
		<span class="nx">split</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="nx">line</span><span class="p">,</span> <span class="s">&#34; &#34;</span><span class="p">)</span>
		<span class="nx">trimmedNeighbour</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Trim</span><span class="p">(</span><span class="nx">split</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span> <span class="s">&#34;.&#34;</span><span class="p">)</span>
		<span class="nx">like</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Atoi</span><span class="p">(</span><span class="nx">split</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="c1">//If lose -&gt; * -1
</span><span class="c1"></span>		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">nameMapping</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
			<span class="nx">nameMapping</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="p">=</span> <span class="nx">id</span>
			<span class="nx">id</span><span class="o">++</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">nameMapping</span><span class="p">[</span><span class="nx">trimmedNeighbour</span><span class="p">];</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
			<span class="nx">nameMapping</span><span class="p">[</span><span class="nx">trimmedNeighbour</span><span class="p">]</span> <span class="p">=</span> <span class="nx">id</span>
			<span class="nx">id</span><span class="o">++</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="nx">split</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#34;lose&#34;</span> <span class="p">{</span>
			<span class="nx">like</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span>
		<span class="p">}</span>
		<span class="nx">table</span><span class="p">[</span><span class="nx">nameMapping</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]]]</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">table</span><span class="p">[</span><span class="nx">nameMapping</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]]],</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="nx">nameMapping</span><span class="p">[</span><span class="nx">trimmedNeighbour</span><span class="p">]:</span> <span class="nx">like</span><span class="p">})</span>
		<span class="k">if</span> <span class="p">!</span><span class="nx">arrayutils</span><span class="p">.</span><span class="nf">ContainsInt</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nx">nameMapping</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]])</span> <span class="p">{</span>
			<span class="nx">keys</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nx">nameMapping</span><span class="p">[</span><span class="nx">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]])</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="nf">generatePermutation</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">keys</span><span class="p">))</span>
	<span class="c1">// fmt.Println(&#34;Best seating efficiency:&#34;, calculateSeatingEfficiancy())
</span><span class="c1"></span><span class="p">}</span>

<span class="kd">func</span> <span class="nf">generatePermutation</span><span class="p">(</span><span class="nx">s</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">n</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">{</span>
		<span class="nx">news</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span>
		<span class="nb">copy</span><span class="p">(</span><span class="nx">news</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
		<span class="nx">seatingCombinations</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">seatingCombinations</span><span class="p">,</span> <span class="nx">news</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="nx">s</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
		<span class="nf">generatePermutation</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
		<span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="nx">s</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">calculateSeatingEfficiancy</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="nx">bestSeating</span> <span class="o">:=</span> <span class="nx">math</span><span class="p">.</span><span class="nx">MinInt64</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">seatingCombinations</span> <span class="p">{</span>
		<span class="nx">calculatedOrder</span> <span class="o">:=</span> <span class="mi">0</span>

		<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">v</span> <span class="p">{</span>
			<span class="nx">left</span> <span class="o">:=</span> <span class="p">(</span><span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
			<span class="c1">//This is to work around the fact that in Go
</span><span class="c1"></span>			<span class="c1">//modulo of a negative number will not return a positive number.
</span><span class="c1"></span>			<span class="c1">//So -1 % 4 will not return 3 but -1. In that case we add length.
</span><span class="c1"></span>			<span class="k">if</span> <span class="nx">left</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
				<span class="nx">left</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
			<span class="p">}</span>
			<span class="nx">right</span> <span class="o">:=</span> <span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
			<span class="nx">calculatedOrder</span> <span class="o">+=</span> <span class="nf">getLikeForTargetConnect</span><span class="p">(</span><span class="nx">v</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">v</span><span class="p">[</span><span class="nx">left</span><span class="p">])</span> <span class="o">+</span> <span class="nf">getLikeForTargetConnect</span><span class="p">(</span><span class="nx">v</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">v</span><span class="p">[</span><span class="nx">right</span><span class="p">])</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="nx">calculatedOrder</span> <span class="p">&gt;</span> <span class="nx">bestSeating</span> <span class="p">{</span>
			<span class="nx">bestSeating</span> <span class="p">=</span> <span class="nx">calculatedOrder</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="nx">bestSeating</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">getLikeForTargetConnect</span><span class="p">(</span><span class="nx">name</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">neighbour</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="nx">neighbours</span> <span class="o">:=</span> <span class="nx">table</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">t</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">neighbours</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">t</span><span class="p">[</span><span class="nx">neighbour</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">v</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="mi">0</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Also, on github =&gt; <a href="https://github.com/Skarlso/goprojects/tree/master/advent/day13">Advent Of Code Day 13</a>.</p>
<p>Thank you very much for reading, this has been a massive fun to write and to refactor.</p>
<p>Have something to say? Please don&rsquo;t hesitate.</p>
<p>And as always,</p>
<p>Have a nice day!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Byte arrays and Channels</title>
      <link>https://skarlso.github.io/2016/01/01/byte-arrays-and-channels/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/01/01/byte-arrays-and-channels/</guid>
      <description><![CDATA[<p>Hi folks and a Happy new Year!</p>
<p>Today, I would like to show you some interesting things you can do with channels. Consider the following simple example.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">generatedPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
	<span class="nx">correctPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">correctPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">passwordIncrement</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">,</span> <span class="nx">correctPassword</span><span class="p">)</span>
	<span class="nx">pass</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">correctPassword</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">pass</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">input</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">output</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">input</span>
		<span class="c1">//Introduce lengthy operation here
</span><span class="c1"></span>		<span class="c1">// time.Sleep(time.Second)
</span><span class="c1"></span>		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Checking p:&#34;</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">p</span> <span class="p">&gt;</span> <span class="mi">100000</span> <span class="p">{</span>
			<span class="nx">output</span> <span class="o">&lt;-</span> <span class="nx">p</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">passwordIncrement</span><span class="p">(</span><span class="nx">out</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span> <span class="o">:=</span> <span class="mi">0</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span><span class="o">++</span>
		<span class="nx">out</span> <span class="o">&lt;-</span> <span class="nx">p</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The premise is as follows. It launches two go routines. One, which generates passwords, and an other which checks for validity. The two routines talk to each other through the channel <code>generatedPassword</code>. That&rsquo;s the providing connections between them. The channel <code>correctPassword</code> provides output for the <code>checkPassword</code> routine.</p>
<p>If there is data received from <code>correctPassword</code> channel, we found our first password and there is no need to look further so we, print the password and quit. The channels will close with defer. This works. But the password is usually either a []byte or a string. With string, it still works.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">generatedPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
	<span class="nx">correctPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">correctPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">passwordIncrement</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">,</span> <span class="nx">correctPassword</span><span class="p">)</span>
	<span class="nx">pass</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">correctPassword</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">pass</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">input</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">output</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">input</span>
		<span class="c1">//Introduce lengthy operation here
</span><span class="c1"></span>		<span class="c1">// time.Sleep(time.Second)
</span><span class="c1"></span>		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Checking p:&#34;</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span>
		<span class="k">if</span> <span class="nf">performSomeCheckingOperation</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">output</span> <span class="o">&lt;-</span> <span class="nx">p</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">generateNewPassword</span><span class="p">(</span><span class="nx">out</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">p</span> <span class="kt">string</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span> <span class="p">=</span> <span class="nf">generate</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
		<span class="nx">out</span> <span class="o">&lt;-</span> <span class="nx">p</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The generating happens based on the previously generated password. For example, we increment, or permeate. aaaa, aaab, aaac&hellip;</p>
<p>So <code>generatedPassword</code> is a buffered channel, it gathers a 100 passwords from which checking retrieves passwords one by one and works on them in a slower process.</p>
<p>Now, this is fine, but using []byte arrays will always be more powerful and faster. So we would like to use []byte. Like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">generatedPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
	<span class="nx">correctPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">correctPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">passwordIncrement</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">,</span> <span class="nx">correctPassword</span><span class="p">)</span>
	<span class="nx">pass</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">correctPassword</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">pass</span><span class="p">))</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">input</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">output</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">input</span>
		<span class="c1">//Introduce lengthy operation here
</span><span class="c1"></span>		<span class="c1">// time.Sleep(time.Second)
</span><span class="c1"></span>		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Checking p:&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">p</span><span class="p">))</span>
		<span class="k">if</span> <span class="nf">performSomeCheckingOperation</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">output</span> <span class="o">&lt;-</span> <span class="nx">p</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">generateNewPassword</span><span class="p">(</span><span class="nx">out</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">p</span> <span class="p">[]</span><span class="kt">byte</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span> <span class="p">=</span> <span class="nf">generate</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
		<span class="nx">out</span> <span class="o">&lt;-</span> <span class="nx">p</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This will not work. Why? Because []byte is a slice and thus will be constantly overwritten. The checking go routine will always only check the last data and many generated passwords will be lost. This is also noted in go&rsquo;s scanner here =&gt; <a href="https://golang.org/pkg/bufio/#Scanner.Bytes">Scanner.Bytes</a></p>
<p>We have a couple of options here.</p>
<p>We could use <code>string</code> channels and convert to []byte after. This is still okay, because the conversion isn&rsquo;t very CPU intensive.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="o">...</span>
<span class="nx">generatedPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="nx">correctPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>
<span class="o">...</span>
<span class="nx">p</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="o">&lt;-</span><span class="nx">input</span><span class="p">)</span> <span class="c1">//This will work very nicely.
</span><span class="c1"></span><span class="o">...</span>
</code></pre></td></tr></table>
</div>
</div><p>Options two would be If you have a fixed password to handle, fix data, for example MD5 hash, you can use a byte array. Like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">const</span> <span class="nx">PASSWD</span><span class="p">=</span><span class="mi">13</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">generatedPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="p">[</span><span class="nx">PASSWD</span><span class="p">]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
	<span class="nx">correctPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="p">[</span><span class="nx">PASSWD</span><span class="p">]</span><span class="kt">byte</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">correctPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">passwordIncrement</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">,</span> <span class="nx">correctPassword</span><span class="p">)</span>
	<span class="nx">pass</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">correctPassword</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">pass</span><span class="p">))</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">input</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="p">[</span><span class="nx">PASSWD</span><span class="p">]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">output</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="p">[</span><span class="nx">PASSWD</span><span class="p">]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">input</span>
		<span class="c1">//Introduce lengthy operation here
</span><span class="c1"></span>		<span class="c1">// time.Sleep(time.Second)
</span><span class="c1"></span>		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Checking p:&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">p</span><span class="p">))</span>
		<span class="k">if</span> <span class="nf">performSomeCheckingOperation</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">output</span> <span class="o">&lt;-</span> <span class="nx">p</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">generateNewPassword</span><span class="p">(</span><span class="nx">out</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="p">[</span><span class="nx">PASSWD</span><span class="p">]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">p</span> <span class="p">[</span><span class="nx">PASSWD</span><span class="p">]</span><span class="kt">byte</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span> <span class="p">=</span> <span class="nf">generate</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
		<span class="nx">out</span> <span class="o">&lt;-</span> <span class="nx">p</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This is also one solution. If you have to convert between the two, could go with <code>p := byte[:]</code>.</p>
<p>Conclusion is, that use conversion rather than string types and be aware that using slices in channels is dangerous.</p>
<p>Thanks for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Use Byte Array Instead of Strings</title>
      <link>https://skarlso.github.io/2015/12/29/use-byte-array-instead-of-strings/</link>
      <pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/29/use-byte-array-instead-of-strings/</guid>
      <description><![CDATA[<p>Hello Folks.</p>
<p>This is just a quick post on the topic and a reminder for myself and everybody to ALWAYS USE []BYTE INSTEAD OF STRINGS.</p>
<p>[]Byte is marginally faster than a simple Strings. In fact, I would say using []byte should be the standard instead of strings.</p>
<p>Sample code:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">solutions</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">const</span> <span class="p">(</span>
    <span class="c1">//INPUT input
</span><span class="c1"></span>    <span class="nx">INPUT</span> <span class="p">=</span> <span class="s">&#34;1321131112&#34;</span>
    <span class="c1">//LIMIT limit
</span><span class="c1"></span>    <span class="nx">LIMIT</span> <span class="p">=</span> <span class="mi">50</span>
<span class="p">)</span>

<span class="c1">//LookAndSay translates numbers according to Look and Say algo
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">LookAndSay</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">c</span> <span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">charCount</span> <span class="o">:=</span> <span class="mi">1</span>
    <span class="nx">look</span> <span class="o">:=</span> <span class="s">&#34;&#34;</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nx">i</span><span class="o">+</span><span class="mi">1</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="p">{</span>
                <span class="nx">charCount</span><span class="o">++</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">look</span> <span class="o">+=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%d%s&#34;</span><span class="p">,</span> <span class="nx">charCount</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span>
                <span class="nx">charCount</span> <span class="p">=</span> <span class="mi">1</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">look</span> <span class="o">+=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%d%s&#34;</span><span class="p">,</span> <span class="nx">charCount</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">c</span> <span class="o">&lt;-</span> <span class="nx">look</span>
<span class="p">}</span>

<span class="c1">//GetLengthOfLookAndSay Retrieve the Length of a lookandsay done Limit times
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">GetLengthOfLookAndSay</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="k">go</span> <span class="nf">LookAndSay</span><span class="p">(</span><span class="nx">INPUT</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
    <span class="nx">finalString</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">c</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">LIMIT</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="k">go</span> <span class="nf">LookAndSay</span><span class="p">(</span><span class="nx">finalString</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
        <span class="nx">finalString</span> <span class="p">=</span> <span class="o">&lt;-</span><span class="nx">c</span>
        <span class="c1">// fmt.Println(finalString)
</span><span class="c1"></span>    <span class="p">}</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Lenght of final String:&#34;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">finalString</span><span class="p">))</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><p>This, with the limit raised to 50 run for ~1 hour. Even with the routines although they were just for show since they had to wait for each others input.</p>
<p>Now change this to []byte and the run time was almost under 2 seconds on my machine.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">solutions</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;fmt&#34;</span>
    <span class="s">&#34;strconv&#34;</span>
<span class="p">)</span>

<span class="kd">const</span> <span class="p">(</span>
    <span class="c1">//LIMIT limit
</span><span class="c1"></span>    <span class="nx">LIMIT</span> <span class="p">=</span> <span class="mi">50</span>
<span class="p">)</span>

<span class="c1">//INPUT puzzle input
</span><span class="c1">//This used to be a string until I was reminded that BYTE ARRAY IS ALWAYS FASTER!
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">INPUT</span> <span class="p">=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;1321131112&#34;</span><span class="p">)</span>

<span class="c1">//LookAndSay translates numbers according to Look and Say algo
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">LookAndSay</span><span class="p">(</span><span class="nx">s</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="nx">look</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">charCount</span> <span class="o">:=</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nx">i</span><span class="o">+</span><span class="mi">1</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="p">{</span>
                <span class="nx">charCount</span><span class="o">++</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">b</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatInt</span><span class="p">(</span><span class="nb">int64</span><span class="p">(</span><span class="nx">charCount</span><span class="p">),</span> <span class="mi">10</span><span class="p">))</span>
                <span class="nx">look</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">look</span><span class="p">,</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
                <span class="nx">charCount</span> <span class="p">=</span> <span class="mi">1</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">b</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatInt</span><span class="p">(</span><span class="nb">int64</span><span class="p">(</span><span class="nx">charCount</span><span class="p">),</span> <span class="mi">10</span><span class="p">))</span>
            <span class="nx">look</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">look</span><span class="p">,</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="c1">//GetLengthOfLookAndSay Retrieve the Length of a lookandsay done Limit times
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">GetLengthOfLookAndSay</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">finalString</span> <span class="o">:=</span> <span class="nx">INPUT</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">LIMIT</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nx">finalString</span> <span class="p">=</span> <span class="nf">LookAndSay</span><span class="p">(</span><span class="nx">finalString</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Lenght of final String:&#34;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">finalString</span><span class="p">))</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><p>This is the solution for Day 10 on <a href="http://adventofcode.com/">AdventOfCode</a> by the way.</p>
<p>Thanks for readin'.
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Use Byte Slice Instead of Strings</title>
      <link>https://skarlso.github.io/2015/12/29/use-byte-slice-instead-of-strings/</link>
      <pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/29/use-byte-slice-instead-of-strings/</guid>
      <description><![CDATA[<p>Hello Folks.</p>
<p>This is just a quick post on the topic and a reminder for myself and everybody to ALWAYS USE []BYTE INSTEAD OF STRINGS.</p>
<p>[]Byte is marginally faster than a simple Strings. In fact, I would say using []byte should be the standard instead of strings.</p>
<p>Sample code:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">solutions</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">const</span> <span class="p">(</span>
    <span class="c1">//INPUT input
</span><span class="c1"></span>    <span class="nx">INPUT</span> <span class="p">=</span> <span class="s">&#34;1321131112&#34;</span>
    <span class="c1">//LIMIT limit
</span><span class="c1"></span>    <span class="nx">LIMIT</span> <span class="p">=</span> <span class="mi">50</span>
<span class="p">)</span>

<span class="c1">//LookAndSay translates numbers according to Look and Say algo
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">LookAndSay</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">c</span> <span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">charCount</span> <span class="o">:=</span> <span class="mi">1</span>
    <span class="nx">look</span> <span class="o">:=</span> <span class="s">&#34;&#34;</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nx">i</span><span class="o">+</span><span class="mi">1</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="p">{</span>
                <span class="nx">charCount</span><span class="o">++</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">look</span> <span class="o">+=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%d%s&#34;</span><span class="p">,</span> <span class="nx">charCount</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span>
                <span class="nx">charCount</span> <span class="p">=</span> <span class="mi">1</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">look</span> <span class="o">+=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%d%s&#34;</span><span class="p">,</span> <span class="nx">charCount</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">c</span> <span class="o">&lt;-</span> <span class="nx">look</span>
<span class="p">}</span>

<span class="c1">//GetLengthOfLookAndSay Retrieve the Length of a lookandsay done Limit times
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">GetLengthOfLookAndSay</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="k">go</span> <span class="nf">LookAndSay</span><span class="p">(</span><span class="nx">INPUT</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
    <span class="nx">finalString</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">c</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">LIMIT</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="k">go</span> <span class="nf">LookAndSay</span><span class="p">(</span><span class="nx">finalString</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
        <span class="nx">finalString</span> <span class="p">=</span> <span class="o">&lt;-</span><span class="nx">c</span>
        <span class="c1">// fmt.Println(finalString)
</span><span class="c1"></span>    <span class="p">}</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Lenght of final String:&#34;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">finalString</span><span class="p">))</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><p>This, with the limit raised to 50 run for ~1 hour. Even with the routines although they were just for show since they had to wait for each others input.</p>
<p>Now change this to []byte and the run time was almost under 2 seconds on my machine.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">solutions</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;fmt&#34;</span>
    <span class="s">&#34;strconv&#34;</span>
<span class="p">)</span>

<span class="kd">const</span> <span class="p">(</span>
    <span class="c1">//LIMIT limit
</span><span class="c1"></span>    <span class="nx">LIMIT</span> <span class="p">=</span> <span class="mi">50</span>
<span class="p">)</span>

<span class="c1">//INPUT puzzle input
</span><span class="c1">//This used to be a string until I was reminded that BYTE ARRAY IS ALWAYS FASTER!
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">INPUT</span> <span class="p">=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;1321131112&#34;</span><span class="p">)</span>

<span class="c1">//LookAndSay translates numbers according to Look and Say algo
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">LookAndSay</span><span class="p">(</span><span class="nx">s</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="nx">look</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">charCount</span> <span class="o">:=</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nx">i</span><span class="o">+</span><span class="mi">1</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="p">{</span>
                <span class="nx">charCount</span><span class="o">++</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">b</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatInt</span><span class="p">(</span><span class="nb">int64</span><span class="p">(</span><span class="nx">charCount</span><span class="p">),</span> <span class="mi">10</span><span class="p">))</span>
                <span class="nx">look</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">look</span><span class="p">,</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
                <span class="nx">charCount</span> <span class="p">=</span> <span class="mi">1</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">b</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatInt</span><span class="p">(</span><span class="nb">int64</span><span class="p">(</span><span class="nx">charCount</span><span class="p">),</span> <span class="mi">10</span><span class="p">))</span>
            <span class="nx">look</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">look</span><span class="p">,</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="c1">//GetLengthOfLookAndSay Retrieve the Length of a lookandsay done Limit times
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">GetLengthOfLookAndSay</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">finalString</span> <span class="o">:=</span> <span class="nx">INPUT</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">LIMIT</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nx">finalString</span> <span class="p">=</span> <span class="nf">LookAndSay</span><span class="p">(</span><span class="nx">finalString</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Lenght of final String:&#34;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">finalString</span><span class="p">))</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><p>This is the solution for Day 10 on <a href="http://adventofcode.com/">AdventOfCode</a> by the way.</p>
<p>Thanks for readin'.
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Recursive Letter Frequency Count</title>
      <link>https://skarlso.github.io/2015/12/23/recursive-freq-count/</link>
      <pubDate>Wed, 23 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/23/recursive-freq-count/</guid>
      <description><![CDATA[<p>Hello everybody!</p>
<p>I wanted to do a sort post about word frequency count. I did it many times now and I was curious as how a recursive solution would perform as opposed to looping.</p>
<p>So I wrote it up quickly and added a few benchmarks with different sized data.</p>
<p>First&hellip;. The code:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">var</span> <span class="nx">freqMap</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

<span class="kd">func</span> <span class="nf">countLettersRecursive</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">s</span>
    <span class="p">}</span>
    <span class="nx">freqMap</span><span class="p">[</span><span class="nb">string</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">])]</span><span class="o">++</span>
    <span class="k">return</span> <span class="nf">countLettersRecursive</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">countLettersLoop</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span> <span class="p">{</span>
        <span class="nx">freqMap</span><span class="p">[</span><span class="nb">string</span><span class="p">(</span><span class="nx">v</span><span class="p">)]</span><span class="o">++</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Very simple. The first run with a small sample: &ldquo;asdfasdfasdfasdfasdf&rdquo;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">BenchmarkLoopFrequencyCount  <span class="m">5000000</span>           <span class="m">377</span> ns/op
BenchmarkRecursiveFrequencyCount     <span class="m">5000000</span>           <span class="m">380</span> ns/op
</code></pre></td></tr></table>
</div>
</div><p>They almost equal but Recursive seems to be lagging behind. So I increased the sample size to a text which was 496 long.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">PASS
BenchmarkLoopFrequencyCount    <span class="m">30000</span>         <span class="m">53336</span> ns/op
BenchmarkRecursiveFrequencyCount       <span class="m">20000</span>         <span class="m">61780</span> ns/op
</code></pre></td></tr></table>
</div>
</div><p>And, as expected, recursing is less performant than looping. Also, I think my machine would die from a larger data size&hellip;</p>
<p>But the recursive looks so much cooler though.</p>
<p>Thanks for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Go Development Environment</title>
      <link>https://skarlso.github.io/2015/12/08/go-development-environment/</link>
      <pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/08/go-development-environment/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>Here is a little something I&rsquo;ve put together, since I&rsquo;m doing it a lot.</p>
<p><a href="https://github.com/Skarlso/godevelopment">Go Development Environment</a></p>
<p>If I have a project I&rsquo;d like to contribute, like <a href="https://gohugo.io">GoHugo</a>, I have to setup a development environment, because most of the times, I&rsquo;m on a Mac. And on OSX things work differently. I like to work in a Linux environment since that&rsquo;s what most of the projects are built on.</p>
<p>So here you go. Just download the files, and say <strong>vagrant up</strong> which will do the magic.</p>
<p>This sets up <a href="https://github.com/fatih/vim-go">vim-go</a> with code completion given by YouCompleteMe and some go features like, fmt on save and build error highlighting.</p>
<p>Also sets up ctags which will give you tags and the ability to do GoTo Declaration.</p>
<p>Installs a bunch of utilities, and configures Go. There is an option to install docker as well. But it&rsquo;s ignored at the moment.</p>
<p>Just uncomment this line:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="c1">#config.vm.provision &#34;shell&#34;, path: &#34;install_docker.sh&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>Any questions or request, feel free to submit an Issue!</p>
<p>Thanks for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Go JIRA API client</title>
      <link>https://skarlso.github.io/2015/11/20/go-jira-api-client/</link>
      <pubDate>Fri, 20 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/11/20/go-jira-api-client/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>So, I was playing around and created a client for JIRA written in Go. It was nice to do some JSON transformation. And sending POSTS was really trivial.</p>
<p>It&rsquo;s still in it&rsquo;s infancy and I have a couple of more features I want to implement, but, here is the code.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">
<span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;bytes&#34;</span>
	<span class="s">&#34;encoding/json&#34;</span>
	<span class="s">&#34;flag&#34;</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;io/ioutil&#34;</span>
	<span class="s">&#34;log&#34;</span>
	<span class="s">&#34;net/http&#34;</span>
	<span class="s">&#34;os&#34;</span>

	<span class="s">&#34;github.com/BurntSushi/toml&#34;</span>
<span class="p">)</span>

<span class="kd">var</span> <span class="nx">configFile</span> <span class="p">=</span> <span class="s">&#34;~/.jira_config.toml&#34;</span>
<span class="kd">var</span> <span class="nx">parameter</span> <span class="kt">string</span>

<span class="kd">var</span> <span class="nx">flags</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Comment</span>     <span class="kt">string</span>
	<span class="nx">Description</span> <span class="kt">string</span>
	<span class="nx">IssueKey</span>    <span class="kt">string</span>
	<span class="nx">Priority</span>    <span class="kt">string</span>
	<span class="nx">Resolution</span>  <span class="kt">string</span>
	<span class="nx">Title</span>       <span class="kt">string</span>
	<span class="nx">Project</span>     <span class="kt">string</span>
<span class="p">}</span>

<span class="c1">//Issue is a representation of a Jira Issue
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Issue</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Fields</span> <span class="kd">struct</span> <span class="p">{</span>
		<span class="nx">Project</span> <span class="kd">struct</span> <span class="p">{</span>
			<span class="nx">Key</span> <span class="kt">string</span> <span class="s">`json:&#34;key&#34;`</span>
		<span class="p">}</span> <span class="s">`json:&#34;project&#34;`</span>
		<span class="nx">Summary</span>     <span class="kt">string</span> <span class="s">`json:&#34;summary&#34;`</span>
		<span class="nx">Description</span> <span class="kt">string</span> <span class="s">`json:&#34;description&#34;`</span>
		<span class="nx">Issuetype</span>   <span class="kd">struct</span> <span class="p">{</span>
			<span class="nx">Name</span> <span class="kt">string</span> <span class="s">`json:&#34;name&#34;`</span>
		<span class="p">}</span> <span class="s">`json:&#34;issuetype&#34;`</span>
		<span class="nx">Priority</span> <span class="kd">struct</span> <span class="p">{</span>
			<span class="nx">ID</span> <span class="kt">string</span> <span class="s">`json:&#34;id&#34;`</span>
		<span class="p">}</span> <span class="s">`json:&#34;priority&#34;`</span>
	<span class="p">}</span> <span class="s">`json:&#34;fields&#34;`</span>
<span class="p">}</span>

<span class="c1">//Transition defines a transition json object. Used for starting, stoppinp
</span><span class="c1">//generally for state stranfer
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Transition</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Fields</span> <span class="kd">struct</span> <span class="p">{</span>
		<span class="nx">Resolution</span> <span class="kd">struct</span> <span class="p">{</span>
			<span class="nx">Name</span> <span class="kt">string</span> <span class="s">`json:&#34;name&#34;`</span>
		<span class="p">}</span> <span class="s">`json:&#34;resolution&#34;`</span>
	<span class="p">}</span> <span class="s">`json:&#34;fields&#34;`</span>
	<span class="nx">Transition</span> <span class="kd">struct</span> <span class="p">{</span>
		<span class="nx">ID</span> <span class="kt">string</span> <span class="s">`json:&#34;id&#34;`</span>
	<span class="p">}</span> <span class="s">`json:&#34;transition&#34;`</span>
<span class="p">}</span>

<span class="c1">//Credentials a representation of a JIRA config which helds API permissions
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Credentials</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Username</span> <span class="kt">string</span>
	<span class="nx">Password</span> <span class="kt">string</span>
	<span class="nx">URL</span>      <span class="kt">string</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">flag</span><span class="p">.</span><span class="nf">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">flags</span><span class="p">.</span><span class="nx">Comment</span><span class="p">,</span> <span class="s">&#34;m&#34;</span><span class="p">,</span> <span class="s">&#34;Default Comment&#34;</span><span class="p">,</span> <span class="s">&#34;A Comment when changing the status of an Issue.&#34;</span><span class="p">)</span>
	<span class="nx">flag</span><span class="p">.</span><span class="nf">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">flags</span><span class="p">.</span><span class="nx">Description</span><span class="p">,</span> <span class="s">&#34;d&#34;</span><span class="p">,</span> <span class="s">&#34;Default Description&#34;</span><span class="p">,</span> <span class="s">&#34;Provide a description for a newly created Issue.&#34;</span><span class="p">)</span>
	<span class="nx">flag</span><span class="p">.</span><span class="nf">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">flags</span><span class="p">.</span><span class="nx">Priority</span><span class="p">,</span> <span class="s">&#34;p&#34;</span><span class="p">,</span> <span class="s">&#34;2&#34;</span><span class="p">,</span> <span class="s">&#34;The priority of an Issue which will be set.&#34;</span><span class="p">)</span>
	<span class="nx">flag</span><span class="p">.</span><span class="nf">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">flags</span><span class="p">.</span><span class="nx">IssueKey</span><span class="p">,</span> <span class="s">&#34;k&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="s">&#34;Issue key of an issue.&#34;</span><span class="p">)</span>
	<span class="nx">flag</span><span class="p">.</span><span class="nf">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">flags</span><span class="p">.</span><span class="nx">Resolution</span><span class="p">,</span> <span class="s">&#34;r&#34;</span><span class="p">,</span> <span class="s">&#34;Done&#34;</span><span class="p">,</span> <span class="s">&#34;Resolution when an issue is closed. Ex.: Done, Fixed, Won&#39;t fix.&#34;</span><span class="p">)</span>
	<span class="nx">flag</span><span class="p">.</span><span class="nf">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">flags</span><span class="p">.</span><span class="nx">Title</span><span class="p">,</span> <span class="s">&#34;t&#34;</span><span class="p">,</span> <span class="s">&#34;Default Title&#34;</span><span class="p">,</span> <span class="s">&#34;Title of an Issue.&#34;</span><span class="p">)</span>
	<span class="nx">flag</span><span class="p">.</span><span class="nf">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">flags</span><span class="p">.</span><span class="nx">Project</span><span class="p">,</span> <span class="s">&#34;o&#34;</span><span class="p">,</span> <span class="s">&#34;IT&#34;</span><span class="p">,</span> <span class="s">&#34;Define a Project to create a ticket in.&#34;</span><span class="p">)</span>
	<span class="nx">flag</span><span class="p">.</span><span class="nf">Parse</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">cred</span> <span class="o">*</span><span class="nx">Credentials</span><span class="p">)</span> <span class="nf">initConfig</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Stat</span><span class="p">(</span><span class="nx">configFile</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Error using config file: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">toml</span><span class="p">.</span><span class="nf">DecodeFile</span><span class="p">(</span><span class="nx">configFile</span><span class="p">,</span> <span class="nx">cred</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;Error during decoding toml config: &#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">flag</span><span class="p">.</span><span class="nf">Args</span><span class="p">())</span> <span class="p">&lt;</span> <span class="mi">1</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;Please provide an action to take. Usage information:&#34;</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">parameter</span> <span class="p">=</span> <span class="nx">flag</span><span class="p">.</span><span class="nf">Arg</span><span class="p">()</span>
	<span class="k">switch</span> <span class="nx">parameter</span> <span class="p">{</span>
	<span class="k">case</span> <span class="s">&#34;close&#34;</span><span class="p">:</span>
		<span class="nf">closeIssue</span><span class="p">(</span><span class="nx">flags</span><span class="p">.</span><span class="nx">IssueKey</span><span class="p">)</span>
	<span class="k">case</span> <span class="s">&#34;start&#34;</span><span class="p">:</span>
		<span class="nf">startIssue</span><span class="p">(</span><span class="nx">flags</span><span class="p">.</span><span class="nx">IssueKey</span><span class="p">)</span>
	<span class="k">case</span> <span class="s">&#34;create&#34;</span><span class="p">:</span>
		<span class="nf">createIssue</span><span class="p">()</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">closeIssue</span><span class="p">(</span><span class="nx">issueKey</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">issueKey</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;Please provide an issueID with -k&#34;</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Closing issue number: &#34;</span><span class="p">,</span> <span class="nx">issueKey</span><span class="p">)</span>

	<span class="kd">var</span> <span class="nx">trans</span> <span class="nx">Transition</span>

	<span class="c1">//TODO: Add the ability to define a comment for the close reason
</span><span class="c1"></span>	<span class="nx">trans</span><span class="p">.</span><span class="nx">Fields</span><span class="p">.</span><span class="nx">Resolution</span><span class="p">.</span><span class="nx">Name</span> <span class="p">=</span> <span class="nx">flags</span><span class="p">.</span><span class="nx">Resolution</span>
	<span class="nx">trans</span><span class="p">.</span><span class="nx">Transition</span><span class="p">.</span><span class="nx">ID</span> <span class="p">=</span> <span class="s">&#34;2&#34;</span>
	<span class="nx">marhsalledTrans</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">trans</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;Error occured when marshaling transition: &#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Marshalled:&#34;</span><span class="p">,</span> <span class="nx">trans</span><span class="p">)</span>
	<span class="nf">sendRequest</span><span class="p">(</span><span class="nx">marhsalledTrans</span><span class="p">,</span> <span class="s">&#34;POST&#34;</span><span class="p">,</span> <span class="nx">issueKey</span><span class="o">+</span><span class="s">&#34;/transitions?expand=transitions.fields&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">startIssue</span><span class="p">(</span><span class="nx">issueID</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">issueID</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;Please provide an issueID with -i&#34;</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Starting issue number:&#34;</span><span class="p">,</span> <span class="nx">issueID</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">createIssue</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Creating new issue.&#34;</span><span class="p">)</span>
	<span class="kd">var</span> <span class="nx">issue</span> <span class="nx">Issue</span>
	<span class="nx">issue</span><span class="p">.</span><span class="nx">Fields</span><span class="p">.</span><span class="nx">Description</span> <span class="p">=</span> <span class="nx">flags</span><span class="p">.</span><span class="nx">Description</span>
	<span class="nx">issue</span><span class="p">.</span><span class="nx">Fields</span><span class="p">.</span><span class="nx">Priority</span><span class="p">.</span><span class="nx">ID</span> <span class="p">=</span> <span class="nx">flags</span><span class="p">.</span><span class="nx">Priority</span>
	<span class="nx">issue</span><span class="p">.</span><span class="nx">Fields</span><span class="p">.</span><span class="nx">Summary</span> <span class="p">=</span> <span class="nx">flags</span><span class="p">.</span><span class="nx">Title</span>
	<span class="nx">issue</span><span class="p">.</span><span class="nx">Fields</span><span class="p">.</span><span class="nx">Project</span><span class="p">.</span><span class="nx">Key</span> <span class="p">=</span> <span class="nx">flags</span><span class="p">.</span><span class="nx">Project</span>
	<span class="nx">issue</span><span class="p">.</span><span class="nx">Fields</span><span class="p">.</span><span class="nx">Issuetype</span><span class="p">.</span><span class="nx">Name</span> <span class="p">=</span> <span class="s">&#34;Task&#34;</span>
	<span class="nx">marshalledIssue</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">issue</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;Error occured when Marshaling Issue:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nf">sendRequest</span><span class="p">(</span><span class="nx">marshalledIssue</span><span class="p">,</span> <span class="s">&#34;POST&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">sendRequest</span><span class="p">(</span><span class="nx">jsonStr</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">method</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">url</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">cred</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Credentials</span><span class="p">{}</span>
	<span class="nx">cred</span><span class="p">.</span><span class="nf">initConfig</span><span class="p">()</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Json:&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">jsonStr</span><span class="p">))</span>
	<span class="nx">req</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">NewRequest</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">cred</span><span class="p">.</span><span class="nx">URL</span><span class="o">+</span><span class="nx">url</span><span class="p">,</span> <span class="nx">bytes</span><span class="p">.</span><span class="nf">NewBuffer</span><span class="p">(</span><span class="nx">jsonStr</span><span class="p">))</span>
	<span class="nx">req</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;Content-Type&#34;</span><span class="p">,</span> <span class="s">&#34;application/json&#34;</span><span class="p">)</span>
	<span class="nx">req</span><span class="p">.</span><span class="nf">SetBasicAuth</span><span class="p">(</span><span class="nx">cred</span><span class="p">.</span><span class="nx">Username</span><span class="p">,</span> <span class="nx">cred</span><span class="p">.</span><span class="nx">Password</span><span class="p">)</span>

	<span class="nx">client</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Client</span><span class="p">{}</span>
	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;response Status:&#34;</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Status</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;response Headers:&#34;</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Header</span><span class="p">)</span>
	<span class="nx">body</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;response Body:&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">body</span><span class="p">))</span>

<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>It can also be found under my github page: <a href="https://github.com/Skarlso/goprojects/tree/master/gojira" target="_blank">GoJira Github</a>.</p>
<p>Feel free to open up issues if you would like to use it and need some features which you would find interesting. Currently the username and password for the API are stored in a local config file in your home folder. Later on, I&rsquo;ll add the ability to have a token rather than a username:password combination.</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>The One Hundred Day GitHub Challenge</title>
      <link>https://skarlso.github.io/2015/11/15/the-one-hundred-day-github-challenge/</link>
      <pubDate>Sun, 15 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/11/15/the-one-hundred-day-github-challenge/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>Today, I present to you the One Hundred Day Github Challenge.</p>
<p>The rules are simple:</p>
<ol>
<li>Minimum of <strong>One</strong> commit every day for a <strong>Hundred days</strong>.</li>
<li>Commit has to be <strong>meaningful</strong> but can be as little as a fix in a Readme.md.</li>
<li>Doesn&rsquo;t matter if you are on vacation, there are no exceptions.</li>
<li><strong>There. Are. No. Exceptions.</strong></li>
<li>If you <strong>fail</strong> a day, you have to <strong>start over</strong>.</li>
<li><strong>No cheating.</strong> You only cheat yourself, so this is really up to you.</li>
</ol>
<p>Let me be more clear here, because it seems I wasn&rsquo;t clear enough. What you make out of this challenge, it&rsquo;s up to you. If you just update a readme.md for hundred days, that&rsquo;s fine. Just do it every day. It&rsquo;s a commitment. At least you&rsquo;ll have a nice Readme.</p>
<p>Also, let me be clear on another thing. THERE ARE NO EXCEPTIONS. Even on holidays. No. Exceptions.</p>
<p>So there you have it. It&rsquo;s easy, but then again, it&rsquo;s not.</p>
<p>Mine starts today! 100.</p>
<p>Thanks for reading.</p>
<p>And happy coding.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Go Progress Quest</title>
      <link>https://skarlso.github.io/2015/11/09/go-progress-quest/</link>
      <pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/11/09/go-progress-quest/</guid>
      <description><![CDATA[<p>Hi Folks.</p>
<p>I started to build a Progress Quest type of web app in Go.</p>
<p>If you&rsquo;d like to join, or just tag along, please drop by here =&gt; <a href="https://github.com/Skarlso/goprogressquest" target="_blank">Go Progress Quest</a> and feel free to submit an issue if you have an idea, or would like to contribute!</p>
<p>I will try and document the Progress.</p>
<p>Thank you for reading!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Circular buffer in Go</title>
      <link>https://skarlso.github.io/2015/10/15/circular-buffer-in-go/</link>
      <pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/10/15/circular-buffer-in-go/</guid>
      <description><![CDATA[<p>I&rsquo;m proud of this one too. No peaking. I like how go let&rsquo;s you do this kind of stuff in a very nice way.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">circular</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="c1">//TestVersion testVersion
</span><span class="c1"></span><span class="kd">const</span> <span class="nx">TestVersion</span> <span class="p">=</span> <span class="mi">1</span>

<span class="c1">//Buffer buffer type
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Buffer</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">buffer</span> <span class="p">[]</span><span class="kt">byte</span>
	<span class="nx">full</span>   <span class="kt">int</span>
	<span class="nx">size</span>   <span class="kt">int</span>
	<span class="nx">s</span><span class="p">,</span> <span class="nx">e</span>   <span class="kt">int</span>
<span class="p">}</span>

<span class="c1">//NewBuffer creates a new Buffer
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">NewBuffer</span><span class="p">(</span><span class="nx">size</span> <span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="nx">Buffer</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">Buffer</span><span class="p">{</span><span class="nx">buffer</span><span class="p">:</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">size</span><span class="p">),</span> <span class="nx">s</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">e</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">size</span><span class="p">:</span> <span class="nx">size</span><span class="p">,</span> <span class="nx">full</span><span class="p">:</span> <span class="mi">0</span><span class="p">}</span>
<span class="p">}</span>

<span class="c1">//ReadByte reads a byte from b Buffer
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">Buffer</span><span class="p">)</span> <span class="nf">ReadByte</span><span class="p">()</span> <span class="p">(</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nx">full</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
		<span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Danger Will Robinson: %s&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">readByte</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">s</span><span class="p">]</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">s</span> <span class="p">=</span> <span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">s</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nx">b</span><span class="p">.</span><span class="nx">size</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">full</span><span class="o">--</span>
	<span class="k">return</span> <span class="nx">readByte</span><span class="p">,</span> <span class="kc">nil</span>
<span class="p">}</span>

<span class="c1">//WriteByte writes c byte to the buffer
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">Buffer</span><span class="p">)</span> <span class="nf">WriteByte</span><span class="p">(</span><span class="nx">c</span> <span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nx">full</span><span class="o">+</span><span class="mi">1</span> <span class="p">&gt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">size</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Danger Will Robinson: %s&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">e</span><span class="p">]</span> <span class="p">=</span> <span class="nx">c</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">e</span> <span class="p">=</span> <span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">e</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nx">b</span><span class="p">.</span><span class="nx">size</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">full</span><span class="o">++</span>
	<span class="k">return</span> <span class="kc">nil</span>
<span class="p">}</span>

<span class="c1">//Overwrite overwrites the oldest byte in Buffer
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">Buffer</span><span class="p">)</span> <span class="nf">Overwrite</span><span class="p">(</span><span class="nx">c</span> <span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">s</span><span class="p">]</span> <span class="p">=</span> <span class="nx">c</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">s</span> <span class="p">=</span> <span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">s</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nx">b</span><span class="p">.</span><span class="nx">size</span>
<span class="p">}</span>

<span class="c1">//Reset resets the buffer
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">Buffer</span><span class="p">)</span> <span class="nf">Reset</span><span class="p">()</span> <span class="p">{</span>
	<span class="o">*</span><span class="nx">b</span> <span class="p">=</span> <span class="o">*</span><span class="nf">NewBuffer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">Buffer</span><span class="p">)</span> <span class="nf">String</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;Buffer: %d, %d, %d, %d&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">s</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">e</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
    </item>
    
    <item>
      <title>Jenkins Job DSL and Groovy goodness</title>
      <link>https://skarlso.github.io/2015/10/15/jenkins-job-dsl-and-groovy-goodness/</link>
      <pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/10/15/jenkins-job-dsl-and-groovy-goodness/</guid>
      <description><![CDATA[<p>Hi Folks.</p>
<p>Ever used <a href="https://wiki.jenkins-ci.org/display/JENKINS/Job+DSL+Plugin" target="_blank">Job DSL plugin</a> for Jenkins? What is that you say? Well, it&rsquo;s TEH most awesome plug-in for Jenkins to have, because you can CODE your job configuration and put it under source control.</p>
<p>Today, however, I&rsquo;m not going to write about that because the tutorials on Jenkins JOB DSL are very extensive and very well done. Anyone can pick them up.</p>
<p>Today, I would like to write about a part of it which is even more interesting. And that is, extracting re-occurring parts in your job configurations.</p>
<p>If you have jobs, which have a common part that is repeated everywhere, you usually have an urge to extracted that into one place, lest it changes and you have to go an apply the change everywhere. That&rsquo;s not very efficient. But how do you do that in something which looks like a JSON descriptor?</p>
<p>Fret not, it is just Groovy. And being just groovy, you can use Groovy to implement parts of the job description and then apply that implementation to the job in the DSL.</p>
<p>Suppose you have an email which you send after every job for which the DSL looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy">
<span class="n">job</span><span class="o">(</span><span class="s1">&#39;MyTestJob&#39;</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">description</span> <span class="s1">&#39;&lt;strong&gt;GENERATED - do not modify&lt;/strong&gt;&#39;</span>
    <span class="n">label</span><span class="o">(</span><span class="s1">&#39;machine_label&#39;</span><span class="o">)</span>
    <span class="n">logRotator</span><span class="o">(</span><span class="mi">30</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span>
    <span class="n">parameters</span> <span class="o">{</span>
        <span class="n">stringParam</span><span class="o">(</span><span class="s1">&#39;somestringparam&#39;</span><span class="o">,</span> <span class="s1">&#39;default_valye&#39;</span><span class="o">,</span> <span class="s1">&#39;Description&#39;</span><span class="o">)</span>
    <span class="o">}</span>
    <span class="n">wrappers</span> <span class="o">{</span>
        <span class="n">timeout</span> <span class="o">{</span>
            <span class="n">noActivity</span><span class="o">(</span><span class="mi">600</span><span class="o">)</span>
            <span class="n">abortBuild</span><span class="o">()</span>
            <span class="n">failBuild</span><span class="o">()</span>
            <span class="n">writeDescription</span><span class="o">(</span><span class="s1">&#39;Build failed due to timeout after {0} minutes&#39;</span><span class="o">)</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="n">deliveryPipelineConfiguration</span><span class="o">(</span><span class="s2">&#34;Main&#34;</span><span class="o">,</span> <span class="s2">&#34;MyTestJob&#34;</span><span class="o">)</span>
    <span class="n">wrappers</span> <span class="o">{</span>
        <span class="n">preBuildCleanup</span> <span class="o">{</span>
            <span class="n">deleteDirectories</span><span class="o">()</span>
        <span class="o">}</span>
        <span class="n">timestamps</span><span class="o">()</span>
    <span class="o">}</span>
    <span class="n">triggers</span> <span class="o">{</span>
        <span class="n">cron</span><span class="o">(</span><span class="s1">&#39;H 12 * * 1,2&#39;</span><span class="o">)</span>
    <span class="o">}</span>
    <span class="n">steps</span> <span class="o">{</span>
        <span class="n">batchFile</span><span class="o">(</span><span class="n">readFileFromWorkspace</span><span class="o">(</span><span class="s1">&#39;relative/path/to/file&#39;</span><span class="o">))</span>
    <span class="o">}</span>
            <span class="n">publishers</span> <span class="o">{</span>
                <span class="n">wsCleanup</span><span class="o">()</span>
                <span class="n">extendedEmail</span><span class="o">(</span><span class="s1">&#39;email@address.com&#39;</span><span class="o">,</span> <span class="s1">&#39;$DEFAULT_SUBJECT&#39;</span><span class="o">,</span> <span class="s1">&#39;$DEFAULT_CONTENT&#39;</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">configure</span> <span class="o">{</span> <span class="n">node</span> <span class="o">-&gt;</span>
                        <span class="n">node</span> <span class="s">/ presendScript &lt;&lt; readFileFromWorkspace(&#39;email_templates/</span><span class="n">emailtemplate</span><span class="o">.</span><span class="na">groovy</span><span class="s1">&#39;)
</span><span class="s1">                        node / replyTo &lt;&lt; &#39;</span><span class="n">$DEFAULT_REPLYTO</span><span class="s1">&#39;
</span><span class="s1">                        node / contentType &lt;&lt; &#39;</span><span class="k">default</span><span class="s1">&#39;
</span><span class="s1">                    }
</span><span class="s1">                    trigger(triggerName: &#39;</span><span class="n">StillUnstable</span><span class="s1">&#39;, subject: &#39;</span><span class="n">$DEFAULT_SUBJECT</span><span class="s1">&#39;, body: &#39;</span><span class="n">$DEFAULT_CONTENT</span><span class="s1">&#39;, replyTo: &#39;</span><span class="n">$DEFAULT_REPLYTO</span><span class="s1">&#39;, sendToDevelopers: true, sendToRecipientList: true)
</span><span class="s1">                    trigger(triggerName: &#39;</span><span class="n">Fixed</span><span class="s1">&#39;, subject: &#39;</span><span class="n">$DEFAULT_SUBJECT</span><span class="s1">&#39;, body: &#39;</span><span class="n">$DEFAULT_CONTENT</span><span class="s1">&#39;, replyTo: &#39;</span><span class="n">$DEFAULT_REPLYTO</span><span class="s1">&#39;, sendToDevelopers: true, sendToRecipientList: true)
</span><span class="s1">                    trigger(triggerName: &#39;</span><span class="n">Failure</span><span class="s1">&#39;, subject: &#39;</span><span class="n">$DEFAULT_SUBJECT</span><span class="s1">&#39;, body: &#39;</span><span class="n">$DEFAULT_CONTENT</span><span class="s1">&#39;, replyTo: &#39;</span><span class="n">$DEFAULT_REPLYTO</span><span class="err">&#39;</span><span class="o">,</span> <span class="nl">sendToDevelopers:</span> <span class="kc">true</span><span class="o">,</span> <span class="nl">sendToRecipientList:</span> <span class="kc">true</span><span class="o">)</span>
                <span class="o">}</span>

            <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Now, that big chunk of email setting is copied into a bunch of files, which is pretty ugly. And once you try to change it, you&rsquo;ll have to change it everywhere. Also, the interesting bits here are those readFileFromWorkspace parts. Those allow us to export even larger chunks of the script into external files. Now, because the slave might be located somewhere else, you should not use new File(&lsquo;file&rsquo;).text in your job DSL. readFileFromWorkspace in the background does that, but applies correct way to the PATH it looks on for the file specified.</p>
<p>Let&rsquo;s put this into a groovy script, shall we? Create a utilities folder where the DSL is and create a groovy file in it like this one:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy">
<span class="kn">package</span> <span class="n">utilities</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JobCommonTemplate</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">addEmailTemplate</span><span class="o">(</span><span class="kt">def</span> <span class="n">job</span><span class="o">,</span> <span class="kt">def</span> <span class="n">dslFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">emailScript</span> <span class="o">=</span> <span class="n">dslFactory</span><span class="o">.</span><span class="na">readFileFromWorkspace</span><span class="o">(</span><span class="s2">&#34;email_template/EmailTemplate.groovy&#34;</span><span class="o">)</span>
        <span class="n">job</span><span class="o">.</span><span class="na">with</span> <span class="o">{</span>
            <span class="n">publishers</span> <span class="o">{</span>
                <span class="n">wsCleanup</span><span class="o">()</span>
                <span class="n">extendedEmail</span><span class="o">(</span><span class="s1">&#39;email@address.com&#39;</span><span class="o">,</span> <span class="s1">&#39;$DEFAULT_SUBJECT&#39;</span><span class="o">,</span> <span class="s1">&#39;$DEFAULT_CONTENT&#39;</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">configure</span> <span class="o">{</span> <span class="n">node</span> <span class="o">-&gt;</span>
                        <span class="n">node</span> <span class="s">/ presendScript &lt;&lt; emailScript
</span><span class="s">                        node /</span> <span class="n">replyTo</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;$DEFAULT_REPLYTO&#39;</span>
                        <span class="n">node</span> <span class="o">/</span> <span class="n">contentType</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;default&#39;</span>
                    <span class="o">}</span>
                    <span class="n">trigger</span><span class="o">(</span><span class="nl">triggerName:</span> <span class="s1">&#39;StillUnstable&#39;</span><span class="o">,</span> <span class="nl">subject:</span> <span class="s1">&#39;$DEFAULT_SUBJECT&#39;</span><span class="o">,</span> <span class="nl">body:</span> <span class="s1">&#39;$DEFAULT_CONTENT&#39;</span><span class="o">,</span> <span class="nl">replyTo:</span> <span class="s1">&#39;$DEFAULT_REPLYTO&#39;</span><span class="o">,</span> <span class="nl">sendToDevelopers:</span> <span class="kc">true</span><span class="o">,</span> <span class="nl">sendToRecipientList:</span> <span class="kc">true</span><span class="o">)</span>
                    <span class="n">trigger</span><span class="o">(</span><span class="nl">triggerName:</span> <span class="s1">&#39;Fixed&#39;</span><span class="o">,</span> <span class="nl">subject:</span> <span class="s1">&#39;$DEFAULT_SUBJECT&#39;</span><span class="o">,</span> <span class="nl">body:</span> <span class="s1">&#39;$DEFAULT_CONTENT&#39;</span><span class="o">,</span> <span class="nl">replyTo:</span> <span class="s1">&#39;$DEFAULT_REPLYTO&#39;</span><span class="o">,</span> <span class="nl">sendToDevelopers:</span> <span class="kc">true</span><span class="o">,</span> <span class="nl">sendToRecipientList:</span> <span class="kc">true</span><span class="o">)</span>
                    <span class="n">trigger</span><span class="o">(</span><span class="nl">triggerName:</span> <span class="s1">&#39;Failure&#39;</span><span class="o">,</span> <span class="nl">subject:</span> <span class="s1">&#39;$DEFAULT_SUBJECT&#39;</span><span class="o">,</span> <span class="nl">body:</span> <span class="s1">&#39;$DEFAULT_CONTENT&#39;</span><span class="o">,</span> <span class="nl">replyTo:</span> <span class="s1">&#39;$DEFAULT_REPLYTO&#39;</span><span class="o">,</span> <span class="nl">sendToDevelopers:</span> <span class="kc">true</span><span class="o">,</span> <span class="nl">sendToRecipientList:</span> <span class="kc">true</span><span class="o">)</span>
                <span class="o">}</span>

            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The function addEmailTemplate gets two parameters. A job, which is an implementation of a Job, and a dslFactory which is a DslFactory. That factory is an interface which defines our readFileFromWorkspace. Where do we get the implementation from then? That will be from the Job. Let&rsquo;s alter our job to apply this Groovy script.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy">
<span class="kn">import</span> <span class="nn">utilities.JobCommonTemplate</span>

<span class="kt">def</span> <span class="n">myJob</span> <span class="o">=</span> <span class="n">job</span><span class="o">(</span><span class="s1">&#39;MyTestJob&#39;</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">description</span> <span class="s1">&#39;&lt;strong&gt;GENERATED - do not modify&lt;/strong&gt;&#39;</span>
    <span class="n">label</span><span class="o">(</span><span class="s1">&#39;machine_label&#39;</span><span class="o">)</span>
    <span class="n">logRotator</span><span class="o">(</span><span class="mi">30</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span>
    <span class="n">parameters</span> <span class="o">{</span>
        <span class="n">stringParam</span><span class="o">(</span><span class="s1">&#39;somestringparam&#39;</span><span class="o">,</span> <span class="s1">&#39;default_valye&#39;</span><span class="o">,</span> <span class="s1">&#39;Description&#39;</span><span class="o">)</span>
    <span class="o">}</span>
    <span class="n">wrappers</span> <span class="o">{</span>
        <span class="n">timeout</span> <span class="o">{</span>
            <span class="n">noActivity</span><span class="o">(</span><span class="mi">600</span><span class="o">)</span>
            <span class="n">abortBuild</span><span class="o">()</span>
            <span class="n">failBuild</span><span class="o">()</span>
            <span class="n">writeDescription</span><span class="o">(</span><span class="s1">&#39;Build failed due to timeout after {0} minutes&#39;</span><span class="o">)</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="n">deliveryPipelineConfiguration</span><span class="o">(</span><span class="s2">&#34;Main&#34;</span><span class="o">,</span> <span class="s2">&#34;MyTestJob&#34;</span><span class="o">)</span>
    <span class="n">wrappers</span> <span class="o">{</span>
        <span class="n">preBuildCleanup</span> <span class="o">{</span>
            <span class="n">deleteDirectories</span><span class="o">()</span>
        <span class="o">}</span>
        <span class="n">timestamps</span><span class="o">()</span>
    <span class="o">}</span>
    <span class="n">triggers</span> <span class="o">{</span>
        <span class="n">cron</span><span class="o">(</span><span class="s1">&#39;H 12 * * 1,2&#39;</span><span class="o">)</span>
    <span class="o">}</span>
    <span class="n">steps</span> <span class="o">{</span>
        <span class="n">batchFile</span><span class="o">(</span><span class="n">readFileFromWorkspace</span><span class="o">(</span><span class="s1">&#39;relative/path/to/file&#39;</span><span class="o">))</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="n">JobCommonTemplate</span><span class="o">.</span><span class="na">addEmailTemplate</span><span class="o">(</span><span class="n">myJob</span><span class="o">,</span> <span class="k">this</span><span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><p>Notice three things here.</p>
<p>#1 =&gt; <strong>import</strong>. We import the script from utilities folder which we created and placed the script into it.</p>
<p>#2 =&gt; <strong>def myJob</strong>. We create a variable which will contain our job&rsquo;s description.</p>
<p>#3 =&gt; <strong>this</strong>. &lsquo;this&rsquo; will be the DslFactory. That&rsquo;s where we get our readFileFromWorkspace implementation.</p>
<p>And that&rsquo;s it. We have extracted a part of our job which is re-occurring and we found our implementation for our readFileFromWorkspace. DslFactory has most of the things which you need in a job description, would you want to expand on this and extract other bits and pieces.</p>
<p>Have fun, and happy coding!</p>
<p>As always,</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>DataMunger Kata with Go</title>
      <link>https://skarlso.github.io/2015/10/04/datamunger-kata-with-go/</link>
      <pubDate>Sun, 04 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/10/04/datamunger-kata-with-go/</guid>
      <description><![CDATA[<p>Quickly wrote up the Data Munger code kata in Go.</p>
<p>Next time, I want better abstractions. And a way to select columns based on their header data. For now, this is not bad.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">
<span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;bufio&#34;</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;log&#34;</span>
	<span class="s">&#34;math&#34;</span>
	<span class="s">&#34;os&#34;</span>
	<span class="s">&#34;regexp&#34;</span>
	<span class="s">&#34;strconv&#34;</span>
	<span class="s">&#34;strings&#34;</span>
<span class="p">)</span>

<span class="c1">//Data which is Data
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Data</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">columnName</span> <span class="kt">string</span>
	<span class="nx">compareOne</span> <span class="kt">float64</span>
	<span class="nx">compareTwo</span> <span class="kt">float64</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="c1">// datas := []Data{WeatherData{}, FootballData{}}
</span><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Minimum weather data:&#34;</span><span class="p">,</span> <span class="nf">GetDataMinimumDiff</span><span class="p">(</span><span class="s">&#34;weather.dat&#34;</span><span class="p">,</span> <span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Minimum football data:&#34;</span><span class="p">,</span> <span class="nf">GetDataMinimumDiff</span><span class="p">(</span><span class="s">&#34;football.dat&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span>
<span class="p">}</span>

<span class="c1">//GetDataMinimumDiff gathers data from file to fill up Columns.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">GetDataMinimumDiff</span><span class="p">(</span><span class="nx">filename</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">nameColumn</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">compareColOne</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">compareColTwo</span> <span class="kt">int</span><span class="p">)</span> <span class="nx">Data</span> <span class="p">{</span>
	<span class="nx">data</span> <span class="o">:=</span> <span class="nx">Data</span><span class="p">{}</span>
	<span class="nx">minimum</span> <span class="o">:=</span> <span class="nx">math</span><span class="p">.</span><span class="nx">MaxFloat64</span>
	<span class="nx">readLines</span> <span class="o">:=</span> <span class="nf">ReadFile</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">value</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">readLines</span> <span class="p">{</span>
		<span class="nx">valueArrays</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="s">&#34;,&#34;</span><span class="p">)</span>
		<span class="nx">name</span> <span class="o">:=</span> <span class="nx">valueArrays</span><span class="p">[</span><span class="nx">nameColumn</span><span class="p">]</span>
		<span class="nx">trimmedFirst</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">ParseFloat</span><span class="p">(</span><span class="nx">valueArrays</span><span class="p">[</span><span class="nx">compareColOne</span><span class="p">],</span> <span class="mi">64</span><span class="p">)</span>
		<span class="nx">trimmedSecond</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">ParseFloat</span><span class="p">(</span><span class="nx">valueArrays</span><span class="p">[</span><span class="nx">compareColTwo</span><span class="p">],</span> <span class="mi">64</span><span class="p">)</span>
		<span class="nx">diff</span> <span class="o">:=</span> <span class="nx">trimmedFirst</span> <span class="o">-</span> <span class="nx">trimmedSecond</span>
		<span class="nx">diff</span> <span class="p">=</span> <span class="nx">math</span><span class="p">.</span><span class="nf">Abs</span><span class="p">(</span><span class="nx">diff</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">diff</span> <span class="o">&lt;=</span> <span class="nx">minimum</span> <span class="p">{</span>
			<span class="nx">minimum</span> <span class="p">=</span> <span class="nx">diff</span>
			<span class="nx">data</span><span class="p">.</span><span class="nx">columnName</span> <span class="p">=</span> <span class="nx">name</span>
			<span class="nx">data</span><span class="p">.</span><span class="nx">compareOne</span> <span class="p">=</span> <span class="nx">trimmedFirst</span>
			<span class="nx">data</span><span class="p">.</span><span class="nx">compareTwo</span> <span class="p">=</span> <span class="nx">trimmedSecond</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">data</span>
<span class="p">}</span>

<span class="c1">//ReadFile reads lines from a file and gives back a string array which contains the lines.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">ReadFile</span><span class="p">(</span><span class="nx">fileName</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">fileLines</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="nx">fileName</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>

	<span class="nx">scanner</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewScanner</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
	<span class="c1">//Skipping the first line which is the header.
</span><span class="c1"></span>	<span class="nx">scanner</span><span class="p">.</span><span class="nf">Scan</span><span class="p">()</span>
	<span class="k">for</span> <span class="nx">scanner</span><span class="p">.</span><span class="nf">Scan</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">line</span> <span class="o">:=</span> <span class="nx">scanner</span><span class="p">.</span><span class="nf">Text</span><span class="p">()</span>
		<span class="nx">re</span> <span class="o">:=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nf">MustCompile</span><span class="p">(</span><span class="s">&#34;\\w+&#34;</span><span class="p">)</span>
		<span class="nx">lines</span> <span class="o">:=</span> <span class="nx">re</span><span class="p">.</span><span class="nf">FindAllString</span><span class="p">(</span><span class="nx">line</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
		<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">lines</span><span class="p">)</span> <span class="p">&gt;</span>  <span class="p">{</span>
			<span class="nx">fileLines</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">fileLines</span><span class="p">,</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">lines</span><span class="p">,</span> <span class="s">&#34;,&#34;</span><span class="p">))</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">scanner</span><span class="p">.</span><span class="nf">Err</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="k">return</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
    </item>
    
    <item>
      <title>Sieve of Eratosthenes in Go</title>
      <link>https://skarlso.github.io/2015/07/30/sieve-of-eratosthenes-in-go/</link>
      <pubDate>Thu, 30 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/07/30/sieve-of-eratosthenes-in-go/</guid>
      <description><![CDATA[<p>I&rsquo;m pretty proud of this one as well.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">
<span class="kn">package</span> <span class="nx">sieve</span>

<span class="c1">//Sieve Uses the Sieve of Eratosthenes to calculate primes to a certain limit
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Sieve</span><span class="p">(</span><span class="nx">limit</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">listOfPrimes</span> <span class="p">[]</span><span class="kt">int</span>
	<span class="nx">markers</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">bool</span><span class="p">,</span> <span class="nx">limit</span><span class="p">)</span>

	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">limit</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">!</span><span class="nx">markers</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">{</span>
			<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="nx">i</span> <span class="o">+</span> <span class="nx">i</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">limit</span><span class="p">;</span> <span class="nx">j</span> <span class="o">+=</span> <span class="nx">i</span> <span class="p">{</span>
				<span class="nx">markers</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="kc">true</span>
			<span class="p">}</span>
			<span class="nx">listOfPrimes</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">listOfPrimes</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="nx">listOfPrimes</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
    </item>
    
    <item>
      <title>Converting numbers into string representations</title>
      <link>https://skarlso.github.io/2015/07/19/converting-numbers-into-string-representations/</link>
      <pubDate>Sun, 19 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/07/19/converting-numbers-into-string-representations/</guid>
      <description><![CDATA[<p>I quiet like this one. My first go program snippet without any peaking or googling. I&rsquo;m proud, though it could be improved with a bit of struct magic and such and such. And it only counts &lsquo;till 1000.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">
<span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">var</span> <span class="nx">words</span> <span class="p">=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span><span class="mi">1</span><span class="p">:</span> <span class="s">&#34;one&#34;</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="s">&#34;two&#34;</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span> <span class="s">&#34;three&#34;</span><span class="p">,</span> <span class="mi">4</span><span class="p">:</span> <span class="s">&#34;four&#34;</span><span class="p">,</span> <span class="mi">5</span><span class="p">:</span> <span class="s">&#34;five&#34;</span><span class="p">,</span> <span class="mi">6</span><span class="p">:</span> <span class="s">&#34;six&#34;</span><span class="p">,</span> <span class="mi">7</span><span class="p">:</span> <span class="s">&#34;seven&#34;</span><span class="p">,</span>
	<span class="mi">8</span><span class="p">:</span> <span class="s">&#34;eight&#34;</span><span class="p">,</span> <span class="mi">9</span><span class="p">:</span> <span class="s">&#34;nine&#34;</span><span class="p">,</span> <span class="mi">10</span><span class="p">:</span> <span class="s">&#34;ten&#34;</span><span class="p">,</span> <span class="mi">11</span><span class="p">:</span> <span class="s">&#34;eleven&#34;</span><span class="p">,</span> <span class="mi">12</span><span class="p">:</span> <span class="s">&#34;twelve&#34;</span><span class="p">,</span> <span class="mi">13</span><span class="p">:</span> <span class="s">&#34;thirteen&#34;</span><span class="p">,</span> <span class="mi">14</span><span class="p">:</span> <span class="s">&#34;fourteen&#34;</span><span class="p">,</span> <span class="mi">15</span><span class="p">:</span> <span class="s">&#34;fifteen&#34;</span><span class="p">,</span>
	<span class="mi">16</span><span class="p">:</span> <span class="s">&#34;sixteen&#34;</span><span class="p">,</span> <span class="mi">17</span><span class="p">:</span> <span class="s">&#34;seventeen&#34;</span><span class="p">,</span> <span class="mi">18</span><span class="p">:</span> <span class="s">&#34;eighteen&#34;</span><span class="p">,</span> <span class="mi">19</span><span class="p">:</span> <span class="s">&#34;nineteen&#34;</span><span class="p">,</span> <span class="mi">20</span><span class="p">:</span> <span class="s">&#34;twenty&#34;</span><span class="p">,</span> <span class="mi">30</span><span class="p">:</span> <span class="s">&#34;thirty&#34;</span><span class="p">,</span> <span class="mi">40</span><span class="p">:</span> <span class="s">&#34;forty&#34;</span><span class="p">,</span>
	<span class="mi">50</span><span class="p">:</span> <span class="s">&#34;fifty&#34;</span><span class="p">,</span> <span class="mi">60</span><span class="p">:</span> <span class="s">&#34;sixty&#34;</span><span class="p">,</span> <span class="mi">70</span><span class="p">:</span> <span class="s">&#34;seventy&#34;</span><span class="p">,</span> <span class="mi">80</span><span class="p">:</span> <span class="s">&#34;eighty&#34;</span><span class="p">,</span> <span class="mi">90</span><span class="p">:</span> <span class="s">&#34;ninety&#34;</span><span class="p">}</span>

<span class="c1">// CountLetters count the letters in a long string number representation
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">CountLetters</span><span class="p">(</span><span class="nx">limit</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">myLongNumberString</span> <span class="o">:=</span> <span class="s">&#34;&#34;</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">limit</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nf">addLettersToMyString</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">myLongNumberString</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="c1">// fmt.Println(&#34;1-9 written with letters is: &#34;, len(myLongNumberString))
</span><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;The string is:&#34;</span><span class="p">,</span> <span class="nx">myLongNumberString</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Lenght of string is:&#34;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">myLongNumberString</span><span class="p">))</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">addLettersToMyString</span><span class="p">(</span><span class="nx">myString</span> <span class="o">*</span><span class="kt">string</span><span class="p">,</span> <span class="nx">num</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">num</span> <span class="p">&lt;</span> <span class="mi">20</span> <span class="p">{</span>
		<span class="o">*</span><span class="nx">myString</span> <span class="o">+=</span> <span class="nx">words</span><span class="p">[</span><span class="nx">num</span><span class="p">]</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="nx">num</span> <span class="o">&gt;=</span> <span class="mi">20</span> <span class="o">&amp;&amp;</span> <span class="nx">num</span> <span class="p">&lt;</span> <span class="mi">100</span> <span class="p">{</span>
		<span class="o">*</span><span class="nx">myString</span> <span class="o">+=</span> <span class="nf">countMiddle</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="nx">num</span> <span class="o">&gt;=</span> <span class="mi">100</span> <span class="o">&amp;&amp;</span> <span class="nx">num</span> <span class="p">&lt;</span> <span class="mi">1000</span> <span class="p">{</span>
		<span class="nx">hundred</span><span class="p">,</span> <span class="nx">tenth</span> <span class="o">:=</span> <span class="nf">countHundred</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">tenth</span> <span class="o">==</span>  <span class="p">{</span>
			<span class="o">*</span><span class="nx">myString</span> <span class="o">+=</span> <span class="nx">hundred</span>
		<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">tenth</span> <span class="o">&gt;=</span> <span class="mi">11</span> <span class="o">&amp;&amp;</span> <span class="nx">tenth</span> <span class="p">&lt;</span> <span class="mi">20</span> <span class="p">{</span>
			<span class="o">*</span><span class="nx">myString</span> <span class="o">+=</span> <span class="nx">hundred</span> <span class="o">+</span> <span class="s">&#34;and&#34;</span> <span class="o">+</span> <span class="nx">words</span><span class="p">[</span><span class="nx">tenth</span><span class="p">]</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="o">*</span><span class="nx">myString</span> <span class="o">+=</span> <span class="nx">hundred</span> <span class="o">+</span> <span class="s">&#34;and&#34;</span> <span class="o">+</span> <span class="nf">countMiddle</span><span class="p">(</span><span class="nx">tenth</span><span class="p">)</span>
		<span class="p">}</span>

	<span class="p">}</span>

	<span class="k">if</span> <span class="nx">num</span> <span class="o">==</span> <span class="mi">1000</span> <span class="p">{</span>
		<span class="o">*</span><span class="nx">myString</span> <span class="o">+=</span> <span class="s">&#34;onethousand&#34;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">countMiddle</span><span class="p">(</span><span class="nx">num</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="nx">minues</span> <span class="o">:=</span> <span class="nx">num</span> <span class="o">%</span> <span class="mi">10</span>
	<span class="nx">num</span> <span class="o">-=</span> <span class="nx">minues</span>
	<span class="k">return</span> <span class="nx">words</span><span class="p">[</span><span class="nx">num</span><span class="p">]</span> <span class="o">+</span> <span class="nx">words</span><span class="p">[</span><span class="nx">minues</span><span class="p">]</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">countHundred</span><span class="p">(</span><span class="nx">num</span> <span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">minues</span> <span class="o">:=</span> <span class="nx">num</span> <span class="o">%</span> <span class="mi">100</span>
	<span class="nx">num</span> <span class="o">-=</span> <span class="nx">minues</span>
	<span class="k">return</span> <span class="p">(</span><span class="nx">words</span><span class="p">[(</span><span class="nx">num</span><span class="o">/</span><span class="mi">100</span><span class="p">)]</span> <span class="o">+</span> <span class="s">&#34;hundred&#34;</span><span class="p">),</span> <span class="nx">minues</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
    </item>
    
    <item>
      <title>Bitwise &amp; Operator</title>
      <link>https://skarlso.github.io/2015/07/15/bitwise-operator/</link>
      <pubDate>Wed, 15 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/07/15/bitwise-operator/</guid>
      <description><![CDATA[<p>The first, and only time so far, that I got to use the bitwise &amp; operator. I enjoyed doing so!!</p>
<p>And of course from now on, I&rsquo;ll be looking for more opportunities to (ab)use it.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">
<span class="kn">package</span> <span class="nx">secret</span>

<span class="kn">import</span> <span class="s">&#34;sort&#34;</span>

<span class="kd">const</span> <span class="nx">REVERSE</span> <span class="p">=</span> <span class="mi">16</span>

<span class="kd">func</span> <span class="nf">Handshake</span><span class="p">(</span><span class="nx">code</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">string</span> <span class="p">{</span>
    <span class="c1">// binary_rep := convertDecimalToBinary(code)
</span><span class="c1"></span>    <span class="k">if</span> <span class="nx">code</span> <span class="p">&lt;</span>  <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">}</span>
    <span class="nx">secret_map</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">string</span> <span class="p">{</span>
        <span class="mi">1</span><span class="p">:</span> <span class="s">&#34;wink&#34;</span><span class="p">,</span>
        <span class="mi">2</span><span class="p">:</span> <span class="s">&#34;double blink&#34;</span><span class="p">,</span>
        <span class="mi">4</span><span class="p">:</span> <span class="s">&#34;close your eyes&#34;</span><span class="p">,</span>
        <span class="mi">8</span><span class="p">:</span> <span class="s">&#34;jump&#34;</span><span class="p">,</span>
    <span class="p">}</span>

    <span class="kd">var</span> <span class="nx">keys</span> <span class="p">[]</span><span class="kt">int</span>
    <span class="k">for</span> <span class="nx">k</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">secret_map</span> <span class="p">{</span>
        <span class="nx">keys</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nx">k</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="c1">// To make sure iteration is always in the same order.
</span><span class="c1"></span>    <span class="nx">sort</span><span class="p">.</span><span class="nf">Ints</span><span class="p">(</span><span class="nx">keys</span><span class="p">)</span>

    <span class="nx">code_array</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="p">)</span>
    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">key</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">keys</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nx">code</span> <span class="o">&amp;</span> <span class="nx">key</span> <span class="o">==</span> <span class="nx">key</span> <span class="p">{</span>
            <span class="nx">code_array</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">code_array</span><span class="p">,</span> <span class="nx">secret_map</span><span class="p">[</span><span class="nx">key</span><span class="p">])</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="nx">code</span> <span class="o">&amp;</span> <span class="nx">REVERSE</span> <span class="o">==</span> <span class="nx">REVERSE</span> <span class="p">{</span>
        <span class="nx">code_array</span> <span class="p">=</span> <span class="nf">reverse_array</span><span class="p">(</span><span class="nx">code_array</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">code_array</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">reverse_array</span> <span class="p">(</span><span class="nx">array_to_reverse</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="p">[]</span><span class="kt">string</span> <span class="p">{</span>
    <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="o">:=</span> <span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">array_to_reverse</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span> <span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">j</span><span class="p">;</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="p">=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">j</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">{</span>
        <span class="nx">array_to_reverse</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">array_to_reverse</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="nx">array_to_reverse</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span> <span class="nx">array_to_reverse</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">array_to_reverse</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
    </item>
    
    <item>
      <title>Django – RPG – Part 3</title>
      <link>https://skarlso.github.io/2015/04/21/django-rpg-part-3/</link>
      <pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/04/21/django-rpg-part-3/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>A small update to this. I created the model now, which is the database design for this app. It&rsquo;s very simple, nothing fancy. Also, I&rsquo;m writing the app with Python 3 from now on.</p>
<p>Here is the model now:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python">
<span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
<span class="kn">from</span> <span class="nn">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>

<span class="c1"># Create your models here.</span>


<span class="k">class</span> <span class="nc">Item</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s2">&#34;Item&#34;</span><span class="p">)</span>
    <span class="n">damage</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="p">)</span>
    <span class="n">defense</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="p">)</span>
    <span class="n">consumable</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">BooleanField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

    <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>


<span class="k">class</span> <span class="nc">Inventory</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">items</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ManyToManyField</span><span class="p">(</span><span class="n">Item</span><span class="p">)</span>

    <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span>


<span class="k">class</span> <span class="nc">Character</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="c1"># By default Django uses the primery key of the related object.</span>
    <span class="c1"># Hence, no need to specify User.id.</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">OneToOneField</span><span class="p">(</span><span class="n">User</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
    <span class="n">inventory</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Inventory</span><span class="p">)</span>

    <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</code></pre></td></tr></table>
</div>
</div><p>Worth noting a few things here. The __str__ is only with Python 3. In Python 2 it would be unicode. And the OneToOne and the foreign key are automatically using Primary keys defined in the references model. The __str__ is there to return some view when you are debugging in the console instead of [&lt;Item: Item object&gt;].</p>
<p>In order to apply this change you just have to run this commend (given you set up your app in the settings.py as an INSTALLED_APP):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">
python manage.py makemigrations polls
</code></pre></td></tr></table>
</div>
</div><p>This creates the migration script. And this applies it:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python">
<span class="n">python</span> <span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">migrate</span>
</code></pre></td></tr></table>
</div>
</div><p>I love the fact that django creates incremental migration scripts out of the box. So if there was any problem at all, you can always roll back. Which comes very handy in certain situations.</p>
<p>That&rsquo;s it.</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Django – RPG – Part 2</title>
      <link>https://skarlso.github.io/2015/04/12/django-rpg-part-2/</link>
      <pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/04/12/django-rpg-part-2/</guid>
      <description><![CDATA[<p>Hello.</p>
<p>Continuing where we left off with the Django RPG project. Next up is implementing a rudimentary registration and adding the ability to create a character. Maybe even, design the database through django&rsquo;s modelling.</p>
<p>Since we are using Django&rsquo;s very own authentication model, I think we are covered in terms of users. Let&rsquo;s add two things for now. An Index page, where there is a link to login and a link to registration.</p>
<p>Adding the index first. Later I would like to switch to a base template model, but for now, I created a simple index.html page. That only contains the two links to the two views. The views are a simple function call in the views.py too which the URLConfig will later point to.</p>
<p>For now, the index function looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python">
<span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
  <span class="s1">&#39;&#39;&#39;
</span><span class="s1">  myrpg/rpg/views.py
</span><span class="s1">  &#39;&#39;&#39;</span>
	<span class="n">title</span> <span class="o">=</span> <span class="s2">&#34;My RPG&#34;</span>
	<span class="k">return</span> <span class="n">render_to_response</span><span class="p">(</span><span class="s1">&#39;index.html&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;title&#39;</span><span class="p">:</span><span class="n">title</span><span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>Note, that the title here is utterly unimportant but because I want to switch to a base.html template I&rsquo;ll leave it here for later usage.</p>
<p>That concludes the index. Now, let&rsquo;s create the registration. That is a little more complex, but still rather easy. We are just checking of the user already exists or not, if so, display and error, if not, create the user.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># myrpg/rpg/views.py</span>
<span class="k">def</span> <span class="nf">registration</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
	<span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;Please register.&#34;</span>
	<span class="n">username</span> <span class="o">=</span> <span class="n">password</span> <span class="o">=</span> <span class="n">email</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
	<span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">:</span>
		<span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">)</span>
		<span class="n">email</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">)</span>
		<span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">)</span>
		<span class="k">if</span> <span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">username</span> <span class="o">=</span> <span class="n">username</span><span class="p">)</span><span class="o">.</span><span class="n">exists</span><span class="p">():</span>
			<span class="c1"># raise forms.ValidationError(&#34;Username %s is already in use.&#34; % username)</span>
			<span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;Username </span><span class="si">%s</span><span class="s2"> is already in use. Please try another.&#34;</span> <span class="o">%</span> <span class="n">username</span>
		<span class="k">else</span><span class="p">:</span>
			<span class="k">try</span><span class="p">:</span>
				<span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create_user</span><span class="p">(</span><span class="n">username</span> <span class="o">=</span> <span class="n">username</span><span class="p">,</span> <span class="n">email</span> <span class="o">=</span> <span class="n">email</span><span class="p">,</span> <span class="n">password</span> <span class="o">=</span> <span class="n">password</span><span class="p">)</span>
				<span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;Thank you for registering with us </span><span class="si">%s</span><span class="s2">!&#34;</span> <span class="o">%</span> <span class="n">user</span><span class="o">.</span><span class="n">username</span>
			<span class="k">except</span><span class="p">:</span>
				<span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;Unexpected error occured: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()[]</span>

	<span class="k">return</span> <span class="n">render_to_response</span><span class="p">(</span><span class="s1">&#39;registration.html&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;state&#39;</span><span class="p">:</span> <span class="n">state</span><span class="p">},</span> <span class="n">context_instance</span> <span class="o">=</span> <span class="n">RequestContext</span><span class="p">(</span><span class="n">request</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><p>Here, I&rsquo;m checking to see of the username already exists with the filter. This is by using Django&rsquo;s model which models the database like hibernate. It&rsquo;s a simple query. And I&rsquo;m doing this, because this is faster than raising an exception. Later on, I&rsquo;ll be switching to a validation framework and django&rsquo;s own auth view. Because, why not.</p>
<p>The URL conf looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#myrpg/rpg/urls.py</span>
<span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">url</span>

<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">url</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;^$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;index&#39;</span><span class="p">),</span>
    <span class="n">url</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;^login/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">login_user</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;login&#39;</span><span class="p">),</span>
    <span class="n">url</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;^registration/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">registration</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;registration&#39;</span><span class="p">),</span>
<span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>And this now, resides in a file under the RPG app and not the main one. The main one includes this one, like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#myrpg/urls.py</span>
<span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
<span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="c1"># Examples:</span>
    <span class="c1"># url(r&#39;^$&#39;, &#39;myrpg.views.home&#39;, name=&#39;home&#39;),</span>
    <span class="c1"># url(r&#39;^blog/&#39;, include(&#39;blog.urls&#39;)),</span>

    <span class="n">url</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;^admin/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
    <span class="n">url</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;^rpg/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s1">&#39;rpg.urls&#39;</span><span class="p">)),</span>
<span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>That&rsquo;s it for now. As always, you can check out the code under github.</p>
<p>Tune in next time, when I&rsquo;ll attempt to create a view to create a Character for a logged in user and link it to the user. I&rsquo;ll do this with django&rsquo;s model framework.</p>
<p>Thanks for reading,</p>
<p>Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>Django – RPG – Part 1</title>
      <link>https://skarlso.github.io/2015/04/10/django-rpg-2/</link>
      <pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/04/10/django-rpg-2/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>So last time, we tried to implement a little RPG of mine using Meteor, which failed miserably. This time we are going to try and use Django. Let&rsquo;s have at it, shall we?</p>
<p>If you don&rsquo;t know what django is (than you are probably not reading this blog entry anyways. ), have a look =&gt; <a href="https://www.djangoproject.com/" target="_blank">Link</a>. It&rsquo;s a Python Web Framework.</p>
<h1 id="in-the-beginning">In the beginning</h1>
<p>So here we are again. I&rsquo;m starting off by creating the skeleton for my RPG. First, the welcome page with a tiny login capability. Which means session tracking. For now, on the same page.</p>
<p>To create the skeleton I just run this little command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="n">django</span><span class="o">-</span><span class="n">admin</span><span class="o">.</span><span class="n">py</span> <span class="n">startproject</span> <span class="n">myrpg</span>
</code></pre></td></tr></table>
</div>
</div><p>Easy enough, right? Basic directory structure is created. You can read that in django&rsquo;s own documentation: <a href="https://docs.djangoproject.com/en/1.8/intro/tutorial01/" target="_blank"><a href="https://docs.djangoproject.com/en/1.8/intro/tutorial01/">https://docs.djangoproject.com/en/1.8/intro/tutorial01/</a></a></p>
<p>I&rsquo;m using Sublime Text 3 to build this app. I was thinking of pycharm, but that would take away too much fun.</p>
<p>By default Django uses SQLlite and I&rsquo;m okay with that.</p>
<p>The basics are there. Let&rsquo;s move to higher ground. The next step can be to design the login page. I&rsquo;m not much of a designer so I&rsquo;ll leave that part to people who care more / understand it better. I&rsquo;m only looking for a simple Login with a username and a password. Nothing fancy. And I&rsquo;m going to use Django&rsquo;s auth system for users: <tt class="xref py py-mod docutils literal"><span class="pre"><a class="reference internal" title="django.contrib.auth: Django's authentication framework." href="https://docs.djangoproject.com/en/1.8/topics/auth/#module-django.contrib.auth" target="_blank">django.contrib.auth</a>.</span></tt></p>
<p>It&rsquo;s pretty good, has lots of features and can auth a user pretty quickly given a username and password, which is all I want for now.</p>
<p>I running a migrate command to create all the necessary tables and data:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">
python manage.py migrate
</code></pre></td></tr></table>
</div>
</div><p>A quick check with sqlite3 and running **.schema **showed me that the tables are indeed created and filled with default data for all the **INSTALLED_APPS **django has at the moment.</p>
<p>I did a quick check with <em>python manage.py runserver</em> and everything seems to work fine.</p>
<h1 id="the-rpg-app">The RPG App</h1>
<h1 id="heading"></h1>
<p>So, that concludes the setup. Following the tutorial, django has this notion of apps and projects. In short, a project is a set of configurations and applications which forms a website. Hence, I&rsquo;m going to create an RPG APP for now. The tutorial continues with a Poll type of App, but I&rsquo;m sure I can apply the same things to a login page.</p>
<p>First, let&rsquo;s create the App using the command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">
python manage.py startapp rpg
</code></pre></td></tr></table>
</div>
</div><p>That creates the skeleton for the app. The tutorial then suggests to define the database first. Which I think is a bad idea; usually when doing design, you don&rsquo;t want to start with the database model. But for now, I shall comply. We want a login page and we are using the auth module, which means, for now, I don&rsquo;t care about the database. Skip.</p>
<p>I&rsquo;m going to go off corse for now, since I only want to create a basic login. For that, I have to read up on views and models a little bit in order to create a simple login page. Be right back.</p>
<p>I&rsquo;m fighting the basic auth system at the moment. Everything seems to be working fine. In the Admin screen I was able to add a basic user to do some debugging, but for now, the login seems to not work with this error:</p>
<p><em>CSRF verification failed. Request aborted</em></p>
<p>This is the CSRF protection which came out with Django. I did a bit of more document reading and setup the CSRF as was described here:</p>
<p><a href="https://docs.djangoproject.com/en/1.8/ref/csrf/" target="_blank"><a href="https://docs.djangoproject.com/en/1.8/ref/csrf/">https://docs.djangoproject.com/en/1.8/ref/csrf/</a></a></p>
<p>However, I&rsquo;m still facing the same problem. Let&rsquo;s research further. Ahh yes. I wasn&rsquo;t returning the request context I&rsquo;ve set up. Before:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python">
<span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render_to_response</span>
<span class="kn">from</span> <span class="nn">django.contrib.auth</span> <span class="kn">import</span> <span class="n">authenticate</span><span class="p">,</span> <span class="n">login</span>
<span class="kn">from</span> <span class="nn">django.template.context_processors</span> <span class="kn">import</span> <span class="n">csrf</span>

<span class="k">def</span> <span class="nf">login_user</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">c</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">c</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">csrf</span><span class="p">(</span><span class="n">request</span><span class="p">))</span>
    <span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;Please log in below...&#34;</span>
    <span class="n">username</span> <span class="o">=</span> <span class="n">password</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">:</span>
        <span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">)</span>
        <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">)</span>

        <span class="n">user</span> <span class="o">=</span> <span class="n">authenticate</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="n">password</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">user</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">is_active</span><span class="p">:</span>
                <span class="n">login</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">user</span><span class="p">)</span>
                <span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;You&#39;re successfully logged in!&#34;</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;Your account is not active, please contact the site admin.&#34;</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;Your username and/or password were incorrect.&#34;</span>

    <span class="k">return</span> <span class="n">render_to_response</span><span class="p">(</span><span class="s1">&#39;auth.html&#39;</span><span class="p">,{</span><span class="s1">&#39;state&#39;</span><span class="p">:</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;username&#39;</span><span class="p">:</span> <span class="n">username</span><span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>After:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render_to_response</span>
<span class="kn">from</span> <span class="nn">django.contrib.auth</span> <span class="kn">import</span> <span class="n">authenticate</span><span class="p">,</span> <span class="n">login</span>
<span class="kn">from</span> <span class="nn">django.template.context_processors</span> <span class="kn">import</span> <span class="n">csrf</span>
<span class="kn">from</span> <span class="nn">django.template</span> <span class="kn">import</span> <span class="n">RequestContext</span>

<span class="k">def</span> <span class="nf">login_user</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;Please log in below...&#34;</span>
    <span class="n">username</span> <span class="o">=</span> <span class="n">password</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">:</span>
        <span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">)</span>
        <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">)</span>

        <span class="n">user</span> <span class="o">=</span> <span class="n">authenticate</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="n">password</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">user</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">is_active</span><span class="p">:</span>
                <span class="n">login</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">user</span><span class="p">)</span>
                <span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;You&#39;re successfully logged in!&#34;</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;Your account is not active, please contact the site admin.&#34;</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">state</span> <span class="o">=</span> <span class="s2">&#34;Your username and/or password were incorrect.&#34;</span>

    <span class="k">return</span> <span class="n">render_to_response</span><span class="p">(</span><span class="s1">&#39;auth.html&#39;</span><span class="p">,{</span><span class="s1">&#39;state&#39;</span><span class="p">:</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;username&#39;</span><span class="p">:</span> <span class="n">username</span><span class="p">},</span> <span class="n">context_instance</span><span class="o">=</span><span class="n">RequestContext</span><span class="p">(</span><span class="n">request</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><p>Notice that now I&rsquo;m returning the request context at the end when I&rsquo;m rendering the response. And lo' and behold, my login is now working.</p>
<h1 id="progress-so-far">Progress so far</h1>
<p> </p>
<p>So, I&rsquo;ve set up a user using the Admin portal accessible from the app / admin. Created my default rpg app, and added my default auth view into a template folder. Configured the URL setting in <strong>urls.py</strong> to look like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="n">url</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;^login/$&#39;</span><span class="p">,</span> <span class="s1">&#39;rpg.views.login_user&#39;</span><span class="p">),</span>
</code></pre></td></tr></table>
</div>
</div><p>Very basic for now, but when I return to it, we are going to clean it up and then continue with implementing the main screen which will greet the user and display some stats about his/her character.</p>
<p>The whole code is under github here =&gt; <a href="https://github.com/Skarlso/myrpg" target="_blank"><a href="https://github.com/Skarlso/myrpg">https://github.com/Skarlso/myrpg</a></a></p>
<p>Bye for now,</p>
<p>And thanks for reading.</p>
<p>Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>Small Python GUI to Calculate Lever Distance</title>
      <link>https://skarlso.github.io/2015/04/10/small-python-gui-to-calculate-lever-distance/</link>
      <pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/04/10/small-python-gui-to-calculate-lever-distance/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>Just a small script which calculates your distance from a lever focal point if you know your weight, the object&rsquo;s weight and the object&rsquo;s and the distance the object has from the focal point of the lever.</p>
<p>Like this:</p>
<p>This script will give you D1. And this is how it will look like in doing so:</p>
<p>So, in order for me (77kg) to lift an object of 80kg which is on a, by default, 1 meter long lever, I have to stand back ~1.03meters. Which is totally cool, right?</p>
<p>Here is the code:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python">
<span class="kn">from</span> <span class="nn">Tkinter</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">ttk</span>

<span class="k">def</span> <span class="nf">calculate</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">your_weight_value</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">your_weight</span><span class="o">.</span><span class="n">get</span><span class="p">())</span>
        <span class="n">object_weight_value</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">object_weight</span><span class="o">.</span><span class="n">get</span><span class="p">())</span>
        <span class="n">object_distance_value</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">object_distance</span><span class="o">.</span><span class="n">get</span><span class="p">())</span>
        <span class="n">your_distance</span><span class="o">.</span><span class="n">set</span><span class="p">((</span><span class="n">object_weight_value</span> <span class="o">*</span> <span class="n">object_distance_value</span><span class="p">)</span> <span class="o">/</span> <span class="n">your_weight_value</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
        <span class="k">pass</span>

<span class="n">root</span> <span class="o">=</span> <span class="n">Tk</span><span class="p">()</span>
<span class="n">root</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s2">&#34;Lever distance counter&#34;</span><span class="p">)</span>

<span class="n">mainframe</span> <span class="o">=</span> <span class="n">ttk</span><span class="o">.</span><span class="n">Frame</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s2">&#34;4 4 12 12&#34;</span><span class="p">)</span>
<span class="n">mainframe</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">W</span><span class="p">,</span> <span class="n">E</span><span class="p">,</span> <span class="n">S</span><span class="p">))</span>
<span class="n">mainframe</span><span class="o">.</span><span class="n">columnconfigure</span><span class="p">(,</span> <span class="n">weight</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">mainframe</span><span class="o">.</span><span class="n">rowconfigure</span><span class="p">(,</span> <span class="n">weight</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">your_weight</span> <span class="o">=</span> <span class="n">StringVar</span><span class="p">()</span>
<span class="n">object_weight</span> <span class="o">=</span> <span class="n">StringVar</span><span class="p">()</span>
<span class="n">object_distance</span> <span class="o">=</span> <span class="n">StringVar</span><span class="p">()</span>
<span class="n">your_distance</span> <span class="o">=</span> <span class="n">StringVar</span><span class="p">()</span>

<span class="n">object_distance</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>

<span class="n">your_weight_entry</span> <span class="o">=</span> <span class="n">ttk</span><span class="o">.</span><span class="n">Entry</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">7</span><span class="p">,</span> <span class="n">textvariable</span><span class="o">=</span><span class="n">your_weight</span><span class="p">)</span>
<span class="n">your_weight_entry</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="p">(</span><span class="n">W</span><span class="p">,</span> <span class="n">E</span><span class="p">))</span>
<span class="n">object_weight_entry</span> <span class="o">=</span> <span class="n">ttk</span><span class="o">.</span><span class="n">Entry</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">7</span><span class="p">,</span> <span class="n">textvariable</span><span class="o">=</span><span class="n">object_weight</span><span class="p">)</span>
<span class="n">object_weight_entry</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="p">(</span><span class="n">W</span><span class="p">,</span> <span class="n">E</span><span class="p">))</span>
<span class="n">object_distance_entry</span> <span class="o">=</span> <span class="n">ttk</span><span class="o">.</span><span class="n">Entry</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">7</span><span class="p">,</span> <span class="n">textvariable</span><span class="o">=</span><span class="n">object_distance</span><span class="p">)</span>
<span class="n">object_distance_entry</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="p">(</span><span class="n">W</span><span class="p">,</span> <span class="n">E</span><span class="p">))</span>


<span class="n">ttk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">textvariable</span><span class="o">=</span><span class="n">your_distance</span><span class="p">)</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="p">(</span><span class="n">W</span><span class="p">,</span> <span class="n">E</span><span class="p">))</span>
<span class="n">ttk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s2">&#34;Your weight&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">W</span><span class="p">)</span>
<span class="n">ttk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s2">&#34;Object weight&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">W</span><span class="p">)</span>
<span class="n">ttk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s2">&#34;Object Distance&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">W</span><span class="p">)</span>
<span class="n">ttk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s2">&#34;Your Distance&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">W</span><span class="p">)</span>

<span class="n">ttk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s2">&#34;kg&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">W</span><span class="p">)</span>
<span class="n">ttk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s2">&#34;kg&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">W</span><span class="p">)</span>
<span class="n">ttk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s2">&#34;m&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">W</span><span class="p">)</span>
<span class="n">ttk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s2">&#34;m&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">W</span><span class="p">)</span>

<span class="n">ttk</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="n">mainframe</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s2">&#34;Calculate&#34;</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">calculate</span><span class="p">)</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">W</span><span class="p">)</span>

<span class="k">for</span> <span class="n">child</span> <span class="ow">in</span> <span class="n">mainframe</span><span class="o">.</span><span class="n">winfo_children</span><span class="p">():</span> <span class="n">child</span><span class="o">.</span><span class="n">grid_configure</span><span class="p">(</span><span class="n">padx</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>

<span class="n">your_weight_entry</span><span class="o">.</span><span class="n">focus</span><span class="p">()</span>
<span class="n">root</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">calculate</span><span class="p">)</span>

<span class="n">root</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>Please enjoy, and feel free to alter in any way. I&rsquo;m using Tkinter and a grid layout which I find very easy to work with.</p>
<p>Thanks for reading,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Python and my Math commitment</title>
      <link>https://skarlso.github.io/2015/03/15/python-and-my-math-commitment/</link>
      <pubDate>Sun, 15 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/03/15/python-and-my-math-commitment/</guid>
      <description><![CDATA[<p>Let&rsquo;s talk about plans. It&rsquo;s good to have one. For example, I have a plan for this year.</p>
<p>I kind of like math. So, I have this book:</p>
<p>It&rsquo;s 1400 pages long and basically, has everything in it. It&rsquo;s a rather exhaustive book. Hence, my plan is to finish the book by the end of 2015 and write a couple of python scripts that calculate something interesting.</p>
<p>(2021 Hindsight): Yeah, I didn&rsquo;t manage this&hellip; But it&rsquo;s a cool idea, let&rsquo;s see if I can get around coming further. I managed to get until 500 pages or so, before life stepped in.</p>
<p>For example, Newton&rsquo;s law of cooling how I learned it is:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">k*log(2.5)*((t(0)-k)/(t-k))
</code></pre></td></tr></table>
</div>
</div><p>Where k =&gt; a material&rsquo;s surface based constant. T(0) =&gt; initial temperature. T =&gt; target temperature. K =&gt; Environment&rsquo;s temperature.</p>
<p>A simple python script for this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python">
<span class="c1"># Calculating Newton&#39;s law of Cooling</span>
<span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">division</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">log</span>

<span class="k">def</span> <span class="nf">calculation</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">Tz</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">K</span><span class="p">):</span>
	<span class="n">res</span> <span class="o">=</span> <span class="p">(</span><span class="n">Tz</span> <span class="o">-</span> <span class="n">K</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">T</span> <span class="o">-</span> <span class="n">K</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">k</span> <span class="o">*</span> <span class="p">(</span><span class="n">log</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="mf">2.5</span><span class="p">))</span>

<span class="n">k</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">Tz</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
<span class="n">T</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
<span class="n">K</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>

<span class="k">print</span><span class="p">(</span><span class="s2">&#34;Calculating aproximate temperature for given parameters: k=</span><span class="si">%s</span><span class="s2">, Tz=</span><span class="si">%s</span><span class="s2">C, T=</span><span class="si">%s</span><span class="s2">C, K=</span><span class="si">%s</span><span class="s2">C&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">Tz</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">K</span><span class="p">))</span>

<span class="k">print</span><span class="p">(</span><span class="n">calculation</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="n">k</span><span class="p">),</span> <span class="nb">float</span><span class="p">(</span><span class="n">Tz</span><span class="p">),</span> <span class="nb">float</span><span class="p">(</span><span class="n">T</span><span class="p">),</span> <span class="nb">float</span><span class="p">(</span><span class="n">K</span><span class="p">)))</span>
</code></pre></td></tr></table>
</div>
</div><p>Enjoy.</p>
<p>And as always,
Thanks for reading!</p>
]]></description>
    </item>
    
    <item>
      <title>Sphere Judge Online – Python Kivy Android app – Part 2</title>
      <link>https://skarlso.github.io/2015/03/02/sphere-judge-online-python-kivy-android-app-part-2/</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/03/02/sphere-judge-online-python-kivy-android-app-part-2/</guid>
      <description><![CDATA[<p>Here we are again. I will attempt to further this little journey of mine into the land of Android and Python.</p>
<p>This is the second part of the advanture you can read the first one a little bit back.</p>
<h1 id="the-script">The Script</h1>
<p>We left off at a point where I successfully configured my environment and compiled my first hello world APK. At that point it took a little bit fiddling to get it to work on my phone.</p>
<p>Now, I have progressed a little bit into spoj&rsquo;s page parsing. The code so far is as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python">
<span class="n">__author__</span> <span class="o">=</span> <span class="s1">&#39;hannibal&#39;</span>

<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">randint</span>
<span class="kn">import</span> <span class="nn">lxml.html</span> <span class="kn">as</span> <span class="nn">lh</span>

<span class="n">random_page_number</span> <span class="o">=</span> <span class="n">randint</span><span class="p">(,</span> <span class="mi">63</span><span class="p">)</span> <span class="c1"># 63 being the maximum page number at spoj</span>
<span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;http://www.spoj.com/problems/classical/sort=0,start=</span><span class="si">%d</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="n">random_page_number</span> <span class="o">*</span> <span class="mi">50</span> <span class="o">-</span> <span class="mi">50</span><span class="p">))</span>
<span class="c1"># Problem Div XPath =&gt; //[@class=&#34;problems&#34;]</span>

<span class="n">spoj_page</span> <span class="o">=</span> <span class="n">lh</span><span class="o">.</span><span class="n">document_fromstring</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
<span class="n">links_to_problems</span> <span class="o">=</span> <span class="n">spoj_page</span><span class="p">[]</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s2">&#34;//tr[@class=&#39;problemrow&#39;]/td[2]/a&#34;</span><span class="p">)</span>

<span class="n">current_link</span> <span class="o">=</span> <span class="n">links_to_problems</span><span class="p">[</span><span class="n">randint</span><span class="p">(,</span> <span class="nb">len</span><span class="p">(</span><span class="n">links_to_problems</span><span class="p">))]</span>
<span class="k">print</span><span class="p">(</span><span class="n">current_link</span><span class="o">.</span><span class="n">attrib</span><span class="p">[</span><span class="s1">&#39;href&#39;</span><span class="p">])</span>
<span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;http://www.spoj.com/</span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">current_link</span><span class="o">.</span><span class="n">attrib</span><span class="p">[</span><span class="s1">&#39;href&#39;</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&#34;utf-8&#34;</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><p>This is pretty straight forward so far. It gets the problems page, loads in all of the links and prints it out.</p>
<p>My goal is an application which looks something like this:</p>
<p>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>___</p>
<p>|   _<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>  |</p>
<p>|  |                                                                           | |</p>
<p>|  |                                                                           | |</p>
<p>|  |                    Display Problem Description               | |</p>
<p>|  |                                                                           | |</p>
<p>|  |                                                                           | |</p>
<p>|  |                                                                           | |</p>
<p>|  |_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_____ | |</p>
<p>|                                                                                 |</p>
<p>|                                                                                 |</p>
<p>|                         Button:Finish Problem                        |</p>
<p>|                                                                                 |</p>
<p>|                         Button:Next Problem                          |</p>
<p>|_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>________ |</p>
<p>It&rsquo;s very basic. When it loads up, it will gather and display a new problem. You have two options, either get a new one, or save / finish this item, saying you never want to see it again.</p>
<p>Let&rsquo;s put the first part into an android app. Just gather data, and get it disaplyed.</p>
<p>*Queue a days worth of hacking and frustrated cussing.*</p>
<p>So, turns out it&rsquo;s not as easy as I would have liked it to be. I ran into some pretty nasty problems. Some of them I&rsquo;ll write down below for the record, and an attempted solution as well.</p>
<h1 id="problems">Problems</h1>
<p><strong>#1:</strong> <strong>Problem:</strong> Libraries. I&rsquo;m using lxml and requests. Requests is a pure python library, but lxml is partially C. Which apparently is not very well supported yet.</p>
<p><strong>Solution (Partial):</strong> I could optain request by two ways, but the most simple one, was basically just building my distribution with the optional requests module like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">
./distribute.sh -m &#34;openssl pil requests kivy&#34;
</code></pre></td></tr></table>
</div>
</div><p>Attempting to do the same with LXML resulted in a compile issue which I tracked down to something like: &ldquo;sorry, but we don&rsquo;t support OSX&rdquo;. But it&rsquo;s okay. There are other ways to parse an html page, I just really like the xpath filter. So I soldiered on with trying to get something to work at least.</p>
<p><strong>#3: Problem:</strong> <em>Bogus compile time exception.</em> There were some exceptions on the way when I was trying to compile with buildozer. <strong>Solution:</strong> It&rsquo;s interesting because previously my solution to another compile time issue was to use a specific version of Cython. But this time the solution was to actually remove that version and install the latest one. Which is 0.22 as of the time of this writing. So:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">
sudo pip update cython
</code></pre></td></tr></table>
</div>
</div><p><strong>#2: Problem:</strong> Connection. So now, I&rsquo;m down to the bare bone. At this point, I just want to see a page source in a label. My code looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python">
<span class="kn">import</span> <span class="nn">kivy</span>
<span class="n">kivy</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="s1">&#39;1.8.0&#39;</span><span class="p">)</span>
<span class="kn">from</span> <span class="nn">kivy.lang</span> <span class="kn">import</span> <span class="n">Builder</span>
<span class="kn">from</span> <span class="nn">kivy.uix.gridlayout</span> <span class="kn">import</span> <span class="n">GridLayout</span>
<span class="kn">from</span> <span class="nn">kivy.properties</span> <span class="kn">import</span> <span class="n">NumericProperty</span>
<span class="kn">from</span> <span class="nn">kivy.app</span> <span class="kn">import</span> <span class="n">App</span>

<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">randint</span>
<span class="c1"># import lxml.html as lh</span>

<span class="c1"># import sys</span>
<span class="c1"># sys.path.append(&#39;/sdcard/com.googlecode.pythonforandroid/extras/python/site-packages&#39;)</span>


<span class="n">Builder</span><span class="o">.</span><span class="n">load_string</span><span class="p">(</span><span class="s1">&#39;&#39;&#39;
</span><span class="s1">:
</span><span class="s1">    cols: 1
</span><span class="s1">    Label:
</span><span class="s1">        text: root.get_problem()
</span><span class="s1">    Button:
</span><span class="s1">        text: &#39;Click me! </span><span class="si">%d</span><span class="s1">&#39; </span><span class="si">% r</span><span class="s1">oot.counter
</span><span class="s1">        on_release: root.my_callback()
</span><span class="s1">&#39;&#39;&#39;</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">SpojAppScreen</span><span class="p">(</span><span class="n">GridLayout</span><span class="p">):</span>
    <span class="n">counter</span> <span class="o">=</span> <span class="n">NumericProperty</span><span class="p">()</span>
    <span class="k">def</span> <span class="nf">my_callback</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span> <span class="s1">&#39;The button has been pushed&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">def</span> <span class="nf">get_problem</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">random_page_number</span> <span class="o">=</span> <span class="n">randint</span><span class="p">(,</span> <span class="mi">63</span><span class="p">)</span> <span class="c1"># 63 being the maximum page number at spoj</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;http://www.spoj.com/problems/classical/sort=0,start=</span><span class="si">%d</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="n">random_page_number</span> <span class="o">*</span> <span class="mi">50</span> <span class="o">-</span> <span class="mi">50</span><span class="p">))</span>

        <span class="c1"># Problem Div XPath =&gt; //[@class=&#34;problems&#34;]</span>

        <span class="c1"># spoj_page = lh.document_fromstring(r.text)</span>
        <span class="c1"># links_to_problems = spoj_page[0].xpath(&#34;//tr[@class=&#39;problemrow&#39;]/td[2]/a&#34;)</span>

        <span class="c1"># current_link = links_to_problems[randint(0, len(links_to_problems))]</span>
        <span class="c1"># print(current_link.attrib[&#39;href&#39;])</span>
        <span class="c1"># r = requests.get(&#34;http://www.spoj.com/%s&#34; % current_link.attrib[&#39;href&#39;])</span>
        <span class="c1"># print(r.text.encode(&#34;utf-8&#34;))</span>
        <span class="k">return</span> <span class="n">r</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">SpojApp</span><span class="p">(</span><span class="n">App</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">SpojAppScreen</span><span class="p">()</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">SpojApp</span><span class="p">()</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>However, running this results in a connection error in adb logcat:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">
I/python  (27610):  kivy.lang.BuilderException: Parser: File &#34;&#34;, line 5:
I/python  (27610):  ...
I/python  (27610):        3:    cols: 1
I/python  (27610):        4:    Label:
I/python  (27610):  &amp;gt;&amp;gt;    5:        text: root.get_problem()
I/python  (27610):        6:    Button:
I/python  (27610):        7:        text: &#39;Click me! %d&#39; % root.counter
I/python  (27610):  ...
I/python  (27610):  BuilderException: Parser: File &#34;&#34;, line 5:
I/python  (27610):  ...
I/python  (27610):        3:    cols: 1
I/python  (27610):        4:    Label:
I/python  (27610):  &amp;gt;&amp;gt;    5:        text: root.get_problem()
I/python  (27610):        6:    Button:
I/python  (27610):        7:        text: &#39;Click me! %d&#39; % root.counter
I/python  (27610):  ...
I/python  (27610):  ConnectionError: (&#39;Connection aborted.&#39;, gaierror(4, &#39;non-recoverable failure in name resolution.&#39;))
</code></pre></td></tr></table>
</div>
</div><p><strong>Solution:</strong> I tried simply putting out a random number at some point, which actullay worked, so I know it&rsquo;s the connection. I&rsquo;m guessing I need permission to access the network. Which would be this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">
uses-permission android:name=&#34;android.permission.INTERNET&#34;
</code></pre></td></tr></table>
</div>
</div><p>And yes! Building and installing it with this additional permission got me so far as I can display the web page&rsquo;s content in a label.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">
<span class="p">.</span><span class="o">/</span><span class="nx">build</span><span class="p">.</span><span class="nx">py</span> <span class="o">--</span><span class="kn">package</span> <span class="nx">org</span><span class="p">.</span><span class="nx">spoj</span> <span class="o">--</span><span class="nx">permission</span> <span class="nx">INTERNET</span> <span class="o">--</span><span class="nx">name</span> <span class="s">&#34;Spoj&#34;</span> <span class="o">--</span><span class="nx">version</span> <span class="mf">1.0</span> <span class="o">--</span><span class="nx">dir</span> <span class="o">/</span><span class="nx">Users</span><span class="o">/</span><span class="nx">hannibal</span><span class="o">/</span><span class="nx">PythonProjects</span><span class="o">/</span><span class="nx">spoj</span><span class="o">/</span> <span class="nx">debug</span>
</code></pre></td></tr></table>
</div>
</div><p>There is a saying that you should end on a high note, so that is what I&rsquo;m going to do here right now. Join me next time, when I&rsquo;ll try to replace lxml with something else.</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Sphere Judge Online – Python Kivy Android app</title>
      <link>https://skarlso.github.io/2015/02/26/sphere-judge-online-python-kivy-android-app/</link>
      <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/02/26/sphere-judge-online-python-kivy-android-app/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>Today I would like to take you on a journey I fought myself through in order to write a python android app, which gets you a random problem from <a href="http://www.spoj.com/problems/classical/" target="_blank">Sphere Judge Online</a>. Then you can mark it as solved and it will be stored as such, and you can move on to the next problem. With the words of Neil deGrasse Tyson, Come with Me!</p>
<h1 id="beginnings">Beginnings</h1>
<p>When I first embarked on this endeavour I ran into numerous errors, many amongst them being compilation issues when I was trying to install libraries.</p>
<p>I started to write down all of these, and then started fresh on a new machine. I realised that ALL of my problems where only because of **ONE **thing. One thing, which I wanted to do, but it ended up being the death of me. And that is.. *Drummrolls* **Python 3. **I tried doing all the things that I started to do, with Python 3. Turns out, that neither libraries are supporting it very well yet. And that&rsquo;s including Cython as well, which I thought would be up to speed by now. But sadly, it&rsquo;s not.</p>
<h1 id="prerequisite">Prerequisite</h1>
<p>In order to go any further we need a few things first. For this to work, you&rsquo;ll have to perform these things in order as I found out later. And certain versions of certain libraries are required instead of the latest ones.</p>
<p>Depending on the environment you are using, you need to install python-dev and some other graphic libraries. I followed this and that was fine. Latest packages are working alright.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo apt-get install build-essential patch git-core ccache ant python-pip python-dev
sudo apt-get install ia32-libs  libc6-dev-i386
sudo apt-get install lib32stdc++6 lib32z1
</code></pre></td></tr></table>
</div>
</div><p>Only install these if you are absolutely certain you need them.</p>
<p>Clone python-android from git into a nice and cosy directory.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">git clone https://github.com/kivy/python-for-android.git
</code></pre></td></tr></table>
</div>
</div><p>While this is underway, for python-android you also need <a href="http://developer.android.com/sdk/index.html#Other" target="_blank">android-sdk</a> and <a href="https://developer.android.com/tools/sdk/ndk/index.html" target="_blank">android-ndk</a>. Select the ones which are for your environment. The NDK is needed in order to build the APK out of our python code later on.</p>
<p>After you are done, run ./android and install tools, APIs and other things you want. Make sure you have these set up:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">export ANDROIDSDK=/path/to/android-sdk
export ANDROIDNDK=/path/to/android-ndk
export ANDROIDNDKVER=rX
export ANDROIDAPI=X
export PATH=$ANDROIDNDK:$ANDROIDSDK/platform-tools:$ANDROIDSDK/tools:$PATH
</code></pre></td></tr></table>
</div>
</div><p>The API version needs to be the one which you installed on your machine.</p>
<p>Now, we have to get a specific version of Cython. In order to do that, execute the following command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo pip install -I https://pypi.python.org/packages/source/C/Cython/Cython-0.20.1.tar.gz
</code></pre></td></tr></table>
</div>
</div><p>Source your new .bash_profile file if you haven&rsquo;t done so already.</p>
<p>At this point we are ready to install Kivy. Please follow the instructions for your environment on the respective page from Kivy&rsquo;s documentation:</p>
<p><a href="http://kivy.org/docs/installation/installation.html" target="_blank"><a href="http://kivy.org/docs/installation/installation.html">http://kivy.org/docs/installation/installation.html</a></a></p>
<p><strong>Note</strong>: For Mac users. In addition, before doing the kivy stuff, and if you would like to execute kivy applications on your mac, you need to install pygame.</p>
<p>It&rsquo;s a bit of a hassle but you only need to perform these commands:</p>
<p>Install Quartz =&gt; <a href="http://xquartz.macosforge.org/landing/" target="_blank"><a href="http://xquartz.macosforge.org/landing/">http://xquartz.macosforge.org/landing/</a></a></p>
<p>Install Homebrew =&gt; <span style="color: #ff9900;">ruby -e &ldquo;$(curl -fsSL <a href="https://raw.github.com/Homebrew/homebrew/go/install)%22">https://raw.github.com/Homebrew/homebrew/go/install)&quot;</a></span></p>
<p>Install some other packages =&gt; <span style="color: #ff9900;">brew install hg sdl sdl_image sdl_mixer sdl_ttf portmidi</span></p>
<p>Install pygame =&gt; <span style="color: #ff9900;">pip install hg+http://bitbucket.org/pygame/pygame</span></p>
<p>Once this finishes, you should be good to go for the final command in the prerequisites. Go to your cloned python-android folder and run this (make sure you have ANT installed):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">./distribute.sh -m &#34;openssl pil kivy&#34;
</code></pre></td></tr></table>
</div>
</div><p>Now we are ready for some coding.</p>
<h1 id="implementation">Implementation</h1>
<p>So, finally after our environment is all setup, we can move on to write some python code. Let&rsquo;s start with a simple hello world application:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">kivy</span>
<span class="n">kivy</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="s1">&#39;1.8.0&#39;</span><span class="p">)</span> <span class="c1"># 1.8.0 is the latest kivy version</span>
<span class="kn">from</span> <span class="nn">kivy.lang</span> <span class="kn">import</span> <span class="n">Builder</span>
<span class="kn">from</span> <span class="nn">kivy.uix.gridlayout</span> <span class="kn">import</span> <span class="n">GridLayout</span>
<span class="kn">from</span> <span class="nn">kivy.properties</span> <span class="kn">import</span> <span class="n">NumericProperty</span>
<span class="kn">from</span> <span class="nn">kivy.app</span> <span class="kn">import</span> <span class="n">App</span>

<span class="n">Builder</span><span class="o">.</span><span class="n">load_string</span><span class="p">(</span><span class="s1">&#39;&#39;&#39;
</span><span class="s1">:
</span><span class="s1">    cols: 1
</span><span class="s1">    Label:
</span><span class="s1">        text: &#39;Welcome to the Hello world&#39;
</span><span class="s1">    Button:
</span><span class="s1">        text: &#39;Click me! </span><span class="si">%d</span><span class="s1">&#39; </span><span class="si">% r</span><span class="s1">oot.counter
</span><span class="s1">        on_release: root.my_callback()
</span><span class="s1">&#39;&#39;&#39;</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">HelloWorldScreen</span><span class="p">(</span><span class="n">GridLayout</span><span class="p">):</span>
    <span class="n">counter</span> <span class="o">=</span> <span class="n">NumericProperty</span><span class="p">()</span>
    <span class="k">def</span> <span class="nf">my_callback</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span> <span class="s1">&#39;The button has been pushed&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">class</span> <span class="nc">HelloWorldApp</span><span class="p">(</span><span class="n">App</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">HelloWorldScreen</span><span class="p">()</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">HelloWorldApp</span><span class="p">()</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>This is a simple Hello World python-android app. Save this into a file called <span style="color: #ff9900;">main.py</span>. Main.py is used to execute the app on your phone. It&rsquo;s your entry point. Whatever app you are writing, this has to be where it will begin.</p>
<p>In order to get this installed on our device, we will use python-android&rsquo;s distribution.sh. The command to run after you changed directory into python-android is this (make sure that you have a compatible android device plugged in and in developer mode):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">
<span class="p">.</span><span class="o">/</span><span class="nx">build</span><span class="p">.</span><span class="nx">py</span> <span class="o">--</span><span class="kn">package</span> <span class="nx">org</span><span class="p">.</span><span class="nx">hello</span><span class="p">.</span><span class="nx">world</span> <span class="o">--</span><span class="nx">name</span> <span class="s">&#34;Hello world&#34;</span> <span class="o">--</span><span class="nx">version</span> <span class="mf">1.0</span> <span class="o">--</span><span class="nx">dir</span> <span class="o">/</span><span class="nx">PATH</span><span class="o">/</span><span class="nx">TO</span><span class="o">/</span><span class="nx">helloworld</span> <span class="nx">debug</span> <span class="nx">installd</span>
</code></pre></td></tr></table>
</div>
</div><p>Upon success, you should see it on your device. This is how the hello world app looks like:</p>
<h1 id="finishing-up">Finishing up</h1>
<p>This has been quite the ride so far. We will continue our journey when I&rsquo;ll start writing my own app for SPOJ.</p>
<p>Thanks for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Building an RPG App with Meteor – Part One – The struggle</title>
      <link>https://skarlso.github.io/2015/02/01/building-an-rpg-app-with-meteor-part-one-the-struggle/</link>
      <pubDate>Sun, 01 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/02/01/building-an-rpg-app-with-meteor-part-one-the-struggle/</guid>
      <description><![CDATA[<p>In my previous post, I was getting ready to enjoy some time with the JavaScript web framework Meteor.</p>
<p>This time I would like to bring it to a bit of overdrive. See, how re-factoring works on a larger scale model with multiple pages. And how it can organize assets, such as, images, multiple CSS, some plugins, you know, ordinary web stuff.</p>
<p>Let&rsquo;s dive in.</p>
<p>I&rsquo;m planning this to be a series of posts as I&rsquo;m going along building up my RPG app. Let&rsquo;s define the rules.</p>
<h1 id="in-the-beginning">In the beginning</h1>
<h3 id="heading"></h3>
<h3 id="rules">Rules</h3>
<p> </p>
<h4 id="inventory">Inventory</h4>
<p> </p>
<p>Our main character will have a basic inventory. He will have space to carry stuff around and a body to put stuff on. One ring on each hand, one weapon in each hand, helmet, armour, legs, and a necklace. That&rsquo;s it. For simplicities sake. The game mechanics will be like those old books which you could play, Fighting RPG Books, like the one Ian Livingstone was writing. This is one of my favourites; Robot commando:</p>
<h4 id="stats">Stats</h4>
<p>A very basic stat system.</p>
<ul>
<li>Strength</li>
<li>Agility</li>
<li>Constitution</li>
<li>Intelligence</li>
<li>Magic</li>
</ul>
<p> </p>
<h4 id="fighting">Fighting</h4>
<p> </p>
<p>A very basic fighting system with the possibility of casting magic which, for simplicity, will count as attacks and can be dodged based on agility.</p>
<p>Let&rsquo;s say we have dice throwing with a couple of 6 sided ones. So X * 6 sided dice. Dodging will require agility, HP is defined by constitution, Intelligence will help in puzzles which require a throw against intelligence, Magic will define Mana Points.</p>
<p>Simple, right?</p>
<h3 id="design">Design</h3>
<p>I&rsquo;m not much of a front-end developer, so I don&rsquo;t really care about how it will look like. I&rsquo;ll try to squeeze in some very basic stuff, like ordering, but that&rsquo;s it.</p>
<h3 id="game-play">Game Play</h3>
<p> </p>
<p>Basically there will be a story which can be loaded threw a JSON structured file. The file will hold information about what a current page has. The probable things a page can contain at any given time:</p>
<ul>
<li>Current location description</li>
<li>Selectable proceed location ( page number )</li>
<li>Enemy -&gt; Fight ( Might contain an option to not to attack the beast )</li>
<li>Riddle -&gt; Solving it is determined by a throw against intelligence</li>
<li>Trap -&gt; Springing it is determined by a throw against agility</li>
<li>Lootable items</li>
<li>Death</li>
</ul>
<p>All of the above define an action that a player can, or HAS to take. If there is no ability to choose the player has to proceed as the page requests it. That might be easier to do if I just say if there is only one possible choose it&rsquo;s choosen automatically for you.</p>
<h1 id="implementation">Implementation</h1>
<p> </p>
<p>I&rsquo;ll be using Meteor which is based on Node and MongoDB. Hence, my stuff will be in mongoDB. I have a fair knowledge of how mongodb works, I&rsquo;ll write down my progress as I go along.</p>
<p>Everything I&rsquo;ll do is of course under version control and can be followed here:</p>
<p><a href="https://github.com/Skarlso/coolrpgapp" target="_blank"><a href="https://github.com/Skarlso/coolrpgapp">https://github.com/Skarlso/coolrpgapp</a></a></p>
<h4 id="character">Character</h4>
<p> </p>
<p>I need to be able to create a character with a name. Meaning, I need to figure out how meteor handles input. I already know that it uses templates and <a href="https://github.com/meteor/meteor/blob/devel/packages/spacebars/README.md" target="_blank">Spacebars Compiler</a>. So what I want at this point is to enter a username and then click a button which will direct me to the story page. Simple, right.?</p>
<p>For data handling we will use Meteor&rsquo;s <a href="https://www.meteor.com/try/3" target="_blank">Collections</a>.</p>
<p>Using a form to submit the username looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript">
<span class="nx">Usernames</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Mongo</span><span class="p">.</span><span class="nx">Collection</span><span class="p">(</span><span class="s2">&#34;usernames&#34;</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">Meteor</span><span class="p">.</span><span class="nx">isClient</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">Template</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">events</span><span class="p">({</span>
    <span class="s2">&#34;submit .new-user&#34;</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// This function is called when the new task form is submitted
</span><span class="c1"></span>
      <span class="kd">var</span> <span class="nx">username</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">username</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>

      <span class="nx">Usernames</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span>
        <span class="nx">username</span><span class="o">:</span> <span class="nx">username</span><span class="p">,</span>
        <span class="nx">createdAt</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span> <span class="c1">// current time
</span><span class="c1"></span>      <span class="p">});</span>

      <span class="c1">// Clear form
</span><span class="c1"></span>      <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">username</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="p">;</span>

      <span class="c1">// Prevent default form submit
</span><span class="c1"></span>      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">Meteor</span><span class="p">.</span><span class="nx">isServer</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">Meteor</span><span class="p">.</span><span class="nx">startup</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// code to run on server at startup
</span><span class="c1"></span>  <span class="p">});</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Of course there is no way to know if that actually succeeded so far unless I get a look at the DB. Navigate to the folder of your app and type in:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">meteor mongo
</code></pre></td></tr></table>
</div>
</div><p>This will open a console to your database where you can query it like you would normally do with a mongodb console. Hence for me it&rsquo;s:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">
db.usernames.find<span class="o">()</span> <span class="c1"># which return this -&gt;</span>
meteor:PRIMARY&gt;<span class="p">;</span> db.usernames.find<span class="o">()</span>
<span class="o">{</span> <span class="s2">&#34;username&#34;</span> : <span class="s2">&#34;olaf&#34;</span>, <span class="s2">&#34;createdAt&#34;</span> : ISODate<span class="o">(</span><span class="s2">&#34;2015-02-01T16:58:24.100Z&#34;</span><span class="o">)</span>, <span class="s2">&#34;_id&#34;</span> : <span class="s2">&#34;MS67d95ShFkc3yHiX&#34;</span> <span class="o">}</span>
<span class="o">{</span> <span class="s2">&#34;username&#34;</span> : <span class="s2">&#34;skarlso&#34;</span>, <span class="s2">&#34;createdAt&#34;</span> : ISODate<span class="o">(</span><span class="s2">&#34;2015-02-01T16:59:18.792Z&#34;</span><span class="o">)</span>, <span class="s2">&#34;_id&#34;</span> : <span class="s2">&#34;ig8DJngmGKLca2dqS&#34;</span> <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>As you can see, I already have two characters in the system. This is so far very easy but it does not redirect me to a new page displaying the beginning of my journey. Let&rsquo;s try a redirect.</p>
<h1 id="complications">Complications</h1>
<p>Turns out it&rsquo;s not that easy to get a redirect going. If I would be a beginner at this, I would give up right now and move on. The guide, or the tutorial does not contain any HINTS at least that I have to use a different method if I want a multi-layered multi-paged app. Of course Meteor provides a built in, easy to use, easy to add, answer-to-everything-you-ever-would-want-to-do, Login feature. But guys, it&rsquo;s not useful. I would go as far as say it&rsquo;s completely useless. Do you actually know someone who uses it? I would never use a built in something which is completely hidden from me and have no idea what it does. The ability to control what&rsquo;s happening is THE most important thing in every developers life.</p>
<p>So after I did a bit of digging and StackOverflowing ( which replaces the tutorial AND the user guide (and is a trademarked expression)), I found out that you can add <a href="https://atmospherejs.com/cmather/iron-router" target="_blank">Iron-Router</a> which was built specifically for this purpose.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">meteor add iron:router
</code></pre></td></tr></table>
</div>
</div><p>So all of a sudden my Page is completely screwed up with Iron Router information. Again, there is no information on this on Meteors page or in the guide nor in the COMPLETE guide so, I&rsquo;m left Googling.</p>
<p>A very helpful StackOverflow ( again, and I&rsquo;m wondering why people don&rsquo;t bother with the guide in the first place just go to stackoverflow straight ) answer explains to me the following:</p>
<p>&ldquo;<em>You have to define a subscription handle (an object returned by Meteor.subscribe) in order to use it&rsquo;s reactive ready method : we&rsquo;ll reference it in the myDataIsReady helper to track data availability, and the helper will automatically rerun when the state of ready changes.</em>&rdquo;</p>
<p>Okay, so subscriptions are mentioned in the SECURITY section of the guide regarding detecting specific users and private data and so on and so forth. All right so that&rsquo;s used by iron routing as well which means I have to build that in, and not to mention first of all understanding how Iron Router works.</p>
<p>I&rsquo;m going to stop here now. After spending a couple of hours I can determine that this stuff is not intuitive and &ldquo;easy&rdquo;. I don&rsquo;t know enough about JavaScript and redirecting and Iron Router to be able to use Meteor out of the box. Which means I have to educate myself a bit before returning to this stuff.</p>
<p>Stay tuned for more.</p>
<p>And as always,
Thanks for reading!</p>]]></description>
    </item>
    
    <item>
      <title>JavaScript Web Framework – Meteor</title>
      <link>https://skarlso.github.io/2015/01/29/javascript-web-framework-meteor/</link>
      <pubDate>Thu, 29 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/01/29/javascript-web-framework-meteor/</guid>
      <description><![CDATA[<p>Hi,</p>
<p>This time I would like to write about something that interests me. I wanted to try out a pure JavaScript web framework.</p>
<p>My choice is: <a href="https://www.meteor.com/" target="_blank">Meteor</a>. Looks interesting enough and it was recommended by a friend of mine. So, let&rsquo;s dive in.</p>
<h4 id="installation"><strong>Installation</strong></h4>
<p>As always, one starts with installation. The page tells us to follow this simple step:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">curl https://install.meteor.com/ | sh
</code></pre></td></tr></table>
</div>
</div><p>Easy enough, when you are on Linux. Turns out, that there is no official release yet for Windows. I&rsquo;m in luck then. After running the command though, I saw this popping up into my face:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">curl: (60) Peer certificate cannot be authenticated with known CA certificates
More details here: http://curl.haxx.se/docs/sslcerts.html
</code></pre></td></tr></table>
</div>
</div><p>There is always something. in that case a more accurate command to use would be the following:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">curl -k https://install.meteor.com/ | sh
</code></pre></td></tr></table>
</div>
</div><p>This will force an insecure download. You might not face this issue, but just in case you do, use this command instead.</p>
<p>Branching off here. For those of you whom the curl didn&rsquo;t work because you are sitting behind a proxy you can specify a -proxy  protocol//username:password@proxy:port after your curl. Of course if that doesn&rsquo;t work then the script won&rsquo;t work either.</p>
<p>So open the script in one of your favourite editors, for me it&rsquo;s Sublime text, and find this line: &ldquo;<em>Downloading Meteor distribution</em>&rdquo;. Lo, and behold; it uses curl. This is the only one in the script, so just edit it by adding in your -proxy setting as before and you should be right on track.</p>
<p>If that still gives you problems, try this:</p>
<p>Assuming that your browser is set up correctly with the proxy and just command line commands aren&rsquo;t working, you can go to this URL defined by the variable TARBALL_URL:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">TARBALL_URL=&#34;https://d3sqy0vbqsdhku.cloudfront.net/packages-bootstrap/${RELEASE}/meteor-bootstrap-${PLATFORM}.tar.gz&#34;
</code></pre></td></tr></table>
</div>
</div><p>Note that there are two variables in there. For me these are:</p>
<p>RELEASE: 1.0.3.1</p>
<p>PLATFORM: os.linux.x86_64</p>
<p>The full URL is:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">https://d3sqy0vbqsdhku.cloudfront.net/packages-bootstrap/1.0.3.1/meteor-bootstrap-os.linux.x86_64.tar.gz
</code></pre></td></tr></table>
</div>
</div><p>Download the latest tarball and delete the CURL AND TAR command on the following line. After that, you just have to extract the tarball and move the directory to ~/.meteor.</p>
<p>Now you can run your sh again and you should be on the road, for sure this time.</p>
<p>Just to make sure, these are the line which you need to comment out:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">
<span class="c1"># If you already have a tropohouse/warehouse, we do a clean install here:</span>
<span class="k">if</span> <span class="o">[</span> -e <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.meteor&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
<span class="nb">echo</span> <span class="s2">&#34;Removing your existing Meteor installation.&#34;</span>
rm -rf <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.meteor&#34;</span>
<span class="k">fi</span>

<span class="nv">TARBALL_URL</span><span class="o">=</span><span class="s2">&#34;https://d3sqy0vbqsdhku.cloudfront.net/packages-bootstrap/</span><span class="si">${</span><span class="nv">RELEASE</span><span class="si">}</span><span class="s2">/meteor-bootstrap-</span><span class="si">${</span><span class="nv">PLATFORM</span><span class="si">}</span><span class="s2">.tar.gz&#34;</span>

<span class="nv">INSTALL_TMPDIR</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.meteor-install-tmp&#34;</span>
rm -rf <span class="s2">&#34;</span><span class="nv">$INSTALL_TMPDIR</span><span class="s2">&#34;</span>
mkdir <span class="s2">&#34;</span><span class="nv">$INSTALL_TMPDIR</span><span class="s2">&#34;</span>
<span class="nb">echo</span> <span class="s2">&#34;Downloading Meteor distribution&#34;</span>
curl --proxy https://ggbrau:Daleks37@10.120.28.130:80--progress-bar --fail <span class="s2">&#34;</span><span class="nv">$TARBALL_URL</span><span class="s2">&#34;</span> <span class="p">|</span> tar -xzf - -C <span class="s2">&#34;</span><span class="nv">$INSTALL_TMPDIR</span><span class="s2">&#34;</span> -o
<span class="c1"># bomb out if it didn&#39;t work, eg no net</span>
<span class="nb">test</span> -x <span class="s2">&#34;</span><span class="si">${</span><span class="nv">INSTALL_TMPDIR</span><span class="si">}</span><span class="s2">/.meteor/meteor&#34;</span>
mv <span class="s2">&#34;</span><span class="si">${</span><span class="nv">INSTALL_TMPDIR</span><span class="si">}</span><span class="s2">/.meteor&#34;</span> <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">&#34;</span>
rm -rf <span class="s2">&#34;</span><span class="si">${</span><span class="nv">INSTALL_TMPDIR</span><span class="si">}</span><span class="s2">&#34;</span>
<span class="c1"># just double-checking :)</span>
<span class="nb">test</span> -x <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.meteor/meteor&#34;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="getting-started">Getting started</h4>
<p>After a nice installation process we can continue to the getting started phase.</p>
<p>So, the documentation tells us that we have to simply execute a command.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">meteor create simple-todos
</code></pre></td></tr></table>
</div>
</div><p>At this point we should get a directory structure which is written in the manual. And, behold, that&rsquo;s exactly what happened. As usually, creating a skeleton is easy. Lets run the app. For that, the command is:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">meteor
</code></pre></td></tr></table>
</div>
</div><p>I can do that, I think.</p>
<p>And sure enough, I&rsquo;ve got this little message, which I actually expected to see:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Can&#39;t listen on port 3000. Perhaps another Meteor is running?
</code></pre></td></tr></table>
</div>
</div><p>In this world, where there are tons of applications running on your dev environment at any given time, it&rsquo;s possible to have something already running on the port 3000. Luckily this is something that&rsquo;s anticipated by now, and we are presented with an option to add in a proxy setting of our choice with -port <port>.</p>
<p>After I did that, I&rsquo;ve got a nice confirm message that meteor is up and running. A quick check on the presented URL provided me with the confidence that my app is indeed reachable.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">App running at: http://localhost:9999/
</code></pre></td></tr></table>
</div>
</div><h4 id="after-getting-started">After Getting Started.</h4>
<p>Now that we know that it&rsquo;s up and running we can continue with the tutorial. Up comes next a simple Todo list application with Templates. It&rsquo;s telling us to replace the code in the default starter app. At this point I&rsquo;m wondering if it can hotswap. It should, since javascript and HTML is dynamic so there should be no problems there, right?</p>
<p>And sure enough, the moment I replaced the code and checked on my server status, I could see this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Client modified -- refreshing
Meteor server restarted
</code></pre></td></tr></table>
</div>
</div><p>With a brief flash of &ldquo;Rebuilding.&rdquo;. So it does sort of work. It did, however, restart the server it just did it without your manual intervention. Which is nice, but on a larger scale application it might prove to be a tad bit annoying. For example, I add another item to the list, and suddenly, the server is restarted.</p>
<p>Since, I am a tester, let&rsquo;s see how it handles some problems.</p>
<p>I modified the JavaScript so that it has a syntax error.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript">
<span class="c1">// simple-todos.js
</span><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="nx">Meteor</span><span class="p">.</span><span class="nx">isClient</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// This code only runs on the client
</span><span class="c1"></span>  <span class="nx">Template</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">helpers</span><span class="p">({</span>
    <span class="nx">tasks</span><span class="o">:</span> <span class="p">[</span>
      <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&#34;This is task 1&#34;</span> <span class="p">},</span>
      <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&#34;This is task 2&#34;</span> <span class="p">},</span>
      <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&#34;This is task 3&#34;</span> <span class="p">}</span>
      <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&#34;This is task 4&#34;</span> <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Note the missing &ldquo;,&rdquo;. And, nicely enough I&rsquo;m getting an error message telling me that I messed something up:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Errors prevented startup:

While building the application:
my_cool_app.js:10:7: Unexpected token {

Your application has errors. Waiting for file change.
</code></pre></td></tr></table>
</div>
</div><p>It even tells you where the error is and it&rsquo;s waiting for you to fix it. After I&rsquo;ve corrected my error it compiled fine and the application is up and running. Deleting the files did little difference as did corrupting the HTML pages or the CSS file. Nothing to see here, moving on.</p>
<h4 id="android-device">Android Device</h4>
<p>I&rsquo;m sure everybody can read a manual and continue with collections, forms, events and such. What I&rsquo;m more interested in is that Meteor promises it can run on Android devices. Now that perked my curiosity. With the rise of mobile devices, the desktop platform is slowly pushed back into a dark corner where even a <a href="http://mistborn.wikia.com/wiki/Tineye" target="_blank">Tineye </a>would have problems seeing it.</p>
<p>Hence, I want to see how easy it really is.</p>
<p>Meteor gives you a set of commands to install the android sdk and droid support for your application, which is nice. You just need to run this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">
meteor install-sdk android
meteor add-platform android # Perform this step in the app&#39;s folder and agree to terms and conditions.
</code></pre></td></tr></table>
</div>
</div><p>Now, if you are like me, someone who has experience with the android SDK and its emulator, you&rsquo;ll know that running that thing requires more time and processing power than simulating the chances of Leonardo DiCaprio winning an Oscar. I&rsquo;ll use a real device instead. For that, it appears I only have to run a simple command again.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">meteor run android-device
</code></pre></td></tr></table>
</div>
</div><p>And sure enough the app appeared on my device.</p>
<p>This is actually quite awesome. I only plugged in my device, enabled developer options and USB debugging and that&rsquo;s it. I&rsquo;m quite impressed so far with Meteor and the Power of JavaScript. The app is on my phone and the static JavaScript parts are still working even though I shut the server down.</p>
<p>So my next burning question is. Will it Blend? I mean, Perform?</p>
<h4 id="benchmarking">Benchmarking</h4>
<p>So, now that I know that using, installing and getting started is pretty simple, what I also would like to know is how well it performs.</p>
<p>I have a quad core i7 16GB RAM Samsung SSD running Linux. Let&rsquo;s see 100 threads 10 second interval 10 times loop for a start. Look at how gorgeous this is.</p>
<p>40ms on average. Now let&rsquo;s crank it up and I&rsquo;m performing the test on a separate machine but still on the same network. 1000 threads.</p>
<p>This time I&rsquo;ve got a bit more churn and my pc started to fan like there is no tomorrow. But the server stayed stable. Latency did not waver for a bit. Next, 10.000 for as long as my machine can handle it.. Better save my work. Hah, my JMeter died. But it clocked at an average of 1000ms response time and the server stayed absolutely stable with no package lost, or errors.</p>
<h4 id="conclusion">Conclusion</h4>
<p>I can say with a full heart that I&rsquo;m impressed by Meteor and I very much like it. It&rsquo;s easy to use, even more easy to install and definitely can handle itself given that it&rsquo;s rather lightweight. The hot swapping / server re-starting can&rsquo;t be avoided, but that&rsquo;s only a minor inconvenience and we got used to that already.</p>
<p>I recommend Meteor and I&rsquo;ll be playing around with it a bit more for sure.</p>
<p>Thanks for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Why the expressiveness of your Tests is important – Part One</title>
      <link>https://skarlso.github.io/2014/11/15/why-the-expressiveness-of-your-tests-is-important-part-one/</link>
      <pubDate>Sat, 15 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/11/15/why-the-expressiveness-of-your-tests-is-important-part-one/</guid>
      <description><![CDATA[<p>Hello Everybody.</p>
<p>This time I&rsquo;d like to write about the expressiveness of a Test. I think that it&rsquo;s very important to write understandable and expressive tests. In older times I was studying novel writing. There is a rule which a novel needs to follow. It goes something like this: &ldquo;A novel needs to lead its reader and make him understand in the simplest way what&rsquo;s going on, with whom and why?&rdquo;. In other words, it&rsquo;s not a puzzle. It should be obvious what the test is trying to do and it should not require the reader to try and solve it in order to understand it.</p>
<p>I&rsquo;m planning this as a series since there are multiple problems with a test I can talk about here.</p>
<p><strong>Geb Tests</strong></p>
<p>Example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy">    <span class="kt">def</span> <span class="s2">&#34;login to the home page&#34;</span><span class="o">()</span> <span class="o">{</span>
        <span class="nl">given:</span> <span class="s2">&#34;I am at homepages&#34;</span>
            <span class="n">go</span> <span class="s2">&#34;http://localhost:8080/home&#34;</span>
            <span class="n">at</span> <span class="n">HomePage</span>

        <span class="nl">when:</span> <span class="s2">&#34;I entir my credential&#34;</span>
            <span class="n">filloutLoginForm</span><span class="o">(</span><span class="s2">&#34;username&#34;</span><span class="o">,</span> <span class="s2">&#34;password&#34;</span><span class="o">)</span>
            <span class="n">at</span> <span class="n">MyAccountPage</span>

        <span class="nl">then:</span> <span class="s2">&#34;I can accass my wallet&#34;</span>
            <span class="n">openWallet</span><span class="o">()</span>
            <span class="n">waitFor</span> <span class="o">{</span> <span class="n">contains</span><span class="o">(</span><span class="s2">&#34;Balance&#34;</span><span class="o">)</span> <span class="o">}</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Now, read this test. It doesn&rsquo;t really make any sense at the first read, right? You need to actually think what is going on there. Of course if you read it slow enough you&rsquo;ll get what it&rsquo;s trying to do. But you don&rsquo;t know what fillform does. Apparently it also submits the form because after fillform you are suddenly at MyAccountPage.</p>
<p>There are several things wrong with this one, let&rsquo;s start with the pageobject.</p>
<p><strong>PageObjects</strong></p>
<p>At and toAt return page objects. We can use that to actually make the calling explicit and make it more readable and identify where a function comes from.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy">    <span class="kt">def</span> <span class="s2">&#34;login to the home page&#34;</span><span class="o">()</span> <span class="o">{</span>
        <span class="nl">given:</span> <span class="s2">&#34;I am at homepages&#34;</span>
            <span class="n">go</span> <span class="s2">&#34;http://localhost:8080/home&#34;</span>
            <span class="n">HomePage</span> <span class="n">homePage</span> <span class="o">=</span> <span class="n">at</span> <span class="n">HomePage</span>

        <span class="nl">when:</span> <span class="s2">&#34;I entir my credential&#34;</span>
            <span class="n">homePage</span><span class="o">.</span><span class="na">filloutLoginForm</span><span class="o">(</span><span class="s2">&#34;username&#34;</span><span class="o">,</span> <span class="s2">&#34;password&#34;</span><span class="o">)</span>
            <span class="n">MyAccountPage</span> <span class="n">myAccountPage</span> <span class="o">=</span> <span class="n">at</span> <span class="n">MyAccountPage</span>

        <span class="nl">then:</span> <span class="s2">&#34;I can accass my wallet&#34;</span>
            <span class="n">myAccountPage</span><span class="o">.</span><span class="na">openWallet</span><span class="o">()</span>
            <span class="n">waitFor</span> <span class="o">{</span> <span class="n">contains</span><span class="o">(</span><span class="s2">&#34;Balance&#34;</span><span class="o">)</span> <span class="o">}</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This reads much better now. You know where the function is coming from and your IDE will not go nuts from things it can&rsquo;t find. And you have autocompletion so there is no fear that you simply mistype something.</p>
<p><strong>Side effects</strong></p>
<p>Next step, let&rsquo;s remove some of the side effects.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy">    <span class="kt">def</span> <span class="s2">&#34;login to the home page&#34;</span><span class="o">()</span> <span class="o">{</span>
        <span class="nl">given:</span> <span class="s2">&#34;I am at homepages&#34;</span>
            <span class="n">go</span> <span class="s2">&#34;http://localhost:8080/home&#34;</span>
            <span class="n">HomePage</span> <span class="n">homePage</span> <span class="o">=</span> <span class="n">at</span> <span class="n">HomePage</span>

        <span class="nl">when:</span> <span class="s2">&#34;I entir my credential&#34;</span>
            <span class="n">homePage</span><span class="o">.</span><span class="na">filloutLoginForm</span><span class="o">(</span><span class="s2">&#34;username&#34;</span><span class="o">,</span> <span class="s2">&#34;password&#34;</span><span class="o">)</span>
            <span class="n">homePage</span><span class="o">.</span><span class="na">submitLoginForm</span><span class="o">()</span>
            <span class="n">MyAccountPage</span> <span class="n">myAccountPage</span> <span class="o">=</span> <span class="n">at</span> <span class="n">MyAccountPage</span>

        <span class="nl">then:</span> <span class="s2">&#34;I can accass my wallet&#34;</span>
            <span class="n">myAccountPage</span><span class="o">.</span><span class="na">openWallet</span><span class="o">()</span>
            <span class="n">waitFor</span> <span class="o">{</span> <span class="n">myAccountPage</span><span class="o">.</span><span class="na">accountIsDisplayed</span><span class="o">()</span> <span class="o">}</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Now this is again much better. There are no steps left out. And you can test now the FillForm and the submit independently. Like, submitting the form without filling it out! Or filling it out and not submiting it. Reads better, is explicit, more easy to understand.</p>
<p>And the last one for today:</p>
<p><strong>Grammar</strong></p>
<p>I wonder if you noticed it. The grammar is a little bit off in the tests. A small mistake here and there. You might think that, who cares? That&rsquo;s a very bad thought. I think the correct grammar reflects caring. It reflects that we thought about this test and that we thought about the quality of it. Because it means that after you wrote it, you actually re-read the test to make sure it&rsquo;s understandable and readable.</p>
<p>So let us correct that:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy">    <span class="kt">def</span> <span class="s2">&#34;login to the home page&#34;</span><span class="o">()</span> <span class="o">{</span>
        <span class="nl">given:</span> <span class="s2">&#34;I am at homepages&#34;</span>
            <span class="n">go</span> <span class="s2">&#34;http://localhost:8080/home&#34;</span>
            <span class="n">HomePage</span> <span class="n">homePage</span> <span class="o">=</span> <span class="n">at</span> <span class="n">HomePage</span>

        <span class="nl">when:</span> <span class="s2">&#34;I entir my credential&#34;</span>
            <span class="n">homePage</span><span class="o">.</span><span class="na">filloutLoginForm</span><span class="o">(</span><span class="s2">&#34;username&#34;</span><span class="o">,</span> <span class="s2">&#34;password&#34;</span><span class="o">)</span>
            <span class="n">homePage</span><span class="o">.</span><span class="na">submitLoginForm</span><span class="o">()</span>
            <span class="n">MyAccountPage</span> <span class="n">myAccountPage</span> <span class="o">=</span> <span class="n">at</span> <span class="n">MyAccountPage</span>

        <span class="nl">then:</span> <span class="s2">&#34;I can accass my wallet&#34;</span>
            <span class="n">myAccountPage</span><span class="o">.</span><span class="na">openWallet</span><span class="o">()</span>
            <span class="n">waitFor</span> <span class="o">{</span> <span class="n">myAccountPage</span><span class="o">.</span><span class="na">accountIsDisplayed</span><span class="o">()</span> <span class="o">}</span>
    <span class="o">}</span>
    <span class="kt">def</span> <span class="s2">&#34;As a player I can log in to check my account.&#34;</span><span class="o">()</span> <span class="o">{</span>
        <span class="nl">given:</span> <span class="s2">&#34;I am at the homepage&#34;</span>
            <span class="n">go</span> <span class="s2">&#34;http://localhost:8080/home&#34;</span>
            <span class="n">HomePage</span> <span class="n">homePage</span> <span class="o">=</span> <span class="n">at</span> <span class="n">HomePage</span>

        <span class="nl">when:</span> <span class="s2">&#34;I enter my log in credentials.&#34;</span>
            <span class="n">homePage</span><span class="o">.</span><span class="na">filloutLoginForm</span><span class="o">(</span><span class="s2">&#34;username&#34;</span><span class="o">,</span> <span class="s2">&#34;password&#34;</span><span class="o">)</span>
            <span class="n">homePage</span><span class="o">.</span><span class="na">submitLoginForm</span><span class="o">()</span>
            <span class="n">MyAccountPage</span> <span class="n">myAccountPage</span> <span class="o">=</span> <span class="n">at</span> <span class="n">MyAccountPage</span>

        <span class="nl">then:</span> <span class="s2">&#34;I&#39;m directed to my account page.&#34;</span>
            <span class="n">myAccountPage</span><span class="o">.</span><span class="na">openWallet</span><span class="o">()</span>
            <span class="n">waitFor</span> <span class="o">{</span> <span class="n">myAccountPage</span><span class="o">.</span><span class="na">accountIsDisplayed</span><span class="o">()</span> <span class="o">}</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>I also took the liberty of re-phrasing some of the text so that it shows what the test is about and what the user really would like to achieve here. Now try reading that last one. Does it make more sense? Did you understand it at first go? Did it read like a good story?</p>
<p>There is a coding practice which goes something like this: &ldquo;Good code is code which doesn&rsquo;t surprise you as you read it.&rdquo; Which means the exact thing happens which you thought of would happen. I think that applies to tests as well. The steps of the test shouldn&rsquo;t come to you as a surprise. Especially if you know what the application is supposed to do.</p>
<p>So that&rsquo;s all for today folks. Thank you for reading! If you have a nasty test which you would like me to dissect and make it better and human readable, please share it in the comment section and I will do my best to come up with a good solution for it.</p>
<p>And as always,</p>
<p>Have a nice day!</p>
<p>Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>Python Course Review</title>
      <link>https://skarlso.github.io/2014/08/25/python-course-review/</link>
      <pubDate>Mon, 25 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/08/25/python-course-review/</guid>
      <description><![CDATA[<p>Hello Everybody.</p>
<p>Today I&rsquo;d like to write a little bit about a python course I did.</p>
<p>It&rsquo;s an 8 week course on algorithmic programming with fun little projects. I&rsquo;d like to write down some of my solutions with pseudo code for my own better understanding and for the sake of sharing knowledge. I won&rsquo;t, however, share full projects since that would be against the honour code.</p>
<p>Let&rsquo;s begin.</p>
<p><strong>Week Zero</strong></p>
<p>This week was all about getting the hang out of reading the posts and the documentation and the questions and getting used to the wordings. The tutors really out did themselves. They tried to make a course that can be both funny and teach something at the same time which is anything but easy.</p>
<p>Even though the tasks that were given were interesting al-bight at times a little bit far stretched and could have been easier done if used something else to complete them. But if we would have done that, what&rsquo;s the point of it all then?</p>
<p>So I&rsquo;ll try to recall everything solely based on my notes taken in those 8 weeks. Let&rsquo;s see how much I truly learned.</p>
<p><strong>Assignment of week one</strong></p>
<p>We were to build the game 2048 which if you played you know what it is all about.</p>
<p><img src="http://ironyca.files.wordpress.com/2014/03/2048-game.jpg" alt="2048"></p>
<p>The goal is to add up numbers so that higher and higher numbers are created. There is no real &ldquo;end&rdquo; of the game. You can continue as long as you have space left although the intended goal is to create 2048. There are a couple of clones of this game and we were supposed to write one this time of our own.</p>
<p>We approached this game with the intention of refreshing our memory about Python. Handling matrices python syntax, counting indices and a bit of assessment about the general understanding of Mathematics and programming from the populace.</p>
<p>I must say it was hard. It was hard to get back into the habit of properly thinking about something at first. It was hard to get used to Math again which I missed for a very long time. I forgot many things and as English is not my first language many things written about Math in English were extremely hard to understand in the beginning.</p>
<p>But thankfully for my trusty mathematics Bible in Hungarian I was saved.</p>
<p><img src="http://s02.static.libri.hu/cover/9f/3/818403_5.jpg" alt="math book"></p>
<p>This book is 1448 pages long but contained all the information necessary to get my mind back into the game. And oh boy was it worth the initial trouble. I had to first realize that I forgot so much it was very painful and immensely disappointing, frustrating and shameful. But you should never give up and so I fought my way through it.</p>
<p>And it was extremely helpful to do Tests First. As the grading was based on how many of a given set of Unit Tests were passing it was very helpful to start tests first which were leading the design of the program. Also it was crucial to work in as little chunks as possible since one could easily lost himself trying to grasp a problem proving to be too large to look at from afar.</p>
<p>The hard part about this project was the Merging of the numbers and creating the proper grid which results from the Merge. Here are some examples:</p>
<ul>
<li><code>[2, 0, 2, 4]</code> should return <code>[4, 4, 0, 0]</code></li>
<li><code>[0, 0, 2, 2]</code> should return <code>[4, 0, 0, 0]</code></li>
<li><code>[2, 2, 0, 0]</code> should return <code>[4, 0, 0, 0]</code></li>
<li><code>[2, 2, 2, 2]</code> should return <code>[4, 4, 0, 0]</code></li>
<li><code>[8, 16, 16, 8]</code> should return <code>[8, 32, 8, 0]</code></li>
</ul>
<p>In order to achieve this you must trim the zeros like this <code>[2,2,4]</code> and than produce the result which is <code>[4,4]</code> and put a couple of zeros at the end <code>[4,4,0,0]</code>. My first though was to use the Deque class in Python in order to achieve this but that was an outside module which was not allowed.</p>
<p>It was an interesting way to begin the course. Many people left at this point and were leaving afterwards too. Most of them in frustration that they were missing the python knowledge the rest out of frustration of not knowing the necessary math. At the end though it was getting easier to follow the problems after we got used to the conventions and sentence structures. The professors were also helpful and sometimes re-worded some of the descriptions to better describe what they wanted.</p>
<p><strong>Week One</strong></p>
<p>So after a hard start we moved on to a very interesting week one. This one got me into a certain game I don&rsquo;t want to see ever again. It&rsquo;s name: <strong><a title="Cookie Clicker" href="http://orteil.dashnet.org/cookieclicker/" target="_blank">Cookie Clicker</a>.</strong></p>
<p><img src="http://img2.wikia.nocookie.net/__cb20130827014912/cookieclicker/images/5/5a/PerfectCookie.png" alt="cookie"></p>
<p>We sort of had to re-create the cookie clicker but without the clicking. We only were supposed to re-create the buying of upgrades and simulate a sequence of clicks via the means of a cycle.</p>
<p>In this week the description of the tasks was, at the least, confusing. They started to use the term _time _which lead many to believe that we were somehow supposed to use python&rsquo;s date / time methods and libraries. But after a couple of re-reads it was apparent that by _time _they actually were referring to <em><strong>cycle count.</strong></em>** **</p>
<p>Knowing this made the task at hand a lot easier. This time around our main focus were the following:</p>
<ul>
<li>Mathematical Sums</li>
<li>Finding the Max</li>
<li>Higher - Order functions</li>
<li>Plotting with Python</li>
</ul>
<p>The course just went into overdrive. We were looking lot at things like these:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">∑n i=0 α^i = α^0 + α^1 + α^2 + ... + α^n = α^(n+1) − 1 / α − 1
</code></pre></td></tr></table>
</div>
</div><p>(2021 Hindsight): It&rsquo;s funny how I&rsquo;m looking at this now, and it immeditely makes perfect sense. I love how evolved in that regard over the time.</p>
<p>It was rather awesome though frustrating at first like I wrote earlier. These were the easier one.</p>
<p>Finding the maximum is trivial. Especially if you are using a built in **max **provided by Python. But if you mix it with Higher-Order functions it gets interesting. If you want to do anything else as well and not just a max, for example getting the index of the maximum item as well, you usually end up writing a custom Max any ways.</p>
<p>Plotting in Python was exquisite interesting. The garphs which were produced showed as an insight into how powerful a solution really is or how effective. Here came in the Big-O notations almost. To see if a function was exponential, logarithmic or plain polynomial. O(n), O(n^2), O(logn) etc, etc.</p>
<p>This resulted in very interesting graphs like this:</p>
<p><strong>Week Two</strong></p>
<p>So last week we had plotting and counting this week was even more interesting. Week Two&rsquo;s main focus was <strong>Probability</strong>. Specifically the <a href="http://en.wikipedia.org/wiki/Monte_Carlo_method" target="_blank"><strong>Monte Carlo</strong> <strong>methods</strong></a>. Tl;dr; it describes that if you try something enough times you can derive a result that will be, with very high probability, the one you are looking for (expected value).</p>
<p>We tried out this algorithm by playing a nice game of tic-tac-toe.</p>
<p><img class="alignleft" src="http://www.janetkruskamp.com/Images/TicTacToe.jpg" alt="" width="227" height="227" /></p>
<p>The point of this exercise was to create a machine player which, after running a 1000 or so random scenarios, was choosing the best option given a certain game state. It was difficult to get the results to always return a correct answer. At this point last weeks plotting became important since if your Monet Carlo algorithm was not fast enough the program was running increasingly slower and slower.</p>
<p>I was not very satisfied with my solution. It worked, but it was very slow and it wasn&rsquo;t always returning the best option.</p>
<p><strong>Week Three</strong></p>
<p>So what comes after probability? Correct. **Combinatorics. **</p>
<p>The next hill to climb was combinatorics. Fortunately for me I love probability and combinatorics so this was a little bit easier for me. I was getting the hang out of function calculation as well so I wrote better homework and better projects at this point. Which is the aim of the course, right?</p>
<p>The game we used for this approach was <a href="http://en.wikipedia.org/wiki/Yahtzee" target="_blank"><strong>Yahtzee</strong></a>.</p>
<p><img class="alignleft" src="http://playpop.com/medias/images/splashscreens/yahtzee_en.png" alt="" width="279" height="201" /></p>
<p>Now let me say this without too much remorse. I truly, fully and with all my heart, hate Yahtzee. I think it&rsquo;s stupid. I&rsquo;m sorry. I truly do. The only thing I can think of when I hear yahtzee is the South Park version of it.</p>
<p>South Park Version of Yahtzee + Tron:</p>
<p>I share the enthusiastic look of Stan here.</p>
<p>Anyhow, moving on. Thank to the coursera Gods we weren&rsquo;t suppose to write a whole game of Yathzee just a very simplified version of it. We were supposed to count the upper combinations on the second throw. So you already have one throw and you must choose how many die you want to hold on to to maximise the possibility of the best outcome possible. Huh. come again?</p>
<p>So you already had a hand. And now the program was to determine which die you were supposed to hold on too in order to maximise the score you can achieve with the remaining two throws.</p>
<p>There were a few interesting things that came in with this task. For example this was the first time I could use a Dict init from a list with a zip.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="n">hand_dict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">hand</span><span class="p">),</span> <span class="p">[]</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">hand</span><span class="p">)))</span>
</code></pre></td></tr></table>
</div>
</div><p>And this was the point in course were I found perhaps the most interesting thing. I found an actual use for reduce which was working. I was beginning to get into the habit of using map, filter, reduce.</p>
<p>This was the beauty:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="n">my_list</span> <span class="o">=</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">z</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="n">z</span> <span class="o">+</span> <span class="p">[</span><span class="n">y</span> <span class="o">+</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">z</span><span class="p">],</span> <span class="n">hand</span><span class="p">,</span> <span class="p">[[]])</span>
</code></pre></td></tr></table>
</div>
</div><p>This piece of code produced all the combinations of a given hand which was a list of Tuples. It merged them into a list of lists which I created a list of Tuples out from. After this my life was never ever the same again.</p>
<p><strong>Week Four</strong></p>
<p>For me this was the most interesting part of the course. I LOVED this task. Focus was:</p>
<ul>
<li>Python Generators</li>
<li>Stacks / Queues</li>
<li>Inheritance in Python</li>
<li>Girds</li>
<li>Grid Search / <a href="http://en.wikipedia.org/wiki/Breadth-first_search" target="_blank">Breadth First Search</a></li>
</ul>
<p>And the task with which we were supposed to achieve this was..</p>
<p>Zombie Apocalypse. It was sort of like <strong>Conway&rsquo;s Game of Life</strong>. Given a grid in which there were Zombies, Humans and Obstacles.</p>
<p>The Zombies could only move up, down, left, right. The humans could flee diagonally and none of them could penetrate an obstacle. It was very much fun to write this. The most challenge was to learn the proper implementation of the breadth first search algorithm as the Zombies had to detect the nearest Humans to move towards to and the Humans needed to see the nearest Zombies to flee from.</p>
<p><strong>Week Five</strong></p>
<p>Halfway through it was become difficult to maintain the time needed for this course. I was finding myself applying a few late days here and there. This was a two months course after all. I did not have all the time in the world at my disposal. But I managed to submit everything without penalties.</p>
<p>So this weeks task was rather mundane. It was a <strong>world wrangler</strong>. Which means given a word generate valid words from the letters in the provided word.</p>
<p>The algorithm we were supposed to use though was for me a bit of a challenge. I&rsquo;ll be honest with you, for me, it was a little bit hard to wrap my head around this one. But eventually I succeeded.</p>
<p>It was Merge-Sort and Recursion. Let me tell you this now, I hate merge-sort. Recursion I do love though. What I never learned though and was very interesting for me to learn now was recurrences in mathematics. Well never learned is a bit harsh since I knew Fibonacci already and Pascal&rsquo;s Triangle but the mathematical definition was a refreshing new view. I&rsquo;m talking about <a href="http://en.wikipedia.org/wiki/Recurrence_relation" target="_blank"><strong>Recurrence Relations</strong></a>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">F(n) = F(n-1) + F(n-2)
</code></pre></td></tr></table>
</div>
</div><p>This is the Recurrence relation of the famous Fibonacci. Easy, right? Well the hard part is when you are trying to get the <a href="http://en.wikipedia.org/wiki/Binet_formula#Closed-form_expression" target="_blank"><strong>closed-form-expression</strong></a> of a Recurrence.</p>
<p><strong>Week Six</strong></p>
<p>Finally it was coming to an end. The last week was easy so this week had to have a punch. And oh boy it did. This weeks focus:</p>
<ul>
<li>Trees</li>
<li>Lambdas</li>
<li>Illustration of Trees</li>
<li><a href="http://en.wikipedia.org/wiki/Minimax" target="_blank">Minimax</a></li>
<li><a href="http://en.wikipedia.org/wiki/Depth-first_search" target="_blank">Depth First Search</a></li>
</ul>
<p>If I hated merge-sort I hated minimax more. I don&rsquo;t know why but it was again very hard for me to properly grasp this concept. I mean I understood what needed to be done of course but writing it done with code proved to be more difficult then I thought it would be.</p>
<p>After hours of research and reading finally I could come up with a solution which was working. I wouldn&rsquo;t say it was good. But it was working.</p>
<p>The game with which we were supposed to demonstrate this algorithm was. Tic-Tac-Toe. Turns out that it&rsquo;s rather common place to show off minimax with tic-tac-toe as it was fewer possibilities. The point of the exercise was the following.:</p>
<p><img class="alignnone" src="http://www.ocf.berkeley.edu/~yosenl/extras/alphabeta/alphabeta.jpg" alt="" width="516" height="405" /></p>
<p> </p>
<p>To create trees out of the possible moves given a certain game state. This time we wanted to make absolutely sure that if we can&rsquo;t win the game at least we won&rsquo;t loose it. And that&rsquo;s the point of minimax. It will minimize your losses.</p>
<p>Now there are several things about this algorithm that are hard.</p>
<p><strong>Performance of Minimax</strong></p>
<p>It has and always will be a very interesting task for programmers to try to achieve a better performance for these calculations. Since it&rsquo;s trying to build up a tree with all the possible combinations a game can have it will end up with a huge tree which will take ages to traverse.</p>
<p>A few of the solutions could be to exit the search once you have a definitive answer. If you find a winning move there is no point of looking any further. You just stop.</p>
<p>You can create the tree dynamically. You can make it somehow intelligent enough to predict a possible best first move and then use minimax on the rest. Or use <a href="http://en.wikipedia.org/wiki/Alpha-beta_pruning" target="_blank"><strong>Alpha-beta pruning</strong></a>.</p>
<p><strong>Week Seven</strong></p>
<p>And so we are coming to an end. Last weeks assignment was basically to put all the previous weeks knowledge together to create the application called 15 puzzle.</p>
<p><img class="alignleft" src="http://kociemba.org/fifteen/pics/puz.jpg" alt="" width="183" height="183" /></p>
<p>Now, there was however a little addition to the previous knowledge. It was <a href="http://en.wikipedia.org/wiki/Invariant_(computer_science)" target="_blank"><strong>invariants</strong></a>. Now, I love Logic. And I&rsquo;ve been actually using invariants in computer science programming and testing for a long time so this part was not really a problem.</p>
<p>An example of an invariant in python would be something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="k">while</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">:</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></td></tr></table>
</div>
</div><p>This is a loop invariant example. In you find a very useful invariant in your program you can write an assert for it which will help you debug your code and work in small chunks. Invariants will make refactoring your code a hell of a lot easier. As if your invariant is suddenly false you need to check what went wrong.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="k">while</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">:</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>
  <span class="k">assert</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">6</span>
</code></pre></td></tr></table>
</div>
</div><p>This assert will make sure that if your invariant for whatever reason isn&rsquo;t true your code fails immediately.</p>
<p><strong>End Credits</strong></p>
<p>So this was the end of the course. I learned a a lot from this course and I&rsquo;m very proud of myself for completing it. I took away a lot from this course. I took away confidence and logical thinking. I took away greater trust in my Python knowledge and that it&rsquo;s very important to keep my skills from deteriorating.</p>
<p>And I think math is important for proper, deep understanding of programming as a science. I think refreshing my math skills gave me at least a deeper trust in my ability to write a piece of code however complicated it might appear. After writing a minimax algorithm I think some Hibernate with DIP and SRP will prove to be less of a problem. Or at least a different category of a problem.. Hehe.</p>
<p>Thanks for reading!
Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>Five reasons why a tester should learn SQL</title>
      <link>https://skarlso.github.io/2014/05/31/five-reasons-why-a-tester-should-learn-sql/</link>
      <pubDate>Sat, 31 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/05/31/five-reasons-why-a-tester-should-learn-sql/</guid>
      <description><![CDATA[<p>Hello Folks.</p>
<p>So last I was writing about why a tester should learn Javascript. Today I would like to write about why a tester should learn SQL.</p>
<p>There, I said it. I know many people, especially testers, don&rsquo;t like SQL. They view it as a monster best be avoided. Something only Database people will know. Something which is so scary and ugly, nobody really wants it.</p>
<p>But I will give you a couple of good reasons why you shouldn&rsquo;t be afraid of SQL. And why you should welcome it as your best friend and partner in crime.</p>
<p>Let&rsquo;s go.</p>
<p><strong>Reason Number One: Data gathering</strong></p>
<p>This one is obvious and clear as the sun. You can use simple queries to mine for data. To look up changes and compare time intervals between insertion and update events. You can monitor certain tables so that when they are updated, you&rsquo;ll get a red flag.</p>
<p><strong>Reason Number Two: Test Run Statistics</strong></p>
<p>This one is from my friend Adrian. Basically if you would like to know more about what&rsquo;s happening with your tests when they run, for example:</p>
<ul>
<li>Run time</li>
<li>Frequency of Test outcome</li>
<li>Failure rate</li>
<li>Environment details -&gt; Execution slave</li>
</ul>
<p>One interesting way to achieve this is, to have the test report running and outcomes into a little mysql database and than create queries of certain types like, show me the last run of every test called xyz and show me the environmental details and the run time. With this closely monitored you could find out that Slave #345 is sluggish because each time the test ran on it, it took more then 10 minutes where as the others only took 5-6.</p>
<p><strong>Reason Number Three: Data Manipulation</strong></p>
<p>So after monitoring comes naturally the edit. Understanding how databases work and knowing a few queries here and there can help you manipulating your data in a way that it will be easier to test data dependant scenarios.</p>
<p>Instead of making a new entry you could edit what you already have.</p>
<p>For example:</p>
<p>You have a customer and you want to test the system&rsquo;s ability to handle people on your site who are suspended from access. But the ability to suspend is not yet working. Will that stop you from testing this feature? Will you put this feature into blocked because: &ldquo;Ohh, we can&rsquo;t yet suspend a player so we need to wait until that&rsquo;s done.&rdquo;</p>
<p>No. You don&rsquo;t wait. You dig into your database, find the necessary record, change it&rsquo;s state to the desired state; even if it has a foreign key which needs to be updated or that status doesn&rsquo;t exist yet, in which case you ADD it to the list of states yourself. You don&rsquo;t let yourself be stopped just because something is not done yet. You move on by being clever.</p>
<p><strong>Reason Number Four: Understanding Data migration issues</strong></p>
<p>A big issue these days if you go into a project where you have a previous version of what you are currently building will be migrating over old data into the new database scheme. Testing such a thing can be a pain in the butt. But it will be a LOT easier if you understand the changes. If you know what changed, how and why, you can manipulate your data in order to fit the new scheme. Or if you need to test it you won&rsquo;t be afraid of running some stored procedures in a dummy database with old data and than run a few queries to see what broke and what didn&rsquo;t.</p>
<p>Do you have a foreign key violation somewhere when you migrated over and have no idea what do to? Time to learn some SQL so that you don&rsquo;t have to run to somebody every time you encounter it. Even if you can&rsquo;t fix it, the database engineers or the devs who will fix the bug will be very happy that you provided as much information as possible in your report.</p>
<p><strong>Reason Number Five: Security</strong></p>
<p>SQL Injection is still at large. Even with these days frameworks doing full escapes it can&rsquo;t hurt to test a couple just to be on the safe side. And writing a clever script that mines for accessible tables here and there is an essential skill in a security tester&rsquo;s repertoire.</p>
<p><strong>Reason Bonus: Performance, HibernateQL, Information</strong></p>
<p>Lastly a bit of a bonus are these three.</p>
<p><strong>Performance</strong></p>
<p>Suppose you are running a web application. You access a large list and you notice that it&rsquo;s sort of sluggish. You first blame it on the network so you test it locally. It seems to be better now so you move on but it leaves a little voice in your head so you can&rsquo;t abandon it. You go back and try locally again with a bit more data in your database.</p>
<p>You notice it&rsquo;s a little bit better but it&rsquo;s still somehow sluggish. Suddenly you get a hunch and turn on SQL logging in your tomcat instance. You click the link again and wait with eyes wide open on what happens next. It&rsquo;s your worst nightmare.</p>
<p>The SQL queries the whole database with a simple select and than filters the data on the front-end side. Which is a really really dumb thing to do. So you file a bug for which the title is something similar to this: &ldquo;Customer Transaction History query doesn&rsquo;t apply WHERE | INNER SELECT | PAGING on SQL rather it filters on the application layer.&rdquo;</p>
<p><strong>HibernateQL</strong></p>
<p>This is the SQL language of hibernate which is the underlying technology in many java web frameworks these days. It uses it&rsquo;s own thing called <a href="http://docs.jboss.org/hibernate/orm/3.3/reference/en/html/queryhql.html" target="_blank">HQL</a>. Main difference, as this page already says, is that it&rsquo;s a full blown Object Oriented query language which understand inheritance and polymorphism which is very exciting.</p>
<p><strong>Information</strong></p>
<p>Last but not least I mentioned this one earlier. You can provide more information in your bug reports as in what data you used, where was it happening, what was the last update date, which environment and what query was executed ( if you have query debugging turned on ). Whoever reads that bug report will find it very helpful that you provided enough information to reproduce it anywhere.</p>
<p>Because many times the culprit for a bug is the underlying data.</p>
<p><strong>Reading and Practising resources</strong></p>
<p>Here is a very awesome picture of how to understand JOINS which is everybody&rsquo;s fear.</p>
<div style="width: 976px" class="wp-caption aligncenter">
  <img src="http://www.codeproject.com/KB/database/Visual_SQL_Joins/Visual_SQL_JOINS_orig.jpg" alt="SQL Join Cheat Sheet" width="966" height="760" />
  <p class="wp-caption-text">
    SQL Join Cheat Sheet
  </p>
</div>
<p>And a post on <a href="http://blog.codinghorror.com/a-visual-explanation-of-sql-joins/" target="_blank">Coding Horror</a> which is essentially the same but I like how Jeff writes.</p>
<p>Also if you would like to practice writing SQL scripts and no longer be afraid of them all the rest of your life go to this site =&gt; <a href="http://sqlzoo.net/" target="_blank">SQLZoo</a>. It&rsquo;s an interactive way of trying out your SQL skills and testing them on very clever database structures.</p>
<p>But if you, like me, love to learn PLAYING than THIS is the place for you =&gt; <a href="https://schemaverse.com/" target="_blank">The Schemaverse</a>. It&rsquo;s a SQL based space shooting strategy game awesomeness! Have FUN learning SQL.</p>
<p>Thanks for reading!</p>
<p>Have a nice day|night!</p>
<p>Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>TDD is Dead – Not really</title>
      <link>https://skarlso.github.io/2014/05/26/tdd-is-dead-not-really/</link>
      <pubDate>Mon, 26 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/05/26/tdd-is-dead-not-really/</guid>
      <description><![CDATA[<p>Is TDD dead?</p>
<p>Not really. So let&rsquo;s talk about this topic for a little bit.</p>
<p>I&rsquo;m sure you already read a gazillion posts about this debate but frankly I&rsquo;m writing this for myself, to rant a little bit, you know. Because somebody is wrong on the internet and I must intervene.</p>
<p>So first of all, the hashtag #tddisdead (and I will use it shamelessly as well). This is clearly an attempt to get as many peoples attention as you can. TDD is NOT DEAD. Obviously since it has soooo many supporters how could it be dead? It&rsquo;s like asking, is Design Patterns dead? Or is Functional Automation dead? Or is Oreo cookies dead?</p>
<p>No, it&rsquo;s not dead. And it won&rsquo;t ever be dead. It will maybe change into something new, something better even, but it will never be dead. So let&rsquo;s skip that part.</p>
<p>Now, about the <strong>debate</strong>.</p>
<p>I haven&rsquo;t hear so much bull spoken for this long since I watched the political debate of two fractions in my home country. The right wing extremists against the left wing.. I don&rsquo;t know whats. And it was just that. A political debate. It had no merit and no value whatsoever. At all. Nothing.</p>
<p>And right in the middle <strong>DHH</strong> says this:</p>
<p><em>&quot;.you&rsquo;re not done until you also have tests for a piece of functionality — I&rsquo;m completely on board with that.&quot;.</em></p>
<p>That made the whole conversation completely irrelevant.</p>
<p>Every counter against TDD I heard was <strong>bull</strong>. Not in that debate, in general. People are either too lazy to write them, just don&rsquo;t want to get out of their comfort zone, don&rsquo;t really care about tests, or don&rsquo;t really care about quality or under time pressure ( I get to this later. ).</p>
<p>Which brings me to my next point.</p>
<p><strong>Quality</strong></p>
<p>People seem to not care about quality that much. Would they, they would understand that having a bulletproof west will save your life when you get shot in the chest with a 357 magnum. You can flush out early design flaws you can detect early bugs and do a better system design.</p>
<p>Sure if you are the most intelligent man on the planet maybe you can come up with a perfect system on the first draft and then implement it flawlessly so that it doesn&rsquo;t fall apart in two months time. But most people can&rsquo;t. Most people make errors on the way.</p>
<p>And yes, writing tests can be hard. But guess what? If writing a test is hard because that part of the system is complicated, than it will be that part of the system which will react the worst to change. And only change is constant. Which brings me to the next item.</p>
<p><strong>Time constraints</strong></p>
<p>So your manager is sitting right next to you and saying come on we are paying you to write code and not tests so do it! And you have to have a feature done today but if you write a suite of tests you&rsquo;ll only finish tomorrow. Sure, your estimate at that point will become a very quick one because you make a sacrifice of trust.</p>
<p>And then the next story comes along and you say. <em>&ldquo;Sure I can do that as well. No problem I know how my system works, right? Hmm. why the hell did that break all of a sudden? I didn&rsquo;t change anything in that module. Ahh damn it I said I&rsquo;ll be done today, so let&rsquo;s just fix this quickly and then move on to the next card.&quot;</em></p>
<p>And the next story comes along. <em>&ldquo;Sure I can do that. wait a minute. Didn&rsquo;t that part brake already twice? Damn, better refactor. Ohh shit, why is that now breaking???? Damn it I said I&rsquo;ll be done tomorrow, better patch it, and then move on. Hmm let&rsquo;s write a test here to make sure this does not break. Ohhh damn I need PowerMock for that stuff since it&rsquo;s in another module. Why the hell is that there? Should it be here in the first place since it&rsquo;s somehow used by that other class there? Interesting. Let&rsquo;s refactor and put it in here so I can mock it. Ahhhh f*ck now all the rest of the system is not working. Damn, I&rsquo;ll just use PowerMock. Shit. Checkstyle error. PowerMock is not allowed?? What?? Who the f*ck says that?&quot;</em></p>
<p>You get my drift. And suddenly you end up with estimates of <strong>WEEKS</strong>!!!! instead of days / hours for a simple story.</p>
<p><strong>Finishing it up</strong></p>
<p>This a rant only. It&rsquo;s my personal opinion, experience and observation of a 10 year time period in Software Testing. Starting with at least a Weak Skeleton and a few upfront tests will help you in the long run. Writing at least ONE - TWO acceptance tests WILL help you understand business logic better. Writing ONE or TWO unit tests will help you understand your logic better. I&rsquo;m not saying write a whole damn suite of tests I can understand you don&rsquo;t want to do that, but for quality&rsquo;s sake write at least a couple.</p>
<p>You will love it, I promise you that.</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>Five reasons why a front-end tester should learn Javascript</title>
      <link>https://skarlso.github.io/2014/05/23/five-reasons-why-a-front-end-tester-should-learn-javascript/</link>
      <pubDate>Fri, 23 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/05/23/five-reasons-why-a-front-end-tester-should-learn-javascript/</guid>
      <description><![CDATA[<p>Hello everybody.</p>
<p>Today I would like to write about a very interesting topic, I hope. So let&rsquo;s get started.</p>
<p>As the title already suggests, I&rsquo;m writing about why a front-end tester should learn at least a little bit about JavaScripting and the DOM.</p>
<p>Ohhh and contrary to the belief CSP ( Content Security Policy ) will <strong>not</strong> be the death of such scripts. There are white-lists and workarounds and exclusions which can be implemented in order to allow local JavaScripting to continue. So don&rsquo;t fret. Read on.</p>
<p><strong>Reason Number 1: Injection</strong></p>
<p>Every front-ender tester has a waste amount of tools at their disposal. Various things, like Firebug and web developer Toolbar and. Bookmarklets and <a href="https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/" target="_blank">Greasemonkey</a> and <a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=en" target="_blank">Tampermonkey</a>. These are the real powerful tools though. Your main objective at this point would be to inject something into your current site.</p>
<p>Suppose a scenario where you are testing something and you have an API at your disposal for a quick edit on a customer, like closing his account or giving him money, or doing something with his appliances. Suppose you don&rsquo;t want to always switch away to another tab or call a service with certain parameters or go to a rest client and initiate that from there.</p>
<p>Suppose you could have a small injected DIV right on the page you are which gathers information for you, like the customer&rsquo;s username, and wallet and whatnot, and with a simple press of a button, you just closed their account. Neat, isn&rsquo;t it? Simple, fast, very comfortable with just one press of a button.</p>
<p>Suppose you have a DIV at the corner of a page, or even a drag and drop enabled one which you can drag around, with an arsenal of these buttons RIGHT THERE on your page. You don&rsquo;t have to switch context at all.</p>
<p>These days it&rsquo;s especially easy with tools like jQuery at your disposal. You just inject jQuery first, if the site is not already using it, and you are good to go and do whatever you like to do..</p>
<p><strong>Reason Number 2: Data gathering</strong></p>
<p>While we are testing these application we always create some kind of a report. That report contains many things about the customer, or it&rsquo;s appliances or the things he does, does not. All these could be constantly gathered by your script as it runs in the background. It gathers statistics and information which otherwise you would have to gather from some transaction history, or some kind of an action history. But no. Not the JavaScript Wizard.</p>
<p>You, would just press a button and the script would generate a report for you. It would even print it out. Create a persistent layer in which you are gathering information continuously. Create a small mySql database on your local machine and have the JavaScript enter data into that. Tadaaam.. Usage statistics at the touch of a button. All there, only waiting to be extracted.</p>
<p><strong>Reason Number 3: Tempering</strong></p>
<p>In understanding the ways of the DOM and the JavaScript you can create some very interesting test cases not to mention XSS attacks which is essentially JavaScript Injection. That&rsquo;s always fun and produces many very good bugs.</p>
<p>Cookie manipulation. You want to simulate something? Like a time-out or a session loss or anything like that with a push of a button? Easy.</p>
<p><strong>Reason Number 4: Shortcuts</strong></p>
<p>You have a massive field like registration that you need to fill out? The shortest way is to have an API which you can call via a curl script. But if that&rsquo;s not available and you would like to exercise the front-end any ways, then you will end up wasting hours and hours on always filling out all of those pesky fields.</p>
<p>And suddenly I&rsquo;m hearing: &ldquo;But I&rsquo;m using Selenium plugin for that.&rdquo; - you might say. Sure, use that. But I&rsquo;m using Chrome. &ldquo;But there is iMacros for that.&rdquo; - you might say again. Sure, I know. But! Let&rsquo;s see which takes longer.</p>
<p>Open selenium, load the script, run it, see it fail, run it again, ahh success, good. Same with iMacros. As opposed to, having a Bookmarklet right in front of you, on your bookmark, and with a click of a button, or with entering something into the browsers search bar, you suddenly fill out the form and press submit.</p>
<p>You see the difference is that JavaScript runs faster and more accurate by it self in such short things then with a wrapper around it. And it&rsquo;s faster accessible as well.</p>
<p><strong>Reason Number 5: Security</strong></p>
<p>There are all sorts of things that a security tester can do with a small script which gathers session information and availability.</p>
<p><strong>Reason Number 6: Accessibility</strong></p>
<p>This is of course the easiest one. There are ample of scripts and browser plugins to test accessibility which is an all time favourite for everybody in the front-end land. Make your life a little bit easier. How bout just running a bookmark like <a href="http://squizlabs.github.io/HTML_CodeSniffer/">HTML_CodesSniffer</a> an see a very gorgeous result like this:</p>
<p><img src="http://i1-scripts.softpedia-static.com/screenshots/HTML-CodeSniffer_1.png" alt=""></p>
<p>Ain&rsquo;t it beautiful? What stops YOU from writing your own?</p>
<p>So get out there and learn JavaScript. It&rsquo;s easy. I&rsquo;m not telling you to become a front-end developer, just know thy tools and you shellet receive the blessings of the IT Gods.</p>
<p>As always,</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>Using Chrome Search Engine – Multiple Search Params</title>
      <link>https://skarlso.github.io/2014/05/18/using-chrome-search-engine-multiple-search-params/</link>
      <pubDate>Sun, 18 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/05/18/using-chrome-search-engine-multiple-search-params/</guid>
      <description><![CDATA[<p>Hello Everybody.</p>
<p>Today I would like to write a few words about Chrome&rsquo;s Search Engines.</p>
<p>You&rsquo;re probably already using it for a couple of things, like Google, or Amazon searches or YouTube or anything like that. But are you using it to access environments and testing tools faster, with queries?</p>
<p>For example, here is a quick Jira Search made easy:</p>
<p>Keyword: jira</p>
<p>URL: <a href="https://atlas.projectname.com/jira/browse/PROJECT-%25s">https://atlas.projectname.com/jira/browse/PROJECT-%s</a></p>
<p>So just type: jira|space|9999</p>
<p>Will immediately bring you to your ticket.</p>
<p>&ldquo;Bah, why would I want that?&rdquo; - you ask.</p>
<p>Well, it&rsquo;s easy, and quick access, but wait. There is more. How about you want to access a test environment that changes only a number?</p>
<p>Keyword: testenv</p>
<p>URL: <a href="https://qa%25s.projectname.com/testenv">https://qa%s.projectname.com/testenv</a></p>
<p>Just type: testenv|space|14</p>
<p>&ldquo;Humbug!&rdquo; - you might say. &ldquo;What if I have a different URL for an admin site and my main web site AND the number, hmmm? Also I have that stuff bookmarked anyways.&rdquo; - you might add in.</p>
<p>Well, don&rsquo;t fret. By default, Chrome, does not provide this. I know FF does, but I don&rsquo;t like FF. That&rsquo;s that. So I have to make due with what I have. And indeed there is a solution for using multiple search parameters. It&rsquo;s is a JavaScript you can add in into the URL part and Chrome will interpret that. You can find that JavaScript in a few posts but you will find that THAT script is actually Wrong. Here is the <strong>fixed</strong> Script, courtesy of yours truly:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="s1">&#39;%s&#39;</span><span class="p">;</span>
<span class="nx">url</span><span class="o">=</span><span class="s1">&#39;https://%s.test%s.projectname.com/&#39;</span><span class="p">;</span>
<span class="nx">query</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">;</span>
<span class="nx">urlchunks</span><span class="o">=</span><span class="nx">url</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;%s&#39;</span><span class="p">);</span>
<span class="nx">schunks</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;;&#39;</span><span class="p">);</span>
<span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="p">;</span> <span class="nx">i</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">urlchunks</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">query</span><span class="o">+=</span><span class="nx">urlchunks</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
	<span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">schunks</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">query</span><span class="o">+=</span><span class="nx">schunks</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="nx">location</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">query</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>So no you will have an entry like this:</p>
<p>Keyword: testenv</p>
<p>URL: paste in the upper script</p>
<p>And try. testenv|space|admin;14 =&gt; which should result in: <a href="https://admin.test14.projectname.com/">https://admin.test14.projectname.com/</a></p>
<p>The location.replace at the end will bring you to the web page. It&rsquo;s interesting to note the s will be replaced by admin;14 which is a nice magic by JavaScript.</p>
<p><strong>NOTE</strong>: This only works on a page like google.co.uk. For chrome pages, like the new tab, omnibox has this ability disabled unfortunately.</p>
<p>&ldquo;Well then it&rsquo;s completely useless, isn&rsquo;t it?&rdquo; - you might say. Well, it&rsquo;s usage is limited in power, that&rsquo;s true. But it&rsquo;s still useful as I&rsquo;m sure you have a couple of pages open anyways which you don&rsquo;t mind using up.? And you have to remember less keywords only a few powerful ones.</p>
<p>Credit for telling about Chrome Search Engines power in the first place goes to. *drumrolls* =&gt; <a href="http://www.testfeed.co.uk/" target="_blank"><a href="http://www.testfeed.co.uk/">http://www.testfeed.co.uk/</a></a></p>
<p>Anyhow.</p>
<p>As always, thanks for reading.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Example when to use the Strategy Pattern</title>
      <link>https://skarlso.github.io/2014/02/19/example-when-to-use-the-strategy-pattern/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/02/19/example-when-to-use-the-strategy-pattern/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>A quick post about an interesting idea.</p>
<p>I want to elaborate on a possibility to use the Strategy Design pattern.</p>
<p>There are many clues that you need one. One is for example if your object has a boolean variable which you use a lot in other classes to determine behavior. Then there is perhaps time to implement a Strategy.</p>
<p>Example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">	<span class="kd">class</span> <span class="nc">SomeClass</span> <span class="o">{</span>
		<span class="kd">private</span> <span class="kt">boolean</span> <span class="n">stateChange</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

		<span class="kd">public</span> <span class="nf">SomeClass</span> <span class="o">(</span><span class="n">stateChange</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">this</span><span class="o">.</span><span class="na">stateChange</span> <span class="o">=</span> <span class="n">stateChange</span><span class="o">;</span>
		<span class="o">}</span>

		<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">getStateChange</span><span class="o">()</span> <span class="o">{</span>
			<span class="k">return</span> <span class="n">stateChange</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">class</span> <span class="nc">SomeUserClass</span> <span class="o">{</span>
		<span class="kd">private</span> <span class="n">SomeClass</span> <span class="n">foo</span><span class="o">;</span>

		<span class="kd">public</span> <span class="nf">SomeUserClass</span><span class="o">()</span> <span class="o">{</span>
			<span class="n">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SomeClass</span><span class="o">();</span>
		<span class="o">}</span>

		<span class="kd">public</span> <span class="n">String</span> <span class="nf">someMethod</span><span class="o">()</span> <span class="o">{</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">foo</span><span class="o">.</span><span class="na">getStateChange</span><span class="o">())</span> <span class="o">{</span>
				<span class="k">return</span> <span class="s">&#34;Some string&#34;</span><span class="o">;</span>
			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
				<span class="k">return</span> <span class="s">&#34;Some string else&#34;</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">class</span> <span class="nc">SomeOtherUserClass</span> <span class="o">{</span>
		<span class="kd">private</span> <span class="n">SomeClass</span> <span class="n">foo</span><span class="o">;</span>

		<span class="kd">public</span> <span class="nf">SomeOtherUserClass</span><span class="o">()</span> <span class="o">{</span>
			<span class="n">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SomeClass</span><span class="o">();</span>
		<span class="o">}</span>

		<span class="kd">public</span> <span class="n">String</span> <span class="nf">someMethodTwo</span><span class="o">()</span> <span class="o">{</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">foo</span><span class="o">.</span><span class="na">getStateChange</span><span class="o">())</span> <span class="o">{</span>
				<span class="k">return</span> <span class="s">&#34;Some string&#34;</span><span class="o">;</span>
			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
				<span class="k">return</span> <span class="s">&#34;Some string else&#34;</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
	<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>So you have two classes which do something based on some boolean coming from a class. So what you can do in this case, simply extract out that change in state.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">
	<span class="kd">class</span> <span class="nc">Foo</span> <span class="kd">implements</span> <span class="n">Base</span> <span class="o">{</span>
		<span class="kd">public</span> <span class="n">String</span> <span class="nf">getMyString</span><span class="o">()</span> <span class="o">{</span>
			<span class="k">return</span> <span class="s">&#34;Some string&#34;</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">class</span> <span class="nc">Bar</span> <span class="kd">implements</span> <span class="n">Base</span> <span class="o">{</span>
		<span class="kd">public</span> <span class="n">String</span> <span class="nf">getMyString</span><span class="o">()</span> <span class="o">{</span>
			<span class="k">return</span> <span class="s">&#34;Some string else&#34;</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">interface</span> <span class="nc">Base</span> <span class="o">{</span>
		<span class="n">String</span> <span class="nf">getMyString</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="kd">class</span> <span class="nc">FooStrategy</span> <span class="o">{</span>

		<span class="kd">public</span> <span class="kd">static</span> <span class="n">Base</span> <span class="nf">getMeAClass</span><span class="o">(</span><span class="kd">enum</span> <span class="n">classChooser</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">switch</span> <span class="n">classChooser</span> <span class="o">{</span>
				<span class="k">case</span> <span class="n">classChooser</span><span class="o">.</span><span class="na">FOO</span> <span class="o">:</span> <span class="k">return</span> <span class="k">new</span> <span class="n">Foo</span><span class="o">();</span> <span class="k">break</span><span class="o">;</span>
				<span class="k">case</span> <span class="n">classChooser</span><span class="o">.</span><span class="na">BAR</span> <span class="o">:</span> <span class="k">return</span> <span class="k">new</span> <span class="n">Bar</span><span class="o">();</span> <span class="k">break</span><span class="o">;</span>
				<span class="k">default</span> <span class="o">:</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">//yeah yeah I know but I&#39;m writing this in notepad... :)
</span><span class="c1"></span>			<span class="o">}</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">class</span> <span class="nc">SomeUserClass</span> <span class="o">{</span>
		<span class="kd">private</span> <span class="n">Base</span> <span class="n">foo</span><span class="o">;</span>

		<span class="kd">public</span> <span class="nf">SomeUserClass</span><span class="o">()</span> <span class="o">{</span>
			<span class="n">foo</span> <span class="o">=</span> <span class="n">FooStrategy</span><span class="o">.</span><span class="na">getMeAClass</span><span class="o">(</span><span class="n">ClassChooser</span><span class="o">.</span><span class="na">FOO</span><span class="o">);</span>
		<span class="o">}</span>

		<span class="kd">public</span> <span class="n">String</span> <span class="nf">someMethod</span><span class="o">()</span> <span class="o">{</span>
			<span class="k">return</span> <span class="n">foo</span><span class="o">.</span><span class="na">getMyString</span><span class="o">();</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">class</span> <span class="nc">SomeOtherUserClass</span> <span class="o">{</span>
		<span class="kd">private</span> <span class="n">Base</span> <span class="n">bar</span><span class="o">;</span>

		<span class="kd">public</span> <span class="nf">SomeUserClass</span><span class="o">()</span> <span class="o">{</span>
			<span class="n">bar</span> <span class="o">=</span> <span class="n">FooStrategy</span><span class="o">.</span><span class="na">getMeAClass</span><span class="o">(</span><span class="n">ClassChooser</span><span class="o">.</span><span class="na">BAR</span><span class="o">);</span>
		<span class="o">}</span>

		<span class="kd">public</span> <span class="n">String</span> <span class="nf">someMethod</span><span class="o">()</span> <span class="o">{</span>
			<span class="k">return</span> <span class="n">bar</span><span class="o">.</span><span class="na">getMyString</span><span class="o">();</span>
		<span class="o">}</span>
	<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Now I know this looks like a lot of more code. However imagine this on a much larger scale with lots of implementations for Foo and Bar. Your if statements will get very convulated very quickly. This way you abstract away the choice into a Factory. And you can add as many implementations of Base as you like with as many variants as you like without changing the logic anywhere else but the Factory and the Enum. And the Enum could be a Configuration file and you do something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">	<span class="kd">public</span> <span class="kd">static</span> <span class="n">Base</span> <span class="nf">getMeAClass</span><span class="o">(</span><span class="n">String</span> <span class="n">className</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">//Where className could be coming from a configuration file
</span><span class="c1"></span>        <span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">className</span><span class="o">);</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">Base</span><span class="o">)</span> <span class="n">clazz</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
	<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This way you don&rsquo;t even need the Enum anymore. Just use some configuration to determine what class you need at which point in your implementation without using an If statement at all.</p>
<p>Hope this helps.</p>
<p>I whipped this up from memory so please feel free to tell me if I missed something or have a syntax error in there somewhere.</p>
<p>As always,</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>]]></description>
    </item>
    
    <item>
      <title>How to check content header on unknown number of items – Python</title>
      <link>https://skarlso.github.io/2014/02/11/how-to-check-content-header-on-unknown-number-of-items-python/</link>
      <pubDate>Tue, 11 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/02/11/how-to-check-content-header-on-unknown-number-of-items-python/</guid>
      <description><![CDATA[<p>Hello guys.</p>
<p>I&rsquo;d like to share a little something with you. It&rsquo;s what I cooked up in Python to check an unknown number of content items in a web application.</p>
<p>Basically the script runs from a script folder under Grails. It goes through all the configured folders where there is static content like images, javascript, css and so on and so forth.</p>
<p>And then with curl it calls these items up in using their respective paths'. This works best on localhost if you have your local environment configured to access these elements because in some places direct access is restricted.</p>
<p>This script only check static content. Dynamically generated content would have to be hard coded to check.</p>
<p>It only generated a file currently with ERROR on a not match an success on match and not found if it encounters an item which it doesn&rsquo;t know about.</p>
<p>So without further ado. The Script:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="ch">#!/usr/bin/python</span>

<span class="kn">import</span> <span class="nn">pycurl</span><span class="o">,</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">urllib</span>

<span class="k">class</span> <span class="nc">Storage</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">contents</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>

    <span class="k">def</span> <span class="nf">store</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">buf</span><span class="p">):</span>
	<span class="k">if</span> <span class="s1">&#39;Content-Type&#39;</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">contents</span> <span class="o">=</span> <span class="n">buf</span>

    <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">contents</span>

<span class="c1">#print retrieved_headers</span>

<span class="n">filesInDir</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">headers</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">headerRestrictions</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;.css&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: text/css&#39;</span><span class="p">,</span> <span class="s1">&#39;.jpg&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: image/jpeg&#39;</span><span class="p">,</span> <span class="s1">&#39;.ico&#39;</span><span class="p">:</span> <span class="s1">&#39;image/vnd.microsoft.icon&#39;</span><span class="p">,</span> <span class="s1">&#39;.html&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: text/html&#39;</span><span class="p">,</span> <span class="s1">&#39;.js&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: application/javascript&#39;</span><span class="p">,</span> <span class="s1">&#39;.gif&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: image/gif&#39;</span><span class="p">,</span> <span class="s1">&#39;.png&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: image/png&#39;</span><span class="p">,</span> <span class="s1">&#39;.swf&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: application/x-shockwave-flash&#39;</span><span class="p">,</span> <span class="s1">&#39;.json&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: application/json&#39;</span><span class="p">,</span> <span class="s1">&#39;.htc&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: text/x-component&#39;</span><span class="p">,</span> <span class="s1">&#39;.xml&#39;</span><span class="p">:</span> <span class="s1">&#39;Content-Type: application/xml&#39;</span><span class="p">}</span>

<span class="k">for</span> <span class="n">dirname</span><span class="p">,</span> <span class="n">dirnames</span><span class="p">,</span> <span class="n">filenames</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="s1">&#39;../web-app&#39;</span><span class="p">):</span>
    <span class="c1"># editing the &#39;dirnames&#39; list will stop os.walk() from recursing into there.</span>
    <span class="k">if</span> <span class="s1">&#39;.git&#39;</span> <span class="ow">in</span> <span class="n">dirnames</span><span class="p">:</span>
        <span class="c1"># don&#39;t go into any .git directories.</span>
        <span class="n">dirnames</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;.git&#39;</span><span class="p">)</span>

    <span class="k">if</span> <span class="s1">&#39;WEB-INF&#39;</span> <span class="ow">in</span> <span class="n">dirnames</span><span class="p">:</span>
        <span class="c1"># don&#39;t go into any WEB-INF directories.</span>
        <span class="n">dirnames</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;WEB-INF&#39;</span><span class="p">)</span>

    <span class="k">if</span> <span class="s1">&#39;test&#39;</span> <span class="ow">in</span> <span class="n">dirnames</span><span class="p">:</span>
        <span class="c1"># don&#39;t go into any test directories.</span>
        <span class="n">dirnames</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">)</span>

    <span class="k">if</span> <span class="s1">&#39;META-INF&#39;</span> <span class="ow">in</span> <span class="n">dirnames</span><span class="p">:</span>
        <span class="c1"># don&#39;t go into any META-INF directories.</span>
        <span class="n">dirnames</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;META-INF&#39;</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">filenames</span><span class="p">:</span>
	<span class="n">trimmedDir</span> <span class="o">=</span> <span class="n">dirname</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;web-app/&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
	<span class="n">trimmedDir</span> <span class="o">=</span> <span class="n">trimmedDir</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;../&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
	<span class="n">filesInDir</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">trimmedDir</span><span class="p">,</span> <span class="n">filename</span><span class="p">))</span>
    <span class="c1">#    print os.path.join(dirname, filename)</span>

<span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;headersandfiles.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">fileName</span> <span class="ow">in</span> <span class="n">filesInDir</span><span class="p">:</span>
    <span class="n">retrieved_body</span> <span class="o">=</span> <span class="n">Storage</span><span class="p">()</span>
    <span class="n">retrieved_headers</span> <span class="o">=</span> <span class="n">Storage</span><span class="p">()</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">pycurl</span><span class="o">.</span><span class="n">Curl</span><span class="p">()</span>
    <span class="n">fileName</span> <span class="o">=</span> <span class="n">fileName</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">,</span> <span class="s2">&#34;%20&#34;</span><span class="p">)</span>
    <span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;http://localhost:8080/</span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="n">fileName</span>
    <span class="n">c</span><span class="o">.</span><span class="n">setopt</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">URL</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
    <span class="n">c</span><span class="o">.</span><span class="n">setopt</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">WRITEFUNCTION</span><span class="p">,</span> <span class="n">retrieved_body</span><span class="o">.</span><span class="n">store</span><span class="p">)</span>
    <span class="n">c</span><span class="o">.</span><span class="n">setopt</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">HEADERFUNCTION</span><span class="p">,</span> <span class="n">retrieved_headers</span><span class="o">.</span><span class="n">store</span><span class="p">)</span>
    <span class="n">c</span><span class="o">.</span><span class="n">perform</span><span class="p">()</span>
    <span class="n">c</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
    <span class="n">fileLine</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
    <span class="n">fileNameBase</span><span class="p">,</span> <span class="n">fileExtension</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">splitext</span><span class="p">(</span><span class="n">fileName</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">headerRestrictions</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="n">fileExtension</span><span class="p">):</span>
<span class="c1">#	print &#34;Header:%s, Content:%s&#34; % (headerRestrictions[fileExtension], retrieved_headers.__str__())</span>
        <span class="n">fileLine</span> <span class="o">=</span> <span class="s2">&#34;CORRECT: Content: </span><span class="si">%s</span><span class="s2">; Header: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="n">retrieved_headers</span><span class="p">)</span> <span class="k">if</span> <span class="n">headerRestrictions</span><span class="p">[</span><span class="n">fileExtension</span><span class="p">]</span> <span class="o">==</span> <span class="n">retrieved_headers</span><span class="o">.</span><span class="fm">__str__</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="k">else</span> <span class="s2">&#34;ERROR: Content: </span><span class="si">%s</span><span class="s2">; Header: </span><span class="si">%s</span><span class="s2">; URL: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="n">retrieved_headers</span><span class="p">,</span> <span class="s2">&#34;http://localhost:8080/</span><span class="si">%s</span><span class="se">\n</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">fileName</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
	<span class="n">fileLine</span> <span class="o">=</span> <span class="s2">&#34;NOT FOUND: Content: </span><span class="si">%s</span><span class="s2">; Header: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="n">retrieved_headers</span><span class="p">)</span>

    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">fileLine</span><span class="p">)</span>
    <span class="n">headers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">retrieved_headers</span><span class="o">.</span><span class="fm">__str__</span><span class="p">())</span>

<span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>Hope you like it. Feel free to improve however you want.</p>
<p>Thanks for reading,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Why you should care about the quality of your test code</title>
      <link>https://skarlso.github.io/2013/11/02/why-you-should-care-about-the-quality-of-your-test-code/</link>
      <pubDate>Sat, 02 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/11/02/why-you-should-care-about-the-quality-of-your-test-code/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>Today I would like to talk to you about something interesting I was talking about with a developer friend.</p>
<p>We talked about the quality of test code.</p>
<p>He said. And I will quote this.&ldquo;Why should we care? It&rsquo;s not production code. We aren&rsquo;t giving it to the customer.&rdquo;</p>
<p>There are a few reasons why you are going to get a slap in the face for a sentence like this. And let&rsquo;s clarify here that we are talking about unit and functional tests as well. It shouldn&rsquo;t matter what tests you are thinking about.</p>
<p><strong>Reason for a Slap #1</strong></p>
<p>If a new comer comes to the company ( and don&rsquo;t tell me that&rsquo;s not happening so frequently ) then there are a few very good ways how he can learn to work with the new system. The first and almost best way to do so is. to look at the tests. Because the tests are representing your system. And how will it look like if the tests are in a bad shape? What will his or her thoughts be?</p>
<p>a. Wow what nice people what nice code. This looks fantastic. I&rsquo;m sure they are a bunch of people who care very much about code and practices and the quality of the product.</p>
<p>b. Wow this is amazing. I&rsquo;m sure I will learn a lot about good coding practices here and I will have fun with a bunch of very clever people.</p>
<p>c. Wow what the hell is this piece of cr*p? How the hell did I end up here? What are these people? A bunch of neanderthals? What does this even do? Where did it come from and why?</p>
<p>I think we can agree on what his thoughts will be. And on top of that he will have a very hard time learning the code and what it does.</p>
<p><strong>Reason for a Slap #2</strong></p>
<p>Another reason is because you think that you write it down once and then you can forget about it. Well guess again. That&rsquo;s not how things work in the software development word. You WILL have to go back to it eventually and then you will curse all hell for begin such an idiot about it not to factor out that one method that would have made your life, and everybody elses, a bit easier.</p>
<p>Even after a week or two you won&rsquo;t remember how and why you wrote what you wrote and then you will be in a whole new world of hurt. You will have a very hard time finiding out the things you did and then trying to backtrack your steps to a place where you have some recollections.</p>
<p><strong>Reason for a Slap #3</strong></p>
<p>It&rsquo;s like grammar. You think it doesn&rsquo;t matter that you misspelled a word or two in an error message. Or that you have a bad name for a method or a really really critical grammatical error in a catch sentence? You think it doesn&rsquo;t matter since it&rsquo;s not affecting the logic of your code? Well think again. You are right in that it doesn&rsquo;t affect the logic of your code ( as long as you constantly make the same grammatical error in a sentence ) but it will affect how YOU personally look like.</p>
<p>It will affect your profession. The way people think and talk about you. They won&rsquo;t think that you are a professional even though your logic is solid. They will think that you are sloppy and careless. And the same goes for the quality of your tests.</p>
<p><strong>Reason for a Slap #4</strong></p>
<p>Quality can determine the solidness of the logic in the test. If your quality is bad you might actually test the bad thing. Your test might actually not do what you think since you can&rsquo;t even figure it out. Your test might be doing something entirely different and you wouldn&rsquo;t even notice.</p>
<p>And a fautly test leaves you with a false positive and a potential very serious bug on your hand which you thought you had covered.</p>
<p><strong>Final Slap ( I mean thought )</strong></p>
<p>So. the quality of your tests, even if you won&rsquo;t give them to your customer, matter for you. They matter for your company, your image and your fellow developers, testers. They will determine their view of you who wrote them and of your abilities in ways you didn&rsquo;t even think of.</p>
<p>Please care. Save a test or two. Donate to the Test Trust Fund(tm), TTF today. Call 555-12234-Slap and be the one who cares.</p>
<p>As always, thanks for reading,</p>
<p>Have a nice day!</p>
<p>Gergely</p>
]]></description>
    </item>
    
    <item>
      <title>Cucumber Test Name and Tags on Feature</title>
      <link>https://skarlso.github.io/2013/04/15/cucumber-test-name-and-tags-on-feature/</link>
      <pubDate>Mon, 15 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/04/15/cucumber-test-name-and-tags-on-feature/</guid>
      <description><![CDATA[<p>Hello everybody.</p>
<p>I would like to show you a gem today that I found out.</p>
<p>Apparently there is no easy way to get to the name of an executing cucumber scenario in cucumber-jvm</p>
<p>You can try something like that:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@After</span> <span class="c1">//this is cucumbers @Afters
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">afterExecution</span><span class="o">(</span><span class="n">Scenario</span> <span class="n">scenario</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">logger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">&#34;The status of the test is: &#34;</span> <span class="o">+</span> <span class="n">scenario</span><span class="o">.</span><span class="na">getStatus</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>But that isn&rsquo;t giving you too much now is it? And the API of scenario is as small as it can get. It offers you four options:</p>
<ul>
<li>Ember</li>
<li>getStatus</li>
<li>isFailed</li>
<li>write</li>
</ul>
<p>That doesn&rsquo;t help me. I wanted to get the name of the executed feature and the tags on that particular feature. I thought that&rsquo;s got to be as easy as just getting a scenario accessing the feature and get the tags. Hooooowww boy I was wrong.</p>
<p>I ended up with this..</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Field</span> <span class="n">f</span> <span class="o">=</span> <span class="n">scenario</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&#34;reporter&#34;</span><span class="o">);</span>
<span class="n">f</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="n">JUnitReporter</span> <span class="n">reporter</span> <span class="o">=</span> <span class="o">(</span><span class="n">JUnitReporter</span><span class="o">)</span> <span class="n">f</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">scenario</span><span class="o">);</span>

<span class="n">Field</span> <span class="n">executionRunnerField</span> <span class="o">=</span> <span class="n">reporter</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&#34;executionUnitRunner&#34;</span><span class="o">);</span>
<span class="n">executionRunnerField</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="n">ExecutionUnitRunner</span> <span class="n">executionUnitRunner</span> <span class="o">=</span> <span class="o">(</span><span class="n">ExecutionUnitRunner</span><span class="o">)</span> <span class="n">executionRunnerField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">reporter</span><span class="o">);</span>

<span class="n">Field</span> <span class="n">cucumberScenarioField</span> <span class="o">=</span> <span class="n">executionUnitRunner</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&#34;cucumberScenario&#34;</span><span class="o">);</span>
<span class="n">cucumberScenarioField</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="n">CucumberScenario</span> <span class="n">cucumberScenario</span> <span class="o">=</span> <span class="o">(</span><span class="n">CucumberScenario</span><span class="o">)</span> <span class="n">cucumberScenarioField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">executionUnitRunner</span><span class="o">);</span>

<span class="n">Field</span> <span class="n">cucumberBackgroundField</span> <span class="o">=</span> <span class="n">cucumberScenario</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&#34;cucumberBackground&#34;</span><span class="o">);</span>
<span class="n">cucumberBackgroundField</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="n">CucumberBackground</span> <span class="n">cucumberBackground</span> <span class="o">=</span> <span class="o">(</span><span class="n">CucumberBackground</span><span class="o">)</span> <span class="n">cucumberBackgroundField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">cucumberScenario</span><span class="o">);</span>

<span class="n">Field</span> <span class="n">cucumberFeatureField</span> <span class="o">=</span> <span class="n">cucumberBackground</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getSuperclass</span><span class="o">().</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&#34;cucumberFeature&#34;</span><span class="o">);</span>
<span class="n">cucumberFeatureField</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="n">CucumberFeature</span> <span class="n">cucumberFeature</span> <span class="o">=</span> <span class="o">(</span><span class="n">CucumberFeature</span><span class="o">)</span> <span class="n">cucumberFeatureField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">cucumberBackground</span><span class="o">);</span>
</code></pre></td></tr></table>
</div>
</div><p>Ohhhhh yes! The fields which I wanted were all private and not accessible. I&rsquo;m sure there was a reason behind this decision but if it was sensible it eludes me. But in the world of programming nothing is impossible they say so there.</p>
<p>In cucumberFeature there will be everything what you need. Tags, Names, Tests, Execution time. Everything.</p>
<p>I know that cucumber runs with jUnit so if there is a better way to do this please for the love of my sanity share it with me.</p>
<p>Thank you for reading.</p>
<p>And as always,</p>
<p>Have a nice day.</p>
<p>G.</p>
]]></description>
    </item>
    
    <item>
      <title>Groovy and Grails course summary</title>
      <link>https://skarlso.github.io/2013/04/11/groovy-and-grails-course-summary/</link>
      <pubDate>Thu, 11 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/04/11/groovy-and-grails-course-summary/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>I attended a 4 day course of Groovy and Grails and this is my attempt at writing up a summary to see how much I retained. I&rsquo;ll try to do this from the top of my head without peaking at my notes.</p>
<p>So let&rsquo;s begin.</p>
<p><strong>Introductions</strong></p>
<p>First of all, introductions. The course was held by Peter Ledbrook. He is the guy who wrote <a href="http://www.amazon.co.uk/Grails-Action-Peter-Ledbrook/dp/1617290963/ref=sr_1_2?ie=UTF8&amp;qid=1365713080&amp;sr=8-2&amp;keywords=peter+ledbrook" title="Grails in Action">Grails in Action</a>. He is awesome, go check him out. :: <a href="https://twitter.com/pledbrook" title="Twitter for Peter">Twitter</a> ::</p>
<p>The place where it was held is <a href="http://skillsmatter.com/" title="Skills Matter">Skillsmatter</a>. Which of course is known to all, if not, go check them out as well!</p>
<p><strong>Day One</strong></p>
<p>Day one and two were about Groovy. We were faced with the quirks and hinges of the language. First tasks were Closures and Currying both of which were really interesting. A bit of functional thinking mixed into the soup.</p>
<p>The course was divided into Peter telling us about stuff for 1:30 hours and then 1:00 hour lab work which really made the whole thing interactive. We could ask questions while he was talking which I&rsquo;m sure was very distracting but I hope he is used to it by now. 😉</p>
<p>The tasks which we faced I&rsquo;m sure were no real challenge for somebody who was used to thinking with closures and functions. But for us they were very intriguing.</p>
<p>For example:</p>
<p>Convert this class to it&rsquo;s groovy eq.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NumberHelper</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">findPositives</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span> <span class="n">positivesList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">numbers</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">)</span> <span class="o">{</span>
                <span class="n">positivesList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">]));</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">positivesArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">positivesList</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">positivesArray</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">positivesArray</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">((</span><span class="n">Integer</span><span class="o">)</span> <span class="n">positivesList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)).</span><span class="na">intValue</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">positivesArray</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Which basically became:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy"><span class="kt">def</span> <span class="nf">findPositive</span><span class="o">(</span><span class="kt">def</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">numbers</span><span class="o">.</span><span class="na">findAll</span><span class="o">(</span> <span class="o">{</span> <span class="n">it</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span>  <span class="o">}</span> <span class="o">)</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>That&rsquo;s pretty damn awesome.</p>
<p>For quite some time now functional languages are re-living their golden age. There are various reasons for that which I won&rsquo;t list here. But it has mainly to do with scalability, concurrency and threaded programming. Also the need to eliminate boilerplate code is bigger then ever. I guess people got fed up with Java being so talkative.</p>
<p>So we moved on learning a lot about groovy and its power. We also learned some good practices from Peter what to do and what not to do. For example a line he always repeated is that he hates how a function cannot exist without a class wrapped around it. Another important thing is, which we never ever should forget, that closures are Closures. Which means they aren&rsquo;t functions. They are of the type Closure.</p>
<p>And that we shouldn&rsquo;t use Closures just because we can. Be sensible. If a method can achieve your task, use a method.</p>
<p><strong>Day Two</strong></p>
<p>On day 2 we got into meta-programming. That&rsquo;s when the real fun started. Groovy is not only powerful and lightweight it also gives the ability to change its behaviour. Meta programming is sort of a bit new to me. So this was my first definitive intro to it. But I must say that it blew me away. The capabilities are limitless.</p>
<p>There is a class called Expando in groovy which can be used to create virtually anything on the fly what you want.</p>
<p>For example look at this code ::</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy"><span class="kt">def</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Expando</span><span class="o">(</span><span class="nl">name:</span> <span class="s2">&#34;Jake&#34;</span><span class="o">,</span> <span class="nl">age:</span> <span class="mi">24</span><span class="o">)</span>
<span class="n">println</span> <span class="n">p</span>

<span class="c1">//Add properties
</span><span class="c1"></span><span class="n">p</span><span class="o">.</span><span class="na">gender</span> <span class="o">=</span> <span class="s2">&#34;Male&#34;</span>
<span class="n">println</span> <span class="n">p</span><span class="o">.</span><span class="na">name</span>

<span class="c1">//Add metods
</span><span class="c1">//Override the default toString at runtime.
</span><span class="c1"></span><span class="n">p</span><span class="o">.</span><span class="na">toString</span> <span class="o">=</span> <span class="o">{</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="s2">&#34;${name} (${age})&#34;</span> <span class="o">}</span>
<span class="n">println</span> <span class="n">p</span>

<span class="c1">//Learn how groovy resolves names - &gt; How does it find age.
</span><span class="c1"></span><span class="n">p</span><span class="o">.</span><span class="na">addYears</span> <span class="o">=</span> <span class="o">{</span> <span class="n">years</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">age</span> <span class="o">+=</span> <span class="n">years</span> <span class="o">}</span>
<span class="n">p</span><span class="o">.</span><span class="na">addYears</span><span class="o">(</span><span class="mi">25</span><span class="o">)</span>
<span class="n">println</span> <span class="n">p</span>
</code></pre></td></tr></table>
</div>
</div><p>Neat hmm? Just create expando and build up the class as you go however you want to use it.</p>
<p>And you can do this jazz to other, normal classes as well. You can add properties and methods at runtime by implementing the propertyMissing and methodMissing methods. In them afterwards you can specify some custom behaviour you would like to see. By implementing these guys you can directly control what&rsquo;s happening to your class. Who is calling it how and where and why.</p>
<p>To grasp the power of metacoding and the abilities with which closures provided us with took a day to properly go over. So we moved on.</p>
<p><strong>Day Three</strong></p>
<p>So groovy was over. The time has come to move on and venture into the foggy land of Grails. Turned out it wasn&rsquo;t so foggy after all.</p>
<p>Grails is a rapid prototyping kind of a framework. It allows you to set up an application with a blink of an eye. And provides conventions over configuration which is a really good thing to have. But as the day was going by we realised that we would find ourself not once but many times in the bubbling boils of the underbelly of /conf.</p>
<p>Again, fortunately, it wasn&rsquo;t really hard. The config was groovy and it was pretty straight forward too.</p>
<p>Our third day mostly took as off to explore scaffolding, dynamic &amp; static as well, and the interesting land of GORM Peter showed us the power of grails to create a CRUD application with in a matter of seconds / minutes ( depending on how fast your machine is ) with a fairly nice view. These types of application are usually not accepted of course as an end product. For that you need to thinker a bit here and there.</p>
<p>But things like admin portal are easily put together. So use it often and use it will and get it to know how it works.</p>
<p>In the land of GORM we explored the 4 different possibilities of data retriaval and generally how everything maps together and how GORM work with ORM.</p>
<p>The four different retrieval capabilities are:</p>
<ul>
<li>Where clauses</li>
<li>HQL (Hybernate Query Language)</li>
<li>Criteria searches</li>
<li>Dynamic finder methods</li>
</ul>
<p>Each of which we found very interesting in there own respective ways.</p>
<p>Example of a dynamic finder::</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy"><span class="k">assert</span> <span class="n">Account</span><span class="o">.</span><span class="na">findAllBy</span><span class="o">*</span><span class="n">PropertyName</span><span class="o">**</span><span class="n">Modifier</span><span class="o">*(</span><span class="n">Parameters</span><span class="o">).</span><span class="na">size</span> <span class="o">==</span> <span class="mi">2</span>
</code></pre></td></tr></table>
</div>
</div><p>Where propertyName is the name of the property to find by, modifier can be a sql&rsquo;s Like for example.</p>
<p>So this could become something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy"><span class="k">assert</span> <span class="n">Hitman</span><span class="o">.</span><span class="na">findAllByNameLike</span><span class="o">(</span><span class="s2">&#34;Agent %&#34;</span><span class="o">)</span> <span class="o">==</span> <span class="mi">15</span>
</code></pre></td></tr></table>
</div>
</div><p>That day was really knowledge packed. I don&rsquo;t say I remember everything but luckily I wrote up some notes and I know what and where to look for if I would be in need of something.</p>
<p><strong>Day Four</strong></p>
<p>On the last day everybody was pretty much exhausted. It takes a lot to learn all that from 9 to 5 for 4 days. And Peter gave his best to staff that stuff into our heads and as much as possible of it. I think he did a pretty good job.</p>
<p>Last day was all about Controllers, Commands, Models, Views and GSPs and BootStrap config, Environment changes durring start up, the configurability of the whole framework, messages, templates, internationalisation and many thing more which can be easily put together.</p>
<p>It was pretty interesting. GSPs have similarities to JSPs but retained only the good parts. And although you can do JSP stuff in GSPs as well with nice embedded tags you have the ability to actually create a nice page which won&rsquo;t be that big a maintenance nightmare.</p>
<p>Peter very much pressed the fact that the Controllers should be your only entry point from HTML requests and the views should be the only output of it. The controllers shouldn&rsquo;t be throwing around business logic they should only act as proxies between the outer shell and the inner layering.</p>
<p>I think I understood most of the stuff which we were going through. Again, it was pretty straight forward. The application of it is what need practice.</p>
<p>Durring the course we created several applications. With dynamic scaffolding as well as static. We created and edited our own views and gsps. Created our own Controllers and what nots. One thing is clear. Grails let&rsquo;s you progress a hell of a lot in a matter of minutes.</p>
<p>And we were also talking about testing of course. Using Geb, Spock and the unit testing capabilities of Grails. All very powerful stuff. Spock has some impressive Mocking powers in junction with the good ol' Given When Then structure. If done correctly the test can be very fast and robust.</p>
<p>As final words we talked about plugins and the testing of Views and a bit more configuration.</p>
<p><strong>Closing words</strong></p>
<p>So all in all the course was excellent. Peter did a very good job of introducing use to Grails and Groovy. It&rsquo;s a very good framework to build upon with a powerful language at our disposal. I&rsquo;m pretty certain that Grails will evolve even more and be a great asset to people who choose to develop with it. Handle with Care though. Because no matter how awesome a tool is, it can always be used for bad purposes. 😉</p>
<p>As always,</p>
<p>Thanks for reading and have a nice day / evening.</p>
]]></description>
    </item>
    
    <item>
      <title>What you really need to know to become a Testing Expert</title>
      <link>https://skarlso.github.io/2013/01/21/what-you-really-need-to-become-a-testing-expert/</link>
      <pubDate>Mon, 21 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/01/21/what-you-really-need-to-become-a-testing-expert/</guid>
      <description><![CDATA[<p>Hello Everybody.</p>
<p>Today I would like to show you what you need to become a Testing expert.</p>
<p>If you had noticed I deliberately left out the word Software. Why? Because becoming and expert in Testing Anything has the same root as becoming an expert to test software. And for that let me take you back to a Galaxy Far Far Away in Time AND Space.</p>
<p><strong>The beginnings.</strong></p>
<p>I went to school in Oroszlany, my home town in Hungary. My official Technical title would be Mechanical Testing Engineer. I had the luck that most things which were thought at that school and I liked were thought by people I liked too and were clever in their respective fields. Like Pneumatics, Metallurgy, Mechanics, Chemistry these were all really awesome fields. To this day I don&rsquo;t know why I haven&rsquo;t ended up in some lab testing the breaking point of metals and the capacity of various chemicals.</p>
<p>But ahh well.. I still remember some of the ISO standards we had to memorize. Like in Metallurgy the Charpy pendulum impact test which we loved so very much to perform. The ISO standard for that is ISO 148-1:2009. Now let me see if I still remember that correctly. Yes! I&rsquo;ve still got it. So where am I going with this?</p>
<p><strong>Moving on.</strong></p>
<p>Back then we performed a lot of operations on various metals and a lot of chemical testings and the like. The most important part of every performed test was always to have insight. Insight in the structure of the metal. How it was made, how it was moulded and then shaped and heated and cooled and so on and so forth. We had to know EVERYTHING about the creation of this element that we had to test. Without that knowledge you could of corse still perform the test but you didn&rsquo;t had any additional information why that test was useful or what it proved. Sure, you could have looked at the specification of the metal but that didn&rsquo;t give you anything about the inner structure of it.</p>
<p>That was provided to you by the knowledge of the procedure that created it.</p>
<p>You get where I&rsquo;m going with this.</p>
<p><strong>Insight</strong></p>
<p>So back to software testing. What is the single most important thing that gives you insight, that gives you the edge to be a professional? Knowing the development process. Knowing architecture. Knowing programming. Knowing the language and its capabilities and limitations.</p>
<p>Sure you can be a good manual Tester. Of course you can be an excellent Exploratory Tester. But look at the others. James Marcus Bach. Alan Richardson. Michael Bolton and I could go on. They all know programming. They all know it by heart and they could be exceptional programmers if they wanted to. They already know that in order to get very good at testing something you must have an insight on the subject matter. You can&rsquo;t test it thoughtfully without knowing its limitations its rules that it obeys its exploits that you can use.</p>
<p><strong>Last words.</strong></p>
<p>So in order to excel at your craft of test you have to have insight of the subject of the test. You can still become good but you always have to aim high don&rsquo;t you? A friend of mine reply to one of my tweets with a really good sentence:&quot;.and then you realize that being the best in one implies being excellent in the other.&quot;. Exactly. Because the two are interconnected. They aren&rsquo;t actually two. It&rsquo;s one. It&rsquo;s called Engineering.</p>
<p>Have a nice day and as always,</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How to eliminate a parameter boom</title>
      <link>https://skarlso.github.io/2012/10/09/how-to-eliminate-a-parameter-boom/</link>
      <pubDate>Tue, 09 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/10/09/how-to-eliminate-a-parameter-boom/</guid>
      <description><![CDATA[<p>Hello folks.</p>
<p>Today I want to write about a little trick I learned.</p>
<p>If you are working with legacy code and you don&rsquo;t have the chance to eliminate core design problems, you can use this little pattern to help you out.</p>
<p><strong>Problem</strong></p>
<p>Problem is that you have a class that has a gazillion collaborators and at some point in time one of the clever devs thought it would be a cool idea to do dependancy injection via the constructor. We all know that doing this makes the class immutable which is very good for a number of reasons. However it doesn&rsquo;t provide a flexible solution if you want to leave out one or two collabs. For that your would have to create Adapter constructors and chain them upwards which would get very ugly very fast. While using JavaBeans getters and setters can leave your class in a harmful state like not at all or partially initialised.</p>
<p>So what&rsquo;s a good solution then?</p>
<p><strong>Solution</strong></p>
<p>One possible solution would be to use some kind of initialisation framework like Springs @Autowired. But cluttering your classes with that isn&rsquo;t really pretty either. But it&rsquo;s A solution.</p>
<p>Another solution is the usage of a builder pattern.</p>
<p>Consider this class:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">VeryImportantService</span> <span class="o">{</span>

        <span class="kd">public</span> <span class="nf">VeryImportantService</span><span class="o">(</span><span class="n">CollabOne</span> <span class="n">collabOne</span><span class="o">,</span> <span class="n">CollabTwo</span> <span class="n">collabTwo</span><span class="o">,</span> <span class="n">CollabThree</span> <span class="n">collabThree</span><span class="o">,</span> <span class="n">CollabFour</span> <span class="n">collabFour</span><span class="o">,</span>
            <span class="n">CollabFive</span> <span class="n">collabFive</span><span class="o">,</span> <span class="n">CollabSix</span> <span class="n">collabSix</span><span class="o">)</span> <span class="o">{</span>
            <span class="o">.</span>
            <span class="o">.</span>
            <span class="o">.</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Don&rsquo;t forget that we want these to be optional. I would like to leave out two or three here and there.</p>
<p>The builder let&rsquo;s you do that. It looks something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">VeryImportantService</span> <span class="o">{</span>

        <span class="kd">private</span> <span class="n">CollabOne</span> <span class="n">collabOne</span><span class="o">;</span>
        <span class="kd">private</span> <span class="n">CollabTwo</span> <span class="n">collabTwo</span><span class="o">;</span>
        <span class="kd">private</span> <span class="n">CollabThree</span> <span class="n">collabThree</span><span class="o">;</span>
        <span class="kd">private</span> <span class="n">CollabFour</span> <span class="n">collabFour</span><span class="o">;</span>
        <span class="kd">private</span> <span class="n">CollabFive</span> <span class="n">collabFive</span><span class="o">;</span>
        <span class="kd">private</span> <span class="n">CollabSix</span> <span class="n">collabSix</span><span class="o">;</span>


        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nf">Builder</span><span class="o">()</span> <span class="o">{</span>
            <span class="kd">private</span> <span class="n">CollabOne</span> <span class="n">collabOne</span><span class="o">;</span>
            <span class="kd">private</span> <span class="n">CollabTwo</span> <span class="n">collabTwo</span><span class="o">;</span>
            <span class="kd">private</span> <span class="n">CollabThree</span> <span class="n">collabThree</span><span class="o">;</span>
            <span class="kd">private</span> <span class="n">CollabFour</span> <span class="n">collabFour</span><span class="o">;</span>
            <span class="kd">private</span> <span class="n">CollabFive</span> <span class="n">collabFive</span><span class="o">;</span>
            <span class="kd">private</span> <span class="n">CollabSix</span> <span class="n">collabSix</span><span class="o">;</span>

            <span class="kd">public</span> <span class="nf">Builder</span><span class="o">()</span> <span class="o">{}</span>

            <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">collabOne</span><span class="o">(</span><span class="n">CollabOne</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">this</span><span class="o">.</span><span class="na">collabOne</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
                <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">collabTwo</span><span class="o">(</span><span class="n">CollabTwo</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">this</span><span class="o">.</span><span class="na">collabTwo</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
                <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="o">.</span>
            <span class="o">.</span>
            <span class="o">.</span>

            <span class="kd">public</span> <span class="n">VeryImportantService</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="n">VeryImportantService</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
            <span class="o">}</span>

        <span class="o">}</span>

        <span class="c1">//private constructor
</span><span class="c1"></span>        <span class="kd">private</span> <span class="nf">VeryImportantService</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">collabOne</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">collabOne</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">collabTwo</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">collabTwo</span><span class="o">;</span>
            <span class="o">.</span>
            <span class="o">.</span>
            <span class="o">.</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Now. calling this would look something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="n">VeryImportantService</span> <span class="n">veryImportantService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">VeryImportantService</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">collabOne</span><span class="o">(</span><span class="n">someValueOne</span><span class="o">).</span><span class="na">collabTwo</span><span class="o">(</span><span class="n">someValueTwo</span><span class="o">).</span><span class="na">collabFive</span><span class="o">(</span><span class="n">someValueFive</span><span class="o">);</span>
</code></pre></td></tr></table>
</div>
</div><p>This enables you to be flexible HOWEVER!! I HATE train wrecks. So I would probably tweak it not to return things, but set them. Then you would end up calling then line by line. Which is still not the best but better then the alternative.</p>
<p><strong>End words</strong></p>
<p>So there you go. This is A solution not THE solution obviously. The best would be to NOT design such a monster at all. If you have any better ideas please feel free to share. I would gladly put them on my blog.</p>
<p>As always,</p>
<p>Thanks for reading,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Coderetreat London</title>
      <link>https://skarlso.github.io/2012/09/30/89/</link>
      <pubDate>Sun, 30 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/09/30/89/</guid>
      <description><![CDATA[<p>Hello everybody.</p>
<p>So yesterday I was on a little gathering called <a href="http://coderetreat.org/" title="Coderetreat" target="_blank">Coderetreat</a>.</p>
<p>If you look at the link you can read everything about it. If not, I&rsquo;ve provided a short description.</p>
<p><strong>What it is about?</strong></p>
<p>So what is codereatreat about? In short it&rsquo;s about programmers getting together and honing and practicing there skills in order to become more at what they are doing. It&rsquo;s a practice run with great people. TDDing one problem the whole day long with constantly applied constraints.</p>
<p><strong>Problem domain</strong></p>
<p>Usually it&rsquo;s some kind of coding kata. This sessions problem was <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life" target="_blank">Convey&rsquo;s Game Of Life</a>. It&rsquo;s a well known problem which you can&rsquo;t really solve in the given amount of time if you do it right. But that&rsquo;s not the goal anyways. The goal is the journey itself as was formulated by our facilitator.</p>
<p><strong>Process</strong></p>
<p>So what was going on there anyways? At 10:00AM the whole thing begun. Thirty developers set down, choose partners for TDD, and started to tackle the problem at hand. There were 6 sessions which lasted 45 minutes. After that a short retro and then a 10 minute break. On every session the code was deleted and rewrote from scratch. The first two sessions were introduction. And then the fun started with the constraints.</p>
<p><strong>Constraints</strong></p>
<p>The <strong>first</strong> one was that we were not allowed to use any loops when solving the problem. That was a tricky one. You had several options to go on but me not being a proper developer I couldn&rsquo;t think of too many. Well that&rsquo;s why I was there wasn&rsquo;t I? To learn. I came up with the idea of linking the cells together so when one is invalidated it notifies all his neighbours through a call. But I wasn&rsquo;t sure how to implement it. Also I choose a group which worked in ruby and it was a long time ago I wrote something in that language. It was a group effort but eventually we came up with a prototype that proved the first rule. I was happy!</p>
<p>The <strong>second</strong> one was <a href="http://coderetreat.org/facilitating/activities/ping-pong" target="_blank">TDD ping pong</a>. That was a really interesting experience for me. I grouped with a guy who had already experience in code retreat session so he didn&rsquo;t spare me. In addition we did silent ping pong and it was HARD! It was really hard for me to formulate my thoughts JUST in tests. So that he can get what I want and understand and agree on the design at the same time. So we ended up throwing tests at each other with the thought: Here try to solve this you bastard! It was great fun indeed!</p>
<p>The <strong>third</strong> constraint was &lsquo;No conditions.&rsquo;. That was the hardest for me. Coming up with recursion for the first one and having a fight in the second was nothing compared to this. Conditions are a fundamental structure of programming. It&rsquo;s logic basically. You can have the cells as objects and then a world of cells linked together but you still have to somehow decide if they live or die based on neighbour count.</p>
<p>So how do you avert it? I worked with a guy in this one who was good at low level thinking. He came up with the solution of using expressions as returns for the status:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="k">return</span> <span class="o">(!((</span><span class="n">neighbours</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">neighbours</span> <span class="o">&gt;</span> <span class="n">3</span><span class="o">)))</span> <span class="o">||</span> <span class="o">(((</span><span class="n">neighbours</span> <span class="o">==</span> <span class="n">2</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">neighbours</span> <span class="o">==</span> <span class="n">3</span><span class="o">)));</span>
</code></pre></td></tr></table>
</div>
</div><p>It&rsquo;s brilliant and easy if you see it like this but I was so used to thinking in higher structure and so used to the features given by the language, that I couldn&rsquo;t have come up with this in the given amount of time. So he had the idea and I coded it down. And this is actually working. It returns true or false based on the neighbour count. And we could use that return value to change the state of the cell afterwords.</p>
<p>The <strong>fourth</strong> and last task was that everybody stand up and finish someones else code. Practicing how to handle &ldquo;legacy&rdquo; code and a free for all session to finish the job.</p>
<p><strong>What I learned?</strong></p>
<p>Basically I learned that I really like code. I like writing it, thinking about it, solving problems and creating good, clean, clever solutions. I might be a tester by profession and I love being a tester, but there is a coder somewhere in here too who enjoyed every bit of that session yesterday. Of course this is not the only thing I took from that. I learned good technics. I learned that I&rsquo;m in a box and I need to think outside of it too. I constraint myself by depending on the language I use. And that I need to keep up practicing alas I loose my ability to solve complex logical problems by coding.</p>
<p>A coding kata a day helps keeping the bugs away. 😉</p>
<p><strong>End thoughts</strong></p>
<p>All in all the day was absolutely awesome. Great lunch and environment was provided by the host <a href="http://www.national-lottery.co.uk/" target="_blank">Camelot</a> and our fearless leader who walked around all day helping out and coordinating the whole thing <a href="www.meza.hu" target="_blank">Marton &lsquo;Meza&rsquo; Meszaros</a>. A big thank you and a lot of respect for doing it all day long.</p>
<p>Unfortunately because of my broken ankle I couldn&rsquo;t stay for the drinks but if you ever get to a session like this I strongly recommend staying the whole day AND the night. And not just &lsquo;till you stuffed your belly with free food and booze. 😉</p>
<p>And the top of the cherry is a great time laps of the whole day which can be seen here: <a href="http://www.youtube.com/watch?v=qBvMBAOQD5U" target="_blank">Coderetreat 29.09.12</a>. Enjoy as we had!</p>
<p>As always,</p>
<p>Thanks for reading.</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Learning programming with a visual mind</title>
      <link>https://skarlso.github.io/2012/09/09/learning-programming-with-a-visual-mind/</link>
      <pubDate>Sun, 09 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/09/09/learning-programming-with-a-visual-mind/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>Today I want to write to you about <strong>learning</strong> something with a <strong>visual mind</strong>. There are a gazillion posts out there that tell you how to learn something with a visual mind. However, there are only a few <strong>actually describing</strong> how to learn something as complicated and logical as programming. How do you draw up a function? How do you draw up a cycle or a structure?</p>
<p>Actually these are really <strong>easy</strong>. A <strong>cycle</strong>? No problem. What&rsquo;s a <strong>circle</strong> if not a cycle? <strong>Structure</strong>? This should be an easy one. You can draw a whole <strong>building</strong> and then place <strong>building blocks</strong> into it.</p>
<p>I have a very <strong>strong visual mind</strong>. I don&rsquo;t remember names good for example however I remember every and each <strong>face very distinct</strong>. So if you come up to me, don&rsquo;t be surprised if I don&rsquo;t remember your name. So as I grew older and I took learning into my own hand I realised that there are <strong>techniques</strong> out there that I could have used to <strong>boost my learning</strong> in the early stages of my life too.</p>
<p>But there is no such thing as to be late for something. <strong>Life is constant learning</strong>. So don&rsquo;t hesitate to start learning something.</p>
<p>I <strong>started</strong> to learn <strong>Scala</strong> for example and I was <strong>brainstorming</strong> as how to <strong>draw</strong> up a good map for some programming practices. <strong>Brainstorming</strong> can help you coming up with something that can <strong>display your idea</strong>. Try to brainstorm <strong>in words only</strong> rather then sentences.</p>
<p>And I came up with these two for now, with the <strong>play framework</strong> in the middle.</p>
<p>![Structure]<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>![Route]<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>Now some of you <strong>might say</strong> this <strong>took long</strong> and is <strong>unnecessary</strong>. The information displayed can be <strong>remembered easily</strong> and that these drawings took longer then writing up two or three words. Now let&rsquo;s see.</p>
<p>These drawing, which are really <strong>rough</strong> actually, took me about <strong>10 minutes</strong> while reading and learning and what not. Yes they take longer. But if I write down <strong>two words</strong> how long will I remember them? I already <strong>forgot after I wrote it down</strong>!</p>
<p>This drawing with the griffon legs? <strong>Stuck there forever</strong>. ( Don&rsquo;t ask about the legs.. don&rsquo;t know where they came from. )</p>
<p>So visualisation goes a long way in your brain if you are wired that way. Remember that there is NOTHING that you can&rsquo;t display with a little bit of creativity and graphics.</p>
<p>Ohh and btw. Chances are that you only read the words in <strong>BOLD</strong> because your mind draws your attention to parts that stand out. And also you want to get over reading this article fast and you appreciate if key elements are taken out for you without the unimportant gibberish in between. 😉</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="http://dl.dropbox.com/u/7604030/structure.png">http://dl.dropbox.com/u/7604030/structure.png</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><a href="http://dl.dropbox.com/u/7604030/route.jpg">http://dl.dropbox.com/u/7604030/route.jpg</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></description>
    </item>
    
    <item>
      <title>Journey into an unknown system</title>
      <link>https://skarlso.github.io/2012/06/28/journey-into-an-unknown-system/</link>
      <pubDate>Thu, 28 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/28/journey-into-an-unknown-system/</guid>
      <description><![CDATA[<p>Aka, what you can do if you are facing and unknown framework / system you have to work with for quite some time.</p>
<p><strong>Get intimate</strong></p>
<p>You are going to live with this system for a while. The best thing you can do is getting to know it better. You have to get it to know like you would approche a fine lady. You have to ask it questions look after it, how it feels how its day was. Have to listen to what it tells you, you have to read its diary if necessary.</p>
<p>After a while you will be in a relationship with it. Now it&rsquo;s time to look out for it. Nurture it. Grow it. Care for it. A good piece of software is like a happy lady. It will great you every morning and it will say good by when you go home.</p>
<p>So how do you get to know a new system better.</p>
<p><strong>Debug</strong></p>
<p>In a new system Debugging is like a good old friend who tells you a story about the lady you want to conquer. You find a workflow and execute it in debug mode and follow each and every step that it makes. This way, you will see how each package and class is coupled together. You will be able to see the connections between modules and between calls and functions. It is a good way to see the inner workings.</p>
<p><strong>Ask her girlfriend</strong></p>
<p>Nothing knows more of the system at hand as its best friend. And a good systems best friends are the tests. Take a look at the unit tests, take a look at the integration tests and the acceptance tests. These will tell you more about the system and its actual working strategy than any documentation you can put your hands on. The tests are the closest and next best thing after the real deal.</p>
<p><strong>Conclusion</strong></p>
<p>It&rsquo;s really not that hard to get to know a large system better. Follow a main process with debug, look at the tests, talk to developers, and read some documentation about it. By the time you are done you will be best of friends and you will learn how to handle her the way she likes it. 😉</p>
<p>Hope that helped.</p>
<p>Cheers,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Solution to Wrap Kata</title>
      <link>https://skarlso.github.io/2012/06/26/solution-to-wrap-kata/</link>
      <pubDate>Tue, 26 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/26/solution-to-wrap-kata/</guid>
      <description><![CDATA[<p>My solution to the String Wrap Kata. The goal is to have it wrap a text on a given column width.</p>
<p>It is not the best solution but this is my first try. I did it with TDD so there were tests first, which I&rsquo;m not going to copy in..</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WrapKata</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">wrap</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">,</span> <span class="kt">int</span> <span class="n">columnSize</span><span class="o">)</span> <span class="o">{</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="n">columnSize</span><span class="o">)</span>
            <span class="k">return</span> <span class="n">input</span><span class="o">;</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">wrapLines</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="n">columnSize</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="nf">wrapLines</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">,</span> <span class="kt">int</span> <span class="n">columnSize</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">breakPoint</span> <span class="o">=</span> <span class="n">getBreakPoint</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="n">columnSize</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">head</span> <span class="o">=</span> <span class="n">createHead</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="n">breakPoint</span><span class="o">);</span>
        <span class="n">String</span> <span class="n">tail</span> <span class="o">=</span> <span class="n">createTail</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="n">breakPoint</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">head</span> <span class="o">+=</span> <span class="s">&#34;\n&#34;</span> <span class="o">+</span> <span class="n">wrap</span><span class="o">(</span><span class="n">tail</span><span class="o">,</span> <span class="n">columnSize</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="nf">createTail</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">,</span> <span class="kt">int</span> <span class="n">breakPoint</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">breakPoint</span><span class="o">).</span><span class="na">trim</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="nf">createHead</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">,</span> <span class="kt">int</span> <span class="n">breakPoint</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">substring</span><span class="o">(,</span> <span class="n">breakPoint</span><span class="o">).</span><span class="na">trim</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">getBreakPoint</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">,</span> <span class="kt">int</span> <span class="n">columnSize</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34; &#34;</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">lastIndexOf</span><span class="o">(</span><span class="sc">&#39; &#39;</span><span class="o">,</span> <span class="n">columnSize</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">columnSize</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
    </item>
    
    <item>
      <title>Don’t throw Exception</title>
      <link>https://skarlso.github.io/2012/06/13/dont-throw-exception/</link>
      <pubDate>Wed, 13 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/13/dont-throw-exception/</guid>
      <description><![CDATA[<p>Hi.</p>
<p>Today I want to talk about a common problem in many frameworks I encountered over the course of my carrier as a Java dev / automation engineer, whatnot.</p>
<p>Throwing Exceptions. That is in your method you have something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertMethodNameHere</span><span class="o">(</span><span class="n">String</span> <span class="n">param</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{}</span>
</code></pre></td></tr></table>
</div>
</div><p>This is bad. And I will tell you in short forms why.</p>
<p><strong>Hides exceptions</strong></p>
<p>This one should be obvious. When a method throws exception you can never be sure what kind of exceptions it handles. It will hide what problems it can encounter. It will hide possible threats and will generally mean nothing to you when it fails.</p>
<p><strong>Hides functionality</strong></p>
<p>One of the things you can do will come up with a method that throws at least six exception. Well guess what. That will tell you that the method has DESIGN ISSUES! The first rule of software development is that a method should do only one thing! Well if it throws six exceptions chances are it does more then one.</p>
<p><strong>Hard to debug</strong></p>
<p>You wont have a meaning full exception if it fails immediately. You will have to go through lines of codes and stack traces to find out what the hell happened and what threw what kind of exception where. That is just simply stupid. Why give yourself a hard time?</p>
<p><strong>So what to do instead?</strong></p>
<p><strong>Meaning full exceptions</strong></p>
<p>If you have to throw. Throw meaning full exceptions. Things like: LoginFailedExpcetion(String username, String password); In the message write:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;Failed login with username: %s; password: %s&#34;</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</code></pre></td></tr></table>
</div>
</div><p>When this fails you will immediately know what happened without miles of stack trace to run through.</p>
<p>When you go ahead and start to re-factor your code to handle exceptions properly you will end up with methods throwing six - seven exceptions. Don&rsquo;t be afraid. That means that you finally are able to see that your code is doing many things that it is not supposed to do. Start by extracting bits and pieces of your code into smaller segments that throw a max of two exceptions. Write unit tests around the function and start running them as you re-factor. See what fails so you can track your changes as you go.</p>
<p>A general good advice is that your method should throw a maximum of <strong>TWO</strong> exception. If you have more, you are doing something more then you should. Refactor / Extract that bit into a smaller function.</p>
<p><strong>Handling exceptions</strong></p>
<p>What you really want to do is create a Layer that you will be using to capture and handle exceptions. You can than take that layer and hide it deep deep into your framework so that you never ever see it again. Just like with switch.</p>
<p>As you go you will have layers of layers of exceptions. You will have features that depend on each other and talk to each other in some ways.</p>
<p>Meaning full exception will help you find out what broke why. For example you have Login that throws a Login exception. On top of that you have an order that handles OrderFailedException. You will have an easy time seeing that the order failed because the login failed. Because you handled your login exception in the Login Layer. And you handled your OrderException in the order layer. There are no mixes. Keep it clean and keep it where it belongs.</p>
<p><strong>Conclusion</strong></p>
<p>Exceptions are part of Java just like String or int or long is. You use these wisely so why don&rsquo;t you apply that same logic to your Exception handling? Don&rsquo;t be afraid of having 20-25 exception classes. Group them together or leave them in their respective packages or have them in a deep layer but HAVE THEM. They WILL save time and time is always money. So they will save you money in the end when an error occurs. And errors will always occur.</p>
<p>Thanks for reading,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Making your code understandable</title>
      <link>https://skarlso.github.io/2012/06/13/making-your-code-understandable/</link>
      <pubDate>Wed, 13 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/13/making-your-code-understandable/</guid>
      <description><![CDATA[<p>Hi!</p>
<p>I&rsquo;ve seen this many times over and over again. Many people have wrote books about it already. Like Uncle Bob&rsquo;s Clean Code. Like Pragmatic Programmer by Andrew Hunt and David Thomas. What makes your code understandable to others.</p>
<p>Is it <strong>Comments</strong>?</p>
<p>No. It&rsquo;s not comments. If your code could be read properly you wouldn&rsquo;t need comments to explain what it does. Like Uncle Bob said. A good code doesn&rsquo;t contain surprises. It does exactly what you would think it should do on the next line. It doesn&rsquo;t have curves and misinformation. It doesn&rsquo;t have plots and turns of events like a good crime book. No. Good code is a like a boring soap opera with predictable plot and boring plain characters who don&rsquo;t change there behavior based on circumstances.</p>
<p>Good code is easy to read. It flows like the river, falls like a waterfall, cooks like bacon and crosses the road like a professional chicken. If I read line A the next line should be B. If it is a Z or a :@L$. I wont be happy.</p>
<p>So then what makes it understandable?</p>
<p>On simple word: <strong>Readability</strong>.</p>
<p>What makes it readable?</p>
<p>Small chunks of functions that have descriptive names as few parameters as possible and do only ONE thing at a time. Of course this is not all there is. However it&rsquo;s the best thing to begin with. A function called &ldquo;doStuff&rdquo; that has a complexity of 300 has three fors, two switches and a dozen ifs isn&rsquo;t really helping. Now if you look at doStuff and try to give a name based on the job of the function and come up with &ldquo;propageXWithFiveUnlessYEqualsTheSumOfZPlusW&rdquo; you will know it does more then one thing.</p>
<p>If you see a really complex function in your production code or hobby code ask yourself: &ldquo;Should this really be like 300 lines long and with a complexity of 200??&rdquo; And as you speak this out loud you will know the answer already. Break it up. Have like a dozen smaller functions that will be better I promise you. Take out parts. Write unit tests to it that help with re-factoring. Break it down into as small chunks as possible. It will be worth it. It will increase understand-ability, readability and maintainability.</p>
<p>Hope that helped.</p>
<p>Thank you for reading and as always,</p>
<p>Have a nice Day,</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>JMS Connection setup and Framework</title>
      <link>https://skarlso.github.io/2012/03/04/jms-connection-setup-and-framework/</link>
      <pubDate>Sun, 04 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/03/04/jms-connection-setup-and-framework/</guid>
      <description><![CDATA[<p>Hello chumps.</p>
<p>Today I want to write about jms connection testing with a small framework. I wrote a small thing using a factory object model. It&rsquo;s a lead, a proof of concept. You can use this to go onward.</p>
<p>First, let&rsquo;s begin with the JMS connection it self.</p>
<p><strong>JMS Connection</strong></p>
<p>First rule of thumb is: &ldquo;Don&rsquo;t wait for a response when dealing with JMS queues.&rdquo; How so? Because, a JMS queue is asynchronous so you wont get back anything. There are however two ways of checking if it was a success or not.</p>
<p>1: Check your database. The service you are trying out probably records something in the database, right? Check it. You can use a simple JDBC connection, or a Postgres connection or whatever your choice of database is.</p>
<p>2: You can monitor use the log of your choice of service provider. If there is an exception the moment you send something, you can be sure it is received. Just the format is not correct. This is of course based on how your service handles exceptions.</p>
<p>So let&rsquo;s get down to business.</p>
<p>First, there is a really good article on how to create a JMS connection.</p>
<p>This is the link for it: <a href="http://www.javablogging.com/simple-guide-to-java-message-service-jms-using-activemq" title="Simple JMS How To">Simple Guide to Java message service JMS using ActiveMQ</a></p>
<p>Itt will tell you everything you need to know about creating a connection and waiting for a response.</p>
<p>I will tell you now how to use this information in a real live environment.</p>
<p>In a real environment you will be using a queue which has certain settings that will not allow you to &ldquo;join&rdquo; it, or creating it. And you need to get the name of the queue and certain settings, like the destination URL.</p>
<p>First, the tool you are going to use is called JConsole. JConsole is a tool to monitor applications. It&rsquo;s tool to monitor the JVM. I wont go into details about it since there are numerous descriptions about it. It is part of the java installation.</p>
<p>So after firing it up and giving it a connection url which would look like this: &lsquo;service:jmx:rmi:///jndi/rmi://hostName:portNum/jmxrmi&rsquo;, you would go ahead and search on the TAB:<strong>Threads</strong>.</p>
<p>Look for a Thread that is labelled like this: <YourConnectionLayer> Transport Server: tcp://0.0.0.0: <port></p>
<p>This will be your destination url.</p>
<p>In the blog the guy is using ActiveMQ. It&rsquo;s your best guess. It&rsquo;s lightweight, it&rsquo;s fast it&rsquo;s easy. Go for it.</p>
<p>So your Destination would look like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">ConnectionFactory</span> <span class="n">connectionFactory</span> <span class="o">=</span>
            <span class="k">new</span> <span class="n">ActiveMQConnectionFactory</span><span class="o">(</span><span class="s">&#34;&lt;yourserviceparameter&gt;://tcp://0.0.0.0:&lt;port&gt;&#34;</span><span class="o">);</span>
    <span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">connectionFactory</span><span class="o">.</span><span class="na">createConnection</span><span class="o">();</span>
    <span class="n">connection</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</code></pre></td></tr></table>
</div>
</div><p>After that you will need the queue name which you can get as easy as this. Go to the TAB <strong>MBeans</strong>. There you can see, if you are using ActiveMQ, you will see something like this : org.active.activemq. Open this up and you will see under localhost a number of queues that your server has configured. Open up one of them and copy the queue name in the createQueue.</p>
<p>Use it like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">Destination</span> <span class="n">destination</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createQueue</span><span class="o">(</span><span class="s">&#34;&lt;queue name&gt;&#34;</span><span class="o">);</span>
</code></pre></td></tr></table>
</div>
</div><p>Of course if your service is configured properly you wont have any access to it. Use the connection like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">connection</span> <span class="o">=</span> <span class="n">connectionFactory</span><span class="o">.</span><span class="na">createConnection</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">,</span> <span class="s">&#34;password&#34;</span><span class="o">);</span>
</code></pre></td></tr></table>
</div>
</div><p>You will have now logged in with the proper user.</p>
<p>Now you can send the message. You have everything configured.</p>
<p><strong>Framework</strong></p>
<p>Let&rsquo;s speak about the framework you will need to properly use this technology.</p>
<p>One of the paradigms for programming is design to interfaces. If you need a proper working framework, your ave to design with the mind set to changing pieces of code. Thinking about what would change the most. Your connection settings. You want a framework which can use any kind of connection. Not just JMS but whatever connection you would like. It could be a synchronous one. Or a database one. Or a JMS. Doesn&rsquo;t matter. You are only interested in a message sent or a connection, or whatever you want.</p>
<p>So let&rsquo;s get to it.</p>
<p>Interface:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">IConnection</span> <span class="o">{</span>
	<span class="kt">void</span> <span class="nf">sendMessage</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This is sample connection interface. You could have numerous templates here.</p>
<p>You will be using an object factory pattern here. Your implementer will be taken for a Java Property file. But it can be taken from whatever configuration you like. XML maybe, or a database even.</p>
<p>Let&rsquo;s see you connection factory:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConnFactory</span> <span class="o">{</span>

	<span class="kd">static</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Logger</span><span class="o">();</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="n">IConnection</span> <span class="nf">getImplementer</span><span class="o">()</span>
	<span class="o">{</span>
		<span class="n">Properties</span> <span class="n">prop</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>

		<span class="k">try</span>
		<span class="o">{</span>
			<span class="n">prop</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&#34;conf/implementer.property&#34;</span><span class="o">));</span>
		<span class="o">}</span>
		<span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">io</span><span class="o">)</span>
		<span class="o">{</span>
			<span class="n">logger</span><span class="o">.</span><span class="na">Log</span><span class="o">(</span><span class="s">&#34;Could not find property file: &#34;</span> <span class="o">+</span> <span class="n">io</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
		<span class="o">}</span>

		<span class="n">String</span> <span class="n">implementerClass</span> <span class="o">=</span> <span class="n">prop</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&#34;implementer&#34;</span><span class="o">);</span>

		<span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">iConnect</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

		<span class="k">try</span>
		<span class="o">{</span>
			<span class="n">iConnect</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">implementerClass</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">catch</span> <span class="o">(</span><span class="n">ClassNotFoundException</span> <span class="n">ce</span><span class="o">)</span>
		<span class="o">{</span>
			<span class="n">logger</span><span class="o">.</span><span class="na">Log</span><span class="o">(</span><span class="s">&#34;Class could not be found: &#34;</span> <span class="o">+</span> <span class="n">ce</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
		<span class="o">}</span>

		<span class="n">IConnection</span> <span class="n">connection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

		<span class="k">try</span>
		<span class="o">{</span>
			<span class="n">connection</span> <span class="o">=</span> <span class="o">(</span><span class="n">IConnection</span><span class="o">)</span> <span class="n">iConnect</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
		<span class="o">}</span>
		<span class="k">catch</span> <span class="o">(</span><span class="n">IllegalAccessException</span> <span class="n">ie</span><span class="o">)</span>
		<span class="o">{</span>
			<span class="n">logger</span><span class="o">.</span><span class="na">Log</span><span class="o">(</span><span class="s">&#34;Illegal access excpetion: &#34;</span> <span class="o">+</span> <span class="n">ie</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>

		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InstantiationException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>

			<span class="n">logger</span><span class="o">.</span><span class="na">Log</span><span class="o">(</span><span class="s">&#34;Instatiation exception occured. &#34;</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
		<span class="o">}</span>

		<span class="k">return</span> <span class="n">connection</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Easy enough, right? Class.forname will instantiate the class name you have in the property file. This could be something like this: com.packagename.ClassName. Doesn&rsquo;t matter to you. You can add some typeof checks, or instanceof checks, whatever you like. Or you can use <Type> generics.</p>
<p>Let&rsquo;s get to the concrete implementation:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JMSConnectionImpl</span> <span class="kd">implements</span> <span class="n">IConnection</span> <span class="o">{</span>
    <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Logger</span><span class="o">();</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendMessage</span><span class="o">()</span>
    <span class="o">{</span>

   	<span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">.</span>
        <span class="o">.</span>
        <span class="o">.</span>
        <span class="k">finally</span>
        <span class="o">{</span>
            <span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span>

    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Simple enough. Here you have a concrete implementation of your collection and your sender class.</p>
<p>And the simple usage facility of this is. simple too:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">IConnection</span> <span class="n">iConnection</span> <span class="o">=</span> <span class="n">ConnFactory</span><span class="o">.</span><span class="na">getImplementer</span><span class="o">();</span>

    <span class="n">iConnection</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">();</span>
</code></pre></td></tr></table>
</div>
</div><p>Simple enough too, right? So what happens here? You have a factory that will give you back any kind of implementation you are writing in you property file. You don&rsquo;t care what the implementation is in your test. You don&rsquo;t care what it&rsquo;s name is. You don&rsquo;t care what it&rsquo;s result is. Okay, you care about the result, but that&rsquo;s another history since you will check that elsewhere.</p>
<p>There you go. If any question occurs, please don&rsquo;t hesitate to ask.</p>
<p>Thanks for reading!</p>
]]></description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://skarlso.github.io/2012/02/27/configuration/</link>
      <pubDate>Mon, 27 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/02/27/configuration/</guid>
      <description><![CDATA[<p>When I see something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">string</span> <span class="n">DATABASELINK</span> <span class="o">=</span> <span class="s">&#34;linkhere&#34;</span><span class="o">;</span>
        <span class="o">.</span>
        <span class="o">.</span>
        <span class="o">.</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>It sends a small, but chilling shiver down my spine. Just. don&rsquo;t. There are a lot of possibilities to use configuration in Java. Java property files. Xml. Xml serialization. CSV file. Whatever suits you best, but this? DON&rsquo;T!</p>
]]></description>
    </item>
    
    <item>
      <title>Testing ‘code’ tag.</title>
      <link>https://skarlso.github.io/2012/02/26/testing-code-tag/</link>
      <pubDate>Sun, 26 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/02/26/testing-code-tag/</guid>
      <description><![CDATA[<p>Hello.</p>
<p>This is just a quick post to test the working of the code tag.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby">    <span class="no">Given</span><span class="p">(</span><span class="sr">/The Action is ([A-z]*)/</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">action</span><span class="o">|</span>
        <span class="vi">@action</span> <span class="o">=</span> <span class="n">action</span>
    <span class="k">end</span>
</code></pre></td></tr></table>
</div>
</div><p>Perfect!!</p>
<p>The name of the plugin is WP-Syntax. The trick is to edit the page in plain HTML. Because the WordPress word editor screws up the &lt;&gt; tags. But surely you already knew that.</p>
]]></description>
    </item>
    
  </channel>
</rss>