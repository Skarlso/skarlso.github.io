<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Ramblings of a build engineer</title>
    <link>https://skarlso.github.io/categories/programming/</link>
    <description>Recent content in Programming on Ramblings of a build engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 04 Mar 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://skarlso.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Wercker Test</title>
      <link>https://skarlso.github.io/2016/03/04/wercker-test-2/</link>
      <pubDate>Fri, 04 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/03/04/wercker-test-2/</guid>
      <description>Basics This is a wercker Test.</description>
    </item>
    
    <item>
      <title>Wercker Test</title>
      <link>https://skarlso.github.io/2016/02/10/wercker-test/</link>
      <pubDate>Wed, 10 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/02/10/wercker-test/</guid>
      <description>Basics This is a wercker Test.</description>
    </item>
    
    <item>
      <title>Doing CORS in Go with Gin and JSON</title>
      <link>https://skarlso.github.io/2016/02/02/doing-cors-in-go-with-gin-and-json/</link>
      <pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/02/02/doing-cors-in-go-with-gin-and-json/</guid>
      <description>Basics Hello folks.
This will be a quick post about how to do CORS with jQuery, Gin in Go with a very simple ajax GET and Json.
I&amp;rsquo;m choosing JSON here because basically I don&amp;rsquo;t really like JSONP. And actually, it&amp;rsquo;s not very complicated to do CORS, it&amp;rsquo;s just hidden enough so that it doesn&amp;rsquo;t become transparent.
First, what is CORS? It&amp;rsquo;s Cross-Platform Resource Sharing. It has been invented so that without your explicit authorization in the header of a request, Javascript can&amp;rsquo;t reach outside of your domain and be potentially harmful to your visitors.</description>
    </item>
    
    <item>
      <title>My Journey in advent of code</title>
      <link>https://skarlso.github.io/2016/01/22/my-journey-in-advent-of-code/</link>
      <pubDate>Fri, 22 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/01/22/my-journey-in-advent-of-code/</guid>
      <description>Hello folks.
I wanted to share with you my tale of working through the problems with Advent Of Code.
It is a nice tale and there are a few things I learned from it, especially in Go, since I used that solve all of the problems. So, let&amp;rsquo;s get started.
Solving the problems The most important lesson I learned while doing these exercises was, how to solve these problems. A couple of them were simple enough to not have to over think it, but most of them got very tricky.</description>
    </item>
    
    <item>
      <title>Improving performance with byte slice and int map</title>
      <link>https://skarlso.github.io/2016/01/05/improving-performance-with-byte-slice-and-int-map/</link>
      <pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/01/05/improving-performance-with-byte-slice-and-int-map/</guid>
      <description>Hello Folks.
Today I would like to share with you my little tale of refactoring my solution to Advent Of Code Day 13.
It&amp;rsquo;s a lovely tale of action, adventure, drama, and comedy.
Let&amp;rsquo;s being with my first iteration of the problem.
package main import ( &amp;quot;bufio&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;math&amp;quot; &amp;quot;os&amp;quot; &amp;quot;strconv&amp;quot; &amp;quot;strings&amp;quot; &amp;quot;github.com/skarlso/goutils/arrayutils&amp;quot; ) var seatingCombinations = make([][]string, 0) var table = make(map[string][]map[string]int) var keys = make([]string, 0) //Person a person type Person struct { // neighbour *Person name string like int } func main() { file, _ := os.</description>
    </item>
    
    <item>
      <title>Byte arrays and Channels</title>
      <link>https://skarlso.github.io/2016/01/01/byte-arrays-and-channels/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/01/01/byte-arrays-and-channels/</guid>
      <description>Hi folks and a Happy new Year!
Today, I would like to show you some interesting things you can do with channels. Consider the following simple example.
package main import &amp;quot;fmt&amp;quot; func main() { generatedPassword := make(chan int, 100) correctPassword := make(chan int) defer close(generatedPassword) defer close(correctPassword) go passwordIncrement(generatedPassword) go checkPassword(generatedPassword, correctPassword) pass := &amp;lt;-correctPassword fmt.Println(pass) } func checkPassword(input &amp;lt;-chan int, output chan&amp;lt;- int) { for { p := &amp;lt;-input //Introduce lengthy operation here // time.</description>
    </item>
    
    <item>
      <title>Use Byte Array Instead of Strings</title>
      <link>https://skarlso.github.io/2015/12/29/use-byte-array-instead-of-strings/</link>
      <pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/29/use-byte-array-instead-of-strings/</guid>
      <description>Hello Folks.
This is just a quick post on the topic and a reminder for myself and everybody to ALWAYS USE []BYTE INSTEAD OF STRINGS.
[]Byte is marginally faster than a simple Strings. In fact, I would say using []byte should be the standard instead of strings.
Sample code:
package solutions import &amp;quot;fmt&amp;quot; const ( //INPUT input INPUT = &amp;quot;1321131112&amp;quot; //LIMIT limit LIMIT = 50 ) //LookAndSay translates numbers according to Look and Say algo func LookAndSay(s string, c chan string) { charCount := 1 look := &amp;quot;&amp;quot; for i := range s { if i+1 &amp;lt; len(s) { if s[i] == s[i+1] { charCount++ } else { look += fmt.</description>
    </item>
    
    <item>
      <title>Use Byte Slice Instead of Strings</title>
      <link>https://skarlso.github.io/2015/12/29/use-byte-slice-instead-of-strings/</link>
      <pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/29/use-byte-slice-instead-of-strings/</guid>
      <description>Hello Folks.
This is just a quick post on the topic and a reminder for myself and everybody to ALWAYS USE []BYTE INSTEAD OF STRINGS.
[]Byte is marginally faster than a simple Strings. In fact, I would say using []byte should be the standard instead of strings.
Sample code:
package solutions import &amp;quot;fmt&amp;quot; const ( //INPUT input INPUT = &amp;quot;1321131112&amp;quot; //LIMIT limit LIMIT = 50 ) //LookAndSay translates numbers according to Look and Say algo func LookAndSay(s string, c chan string) { charCount := 1 look := &amp;quot;&amp;quot; for i := range s { if i+1 &amp;lt; len(s) { if s[i] == s[i+1] { charCount++ } else { look += fmt.</description>
    </item>
    
    <item>
      <title>Recursive Letter Frequency Count</title>
      <link>https://skarlso.github.io/2015/12/23/recursive-freq-count/</link>
      <pubDate>Wed, 23 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/23/recursive-freq-count/</guid>
      <description>Hello everybody!
I wanted to do a sort post about word frequency count. I did it many times now and I was curious as how a recursive solution would perform as opposed to looping.
So I wrote it up quickly and added a few benchmarks with different sized data.
First&amp;hellip;. The code:
var freqMap = make(map[string]int, 0) func countLettersRecursive(s string) string { if len(s) == 0 { return s } freqMap[string(s[0])]++ return countLettersRecursive(s[1:]) } func countLettersLoop(s string) { for _, v := range s { freqMap[string(v)]++ } }  Very simple.</description>
    </item>
    
    <item>
      <title>Go Development Environment</title>
      <link>https://skarlso.github.io/2015/12/08/go-development-environment/</link>
      <pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/08/go-development-environment/</guid>
      <description>Hello folks.
Here is a little something I&amp;rsquo;ve put together, since I&amp;rsquo;m doing it a lot.
Go Development Environment
If I have a project I&amp;rsquo;d like to contribute, like GoHugo, I have to setup a development environment, because most of the times, I&amp;rsquo;m on a Mac. And on OSX things work differently. I like to work in a Linux environment since that&amp;rsquo;s what most of the projects are built on.</description>
    </item>
    
    <item>
      <title>Go JIRA API client</title>
      <link>https://skarlso.github.io/2015/11/20/go-jira-api-client/</link>
      <pubDate>Fri, 20 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/11/20/go-jira-api-client/</guid>
      <description>Hi folks.
So, I was playing around and created a client for JIRA written in Go. It was nice to do some JSON transformation. And sending POSTS was really trivial.
It&amp;#8217;s still in it&amp;#8217;s infancy and I have a couple of more features I want to implement, but, here is the code&amp;#8230;
  package main &amp;nbsp; import ( &#34;bytes&#34; &#34;encoding/json&#34; &#34;flag&#34; &#34;fmt&#34; &#34;io/ioutil&#34; &#34;log&#34; &#34;net/http&#34; &#34;os&#34; &amp;nbsp; &#34;github.com/BurntSushi/toml&#34; ) &amp;nbsp; var configFile = &#34;</description>
    </item>
    
    <item>
      <title>The One Hundred Day GitHub Challenge</title>
      <link>https://skarlso.github.io/2015/11/15/the-one-hundred-day-github-challenge/</link>
      <pubDate>Sun, 15 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/11/15/the-one-hundred-day-github-challenge/</guid>
      <description>Hello folks.
Today, I present to you the One Hundred Day Github Challenge.
The rules are simple:
 Minimum of One commit every day for a Hundred days. Commit has to be meaningful but can be as little as a fix in a Readme.md. Doesn&amp;#8217;t matter if you are on vacation, there are no exceptions. There. Are. No. Exceptions. If you fail a day, you have to start over. No cheating.</description>
    </item>
    
    <item>
      <title>Go Progress Quest</title>
      <link>https://skarlso.github.io/2015/11/09/go-progress-quest/</link>
      <pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/11/09/go-progress-quest/</guid>
      <description>Hi Folks.
I started to build a Progress Quest type of web app in Go.
If you&amp;#8217;d like to join, or just tag along, please drop by here =&amp;gt; Go Progress Quest and feel free to submit an issue if you have an idea, or would like to contribute!
I will try and document the Progress&amp;#8230;
Thank you for reading!
Gergely.</description>
    </item>
    
    <item>
      <title>Circular buffer in Go</title>
      <link>https://skarlso.github.io/2015/10/15/circular-buffer-in-go/</link>
      <pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/10/15/circular-buffer-in-go/</guid>
      <description>I&amp;#8217;m proud of this one too. No peaking. I like how go let&amp;#8217;s you do this kind of stuff in a very nice way.
  package circular &amp;nbsp; import &#34;fmt&#34; &amp;nbsp; //TestVersion testVersion const TestVersion = 1 &amp;nbsp; //Buffer buffer type type Buffer struct { buffer []byte full int size int s, e int } &amp;nbsp; //NewBuffer creates a new Buffer func NewBuffer(size int) *Buffer { return &amp;Buffer{buffer: make([]byte, size), s: , e: , size: size, full: } } &amp;nbsp; //ReadByte reads a byte from b Buffer func (b *Buffer) ReadByte() (byte, error) { if b.</description>
    </item>
    
    <item>
      <title>Jenkins Job DSL and Groovy goodness</title>
      <link>https://skarlso.github.io/2015/10/15/jenkins-job-dsl-and-groovy-goodness/</link>
      <pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/10/15/jenkins-job-dsl-and-groovy-goodness/</guid>
      <description>Hi Folks.
Ever used Job DSL plugin for Jenkins? What is that you say? Well, it&amp;#8217;s TEH most awesome plug-in for Jenkins to have, because you can CODE your job configuration and put it under source control.
Today, however, I&amp;#8217;m not going to write about that because the tutorials on Jenkins JOB DSL are very extensive and very well done. Anyone can pick them up.
Today, I would like to write about a part of it which is even more interesting.</description>
    </item>
    
    <item>
      <title>DataMunger Kata with Go</title>
      <link>https://skarlso.github.io/2015/10/04/datamunger-kata-with-go/</link>
      <pubDate>Sun, 04 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/10/04/datamunger-kata-with-go/</guid>
      <description>Quickly wrote up the Data Munger code kata in Go.
Next time, I want better abstractions. And a way to select columns based on their header data. For now, this is not bad.
  package main &amp;nbsp; import ( &#34;bufio&#34; &#34;fmt&#34; &#34;log&#34; &#34;math&#34; &#34;os&#34; &#34;regexp&#34; &#34;strconv&#34; &#34;strings&#34; ) &amp;nbsp; //Data which is Data type Data struct { columnName string compareOne float64 compareTwo float64 } &amp;nbsp; func main() { // datas := []Data{WeatherData{}, FootballData{}} fmt.</description>
    </item>
    
    <item>
      <title>Sieve of Eratosthenes in Go</title>
      <link>https://skarlso.github.io/2015/07/30/sieve-of-eratosthenes-in-go/</link>
      <pubDate>Thu, 30 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/07/30/sieve-of-eratosthenes-in-go/</guid>
      <description>I&amp;#8217;m pretty proud of this one as well.
  package sieve &amp;nbsp; //Sieve Uses the Sieve of Eratosthenes to calculate primes to a certain limit func Sieve(limit int) []int { var listOfPrimes []int markers := make([]bool, limit) &amp;nbsp; for i := 2; i &amp;lt; limit; i++ { if !markers[i] { for j := i + i; j &amp;lt; limit; j += i { markers[j] = true } listOfPrimes = append(listOfPrimes, i) } } &amp;nbsp; return listOfPrimes }     </description>
    </item>
    
    <item>
      <title>Converting numbers into string representations</title>
      <link>https://skarlso.github.io/2015/07/19/converting-numbers-into-string-representations/</link>
      <pubDate>Sun, 19 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/07/19/converting-numbers-into-string-representations/</guid>
      <description>I quiet like this one. My first go program snippet without any peaking or googling. I&amp;#8217;m proud, though it could be improved with a bit of struct magic and such and such. And it only counts &amp;#8217;till 1000&amp;#8230;
  package main &amp;nbsp; import &#34;fmt&#34; &amp;nbsp; var words = map[int]string{1: &#34;one&#34;, 2: &#34;two&#34;, 3: &#34;three&#34;, 4: &#34;four&#34;, 5: &#34;five&#34;, 6: &#34;six&#34;, 7: &#34;seven&#34;, 8: &#34;eight&#34;, 9: &#34;nine&#34;, 10: &#34;ten&#34;, 11: &#34;</description>
    </item>
    
    <item>
      <title>Bitwise &amp; Operator</title>
      <link>https://skarlso.github.io/2015/07/15/bitwise-operator/</link>
      <pubDate>Wed, 15 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/07/15/bitwise-operator/</guid>
      <description>The first, and only time so far, that I got to use the bitwise &amp;amp; operator. I enjoyed doing so!!
And of course from now on, I&amp;#8217;ll be looking for more opportunities to (ab)use it.
  package secret &amp;nbsp; import &#34;sort&#34; &amp;nbsp; const REVERSE = 16 &amp;nbsp; func Handshake(code int) []string { // binary_rep := convertDecimalToBinary(code) if code &amp;lt;  { return nil } secret_map := map[int]string { 1: &#34;</description>
    </item>
    
    <item>
      <title>Django – RPG – Part 3</title>
      <link>https://skarlso.github.io/2015/04/21/django-rpg-part-3/</link>
      <pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/04/21/django-rpg-part-3/</guid>
      <description>Hello folks.
A small update to this. I created the model now, which is the database design for this app. It&amp;#8217;s very simple, nothing fancy. Also, I&amp;#8217;m writing the app with Python 3 from now on.
Here is the model now:
  from django.db import models from django.contrib.auth.models import User &amp;nbsp; # Create your models here. &amp;nbsp; &amp;nbsp; class Item&amp;#40;models.Model&amp;#41;: name = models.CharField&amp;#40;max_length=100, default=&#34;Item&#34;&amp;#41; damage = models.IntegerField&amp;#40;default=&amp;#41; defense = models.</description>
    </item>
    
    <item>
      <title>Django – RPG – Part 2</title>
      <link>https://skarlso.github.io/2015/04/12/django-rpg-part-2/</link>
      <pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/04/12/django-rpg-part-2/</guid>
      <description>&lt;p&gt;Hello.&lt;/p&gt;

&lt;p&gt;Continuing where we left off with the Django RPG project. Next up is implementing a rudimentary registration and adding the ability to create a character. Maybe even, design the database through django&amp;#8217;s modelling.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Django – RPG – Part 1</title>
      <link>https://skarlso.github.io/2015/04/10/django-rpg-2/</link>
      <pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/04/10/django-rpg-2/</guid>
      <description>&lt;p&gt;Hi folks.&lt;/p&gt;

&lt;p&gt;So last time, we tried to implement a little RPG of mine using Meteor, which failed miserably. This time we are going to try and use Django. Let&amp;#8217;s have at it, shall we?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Small Python GUI to Calculate Lever Distance</title>
      <link>https://skarlso.github.io/2015/04/10/small-python-gui-to-calculate-lever-distance/</link>
      <pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/04/10/small-python-gui-to-calculate-lever-distance/</guid>
      <description>Hi folks.
Just a small script which calculates your distance from a lever focal point if you know your weight, the object&amp;#8217;s weight and the object&amp;#8217;s and the distance the object has from the focal point of the lever.
Like this:
This script will give you D1. And this is how it will look like in doing so:
So, in order for me (77kg) to lift an object of 80kg which is on a, by default, 1 meter long lever, I have to stand back ~1.</description>
    </item>
    
    <item>
      <title>Python and my Math commitment</title>
      <link>https://skarlso.github.io/2015/03/15/python-and-my-math-commitment/</link>
      <pubDate>Sun, 15 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/03/15/python-and-my-math-commitment/</guid>
      <description>Let&amp;#8217;s talk about plans. It&amp;#8217;s good to have one. For example, I have a plan for this year.
I kind of like math. So, I have this book:
It&amp;#8217;s 1400 pages long and basically, has everything in it. It&amp;#8217;s a rather exhaustive book. Hence, my plan is to finish the book by the end of 2015 and write a couple of python scripts that calculate something interesting.
For example, Newton&amp;#8217;s law of cooling how I learned it is:</description>
    </item>
    
    <item>
      <title>Sphere Judge Online – Python Kivy Android app – Part 2</title>
      <link>https://skarlso.github.io/2015/03/02/sphere-judge-online-python-kivy-android-app-part-2/</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/03/02/sphere-judge-online-python-kivy-android-app-part-2/</guid>
      <description>&lt;p&gt;Here we are again. I will attempt to further this little journey of mine into the land of Android and Python.&lt;/p&gt;

&lt;p&gt;This is the second part of the advanture you can read the first one a little bit back.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sphere Judge Online – Python Kivy Android app</title>
      <link>https://skarlso.github.io/2015/02/26/sphere-judge-online-python-kivy-android-app/</link>
      <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/02/26/sphere-judge-online-python-kivy-android-app/</guid>
      <description>&lt;p&gt;Hello folks.&lt;/p&gt;

&lt;p&gt;Today I would like to take you on a journey I fought myself through in order to write a python android app, which gets you a random problem from &lt;a href=&#34;http://www.spoj.com/problems/classical/&#34; target=&#34;_blank&#34;&gt;Sphere Judge Online&lt;/a&gt;. Then you can mark it as solved and it will be stored as such, and you can move on to the next problem. With the words of Neil deGrasse Tyson, Come with Me!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building an RPG App with Meteor – Part One – The struggle</title>
      <link>https://skarlso.github.io/2015/02/01/building-an-rpg-app-with-meteor-part-one-the-struggle/</link>
      <pubDate>Sun, 01 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/02/01/building-an-rpg-app-with-meteor-part-one-the-struggle/</guid>
      <description>&lt;p&gt;In my previous post, I was getting ready to enjoy some time with the JavaScript web framework Meteor.&lt;/p&gt;

&lt;p&gt;This time I would like to bring it to a bit of overdrive. See, how re-factoring works on a larger scale model with multiple pages. And how it can organize assets, such as, images, multiple CSS, some plugins, you know, ordinary web stuff.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s dive in.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaScript Web Framework – Meteor</title>
      <link>https://skarlso.github.io/2015/01/29/javascript-web-framework-meteor/</link>
      <pubDate>Thu, 29 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/01/29/javascript-web-framework-meteor/</guid>
      <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;This time I would like to write about something that interests me. I wanted to try out a pure JavaScript web framework.&lt;/p&gt;

&lt;p&gt;My choice is: &lt;a href=&#34;https://www.meteor.com/&#34; target=&#34;_blank&#34;&gt;Meteor&lt;/a&gt;. Looks interesting enough and it was recommended by a friend of mine. So, let&amp;#8217;s dive in.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why the expressiveness of your Tests is important – Part One</title>
      <link>https://skarlso.github.io/2014/11/15/why-the-expressiveness-of-your-tests-is-important-part-one/</link>
      <pubDate>Sat, 15 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/11/15/why-the-expressiveness-of-your-tests-is-important-part-one/</guid>
      <description>&lt;p&gt;Hello Everybody.&lt;/p&gt;

&lt;p&gt;This time I&amp;#8217;d like to write about the expressiveness of a Test. I think that it&amp;#8217;s very important to write understandable and expressive tests. In older times I was studying novel writing. There is a rule which a novel needs to follow. It goes something like this: &amp;#8220;A novel needs to lead its reader and make him understand in the simplest way what&amp;#8217;s going on, with whom and why?&amp;#8221;. In other words, it&amp;#8217;s not a puzzle. It should be obvious what the test is trying to do and it should not require the reader to try and solve it in order to understand it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python Course Review</title>
      <link>https://skarlso.github.io/2014/08/25/python-course-review/</link>
      <pubDate>Mon, 25 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/08/25/python-course-review/</guid>
      <description>&lt;p&gt;Hello Everybody.&lt;/p&gt;

&lt;p&gt;Today I&amp;#8217;d like to write a little bit about a python course I did.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s an 8 week course on algorithmic programming with fun little projects. I&amp;#8217;d like to write down some of my solutions with pseudo code for my own better understanding and for the sake of sharing knowledge. I won&amp;#8217;t, however, share full projects since that would be against the honour code.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s begin&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Five reasons why a tester should learn SQL</title>
      <link>https://skarlso.github.io/2014/05/31/five-reasons-why-a-tester-should-learn-sql/</link>
      <pubDate>Sat, 31 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/05/31/five-reasons-why-a-tester-should-learn-sql/</guid>
      <description>&lt;p&gt;Hello Folks.&lt;/p&gt;

&lt;p&gt;So last I was writing about why a tester should learn Javascript. Today I would like to write about why a tester should learn SQL.&lt;/p&gt;

&lt;p&gt;There, I said it. I know many people, especially testers, don&amp;#8217;t like SQL. They view it as a monster best be avoided. Something only Database people will know. Something which is so scary and ugly, nobody really wants it.&lt;/p&gt;

&lt;p&gt;But I will give you a couple of good reasons why you shouldn&amp;#8217;t be afraid of SQL. And why you should welcome it as your best friend and partner in crime.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s go.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TDD is Dead – Not really</title>
      <link>https://skarlso.github.io/2014/05/26/tdd-is-dead-not-really/</link>
      <pubDate>Mon, 26 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/05/26/tdd-is-dead-not-really/</guid>
      <description>&lt;p&gt;Is TDD dead?&lt;/p&gt;

&lt;p&gt;Not really. So let&amp;#8217;s talk about this topic for a little bit.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m sure you already read a gazillion posts about this debate but frankly I&amp;#8217;m writing this for myself, to rant a little bit, you know&amp;#8230; Because somebody is wrong on the internet and I must intervene.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Five reasons why a front-end tester should learn Javascript</title>
      <link>https://skarlso.github.io/2014/05/23/five-reasons-why-a-front-end-tester-should-learn-javascript/</link>
      <pubDate>Fri, 23 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/05/23/five-reasons-why-a-front-end-tester-should-learn-javascript/</guid>
      <description>&lt;p&gt;Hello everybody.&lt;/p&gt;

&lt;p&gt;Today I would like to write about a very interesting topic, I hope. So let&amp;#8217;s get started.&lt;/p&gt;

&lt;p&gt;As the title already suggests, I&amp;#8217;m writing about why a front-end tester should learn at least a little bit about JavaScripting and the DOM.&lt;/p&gt;

&lt;p&gt;Ohhh and contrary to the belief CSP ( Content Security Policy ) will &lt;strong&gt;not&lt;/strong&gt; be the death of such scripts. There are white-lists and workarounds and exclusions which can be implemented in order to allow local JavaScripting to continue. So don&amp;#8217;t fret&amp;#8230; Read on.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Chrome Search Engine – Multiple Search Params</title>
      <link>https://skarlso.github.io/2014/05/18/using-chrome-search-engine-multiple-search-params/</link>
      <pubDate>Sun, 18 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/05/18/using-chrome-search-engine-multiple-search-params/</guid>
      <description>&lt;p&gt;Hello Everybody.&lt;/p&gt;

&lt;p&gt;Today I would like to write a few words about Chrome&amp;#8217;s Search Engines.&lt;/p&gt;

&lt;p&gt;You&amp;#8217;re probably already using it for a couple of things, like Google, or Amazon searches or YouTube or anything like that. But are you using it to access environments and testing tools faster, with queries?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Example when to use the Strategy Pattern</title>
      <link>https://skarlso.github.io/2014/02/19/example-when-to-use-the-strategy-pattern/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/02/19/example-when-to-use-the-strategy-pattern/</guid>
      <description>&lt;p&gt;Hello folks.&lt;/p&gt;

&lt;p&gt;A quick post about an interesting idea.&lt;/p&gt;

&lt;p&gt;I want to elaborate on a possibility to use the Strategy Design pattern.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to check content header on unknown number of items – Python</title>
      <link>https://skarlso.github.io/2014/02/11/how-to-check-content-header-on-unknown-number-of-items-python/</link>
      <pubDate>Tue, 11 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/02/11/how-to-check-content-header-on-unknown-number-of-items-python/</guid>
      <description>Hello guys.
I&amp;#8217;d like to share a little something with you. It&amp;#8217;s what I cooked up in Python to check an unknown number of content items in a web application.
Basically the script runs from a script folder under Grails. It goes through all the configured folders where there is static content like images, javascript, css and so on and so forth.
And then with curl it calls these items up in using their respective paths&amp;#8217;.</description>
    </item>
    
    <item>
      <title>Why you should care about the quality of your test code</title>
      <link>https://skarlso.github.io/2013/11/02/why-you-should-care-about-the-quality-of-your-test-code/</link>
      <pubDate>Sat, 02 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/11/02/why-you-should-care-about-the-quality-of-your-test-code/</guid>
      <description>Hello folks.
Today I would like to talk to you about something interesting I was talking about with a developer friend.
We talked about the quality of test code.
He said&amp;#8230; And I will quote this&amp;#8230;&amp;#8221;Why should we care? It&amp;#8217;s not production code. We aren&amp;#8217;t giving it to the customer.&amp;#8221;
There are a few reasons why you are going to get a slap in the face for a sentence like this.</description>
    </item>
    
    <item>
      <title>Cucumber Test Name and Tags on Feature</title>
      <link>https://skarlso.github.io/2013/04/15/cucumber-test-name-and-tags-on-feature/</link>
      <pubDate>Mon, 15 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/04/15/cucumber-test-name-and-tags-on-feature/</guid>
      <description>Hello everybody.
I would like to show you a gem today that I found out.
Apparently there is no easy way to get to the name of an executing cucumber scenario in cucumber-jvm
You can try something like that:
  @After //this is cucumbers @Afters public static void afterExecution&amp;#40;Scenario scenario&amp;#41; &amp;#123; logger.log&amp;#40;&#34;The status of the test is: &#34; + scenario.getStatus&amp;#40;&amp;#41;&amp;#41;; &amp;#125;     But that isn&amp;#8217;t giving you too much now is it?</description>
    </item>
    
    <item>
      <title>Groovy and Grails course summary</title>
      <link>https://skarlso.github.io/2013/04/11/groovy-and-grails-course-summary/</link>
      <pubDate>Thu, 11 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/04/11/groovy-and-grails-course-summary/</guid>
      <description>Hi folks.
I attended a 4 day course of Groovy and Grails and this is my attempt at writing up a summary to see how much I retained. I&amp;#8217;ll try to do this from the top of my head without peaking at my notes.
So let&amp;#8217;s begin.
Introductions
First of all, introductions. The course was held by Peter Ledbrook. He is the guy who wrote Grails in Action. He is awesome, go check him out.</description>
    </item>
    
    <item>
      <title>What you really need to know to become a Testing Expert</title>
      <link>https://skarlso.github.io/2013/01/21/what-you-really-need-to-become-a-testing-expert/</link>
      <pubDate>Mon, 21 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/01/21/what-you-really-need-to-become-a-testing-expert/</guid>
      <description>Hello Everybody.
Today I would like to show you what you need to become a Testing expert.
If you had noticed I deliberately left out the word Software. Why? Because becoming and expert in Testing Anything has the same root as becoming an expert to test software. And for that let me take you back to a Galaxy Far Far Away in Time AND Space.
The beginnings&amp;#8230;
I went to school in Oroszlany, my home town in Hungary.</description>
    </item>
    
    <item>
      <title>How to eliminate a parameter boom</title>
      <link>https://skarlso.github.io/2012/10/09/how-to-eliminate-a-parameter-boom/</link>
      <pubDate>Tue, 09 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/10/09/how-to-eliminate-a-parameter-boom/</guid>
      <description>Hello folks.
Today I want to write about a little trick I learned.
If you are working with legacy code and you don&amp;#8217;t have the chance to eliminate core design problems, you can use this little pattern to help you out.
Problem
Problem is that you have a class that has a gazillion collaborators and at some point in time one of the clever devs thought it would be a cool idea to do dependancy injection via the constructor.</description>
    </item>
    
    <item>
      <title>Coderetreat London</title>
      <link>https://skarlso.github.io/2012/09/30/89/</link>
      <pubDate>Sun, 30 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/09/30/89/</guid>
      <description>Hello everybody.
So yesterday I was on a little gathering called Coderetreat.
If you look at the link you can read everything about it. If not, I&amp;#8217;ve provided a short description.
What it is about?
So what is codereatreat about? In short it&amp;#8217;s about programmers getting together and honing and practicing there skills in order to become more at what they are doing. It&amp;#8217;s a practice run with great people. TDDing one problem the whole day long with constantly applied constraints.</description>
    </item>
    
    <item>
      <title>Learning programming with a visual mind</title>
      <link>https://skarlso.github.io/2012/09/09/learning-programming-with-a-visual-mind/</link>
      <pubDate>Sun, 09 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/09/09/learning-programming-with-a-visual-mind/</guid>
      <description>Hi folks.
Today I want to write to you about learning something with a visual mind. There are a gazillion posts out there that tell you how to learn something with a visual mind. However, there are only a few actually describing how to learn something as complicated and logical as programming. How do you draw up a function? How do you draw up a cycle or a structure?
Actually these are really easy.</description>
    </item>
    
    <item>
      <title>Journey into an unknown system</title>
      <link>https://skarlso.github.io/2012/06/28/journey-into-an-unknown-system/</link>
      <pubDate>Thu, 28 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/28/journey-into-an-unknown-system/</guid>
      <description>Aka, what you can do if you are facing and unknown framework / system you have to work with for quite some time.
Get intimate
You are going to live with this system for a while. The best thing you can do is getting to know it better. You have to get it to know like you would approche a fine lady. You have to ask it questions look after it, how it feels how its day was.</description>
    </item>
    
    <item>
      <title>Solution to Wrap Kata</title>
      <link>https://skarlso.github.io/2012/06/26/solution-to-wrap-kata/</link>
      <pubDate>Tue, 26 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/26/solution-to-wrap-kata/</guid>
      <description>My solution to the String Wrap Kata. The goal is to have it wrap a text on a given column width.
It is not the best solution but this is my first try. I did it with TDD so there were tests first, which I&amp;#8217;m not going to copy in..
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37   &amp;nbsp; public class WrapKata &amp;#123; &amp;nbsp; public String wrap&amp;#40;String input, int columnSize&amp;#41; &amp;#123; &amp;nbsp; if &amp;#40;input.</description>
    </item>
    
    <item>
      <title>Don’t throw Exception</title>
      <link>https://skarlso.github.io/2012/06/13/dont-throw-exception/</link>
      <pubDate>Wed, 13 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/13/dont-throw-exception/</guid>
      <description>Hi.
Today I want to talk about a common problem in many frameworks I encountered over the course of my carrier as a Java dev / automation engineer, whatnot.
Throwing Exceptions. That is in your method you have something like this:
  1   public void insertMethodNameHere&amp;#40;String param&amp;#41; throws Exception &amp;#123;&amp;#125;     This is bad. And I will tell you in short forms why.
Hides exceptions</description>
    </item>
    
    <item>
      <title>Making your code understandable</title>
      <link>https://skarlso.github.io/2012/06/13/making-your-code-understandable/</link>
      <pubDate>Wed, 13 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/06/13/making-your-code-understandable/</guid>
      <description>Hi!
I&amp;#8217;ve seen this many times over and over again. Many people have wrote books about it already. Like Uncle Bob&amp;#8217;s Clean Code. Like Pragmatic Programmer by Andrew Hunt and David Thomas. What makes your code understandable to others.
Is it Comments?
No. It&amp;#8217;s not comments. If your code could be read properly you wouldn&amp;#8217;t need comments to explain what it does. Like Uncle Bob said. A good code doesn&amp;#8217;t contain surprises.</description>
    </item>
    
    <item>
      <title>JMS Connection setup and Framework</title>
      <link>https://skarlso.github.io/2012/03/04/jms-connection-setup-and-framework/</link>
      <pubDate>Sun, 04 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/03/04/jms-connection-setup-and-framework/</guid>
      <description>Hello chumps.
Today I want to write about jms connection testing with a small framework. I wrote a small thing using a factory object model. It&amp;#8217;s a lead, a proof of concept. You can use this to go onward.
First, let&amp;#8217;s begin with the JMS connection it self.
JMS Connection
First rule of thumb is: &amp;#8220;Don&amp;#8217;t wait for a response when dealing with JMS queues.&amp;#8221; How so? Because, a JMS queue is asynchronous so you wont get back anything.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://skarlso.github.io/2012/02/27/configuration/</link>
      <pubDate>Mon, 27 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/02/27/configuration/</guid>
      <description>When I see something like this:
  1 2 3 4 5 6   public class Config &amp;#123; public static final string DATABASELINK = &#34;linkhere&#34;; . . . &amp;#125;     It sends a small, but chilling shiver down my spine. Just&amp;#8230; don&amp;#8217;t. There are a lot of possibilities to use configuration in Java. Java property files. Xml. Xml serialization. CSV file. Whatever suits you best, but this?</description>
    </item>
    
    <item>
      <title>Testing ‘code’ tag.</title>
      <link>https://skarlso.github.io/2012/02/26/testing-code-tag/</link>
      <pubDate>Sun, 26 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/02/26/testing-code-tag/</guid>
      <description>Hello.
This is just a quick post to test the working of the code tag.
  1 2 3   Given&amp;#40;/The Action is &amp;#40;&amp;#91;A-z&amp;#93;*&amp;#41;/&amp;#41; do |action| @action = action end     Perfect!!
The name of the plugin is WP-Syntax. The trick is to edit the page in plain HTML. Because the WordPress word editor screws up the &amp;lt;&amp;gt; tags. But surely you already knew that&amp;#8230;</description>
    </item>
    
  </channel>
</rss>