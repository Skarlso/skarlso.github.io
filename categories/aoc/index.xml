<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Aoc on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/aoc/</link>
    <description>Recent content in Aoc on Ramblings of a cloud engineer</description>
    <generator>Hugo -- 0.136.0</generator>
    <language>en</language>
    <lastBuildDate>Fri, 17 Dec 2021 01:01:00 +0100</lastBuildDate>
    <atom:link href="https://skarlso.github.io/categories/aoc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Advent Of Code - Day 12 - Updated</title>
      <link>https://skarlso.github.io/2021/12/17/aoc-day12-updated/</link>
      <pubDate>Fri, 17 Dec 2021 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2021/12/17/aoc-day12-updated/</guid>
      <description>&lt;h1 id=&#34;advent-of-code---day-12---updated&#34;&gt;Advent Of Code - Day 12 - Updated&lt;/h1&gt;
&lt;p&gt;A comment from one of my readers prompted me to revise my solution on this trying to do part 2. The suggestions was that
instead of using a &lt;code&gt;struct&lt;/code&gt; as seen, use &lt;code&gt;int&lt;/code&gt; and keep track of the count for small caves that way. I started to do
that but got into various problems along the way when I got frustrated with my code, deleted the whole thing and begun
again. But this lead me to a small, and better code than before which actually worked.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent Of Code - Day 15</title>
      <link>https://skarlso.github.io/2021/12/15/aoc-day15/</link>
      <pubDate>Wed, 15 Dec 2021 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2021/12/15/aoc-day15/</guid>
      <description>&lt;h1 id=&#34;advent-of-code---day-15&#34;&gt;Advent Of Code - Day 15&lt;/h1&gt;
&lt;p&gt;Today, again, we open up &lt;a href=&#34;https://www.redblobgames.com/pathfinding/a-star/introduction.html&#34;&gt;Red Blob Games&lt;/a&gt;.
It is a great source of information and descriptions. Especially, since this scenario is right up Red Blob&amp;rsquo;s ally.
We need some weighted path finding. And Red Blob has a lovely post on that using the ever famous &lt;a href=&#34;https://www.redblobgames.com/pathfinding/a-star/introduction.html#dijkstra&#34;&gt;Dijkstra&lt;/a&gt; algorithm with a Priority Queue.&lt;/p&gt;
&lt;h2 id=&#34;day-15---part-1&#34;&gt;Day 15 - Part 1&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s get to it. After refreshing my memory about priority queues, I remembered that there is a package and some sample
code in Go which implements priority queues using the &lt;code&gt;container/heap&lt;/code&gt; package &lt;a href=&#34;https://pkg.go.dev/container/heap#example-package-PriorityQueue&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent Of Code - Day 14</title>
      <link>https://skarlso.github.io/2021/12/14/aoc-day14/</link>
      <pubDate>Tue, 14 Dec 2021 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2021/12/14/aoc-day14/</guid>
      <description>&lt;h1 id=&#34;advent-of-code---day-14&#34;&gt;Advent Of Code - Day 14&lt;/h1&gt;
&lt;p&gt;Now we have to do some chemistry. Santa is pretty cool this way. They have a lot of skills mastered and read manuals
like an expert. But this also means that manuals are always faulty. But Santa manages to work around these problems
rather well.&lt;/p&gt;
&lt;h2 id=&#34;day-14---part-1&#34;&gt;Day 14 - Part 1&lt;/h2&gt;
&lt;p&gt;So, by reading the description and looking at the outcome, that a string only after 5 iterations will be this big, begs
the question if we should build a primitive solution for this. Well, yes, I think we should. Part 2 will most likely be
about something like, okay, now do this, but longer. I suspect this will be like the lanterfish thing. But let&amp;rsquo;s do it
anyways.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent Of Code - Day 13</title>
      <link>https://skarlso.github.io/2021/12/13/aoc-day13/</link>
      <pubDate>Mon, 13 Dec 2021 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2021/12/13/aoc-day13/</guid>
      <description>&lt;h1 id=&#34;advent-of-code---day-13&#34;&gt;Advent Of Code - Day 13&lt;/h1&gt;
&lt;p&gt;This one was a lot of fun! Matrix folding was a bit fiddly but nothing too serious&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;day13---part-1&#34;&gt;Day13 - Part 1&lt;/h2&gt;
&lt;p&gt;By solving this part, I actually solved both parts. I had to butcher it to not solve both parts because I already dealt
with folding both ways. First, we parse our input.&lt;/p&gt;
&lt;p&gt;We read out both the folding and the numbers first for easy handling later:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent Of Code - Day 12</title>
      <link>https://skarlso.github.io/2021/12/12/aoc-day12/</link>
      <pubDate>Sun, 12 Dec 2021 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2021/12/12/aoc-day12/</guid>
      <description>&lt;h1 id=&#34;advent-of-code---day-12&#34;&gt;Advent Of Code - Day 12&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;: I revisited this problem and completely revised my solution to it: &lt;a href=&#34;https://skarlso.github.io/2021/12/17/aoc-day12-updated/&#34;&gt;Day 12 Updated&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This one is a bit different from our little BFS walk the other day. I didn&amp;rsquo;t quite remember how DFS works, so I looked
at the &lt;a href=&#34;https://en.wikipedia.org/wiki/Depth-first_search&#34;&gt;Wikipedia&lt;/a&gt; a bit. Then I remembered that I implemented this
previously at some point in a later year.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;: I didn&amp;rsquo;t manage to finish part 2. I&amp;rsquo;m not sure what the bug is, but I moved on. When I&amp;rsquo;ll have the
inspiration, I&amp;rsquo;ll figure it out. Unless, someone has an idea what&amp;rsquo;s going on.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent Of Code - Day 11</title>
      <link>https://skarlso.github.io/2021/12/11/aoc-day11/</link>
      <pubDate>Sat, 11 Dec 2021 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2021/12/11/aoc-day11/</guid>
      <description>&lt;h1 id=&#34;advent-of-code---day-11&#34;&gt;Advent Of Code - Day 11&lt;/h1&gt;
&lt;p&gt;Today was an easier one again. It&amp;rsquo;s been a while since I last did some recursion anyway. At least, that&amp;rsquo;s how I solved
this. I&amp;rsquo;m pretty sure my solution isn&amp;rsquo;t the most efficient one, but at least it&amp;rsquo;s working and it&amp;rsquo;s not horrible.&lt;/p&gt;
&lt;h2 id=&#34;day-11---part-1&#34;&gt;Day 11 - Part 1&lt;/h2&gt;
&lt;p&gt;We have some number tracking to do again. This time, instead of fishes, we find ourself an bioluminescent octopus!
This time, the rules are neatly outlined to us in a straight forward list. It sort of is like a Conway&amp;rsquo;s Game of Life
scenario in which the current point affects its neighbours.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent Of Code - Day 10</title>
      <link>https://skarlso.github.io/2021/12/10/aoc-day10/</link>
      <pubDate>Fri, 10 Dec 2021 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2021/12/10/aoc-day10/</guid>
      <description>&lt;h1 id=&#34;advent-of-code---day-10&#34;&gt;Advent Of Code - Day 10&lt;/h1&gt;
&lt;p&gt;Again, a bit of breathing time with an easier one. Although, it can be difficult, if you go down the path of trying to do
it via recursion.&lt;/p&gt;
&lt;h2 id=&#34;day-10---part-1&#34;&gt;Day 10 - Part 1&lt;/h2&gt;
&lt;p&gt;We have to match brackets. There can be a bit of a hassle if you go off on the wrong foot and try to implement it using
recursion. But that works perfectly fine as well. But, there is a more elegant solution in which we just use a stack or
try matching the last by updating it constantly. The stack is a heck of a lot easier. And considering part 2, it&amp;rsquo;s also
more convenient.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent Of Code - Day 9</title>
      <link>https://skarlso.github.io/2021/12/09/aoc-day9/</link>
      <pubDate>Thu, 09 Dec 2021 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2021/12/09/aoc-day9/</guid>
      <description>&lt;h1 id=&#34;advent-of-code---day-9&#34;&gt;Advent Of Code - Day 9&lt;/h1&gt;
&lt;p&gt;This one was an interesting one, and a step up from previous days. I used a BFS here and I have a fantastic link for the
description, usage and appliance of BFS and others like A*. Pop over to &lt;a href=&#34;https://www.redblobgames.com/pathfinding/a-star/introduction.html&#34;&gt;Red Blog Games&lt;/a&gt; for
all the good stuff. There are fantastic articles about all sorts of path finding and walking algorithms.&lt;/p&gt;
&lt;h2 id=&#34;day-9---part-1&#34;&gt;Day 9 - Part 1&lt;/h2&gt;
&lt;p&gt;We start off again with something easy. Basically, just walk through a map, and find lowest values in it compared to
neighbors of a cell. Here, we get to know a thing called direction calculation. In Go I have a list of points for that
which will come in handy in other situations. But first, let&amp;rsquo;s parse our input. This time, I actually have a neat little
trick on Go to create a slice of numbers from a slice of string numbers:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent Of Code - Day 8</title>
      <link>https://skarlso.github.io/2021/12/08/aoc-day8/</link>
      <pubDate>Wed, 08 Dec 2021 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2021/12/08/aoc-day8/</guid>
      <description>&lt;h1 id=&#34;advent-of-code---day-8&#34;&gt;Advent Of Code - Day 8&lt;/h1&gt;
&lt;p&gt;If yesterday was a bit of a respite from adventuring, today was the boss fight for which we geared up for. The wall of
text that hit us in the face, nearly depleted all of our HP. Let&amp;rsquo;s hope tomorrow brings some potions.&lt;/p&gt;
&lt;h2 id=&#34;day-8---part-1&#34;&gt;Day 8 - Part 1&lt;/h2&gt;
&lt;p&gt;We start off relatively easy&amp;hellip; We have to deal with old school number displays that use segments to display numbers.
Luckily, for part one, all we are interested about is to find numbers in the output which are a definitive match
against numbers which are displayed using the segmented display system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent Of Code - Day 7</title>
      <link>https://skarlso.github.io/2021/12/07/aoc-day7/</link>
      <pubDate>Tue, 07 Dec 2021 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2021/12/07/aoc-day7/</guid>
      <description>&lt;h1 id=&#34;advent-of-code---day-7&#34;&gt;Advent Of Code - Day 7&lt;/h1&gt;
&lt;h2 id=&#34;day-7---part-1&#34;&gt;Day 7 - Part 1&lt;/h2&gt;
&lt;p&gt;Today we got a bit of respite with an easy one. Sort of like a Dark Souls bonfire.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;campfire&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/2021/12/07/bonfire.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s list our constraints.&lt;/p&gt;
&lt;p&gt;Today, we face a giant whale and some crabs in submarines which are less than effective. If they only move horizontally
I have no idea how they&amp;rsquo;ve gotten as far as you. Maybe they pivot from time to time. Or they are indigenous to this
region only.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent Of Code - Day 6</title>
      <link>https://skarlso.github.io/2021/12/06/aoc-day6/</link>
      <pubDate>Mon, 06 Dec 2021 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2021/12/06/aoc-day6/</guid>
      <description>&lt;h1 id=&#34;advent-of-code---day-6&#34;&gt;Advent Of Code - Day 6&lt;/h1&gt;
&lt;p&gt;Alright. This time, we are going to learn something that AOC does from time to time&amp;hellip; Let&amp;rsquo;s break it down.&lt;/p&gt;
&lt;h2 id=&#34;day-6---part-1&#34;&gt;Day 6 - Part 1&lt;/h2&gt;
&lt;p&gt;We start off really easy. We venture around in the sea, looking for nothing but trouble. We have our squid friend with
us, whom we were telling everything about vents on the sea floor. Which happen to line up perfectly straight for some
weird reason.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent Of Code - Day 5</title>
      <link>https://skarlso.github.io/2021/12/05/aoc-day5/</link>
      <pubDate>Sun, 05 Dec 2021 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2021/12/05/aoc-day5/</guid>
      <description>&lt;h1 id=&#34;advent-of-code---day-5&#34;&gt;Advent of Code - Day 5&lt;/h1&gt;
&lt;p&gt;Alright. Today, we are going to learn something that will be useful to us in the coming days.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see what we are dealing with.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edit&lt;/em&gt;: An interesting algorithm to read up on is &lt;a href=&#34;https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm&#34;&gt;Bresenham&amp;rsquo;s line algorithm&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;day-5---part-1&#34;&gt;Day 5 - Part 1&lt;/h2&gt;
&lt;p&gt;We deal with vents today. The sea is a dangerous place after all. Fortunately for us, these vents line up perfectly so
Santa can dodge them easily. We get a bunch of coordinates which form lines basically. The wording is pretty weird, says one
end and the other. But these are just begin and end coordinates in a 2D grid.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent Of Code - Day 4</title>
      <link>https://skarlso.github.io/2021/12/04/aoc-day4/</link>
      <pubDate>Sat, 04 Dec 2021 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2021/12/04/aoc-day4/</guid>
      <description>&lt;h1 id=&#34;advent-of-code---day-4&#34;&gt;Advent of Code - Day 4&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: There is surely a better solution than this one. But I&amp;rsquo;m fairly okay with this one. And I wrote it, so&amp;hellip;&lt;/p&gt;
&lt;p&gt;Okay, this day was a bit more complex now. But not in understanding what needed to be done, but implementing it. And
then, part two of course.&lt;/p&gt;
&lt;h2 id=&#34;day-4---part-1&#34;&gt;Day 4 - Part 1&lt;/h2&gt;
&lt;p&gt;We met a squid this day and decided to play a round of Bingo with it. Because, why not? Bingo is a simple game. You have
several papers on which there are a couple numbers in a square. Someone draws a number, and you need to find that number
on your boards, cards, slips, whatevers. Once you have marked 5 numbers in a row, or a column ( or, in the original game
diagonal also goes ) you win.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent Of Code - Day 3</title>
      <link>https://skarlso.github.io/2021/12/03/aoc-day3/</link>
      <pubDate>Fri, 03 Dec 2021 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2021/12/03/aoc-day3/</guid>
      <description>&lt;h1 id=&#34;advent-of-code---day-3&#34;&gt;Advent Of Code - Day 3&lt;/h1&gt;
&lt;p&gt;Here we go for day 3!&lt;/p&gt;
&lt;p&gt;This day was a tiny bit more complex. A lot of more things to read for sure! But all the more exciting!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get to it!&lt;/p&gt;
&lt;h2 id=&#34;day-3---part-1&#34;&gt;Day 3 - Part 1&lt;/h2&gt;
&lt;p&gt;We are dealing with binary numbers. At fist glance it can be daunting, but it&amp;rsquo;s actually not that complicated.
We have to find two numbers. &lt;code&gt;gamma rate&lt;/code&gt; and &lt;code&gt;epsilon rate&lt;/code&gt;. To do that, we have to parse some binary numbers
and then convert them to decimal. The two numbers can be found by looking for the most common bit at a given
position in all of the numbers and the least common one at a given position in all of the given numbers. Better
put, as we read on, find the bit that occurs most of the time and the one that occurs least of the time in all
numbers and put them together. That&amp;rsquo;s your new number.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent Of Code - Day 2</title>
      <link>https://skarlso.github.io/2021/12/02/aoc-day2/</link>
      <pubDate>Thu, 02 Dec 2021 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2021/12/02/aoc-day2/</guid>
      <description>&lt;h1 id=&#34;advent-of-code---day-2&#34;&gt;Advent Of Code - Day 2&lt;/h1&gt;
&lt;p&gt;Here we go for day 2!&lt;/p&gt;
&lt;p&gt;These first couple of problems prepare you on how to deal with input mainly. Learn and get used to parsing lines, and
get comfortable with data structures.&lt;/p&gt;
&lt;h2 id=&#34;day-2---part-1&#34;&gt;Day 2 - Part 1&lt;/h2&gt;
&lt;p&gt;We continue the story of Santa and the submarine. This time, he has the task of trying to steer the thing.
The task is straightforward. You get a couple of instructions and based on a value you increase or decrease a positions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent Of Code - Day 1</title>
      <link>https://skarlso.github.io/2021/12/01/aoc-day1/</link>
      <pubDate>Wed, 01 Dec 2021 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2021/12/01/aoc-day1/</guid>
      <description>&lt;h1 id=&#34;advent-of-code---day-1&#34;&gt;Advent Of Code - Day 1&lt;/h1&gt;
&lt;p&gt;Since 2015, &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent Of Code&lt;/a&gt; has been a part of my life. I&amp;rsquo;ve done various posts on it already, but this year will be different.
I&amp;rsquo;m going to blog every day every solution, why and how I&amp;rsquo;ve gotten to that solution.&lt;/p&gt;
&lt;p&gt;This isn&amp;rsquo;t going to be ever December, because I&amp;rsquo;m usually unable to solve a problem on a single day in the later days from day 10 or so. It takes more time then I have.
But I will solve all of them. At the time of this writing, I have completed almost all puzzles except for year 2019 which I didn&amp;rsquo;t much enjoy to be honest.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
