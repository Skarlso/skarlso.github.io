<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/ruby/</link>
    <description>Recent content in Ruby on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 12 Apr 2019 08:01:00 +0100</lastBuildDate>
    
	<atom:link href="https://skarlso.github.io/categories/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Living with a new Parser for a year</title>
      <link>https://skarlso.github.io/2019/04/12/living-with-a-parser/</link>
      <pubDate>Fri, 12 Apr 2019 08:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/04/12/living-with-a-parser/</guid>
      <description>Hi folks!
Today’s post is a retrospective. I would like to gather some thoughts about living with the new parser that I wrote for JsonPath.
After a little over a year, some interesting problems surfaced that I thought I’d share for people who also would like to endeavor on this path. Let’s begin.
Previously About, two years ago, I took over managing / fixing / improving this ruby gem: Json Parser.</description>
    </item>
    
    <item>
      <title>Keep your git forks updated all the time</title>
      <link>https://skarlso.github.io/2018/06/08/fork-updater/</link>
      <pubDate>Fri, 08 Jun 2018 08:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/06/08/fork-updater/</guid>
      <description>Hi folks.
Today&amp;rsquo;s is a quick tip for keeping your forks updated.
If you are like me, and have at least a 100 forks in your repository because: * You would like to contribute at some point * Save it for yourself because you are afraid that it disappears * Would like to make modifications for your own benefit * Whatever the reason
&amp;hellip;then you probably have a lot of trouble keeping them updated and making sure you always see the latest change.</description>
    </item>
    
    <item>
      <title>Replacing Eval with Object.send and a self written Parser</title>
      <link>https://skarlso.github.io/2017/05/28/replace-eval-with-object-send-and-a-parser/</link>
      <pubDate>Sun, 28 May 2017 19:23:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/05/28/replace-eval-with-object-send-and-a-parser/</guid>
      <description>Intro A while ago, I was added as a curator for a Gem called JsonPath. It&amp;rsquo;s a small but very useful and brilliant gem. It had a couple of problems which I fixed, but the hardest to eliminate proved to be a series of evals throughout the code.
You could opt in using eval with a constructor parameter, but generally, it was considered to be unsafe. Thus, normally when a project was using it, like Huginn they had to opt out by default, thus missing out on sweet parsing like this: $.</description>
    </item>
    
    <item>
      <title>Replacing Eval with Object.send and a self written Parser</title>
      <link>https://skarlso.github.io/2017/05/28/replace-eval-with-object-send-and-a-parser/</link>
      <pubDate>Sun, 28 May 2017 19:23:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/05/28/replace-eval-with-object-send-and-a-parser/</guid>
      <description>Intro A while ago, I was added as a curator for a Gem called JsonPath. It&amp;rsquo;s a small but very useful and brilliant gem. It had a couple of problems which I fixed, but the hardest to eliminate proved to be a series of evals throughout the code.
You could opt in using eval with a constructor parameter, but generally, it was considered to be unsafe. Thus, normally when a project was using it, like Huginn they had to opt out by default, thus missing out on sweet parsing like this: $.</description>
    </item>
    
    <item>
      <title>RScrap scraper</title>
      <link>https://skarlso.github.io/2016/10/06/rscrap-ruby-scraping-with-cronjob-scripts/</link>
      <pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/10/06/rscrap-ruby-scraping-with-cronjob-scripts/</guid>
      <description>Intro Hey folks.
So, there is this project called Huginn which I absolutely love.
But the thing is, that for a couple of scrappers ( at least for me ), I don&amp;rsquo;t want to spin up a whole rails app.
Hence, I&amp;rsquo;ve come up with RScrap. Which is a bunch of Ruby scripts run as cron jobs on a raspberry pi. And because I dislike emails as well, and most of the time, I don&amp;rsquo;t read them, I opted for a nicer solution.</description>
    </item>
    
    <item>
      <title>RScrap scraper</title>
      <link>https://skarlso.github.io/2016/10/06/rscrap-ruby-scraping-with-cronjob-scripts/</link>
      <pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/10/06/rscrap-ruby-scraping-with-cronjob-scripts/</guid>
      <description>Intro Hey folks.
So, there is this project called Huginn which I absolutely love.
But the thing is, that for a couple of scrappers ( at least for me ), I don&amp;rsquo;t want to spin up a whole rails app.
Hence, I&amp;rsquo;ve come up with RScrap. Which is a bunch of Ruby scripts run as cron jobs on a raspberry pi. And because I dislike emails as well, and most of the time, I don&amp;rsquo;t read them, I opted for a nicer solution.</description>
    </item>
    
    <item>
      <title>Ruby Sieve</title>
      <link>https://skarlso.github.io/2016/07/12/ruby-sieve/</link>
      <pubDate>Tue, 12 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/07/12/ruby-sieve/</guid>
      <description>Though it could be done better, I&amp;rsquo;m sure, but I&amp;rsquo;m actually pretty satisfied with this one. It loops only twice as opposed to filtered ranges and whatnot other solutions to the sieve. I was thinking of rather creating a list and deleting elements from it, but that&amp;rsquo;s already three loops.
Maybe I&amp;rsquo;ll do a benchmark later on more solutions.
# Sieve contains a function to return a set of primes class Sieve def initialize(n) @n = n end # Returns a list of primes up to a certain limit # @param n limit # @return list of primes def primes marked = [] primes = [] (2.</description>
    </item>
    
    <item>
      <title>Ruby Sieve</title>
      <link>https://skarlso.github.io/2016/07/12/ruby-sieve/</link>
      <pubDate>Tue, 12 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/07/12/ruby-sieve/</guid>
      <description>Though it could be done better, I&amp;rsquo;m sure, but I&amp;rsquo;m actually pretty satisfied with this one. It loops only twice as opposed to filtered ranges and whatnot other solutions to the sieve. I was thinking of rather creating a list and deleting elements from it, but that&amp;rsquo;s already three loops.
Maybe I&amp;rsquo;ll do a benchmark later on more solutions.
# Sieve contains a function to return a set of primes class Sieve def initialize(n) @n = n end # Returns a list of primes up to a certain limit # @param n limit # @return list of primes def primes marked = [] primes = [] (2.</description>
    </item>
    
  </channel>
</rss>