<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Channels on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/channels/</link>
    <description>Recent content in Channels on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 01 Jan 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://skarlso.github.io/categories/channels/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Byte arrays and Channels</title>
      <link>https://skarlso.github.io/2016/01/01/byte-arrays-and-channels/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/01/01/byte-arrays-and-channels/</guid>
      <description><![CDATA[<p>Hi folks and a Happy new Year!</p>
<p>Today, I would like to show you some interesting things you can do with channels. Consider the following simple example.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">generatedPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
	<span class="nx">correctPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">correctPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">passwordIncrement</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">,</span> <span class="nx">correctPassword</span><span class="p">)</span>
	<span class="nx">pass</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">correctPassword</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">pass</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">input</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">output</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">input</span>
		<span class="c1">//Introduce lengthy operation here
</span><span class="c1"></span>		<span class="c1">// time.Sleep(time.Second)
</span><span class="c1"></span>		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Checking p:&#34;</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">p</span> <span class="p">&gt;</span> <span class="mi">100000</span> <span class="p">{</span>
			<span class="nx">output</span> <span class="o">&lt;-</span> <span class="nx">p</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">passwordIncrement</span><span class="p">(</span><span class="nx">out</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span> <span class="o">:=</span> <span class="mi">0</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span><span class="o">++</span>
		<span class="nx">out</span> <span class="o">&lt;-</span> <span class="nx">p</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The premise is as follows. It launches two go routines. One, which generates passwords, and an other which checks for validity. The two routines talk to each other through the channel <code>generatedPassword</code>. That&rsquo;s the providing connections between them. The channel <code>correctPassword</code> provides output for the <code>checkPassword</code> routine.</p>
<p>If there is data received from <code>correctPassword</code> channel, we found our first password and there is no need to look further so we, print the password and quit. The channels will close with defer. This works. But the password is usually either a []byte or a string. With string, it still works.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">generatedPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
	<span class="nx">correctPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">correctPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">passwordIncrement</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">,</span> <span class="nx">correctPassword</span><span class="p">)</span>
	<span class="nx">pass</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">correctPassword</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">pass</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">input</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">output</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">input</span>
		<span class="c1">//Introduce lengthy operation here
</span><span class="c1"></span>		<span class="c1">// time.Sleep(time.Second)
</span><span class="c1"></span>		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Checking p:&#34;</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span>
		<span class="k">if</span> <span class="nf">performSomeCheckingOperation</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">output</span> <span class="o">&lt;-</span> <span class="nx">p</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">generateNewPassword</span><span class="p">(</span><span class="nx">out</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">p</span> <span class="kt">string</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span> <span class="p">=</span> <span class="nf">generate</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
		<span class="nx">out</span> <span class="o">&lt;-</span> <span class="nx">p</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The generating happens based on the previously generated password. For example, we increment, or permeate. aaaa, aaab, aaac&hellip;</p>
<p>So <code>generatedPassword</code> is a buffered channel, it gathers a 100 passwords from which checking retrieves passwords one by one and works on them in a slower process.</p>
<p>Now, this is fine, but using []byte arrays will always be more powerful and faster. So we would like to use []byte. Like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">generatedPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
	<span class="nx">correctPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">correctPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">passwordIncrement</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">,</span> <span class="nx">correctPassword</span><span class="p">)</span>
	<span class="nx">pass</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">correctPassword</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">pass</span><span class="p">))</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">input</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">output</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">input</span>
		<span class="c1">//Introduce lengthy operation here
</span><span class="c1"></span>		<span class="c1">// time.Sleep(time.Second)
</span><span class="c1"></span>		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Checking p:&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">p</span><span class="p">))</span>
		<span class="k">if</span> <span class="nf">performSomeCheckingOperation</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">output</span> <span class="o">&lt;-</span> <span class="nx">p</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">generateNewPassword</span><span class="p">(</span><span class="nx">out</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">p</span> <span class="p">[]</span><span class="kt">byte</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span> <span class="p">=</span> <span class="nf">generate</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
		<span class="nx">out</span> <span class="o">&lt;-</span> <span class="nx">p</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This will not work. Why? Because []byte is a slice and thus will be constantly overwritten. The checking go routine will always only check the last data and many generated passwords will be lost. This is also noted in go&rsquo;s scanner here =&gt; <a href="https://golang.org/pkg/bufio/#Scanner.Bytes">Scanner.Bytes</a></p>
<p>We have a couple of options here.</p>
<p>We could use <code>string</code> channels and convert to []byte after. This is still okay, because the conversion isn&rsquo;t very CPU intensive.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="o">...</span>
<span class="nx">generatedPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="nx">correctPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>
<span class="o">...</span>
<span class="nx">p</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="o">&lt;-</span><span class="nx">input</span><span class="p">)</span> <span class="c1">//This will work very nicely.
</span><span class="c1"></span><span class="o">...</span>
</code></pre></td></tr></table>
</div>
</div><p>Options two would be If you have a fixed password to handle, fix data, for example MD5 hash, you can use a byte array. Like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">const</span> <span class="nx">PASSWD</span><span class="p">=</span><span class="mi">13</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">generatedPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="p">[</span><span class="nx">PASSWD</span><span class="p">]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
	<span class="nx">correctPassword</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="p">[</span><span class="nx">PASSWD</span><span class="p">]</span><span class="kt">byte</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">correctPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">passwordIncrement</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">generatedPassword</span><span class="p">,</span> <span class="nx">correctPassword</span><span class="p">)</span>
	<span class="nx">pass</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">correctPassword</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">pass</span><span class="p">))</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">input</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="p">[</span><span class="nx">PASSWD</span><span class="p">]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">output</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="p">[</span><span class="nx">PASSWD</span><span class="p">]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">input</span>
		<span class="c1">//Introduce lengthy operation here
</span><span class="c1"></span>		<span class="c1">// time.Sleep(time.Second)
</span><span class="c1"></span>		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Checking p:&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">p</span><span class="p">))</span>
		<span class="k">if</span> <span class="nf">performSomeCheckingOperation</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">output</span> <span class="o">&lt;-</span> <span class="nx">p</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">generateNewPassword</span><span class="p">(</span><span class="nx">out</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="p">[</span><span class="nx">PASSWD</span><span class="p">]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">p</span> <span class="p">[</span><span class="nx">PASSWD</span><span class="p">]</span><span class="kt">byte</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">p</span> <span class="p">=</span> <span class="nf">generate</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
		<span class="nx">out</span> <span class="o">&lt;-</span> <span class="nx">p</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This is also one solution. If you have to convert between the two, could go with <code>p := byte[:]</code>.</p>
<p>Conclusion is, that use conversion rather than string types and be aware that using slices in channels is dangerous.</p>
<p>Thanks for reading!
Gergely.</p>
]]></description>
    </item>
    
  </channel>
</rss>