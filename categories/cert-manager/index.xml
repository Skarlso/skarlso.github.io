<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cert-manager on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/cert-manager/</link>
    <description>Recent content in cert-manager on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 25 Oct 2023 01:01:00 +0100</lastBuildDate><atom:link href="https://skarlso.github.io/categories/cert-manager/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Self-Signed locally trusted certificates with cert-manager</title>
      <link>https://skarlso.github.io/2023/10/25/self-signed-locally-trusted-certificates-with-cert-manager/</link>
      <pubDate>Wed, 25 Oct 2023 01:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2023/10/25/self-signed-locally-trusted-certificates-with-cert-manager/</guid>
      <description>Self-Signed locally trusted certificates with cert-manager We are going to discuss how to set up a Kubernetes environment where components can run using HTTPS without pain.
Premise Usually, people either generate certificates outside the cluster using either openssl, or mkcert, then mount them in or use those as seeds for further generation. This poses a number of problems during testing and distribution of these certificates. And then, switching to production, it proves that local certs will either no longer work or pose even more problems in getting them properly distributed again.</description>
    </item>
    
  </channel>
</rss>
