<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/go/</link>
    <description>Recent content in Go on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Sun, 21 Apr 2019 21:01:00 +0100</lastBuildDate><atom:link href="https://skarlso.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Efferent and Afferent metrics in Go</title>
      <link>https://skarlso.github.io/2019/04/21/efferent-and-afferent-metrics-in-go/</link>
      <pubDate>Sun, 21 Apr 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/04/21/efferent-and-afferent-metrics-in-go/</guid>
      <description>Intro Hi folks!
Today I would like to write about a metric that I read in a book called Clean Architecture from Robert Cecil Martin ( Uncle Bob ).
Abstract The metrics I mean are Efferent and Afferent coupling in packages. So you, dear reader, don&amp;rsquo;t have to navigate away from this page, here are the descriptions pasted in:
  Afferent couplings (Ca): The number of classes in other packages that depend upon classes within the package is an indicator of the package&amp;rsquo;s responsibility.</description>
    </item>
    
    <item>
      <title>Go SSH with Host Key Verification</title>
      <link>https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/</link>
      <pubDate>Sun, 17 Feb 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/</guid>
      <description>Hi folks.
Following a long search and reading lots of debates and possibilities of doing SSH within Go, I was shocked to see that not a great many tools and people use SSH with host key verification. What I usually see is this:
HostKeyCallback: ssh.InsecureIgnoreHostKey() This is terrible. Now, I realise that doing HostKeyVerification can be tedious, but don&amp;rsquo;t fear. It&amp;rsquo;s actually easy now that the Go team provided the knownhosts subpackage in their crypto SSH package located here: KnownHosts.</description>
    </item>
    
    <item>
      <title>Kubernetes distributed application deployment with sample Face Recognition App</title>
      <link>https://skarlso.github.io/2018/03/15/kubernetes-distributed-application/</link>
      <pubDate>Thu, 15 Mar 2018 23:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/03/15/kubernetes-distributed-application/</guid>
      <description>Intro Alright folks. Settle in and get comfortable. This is going to be a long, but hopefully, fun ride.
I&amp;rsquo;m going to deploy a distributed application with Kubernetes. I attempted to create an application that I thought resembled a real world app. Obviously I had to cut some corners due to time and energy constraints.
My focus will be on Kubernetes and deployment.
Shall we delve right in?
The Application TL;DR The application itself consists of six parts.</description>
    </item>
    
    <item>
      <title>Go Budapest Meetup</title>
      <link>https://skarlso.github.io/2018/02/06/go-budapest-meetup/</link>
      <pubDate>Tue, 06 Feb 2018 23:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/02/06/go-budapest-meetup/</guid>
      <description>Intro So I was at Go Budapest Meetup yesterday, where the brilliant Johan Brandhorst gave a talk about his project based on gRPC using gRPC-web + GopherJS + protobuf. He also has some Go contributions and check out his project here: Protobuf. It&amp;rsquo;s GopherJS Bindings for ProtobufJS and gRPC-Web.
It was interesting to see where these projects could lead and I see the potential in them. I liked the usage of Protobuf and gRPC, I don&amp;rsquo;t have THAT much experience with them.</description>
    </item>
    
    <item>
      <title>Huge Furnace Update</title>
      <link>https://skarlso.github.io/2018/01/13/furnace-massive-update/</link>
      <pubDate>Sat, 13 Jan 2018 22:34:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/01/13/furnace-massive-update/</guid>
      <description>Intro Hi folks.
In the past couple of months I&amp;rsquo;ve been slowly updating Furnace.
There are three major changes that happened. Let&amp;rsquo;s take a look at them, shall we?
Google Cloud Platform Furnace now supports Google Cloud Platform (GCP). It provides the same API to handle GCP resource as with AWS. Namely, create, delete, status, update. I opted to leave out push because Google mostly works with git based repositories, meaning a push is literary just a push, than Google handles distributing the new code by itself.</description>
    </item>
    
    <item>
      <title>Commit-Build-Deploy With AWS CodeBuild and Lambda</title>
      <link>https://skarlso.github.io/2017/12/04/commit-build-deploy/</link>
      <pubDate>Mon, 04 Dec 2017 22:34:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/12/04/commit-build-deploy/</guid>
      <description>Intro Hi All.
Today I would like to write about an AWS finger practice.
Previously, I wrote about how I build and deploy my blog with Wercker. Since, I&amp;rsquo;m a cloud engineer and I dislike Oracle and it&amp;rsquo;s ever expending tenctacles into the abyss, I wanted to switch to use something else.
My build and deploy cycle is simple.
Commit to Blogsource Repo -&amp;gt; Wercker WebHook -&amp;gt; Builds my blog using Hugo -&amp;gt; Pushed to a Different Repository which my Github Blog.</description>
    </item>
    
    <item>
      <title>Furnace Binaries</title>
      <link>https://skarlso.github.io/2017/09/03/furnace-binaries/</link>
      <pubDate>Sun, 03 Sep 2017 10:34:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/09/03/furnace-binaries/</guid>
      <description>Hey folks.
Quick note. Furnace now comes pre-compiled easy to access binaries which you can download and use out of the box.
No need to install anything, or compile the source. Just download, unzip and use.
Here is the website: Furnace Website.
Enjoy, Cheers, Gergely.</description>
    </item>
    
    <item>
      <title>How to do Google Sign-In with Go - Part 2</title>
      <link>https://skarlso.github.io/2016/11/02/google-signin-with-go-part2/</link>
      <pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/11/02/google-signin-with-go-part2/</guid>
      <description>Intro Hi Folks.
This is a follow up on my previous post about Google Sign-In. In this post we will discover what to do with the information retrieved in the first encounter, which you can find here: Google Sign-In Part 1.
Forewords The Project Everything I did in the first post, and that I&amp;rsquo;m going to do in this example, can be found in this project: Google-OAuth-Go-Sample.
Just to recap, we left off previously on the point where we successfully obtained information about the user, with a secure token and a session initiated with them.</description>
    </item>
    
    <item>
      <title>Always Go with []byte</title>
      <link>https://skarlso.github.io/2016/08/19/always-go-with-bytes/</link>
      <pubDate>Fri, 19 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/08/19/always-go-with-bytes/</guid>
      <description>Another quick reminder&amp;hellip; Always go with []byte if possible. I said it before, and I&amp;rsquo;m going to say it over and over again. It&amp;rsquo;s crucial.
Here is a little code from exercism.io. First, with strings:
package igpay import ( &amp;#34;strings&amp;#34; ) // PigLatin translates reguler old English into awesome pig-latin. func PigLatin(in string) (ret string) { for _, v := range strings.Fields(in) { ret += pigLatin(v) + &amp;#34; &amp;#34; } return strings.</description>
    </item>
    
    <item>
      <title>Global variable for never changing regex</title>
      <link>https://skarlso.github.io/2016/08/16/never-changing-regex/</link>
      <pubDate>Tue, 16 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/08/16/never-changing-regex/</guid>
      <description>Quick reminder. If you have a never changing regex in Go, do NOT put it into a frequently called function. ALWAYS put it into a global variable. I&amp;rsquo;ll show you why.
Benchmark for code with a variable in a frequently called function:
BenchmarkNumber-8 30000	41633 ns/op BenchmarkAreaCode-8 50000	27736 ns/op BenchmarkFormat-8 50000	29263 ns/op PASS ok _/phone-number	5.110s Benchmark for code with the same variable outside in a global scope:</description>
    </item>
    
    <item>
      <title>How to do Google sign-in with Go</title>
      <link>https://skarlso.github.io/2016/06/12/google-signin-with-go/</link>
      <pubDate>Sun, 12 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/06/12/google-signin-with-go/</guid>
      <description>&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Today, I would like to write up a step - by - step guide with a sample web app on how to do Google Sign-In and authorization.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Wercker Fixed</title>
      <link>https://skarlso.github.io/2016/03/09/wercker-fixed/</link>
      <pubDate>Wed, 09 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/03/09/wercker-fixed/</guid>
      <description>Hi Folks.
So Wercker was not working. After a minor modification it seems to be okay now. The config file needed for it to work looks like this:
box: golang build: steps: - arjen/hugo-build: theme: redlounge deploy: steps: - install-packages: packages: git - leipert/git-push: gh_oauth: $GIT_TOKEN repo: skarlso/skarlso.github.io branch: master basedir: public The modification is the box type to golang and removed ssh-client from packages.
Thanks, Gergely.</description>
    </item>
    
    <item>
      <title>Wercker Test</title>
      <link>https://skarlso.github.io/2016/03/04/wercker-test-2/</link>
      <pubDate>Fri, 04 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/03/04/wercker-test-2/</guid>
      <description>Basics This is a wercker Test.</description>
    </item>
    
    <item>
      <title>Wercker Test</title>
      <link>https://skarlso.github.io/2016/02/10/wercker-test/</link>
      <pubDate>Wed, 10 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/02/10/wercker-test/</guid>
      <description>Basics This is a wercker Test.</description>
    </item>
    
    <item>
      <title>Doing CORS in Go with Gin and JSON</title>
      <link>https://skarlso.github.io/2016/02/02/doing-cors-in-go-with-gin-and-json/</link>
      <pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/02/02/doing-cors-in-go-with-gin-and-json/</guid>
      <description>Basics Hello folks.
This will be a quick post about how to do CORS with jQuery, Gin in Go with a very simple ajax GET and Json.
I&amp;rsquo;m choosing JSON here because basically I don&amp;rsquo;t really like JSONP. And actually, it&amp;rsquo;s not very complicated to do CORS, it&amp;rsquo;s just hidden enough so that it doesn&amp;rsquo;t become transparent.
First, what is CORS? It&amp;rsquo;s Cross-Platform Resource Sharing. It has been invented so that without your explicit authorization in the header of a request, Javascript can&amp;rsquo;t reach outside of your domain and be potentially harmful to your visitors.</description>
    </item>
    
    <item>
      <title>My Journey in advent of code</title>
      <link>https://skarlso.github.io/2016/01/22/my-journey-in-advent-of-code/</link>
      <pubDate>Fri, 22 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/01/22/my-journey-in-advent-of-code/</guid>
      <description>Hello folks.
I wanted to share with you my tale of working through the problems with Advent Of Code.
It is a nice tale and there are a few things I learned from it, especially in Go, since I used that solve all of the problems. So, let&amp;rsquo;s get started.
Solving the problems The most important lesson I learned while doing these exercises was, how to solve these problems. A couple of them were simple enough to not have to over think it, but most of them got very tricky.</description>
    </item>
    
    <item>
      <title>Improving performance with byte slice and int map</title>
      <link>https://skarlso.github.io/2016/01/05/improving-performance-with-byte-slice-and-int-map/</link>
      <pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/01/05/improving-performance-with-byte-slice-and-int-map/</guid>
      <description>Hello Folks.
Today I would like to share with you my little tale of refactoring my solution to Advent Of Code Day 13.
It&amp;rsquo;s a lovely tale of action, adventure, drama, and comedy.
Let&amp;rsquo;s being with my first iteration of the problem.
package main import ( &amp;#34;bufio&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;math&amp;#34; &amp;#34;os&amp;#34; &amp;#34;strconv&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;github.com/skarlso/goutils/arrayutils&amp;#34; ) var seatingCombinations = make([][]string, 0) var table = make(map[string][]map[string]int) var keys = make([]string, 0) //Person a person type Person struct { // neighbour *Person 	name string like int } func main() { file, _ := os.</description>
    </item>
    
    <item>
      <title>Byte arrays and Channels</title>
      <link>https://skarlso.github.io/2016/01/01/byte-arrays-and-channels/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/01/01/byte-arrays-and-channels/</guid>
      <description>Hi folks and a Happy new Year!
Today, I would like to show you some interesting things you can do with channels. Consider the following simple example.
package main import &amp;#34;fmt&amp;#34; func main() { generatedPassword := make(chan int, 100) correctPassword := make(chan int) defer close(generatedPassword) defer close(correctPassword) go passwordIncrement(generatedPassword) go checkPassword(generatedPassword, correctPassword) pass := &amp;lt;-correctPassword fmt.Println(pass) } func checkPassword(input &amp;lt;-chan int, output chan&amp;lt;- int) { for { p := &amp;lt;-input //Introduce lengthy operation here 	// time.</description>
    </item>
    
    <item>
      <title>Use Byte Array Instead of Strings</title>
      <link>https://skarlso.github.io/2015/12/29/use-byte-array-instead-of-strings/</link>
      <pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/29/use-byte-array-instead-of-strings/</guid>
      <description>Hello Folks.
This is just a quick post on the topic and a reminder for myself and everybody to ALWAYS USE []BYTE INSTEAD OF STRINGS.
[]Byte is marginally faster than a simple Strings. In fact, I would say using []byte should be the standard instead of strings.
Sample code:
package solutions import &amp;#34;fmt&amp;#34; const ( //INPUT input  INPUT = &amp;#34;1321131112&amp;#34; //LIMIT limit  LIMIT = 50 ) //LookAndSay translates numbers according to Look and Say algo func LookAndSay(s string, c chan string) { charCount := 1 look := &amp;#34;&amp;#34; for i := range s { if i+1 &amp;lt; len(s) { if s[i] == s[i+1] { charCount++ } else { look += fmt.</description>
    </item>
    
    <item>
      <title>Use Byte Slice Instead of Strings</title>
      <link>https://skarlso.github.io/2015/12/29/use-byte-slice-instead-of-strings/</link>
      <pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/29/use-byte-slice-instead-of-strings/</guid>
      <description>Hello Folks.
This is just a quick post on the topic and a reminder for myself and everybody to ALWAYS USE []BYTE INSTEAD OF STRINGS.
[]Byte is marginally faster than a simple Strings. In fact, I would say using []byte should be the standard instead of strings.
Sample code:
package solutions import &amp;#34;fmt&amp;#34; const ( //INPUT input  INPUT = &amp;#34;1321131112&amp;#34; //LIMIT limit  LIMIT = 50 ) //LookAndSay translates numbers according to Look and Say algo func LookAndSay(s string, c chan string) { charCount := 1 look := &amp;#34;&amp;#34; for i := range s { if i+1 &amp;lt; len(s) { if s[i] == s[i+1] { charCount++ } else { look += fmt.</description>
    </item>
    
  </channel>
</rss>
