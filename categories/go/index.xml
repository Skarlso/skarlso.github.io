<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Ramblings of a build engineer</title>
    <link>https://skarlso.github.io/categories/go/</link>
    <description>Recent content in Go on Ramblings of a build engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 01 Jan 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://skarlso.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Byte arrays and Channels</title>
      <link>https://skarlso.github.io/2016/01/01/byte-arrays-and-channels</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/01/01/byte-arrays-and-channels</guid>
      <description>&lt;p&gt;Hi folks and a Happy new Year!&lt;/p&gt;

&lt;p&gt;Today, I would like to show you some interesting things you can do with channels. Consider the following simple example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	generatedPassword := make(chan int, 100)
	correctPassword := make(chan int)
	defer close(generatedPassword)
	defer close(correctPassword)
	go passwordIncrement(generatedPassword)
	go checkPassword(generatedPassword, correctPassword)
	pass := &amp;lt;-correctPassword
	fmt.Println(pass)
}

func checkPassword(input &amp;lt;-chan int, output chan&amp;lt;- int) {
	for {
		p := &amp;lt;-input
		//Introduce lengthy operation here
		// time.Sleep(time.Second)
		fmt.Println(&amp;quot;Checking p:&amp;quot;, p)
		if p &amp;gt; 100000 {
			output &amp;lt;- p
		}
	}
}

func passwordIncrement(out chan&amp;lt;- int) {
	p := 0
	for {
		p++
		out &amp;lt;- p
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The premise is as follows. It launches two go routines. One, which generates passwords, and an other which checks for validity. The two routines talk to each other through the channel &lt;code&gt;generatedPassword&lt;/code&gt;. That&amp;rsquo;s the providing connections between them. The channel &lt;code&gt;correctPassword&lt;/code&gt; provides output for the &lt;code&gt;checkPassword&lt;/code&gt; routine.&lt;/p&gt;

&lt;p&gt;If there is data received from &lt;code&gt;correctPassword&lt;/code&gt; channel, we found our first password and there is no need to look further so we, print the password and quit. The channels will close with defer. This works. But the password is usually either a []byte or a string. With string, it still works.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	generatedPassword := make(chan string, 100)
	correctPassword := make(chan string)
	defer close(generatedPassword)
	defer close(correctPassword)
	go passwordIncrement(generatedPassword)
	go checkPassword(generatedPassword, correctPassword)
	pass := &amp;lt;-correctPassword
	fmt.Println(pass)
}

func checkPassword(input &amp;lt;-chan string, output chan&amp;lt;- string) {
	for {
		p := &amp;lt;-input
		//Introduce lengthy operation here
		// time.Sleep(time.Second)
		fmt.Println(&amp;quot;Checking p:&amp;quot;, p)
		if performSomeCheckingOperation(p) {
			output &amp;lt;- p
		}
	}
}

func generateNewPassword(out chan&amp;lt;- string) {
	var p string
	for {
		p = generate(p)
		out &amp;lt;- p
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The generating happens based on the previously generated password. For example, we increment, or permeate. aaaa, aaab, aaac&amp;hellip;&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;generatedPassword&lt;/code&gt; is a buffered channel, it gathers a 100 passwords from which checking retrieves passwords one by one and works on them in a slower process.&lt;/p&gt;

&lt;p&gt;Now, this is fine, but using []byte arrays will always be more powerful and faster. So we would like to use []byte. Like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	generatedPassword := make(chan []byte, 100)
	correctPassword := make(chan []byte)
	defer close(generatedPassword)
	defer close(correctPassword)
	go passwordIncrement(generatedPassword)
	go checkPassword(generatedPassword, correctPassword)
	pass := &amp;lt;-correctPassword
	fmt.Println(string(pass))
}

func checkPassword(input &amp;lt;-chan []byte, output chan&amp;lt;- []byte) {
	for {
		p := &amp;lt;-input
		//Introduce lengthy operation here
		// time.Sleep(time.Second)
		fmt.Println(&amp;quot;Checking p:&amp;quot;, string(p))
		if performSomeCheckingOperation(p) {
			output &amp;lt;- p
		}
	}
}

func generateNewPassword(out chan&amp;lt;- []byte) {
	var p []byte
	for {
		p = generate(p)
		out &amp;lt;- p
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will not work. Why? Because []byte is a slice and thus will be constantly overwritten. The checking go routine will always only check the last data and many generated passwords will be lost. This is also noted in go&amp;rsquo;s scanner here =&amp;gt; &lt;a href=&#34;https://golang.org/pkg/bufio/#Scanner.Bytes&#34;&gt;Scanner.Bytes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have a couple of options here.&lt;/p&gt;

&lt;p&gt;We could use &lt;code&gt;string&lt;/code&gt; channels and convert to []byte after. This is still okay, because the conversion isn&amp;rsquo;t very CPU intensive.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;...
generatedPassword := make(chan string, 100)
correctPassword := make(chan string)
...
p := []byte(&amp;lt;-input) //This will work very nicely.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Options two would be If you have a fixed password to handle, fix data, for example MD5 hash, you can use a byte array. Like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

const PASSWD=13

func main() {
	generatedPassword := make(chan [PASSWD]byte, 100)
	correctPassword := make(chan [PASSWD]byte)
	defer close(generatedPassword)
	defer close(correctPassword)
	go passwordIncrement(generatedPassword)
	go checkPassword(generatedPassword, correctPassword)
	pass := &amp;lt;-correctPassword
	fmt.Println(string(pass))
}

func checkPassword(input &amp;lt;-chan [PASSWD]byte, output chan&amp;lt;- [PASSWD]byte) {
	for {
		p := &amp;lt;-input
		//Introduce lengthy operation here
		// time.Sleep(time.Second)
		fmt.Println(&amp;quot;Checking p:&amp;quot;, string(p))
		if performSomeCheckingOperation(p) {
			output &amp;lt;- p
		}
	}
}

func generateNewPassword(out chan&amp;lt;- [PASSWD]byte) {
	var p [8]byte
	for {
		p = generate(p)
		out &amp;lt;- p
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is also one solution. If you have to convert between the two, could go with &lt;code&gt;p := byte[:]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Conclusion is, that use conversion rather than string types and be aware that using slices in channels is dangerous.&lt;/p&gt;

&lt;p&gt;Thanks for reading!
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use Byte Array Instead of Strings</title>
      <link>https://skarlso.github.io/2015/12/29/use-byte-array-instead-of-strings/</link>
      <pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/29/use-byte-array-instead-of-strings/</guid>
      <description>&lt;p&gt;Hello Folks.&lt;/p&gt;

&lt;p&gt;This is just a quick post on the topic and a reminder for myself and everybody to ALWAYS USE []BYTE INSTEAD OF STRINGS.&lt;/p&gt;

&lt;p&gt;[]Byte is marginally faster than a simple Strings. In fact, I would say using []byte should be the standard instead of strings.&lt;/p&gt;

&lt;p&gt;Sample code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package solutions

import &amp;quot;fmt&amp;quot;

const (
    //INPUT input
    INPUT = &amp;quot;1321131112&amp;quot;
    //LIMIT limit
    LIMIT = 50
)

//LookAndSay translates numbers according to Look and Say algo
func LookAndSay(s string, c chan string) {
    charCount := 1
    look := &amp;quot;&amp;quot;
    for i := range s {
        if i+1 &amp;lt; len(s) {
            if s[i] == s[i+1] {
                charCount++
            } else {
                look += fmt.Sprintf(&amp;quot;%d%s&amp;quot;, charCount, string(s[i]))
                charCount = 1
            }
        } else {
            look += fmt.Sprintf(&amp;quot;%d%s&amp;quot;, charCount, string(s[i]))
        }
    }
    c &amp;lt;- look
}

//GetLengthOfLookAndSay Retrieve the Length of a lookandsay done Limit times
func GetLengthOfLookAndSay() {
    c := make(chan string, 0)
    go LookAndSay(INPUT, c)
    finalString := &amp;lt;-c
    for i := 0; i &amp;lt;= LIMIT-2; i++ {
        go LookAndSay(finalString, c)
        finalString = &amp;lt;-c
        // fmt.Println(finalString)
    }
    fmt.Println(&amp;quot;Lenght of final String:&amp;quot;, len(finalString))
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This, with the limit raised to 50 run for ~1 hour. Even with the routines although they were just for show since they had to wait for each others input.&lt;/p&gt;

&lt;p&gt;Now change this to []byte and the run time was almost under 2 seconds on my machine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package solutions

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;strconv&amp;quot;
)

const (
    //LIMIT limit
    LIMIT = 50
)

//INPUT puzzle input
//This used to be a string until I was reminded that BYTE ARRAY IS ALWAYS FASTER!
var INPUT = []byte(&amp;quot;1321131112&amp;quot;)

//LookAndSay translates numbers according to Look and Say algo
func LookAndSay(s []byte) (look []byte) {
    charCount := 1
    for i := range s {
        if i+1 &amp;lt; len(s) {
            if s[i] == s[i+1] {
                charCount++
            } else {
                b := []byte(strconv.FormatInt(int64(charCount), 10))
                look = append(look, b[0], s[i])
                charCount = 1
            }
        } else {
            b := []byte(strconv.FormatInt(int64(charCount), 10))
            look = append(look, b[0], s[i])
        }
    }
    return
}

//GetLengthOfLookAndSay Retrieve the Length of a lookandsay done Limit times
func GetLengthOfLookAndSay() {
    finalString := INPUT
    for i := 0; i &amp;lt;= LIMIT-1; i++ {
        finalString = LookAndSay(finalString)
    }
    fmt.Println(&amp;quot;Lenght of final String:&amp;quot;, len(finalString))
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the solution for Day 10 on &lt;a href=&#34;http://adventofcode.com/&#34;&gt;AdventOfCode&lt;/a&gt; by the way.&lt;/p&gt;

&lt;p&gt;Thanks for readin&amp;rsquo;.
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Recursive Letter Frequency Count</title>
      <link>https://skarlso.github.io/2015/12/23/recursive-freq-count/</link>
      <pubDate>Wed, 23 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/23/recursive-freq-count/</guid>
      <description>&lt;p&gt;Hello everybody!&lt;/p&gt;

&lt;p&gt;I wanted to do a sort post about word frequency count. I did it many times now and I was curious as how a recursive solution would perform as opposed to looping.&lt;/p&gt;

&lt;p&gt;So I wrote it up quickly and added a few benchmarks with different sized data.&lt;/p&gt;

&lt;p&gt;First&amp;hellip;. The code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var freqMap = make(map[string]int, 0)

func countLettersRecursive(s string) string {
    if len(s) == 0 {
        return s
    }
    freqMap[string(s[0])]++
    return countLettersRecursive(s[1:])
}

func countLettersLoop(s string) {
    for _, v := range s {
        freqMap[string(v)]++
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Very simple. The first run with a small sample: &amp;ldquo;asdfasdfasdfasdfasdf&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;BenchmarkLoopFrequencyCount  5000000           377 ns/op
BenchmarkRecursiveFrequencyCount     5000000           380 ns/op
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They almost equal but Recursive seems to be lagging behind. So I increased the sample size to a text which was 496 long.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PASS
BenchmarkLoopFrequencyCount    30000         53336 ns/op
BenchmarkRecursiveFrequencyCount       20000         61780 ns/op
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, as expected, recursing is less performant than looping. Also, I think my machine would die from a larger data size&amp;hellip;&lt;/p&gt;

&lt;p&gt;But the recursive looks so much cooler though.&lt;/p&gt;

&lt;p&gt;Thanks for reading!
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go Development Environment</title>
      <link>https://skarlso.github.io/2015/12/08/go-development-environment/</link>
      <pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/12/08/go-development-environment/</guid>
      <description>&lt;p&gt;Hello folks.&lt;/p&gt;

&lt;p&gt;Here is a little something I&amp;rsquo;ve put together, since I&amp;rsquo;m doing it a lot.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Skarlso/godevelopment&#34;&gt;Go Development Environment&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I have a project I&amp;rsquo;d like to contribute, like &lt;a href=&#34;https://gohugo.io&#34;&gt;GoHugo&lt;/a&gt;, I have to setup a development environment, because most of the times, I&amp;rsquo;m on a Mac. And on OSX things work differently. I like to work in a Linux environment since that&amp;rsquo;s what most of the projects are built on.&lt;/p&gt;

&lt;p&gt;So here you go. Just download the files, and say &lt;strong&gt;vagrant up&lt;/strong&gt; which will do the magic.&lt;/p&gt;

&lt;p&gt;This sets up &lt;a href=&#34;https://github.com/fatih/vim-go&#34;&gt;vim-go&lt;/a&gt; with code completion given by YouCompleteMe and some go features like, fmt on save and build error highlighting.&lt;/p&gt;

&lt;p&gt;Also sets up ctags which will give you tags and the ability to do GoTo Declaration.&lt;/p&gt;

&lt;p&gt;Installs a bunch of utilities, and configures Go. There is an option to install docker as well. But it&amp;rsquo;s ignored at the moment.&lt;/p&gt;

&lt;p&gt;Just uncomment this line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#config.vm.provision &amp;quot;shell&amp;quot;, path: &amp;quot;install_docker.sh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any questions or request, feel free to submit an Issue!&lt;/p&gt;

&lt;p&gt;Thanks for reading!
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go JIRA API client</title>
      <link>https://skarlso.github.io/2015/11/20/go-jira-api-client/</link>
      <pubDate>Fri, 20 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/11/20/go-jira-api-client/</guid>
      <description>&lt;p&gt;Hi folks.&lt;/p&gt;

&lt;p&gt;So, I was playing around and created a client for JIRA written in Go. It was nice to do some JSON transformation. And sending POSTS was really trivial.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s still in it&amp;#8217;s infancy and I have a couple of more features I want to implement, but, here is the code&amp;#8230;&lt;/p&gt;

&lt;div class=&#34;wp_syntax&#34;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&#34;code&#34;&gt;
        &lt;pre class=&#34;go&#34; style=&#34;font-family:monospace;&#34;&gt;&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;package&lt;/span&gt; main
&amp;nbsp;
&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;bytes&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;encoding/json&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;flag&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;io/ioutil&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;log&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;net/http&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;os&#34;&lt;/span&gt;
&amp;nbsp;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;github.com/BurntSushi/toml&#34;&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;var&lt;/span&gt; configFile &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;~/.jira_config.toml&#34;&lt;/span&gt;
&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;var&lt;/span&gt; parameter &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;var&lt;/span&gt; flags &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    Comment     &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
    Description &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
    IssueKey    &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
    Priority    &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
    Resolution  &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
    Title       &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
    Project     &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//Issue is a representation of a Jira Issue&lt;/span&gt;
&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;type&lt;/span&gt; Issue &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    Fields &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        Project &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
            Key &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;key&#34;`&lt;/span&gt;
        &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;project&#34;`&lt;/span&gt;
        Summary     &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;summary&#34;`&lt;/span&gt;
        Description &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;description&#34;`&lt;/span&gt;
        Issuetype   &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
            Name &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;name&#34;`&lt;/span&gt;
        &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;issuetype&#34;`&lt;/span&gt;
        Priority &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
            ID &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;id&#34;`&lt;/span&gt;
        &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;priority&#34;`&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;fields&#34;`&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//Transition defines a transition json object. Used for starting, stoppinp&lt;/span&gt;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//generally for state stranfer&lt;/span&gt;
&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;type&lt;/span&gt; Transition &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    Fields &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        Resolution &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
            Name &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;name&#34;`&lt;/span&gt;
        &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;resolution&#34;`&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;fields&#34;`&lt;/span&gt;
    Transition &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        ID &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;id&#34;`&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;`json:&#34;transition&#34;`&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//Credentials a representation of a JIRA config which helds API permissions&lt;/span&gt;
&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;type&lt;/span&gt; Credentials &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    Username &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
    Password &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
    URL      &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; init&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    flag&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;StringVar&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&amp;flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Comment&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;m&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Default Comment&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;A Comment when changing the status of an Issue.&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    flag&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;StringVar&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;&amp;&lt;/span&gt;flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Description&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;d&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Default Description&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Provide a description for a newly created Issue.&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    flag&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;StringVar&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;&amp;&lt;/span&gt;flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Priority&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;p&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;2&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;The priority of an Issue which will be set.&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    flag&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;StringVar&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;&amp;&lt;/span&gt;flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;IssueKey&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;k&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Issue key of an issue.&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    flag&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;StringVar&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;&amp;&lt;/span&gt;flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Resolution&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;r&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Done&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Resolution when an issue is closed. Ex.: Done, Fixed, Won&#39;t fix.&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    flag&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;StringVar&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;&amp;&lt;/span&gt;flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Title&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;t&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Default Title&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Title of an Issue.&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    flag&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;StringVar&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;&amp;&lt;/span&gt;flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Project&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;o&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;IT&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Define a Project to create a ticket in.&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    flag&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Parse&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;cred &lt;span style=&#34;color: #339933;&#34;&gt;*&lt;/span&gt;Credentials&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; initConfig&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; _&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; os&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Stat&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;configFile&lt;span style=&#34;color: #339933;&#34;&gt;);&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        log&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Fatalf&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Error using config file: %v&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; err&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; _&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; toml&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;DecodeFile&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;configFile&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; cred&lt;span style=&#34;color: #339933;&#34;&gt;);&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        log&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Fatal&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Error during decoding toml config: &#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; err&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; main&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #000066;&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;flag&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Args&lt;span style=&#34;color: #339933;&#34;&gt;())&lt;/span&gt; &amp;lt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        log&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Fatal&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Please provide an action to take. Usage information:&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
    parameter &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; flag&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Arg&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;switch&lt;/span&gt; parameter &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;close&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;:&lt;/span&gt;
        closeIssue&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;IssueKey&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;start&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;:&lt;/span&gt;
        startIssue&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;IssueKey&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;create&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;:&lt;/span&gt;
        createIssue&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; closeIssue&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;issueKey &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; issueKey &lt;span style=&#34;color: #339933;&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;&#34;&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        log&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Fatal&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Please provide an issueID with -k&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
    fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Closing issue number: &#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; issueKey&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
&amp;nbsp;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;var&lt;/span&gt; trans Transition
&amp;nbsp;
    &lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//TODO: Add the ability to define a comment for the close reason&lt;/span&gt;
    trans&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Fields&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Resolution&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Name&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Resolution&lt;/span&gt;
    trans&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Transition&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;ID&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;2&#34;&lt;/span&gt;
    marhsalledTrans&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; json&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Marshal&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;trans&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        log&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Fatal&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Error occured when marshaling transition: &#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; err&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
    fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Marshalled:&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; trans&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    sendRequest&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;marhsalledTrans&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;POST&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; issueKey&lt;span style=&#34;color: #339933;&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;/transitions?expand=transitions.fields&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; startIssue&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;issueID &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; issueID &lt;span style=&#34;color: #339933;&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;&#34;&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        log&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Fatal&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Please provide an issueID with -i&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
    fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Starting issue number:&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; issueID&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; createIssue&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Println&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Creating new issue.&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;var&lt;/span&gt; issue Issue
    issue&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Fields&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Description &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Description
    issue&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Fields&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Priority&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;ID &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Priority
    issue&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Fields&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Summary &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Title
    issue&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Fields&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Project&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Key &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; flags&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Project
    issue&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Fields&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Issuetype&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Name &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Task&#34;&lt;/span&gt;
    marshalledIssue&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; json&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Marshal&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;issue&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        log&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Fatal&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Error occured when Marshaling Issue:&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; err&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
    sendRequest&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;marshalledIssue&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;POST&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; sendRequest&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;jsonStr &lt;span style=&#34;color: #339933;&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color: #993333;&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; method &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; url &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    cred &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; &amp;Credentials&lt;span style=&#34;color: #339933;&#34;&gt;{}&lt;/span&gt;
    cred&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;initConfig&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt;
    fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Println&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Json:&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;jsonStr&lt;span style=&#34;color: #339933;&#34;&gt;))&lt;/span&gt;
    req&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; http&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;NewRequest&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;method&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; cred&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;URL&lt;span style=&#34;color: #339933;&#34;&gt;+&lt;/span&gt;url&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; bytes&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;NewBuffer&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;jsonStr&lt;span style=&#34;color: #339933;&#34;&gt;))&lt;/span&gt;
    req&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Header&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Set&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Content-Type&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;application/json&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    req&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;SetBasicAuth&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;cred&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Username&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; cred&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Password&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
&amp;nbsp;
    client &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; &amp;http&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Client&lt;span style=&#34;color: #339933;&#34;&gt;{}&lt;/span&gt;
    resp&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; client&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Do&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;req&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #000066;&#34;&gt;panic&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;err&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;defer&lt;/span&gt; resp&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Body&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Close&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt;
&amp;nbsp;
    fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Println&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;response Status:&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; resp&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Status&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;response Headers:&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; resp&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Header&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    body&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; _ &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; ioutil&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;ReadAll&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;resp&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Body&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;response Body:&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;body&lt;span style=&#34;color: #339933;&#34;&gt;))&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;It can also be found under my github page: &lt;a href=&#34;https://github.com/Skarlso/goprojects/tree/master/gojira&#34; target=&#34;_blank&#34;&gt;GoJira Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feel free to open up issues if you would like to use it and need some features which you would find interesting. Currently the username and password for the API are stored in a local config file in your home folder. Later on, I&amp;#8217;ll add the ability to have a token rather than a username:password combination.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go Progress Quest</title>
      <link>https://skarlso.github.io/2015/11/09/go-progress-quest/</link>
      <pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/11/09/go-progress-quest/</guid>
      <description>&lt;p&gt;Hi Folks.&lt;/p&gt;

&lt;p&gt;I started to build a Progress Quest type of web app in Go.&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;d like to join, or just tag along, please drop by here =&amp;gt; &lt;a href=&#34;https://github.com/Skarlso/goprogressquest&#34; target=&#34;_blank&#34;&gt;Go Progress Quest&lt;/a&gt; and feel free to submit an issue if you have an idea, or would like to contribute!&lt;/p&gt;

&lt;p&gt;I will try and document the Progress&amp;#8230;&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Circular buffer in Go</title>
      <link>https://skarlso.github.io/2015/10/15/circular-buffer-in-go/</link>
      <pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/10/15/circular-buffer-in-go/</guid>
      <description>&lt;p&gt;I&amp;#8217;m proud of this one too. No peaking. I like how go let&amp;#8217;s you do this kind of stuff in a very nice way.&lt;/p&gt;

&lt;div class=&#34;wp_syntax&#34;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&#34;code&#34;&gt;
        &lt;pre class=&#34;go&#34; style=&#34;font-family:monospace;&#34;&gt;&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;package&lt;/span&gt; circular
&amp;nbsp;
&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//TestVersion testVersion&lt;/span&gt;
&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;const&lt;/span&gt; TestVersion &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//Buffer buffer type&lt;/span&gt;
&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;type&lt;/span&gt; Buffer &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    buffer &lt;span style=&#34;color: #339933;&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color: #993333;&#34;&gt;byte&lt;/span&gt;
    full   &lt;span style=&#34;color: #993333;&#34;&gt;int&lt;/span&gt;
    size   &lt;span style=&#34;color: #993333;&#34;&gt;int&lt;/span&gt;
    s&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; e   &lt;span style=&#34;color: #993333;&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//NewBuffer creates a new Buffer&lt;/span&gt;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; NewBuffer&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;size &lt;span style=&#34;color: #993333;&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;*&lt;/span&gt;Buffer &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;return&lt;/span&gt; &amp;Buffer&lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;buffer&lt;span style=&#34;color: #339933;&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000066;&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;([]&lt;/span&gt;&lt;span style=&#34;color: #993333;&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; size&lt;span style=&#34;color: #339933;&#34;&gt;),&lt;/span&gt; s&lt;span style=&#34;color: #339933;&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; e&lt;span style=&#34;color: #339933;&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; size&lt;span style=&#34;color: #339933;&#34;&gt;:&lt;/span&gt; size&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; full&lt;span style=&#34;color: #339933;&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//ReadByte reads a byte from b Buffer&lt;/span&gt;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;b &lt;span style=&#34;color: #339933;&#34;&gt;*&lt;/span&gt;Buffer&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; ReadByte&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #993333;&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; error&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;full &lt;span style=&#34;color: #339933;&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Errorf&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Danger Will Robinson: %s&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
    readByte &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;buffer&lt;span style=&#34;color: #339933;&#34;&gt;[&lt;/span&gt;b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;s&lt;span style=&#34;color: #339933;&#34;&gt;]&lt;/span&gt;
    b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;s &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;s &lt;span style=&#34;color: #339933;&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;%&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;size
    b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;full&lt;span style=&#34;color: #339933;&#34;&gt;--&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;return&lt;/span&gt; readByte&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//WriteByte writes c byte to the buffer&lt;/span&gt;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;b &lt;span style=&#34;color: #339933;&#34;&gt;*&lt;/span&gt;Buffer&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; WriteByte&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;c &lt;span style=&#34;color: #993333;&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; error &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;full&lt;span style=&#34;color: #339933;&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt; &amp;gt; b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;size &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;return&lt;/span&gt; fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Errorf&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Danger Will Robinson: %s&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
    b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;buffer&lt;span style=&#34;color: #339933;&#34;&gt;[&lt;/span&gt;b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;e&lt;span style=&#34;color: #339933;&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; c
    b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;e &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;e &lt;span style=&#34;color: #339933;&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;%&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;size
    b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;full&lt;span style=&#34;color: #339933;&#34;&gt;++&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//Overwrite overwrites the oldest byte in Buffer&lt;/span&gt;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;b &lt;span style=&#34;color: #339933;&#34;&gt;*&lt;/span&gt;Buffer&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; Overwrite&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;c &lt;span style=&#34;color: #993333;&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;buffer&lt;span style=&#34;color: #339933;&#34;&gt;[&lt;/span&gt;b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;s&lt;span style=&#34;color: #339933;&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; c
    b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;s &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;s &lt;span style=&#34;color: #339933;&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;%&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;size
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//Reset resets the buffer&lt;/span&gt;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;b &lt;span style=&#34;color: #339933;&#34;&gt;*&lt;/span&gt;Buffer&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; Reset&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;*&lt;/span&gt;b &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;*&lt;/span&gt;NewBuffer&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;size&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//String for a string representation of Buffer&lt;/span&gt;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;b &lt;span style=&#34;color: #339933;&#34;&gt;*&lt;/span&gt;Buffer&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; String&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;return&lt;/span&gt; fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Sprintf&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Buffer: %d, %d, %d, %d&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;buffer&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; b&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>DataMunger Kata with Go</title>
      <link>https://skarlso.github.io/2015/10/04/datamunger-kata-with-go/</link>
      <pubDate>Sun, 04 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/10/04/datamunger-kata-with-go/</guid>
      <description>&lt;p&gt;Quickly wrote up the Data Munger code kata in Go.&lt;/p&gt;

&lt;p&gt;Next time, I want better abstractions. And a way to select columns based on their header data. For now, this is not bad.&lt;/p&gt;

&lt;div class=&#34;wp_syntax&#34;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&#34;code&#34;&gt;
        &lt;pre class=&#34;go&#34; style=&#34;font-family:monospace;&#34;&gt;&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;package&lt;/span&gt; main
&amp;nbsp;
&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;bufio&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;log&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;math&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;os&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;regexp&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;strconv&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;strings&#34;&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//Data which is Data&lt;/span&gt;
&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;type&lt;/span&gt; Data &lt;span style=&#34;color: #993333;&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    columnName &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;
    compareOne &lt;span style=&#34;color: #993333;&#34;&gt;float64&lt;/span&gt;
    compareTwo &lt;span style=&#34;color: #993333;&#34;&gt;float64&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; main&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;// datas := []Data{WeatherData{}, FootballData{}}&lt;/span&gt;
    fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Minimum weather data:&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; GetDataMinimumDiff&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;weather.dat&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;))&lt;/span&gt;
    fmt&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Println&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;Minimum football data:&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; GetDataMinimumDiff&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;football.dat&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//GetDataMinimumDiff gathers data from file to fill up Columns.&lt;/span&gt;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; GetDataMinimumDiff&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;filename &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; nameColumn &lt;span style=&#34;color: #993333;&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; compareColOne &lt;span style=&#34;color: #993333;&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; compareColTwo &lt;span style=&#34;color: #993333;&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; Data &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    data &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; Data&lt;span style=&#34;color: #339933;&#34;&gt;{}&lt;/span&gt;
    minimum &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; math&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;MaxFloat64
    readLines &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; ReadFile&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;filename&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;for&lt;/span&gt; _&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; value &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;range&lt;/span&gt; readLines &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        valueArrays &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; strings&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Split&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;value&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;,&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
        name &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; valueArrays&lt;span style=&#34;color: #339933;&#34;&gt;[&lt;/span&gt;nameColumn&lt;span style=&#34;color: #339933;&#34;&gt;]&lt;/span&gt;
        trimmedFirst&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; _ &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; strconv&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;ParseFloat&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;valueArrays&lt;span style=&#34;color: #339933;&#34;&gt;[&lt;/span&gt;compareColOne&lt;span style=&#34;color: #339933;&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
        trimmedSecond&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; _ &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; strconv&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;ParseFloat&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;valueArrays&lt;span style=&#34;color: #339933;&#34;&gt;[&lt;/span&gt;compareColTwo&lt;span style=&#34;color: #339933;&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
        diff &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; trimmedFirst &lt;span style=&#34;color: #339933;&#34;&gt;-&lt;/span&gt; trimmedSecond
        diff &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; math&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Abs&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;diff&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; diff &amp;lt;&lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; minimum &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
            minimum &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; diff
            data&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;columnName &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; name
            data&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;compareOne &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; trimmedFirst
            data&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;compareTwo &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; trimmedSecond
        &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;return&lt;/span&gt; data
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//ReadFile reads lines from a file and gives back a string array which contains the lines.&lt;/span&gt;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; ReadFile&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;fileName &lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;fileLines &lt;span style=&#34;color: #339933;&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color: #993333;&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    file&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; os&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Open&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;fileName&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        log&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Fatal&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;err&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;defer&lt;/span&gt; file&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Close&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt;
&amp;nbsp;
    scanner &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; bufio&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;NewScanner&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;file&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//Skipping the first line which is the header.&lt;/span&gt;
    scanner&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Scan&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;for&lt;/span&gt; scanner&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Scan&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        line &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; scanner&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Text&lt;span style=&#34;color: #339933;&#34;&gt;()&lt;/span&gt;
        re &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; regexp&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;MustCompile&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;&lt;span style=&#34;color: #000099; font-weight: bold;&#34;&gt;\\&lt;/span&gt;w+&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
        lines &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; re&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;FindAllString&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;line&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #000066;&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;lines&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; &amp;gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
            fileLines &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; append&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;fileLines&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; strings&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Join&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;lines&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;&#34;,&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;))&lt;/span&gt;
        &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; scanner&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Err&lt;span style=&#34;color: #339933;&#34;&gt;();&lt;/span&gt; err &lt;span style=&#34;color: #339933;&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        log&lt;span style=&#34;color: #339933;&#34;&gt;.&lt;/span&gt;Fatal&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;err&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;return&lt;/span&gt;
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Sieve of Eratosthenes in Go</title>
      <link>https://skarlso.github.io/2015/07/30/sieve-of-eratosthenes-in-go/</link>
      <pubDate>Thu, 30 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/07/30/sieve-of-eratosthenes-in-go/</guid>
      <description>&lt;p&gt;I&amp;#8217;m pretty proud of this one as well.&lt;/p&gt;

&lt;div class=&#34;wp_syntax&#34;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&#34;code&#34;&gt;
        &lt;pre class=&#34;go&#34; style=&#34;font-family:monospace;&#34;&gt;&lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;package&lt;/span&gt; sieve
&amp;nbsp;
&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//Sieve Uses the Sieve of Eratosthenes to calculate primes to a certain limit&lt;/span&gt;
&lt;span style=&#34;color: #993333;&#34;&gt;func&lt;/span&gt; Sieve&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;limit &lt;span style=&#34;color: #993333;&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color: #993333;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;var&lt;/span&gt; listOfPrimes &lt;span style=&#34;color: #339933;&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color: #993333;&#34;&gt;int&lt;/span&gt;
    markers &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #000066;&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;([]&lt;/span&gt;&lt;span style=&#34;color: #993333;&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; limit&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
&amp;nbsp;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;&#34;&gt;i&lt;/span&gt; &amp;lt; limit&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;!&lt;/span&gt;markers&lt;span style=&#34;color: #339933;&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color: #339933;&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt; j &amp;lt; limit&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt; j &lt;span style=&#34;color: #339933;&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;{&lt;/span&gt;
                markers&lt;span style=&#34;color: #339933;&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color: #339933;&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;true&lt;/span&gt;
            &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
            listOfPrimes &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; append&lt;span style=&#34;color: #339933;&#34;&gt;(&lt;/span&gt;listOfPrimes&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;
&amp;nbsp;
    &lt;span style=&#34;color: #b1b100; font-weight: bold;&#34;&gt;return&lt;/span&gt; listOfPrimes
&lt;span style=&#34;color: #339933;&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>