<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Golang on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/golang/</link>
    <description>Recent content in Golang on Ramblings of a cloud engineer</description>
    <generator>Hugo -- 0.136.0</generator>
    <language>en</language>
    <lastBuildDate>Wed, 21 Aug 2024 01:01:00 +0100</lastBuildDate>
    <atom:link href="https://skarlso.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Update your CRDs with confidence</title>
      <link>https://skarlso.github.io/2024/08/21/update-your-crds-with-confidence/</link>
      <pubDate>Wed, 21 Aug 2024 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2024/08/21/update-your-crds-with-confidence/</guid>
      <description>&lt;h1 id=&#34;update-your-crds-with-confidence&#34;&gt;Update your CRDs with confidence&lt;/h1&gt;
&lt;p&gt;Hello.&lt;/p&gt;
&lt;p&gt;I would like to write about a release for crd-to-sample-yaml&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. It&amp;rsquo;s the release version v0.8.0&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;This version brings with it a feature to test the validity of your CRD changes.&lt;/p&gt;
&lt;p&gt;It means that if you change your CRD it will test if the changes do not break working samples of that version.&lt;/p&gt;
&lt;p&gt;This is achieved by a helm unittest type of YAML based test scenarios and snapshot generation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Discoverable functional options pattern</title>
      <link>https://skarlso.github.io/2024/07/01/discoverable-functional-options/</link>
      <pubDate>Mon, 01 Jul 2024 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2024/07/01/discoverable-functional-options/</guid>
      <description>&lt;p&gt;Hello.&lt;/p&gt;
&lt;p&gt;Today&amp;rsquo;s will be a quick post. Everyone knows and loves/hates functional options&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; in Go.&lt;/p&gt;
&lt;p&gt;The biggest gripe people get with it is, that the options aren&amp;rsquo;t discoverable and that there
is no IDE support for nicely auto-completing options.&lt;/p&gt;
&lt;p&gt;My thought about this was that, what if we would just hang it on a struct? Let&amp;rsquo;s see how that
looks.&lt;/p&gt;
&lt;p&gt;Consider this normal server builder with options:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Address&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Port&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WithName&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;ServerOptFn&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WithAddress&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;ServerOptFn&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Address&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;address&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WithPort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;ServerOptFn&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Port&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ServerOptFn&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewServer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;opts&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ServerOptFn&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;o&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;opts&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;o&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, what if you would like to retain the niceness of the clean options pattern where you
don&amp;rsquo;t have to specify and empty struct but still could use a struct to gather the options
together?&lt;/p&gt;</description>
    </item>
    <item>
      <title>crd-to-yaml now supports HTML as an output format</title>
      <link>https://skarlso.github.io/2024/05/09/crd-to-yaml-html-output/</link>
      <pubDate>Thu, 09 May 2024 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2024/05/09/crd-to-yaml-html-output/</guid>
      <description>&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;Just wanted to give an update to my crd-to-sample-yaml tool. It, now, supports creating a standalone HTML output.&lt;/p&gt;
&lt;p&gt;Why, you may ask? Well, now you can host the generated content as a static page on your website. That&amp;rsquo;s pretty handy.&lt;/p&gt;
&lt;p&gt;Here is a sample output:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;crd to yaml&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/2024/05/09/crd-to-yaml-sample-html-output.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Go and get it while it&amp;rsquo;s hot in version &lt;a href=&#34;https://github.com/Skarlso/crd-to-sample-yaml/releases/tag/v0.4.0&#34;&gt;v0.4.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all. Thanks for reading!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generic dig for map key using typed parameters</title>
      <link>https://skarlso.github.io/2024/02/27/generic-map-dig/</link>
      <pubDate>Tue, 27 Feb 2024 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2024/02/27/generic-map-dig/</guid>
      <description>&lt;h1 id=&#34;generic-dig-for-map-key-using-typed-parameters&#34;&gt;Generic dig for map key using typed parameters&lt;/h1&gt;
&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;I was fiddling with a way of getting out values from a map that is of format &lt;code&gt;map[string]any&lt;/code&gt;.
But I wanted my type safety as well. This was coming from digging out keys from a Metadata field.&lt;/p&gt;
&lt;p&gt;The metadata was in a JSON format.&lt;/p&gt;
&lt;p&gt;This is what I came up with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FetchValueFromMetadata&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetches&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;metadata&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;it&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exists&lt;/span&gt;. &lt;span style=&#34;color:#a6e22e&#34;&gt;It&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;will&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recursively&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;look&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// embedded values as well. Must be a unique key, otherwise it will just return the first
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// occurrence.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FetchValueFromMetadata&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;apiextensionsv1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;def&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unmarshal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Raw&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed to parse JSON raw data: %w&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dig&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Is&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errKeyNotFound&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;def&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dig&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;]; &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.(&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed to convert value to the desired type; was: %T&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ty&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dig&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ty&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errKeyNotFound&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The interesting part is the &lt;code&gt;dig&lt;/code&gt; method and the type assert to the desired part. Calling this with something like:&lt;/p&gt;</description>
    </item>
    <item>
      <title>CRD to YAML as WASM website</title>
      <link>https://skarlso.github.io/2023/12/01/crd-to-yaml-as-wasm-website/</link>
      <pubDate>Fri, 01 Dec 2023 01:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2023/12/01/crd-to-yaml-as-wasm-website/</guid>
      <description>&lt;h1 id=&#34;crd-to-yaml-as-wasm-website&#34;&gt;CRD to YAML as WASM website&lt;/h1&gt;
&lt;p&gt;&lt;img alt=&#34;logo&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/2023/12/01/crdtoyamllogo.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;A while ago, I wrote about &lt;a href=&#34;https://skarlso.github.io/2022/10/19/crd-to-yaml/&#34;&gt;Generating Sample YAML files from CRDs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a tool I created that lives &lt;a href=&#34;https://github.com/skarlso/crd-to-sample-yaml&#34;&gt;here&lt;/a&gt;. It has a front-end service as
well for convenience.&lt;/p&gt;
&lt;p&gt;I wrote it in a traditional client-server manner. It&amp;rsquo;s running from a Docker Swarm container.&lt;/p&gt;
&lt;p&gt;But, as I was thinking about it, nothing in this service requires interaction with a server. It gets some user input,
processes it, and has some output. I could have written it in plain Javascript. But, since I don&amp;rsquo;t know JavaScript, or
don&amp;rsquo;t know it well enough, and I do know GO, and I wanted to become more familiar with WASM, this was the perfect
learning opportunity.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to deploy a Go (Golang) backend with a React frontend separately on Kubernetes - Part One</title>
      <link>https://skarlso.github.io/2020/07/23/kubernetes-deploy-golang-react-apps-separately-part1/</link>
      <pubDate>Thu, 23 Jul 2020 21:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2020/07/23/kubernetes-deploy-golang-react-apps-separately-part1/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Welcome. This is a longer post about how to deploy a Go backend with a React frontend
on Kubernetes as separate entities. Instead of the usual compiled together single binary Go
application, we are going to separate the two. Why? Because usually a React frontend is just a &amp;ldquo;static&amp;rdquo;
SPA app with very little requirements in terms of resources, while the Go backend does most of the
leg work, requiring a lot more resources.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to do a good code review</title>
      <link>https://skarlso.github.io/2020/05/11/good-code-reviews/</link>
      <pubDate>Mon, 11 May 2020 21:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2020/05/11/good-code-reviews/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;This time, I would like to talk a little bit about code reviews.&lt;/p&gt;
&lt;p&gt;How do you do code reviews? Don&amp;rsquo;t hesitate to share it in the comments.&lt;/p&gt;
&lt;p&gt;How do I do code reviews? Well read on if you would like to know.&lt;/p&gt;
&lt;h1 id=&#34;the-top-down-approach&#34;&gt;The Top Down approach&lt;/h1&gt;
&lt;p&gt;If I&amp;rsquo;m dealing with a small code change, a couple of lines here and there in the odd file
first, I&amp;rsquo;ll try to understand why the review is there? What was it trying to achieve? What&amp;rsquo;s
the goal of the change? Is there a ticket/issue I can read for background info? Or an RFC?&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Make SPA refresh work with a Go backend</title>
      <link>https://skarlso.github.io/2020/02/17/making-spa-refresh-work-with-go-backend/</link>
      <pubDate>Mon, 17 Feb 2020 21:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2020/02/17/making-spa-refresh-work-with-go-backend/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Today I would like to share a quick &amp;ldquo;fix&amp;rdquo; for a problem I&amp;rsquo;ve seen popping up here and there.&lt;/p&gt;
&lt;p&gt;That is, if you have a react frontend which is a SPA app but you still want refresh to work.
What do I mean by that? Consider the following&amp;hellip;&lt;/p&gt;
&lt;h1 id=&#34;the-problem&#34;&gt;The problem&lt;/h1&gt;
&lt;p&gt;You have a SPA app with a react router which navigates the user around. The app calls to a backend
api which serves content of some kind. You have the following routes&amp;hellip;. login, signup, reset, archive.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Summary of Practical Go workshop from Dave Cheney</title>
      <link>https://skarlso.github.io/2019/10/10/practical-go-summary/</link>
      <pubDate>Thu, 10 Oct 2019 21:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2019/10/10/practical-go-summary/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;So there is &lt;a href=&#34;https://dave.cheney.net/practical-go/presentations/qcon-china.html&#34;&gt;this&lt;/a&gt; workshop from &lt;a href=&#34;https://twitter.com/davecheney&#34;&gt;Dave Cheney&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And I thought I&amp;rsquo;d draw a sort of summary of that workshop.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;enjoy&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/practical_go.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Right-click-&amp;gt;Open Image for higher resolution.&lt;/p&gt;
&lt;p&gt;Cheers,
Gergely.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Efferent and Afferent metrics in Go</title>
      <link>https://skarlso.github.io/2019/04/21/efferent-and-afferent-metrics-in-go/</link>
      <pubDate>Sun, 21 Apr 2019 21:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2019/04/21/efferent-and-afferent-metrics-in-go/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks!&lt;/p&gt;
&lt;p&gt;Today I would like to write about a metric that I read in a book called Clean Architecture from Robert Cecil Martin ( Uncle Bob ).&lt;/p&gt;
&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;The metrics I mean are &lt;a href=&#34;https://en.wikipedia.org/wiki/Software_package_metrics&#34;&gt;Efferent&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Software_package_metrics&#34;&gt;Afferent&lt;/a&gt; coupling in packages. So you, dear reader, don&amp;rsquo;t have to navigate away from this page, here are the descriptions pasted in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Afferent couplings (Ca): The number of classes in other packages that depend upon classes within the package is an indicator of the package&amp;rsquo;s responsibility. Afferent couplings signal inward. (Affected by this package) (Fan-In).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go SSH with Host Key Verification</title>
      <link>https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/</link>
      <pubDate>Sun, 17 Feb 2019 21:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/</guid>
      <description>Go SSH with Host Key Verification</description>
    </item>
    <item>
      <title>Extensive tutorial on go-plugin.</title>
      <link>https://skarlso.github.io/2018/10/29/go-plugin-tutorial/</link>
      <pubDate>Mon, 29 Oct 2018 07:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2018/10/29/go-plugin-tutorial/</guid>
      <description>go-plugin tutorial</description>
    </item>
    <item>
      <title>Furnace with a new Plugin System</title>
      <link>https://skarlso.github.io/2018/09/17/furnace-plugin-update/</link>
      <pubDate>Mon, 17 Sep 2018 07:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2018/09/17/furnace-plugin-update/</guid>
      <description>Furnace plugins</description>
    </item>
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 4</title>
      <link>https://skarlso.github.io/2017/04/16/building-furnace-part-4/</link>
      <pubDate>Sun, 16 Apr 2017 09:23:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2017/04/16/building-furnace-part-4/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Previously on this blog: &lt;a href=&#34;https://skarlso.github.io/2017/03/16/building-furnace-part-1/&#34;&gt;Part 1&lt;/a&gt;. &lt;a href=&#34;https://skarlso.github.io/2017/03/19/building-furnace-part-2/&#34;&gt;Part 2&lt;/a&gt;. &lt;a href=&#34;https://skarlso.github.io/2017/03/22/building-furnace-part-3/&#34;&gt;Part 3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this part we are going to talk about Unit Testing Furnace and how to work some magic with AWS and Go.&lt;/p&gt;
&lt;h1 id=&#34;mock-stub-fake-dummy-canned-insert-name-here&#34;&gt;Mock Stub Fake Dummy Canned &lt;Insert Name Here&gt;&lt;/h1&gt;
&lt;p&gt;Unit testing in Go usually follows the Dependency Injection model of dealing with Mocks and Stubs.&lt;/p&gt;
&lt;p&gt;## DI&lt;/p&gt;
&lt;p&gt;Dependency Inject in short is one object supplying the dependencies of another object. In a longer description, it&amp;rsquo;s ideal to be used
for removing the lock on a third party library, like the AWS client. Imaging having code which solely depends on the AWS client. How
would you unit test that code without having to ACTUALLY connect to AWS? You couldn&amp;rsquo;t. Every time you try to test the code it would run
the live code and it would try and connect to AWS and perform the operations it&amp;rsquo;s design to do. The Ruby library with it&amp;rsquo;s metaprogramming
allows you to set the client globally to stub responses, but, alas, this is not the world of Ruby.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 3</title>
      <link>https://skarlso.github.io/2017/03/22/building-furnace-part-3/</link>
      <pubDate>Wed, 22 Mar 2017 12:03:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2017/03/22/building-furnace-part-3/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Previously on this blog: &lt;a href=&#34;http://skarlso.github.io/2017/03/16/building-furnace-part-1/&#34;&gt;Part 1&lt;/a&gt;. &lt;a href=&#34;https://skarlso.github.io/2017/03/19/building-furnace-part-2/&#34;&gt;Part 2&lt;/a&gt;. &lt;a href=&#34;https://skarlso.github.io/2017/04/16/building-furnace-part-4/&#34;&gt;Part 4&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this part, I&amp;rsquo;m going to talk about the experimental plugin system of Furnace.&lt;/p&gt;
&lt;h1 id=&#34;go-experimental-plugins&#34;&gt;Go Experimental Plugins&lt;/h1&gt;
&lt;p&gt;Since Go 1.8 was released, an exciting and new feature was introduced called a Plug-in system. This system works with dynamic
libraries built with a special switch to &lt;code&gt;go build&lt;/code&gt;. These libraries, &lt;code&gt;.so&lt;/code&gt; or &lt;code&gt;.dylib&lt;/code&gt; (later), are than loaded and once that
succeeds, specific functions can be called from them (symbol resolution).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 2</title>
      <link>https://skarlso.github.io/2017/03/19/building-furnace-part-2/</link>
      <pubDate>Sun, 19 Mar 2017 12:03:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2017/03/19/building-furnace-part-2/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Previously on this blog: &lt;a href=&#34;https://skarlso.github.io/2017/03/16/building-furnace-part-1/&#34;&gt;Part 1&lt;/a&gt;, &lt;a href=&#34;https://skarlso.github.io/2017/03/22/building-furnace-part-3/&#34;&gt;Part 3&lt;/a&gt;, &lt;a href=&#34;https://skarlso.github.io/2017/04/16/building-furnace-part-4/&#34;&gt;Part 4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this part, I&amp;rsquo;m going to talk about the AWS Go SDK and begin do dissect the intricacies of Furnace.&lt;/p&gt;
&lt;h1 id=&#34;aws-sdk&#34;&gt;AWS SDK&lt;/h1&gt;
&lt;p&gt;Fortunately, the Go SDK for AWS is quiet verbose and littered with examples of all sorts. But that doesn&amp;rsquo;t make it less complex
and less cryptic at times. I&amp;rsquo;m here to lift some of the early confusions, in hopes that I can help someone to avoid wasting time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 1</title>
      <link>https://skarlso.github.io/2017/03/16/building-furnace-part-1/</link>
      <pubDate>Thu, 16 Mar 2017 21:49:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2017/03/16/building-furnace-part-1/</guid>
      <description>&lt;h1 id=&#34;other-posts&#34;&gt;Other posts:&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://skarlso.github.io/2017/03/19/building-furnace-part-2/&#34;&gt;Part 2&lt;/a&gt;, &lt;a href=&#34;https://skarlso.github.io/2017/03/22/building-furnace-part-3/&#34;&gt;Part 3&lt;/a&gt;, &lt;a href=&#34;https://skarlso.github.io/2017/04/16/building-furnace-part-4/&#34;&gt;Part 4&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;building-furnace-part-1&#34;&gt;Building Furnace: Part 1&lt;/h1&gt;
&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;This is the first part of a 4 part series which talks about the process of building a middlish sized project in Go,
with AWS. Including Unit testing and a experimental plugin feature.&lt;/p&gt;
&lt;p&gt;The first part will talk about the AWS services used in brief and will contain a basic description for those who are not familiar
with them. The second part will talk about the Go SDK and the project structure itself, how it can be used, improved, and how it can
help in everyday life. The third part will talk about the experimental plugin system, and finally, we will tackle unit testing AWS
in Go.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to do Google Sign-In with Go - Part 2</title>
      <link>https://skarlso.github.io/2016/11/02/google-signin-with-go-part2/</link>
      <pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2016/11/02/google-signin-with-go-part2/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi Folks.&lt;/p&gt;
&lt;p&gt;This is a follow up on my previous post about Google Sign-In. In this post we will discover what to do with the information retrieved in the first encounter, which you can find here: &lt;a href=&#34;http://skarlso.github.io/2016/06/12/google-signin-with-go/&#34;&gt;Google Sign-In Part 1&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;forewords&#34;&gt;Forewords&lt;/h1&gt;
&lt;h2 id=&#34;the-project&#34;&gt;The Project&lt;/h2&gt;
&lt;p&gt;Everything I did in the first post, and that I&amp;rsquo;m going to do in this example, can be found in this project: &lt;a href=&#34;https://github.com/Skarlso/google-oauth-go-sample&#34;&gt;Google-OAuth-Go-Sample&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Just to recap, we left off previously on the point where we successfully obtained information about the user, with a secure token and a session initiated with them. Google nicely enough provided us with some details which we can use. This information was in JSON format and looked something like this:&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to do Google sign-in with Go</title>
      <link>https://skarlso.github.io/2016/06/12/google-signin-with-go/</link>
      <pubDate>Sun, 12 Jun 2016 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2016/06/12/google-signin-with-go/</guid>
      <description>&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Today, I would like to write up a step - by - step guide with a sample web app on how to do Google Sign-In and authorization.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
