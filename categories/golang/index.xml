<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/golang/</link>
    <description>Recent content in Golang on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 23 Jul 2020 21:01:00 +0100</lastBuildDate><atom:link href="https://skarlso.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to deploy a Go (Golang) backend with a React frontend separately on Kubernetes - Part One</title>
      <link>https://skarlso.github.io/2020/07/23/kubernetes-deploy-golang-react-apps-separately-part1/</link>
      <pubDate>Thu, 23 Jul 2020 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2020/07/23/kubernetes-deploy-golang-react-apps-separately-part1/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Welcome. This is a longer post about how to deploy a Go backend with a React frontend
on Kubernetes as separate entities. Instead of the usual compiled together single binary Go
application, we are going to separate the two. Why? Because usually a React frontend is just a &ldquo;static&rdquo;
SPA app with very little requirements in terms of resources, while the Go backend does most of the
leg work, requiring a lot more resources.</p>
<p>Part two of this will contain scaling, utilization configuration, health probes, readiness probes,
and how to make sure our application can run multiple instances without stepping on each other&rsquo;s toes.</p>
<p><em>Note</em>: This isn&rsquo;t going to be a Kubernetes guide. Some knowledge is assumed.</p>
<h2 id="summary">Summary</h2>
<p><img src="/img/kube/short-version.png" alt="Give me the short version"></p>
<p>This post details a complex setup of an infrastructure with a second part coming on scaling and how to make
your application scalable in the first place by doing idempotent transactions or dealing with locking and
several instances of the same application not stepping on each other&rsquo;s foot.</p>
<p>This, part one, details how to deploy traditional REST + Frontend based application in Go + React, but not bundled
together as a single binary, instead having the backend separate from the frontend. They key in doing so is explained
at the <a href="#ingress">Ingress</a> section when talking about routing specific URIs to the backend and frontend services.</p>
<p>If you are familiar with Kubernetes and infrastructure setup, feel free to skip ahead to that section. Otherwise, enjoy
the drawings or the writing or both.</p>
<h2 id="technology">Technology</h2>
<p>The SPA app will be handled by <a href="https://www.npmjs.com/package/serve">Serve</a> while the Go backend
will use <a href="https://echo.labstack.com/">Echo</a>. The database will be Postgres.</p>
<p>We are going to apply some best practices using Network Policies to cordon off traffic that we don&rsquo;t
want to go outside.</p>
<p>We will set up HTTPS using cert-manager and let&rsquo;s encrypt. We&rsquo;ll be using nginx as ingress
provider.</p>
<h2 id="code">Code</h2>
<p><img src="/img/kube/architect.png" alt="Let me show you the code"></p>
<p>All, or most of the code, including the application can be found here:</p>
<p><a href="https://github.com/staple-org">Staple</a>. The application is a simple reading list manager with
user handling, email sending and lots of database access.</p>
<p>Let&rsquo;s get to it then!</p>
<h2 id="kubernetes-provider">Kubernetes Provider</h2>
<p><img src="/img/kube/audition.png" alt="Difficult Choice"></p>
<p>Let&rsquo;s start with the obvious one. Where do you would like to create your Kubernetes cluster?</p>
<p>There are four major providers now-a-days. AWS <a href="https://aws.amazon.com/eks/">EKS</a>, GCP <a href="https://cloud.google.com/kubernetes-engine">GKE</a>,
Azure <a href="https://azure.microsoft.com/en-us/services/kubernetes-service/">AKS</a> and DigitalOcean <a href="https://www.digitalocean.com/products/kubernetes/">DKE</a>.
Personally, I prefer DO because, it&rsquo;s a lot cheaper than the others. The downside is that DO only
provides ReadWriteOnce persistent volumes. This gets to be a problem when we are trying to update
and the new Pod can&rsquo;t mount the volume because it&rsquo;s already taken by the existing one. This can be
solved by a good ol NFS instance. But that&rsquo;s another story.</p>
<p>AWS' was late to the party and their solution is quite fragile and the API is terrible. GCP is best in terms
of technicalities, api, handling, and updates. Azure is surprisingly good, however, the documentation is
most of the times out of date or even plain incorrect at some places.</p>
<h2 id="setup-basics">Setup Basics</h2>
<p><img src="/img/kube/owl.jpg" alt="Owl"></p>
<p>To setup your Kubernetes instance, follow DigitalOcean&rsquo;s Kubernetes Getting Started guide. It&rsquo;s really simple.
When you have access to the cluster via kubectl I highly recommend using this tool: <a href="https://github.com/derailed/k9s">k9s</a>.</p>
<p>It&rsquo;s a flexible and quite handy tool for quick observations, logs, shells to pods, edits and generally following what&rsquo;s
happening to your cluster.</p>
<p>Now that we are all set with our own little cluster, it&rsquo;s time to have some people move in. First, we are going to
install cert-manager.</p>
<p><em>Note</em>: I&rsquo;m not going to use Helm because I think it&rsquo;s unnecessary in this setting. We aren&rsquo;t going to install
these things in a highly configurable way and updating with helm is a pain in the butt. For example, for cert-manager
the update with helm takes several steps, whilst updating with a plain yaml file is just applying the next version
of the yaml file.</p>
<p>I&rsquo;m not going to explain how to install cert-manager or nginx. I&rsquo;ll link to their respective guides because frankly, they
are simple to follow and work out of the box.</p>
<p>To install nginx, simply apply the yaml file located here: <a href="https://kubernetes.github.io/ingress-nginx/deploy/#digital-ocean">DigitalOcean Nginx</a>.</p>
<p>To install cert-manager follow this guide: <a href="https://cert-manager.io/docs/installation/kubernetes/">cert-manager</a>.
Follow the regular manifest install part, then ignore the Helm part and proceed with verification and then install
your issuer. I used a simple ACME/http01 issuer from here: <a href="https://cert-manager.io/docs/configuration/acme/http01/">acme/http01</a></p>
<p><em>Note</em>: That acme configuration contains the <strong>staging</strong> url. This is to test that things are working. Once you are
sure that everything is wired up correctly, switch that url to this one:
<code>https://acme-v02.api.letsencrypt.org/directory</code> -&gt; prod url. For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">cert-manager.io/v1alpha2</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterIssuer</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">letsencrypt-prod</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">acme</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="c"># The ACME server URL</span><span class="w">
</span><span class="w">    </span><span class="nt">server</span><span class="p">:</span><span class="w"> </span><span class="l">https://acme-v02.api.letsencrypt.org/directory</span><span class="w">
</span><span class="w">    </span><span class="c"># Email address used for ACME registration</span><span class="w">
</span><span class="w">    </span><span class="nt">email</span><span class="p">:</span><span class="w"> </span><span class="l">your@email.com</span><span class="w">
</span><span class="w">    </span><span class="c"># Name of a secret used to store the ACME account private key</span><span class="w">
</span><span class="w">    </span><span class="nt">privateKeySecretRef</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">letsencrypt-prod</span><span class="w">
</span><span class="w">    </span><span class="c"># Enable the HTTP-01 challenge provider</span><span class="w">
</span><span class="w">    </span><span class="nt">solvers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">http01</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">ingress</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">class</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p><em>Note</em>: I&rsquo;m using a ClusterIssuer because I have multiple domains and multiple namespaces.</p>
<p>That&rsquo;s it. Cert-manager and nginx should be up and running. Later on, we will create our own
ingress rules.</p>
<h2 id="domain">Domain</h2>
<p>Next, you&rsquo;ll need a domain to bind too. There are a gazillion domain providers out there like
no-ip, GoDaddy, HostGator, Shopify and so on. Choose one which is available to you or has the best
prices.</p>
<p>There are some good guides on how to choose a domain and where to create it.
For example: <a href="https://domains.google/learning-center/5-things-to-watch-out-for-when-buying-a-domain/">5 things to watch out for when buying a domain</a>.</p>
<h1 id="the-application">The application</h1>
<p>Alright, let&rsquo;s put together the application.</p>
<p><img src="/img/kube/assemble.png" alt="Assemble"></p>
<h2 id="structure">Structure</h2>
<p>Every piece of our infrastructure will be laid out in yaml files. I believe in infrastructure as code.
If you run a command you will most likely forget about it, unless it&rsquo;s logged and / or is replayable.</p>
<p>This is the structure I&rsquo;m using:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">.
├── LICENSE
├── README.md
├── certificate_request
│   └── certificate_request.yml
├── configmaps
│   └── staple_initdb_script.yaml
├── database
│   ├── staple_db_deployment.yaml
│   ├── staple_db_network_policy.yaml
│   ├── staple_db_pvc.yaml
│   └── staple_db_service.yaml
├── namespace
│   └── staple_namespace.yaml
├── primer.sql
├── rbac
├── secrets
│   ├── staple_db_password.yaml
│   └── staple_mg_creds.yaml
├── staple-backend
│   ├── staple_deployment.yaml
│   └── staple_service.yaml
└── staple-frontend
    ├── staple_deployment.yaml
    └── staple_service.yaml
</code></pre></td></tr></table>
</div>
</div><p>One other possible combination is, if you have multiple applications:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">.
├── README.md
├── applications
│   ├── confluence
│   │   ├── db
│   │   │   ├── db_deployment.yaml
│   │   │   └── db_service.yaml
│   │   ├── deployment
│   │   │   └── deployment.yaml
│   │   ├── pvc
│   │   │   └── confluence_app_pvc.yaml
│   │   └── service
│   │       └── service.yaml
│   ├── gitea
│   │   ├── config
│   │   │   ├── app.ini
│   │   │   └── gitea_config_map.yaml
│   │   ├── db
│   │   │   ├── gitea_db_deployment.yaml
│   │   │   ├── gitea_db_network_policy.yaml
│   │   │   ├── gitea_db_pvc.yaml
│   │   │   └── gitea_db_service.yaml
│   │   ├── deployment
│   │   │   └── gitea_deployment.yaml
│   │   ├── pvc
│   │   │   └── gitea_app_pvc.yaml
│   │   └── service
│   │       └── gitea_service.yaml
├── cronjobs
│   ├── cronjob1
│   │   ├── Dockerfile
│   │   ├── README.md
│   │   ├── go.mod
│   │   ├── go.sum
│   │   ├── cron.yaml
│   │   └── main.go
├── ingress
│   ├── example1
│   │   ├── example1_ingress_resource.yaml
│   │   └── gitea_ssh_configmap.yaml
│   ├── example2
│   │   └── example2_ingress_resource.yaml
│   ├── lets-encrypt-issuer.yaml
│   └── nginx
│       ├── nginx-ingress-controller-deployment.yaml
│       └── nginx-ingress-controller-service.yaml
└── namespaces
    ├── example1_namespace.yaml
    ├── example2_namespace.yaml
</code></pre></td></tr></table>
</div>
</div><h2 id="namespace">Namespace</h2>
<p>Before we begin, we&rsquo;ll create a namespace for our application to properly partition all our entities.</p>
<p>To create a namespace we&rsquo;ll use this yaml <code>example_namespace.yaml</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Namespace</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">example</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Apply this with <code>kubectl -f apply example_namespace.yaml</code>.</p>
<h2 id="the-database">The Database</h2>
<p>Deploying a Postgres database on Kubernetes is actually really easy. You need five things to have a basic, but
relatively secure installation.</p>
<h3 id="secret">Secret</h3>
<p>The secret contains our password and our database user. In postgres, if you define a user using <code>POSTGRES_USER</code>
postgres will create the user and a database with the user&rsquo;s name. This could come from Vault too, but
the Kubernetes secret is usually enough since it should be a closed environment anyways. But for important information
I would definitely use an admission policy and some vault secret goodness. (Maybe another post?)</p>
<p>Our secret looks like this:
database_secret.yaml</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Secret</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db-password</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">POSTGRES_PASSWORD</span><span class="p">:</span><span class="w"> </span><span class="l">cGFzc3dvcmQxMjM=</span><span class="w">
</span><span class="w">  </span><span class="c"># This creates a user and a db with the same name.</span><span class="w">
</span><span class="w">  </span><span class="nt">POSTGRES_USER</span><span class="p">:</span><span class="w"> </span><span class="l">c3RhcGxl</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>To generate the base64 code for a password and a user, use:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">echo</span> -n <span class="s2">&#34;password123&#34;</span> <span class="p">|</span> base64
<span class="nb">echo</span> -n <span class="s2">&#34;username&#34;</span> <span class="p">|</span> base64
</code></pre></td></tr></table>
</div>
</div><p>&hellip;and paste the result in the respective fields. Once done, apply with <code>kubectl -f apply database_secret.yaml</code>.</p>
<h3 id="deployment">Deployment</h3>
<p>The deployment which configures our database. Looks something like this (database_deployment.yaml):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">postgres</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">postgres:11</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POSTGRES_USER</span><span class="w">
</span><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POSTGRES_PASSWORD</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db-password</span><span class="w">
</span><span class="w">                </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">POSTGRES_PASSWORD</span><span class="w">
</span><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/var/lib/postgresql/data</span><span class="w">
</span><span class="w">          </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">data</span><span class="w"> </span><span class="c"># important so it gets mounted correctly</span><span class="w">
</span><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db-data</span><span class="w">
</span><span class="w">        </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/docker-entrypoint-initdb.d/staple_initdb.sql</span><span class="w">
</span><span class="w">          </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">staple_initdb.sql</span><span class="w">
</span><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">bootstrap-script</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db-data</span><span class="w">
</span><span class="w">          </span><span class="nt">persistentVolumeClaim</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">claimName</span><span class="p">:</span><span class="w"> </span><span class="l">do-storage-staple-db</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">bootstrap-script</span><span class="w">
</span><span class="w">          </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-initdb-script</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Note the two volume mounts.</p>
<p>The first one makes sure that our data isn&rsquo;t lost when the database pod itself restarts. It creates a mount
to a persistent volume which is defined a few lines below by <code>persistentVolumeClaim</code>. <code>subPath</code> is important
in this case otherwise you&rsquo;ll end up with a lost&amp;found folder.</p>
<p>The second mount is a postgres specific initialization file. Postgres will run that sql file when it
starts up. I&rsquo;m using it to create my application&rsquo;s schema.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">create</span><span class="w"> </span><span class="k">database</span><span class="w"> </span><span class="n">staples</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">users</span><span class="w"> </span><span class="p">(</span><span class="n">email</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span><span class="w"> </span><span class="n">password</span><span class="w"> </span><span class="nb">text</span><span class="p">,</span><span class="w"> </span><span class="n">confirm_code</span><span class="w"> </span><span class="nb">text</span><span class="p">,</span><span class="w"> </span><span class="n">max_staples</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">staples</span><span class="w"> </span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="nb">serial</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="w"> </span><span class="nb">text</span><span class="p">,</span><span class="w"> </span><span class="n">created_at</span><span class="w"> </span><span class="k">timestamp</span><span class="p">,</span><span class="w"> </span><span class="n">archived</span><span class="w"> </span><span class="n">bool</span><span class="p">,</span><span class="w"> </span><span class="n">user_email</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">));</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>And it comes from a configmap which looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-initdb-script</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">staple_initdb.sql</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="l">create table users (email varchar(255), password text, confirm_code text, max_staples int);</span><span class="w">
</span><span class="w">    </span><span class="l">create table staples (name varchar(255), id serial, content text, created_at timestamp, archived bool, user_email varchar(255));</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="network-policy">Network Policy</h3>
<p>Network policies are important if you value your privacy. They restrict a PODs communication to a certain namespace
OR even to between applications only. By default I like to deny all traffic and then slowly open the valve until everything works.</p>
<p><img src="/img/kube/szaffi.png" alt="Szaffi">
Kudos if you know who this is. (mind my terrible drawing capabilities)</p>
<p>We&rsquo;ll use a basic network policy which will restrict the DB to talk to anything BUT the backend. Nothing else
will be able to talk to this Pod.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.k8s.io/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">NetworkPolicy</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db-network-policy</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">podSelector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db</span><span class="w">
</span><span class="w">  </span><span class="nt">policyTypes</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">Ingress</span><span class="w">
</span><span class="w">  </span>- <span class="l">Egress</span><span class="w">
</span><span class="w">  </span><span class="nt">ingress</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">from</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">podSelector</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">5432</span><span class="w">
</span><span class="w">  </span><span class="nt">egress</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">to</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">podSelector</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">5432</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>The important bit here is the <code>podSelector</code> part. The label will be the label used by the application deployment.
This will restrict the Pod&rsquo;s incoming and outgoing traffic to that of the application Pod including denying internet
traffic.</p>
<h3 id="pvc">PVC</h3>
<p>The persistent volume claim definition is straight forward:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PersistentVolumeClaim</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">do-storage-staple-db</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">accessModes</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">ReadWriteOnce</span><span class="w">
</span><span class="w">  </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">storage</span><span class="p">:</span><span class="w"> </span><span class="l">10Gi</span><span class="w">
</span><span class="w">  </span><span class="nt">storageClassName</span><span class="p">:</span><span class="w"> </span><span class="l">do-block-storage</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>10 gigs should be enough anything.</p>
<p><img src="/img/kube/gates.png" alt="Gates"></p>
<h3 id="service">Service</h3>
<p>The service will expose the database deployment to our cluster.</p>
<p>Our service is fairly basic:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db-service</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">5432</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db</span><span class="w">
</span><span class="w">  </span><span class="nt">clusterIP</span><span class="p">:</span><span class="w"> </span><span class="l">None</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>That&rsquo;s done with the database. Next up is the backend.</p>
<h2 id="the-backend">The backend</h2>
<p>The backend itself is written in a way that it doesn&rsquo;t require a persistent storage so
we can skip that part. It only needs three pieces. A secret, a deployment definition and the
service exposing the deployment.</p>
<h3 id="secret-1">Secret</h3>
<p>First, we create a secret which contains Mailgun credentials.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Secret</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-mg-creds</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">MG_DOMAIN</span><span class="p">:</span><span class="w"> </span><span class="l">cGFzc3dvcmQxMjM=</span><span class="w">
</span><span class="w">  </span><span class="nt">MG_API_KEY</span><span class="p">:</span><span class="w"> </span><span class="l">cGFzc3dvcmQxMjM=</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="database-connection">Database connection</h3>
<p>The connection settings are handled through the same secret which is used to spin up the DB itself.
We have to only mount that here too and we are good.</p>
<h3 id="deployment-1">Deployment</h3>
<p>Which brings us to the deployment. This is a bit more involved.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-app</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">        </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">        </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">skarlso/staple:v0.1.0</span><span class="w">
</span><span class="w">        </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent</span><span class="w">
</span><span class="w">        </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;500Mi&#34;</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;250m&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;1000Mi&#34;</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;500m&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POD_NAMESPACE</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">fieldRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">fieldPath</span><span class="p">:</span><span class="w"> </span><span class="l">metadata.namespace</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">DB_PASSWORD</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-db-password</span><span class="w">
</span><span class="w">                </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">POSTGRES_PASSWORD</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">MG_DOMAIN</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-mg-creds</span><span class="w">
</span><span class="w">                </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">MG_DOMAIN</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">MG_API_KEY</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-mg-creds</span><span class="w">
</span><span class="w">                </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">MG_API_KEY</span><span class="w">
</span><span class="w">        </span><span class="nt">args</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- --<span class="l">staple-db-hostname=staple-db-service.cronohub.svc.cluster.local:5432</span><span class="w">
</span><span class="w">          </span>- --<span class="l">staple-db-username=staple</span><span class="w">
</span><span class="w">          </span>- --<span class="l">staple-db-database=staple</span><span class="w">
</span><span class="w">          </span>- --<span class="l">staple-db-password=$(DB_PASSWORD)</span><span class="w">
</span><span class="w">          </span>- --<span class="l">mg-domain=$(MG_DOMAIN)</span><span class="w">
</span><span class="w">          </span>- --<span class="l">mg-api-key=$(MG_API_KEY)</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-port</span><span class="w">
</span><span class="w">          </span><span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">9998</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>There are a few important points here and I won&rsquo;t explain them all, like the resource restrictions,
which you should be familiar with by now. I&rsquo;m using a mix of 12factor app&rsquo;s environment configuration
and command line arguments for the application configuration. The app itself is not using os.Environ
but the args.</p>
<p>The args point to the cluster local dns of the database, some db settings, and the mailgun credentials.</p>
<p>It also exposes the container port 9998 which is Echo&rsquo;s default port.</p>
<p>Now all we need is the service.</p>
<h3 id="service-1">Service</h3>
<p>Without much fanfare:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-service</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">service-port</span><span class="w">
</span><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">9998</span><span class="w">
</span><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="l">staple-port</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>And with this, the backend is done.</p>
<h2 id="the-frontend">The frontend</h2>
<p>The frontend, similarly to the backend, does not require a persistent volume. We can skip that one too.</p>
<p>In fact it only needs two things, a deployment and a service, and that&rsquo;s all. It uses serve to host the
static files. Honestly, that could also be a Go application serving the static content or anything
that can serve static files.</p>
<h3 id="deployment-2">Deployment</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">        </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">        </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">skarlso/staple-frontend:v0.0.9</span><span class="w">
</span><span class="w">        </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent</span><span class="w">
</span><span class="w">        </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;500Mi&#34;</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;250m&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;1000Mi&#34;</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;500m&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POD_NAMESPACE</span><span class="w">
</span><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">fieldRef</span><span class="p">:</span><span class="w">
</span><span class="w">                </span><span class="nt">fieldPath</span><span class="p">:</span><span class="w"> </span><span class="l">metadata.namespace</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">REACT_APP_STAPLE_DEV_HOST</span><span class="w">
</span><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-front</span><span class="w">
</span><span class="w">          </span><span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">5000</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="service-2">Service</h3>
<p>And the service:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-front-service</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">    </span><span class="nt">app.kubernetes.io/instance</span><span class="p">:</span><span class="w"> </span><span class="l">staple-frontend</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-front</span><span class="w">
</span><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">5000</span><span class="w">
</span><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="l">staple-front</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>And with that the backend and frontend are wired together and ready to receive traffic.</p>
<p>All pods should be up and running without problems at this point. If you have any trouble deploying
things, please don&rsquo;t hesitate to leave a question in the comments.</p>
<h2 id="ingress">Ingress</h2>
<p>Fantastic. Now, our application is running. We just need to expose it and route traffic to it.
The backend has the api route <code>/rest/api/v1/</code>. The frontend has the route syntax <code>/login</code>, <code>/register</code>
and a bunch of others. The key here is that all of them are under the same domain name but based on the URI
we need to direct one request to the backend the other to the frontend.</p>
<p>This is done via nginx&rsquo;s routing logic using regex. In an nginx config this would be the <code>location</code> part.
It&rsquo;s imperative that the order of the routing is from more specific towards more general Because we need to catch
the specific URIs first.</p>
<h3 id="ingress-resource">Ingress Resource</h3>
<p>To do this, we will create something called an <a href="https://docs.nginx.com/nginx-ingress-controller/configuration/ingress-resources/">Ingress Resource</a>.
Note that this is Nginx&rsquo;s ingress resource and not Kubernetes'. There is a difference.</p>
<p>I suggest reading up on that link about the ingress resource because it reads quite well and will explain how it
works and fits into the Kubernetes environment.</p>
<p>Got it? Good. We&rsquo;ll create one for <code>staple.app</code> domain:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">extensions/v1beta1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Ingress</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">staple</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">staple-app-ingress</span><span class="w">
</span><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">kubernetes.io/ingress.class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;nginx&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">cert-manager.io/cluster-issuer</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;letsencrypt-prod&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">cert-manager.io/acme-challenge-type</span><span class="p">:</span><span class="w"> </span><span class="l">http01</span><span class="w">
</span><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/rewrite-target</span><span class="p">:</span><span class="w"> </span><span class="l">/$1</span><span class="w"> </span><span class="c"># this is important</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">tls</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">hosts</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="l">staple.app</span><span class="w">
</span><span class="w">    </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">staple-app-tls</span><span class="w">
</span><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">staple.app</span><span class="w">
</span><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">backend</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">serviceName</span><span class="p">:</span><span class="w"> </span><span class="l">staple-service</span><span class="w">
</span><span class="w">          </span><span class="nt">servicePort</span><span class="p">:</span><span class="w"> </span><span class="l">ss-port</span><span class="w"> </span><span class="c"># 9998</span><span class="w">
</span><span class="w">        </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/(rest/api/1.*)</span><span class="w">
</span><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">staple.app</span><span class="w">
</span><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">backend</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">serviceName</span><span class="p">:</span><span class="w"> </span><span class="l">staple-front-service</span><span class="w">
</span><span class="w">          </span><span class="nt">servicePort</span><span class="p">:</span><span class="w"> </span><span class="l">sfs-port</span><span class="w"> </span><span class="c"># 5000</span><span class="w">
</span><span class="w">        </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/(.*)</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Let&rsquo;s take a look at what&rsquo;s going on here. The first thing to catch the eye are the annotations.
These are configuration settings for nginx, cert-manager and Kubernetes.
We have the cluster issuer&rsquo;s name. The challenge type, which we decided should be http01,
and the most important part, the rewrite-target setting. This will use the first capture group
as a base after the host.</p>
<p>With this rewrite rule in place, the <code>paths</code> values need to provide a capture group. The first in line will see
everything that goes to the urls like: <code>staple.app/rest/api/1/token</code>, <code>staple.app/rest/api/1/staples</code>,
<code>staple.app/rest/api/1/user</code>, etc. The first part of the url is the host <code>staple.app</code>, second part is <code>/(rest/api/1/.*)</code>
for which the result is that group number one ($1) will be <code>rest/api/1/token</code>. Nginx now sees that we
have a backend route for that and will send this URI along to the service. Our service picks it up
and will match that URI to the router configuration.</p>
<p><img src="/img/kube/regex.png" alt="Regex"></p>
<p>If there is a request like, <code>staple.app/login</code>, which is our frontend&rsquo;s job to pick up, the first rule
will not catch it because the regex isn&rsquo;t matching, so it falls through to the second one, which
is the frontend service that is using a &ldquo;catch all&rdquo; regex. Like ip tables, we go from
specific to more general.</p>
<h1 id="ending-words">Ending words</h1>
<p>And that&rsquo;s it. If everything works correctly, then the certificate service wired up the https certs and
we should be able ping the rest endpoint under <code>https://staple.app/rest/api/1/token</code> and log in to the app
in the browser using <code>https://staple.app</code>.</p>
<p>Stay tuned for the second part where we&rsquo;ll scale the thing up!</p>
<p>Thanks for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How to do a good code review</title>
      <link>https://skarlso.github.io/2020/05/11/good-code-reviews/</link>
      <pubDate>Mon, 11 May 2020 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2020/05/11/good-code-reviews/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>This time, I would like to talk a little bit about code reviews.</p>
<p>How do you do code reviews? Don&rsquo;t hesitate to share it in the comments.</p>
<p>How do I do code reviews? Well read on if you would like to know.</p>
<h1 id="the-top-down-approach">The Top Down approach</h1>
<p>If I&rsquo;m dealing with a small code change, a couple of lines here and there in the odd file
first, I&rsquo;ll try to understand why the review is there? What was it trying to achieve? What&rsquo;s
the goal of the change? Is there a ticket/issue I can read for background info? Or an RFC?</p>
<p>Understanding the goal of the change will let you know how to read the change. I usually also
scribble down some notes and my expectations to see if the change meets them or does something
completely different. And if it&rsquo;s different, maybe my expectations were wrong.</p>
<p>In any case, I will have a framework to start with. It&rsquo;s important to understand why the change
is there in the first place. I cannot stress this enough.</p>
<h1 id="logical-follow">Logical follow</h1>
<p>If the change is large, the top down approach will simply not work. You will loose track of
why the change is and your logical big picture image will fade into nothingness after a hundred lines.</p>
<p>In Github at least, what I would do to approach this, is close all views and just have a general sense first
how big the change is, and what files changed (after I understand why the change is there and what is it trying
to change and / or solve). Once I have a feel for the structure I would look for changes which are trivial.
For example parameter changes of a function. I would expect that in that case there will be a lot of changes at places
where that function was called. I would review those and then go on.</p>
<p>If there is any, I would look for an entry point into the change. Is there a new handler? A new API?
A new method? Did an API change? If so, did that change propagate all the way through the API&rsquo;s implementation?</p>
<p>If it&rsquo;s a huge number of deletes, I would look for the deleted code in the whole codebase. Did they miss something?
Was that code referenced in another section of the code or possibly in another service? In that case, do a search
on the whole organization on all repositories if you believe that that makes sense.</p>
<p>If it&rsquo;s concurrent code&hellip; are they syncing it up at some point? Are they releasing the lock? Is the lock happening
at the right place? In Go for example, you can get a lock and then <code>defer w.Lock.Unlock()</code> it. This makes
for a convenient way of &ldquo;forgetting&rdquo; about the lock acquire. But this is counterproductive in some cases.</p>
<p>Imagine you have a function which acquires the lock in the begin. Then does a for loop which takes a couple of seconds
but doesn&rsquo;t actually use the map or the value you were trying to protect. In that case you are taking the
lock but aren&rsquo;t actually using it. There was no point in acquiring it at the beginning of the function.</p>
<h1 id="general-order">General order</h1>
<p>There are a LOT of things one can review in a PR. Minute things and a myriad if small to big logical
problems and ramifications. It&rsquo;s not possible to list them all. So here are some general rules I would
follow:</p>
<h2 id="syntax">Syntax</h2>
<p>The first thing I would do is look through the syntax and follow this mnemonic: BUD.
B(ottleneck), U(nnecessary code), D(uplicate work). Spotting these is usually easy but it can happen
that the change is subtle. Bottlenecks are often embedded loops in loops or a very sneaky recursion.
Unnecessary code is sometimes harder to spot. This is duplicate code which could be extracted. It can be subtle
because it&rsquo;s likely that only a small thing changes and at first glance it&rsquo;s not trivial how to extract
the rest of the code around that small thing. Maybe it can be a function (if your language supports functions
as first class citizens) which could close over a value and change it multiple times.</p>
<p>Duplicate work is when a loop is calculating something over and over but it&rsquo;s actually the same thing or
we already have that information and it&rsquo;s not likely that it would change so it can be reused. These kind of
problems are solved through caching or simply just do it once, store the result, then pass it around. Candidates
for this could be multiple calls to the same api for the same information which didn&rsquo;t change in between.</p>
<h2 id="general-language-guidelines">General language guidelines</h2>
<p>General language syntax and guidelines adherence comes next. In Go this is trivial, since we have a plethora
of tools available to us, devs, in the form of static analyzers like, fmt, golint, goimport etc. But in the
absence there is usually a good guide at hand how a language is supposed to look like.</p>
<h2 id="workplace--project-guideline-adherence">Workplace / Project guideline adherence</h2>
<p>This could arguably come before the general adherence. Whichever suits you better. Or maybe your workplace / environment
the code is in (this could also be an open source project) is different from the general guidelines. That is okay, as
long as it&rsquo;s sensible. You could try changing it if you think it&rsquo;s too far from how a language is supposed to look like
but that usually doesn&rsquo;t work. Especially if the in-place guidelines are already there for years.</p>
<p>Generally though, it&rsquo;s better to follow whatever style/code/whim the current environment is doing. If changing something
always look around how that looks like in the code you are working in and then follow that style. These could be things like,
variable naming, comment semantics, logical flow of the code, structuring (like where the code should go and how it should look
like (yes, look like(sometime aesthetics matter))).</p>
<h2 id="could-it-be-done-concurrently">Could it be done concurrently</h2>
<p>As a cherry on top, I would try to determine if the work that is being done, could be done in a thread / go routine. In Go, go routines
are cheap and very easy to make. It&rsquo;s also easy to abuse them of course, but it doesn&rsquo;t hurt to think asynchronously. Especially in
a distributed environment. Which brings me to the next point.</p>
<h2 id="in-a-distributed-environment-timing-is-key">In a distributed environment timing is key</h2>
<p>If this change is in an environment which has many services and is generally distributed your first though should immediately
be, how those this affect the rest of the services and what timing issues could arise. If there is a delete operation, what about
another service calling a create or a get on the same resource at the same time? What if it&rsquo;s a create but another service also calls
create with the same values? Is the data eventually consistent or strongly consistent? How does that affect the runtime? Is the change
in a frequently called code segment which is usually under heavy load? Did the change change the way that is handled? Did it slow it down
or speed it up? Did it trade the slowdown for strong consistency? Is strong consistency really needed in that service which would
justify the slowdown?</p>
<p>Like I said&hellip; a myriad of things&hellip;</p>
<p>I&rsquo;ll stop here for now.</p>
<h1 id="conclusion">Conclusion</h1>
<p>I hope this made sense. If you disagree with this approach or have a different guideline of reviewing, please don&rsquo;t hesitate it to share it!</p>
<p>As always,
Thanks for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How to Make SPA refresh work with a Go backend</title>
      <link>https://skarlso.github.io/2020/02/17/making-spa-refresh-work-with-go-backend/</link>
      <pubDate>Mon, 17 Feb 2020 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2020/02/17/making-spa-refresh-work-with-go-backend/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>Today I would like to share a quick &ldquo;fix&rdquo; for a problem I&rsquo;ve seen popping up here and there.</p>
<p>That is, if you have a react frontend which is a SPA app but you still want refresh to work.
What do I mean by that? Consider the following&hellip;</p>
<h1 id="the-problem">The problem</h1>
<p>You have a SPA app with a react router which navigates the user around. The app calls to a backend
api which serves content of some kind. You have the following routes&hellip;. login, signup, reset, archive.</p>
<p>If your app is compiled with your backend, as it usually is, then something like: <a href="https://app.com/login">https://app.com/login</a>
will not work unless it&rsquo;s also defined on the backend serving some content.</p>
<p>So but what should the content be in this case?</p>
<h1 id="the-structre">The structre</h1>
<p>For that, let&rsquo;s first look at the strucute of the app. Consider the following directory tree:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">.
├── Dockerfile
├── LICENSE
├── Makefile
├── README.md
├── build
├── cmd
│   └── root.go
├── frontend
│   ├── LICENSE
│   ├── README.md
│   ├── build
│   ├── package-lock.json
│   ├── package.json
│   ├── public
│   ├── src
│   └── yarn.lock
├── go.mod
├── go.sum
├── img
├── internal
└── pkg
</code></pre></td></tr></table>
</div>
</div><p>For this, the frontend contains a build dir in which the generated react frontend static files plus
compiled JavaScript libraries are. In this directory there also is a index.html file which does the actual
heavy lifting in terms of routing.</p>
<p>The Go backend therefor must only route to index.html on certain endpoints.</p>
<p>In Go to build and deploy a single binary containing the static assets here in, you can use something like
<a href="https://github.com/GeertJohan/go.rice">go.rice</a> or <a href="https://github.com/elazarl/go-bindata-assetfs">assetfs</a> which
generate a Go file for you which contains all the data in an easily accessible way.</p>
<p>I&rsquo;ll be using go.rice.</p>
<h1 id="the-solution">The solution</h1>
<p>To summarize, all you have to do is route every route in your router.js file to index.html in Go. But how? Well, like this&hellip;</p>
<p>Consider this appliction: <a href="https://github.com/staple-org/staple">Staple</a>. This is a react frontend go backend application
which builds a frontend asset then packages it up with go.rice, builds a Docker container and deploys the whole thing to
a Kubernetes cluster. But this is the interesting part which handles the index routing:</p>
<p>In routes.go (contains the mapped routes from under Router.js):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">pkg</span>

<span class="c1">// These routes must match the routes under frontend/Routes.js
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">routes</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
	<span class="s">&#34;/login&#34;</span><span class="p">,</span>
	<span class="s">&#34;/archive&#34;</span><span class="p">,</span>
	<span class="s">&#34;/staples/new&#34;</span><span class="p">,</span>
	<span class="s">&#34;/reset&#34;</span><span class="p">,</span>
	<span class="s">&#34;/signup&#34;</span><span class="p">,</span>
	<span class="s">&#34;/settings&#34;</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Once we have a list of routes to map&hellip;</p>
<p>In server.go (which is starting up the server and generates the handlers&hellip;)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">    <span class="c1">// ... code which sets up the api routes... after every handler has been estabilished...
</span><span class="c1"></span>	<span class="c1">// Setup front-end if not in production mode.
</span><span class="c1"></span>	<span class="k">if</span> <span class="p">!</span><span class="nx">config</span><span class="p">.</span><span class="nx">Opts</span><span class="p">.</span><span class="nx">DevMode</span> <span class="p">{</span>
        <span class="c1">// This path needs to be relative from this files package&#39;s location.
</span><span class="c1"></span>		<span class="nx">staticAssets</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rice</span><span class="p">.</span><span class="nf">FindBox</span><span class="p">(</span><span class="s">&#34;../frontend/build&#34;</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;Cannot find assets in production&#34;</span><span class="p">)</span>
			<span class="k">return</span> <span class="nx">err</span>
		<span class="p">}</span>

		<span class="c1">// Register handler for static assets
</span><span class="c1"></span>        <span class="nx">assetHandler</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">FileServer</span><span class="p">(</span><span class="nx">staticAssets</span><span class="p">.</span><span class="nf">HTTPBox</span><span class="p">())</span>
        <span class="c1">// Open the index.html file as a *File for reading the content out of it.
</span><span class="c1"></span>        <span class="c1">// This is a virtual file handled by go.rice.
</span><span class="c1"></span>		<span class="nx">index</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">staticAssets</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;index.html&#34;</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="nx">config</span><span class="p">.</span><span class="nx">Opts</span><span class="p">.</span><span class="nx">Logger</span><span class="p">.</span><span class="nf">Error</span><span class="p">().</span><span class="nf">Err</span><span class="p">(</span><span class="nx">err</span><span class="p">).</span><span class="nf">Msg</span><span class="p">(</span><span class="s">&#34;Failed to find index.html content.&#34;</span><span class="p">)</span>
			<span class="k">return</span> <span class="nx">err</span>
		<span class="p">}</span>

        <span class="c1">// Set up the main point as a static file server
</span><span class="c1"></span>		<span class="nx">e</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">echo</span><span class="p">.</span><span class="nf">WrapHandler</span><span class="p">(</span><span class="nx">assetHandler</span><span class="p">))</span>
		<span class="c1">// Set up routes to index.html for all routes under Routes.js. Index.html will handle the routing any further.
</span><span class="c1"></span>		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">r</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">routes</span> <span class="p">{</span>
			<span class="nx">e</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span> <span class="nf">indexServer</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span> <span class="nx">index</span><span class="p">))</span>
		<span class="p">}</span>
		<span class="nx">e</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/favicon.ico&#34;</span><span class="p">,</span> <span class="nx">echo</span><span class="p">.</span><span class="nf">WrapHandler</span><span class="p">(</span><span class="nx">assetHandler</span><span class="p">))</span>
		<span class="nx">e</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/site.webmanifest&#34;</span><span class="p">,</span> <span class="nx">echo</span><span class="p">.</span><span class="nf">WrapHandler</span><span class="p">(</span><span class="nx">assetHandler</span><span class="p">))</span>
		<span class="nx">e</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/static/css/*&#34;</span><span class="p">,</span> <span class="nx">echo</span><span class="p">.</span><span class="nf">WrapHandler</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nf">StripPrefix</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">assetHandler</span><span class="p">)))</span>
		<span class="nx">e</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/static/js/*&#34;</span><span class="p">,</span> <span class="nx">echo</span><span class="p">.</span><span class="nf">WrapHandler</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nf">StripPrefix</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">assetHandler</span><span class="p">)))</span>
		<span class="nx">e</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/static/media/*&#34;</span><span class="p">,</span> <span class="nx">echo</span><span class="p">.</span><span class="nf">WrapHandler</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nf">StripPrefix</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">assetHandler</span><span class="p">)))</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>What is <code>indexServer</code> in this you might ask? Well, fret no longer, I shall show you:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// indexServer takes a name and the contents of the virtual file index.html gathered up by go.rice
</span><span class="c1">// and serves its content via http.ServeContent under the given name.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">indexServer</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">file</span> <span class="o">*</span><span class="nx">rice</span><span class="p">.</span><span class="nx">File</span><span class="p">)</span> <span class="nx">echo</span><span class="p">.</span><span class="nx">HandlerFunc</span> <span class="p">{</span>
	<span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c</span> <span class="nx">echo</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
		<span class="nx">stat</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Stat</span><span class="p">()</span>
		<span class="nx">http</span><span class="p">.</span><span class="nf">ServeContent</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nf">Response</span><span class="p">().</span><span class="nx">Writer</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Request</span><span class="p">(),</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">stat</span><span class="p">.</span><span class="nf">ModTime</span><span class="p">(),</span> <span class="nx">file</span><span class="p">)</span>
		<span class="k">return</span> <span class="kc">nil</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The key points are the name, which will be the route and the file which is the index.html content which contains
the logic to route based on the request. All that will be handled. And if a new route comes along,
simple add it to the list, recompile and you are done!</p>
<h1 id="conclusion">Conclusion</h1>
<p>In summary, you let your index.html file handle the routing as you would normally do. Just you need to make your
backend aware of that fact. Now refreshing the page will work as you&rsquo;d expect.</p>
<p>Thank you for reading,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Summary of Practical Go workshop from Dave Cheney</title>
      <link>https://skarlso.github.io/2019/10/10/practical-go-summary/</link>
      <pubDate>Thu, 10 Oct 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/10/10/practical-go-summary/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>So there is <a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html">this</a> workshop from <a href="https://twitter.com/davecheney">Dave Cheney</a>.</p>
<p>And I thought I&rsquo;d draw a sort of summary of that workshop.</p>
<p><img src="/img/practical_go.png" alt="enjoy"></p>
<p>Right-click-&gt;Open Image for higher resolution.</p>
<p>Cheers,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Efferent and Afferent metrics in Go</title>
      <link>https://skarlso.github.io/2019/04/21/efferent-and-afferent-metrics-in-go/</link>
      <pubDate>Sun, 21 Apr 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/04/21/efferent-and-afferent-metrics-in-go/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks!</p>
<p>Today I would like to write about a metric that I read in a book called Clean Architecture from Robert Cecil Martin ( Uncle Bob ).</p>
<h1 id="abstract">Abstract</h1>
<p>The metrics I mean are <a href="https://en.wikipedia.org/wiki/Software_package_metrics">Efferent</a> and <a href="https://en.wikipedia.org/wiki/Software_package_metrics">Afferent</a> coupling in packages. So you, dear reader, don&rsquo;t have to navigate away from this page, here are the descriptions pasted in:</p>
<ul>
<li>
<p>Afferent couplings (Ca): The number of classes in other packages that depend upon classes within the package is an indicator of the package&rsquo;s responsibility. Afferent couplings signal inward. (Affected by this package) (Fan-In).</p>
</li>
<li>
<p>Efferent couplings (Ce): The number of classes in other packages that the classes in this package depend upon is an indicator of the package&rsquo;s dependence on externalities. Efferent couplings signal outward. (Effecting this package) (Fan-Out).</p>
</li>
</ul>
<p>These metrics used together will indicate the stability / instability of each package in a project.</p>
<h1 id="metric-usage">Metric Usage</h1>
<p>What does it mean if the package is stable vs. unstable? Let&rsquo;s take a closer look.</p>
<h2 id="unstable">Unstable</h2>
<p>If the instability metric comes out as 1 or close to 1, that means that the package is unstable. It means that there are only packages which this package is depending upon and nothing, or only 1 or 2, packages depend on it. This infers two things:</p>
<ul>
<li>The package is easy to change since there is nothing depending on the behavior explicitly</li>
<li>The package is volatile since it depends on a lot of out side things</li>
</ul>
<p>The first one is self-explanatory. The second one has ramifications. These ramifications are that there are a lot of packages that could cause bugs in this package. Ideally, a package with instability 1 or high, requires a large test coverage to ensure that no bugs seep in.</p>
<h2 id="stable">Stable</h2>
<p>On the other spectrum lies the indicator for a stable package. If this metric is 0 or close to 0, the package is said to be stable. A stable package resists change because it has a lot of depending packages. The depending packages lock this package in place, meaning we can&rsquo;t change the package easily. Ideally this is the package that would contain business logic for example, or code which does not change often.</p>
<h1 id="appliance-in-go-ecosystem">Appliance in Go ecosystem</h1>
<p>The book was using mostly Java or C/C++ for examples and dealt with classes describing these metrics. Especially the Abstractness of a package which calculates as ratio of abstract classes + interfaces vs concrete classes and implementations. This isn&rsquo;t that easy to define in Go. Not impossible though and we could still get something close enough. Something like, count interfaces + structs vs implementations of said interfaces with function receivers and functions.</p>
<p>The easier of these is the coupling metrics. I think we can define them since Go also has import statements. Go doesn&rsquo;t have classes, but it&rsquo;s enough if we calculate the number of packages that said package depends upon and are depended upon by. Should be close enough.</p>
<h1 id="tool">Tool</h1>
<p>If there is a project with a <strong>lot</strong> of packages and files, it would be quite difficult to calculate things using your hands&hellip; Hence, <a href="https://github.com/Skarlso/effrit">Effrit</a>. This tool, at the writing of this post, only calculates the stability metric for now. If given a parameter like <code>-p effrit</code> it will only calculate the Fan-Out metrics considering project packages. If no project name is given, it will also calculate not project packages (for example cobra or aws sdk) as Efferent. Usage is really simple. Navigate to the root of the project and run <code>effrit scan -p &lt;projectname&gt;</code>.</p>
<h1 id="applying-the-tool">Applying the tool</h1>
<p>Let&rsquo;s see with a real example on using the tool and what to do with the metrics it provides.</p>
<p>I have a project called <a href="https://github.com/go-furnace/go-furnace">Furnace</a>. Running the tool on it I get the following stats:</p>
<p><img src="/img/effrit/effrit1.png" alt="furnace-before-tool">.</p>
<p>What do these means?</p>
<p>It means, that hopefully, <code>command</code> packages have a high coverage and that <code>config</code> packages don&rsquo;t require change that often. The coverage count for aws command package is:</p>
<p><code>coverage: 74.7% of statements</code></p>
<p>That is pretty good. I think it&rsquo;s covered well enough for now.</p>
<p>On to the <code>config</code> package. This is the whole file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">config</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;os/user&#34;</span>
	<span class="s">&#34;path/filepath&#34;</span>

	<span class="s">&#34;github.com/go-furnace/go-furnace/handle&#34;</span>
<span class="p">)</span>

<span class="c1">// Spinners is a collection os spinner types
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">Spinners</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">`←↖↑↗→↘↓↙`</span><span class="p">,</span>
	<span class="s">`▁▃▄▅▆▇█▇▆▅▄▃`</span><span class="p">,</span>
	<span class="s">`┤┘┴└├┌┬┐`</span><span class="p">,</span>
	<span class="s">`◰◳◲◱`</span><span class="p">,</span>
	<span class="s">`◴◷◶◵`</span><span class="p">,</span>
	<span class="s">`◐◓◑◒`</span><span class="p">,</span>
	<span class="s">`⣾⣽⣻⢿⡿⣟⣯⣷`</span><span class="p">,</span>
	<span class="s">`|/-\`</span><span class="p">}</span>

<span class="c1">// WAITFREQUENCY global wait frequency default.
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">WAITFREQUENCY</span> <span class="p">=</span> <span class="mi">1</span>

<span class="c1">// STACKNAME is the default name for a stack.
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">STACKNAME</span> <span class="p">=</span> <span class="s">&#34;FurnaceStack&#34;</span>

<span class="c1">// SPINNER is the index of which spinner to use. Defaults to 7.
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">SPINNER</span> <span class="p">=</span> <span class="mi">7</span>

<span class="c1">// Path retrieves the main configuration path.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Path</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="c1">// Get configuration path
</span><span class="c1"></span>	<span class="nx">usr</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">user</span><span class="p">.</span><span class="nf">Current</span><span class="p">()</span>
	<span class="nx">handle</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="k">return</span> <span class="nx">filepath</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">usr</span><span class="p">.</span><span class="nx">HomeDir</span><span class="p">,</span> <span class="s">&#34;.config&#34;</span><span class="p">,</span> <span class="s">&#34;go-furnace&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Not a lot of stuff in there. But it&rsquo;s using the <code>handle</code> package. Hence the <code>0.2</code>. Luckily, we also have some coverage to take care of that.</p>
<p>The <code>handle</code> is pretty stable. Let&rsquo;s take a peak inside:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">handle</span>

<span class="kn">import</span> <span class="s">&#34;log&#34;</span>

<span class="c1">// LogFatalf is used to define the fatal error handler function. In unit tests, this is used to
</span><span class="c1">// mock out fatal errors so we can test for them.
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">LogFatalf</span> <span class="p">=</span> <span class="nx">log</span><span class="p">.</span><span class="nx">Fatalf</span>

<span class="c1">// Error extracts the if err != nil check. If the given error is not nil it will call
</span><span class="c1">// the defined fatal error handler function.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Error</span><span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;Error occurred:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Fatal is a wrapper for LogFatalf function. It&#39;s used to throw a Fatal in case it needs to.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Fatal</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="nf">LogFatalf</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Basic logic to take care of errors in Furnace. Last time I changed this file was&hellip; a year ago. Yeah, I think it&rsquo;s doing fine.</p>
<h1 id="conclusion">Conclusion</h1>
<p>And that&rsquo;s it. Hopefully this is an interesting metric to use to define what packages may need refactoring, or need to be repurposed because they are too rigid. If a packages is stable, aka. hard to change but must undergo changes frequently, it may be time to refactor and introduce a mediator or a liaison package. If a package is unstable and has a lot of bugs, we might want to refactor it and inverse it&rsquo;s dependencies. This is called the Dependency Inversion Principle, DIP. Which is also described in the same book. However it&rsquo;s not always bad if a package is unstable. Maybe it contains code which needs to change frequently. It&rsquo;s a database schema code. Or an algorithm which requires constant tweaking. And that is fine. Just make sure it&rsquo;s covered well enough.</p>
<p>The principles that these metrics are based on are: <a href="http://wiki.c2.com/?StableAbstractionsPrinciple">SAP</a> and <a href="https://www.smartics.eu/confluence/display/ADOC/Stable+Dependencies+Principle">SDP</a>. Stable Abstraction Principle and Stable Dependencies Principle. These are also described in the same book, Clean Architecture. A highly recommend it. Applying these principles could help maintain the project&rsquo;s stability and it&rsquo;s dependencies.</p>
<p>Thank you for reading,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Go SSH with Host Key Verification</title>
      <link>https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/</link>
      <pubDate>Sun, 17 Feb 2019 21:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>Following a long search and reading lots of debates and possibilities of doing SSH within Go, I was shocked to see that not a great many tools and people use SSH with host key verification. What I usually see is this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">HostKeyCallback</span><span class="p">:</span> <span class="nx">ssh</span><span class="p">.</span><span class="nf">InsecureIgnoreHostKey</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>This is terrible. Now, I realise that doing HostKeyVerification can be tedious, but don&rsquo;t fear. It&rsquo;s actually easy
now that the Go team provided the knownhosts subpackage in their crypto SSH package located here:
<a href="https://godoc.org/golang.org/x/crypto/ssh/knownhosts">KnownHosts</a>.</p>
<p>This part in particular is interesting: <a href="https://godoc.org/golang.org/x/crypto/ssh/knownhosts#New">New</a>.</p>
<p>Using new with a known_hosts file a code can be written like this one to verify host keys:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;bytes&#34;</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;io/ioutil&#34;</span>
	<span class="s">&#34;log&#34;</span>

	<span class="s">&#34;golang.org/x/crypto/ssh&#34;</span>
	<span class="nx">kh</span> <span class="s">&#34;golang.org/x/crypto/ssh/knownhosts&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">user</span> <span class="o">:=</span> <span class="s">&#34;user&#34;</span>
	<span class="nx">address</span> <span class="o">:=</span> <span class="s">&#34;192.168.0.17&#34;</span>
	<span class="nx">command</span> <span class="o">:=</span> <span class="s">&#34;uptime&#34;</span>
	<span class="nx">port</span> <span class="o">:=</span> <span class="s">&#34;9999&#34;</span>

	<span class="nx">key</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadFile</span><span class="p">(</span><span class="s">&#34;/Users/user/.ssh/id_rsa&#34;</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;unable to read private key: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="c1">// Create the Signer for this private key.
</span><span class="c1"></span>	<span class="nx">signer</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ssh</span><span class="p">.</span><span class="nf">ParsePrivateKey</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;unable to parse private key: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="nx">hostKeyCallback</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">kh</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;/Users/user/.ssh/known_hosts&#34;</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;could not create hostkeycallback function: &#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="nx">config</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">ssh</span><span class="p">.</span><span class="nx">ClientConfig</span><span class="p">{</span>
		<span class="nx">User</span><span class="p">:</span> <span class="nx">user</span><span class="p">,</span>
		<span class="nx">Auth</span><span class="p">:</span> <span class="p">[]</span><span class="nx">ssh</span><span class="p">.</span><span class="nx">AuthMethod</span><span class="p">{</span>
			<span class="c1">// Add in password check here for moar security.
</span><span class="c1"></span>			<span class="nx">ssh</span><span class="p">.</span><span class="nf">PublicKeys</span><span class="p">(</span><span class="nx">signer</span><span class="p">),</span>
		<span class="p">},</span>
		<span class="nx">HostKeyCallback</span><span class="p">:</span> <span class="nx">hostKeyCallback</span><span class="p">,</span>
	<span class="p">}</span>
	<span class="c1">// Connect to the remote server and perform the SSH handshake.
</span><span class="c1"></span>	<span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ssh</span><span class="p">.</span><span class="nf">Dial</span><span class="p">(</span><span class="s">&#34;tcp&#34;</span><span class="p">,</span> <span class="nx">address</span><span class="o">+</span><span class="s">&#34;:&#34;</span><span class="o">+</span><span class="nx">port</span><span class="p">,</span> <span class="nx">config</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;unable to connect: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
	<span class="nx">ss</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">NewSession</span><span class="p">()</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;unable to create SSH session: &#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="nx">ss</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
	<span class="c1">// Creating the buffer which will hold the remotly executed command&#39;s output.
</span><span class="c1"></span>	<span class="kd">var</span> <span class="nx">stdoutBuf</span> <span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span>
	<span class="nx">ss</span><span class="p">.</span><span class="nx">Stdout</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">stdoutBuf</span>
	<span class="nx">ss</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">command</span><span class="p">)</span>
	<span class="c1">// Let&#39;s print out the result of command.
</span><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">stdoutBuf</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Here is the whole thing as a <a href="https://gist.github.com/Skarlso/34321a230cf0245018288686c9e70b2d">Gist</a>.</p>
<p>Please try and avoid using Insecure host keys. It is easier, but can harm so much. Software like these:
<a href="https://mitmproxy.org/">Man in The Middle Proxy</a> thrive in an environment that doesn&rsquo;t do it, or doesn&rsquo;t in other ways
mitigate this problem.</p>
<p>Be wise and be safe.
Thanks for reading,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Extensive tutorial on go-plugin.</title>
      <link>https://skarlso.github.io/2018/10/29/go-plugin-tutorial/</link>
      <pubDate>Mon, 29 Oct 2018 07:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/10/29/go-plugin-tutorial/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>If you don&rsquo;t know what go-plugin is, don&rsquo;t worry, here is a small introduction on the subject matter:</p>
<p>Back in the old days when Go didn&rsquo;t have the <code>plugin</code> package, HashiCorp was desperately looking for a way to use plugins.</p>
<p>In the old days, Lua plus Go wasn&rsquo;t really a thing yet, and to be honest, nobody wants to write Lua ( joking!).</p>
<p>And thus Mitchell had this brilliant idea of using RPC over the local network to serve a local interface as something that could easily be implemented with any other language that supported RPC. This sounds convoluted but has many benefits! For example, your code will never crash because of a plugin and the ability to use any language to implement a plugin. Not just Go.</p>
<p>It has been a battle-hardened solution for years now and is being actively used by Terraform, Vault, Consule, and especially Packer. All using go-plugin in order to provide a much needed flexibility. Writing a plugin is easy. Or so they say.</p>
<p>It can get complicated quickly, for example, if you are trying to use GRPC. You can lose sight of what exactly you&rsquo;ll need to implement, where and why; or utilizing various languages or using go-plugins in your own project and extending your CLI with pluggable components.</p>
<p>These are all nothing to sneeze at. Suddenly you&rsquo;ll find yourself with hundreds of lines of code pasted from various examples and yet nothing works. Or worse, it DOES work but you have no idea how. Then you find yourself needing to extend it with a new capability, or you find an elusive bug and can&rsquo;t trace its origins.</p>
<p>Fear not. I&rsquo;ll try to demystify things and draw a clear picture about how it works and how the pieces fit together.</p>
<p>Let&rsquo;s start at the beginning.</p>
<h1 id="basic-plugin">Basic plugin</h1>
<p>Let&rsquo;s start by writing a simple Go GRPC plugin. In fact, we can go through the basic example in the go-plugin’s repository which can be quite confusing when first starting out. We&rsquo;ll go step-by-step, and the switch to GRPC will be much easier!</p>
<h2 id="basic-concepts">Basic concepts</h2>
<h3 id="server">Server</h3>
<p>In the case of plugins, the Server is the one serving the plugin&rsquo;s implementation. This means the server will have to provide the implementation to an interface.</p>
<h3 id="client">Client</h3>
<p>The Client calls the server in order to execute the desired behaviour. The underlying logic will connect to the server running on localhost on a random higher port, call the wanted function’s implementation and wait for a response. Once the response is received provide that back to the calling Client.</p>
<h2 id="implementation">Implementation</h2>
<h3 id="the-main-function">The main function</h3>
<h4 id="logger">Logger</h4>
<p>The plugins defined here use stdout in a special way. If you aren&rsquo;t writing a Go based plugin, you will have to do that yourself by outputting something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">1|1|tcp|127.0.0.1:1234|grpc
</code></pre></td></tr></table>
</div>
</div><p>We&rsquo;ll come back to this later. Suffice to say the framework will pick this up and will connect to the plugin based on the output. In order to get some output back, we must define a special logger:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">	<span class="c1">// Create an hclog.Logger
</span><span class="c1"></span>	<span class="nx">logger</span> <span class="o">:=</span> <span class="nx">hclog</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">hclog</span><span class="p">.</span><span class="nx">LoggerOptions</span><span class="p">{</span>
		<span class="nx">Name</span><span class="p">:</span>   <span class="s">&#34;plugin&#34;</span><span class="p">,</span>
		<span class="nx">Output</span><span class="p">:</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">,</span>
		<span class="nx">Level</span><span class="p">:</span>  <span class="nx">hclog</span><span class="p">.</span><span class="nx">Debug</span><span class="p">,</span>
	<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="newclient">NewClient</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">	<span class="c1">// We&#39;re a host! Start by launching the plugin process.
</span><span class="c1"></span>	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">plugin</span><span class="p">.</span><span class="nf">NewClient</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">ClientConfig</span><span class="p">{</span>
		<span class="nx">HandshakeConfig</span><span class="p">:</span> <span class="nx">handshakeConfig</span><span class="p">,</span>
		<span class="nx">Plugins</span><span class="p">:</span>         <span class="nx">pluginMap</span><span class="p">,</span>
		<span class="nx">Cmd</span><span class="p">:</span>             <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;./plugin/greeter&#34;</span><span class="p">),</span>
		<span class="nx">Logger</span><span class="p">:</span>          <span class="nx">logger</span><span class="p">,</span>
	<span class="p">})</span>
	<span class="k">defer</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Kill</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>What is happening here? Let&rsquo;s see one by one:</p>
<p><code>HandshakeConfig: handshakeConfig,</code>: This part is the handshake configuration of the plugin. It has a nice comment as well.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// handshakeConfigs are used to just do a basic handshake between
</span><span class="c1">// a plugin and host. If the handshake fails, a user friendly error is shown.
</span><span class="c1">// This prevents users from executing bad plugins or executing a plugin
</span><span class="c1">// directory. It is a UX feature, not a security feature.
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">handshakeConfig</span> <span class="p">=</span> <span class="nx">plugin</span><span class="p">.</span><span class="nx">HandshakeConfig</span><span class="p">{</span>
	<span class="nx">ProtocolVersion</span><span class="p">:</span>  <span class="mi">1</span><span class="p">,</span>
	<span class="nx">MagicCookieKey</span><span class="p">:</span>   <span class="s">&#34;BASIC_PLUGIN&#34;</span><span class="p">,</span>
	<span class="nx">MagicCookieValue</span><span class="p">:</span> <span class="s">&#34;hello&#34;</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The <code>ProtocolVersion</code> here is used in order to maintain compatibility with your current plugin versions. It&rsquo;s basically like an API version. If you increase this, you will have two options. Don&rsquo;t accept lower protocol versions nor switch to the version number and use a different client implementation for a lower version than for a higher version. This way you will maintain backwards compatibility.</p>
<p>The <code>MagicCookieKey</code> and <code>MagicCookieValue</code> are used for a basic handshake which the comment is talking about. You have to set this <strong>ONCE</strong> for your application. Never change it again, for if you do, your plugins will no longer work. For uniqueness sake, I suggest using UUID.</p>
<p><code>Cmd</code> is one of the most important parts about a plugin. Basically how plugins work is that they boil down to a compiled binary which is executed and starts an RPC server. This is where you will have to define the binary which will be executed and does all this. Since this is all happening locally, (please keep in mind that Go-plugins only support localhost, and for a good reason), these binaries will most likely sit next to your application&rsquo;s binary or in a pre-configured global location. Something like:  <code>~/.config/my-app/plugins</code>. This is individual for each plugin of course. The plugins can be autoloaded via a discovery function given a path and a glob.</p>
<p>And last but not least is the <code>Plugins</code> map. This map is used in order to identify a plugin called <code>Dispense</code>. This map is globally available and must stay consistent in order for all the plugins to work:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// pluginMap is the map of plugins we can dispense.
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">pluginMap</span> <span class="p">=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">Pluglin</span>	<span class="s">&#34;greeter&#34;</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">example</span><span class="p">.</span><span class="nx">GreeterPlugin</span><span class="p">{},</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>You can see that the key is the name of the plugin and the value is the plugin.</p>
<p>We then proceed to create an RPC client:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">	<span class="c1">// Connect via RPC
</span><span class="c1"></span>	<span class="nx">rpcClient</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Client</span><span class="p">()</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Nothing fancy about this one&hellip;</p>
<p>Now comes the interesting part:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">	<span class="c1">// Request the plugin
</span><span class="c1"></span>	<span class="nx">raw</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rpcClient</span><span class="p">.</span><span class="nf">Dispense</span><span class="p">(</span><span class="s">&#34;greeter&#34;</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>What&rsquo;s happening here? Dispense will look in the above created map and search for the plugin. If it cannot find it, it will throw an error at us. If it does find it, it will cast this plugin to an RPC or a GRPC type plugin. Then proceed to create an RPC or a GRPC client out of it.</p>
<p>There is no call yet. This is just creating a client and parsing it to a respective representation.</p>
<p>Now comes the magic:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">	<span class="c1">// We should have a Greeter now! This feels like a normal interface
</span><span class="c1"></span>	<span class="c1">// implementation but is in fact over an RPC connection.
</span><span class="c1"></span>	<span class="nx">greeter</span> <span class="o">:=</span> <span class="nx">raw</span><span class="p">.(</span><span class="nx">example</span><span class="p">.</span><span class="nx">Greeter</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">greeter</span><span class="p">.</span><span class="nf">Greet</span><span class="p">())</span>
</code></pre></td></tr></table>
</div>
</div><p>Here we are type asserting our raw GRPC client into our own plugin type. This is so we can call the respective function on the plugin! Once that&rsquo;s done we will have a {client,struct,implementation} that can be called like a simple function.</p>
<p>The implementation right now comes from greeter_impl.go, but that will change once protoc makes an appearance.</p>
<p>Behind the scenes, go-plugin will do a bunch of hat tricks with multiplexing TCP connections as well as a remote procedure call to our plugin. Our plugin then will run the function, generate some kind of output, and will then send that back for the waiting client.</p>
<p>The client will then proceed to parse the message into a given response type and will then return it back to the client’s callee.</p>
<p>This concludes main.go for now.</p>
<h3 id="the-interface">The Interface</h3>
<p>Now let’s investigate the Interface. The interface is used to provide calling details. This interface will be what defines our plugins’ capabilities. How does our <code>Greeter</code> look like?</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Greeter is the interface that we&#39;re exposing as a plugin.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Greeter</span> <span class="kd">interface</span> <span class="p">{</span>
	<span class="nf">Greet</span><span class="p">()</span> <span class="kt">string</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This is pretty simple. It defines a function which will return a string typed value.</p>
<p>Now, we will need a couple of things for this to work. Firstly we need something which defines the RPC workings. go-plugin is working with <code>net/http</code> inside. It also uses something called Yamux for connection multiplexing, but we needn’t worry about this detail.</p>
<p>Implementing the RPC details looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Here is an implementation that talks over RPC
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">GreeterRPC</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">client</span> <span class="o">*</span><span class="nx">rpc</span><span class="p">.</span><span class="nx">Client</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">g</span> <span class="o">*</span><span class="nx">GreeterRPC</span><span class="p">)</span> <span class="nf">Greet</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">resp</span> <span class="kt">string</span>
	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">g</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">Call</span><span class="p">(</span><span class="s">&#34;Plugin.Greet&#34;</span><span class="p">,</span> <span class="nb">new</span><span class="p">(</span><span class="kd">interface</span><span class="p">{}),</span> <span class="o">&amp;</span><span class="nx">resp</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="c1">// You usually want your interfaces to return errors. If they don&#39;t,
</span><span class="c1"></span>		<span class="c1">// there isn&#39;t much other choice here.
</span><span class="c1"></span>		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="nx">resp</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Here the GreeterRPC struct is an RPC specific implementation that will handle communication over RPC. This is Client in this setup.</p>
<p>In case of gRPC, this would look something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// GRPCClient is an implementation of KV that talks over RPC.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">GreeterGRPC</span> <span class="kd">struct</span><span class="p">{</span> <span class="nx">client</span> <span class="nx">proto</span><span class="p">.</span><span class="nx">GreeterClient</span> <span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">GreeterGRPC</span><span class="p">)</span> <span class="nf">Greet</span><span class="p">()</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">s</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">Greet</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="o">&amp;</span><span class="nx">proto</span><span class="p">.</span><span class="nx">Empty</span><span class="p">{})</span>
	<span class="k">return</span> <span class="nx">s</span><span class="p">,</span> <span class="nx">err</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>What is happening here? What&rsquo;s Proto and what is GreeterClient? GRPC uses Google&rsquo;s protoc library to serialize and unserialize data. <code>proto.GreeterClient</code> is generated Go code by protoc. This code is a skeleton for which implementation detail will be replaced on run time. Well, the actual result will be used and not replaced as such.</p>
<p>Back to our previous example. The RPC client calls a specific Plugin function called Greet for which the implementation will be provided by a Server that will be streamed back over the RPC protocol.</p>
<p>The server is pretty easy to follow:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Here is the RPC server that GreeterRPC talks to, conforming to
</span><span class="c1">// the requirements of net/rpc
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">GreeterRPCServer</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="c1">// This is the real implementation
</span><span class="c1"></span>	<span class="nx">Impl</span> <span class="nx">Greeter</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Impl is the concrete implementation that will be called in the Server&rsquo;s implementation of the Greet plugin. Now we must define Greet on the RPCServer in order for it to be able to call the remote code. This looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">GreeterRPCServer</span><span class="p">)</span> <span class="nf">Greet</span><span class="p">(</span><span class="nx">args</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">resp</span> <span class="o">*</span><span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="o">*</span><span class="nx">resp</span> <span class="p">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Impl</span><span class="p">.</span><span class="nf">Greet</span><span class="p">()</span>
	<span class="k">return</span> <span class="kc">nil</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This is all still boilerplate for the RPC works. Now comes plugin. For this, the comment is actually quite good too:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// This is the implementation of plugin.Plugin so we can serve/consume this
</span><span class="c1">//
</span><span class="c1">// This has two methods: Server must return an RPC server for this plugin
</span><span class="c1">// type. We construct a GreeterRPCServer for this.
</span><span class="c1">//
</span><span class="c1">// Client must return an implementation of our interface that communicates
</span><span class="c1">// over an RPC client. We return GreeterRPC for this.
</span><span class="c1">//
</span><span class="c1">// Ignore MuxBroker. That is used to create more multiplexed streams on our
</span><span class="c1">// plugin connection and is a more advanced use case.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">GreeterPlugin</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="c1">// Impl Injection
</span><span class="c1"></span>	<span class="nx">Impl</span> <span class="nx">Greeter</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">GreeterPlugin</span><span class="p">)</span> <span class="nf">Server</span><span class="p">(</span><span class="o">*</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">MuxBroker</span><span class="p">)</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">GreeterRPCServer</span><span class="p">{</span><span class="nx">Impl</span><span class="p">:</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Impl</span><span class="p">},</span> <span class="kc">nil</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">GreeterPlugin</span><span class="p">)</span> <span class="nf">Client</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">MuxBroker</span><span class="p">,</span> <span class="nx">c</span> <span class="o">*</span><span class="nx">rpc</span><span class="p">.</span><span class="nx">Client</span><span class="p">)</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">GreeterRPC</span><span class="p">{</span><span class="nx">client</span><span class="p">:</span> <span class="nx">c</span><span class="p">},</span> <span class="kc">nil</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>What does this mean? So, remember: <code>GreeterRPCServer</code> is the one calling the actual implementation while Client is receiving the result of that call. The <code>GreeterPlugin</code> has the <code>Greeter</code> interface embedded just like the <code>RPCServer</code>. We will use the <code>GreeterPlugin</code> as a struct in the plugin map. This is the plugin that we will actually use.</p>
<p>This is all still common stuff. These things will need to be visible for both. The plugin&rsquo;s implementation will use the interface to see what it needs to implement. The Client will use it see what to call and what API is available. Like, <code>Greet</code>.</p>
<p>How does the implementation look like?</p>
<h3 id="the-implementation">The Implementation</h3>
<p>In a completely separate package, but which still has access to the interface definition, this plugin could be something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Here is a real implementation of Greeter
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">GreeterHello</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">logger</span> <span class="nx">hclog</span><span class="p">.</span><span class="nx">Logger</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">g</span> <span class="o">*</span><span class="nx">GreeterHello</span><span class="p">)</span> <span class="nf">Greet</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="nx">g</span><span class="p">.</span><span class="nx">logger</span><span class="p">.</span><span class="nf">Debug</span><span class="p">(</span><span class="s">&#34;message from GreeterHello.Greet&#34;</span><span class="p">)</span>
	<span class="k">return</span> <span class="s">&#34;Hello!&#34;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>We create a struct and then add the function to it which is defined by the plugin&rsquo;s interface. This interface, since it&rsquo;s required by both parties, could well sit in a common package outside of both programs. Something like a SDK. Both code could import it and use it as a common dependency. This way we have separated the interface from the plugin <strong>and</strong> the calling client.</p>
<p>The <code>main</code> function could look something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">logger</span> <span class="o">:=</span> <span class="nx">hclog</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">hclog</span><span class="p">.</span><span class="nx">LoggerOptions</span><span class="p">{</span>
    <span class="nx">Level</span><span class="p">:</span>      <span class="nx">hclog</span><span class="p">.</span><span class="nx">Trace</span><span class="p">,</span>
    <span class="nx">Output</span><span class="p">:</span>     <span class="nx">os</span><span class="p">.</span><span class="nx">Stderr</span><span class="p">,</span>
    <span class="nx">JSONFormat</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
<span class="p">})</span>

<span class="nx">greeter</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">GreeterHello</span><span class="p">{</span>
    <span class="nx">logger</span><span class="p">:</span> <span class="nx">logger</span><span class="p">,</span>
<span class="p">}</span>
<span class="c1">// pluginMap is the map of plugins we can dispense.
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">pluginMap</span> <span class="p">=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">Plugin</span><span class="p">{</span>
    <span class="s">&#34;greeter&#34;</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">example</span><span class="p">.</span><span class="nx">GreeterPlugin</span><span class="p">{</span><span class="nx">Impl</span><span class="p">:</span> <span class="nx">greeter</span><span class="p">},</span>
<span class="p">}</span>

<span class="nx">logger</span><span class="p">.</span><span class="nf">Debug</span><span class="p">(</span><span class="s">&#34;message from plugin&#34;</span><span class="p">,</span> <span class="s">&#34;foo&#34;</span><span class="p">,</span> <span class="s">&#34;bar&#34;</span><span class="p">)</span>

<span class="nx">plugin</span><span class="p">.</span><span class="nf">Serve</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">ServeConfig</span><span class="p">{</span>
    <span class="nx">HandshakeConfig</span><span class="p">:</span> <span class="nx">handshakeConfig</span><span class="p">,</span>
    <span class="nx">Plugins</span><span class="p">:</span>         <span class="nx">pluginMap</span><span class="p">,</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>Notice two things that we need. One is the <code>handshakeConfig</code>. You can either define it here, with the same cookie details as you defined in the client code, or you can extract the handshake information into the SDK. This is up to you.</p>
<p>Then the next interesting thing is the <code>plugin.Serve</code> method. This is where the magic happens. The plugins open up a RPC communication socket and over a hijacked <code>stdout</code>, broadcasts its availability to the calling Client in this format:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">CORE-PROTOCOL-VERSION <span class="p">|</span> APP-PROTOCOL-VERSION <span class="p">|</span> NETWORK-TYPE <span class="p">|</span> NETWORK-ADDR <span class="p">|</span> PROTOCOL
</code></pre></td></tr></table>
</div>
</div><p>For Go plugins, you don&rsquo;t have to concern yourself with this. <code>go-plugin</code> takes care of all this for you. For non-Go versions, we must take this into account. And before calling serve, we need to output this information to <code>stdout</code>.</p>
<p>For example, a Python plugin must deal with this himself. Like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Output information</span>
<span class="k">print</span><span class="p">(</span><span class="s2">&#34;1|1|tcp|127.0.0.1:1234|grpc&#34;</span><span class="p">)</span>
<span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>For GRPC plugins, it&rsquo;s also mandatory to implement a HealthChecker.</p>
<p>How would all this look like with GRPC?</p>
<p>It gets slightly more complicated but not too much. We need to use <code>protoc</code> to create a protocol description for our implementation, and then we will call that. Let&rsquo;s look at this now by converting the basic greeter example into GRPC.</p>
<h1 id="grpc-basic-plugin">GRPC Basic plugin</h1>
<p>The example that&rsquo;s under GRPC is quite elaborate and perhaps you don&rsquo;t need the Python part. I will focus on the basic RPC example into a GRPC example. That should not be a problem.</p>
<h2 id="the-api">The API</h2>
<p>First and foremost, you will need to define an API to implement with <code>protoc</code>. For our basic example, the protoc file could look like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">syntax</span> <span class="p">=</span> <span class="s">&#34;proto3&#34;</span><span class="p">;</span>
<span class="kn">package</span> <span class="nx">proto</span><span class="p">;</span>

<span class="nx">message</span> <span class="nx">GreetResponse</span> <span class="p">{</span>
    <span class="kt">string</span> <span class="nx">message</span> <span class="p">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">message</span> <span class="nx">Empty</span> <span class="p">{}</span>

<span class="nx">service</span> <span class="nx">GreeterService</span> <span class="p">{</span>
    <span class="nx">rpc</span> <span class="nf">Greet</span><span class="p">(</span><span class="nx">Empty</span><span class="p">)</span> <span class="nf">returns</span> <span class="p">(</span><span class="nx">GreetResponse</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The syntax is quite simple and readable. What this defines is a message, which is a response, that will contain a <code>message</code> with the type <code>string</code>. The <code>service</code> defines a service which has a method called <code>Greet</code>. The service definition is basically an interface for which we will be providing the concrete implementation through the plugin.</p>
<p>To read more about protoc, visit this page: <a href="https://developers.google.com/protocol-buffers/">Google Protocol Buffer</a>.</p>
<h2 id="generate-the-code">Generate the code</h2>
<p>Now, with the protoc definition in hand, we need to generate the stubs that the local client implementation can call. That client call will then, through the remote procedure call, call the right function on the server which will have the concrete implementation at the ready. Run it and return the result in the specified format. Because the stub needs to be available by both parties, (the client AND the server), this needs to live in a shared location.</p>
<p>Why? Because the client is calling the stub and the server is implementing the stub. Both need it in order to know what to call/implement.</p>
<p>To generate the code, run this command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">protoc -I proto/ proto/greeter.proto --go_out<span class="o">=</span><span class="nv">plugins</span><span class="o">=</span>grpc:proto
</code></pre></td></tr></table>
</div>
</div><p>I encourage you to read the generated code. Much will make little sense at first. It will have a bunch of structs and defined things that the GRPC package will use in order to server the function. The interesting bits and pieces are:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">GreetResponse</span><span class="p">)</span> <span class="nf">GetMessage</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">m</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Message</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="s">&#34;&#34;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Which will get use the message inside the response.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">GreeterServiceClient</span> <span class="kd">interface</span> <span class="p">{</span>
	<span class="nf">Greet</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">in</span> <span class="o">*</span><span class="nx">Empty</span><span class="p">,</span> <span class="nx">opts</span> <span class="o">...</span><span class="nx">grpc</span><span class="p">.</span><span class="nx">CallOption</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">GreetResponse</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This is our ServiceClient interface which defines the Greet function’s topology.</p>
<p>And lastly, this guy:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">RegisterGreeterServiceServer</span><span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">grpc</span><span class="p">.</span><span class="nx">Server</span><span class="p">,</span> <span class="nx">srv</span> <span class="nx">GreeterServiceServer</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">s</span><span class="p">.</span><span class="nf">RegisterService</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">_GreeterService_serviceDesc</span><span class="p">,</span> <span class="nx">srv</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Which we will need in order to register our implementation for the server. We can ignore the rest.</p>
<h2 id="the-interface-1">The interface</h2>
<p>Much like the RPC, we need to define an interface for the client and server to use. This must be in a shared place as both the server and the client need to know about it. You could put this into an SDK and your peers could just get the SDK and implement some function for define and done. The interface definition in the GRPC land could look something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Greeter is the interface that we&#39;re exposing as a plugin.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Greeter</span> <span class="kd">interface</span> <span class="p">{</span>
	<span class="nf">Greet</span><span class="p">()</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="c1">// This is the implementation of plugin.GRPCPlugin so we can serve/consume this.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">GreeterGRPCPlugin</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="c1">// GRPCPlugin must still implement the Plugin interface
</span><span class="c1"></span>	<span class="nx">plugin</span><span class="p">.</span><span class="nx">Plugin</span>
	<span class="c1">// Concrete implementation, written in Go. This is only used for plugins
</span><span class="c1"></span>	<span class="c1">// that are written in Go.
</span><span class="c1"></span>	<span class="nx">Impl</span> <span class="nx">Greeter</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">GreeterGRPCPlugin</span><span class="p">)</span> <span class="nf">GRPCServer</span><span class="p">(</span><span class="nx">broker</span> <span class="o">*</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">GRPCBroker</span><span class="p">,</span> <span class="nx">s</span> <span class="o">*</span><span class="nx">grpc</span><span class="p">.</span><span class="nx">Server</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="nx">proto</span><span class="p">.</span><span class="nf">RegisterGreeterServer</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">GRPCServer</span><span class="p">{</span><span class="nx">Impl</span><span class="p">:</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Impl</span><span class="p">})</span>
	<span class="k">return</span> <span class="kc">nil</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">GreeterGRPCPlugin</span><span class="p">)</span> <span class="nf">GRPCClient</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">broker</span> <span class="o">*</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">GRPCBroker</span><span class="p">,</span> <span class="nx">c</span> <span class="o">*</span><span class="nx">grpc</span><span class="p">.</span><span class="nx">ClientConn</span><span class="p">)</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">GRPCClient</span><span class="p">{</span><span class="nx">client</span><span class="p">:</span> <span class="nx">proto</span><span class="p">.</span><span class="nf">NewGreeterClient</span><span class="p">(</span><span class="nx">c</span><span class="p">)},</span> <span class="kc">nil</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>With this we have the Plugin&rsquo;s implementation for hashicorp what needed to be done. The plugin will call the underlying implementation and serve/consume the plugin. We can now write the GRPC part of it.</p>
<p>Please note that <code>proto</code> is a shared library too where the protocol stubs reside. That needs to be somewhere on the path or in a separate SDK of some sort, but it must be visible.</p>
<h2 id="writing-the-grpc-client">Writing the GRPC Client</h2>
<p>Firstly we define the grpc client struct:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// GRPCClient is an implementation of Greeter that talks over RPC.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">GRPCClient</span> <span class="kd">struct</span><span class="p">{</span> <span class="nx">client</span> <span class="nx">proto</span><span class="p">.</span><span class="nx">GreeterClient</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Then we define how the client will call the remote function:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">GRPCClient</span><span class="p">)</span> <span class="nf">Greet</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="nx">ret</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">Greet</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="o">&amp;</span><span class="nx">proto</span><span class="p">.</span><span class="nx">Empty</span><span class="p">{})</span>
	<span class="k">return</span> <span class="nx">ret</span><span class="p">.</span><span class="nx">Message</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This will take the <code>client</code> in the <code>GRPCClient</code> and will call the method on it. Once that&rsquo;s done we will return to the result <code>Message</code> property which will be <code>Hello!</code>. <code>proto.Empty</code> is an empty struct; we use this if there is no parameter for a defined method or no return value. We can&rsquo;t just leave it blank. <code>protoc</code> needs to be told explicitly that there is no parameter or return value.</p>
<h2 id="writing-the-grpc-server">Writing the GRPC Server</h2>
<p>The server implementation will also be similar. We call <code>Impl</code> here which will have our concrete plugin implementation.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Here is the gRPC server that GRPCClient talks to.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">GRPCServer</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="c1">// This is the real implementation
</span><span class="c1"></span>	<span class="nx">Impl</span> <span class="nx">Greeter</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">GRPCServer</span><span class="p">)</span> <span class="nf">Greet</span><span class="p">(</span>
	<span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span>
	<span class="nx">req</span> <span class="o">*</span><span class="nx">proto</span><span class="p">.</span><span class="nx">Empty</span><span class="p">)</span> <span class="o">*</span><span class="nx">proto</span><span class="p">.</span><span class="nx">GreeterResponse</span> <span class="p">{</span>
	<span class="nx">v</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Impl</span><span class="p">.</span><span class="nf">Greet</span><span class="p">()</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">proto</span><span class="p">.</span><span class="nx">GreeterResponse</span><span class="p">{</span><span class="nx">Message</span><span class="p">:</span> <span class="nx">v</span><span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>And we will use the <code>protoc</code> defined message response. <code>v</code> will have the response from <code>Greet</code> which will be <code>Hello!</code> provided by the concrete plugin&rsquo;s implementation. We then transform that into a protoc type by setting the <code>Message</code> property on the <code>GreeterResponse</code> struct provided by the automatically generated protoc stub code.</p>
<p>Easy, right?</p>
<h2 id="writing-the-plugin-itself">Writing the plugin itself</h2>
<p>The whole thing looks much like the RPC implementation with just a few small modifications and changes. This can sit completely outside of everything, or can even be provided by a third party implementor.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Here is a real implementation of KV that writes to a local file with
</span><span class="c1">// the key name and the contents are the value of the key.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Greeter</span> <span class="kd">struct</span><span class="p">{}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">Greeter</span><span class="p">)</span> <span class="nf">Greet</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="k">return</span> <span class="s">&#34;Hello!&#34;</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">plugin</span><span class="p">.</span><span class="nf">Serve</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">ServeConfig</span><span class="p">{</span>
		<span class="nx">HandshakeConfig</span><span class="p">:</span> <span class="nx">shared</span><span class="p">.</span><span class="nx">Handshake</span><span class="p">,</span>
		<span class="nx">Plugins</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">Plugin</span><span class="p">{</span>
			<span class="s">&#34;greeter&#34;</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">shared</span><span class="p">.</span><span class="nx">GreeterGRPCPlugin</span><span class="p">{</span><span class="nx">Impl</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">Greeter</span><span class="p">{}},</span>
		<span class="p">},</span>

		<span class="c1">// A non-nil value here enables gRPC serving for this plugin...
</span><span class="c1"></span>		<span class="nx">GRPCServer</span><span class="p">:</span> <span class="nx">plugin</span><span class="p">.</span><span class="nx">DefaultGRPCServer</span><span class="p">,</span>
	<span class="p">})</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="calling-it-all-in-the-main">Calling it all in the main</h2>
<p>Once all that is done, the <code>main</code> function looks the same as RPC&rsquo;s main but with some small modifications.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">	<span class="c1">// We&#39;re a host. Start by launching the plugin process.
</span><span class="c1"></span>	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">plugin</span><span class="p">.</span><span class="nf">NewClient</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">ClientConfig</span><span class="p">{</span>
		<span class="nx">HandshakeConfig</span><span class="p">:</span> <span class="nx">shared</span><span class="p">.</span><span class="nx">Handshake</span><span class="p">,</span>
		<span class="nx">Plugins</span><span class="p">:</span>         <span class="nx">shared</span><span class="p">.</span><span class="nx">PluginMap</span><span class="p">,</span>
		<span class="nx">Cmd</span><span class="p">:</span>             <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;./plugin/greeter&#34;</span><span class="p">),</span>
		<span class="nx">AllowedProtocols</span><span class="p">:</span> <span class="p">[]</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">Protocol</span><span class="p">{</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">ProtocolGRPC</span><span class="p">},</span>
	<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>The <code>NewClient</code> now defines <code>AllowedProtocols</code> to be <code>ProtocolGRPC</code>. The rest is the same as before calling <code>Dispense</code> and value hinting the plugin to the correct type then calling <code>Greet()</code>.</p>
<h1 id="conclusion">Conclusion</h1>
<p>This is it. We made it! Now our plugin works over GRPC with a defined API by protoc. The plugin&rsquo;s implementation can live where ever we want it to, but it needs some shared data. These are:</p>
<ul>
<li>The generated code by <code>protoc</code></li>
<li>The defined plugin interface</li>
<li>The GRPC Server and Client</li>
</ul>
<p>These need to be visible by both the Client and the Server. The Server here is the plugin. If you are planning on making people be able to extend your application with go-plugin, you should make these available as a separate SDK. So people won&rsquo;t have to include your whole project just to implement an interface and use protoc. In fact, you could also extract the <code>protoc</code> definition into a separate repository so that your SDK can also pull it in.</p>
<p>You will have three repositories:</p>
<ul>
<li>Your application;</li>
<li>The SDK providing the interface and the GRPC Server and Client implementation;</li>
<li>The protoc definition file and generated skeleton ( for Go based plugins).</li>
</ul>
<p>Other languages will have to generate their own protoc code, and includ it into the plugin; like the Python implementation example located here: <a href="https://github.com/hashicorp/go-plugin/tree/master/examples/grpc/plugin-python">Go-plugin Python Example</a>. Also, read this documentation carefully: <a href="https://github.com/hashicorp/go-plugin/blob/master/docs/guide-plugin-write-non-go.md">non-go go-plugin</a>. This document will also clarify what <code>1|1|tcp|127.0.0.1:1234|grpc</code> means and will dissipate the confusion around how plugins work.</p>
<p>Lastly, if you would like to have an in-depth explanation about how go-plugin came to be, watch this video by Mitchell:</p>
<p><a href="https://www.youtube.com/watch?v=SRvm3zQQc1Q">go-plugin explanation video</a>.</p>
<p>I must warn you though- it&rsquo;s an hour long. But worth the watch!</p>
<p>That&rsquo;s it. I hope this has helped to clear the confusion around how to use go-plugin.</p>
<p>Happy plugging!</p>
<p>Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Furnace with a new Plugin System</title>
      <link>https://skarlso.github.io/2018/09/17/furnace-plugin-update/</link>
      <pubDate>Mon, 17 Sep 2018 07:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/09/17/furnace-plugin-update/</guid>
      <description><![CDATA[<p>Hi.</p>
<p>A quick update, but a very important and interesting one hopefully. Furnace just got a massive boost to its plugin system.</p>
<p>I&rsquo;m using <a href="https://github.com/hashicorp/go-plugin">HashiCorp&rsquo;s Go-Plugins</a> system now to handle plugins. This means one of
two things that are interesting to the plugin author.</p>
<p>One, plugins can be written in any language which is supported by Furnace and supports GRPC. Currently this means that
plugins can be written in the following languages:</p>
<ul>
<li>
<p>Go</p>
</li>
<li>
<p>Python</p>
</li>
<li>
<p>Ruby</p>
</li>
</ul>
<p>Adding new plugins is easy and I&rsquo;m open for suggestions in which language to provide next if the need arrises.</p>
<p>To find out more, please read the README on Furnace about plugins located here: <a href="https://github.com/go-furnace/go-furnace/blob/master/README.md#plugins">Furnace Plugin System</a>.</p>
<p>I hope to see a bunch of nice plugins pop up here and there if please are interested in writing them. I&rsquo;m listing a couple of
possibilities like, notification after create, or resource cleanup or even preventing the stack from creating in the first place
with a pre-create check for permissions / resource availability / funds constraints.</p>
<p>Have fun writing plugins and making Furnace more powerful then ever.</p>
<p>I&rsquo;m planning on providing some basic plugins that could be used out of the box. Those will probably be in Go though.</p>
<p>Thanks,
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 4</title>
      <link>https://skarlso.github.io/2017/04/16/building-furnace-part-4/</link>
      <pubDate>Sun, 16 Apr 2017 09:23:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/04/16/building-furnace-part-4/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>Previously on this blog: <a href="https://skarlso.github.io/2017/03/16/building-furnace-part-1/">Part 1</a>. <a href="https://skarlso.github.io/2017/03/19/building-furnace-part-2/">Part 2</a>. <a href="https://skarlso.github.io/2017/03/22/building-furnace-part-3/">Part 3</a>.</p>
<p>In this part we are going to talk about Unit Testing Furnace and how to work some magic with AWS and Go.</p>
<h1 id="mock-stub-fake-dummy-canned-insert-name-here">Mock Stub Fake Dummy Canned <Insert Name Here></h1>
<p>Unit testing in Go usually follows the Dependency Injection model of dealing with Mocks and Stubs.</p>
<p>## DI</p>
<p>Dependency Inject in short is one object supplying the dependencies of another object. In a longer description, it&rsquo;s ideal to be used
for removing the lock on a third party library, like the AWS client. Imaging having code which solely depends on the AWS client. How
would you unit test that code without having to ACTUALLY connect to AWS? You couldn&rsquo;t. Every time you try to test the code it would run
the live code and it would try and connect to AWS and perform the operations it&rsquo;s design to do. The Ruby library with it&rsquo;s metaprogramming
allows you to set the client globally to stub responses, but, alas, this is not the world of Ruby.</p>
<p>Here is where DI comes to the rescue. If you have control over the AWS client on a very high level, and would pass it around as a function
parameter, or create that client in an <code>init()</code> function and have it globally defined; you would be able to implement your own client, and
have your code use that with stubbed responses which your tests need. For example, you would like a CreateApplication call to fail, or you
would like a DescribeStack which returns an aws.Error(&ldquo;StackAlreadyExists&rdquo;).</p>
<p>For this, however, you need the API of the AWS client. Which is provided by AWS.</p>
<h2 id="aws-client-api">AWS Client API</h2>
<p>In order for DI to work, the injected object needs to be of a certain type for us to inject our own. Luckily, AWS provides an Interface for
all of it&rsquo;s clients. Meaning, we can implement our own version for all of the clients, like S3, CloudFormation, CodeDeploy etc.</p>
<p>For each client you want to mock out, an <em>*iface</em> package should be present like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">  <span class="s">&#34;github.com/aws/aws-sdk-go/service/cloudformation/cloudformationiface&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>In this package you find and use the interface like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">fakeCloudFormationClient</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">cloudformationiface</span><span class="p">.</span><span class="nx">CloudFormationAPI</span>
	<span class="nx">err</span> <span class="kt">error</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>And with this, we have our own CloudFormation client. The real code uses the real clients as function parameters, like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Execute defines what this command does.
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Create</span><span class="p">)</span> <span class="nf">Execute</span><span class="p">(</span><span class="nx">opts</span> <span class="o">*</span><span class="nx">commander</span><span class="p">.</span><span class="nx">CommandHelper</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Creating cloud formation session.&#34;</span><span class="p">)</span>
	<span class="nx">sess</span> <span class="o">:=</span> <span class="nx">session</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">aws</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span><span class="nx">Region</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">REGION</span><span class="p">)})</span>
	<span class="nx">cfClient</span> <span class="o">:=</span> <span class="nx">cloudformation</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">sess</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">CFClient</span><span class="p">{</span><span class="nx">cfClient</span><span class="p">}</span>
	<span class="nf">createExecute</span><span class="p">(</span><span class="nx">opts</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">client</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>We can&rsquo;t test Execute itself, as it&rsquo;s using the real client here (or you could have a global from some library, thus allowing you to tests
even <code>Execute</code> here) but there is very little logic in this function for this very reason. All the logic is in small functions for which
the main starting point and our testing opportunity is, <code>createExecute</code>.</p>
<h2 id="stubbing-calls">Stubbing Calls</h2>
<p>Now, that we have our own client, and with the power of Go&rsquo;s interface embedding as seen above with CloudFormationAPI, we have to only stub
the functions which we are actually using, instead of every function of the given interface. This looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">	<span class="nx">cfClient</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">CFClient</span><span class="p">)</span>
	<span class="nx">cfClient</span><span class="p">.</span><span class="nx">Client</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">fakeCloudFormationClient</span><span class="p">{</span><span class="nx">err</span><span class="p">:</span> <span class="kc">nil</span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Where cfClient is a struct like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// CFClient abstraction for cloudFormation client.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">CFClient</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Client</span> <span class="nx">cloudformationiface</span><span class="p">.</span><span class="nx">CloudFormationAPI</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>And a stubbed call can than be written as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="p">(</span><span class="nx">fc</span> <span class="o">*</span><span class="nx">fakeCreateCFClient</span><span class="p">)</span> <span class="nf">WaitUntilStackCreateComplete</span><span class="p">(</span><span class="nx">input</span> <span class="o">*</span><span class="nx">cloudformation</span><span class="p">.</span><span class="nx">DescribeStacksInput</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="k">return</span> <span class="kc">nil</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This can range from a very trivial example, like the one above, to intricate ones as well, like this gem:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="p">(</span><span class="nx">fc</span> <span class="o">*</span><span class="nx">fakePushCFClient</span><span class="p">)</span> <span class="nf">ListStackResources</span><span class="p">(</span><span class="nx">input</span> <span class="o">*</span><span class="nx">cloudformation</span><span class="p">.</span><span class="nx">ListStackResourcesInput</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">cloudformation</span><span class="p">.</span><span class="nx">ListStackResourcesOutput</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="s">&#34;NoASG&#34;</span> <span class="o">==</span> <span class="o">*</span><span class="nx">input</span><span class="p">.</span><span class="nx">StackName</span> <span class="p">{</span>
		<span class="k">return</span> <span class="o">&amp;</span><span class="nx">cloudformation</span><span class="p">.</span><span class="nx">ListStackResourcesOutput</span><span class="p">{</span>
			<span class="nx">StackResourceSummaries</span><span class="p">:</span> <span class="p">[]</span><span class="o">*</span><span class="nx">cloudformation</span><span class="p">.</span><span class="nx">StackResourceSummary</span><span class="p">{</span>
				<span class="p">{</span>
					<span class="nx">ResourceType</span><span class="p">:</span>       <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;NoASG&#34;</span><span class="p">),</span>
					<span class="nx">PhysicalResourceId</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;arn::whatever&#34;</span><span class="p">),</span>
				<span class="p">},</span>
			<span class="p">},</span>
		<span class="p">},</span> <span class="nx">fc</span><span class="p">.</span><span class="nx">err</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">cloudformation</span><span class="p">.</span><span class="nx">ListStackResourcesOutput</span><span class="p">{</span>
		<span class="nx">StackResourceSummaries</span><span class="p">:</span> <span class="p">[]</span><span class="o">*</span><span class="nx">cloudformation</span><span class="p">.</span><span class="nx">StackResourceSummary</span><span class="p">{</span>
			<span class="p">{</span>
				<span class="nx">ResourceType</span><span class="p">:</span>       <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;AWS::AutoScaling::AutoScalingGroup&#34;</span><span class="p">),</span>
				<span class="nx">PhysicalResourceId</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;arn::whatever&#34;</span><span class="p">),</span>
			<span class="p">},</span>
		<span class="p">},</span>
	<span class="p">},</span> <span class="nx">fc</span><span class="p">.</span><span class="nx">err</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This ListStackResources stub lets us test two scenarios based on the stackname. If the test stackname is &lsquo;NoASG&rsquo; it will return a result
which equals to a result containing no AutoScaling Group. Otherwise, it will return the correct ResourceType for an ASG.</p>
<p>It is a common practice to line up several scenario based stubbed responses in order to test the robustness of your code.</p>
<p>Unfortunately, this also means that your tests will be a bit cluttered with stubs and mock structs and whatnots. For that, I&rsquo;m partially
using a package available struct file in which I&rsquo;m defining most of the mock structs at least. And from there on, the tests will only contain
specific stubs for that particular file. This can be further fine grained by having defaults and than only override in case you need something
else.</p>
<h1 id="testing-fatals">Testing fatals</h1>
<p>Now, the other point which is not really AWS related, but still comes to mind when dealing with Furnace, is testing error scenarios.</p>
<p>Because Furnace is a CLI application it uses Fatals to signal if something is wrong and it doesn&rsquo;t want to continue or recover because, frankly
it can&rsquo;t. If AWS throws an error, that&rsquo;s it. You can retry, but in 90% of the cases, it&rsquo;s usually something that you messed up.</p>
<p>So, how do we test for a fatal or an <code>os.Exit</code>? There are a number of points on that if you do a quick search. You may end up on this talk:
<a href="https://talks.golang.org/2014/testing.slide#23">GoTalk 2014 Testing Slide #23</a>. Which does an interesting thing. It calls the test binary in a
separate process and tests the exit code.</p>
<p>Others, and me as well, will say that you have to have your own logger implemented and use a different logger / os.Exit in your test environment.</p>
<p>Others others will tell you to not to have tests around os.Exit and fatal things, rather return an error and only the main should pop a world
ending event. I leave it up to you which you want to use. Either is fine.</p>
<p>In Furnace, I&rsquo;m using a global logger in my error handling util like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// HandleFatal handler fatal errors in Furnace.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">HandleFatal</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="nf">LogFatalf</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>And <code>LogFatalf</code> is an exported variable <code>var LogFatalf = log.Fatalf</code>. Than in a test, I just override this variable with a local anonymous
function:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">TestCreateExecuteEmptyStack</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">failed</span> <span class="o">:=</span> <span class="kc">false</span>
	<span class="nx">utils</span><span class="p">.</span><span class="nx">LogFatalf</span> <span class="p">=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">a</span> <span class="o">...</span><span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
		<span class="nx">failed</span> <span class="p">=</span> <span class="kc">true</span>
	<span class="p">}</span>
	<span class="nx">config</span><span class="p">.</span><span class="nx">WAITFREQUENCY</span> <span class="p">=</span> <span class="mi">0</span>
	<span class="nx">client</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">CFClient</span><span class="p">)</span>
	<span class="nx">stackname</span> <span class="o">:=</span> <span class="s">&#34;EmptyStack&#34;</span>
	<span class="nx">client</span><span class="p">.</span><span class="nx">Client</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">fakeCreateCFClient</span><span class="p">{</span><span class="nx">err</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">stackname</span><span class="p">:</span> <span class="nx">stackname</span><span class="p">}</span>
	<span class="nx">opts</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">commander</span><span class="p">.</span><span class="nx">CommandHelper</span><span class="p">{}</span>
	<span class="nf">createExecute</span><span class="p">(</span><span class="nx">opts</span><span class="p">,</span> <span class="nx">client</span><span class="p">)</span>
	<span class="k">if</span> <span class="p">!</span><span class="nx">failed</span> <span class="p">{</span>
		<span class="nx">t</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="s">&#34;expected outcome to fail during create&#34;</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>It can get even more granular by testing for the error message to make sure that it actually fails at the point we think we are
testing:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">TestCreateStackReturnsWithError</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">failed</span> <span class="o">:=</span> <span class="kc">false</span>
	<span class="nx">expectedMessage</span> <span class="o">:=</span> <span class="s">&#34;failed to create stack&#34;</span>
	<span class="kd">var</span> <span class="nx">message</span> <span class="kt">string</span>
	<span class="nx">utils</span><span class="p">.</span><span class="nx">LogFatalf</span> <span class="p">=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">a</span> <span class="o">...</span><span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
		<span class="nx">failed</span> <span class="p">=</span> <span class="kc">true</span>
		<span class="k">if</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].(</span><span class="kt">error</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
			<span class="nx">message</span> <span class="p">=</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">()</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="nx">config</span><span class="p">.</span><span class="nx">WAITFREQUENCY</span> <span class="p">=</span> <span class="mi">0</span>
	<span class="nx">client</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">CFClient</span><span class="p">)</span>
	<span class="nx">stackname</span> <span class="o">:=</span> <span class="s">&#34;NotEmptyStack&#34;</span>
	<span class="nx">client</span><span class="p">.</span><span class="nx">Client</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">fakeCreateCFClient</span><span class="p">{</span><span class="nx">err</span><span class="p">:</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">expectedMessage</span><span class="p">),</span> <span class="nx">stackname</span><span class="p">:</span> <span class="nx">stackname</span><span class="p">}</span>
	<span class="nx">config</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;{}&#34;</span><span class="p">)</span>
	<span class="nf">create</span><span class="p">(</span><span class="nx">stackname</span><span class="p">,</span> <span class="nx">config</span><span class="p">,</span> <span class="nx">client</span><span class="p">)</span>
	<span class="k">if</span> <span class="p">!</span><span class="nx">failed</span> <span class="p">{</span>
		<span class="nx">t</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="s">&#34;expected outcome to fail&#34;</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">if</span> <span class="nx">message</span> <span class="o">!=</span> <span class="nx">expectedMessage</span> <span class="p">{</span>
		<span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;message did not equal expected message of &#39;%s&#39;, was:%s&#34;</span><span class="p">,</span> <span class="nx">expectedMessage</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="conclusion">Conclusion</h1>
<p>This is it. That&rsquo;s all it took to write Furnace. I hope you enjoyed reading it as much as I enjoyed writing all these thoughts down.</p>
<p>I hope somebody might learn from my journey and also improve upon it.</p>
<p>Any comments are much appreciated and welcomed. Also, PRs and Issues can be submitted on the GitHub page of <a href="https://github.com/Skarlso/go-furnace">Furnace</a>.</p>
<p>Thank you for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 3</title>
      <link>https://skarlso.github.io/2017/03/22/building-furnace-part-3/</link>
      <pubDate>Wed, 22 Mar 2017 12:03:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/03/22/building-furnace-part-3/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>Previously on this blog: <a href="http://skarlso.github.io/2017/03/16/building-furnace-part-1/">Part 1</a>. <a href="https://skarlso.github.io/2017/03/19/building-furnace-part-2/">Part 2</a>. <a href="https://skarlso.github.io/2017/04/16/building-furnace-part-4/">Part 4</a>.</p>
<p>In this part, I&rsquo;m going to talk about the experimental plugin system of Furnace.</p>
<h1 id="go-experimental-plugins">Go Experimental Plugins</h1>
<p>Since Go 1.8 was released, an exciting and new feature was introduced called a Plug-in system. This system works with dynamic
libraries built with a special switch to <code>go build</code>. These libraries, <code>.so</code> or <code>.dylib</code> (later), are than loaded and once that
succeeds, specific functions can be called from them (symbol resolution).</p>
<p>We will see how this works. For package information, visit the plugin packages Go doc page
<a href="https://tip.golang.org/pkg/plugin/">here</a>.</p>
<h1 id="furnace-plugins">Furnace Plugins</h1>
<p>So, what does furnace use plugins for? Furnace uses plugins to execute arbitery code in, currently, four given locations / events.</p>
<p>These are: <code>pre_create, post_create, pre_delete, post_delete</code>. These events are called, as their name suggests, before and after
the creation and deletion of the CloudFormation stack. It allows the user to execute some code without having to rebuild the whole
project. It does that by defining a single entry point for the custom code called <code>RunPlugin</code>. Any number of functions can be
implemented, but the plugin MUST provide this single, exported function. Otherwise it will fail and ignore that plugin.</p>
<h2 id="using-plugins">Using Plugins</h2>
<p>It&rsquo;s really easy to implement, and use these plugins. I&rsquo;m not going into the detail of how to load them, because that is done by
Furnace, but only how to write and use them.</p>
<p>To use a plugin, create a go file called: <code>0001_mailer.go</code>. The <code>0001</code> before it will define WHEN it&rsquo;s executed.
Having multiple plugins is completely okay. Execution of order however, depends on the names of the files.</p>
<p>Now, in 0001_mailer.post_create we would have something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;log&#34;</span>

<span class="c1">// RunPlugin runs the plugin.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">RunPlugin</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;My Awesome Pre Create Plugin.&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Next step is the build this file to be a plugin library. Note: Right now, this only works on Linux!</p>
<p>To build this file run the following:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">go build -buildmode=plugin -o 0001_mailer.pre_create 0001_mailer.go
</code></pre></td></tr></table>
</div>
</div><p>The important part here is the extension of the file specified with <code>-o</code>. It&rsquo;s important because that&rsquo;s how Furnace identifies
what plugins it has to run.</p>
<p>Finally, copy this file to <code>~/.config/go-furnace/plugins</code> and you are all set.</p>
<h2 id="slack-notification-plugin">Slack notification Plugin</h2>
<p>To demonstrate how a plugin could be used is if you need some kind of notification once a Stack is completed. For example, you
might want to send a message to a Slack room. To do this, your plugin would look something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;os&#34;</span>

	<span class="s">&#34;github.com/nlopes/slack&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">RunPlugin</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">stackname</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;FURNACE_STACKNAME&#34;</span><span class="p">)</span>
	<span class="nx">api</span> <span class="o">:=</span> <span class="nx">slack</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;YOUR_TOKEN_HERE&#34;</span><span class="p">)</span>
	<span class="nx">params</span> <span class="o">:=</span> <span class="nx">slack</span><span class="p">.</span><span class="nx">PostMessageParameters</span><span class="p">{}</span>
	<span class="nx">channelID</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">api</span><span class="p">.</span><span class="nf">PostMessage</span><span class="p">(</span><span class="s">&#34;#general&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;Stack with name &#39;%s&#39; is Done.&#34;</span><span class="p">,</span> <span class="nx">stackname</span><span class="p">),</span> <span class="nx">params</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%s\n&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
		<span class="k">return</span>
	<span class="p">}</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Message successfully sent to channel %s at %s&#34;</span><span class="p">,</span> <span class="nx">channelID</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Currently, Furnace has no ability to share information of the stack with an outside plugin. Thus &lsquo;Done&rsquo; could be anything from
Rollback to Failed to CreateComplete.</p>
<h1 id="closing-words">Closing Words</h1>
<p>That&rsquo;s it for plugins. Thanks very much for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 2</title>
      <link>https://skarlso.github.io/2017/03/19/building-furnace-part-2/</link>
      <pubDate>Sun, 19 Mar 2017 12:03:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/03/19/building-furnace-part-2/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>Previously on this blog: <a href="https://skarlso.github.io/2017/03/16/building-furnace-part-1/">Part 1</a>, <a href="https://skarlso.github.io/2017/03/22/building-furnace-part-3/">Part 3</a>, <a href="https://skarlso.github.io/2017/04/16/building-furnace-part-4/">Part 4</a></p>
<p>In this part, I&rsquo;m going to talk about the AWS Go SDK and begin do dissect the intricacies of Furnace.</p>
<h1 id="aws-sdk">AWS SDK</h1>
<p>Fortunately, the Go SDK for AWS is quiet verbose and littered with examples of all sorts. But that doesn&rsquo;t make it less complex
and less cryptic at times. I&rsquo;m here to lift some of the early confusions, in hopes that I can help someone to avoid wasting time.</p>
<h2 id="getting-started-and-developers-guide">Getting Started and Developers Guide</h2>
<p>As always, and common from AWS, the documentation is top notch. There is a 141 pages long developer&rsquo;s guide on the SDK containing
a getting started section and an API reference. Go check it out. I&rsquo;ll wait. <a href="http://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/aws-sdk-go-dg.pdf">AWS Go SDK DG PDF</a>. I will only talk about some gotchas and things I encountered, not the basics of the SDK.</p>
<h2 id="awsstring-and-other-types">aws.String and other types</h2>
<p>Something which is immediately visible once we take a look at the API is that everything is a pointer. Now, there are a
tremendous amount of discussions about this, but I&rsquo;m with Amazon. There are various reasons for it, but to list the most prominent
ones:
- Type completion and compile time type safety.
- Values for AWS API calls have valid zero values, in addition to being optional, i.e. not being provided at all.
- Other option, like, empty interfaces with maps, or using zero values, or struct wrappers around every type, made life much
harder rather than easier or not possible at all.
- The AWS API is volatile. You never know when something gets to be optional, or required. Pointers made that decision easy.</p>
<p>There are good number of other discussions around this topic, for example: <a href="https://github.com/aws/aws-sdk-go/issues/363">AWS Go GitHub #363</a>.</p>
<p>In order to use primitives, AWS has helper functions like <code>aws.String</code>. Because &amp;&ldquo;asdf&rdquo; is not allowed, you would have to create a
variable and use its address in situations where a string pointer is needed, for example, name of the stack. These primitive helpers will
make in-lining possible. We&rsquo;ll see later that they are used to a great extent. Pointers, however, make life a bit difficult when
constructing Input structs and make for poor aesthetics.</p>
<p>This is something I&rsquo;m returning in a test for stubbing a client call:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">		<span class="k">return</span> <span class="o">&amp;</span><span class="nx">cloudformation</span><span class="p">.</span><span class="nx">ListStackResourcesOutput</span><span class="p">{</span>
			<span class="nx">StackResourceSummaries</span><span class="p">:</span> <span class="p">[]</span><span class="o">*</span><span class="nx">cloudformation</span><span class="p">.</span><span class="nx">StackResourceSummary</span><span class="p">{</span>
				<span class="p">{</span>
					<span class="nx">ResourceType</span><span class="p">:</span>       <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;NoASG&#34;</span><span class="p">),</span>
					<span class="nx">PhysicalResourceId</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;arn::whatever&#34;</span><span class="p">),</span>
				<span class="p">},</span>
			<span class="p">},</span>
		<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This doesn&rsquo;t look so appealing, but one gets used to it quickly.</p>
<h2 id="error-handling">Error handling</h2>
<p>Errors also have their own types. An AWS error looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
    <span class="k">if</span> <span class="nx">awsErr</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">err</span><span class="p">.(</span><span class="nx">awserr</span><span class="p">.</span><span class="nx">Error</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>First, we check if error is nil, than we type check if the error is an AWS error or something different. In the wild, this will
look something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">awsErr</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">err</span><span class="p">.(</span><span class="nx">awserr</span><span class="p">.</span><span class="nx">Error</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
			<span class="k">if</span> <span class="nx">awsErr</span><span class="p">.</span><span class="nf">Code</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">codedeploy</span><span class="p">.</span><span class="nx">ErrCodeDeploymentGroupAlreadyExistsException</span> <span class="p">{</span>
				<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">awsErr</span><span class="p">.</span><span class="nf">Code</span><span class="p">())</span>
				<span class="k">return</span> <span class="nx">err</span>
			<span class="p">}</span>
			<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;DeploymentGroup already exists. Nothing to do.&#34;</span><span class="p">)</span>
			<span class="k">return</span> <span class="kc">nil</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="nx">err</span>
	<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>If it&rsquo;s an AWS error, we can check further for the error code that it returns in order to identify what to handle, or what to throw
on to the caller to a potential fatal. Here, I&rsquo;m ignoring the AlreadyExistsException because, if it does, we just go on to a next
action.</p>
<h2 id="examples">Examples</h2>
<p>Luckily the API doc is very mature. In most of the cases, they provide an example to an API call. These examples, however, from
time to time provide more confusion than clarity. Take CloudFormation. For me, when I first glanced upon the
description of the API it wasn&rsquo;t immediately clear that the <code>TemplateBody</code> was supposed to be the whole template, and that
the rest of the fields were almost all optional settings. Or provided overrides in special cases.</p>
<p>And since the template is not an ordinary JAML or JSON file, I was looking for something that parses it into that the Struct I
was going to use. After some time, and digging, I realized that I didn&rsquo;t need that, and that I just need to read in the template,
define some extra parameters, and give the TemplateBody the whole of the template. The parameters defined by the CloudFormation
template where extracted for me by <code>ValidateTemplate</code> API call which returned all of them in a convenient
<code>[]*cloudformation.Parameter</code> slice. These things are not described in the document or visible from the examples. I mainly found
them through playing with the API and focused experimentation.</p>
<h2 id="waiters">Waiters</h2>
<p>From other SDK implementations, we got used to Waiters. These handy methods wait for a service to become available or for certain
situations to take in effect, like a Stage being <code>CREATE_COMPLETE</code>. The Go waiters, however, don&rsquo;t allow for callback to be fired,
or for running blocks, like the ruby SDK does. For this, I wrote a handy little waiter for myself, which outputs a spinner to see
that we are currently waiting for something and not frozen in time. This waiter looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// WaitForFunctionWithStatusOutput waits for a function to complete its action.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">WaitForFunctionWithStatusOutput</span><span class="p">(</span><span class="nx">state</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">freq</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">f</span> <span class="kd">func</span><span class="p">())</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
	<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
	<span class="nx">done</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">)</span>
	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
		<span class="nf">f</span><span class="p">()</span>
		<span class="nx">done</span> <span class="o">&lt;-</span> <span class="kc">true</span>
	<span class="p">}()</span>
	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">counter</span> <span class="o">:=</span> <span class="mi">0</span>
		<span class="k">for</span> <span class="p">{</span>
			<span class="nx">counter</span> <span class="p">=</span> <span class="p">(</span><span class="nx">counter</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="nx">Spinners</span><span class="p">[</span><span class="nx">config</span><span class="p">.</span><span class="nx">SPINNER</span><span class="p">])</span>
			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;\r[%s] Waiting for state: %s&#34;</span><span class="p">,</span> <span class="nf">yellow</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">Spinners</span><span class="p">[</span><span class="nx">config</span><span class="p">.</span><span class="nx">SPINNER</span><span class="p">][</span><span class="nx">counter</span><span class="p">])),</span> <span class="nf">red</span><span class="p">(</span><span class="nx">state</span><span class="p">))</span>
			<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Duration</span><span class="p">(</span><span class="nx">freq</span><span class="p">)</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
			<span class="k">select</span> <span class="p">{</span>
			<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">done</span><span class="p">:</span>
				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">()</span>
				<span class="k">break</span>
			<span class="k">default</span><span class="p">:</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}()</span>

	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>And I&rsquo;m calling it with the following method:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">	<span class="nx">utils</span><span class="p">.</span><span class="nf">WaitForFunctionWithStatusOutput</span><span class="p">(</span><span class="s">&#34;DELETE_COMPLETE&#34;</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">WAITFREQUENCY</span><span class="p">,</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">cfClient</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">WaitUntilStackDeleteComplete</span><span class="p">(</span><span class="nx">describeStackInput</span><span class="p">)</span>
	<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>This would output these lines to the console:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">[</span><span class="se">\]</span> Waiting <span class="k">for</span> state: DELETE_COMPLETE
</code></pre></td></tr></table>
</div>
</div><p>The spinner can be configured to be one of the following types:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">var</span> <span class="nx">Spinners</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">`←↖↑↗→↘↓↙`</span><span class="p">,</span>
	<span class="s">`▁▃▄▅▆▇█▇▆▅▄▃`</span><span class="p">,</span>
	<span class="s">`┤┘┴└├┌┬┐`</span><span class="p">,</span>
	<span class="s">`◰◳◲◱`</span><span class="p">,</span>
	<span class="s">`◴◷◶◵`</span><span class="p">,</span>
	<span class="s">`◐◓◑◒`</span><span class="p">,</span>
	<span class="s">`⣾⣽⣻⢿⡿⣟⣯⣷`</span><span class="p">,</span>
	<span class="s">`|/-\`</span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Handy.</p>
<p>And with that, let&rsquo;s dive into the basics of Furnace.</p>
<h1 id="furnace">Furnace</h1>
<h2 id="directory-structure-and-packages">Directory Structure and Packages</h2>
<p>Furnace is divided into three main packages.</p>
<h3 id="commands">commands</h3>
<p>Commands package is where the gist of Furnace lies. These commands represent the commands which are used through the CLI. Each
file has the implementation for one command. The structure is devised by this library: <a href="https://github.com/Yitsushi/go-commander">Yitsushi&rsquo;s Command Library</a>.
As of the writing of this post, the following commands are available:</p>
<ul>
<li>create - Creates a stack using the CloudFormation template file under ~/.config/go-furnace</li>
<li>delete - Deletes the created Stack. Doesn&rsquo;t do anything if the stack doesn&rsquo;t exist</li>
<li>push - Pushes an application to a stack</li>
<li>status - Displays information about the stack</li>
<li>delete-application - Deletes the CodeDeploy application and deployment group created by <code>push</code></li>
</ul>
<p>These commands represent the heart of furnace. I would like to keep these to a minimum, but I do plan on adding more, like
<code>update</code> and <code>rollout</code>. Further details and help messages on these commands can be obtained by running: <code>./furnace help</code> or
<code>./furnace help create</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">❯ ./furnace <span class="nb">help</span> push
Usage: furnace push appName <span class="o">[</span>-s3<span class="o">]</span>

Push a version of the application to a stack

Examples:
  furnace push
  furnace push appName
  furnace push appName -s3
  furnace push -s3
</code></pre></td></tr></table>
</div>
</div><h3 id="config">config</h3>
<p>Contains the configuration loader and some project wide defaults which are as follows:</p>
<ul>
<li>Events for the plugin system - <code>pre-create</code>, <code>post-create</code>, <code>pre-delete</code>, <code>post-delete</code>.</li>
<li>CodeDeploy role name - <code>CodeDeployServiceRole</code>. This is used if none is provided to locate the CodeDeploy IAM role.</li>
<li>Wait frequency - Is the setting which controls how long the waiter should sleep in between status updates. Default is <code>1s</code>.</li>
<li>Spinner - Is just the number of the spinner to use.</li>
<li>Plugin registry - Is a map of functions to run for the above events.</li>
</ul>
<p>Further more, config loads the CloudFormation template and checks if some necessary settings are present in the environment, exp:
the configuration folder under <code>~/.config/go-furnace</code>.</p>
<h3 id="utils">utils</h3>
<p>These are some helper functions which are used throughout the project. To list them:</p>
<ul>
<li>error_handler - Is a simple error handler. I&rsquo;m thinking of refactoring this one to some saner version.</li>
<li>spinner - Sets up which spinner to use in the waiter function.</li>
<li>waiter - Contains the verbose waiter introduced above under <a href="##Waiters">Waiters</a>.</li>
</ul>
<h2 id="configuration-and-environment-variables">Configuration and Environment variables</h2>
<p>Furnace is a Go application, thus it doesn&rsquo;t have the luxury of Ruby or Python where the configuration files are usually bundled
with the app. But, it does have a standard for it. Usually, configurations reside in either of these two locations. Environment
Properties or|and configuration files under a fixed location ( i.e. HOME/.config/app-name ). Furnace employs both.</p>
<p>Settings like, region, stack name, enable plugin system, are under environment properties ( though this can change ), while the
CloudFormation template lives under <code>~/.config/go-furnace/</code>. Lastly it assumes some things, like the Deployment IAM role just
exists under the used AWS account. All these are loaded and handled by the config package described above.</p>
<h2 id="usage">Usage</h2>
<p>A typical scenario for Furnace would be the following:</p>
<ul>
<li>Setup your CloudFormation template or use the one provided. The one provided sets up a highly available and self healing setting
using Auto-Scaling and Load-Balancing with a single application instance. Edit this template to your liking than copy it to
<code>~/.config/go-furnace</code>.</li>
<li>Create the configured stack with <code>./furnace create</code>.</li>
<li>Create will ask for the parameters defined in the template. If defaults are setup, simply hitting enter will use these defaults.
Take note, that the provided template sets up SSH access via a provided key. If that key is not present in CF, you won&rsquo;t be able
to SSH into the created instance.</li>
<li>Once the stack is completed, the application is ready to be pushed. To do this, run: <code>./furnace push</code>. This will locate the
appropriate version of the app from S3 or GitHub and push that version to the instances in the Auto-Scaling group. To all of
them.</li>
</ul>
<h2 id="general-practices-applied-to-the-project">General Practices Applied to the Project</h2>
<h3 id="commands-1">Commands</h3>
<p>For each command the main entry point is the <code>execute</code> function. These functions are usually calling out the small chunks of
distributed methods. Logic was kept to a bare minimum ( probably could be simplified even further ) in the execute functions
mostly for testability and the likes. We will see that in a followup post.</p>
<h3 id="errors">Errors</h3>
<p>Errors are handled immediately and usually through a fatal. If any error occurs than the application is halted. In followup
versions this might become more granular. I.e. don&rsquo;t immediately stop the world, maybe try to recover, or create a Poller or
Re-Tryer, which tries a call again for a configured amount of times.</p>
<h3 id="output-colors">Output colors</h3>
<p>Not that important, but still&hellip; Aesthetics. Displaying data to the console in a nice way gives it some extra flare.</p>
<h3 id="makefile">Makefile</h3>
<p>This project works with a Makefile for various reasons. Later on, once the project might become more complex, a Makefile makes it
really easy to handle different ways of packaging the application. Currently, for example, it provides a <code>linux</code> target which will
make Go build the project for Linux architecture on any other Architecture i.e. cross-compiling.</p>
<p>It also provides an easy way to run unit tests with <code>make test</code> and installing with <code>make &amp;&amp; make install</code>.</p>
<h1 id="closing-words">Closing Words</h1>
<p>That is all for Part 2. Join me in Part 3 where I will talk about the experimental Plugin system that Furnace employs.</p>
<p>Thank you for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 1</title>
      <link>https://skarlso.github.io/2017/03/16/building-furnace-part-1/</link>
      <pubDate>Thu, 16 Mar 2017 21:49:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/03/16/building-furnace-part-1/</guid>
      <description><![CDATA[<h1 id="other-posts">Other posts:</h1>
<p><a href="https://skarlso.github.io/2017/03/19/building-furnace-part-2/">Part 2</a>, <a href="https://skarlso.github.io/2017/03/22/building-furnace-part-3/">Part 3</a>, <a href="https://skarlso.github.io/2017/04/16/building-furnace-part-4/">Part 4</a>.</p>
<h1 id="building-furnace-part-1">Building Furnace: Part 1</h1>
<h1 id="intro">Intro</h1>
<p>Hi folks.</p>
<p>This is the first part of a 4 part series which talks about the process of building a middlish sized project in Go,
with AWS. Including Unit testing and a experimental plugin feature.</p>
<p>The first part will talk about the AWS services used in brief and will contain a basic description for those who are not familiar
with them. The second part will talk about the Go SDK and the project structure itself, how it can be used, improved, and how it can
help in everyday life. The third part will talk about the experimental plugin system, and finally, we will tackle unit testing AWS
in Go.</p>
<p>Let&rsquo;s begin, shall we?</p>
<h1 id="aws">AWS</h1>
<h2 id="cloudformation">CloudFormation</h2>
<p>If you haven&rsquo;t yet read about, or know off, AWS' CloudFormation service, you can either go ahead and read the <a href="https://aws.amazon.com/cloudformation/">Documentation</a>
or read on for a very quick summary. If you are familiar with CF, you should skip ahead to <a href="##CodeDeploy">CodeDeploy</a> section.</p>
<p>CF is a service which bundles together other AWS services (for example: EC2, S3, ELB, ASG, RDS) into one, easily manageable stack.
After a stack has been created, all the resources can be handled as one, located, tagged and used via CF specific console commands.
It&rsquo;s also possible to define any number of parameters, so a stack can actually be very versatile. A parameter can be anything, from
SSH IP restriction to KeyPair names and list of tags to create or in what region the stack will be in.</p>
<p>To describe how these parts fit together, one must use a CloudFormation Template file which is either in JSON or in
YAML format. A simple example looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">    </span><span class="nt">Parameters</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">KeyName</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">Description</span><span class="p">:</span><span class="w"> </span><span class="l">The EC2 Key Pair to allow SSH access to the instance</span><span class="w">
</span><span class="w">        </span><span class="nt">Type</span><span class="p">:</span><span class="w"> </span><span class="l">AWS::EC2::KeyPair::KeyName</span><span class="w">
</span><span class="w">    </span><span class="nt">Resources</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">Ec2Instance</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">Type</span><span class="p">:</span><span class="w"> </span><span class="l">AWS::EC2::Instance</span><span class="w">
</span><span class="w">        </span><span class="nt">Properties</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">SecurityGroups</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">Ref</span><span class="p">:</span><span class="w"> </span><span class="l">InstanceSecurityGroup</span><span class="w">
</span><span class="w">          </span>- <span class="l">MyExistingSecurityGroup</span><span class="w">
</span><span class="w">          </span><span class="nt">KeyName</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">Ref</span><span class="p">:</span><span class="w"> </span><span class="l">KeyName</span><span class="w">
</span><span class="w">          </span><span class="nt">ImageId</span><span class="p">:</span><span class="w"> </span><span class="l">ami-7a11e213</span><span class="w">
</span><span class="w">      </span><span class="nt">InstanceSecurityGroup</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">Type</span><span class="p">:</span><span class="w"> </span><span class="l">AWS::EC2::SecurityGroup</span><span class="w">
</span><span class="w">        </span><span class="nt">Properties</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">GroupDescription</span><span class="p">:</span><span class="w"> </span><span class="l">Enable SSH access via port 22</span><span class="w">
</span><span class="w">          </span><span class="nt">SecurityGroupIngress</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">IpProtocol</span><span class="p">:</span><span class="w"> </span><span class="l">tcp</span><span class="w">
</span><span class="w">            </span><span class="nt">FromPort</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;22&#39;</span><span class="w">
</span><span class="w">            </span><span class="nt">ToPort</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;22&#39;</span><span class="w">
</span><span class="w">            </span><span class="nt">CidrIp</span><span class="p">:</span><span class="w"> </span><span class="m">0.0.0.0</span><span class="l">/0</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>There are a myriad of these template samples <a href="https://aws.amazon.com/cloudformation/aws-cloudformation-templates/">here</a>.</p>
<p>I&rsquo;m not going to explain this in too much detail. Parameters define the parameters, and resources define all the AWS services which
we would like to configure. Here we can see, that we are creating an EC2 instance with a custom Security Group plus and already
existing security group. ImageId is the AMI which will be used for the EC2 instance. The InstanceSecurityGroup is only defining
some SSH access to the instance.</p>
<p>That is pretty much it. This can become bloated relatively quickly once, VPCs, ELBs, and ASGs come into play. And CloudFormation
templates can also contain simple logical switches, like, conditions, ref for variables, maps and other shenanigans.</p>
<p>For example consider this part in the above example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">      </span><span class="nt">KeyName</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">Ref</span><span class="p">:</span><span class="w"> </span><span class="l">KeyName</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Here, we use the <code>KeyName</code> parameter as a Reference Value which will be interpolated to the real value, or the default one, as the
template gets processed.</p>
<h2 id="codedeploy">CodeDeploy</h2>
<p>If you haven&rsquo;t heard about CodeDeploy yet, please browse the relevant <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/welcome.html">Documentation</a>
or follow along for a &ldquo;quick&rdquo; description.</p>
<p>CodeDeploy just does what the name says. It deploys code. Any kind of code, as long as the deployment process is described in a
file called <code>appspec.yml</code>. It can be easy as coping a file to a specific location or incredibly complex with builds of various
kinds.</p>
<p>For a simple example look at this configuration:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">0.0</span><span class="w">
</span><span class="w">    </span><span class="nt">os</span><span class="p">:</span><span class="w"> </span><span class="l">linux</span><span class="w">
</span><span class="w">    </span><span class="nt">files</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">source</span><span class="p">:</span><span class="w"> </span><span class="l">/index.html</span><span class="w">
</span><span class="w">        </span><span class="nt">destination</span><span class="p">:</span><span class="w"> </span><span class="l">/var/www/html/</span><span class="w">
</span><span class="w">      </span>- <span class="nt">source</span><span class="p">:</span><span class="w"> </span><span class="l">/healthy.html</span><span class="w">
</span><span class="w">        </span><span class="nt">destination</span><span class="p">:</span><span class="w"> </span><span class="l">/var/www/html/</span><span class="w">
</span><span class="w">    </span><span class="nt">hooks</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">BeforeInstall</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">location</span><span class="p">:</span><span class="w"> </span><span class="l">scripts/install_dependencies</span><span class="w">
</span><span class="w">          </span><span class="nt">timeout</span><span class="p">:</span><span class="w"> </span><span class="m">300</span><span class="w">
</span><span class="w">          </span><span class="nt">runas</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span><span class="w">        </span>- <span class="nt">location</span><span class="p">:</span><span class="w"> </span><span class="l">scripts/clean_up</span><span class="w">
</span><span class="w">          </span><span class="nt">timeout</span><span class="p">:</span><span class="w"> </span><span class="m">300</span><span class="w">
</span><span class="w">          </span><span class="nt">runas</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span><span class="w">        </span>- <span class="nt">location</span><span class="p">:</span><span class="w"> </span><span class="l">scripts/start_server</span><span class="w">
</span><span class="w">          </span><span class="nt">timeout</span><span class="p">:</span><span class="w"> </span><span class="m">300</span><span class="w">
</span><span class="w">          </span><span class="nt">runas</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span><span class="w">      </span><span class="nt">ApplicationStop</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">location</span><span class="p">:</span><span class="w"> </span><span class="l">scripts/stop_server</span><span class="w">
</span><span class="w">          </span><span class="nt">timeout</span><span class="p">:</span><span class="w"> </span><span class="m">300</span><span class="w">
</span><span class="w">          </span><span class="nt">runas</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>CodeDeploy applications have hooks and life-cycle events which can be used to control the deployment process of an like, starting
the WebServer; making sure files are in the right location; copying files, running configuration management software like puppet,
ansible or chef; etc, etc.</p>
<p>What can be done in an <code>appspec.yml</code> file is described here: <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/app-spec-ref.html">Appspec Reference Documentation</a>.</p>
<p>Deployment happens in one of two ways:</p>
<h3 id="github">GitHub</h3>
<p>If the preferred way to deploy the application is from GitHub a commit hash must be used to identify which &ldquo;version&rdquo; of the
application is to be deployed. For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">    <span class="nx">rev</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">codedeploy</span><span class="p">.</span><span class="nx">RevisionLocation</span><span class="p">{</span>
        <span class="nx">GitHubLocation</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">codedeploy</span><span class="p">.</span><span class="nx">GitHubLocation</span><span class="p">{</span>
            <span class="nx">CommitId</span><span class="p">:</span>   <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;kajdf94j0f9k309klksjdfkj&#34;</span><span class="p">),</span>
            <span class="nx">Repository</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;Skarlso/furnace-codedeploy-app&#34;</span><span class="p">),</span>
        <span class="p">},</span>
        <span class="nx">RevisionType</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;GitHub&#34;</span><span class="p">),</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Commit Id is the hash of the latest release and repository is the full account/repository pointing to the application.</p>
<h3 id="s3">S3</h3>
<p>The second way is to use an S3 bucket. The bucket will contain an archived version of the application with a given extension. I&rsquo;m
saying given extension, because it has to be specified like this (and can be either &lsquo;zip&rsquo;, or &lsquo;tar&rsquo; or &lsquo;tgz&rsquo;):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">    <span class="nx">rev</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">codedeploy</span><span class="p">.</span><span class="nx">RevisionLocation</span><span class="p">{</span>
        <span class="nx">S3Location</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">codedeploy</span><span class="p">.</span><span class="nx">S3Location</span><span class="p">{</span>
            <span class="nx">Bucket</span><span class="p">:</span>     <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;my_codedeploy_bucket&#34;</span><span class="p">),</span>
            <span class="nx">BundleType</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;zip&#34;</span><span class="p">),</span>
            <span class="nx">Key</span><span class="p">:</span>        <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;my_awesome_app&#34;</span><span class="p">),</span>
            <span class="nx">Version</span><span class="p">:</span>    <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;VersionId&#34;</span><span class="p">),</span>
        <span class="p">},</span>
        <span class="nx">RevisionType</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;S3&#34;</span><span class="p">),</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Here, we specify the bucket name, the extension, the name of the file and an optional version id, which can be ignored.</p>
<h3 id="deploying">Deploying</h3>
<p>So how does code deploy get either of the applications to our EC2 instances? It uses an agent which is running on all of the
instances that we create. In order to do this, the agent needs to be present on our instance. For linux this can be achieved with
the following UserData (UserData in CF is the equivalent of a bootsrap script):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">    <span class="s2">&#34;UserData&#34;</span> : <span class="o">{</span>
        <span class="s2">&#34;Fn::Base64&#34;</span> : <span class="o">{</span> <span class="s2">&#34;Fn::Join&#34;</span> : <span class="o">[</span> <span class="s2">&#34;\n&#34;</span>, <span class="o">[</span>
            <span class="s2">&#34;#!/bin/bash -v&#34;</span>,
            <span class="s2">&#34;sudo yum -y update&#34;</span>,
            <span class="s2">&#34;sudo yum -y install ruby wget&#34;</span>,
            <span class="s2">&#34;cd /home/ec2-user/&#34;</span>,
            <span class="s2">&#34;wget https://aws-codedeploy-eu-central-1.s3.amazonaws.com/latest/install&#34;</span>,
            <span class="s2">&#34;chmod +x ./install&#34;</span>,
            <span class="s2">&#34;sudo ./install auto&#34;</span>,
            <span class="s2">&#34;sudo service codedeploy-agent start&#34;</span>,
        <span class="o">]</span> <span class="o">]</span> <span class="o">}</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>A simple user data configuration in the CloudFormation template will make sure that every instance that we create will have the
CodeDeploy agent running and waiting for instructions. This agent is self updating. Which can cause some trouble if AWS releases a
broken agent. However unlikely, it can happen. Never the less, once installed, it&rsquo;s no longer a concern to be bothered with.</p>
<p>It communications on HTTPS port 443.</p>
<p>CodeDeploy identifies instances which need to be updated according to our preferences, by tagging the EC2 and Auto Scaling groups.
Tagging happens in the CloudFormation template through the AutoScalingGroup settings like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json">    <span class="s2">&#34;Tags&#34;</span> <span class="err">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="nt">&#34;Key&#34;</span> <span class="p">:</span> <span class="s2">&#34;fu_stage&#34;</span><span class="p">,</span>
            <span class="nt">&#34;Value&#34;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&#34;Ref&#34;</span><span class="p">:</span> <span class="s2">&#34;AWS::StackName&#34;</span> <span class="p">},</span>
            <span class="nt">&#34;PropagateAtLaunch&#34;</span> <span class="p">:</span> <span class="kc">true</span>
        <span class="p">}</span>
    <span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>This will give the EC2 instance a tag called <code>fu_stage</code> with value equaling to the name of the stack. Once this is done, CodeDeploy
looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">    <span class="nx">params</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">codedeploy</span><span class="p">.</span><span class="nx">CreateDeploymentInput</span><span class="p">{</span>
        <span class="nx">ApplicationName</span><span class="p">:</span>               <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">appName</span><span class="p">),</span>
        <span class="nx">IgnoreApplicationStopFailures</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">Bool</span><span class="p">(</span><span class="kc">true</span><span class="p">),</span>
        <span class="nx">DeploymentGroupName</span><span class="p">:</span>           <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">appName</span> <span class="o">+</span> <span class="s">&#34;DeploymentGroup&#34;</span><span class="p">),</span>
        <span class="nx">Revision</span><span class="p">:</span>                      <span class="nf">revisionLocation</span><span class="p">(),</span>
        <span class="nx">TargetInstances</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">codedeploy</span><span class="p">.</span><span class="nx">TargetInstances</span><span class="p">{</span>
            <span class="nx">AutoScalingGroups</span><span class="p">:</span> <span class="p">[]</span><span class="o">*</span><span class="kt">string</span><span class="p">{</span>
                <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;AutoScalingGroupPhysicalID&#34;</span><span class="p">),</span>
            <span class="p">},</span>
            <span class="nx">TagFilters</span><span class="p">:</span> <span class="p">[]</span><span class="o">*</span><span class="nx">codedeploy</span><span class="p">.</span><span class="nx">EC2TagFilter</span><span class="p">{</span>
                <span class="p">{</span>
                    <span class="nx">Key</span><span class="p">:</span>   <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;fu_stage&#34;</span><span class="p">),</span>
                    <span class="nx">Type</span><span class="p">:</span>  <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;KEY_AND_VALUE&#34;</span><span class="p">),</span>
                    <span class="nx">Value</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">STACKNAME</span><span class="p">),</span>
                <span class="p">},</span>
            <span class="p">},</span>
        <span class="p">},</span>
        <span class="nx">UpdateOutdatedInstancesOnly</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">Bool</span><span class="p">(</span><span class="kc">false</span><span class="p">),</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>CreateDeploymentInput is the entire parameter list that is needed in order to identify instances to deploy code to. We can see
here that it looks for an AutoScalingGroup by Physical Id and the tag labeled <code>fu_stage</code>. Once found, it will use
<code>UpdateOutdatedInstancesOnly</code> to determine if an instance needs to be updated or not. Set to false means, it always updates.</p>
<h1 id="furnace">Furnace</h1>
<p>Where does <a href="https://github.com/Skarlso/go-furnace">Furnace</a> fit in, in all of this? Furnace provides a very easy mechanism to create,
delete and push code to a CloudFormation stack using CodeDeploy, and a couple of environment properties. Furnace <code>create</code> will
create a CloudFormation stack according to the provided template, all the while asking for the parameters defined in it for
flexibility. <code>delete</code> will remove the stack and all affiliated resources except for the created CodeDeploy application. For that,
there is <code>delete-application</code>. <code>status</code> will display information about the stack: Outputs, Parameters, Id, Name, and status.
Something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">    2017/03/16 21:14:37 Stack state is:  <span class="o">{</span>
      Capabilities: <span class="o">[</span><span class="s2">&#34;CAPABILITY_IAM&#34;</span><span class="o">]</span>,
      CreationTime: 2017-03-16 20:09:38.036 +0000 UTC,
      DisableRollback: false,
      Outputs: <span class="o">[{</span>
          Description: <span class="s2">&#34;URL of the website&#34;</span>,
          OutputKey: <span class="s2">&#34;URL&#34;</span>,
          OutputValue: <span class="s2">&#34;http://FurnaceSt-ElasticL-ID.eu-central-1.elb.amazonaws.com&#34;</span>
        <span class="o">}]</span>,
      Parameters: <span class="o">[</span>
        <span class="o">{</span>
          ParameterKey: <span class="s2">&#34;KeyName&#34;</span>,
          ParameterValue: <span class="s2">&#34;UserKeyPair&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          ParameterKey: <span class="s2">&#34;SSHLocation&#34;</span>,
          ParameterValue: <span class="s2">&#34;0.0.0.0/0&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          ParameterKey: <span class="s2">&#34;CodeDeployBucket&#34;</span>,
          ParameterValue: <span class="s2">&#34;None&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          ParameterKey: <span class="s2">&#34;InstanceType&#34;</span>,
          ParameterValue: <span class="s2">&#34;t2.nano&#34;</span>
        <span class="o">}</span>
      <span class="o">]</span>,
      StackId: <span class="s2">&#34;arn:aws:cloudformation:eu-central-1:9999999999999:stack/FurnaceStack/asdfadsf-adsfa3-432d-a-fdasdf&#34;</span>,
      StackName: <span class="s2">&#34;FurnaceStack&#34;</span>,
      StackStatus: <span class="s2">&#34;CREATE_COMPLETE&#34;</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>( This will later be improved to include created resources as well. )</p>
<p>Once the stack is <code>CREATE_COMPLETE</code> a simple <code>push</code> will deliver our application on each instance in the stack. We will get into
more detail about how these commands are working in Part 2 of this series.</p>
<h1 id="final-words">Final Words</h1>
<p>This is it for now.</p>
<p>Join me next time when I will talk about the AWS Go SDK and its intricacies and we will start to look at the basics of Furnace.</p>
<p>As always,
Thanks for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How to do Google Sign-In with Go - Part 2</title>
      <link>https://skarlso.github.io/2016/11/02/google-signin-with-go-part2/</link>
      <pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/11/02/google-signin-with-go-part2/</guid>
      <description><![CDATA[<h1 id="intro">Intro</h1>
<p>Hi Folks.</p>
<p>This is a follow up on my previous post about Google Sign-In. In this post we will discover what to do with the information retrieved in the first encounter, which you can find here: <a href="http://skarlso.github.io/2016/06/12/google-signin-with-go/">Google Sign-In Part 1</a>.</p>
<h1 id="forewords">Forewords</h1>
<h2 id="the-project">The Project</h2>
<p>Everything I did in the first post, and that I&rsquo;m going to do in this example, can be found in this project: <a href="https://github.com/Skarlso/google-oauth-go-sample">Google-OAuth-Go-Sample</a>.</p>
<p>Just to recap, we left off previously on the point where we successfully obtained information about the user, with a secure token and a session initiated with them. Google nicely enough provided us with some details which we can use. This information was in JSON format and looked something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;sub&#34;</span><span class="p">:</span> <span class="s2">&#34;1111111111111111111111&#34;</span><span class="p">,</span>
  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Your Name&#34;</span><span class="p">,</span>
  <span class="nt">&#34;given_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Your&#34;</span><span class="p">,</span>
  <span class="nt">&#34;family_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Name&#34;</span><span class="p">,</span>
  <span class="nt">&#34;profile&#34;</span><span class="p">:</span> <span class="s2">&#34;https://plus.google.com/1111111111111111111111&#34;</span><span class="p">,</span>
  <span class="nt">&#34;picture&#34;</span><span class="p">:</span> <span class="s2">&#34;https://lh3.googleusercontent.com/asdfadsf/AAAAAAAAAAI/Aasdfads/Xasdfasdfs/photo.jpg&#34;</span><span class="p">,</span>
  <span class="nt">&#34;email&#34;</span><span class="p">:</span> <span class="s2">&#34;your@gmail.com&#34;</span><span class="p">,</span>
  <span class="nt">&#34;email_verified&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="nt">&#34;gender&#34;</span><span class="p">:</span> <span class="s2">&#34;male&#34;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>In my example, to keep things simple, I will use the email address since that has to be unique in the land of Google. You could assign an ID to the user, and you could complicate things even further, but my goal is not to write an academic paper about cryptography here.</p>
<h1 id="implementation">Implementation</h1>
<h2 id="making-something-useful-out-of-the-data">Making something useful out of the data</h2>
<p>In order for the app to recognise a user it must save some data about the user. I&rsquo;m doing that in MongoDB right now, but that could be any form of persistence layer, like, SQLite3, BoltDB, PostgresDB, etc.</p>
<h3 id="after-successful-user-authorization">After successful user authorization</h3>
<p>Once the user used google to provide us with sufficient information about him/herself, we can retrieve data about that user from our records. The data could be anything that is linked to our unique identifier like: Character Profile, Player Information, Status, Last Logged-In, etcetc. For this, there are two things that need to happen after authorization: Save/Load user information and initiate a session.</p>
<p>The session can be in the form of a cookie, or a Redis storage, or URL re-writing. I&rsquo;m choosing a cookie here.</p>
<h3 id="save--load-user-information">Save / Load user information</h3>
<p>All I&rsquo;m doing is a simple, <em>returning / new</em> user handling. The concept is simple. If the email isn&rsquo;t saved, we save it. If it&rsquo;s saved, we set a logic to our page render to greet the returning user.</p>
<p>In the <code>AuthHandler</code> I&rsquo;m doing the following:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="o">...</span>
<span class="nx">seen</span> <span class="o">:=</span> <span class="kc">false</span>
<span class="nx">db</span> <span class="o">:=</span> <span class="nx">database</span><span class="p">.</span><span class="nx">MongoDBConnection</span><span class="p">{}</span>
<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">mongoErr</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">LoadUser</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">Email</span><span class="p">);</span> <span class="nx">mongoErr</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
    <span class="nx">seen</span> <span class="p">=</span> <span class="kc">true</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">err</span> <span class="p">=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">SaveUser</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">u</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
        <span class="nx">c</span><span class="p">.</span><span class="nf">HTML</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="s">&#34;error.tmpl&#34;</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span><span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="s">&#34;Error while saving user. Please try again.&#34;</span><span class="p">})</span>
        <span class="k">return</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nx">c</span><span class="p">.</span><span class="nf">HTML</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;battle.tmpl&#34;</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span><span class="s">&#34;email&#34;</span><span class="p">:</span> <span class="nx">u</span><span class="p">.</span><span class="nx">Email</span><span class="p">,</span> <span class="s">&#34;seen&#34;</span><span class="p">:</span> <span class="nx">seen</span><span class="p">})</span>
<span class="o">...</span>
</code></pre></td></tr></table>
</div>
</div><p>Let&rsquo;s break this down a bit. There is a db connection here, which calls a function that either returns an error, or it doesn&rsquo;t. If it doesn&rsquo;t, that means we have our user. If it does, it means we have to save the user. This is a very simple case (disregard for now, that the error could be something else as well (If you can&rsquo;t get passed that, you could type check the error or check if the returned record contains the requested user information instead of checking for an error.)).</p>
<p>The template is than rendered depending on the <code>seen</code> boolean like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;icon&#34;</span>
      <span class="na">type</span><span class="o">=</span><span class="s">&#34;image/png&#34;</span>
      <span class="na">href</span><span class="o">=</span><span class="s">&#34;/img/favicon.ico&#34;</span> <span class="p">/&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/css/main.css&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    {{if .seen}}
        <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Welcome back to the battlefield &#39;{{ .email }}&#39;.<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
    {{else}}
        <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Welcome to the battlefield &#39;{{ .email }}&#39;.<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
    {{end}}
  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>You can see here, that if <code>seen</code> is <em>true</em> the header message will say: &ldquo;Welcome <em>back</em>&hellip;&rdquo;.</p>
<h3 id="initiating-a-session">Initiating a session</h3>
<p>When the user is successfully authenticated, we activate a session so that the user can access pages that require authorization. Here, I have to mention that I&rsquo;m using <a href="https://github.com/gin-gonic/gin">Gin</a>, so restricted end-points are made with groups which require a middleware.</p>
<p>As I mentioned earlier, I&rsquo;m using cookies as session handlers. For this, a new session store has to be created with some secure token. This is achieved with the following code fragments ( note that I&rsquo;m using a Gin session middleware which uses gorilla&rsquo;s session handler located here: <a href="https://github.com/gin-gonic/contrib">Gin-Gonic(Sessions)</a>):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// RandToken in handlers.go:
</span><span class="c1">// RandToken generates a random @l length token.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">RandToken</span><span class="p">(</span><span class="nx">l</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="nx">b</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">l</span><span class="p">)</span>
	<span class="nx">rand</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
	<span class="k">return</span> <span class="nx">base64</span><span class="p">.</span><span class="nx">StdEncoding</span><span class="p">.</span><span class="nf">EncodeToString</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// quest.go:
</span><span class="c1">// Create the cookie store in main.go.
</span><span class="c1"></span><span class="nx">store</span> <span class="o">:=</span> <span class="nx">sessions</span><span class="p">.</span><span class="nf">NewCookieStore</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">handlers</span><span class="p">.</span><span class="nf">RandToken</span><span class="p">(</span><span class="mi">64</span><span class="p">)))</span>
<span class="nx">store</span><span class="p">.</span><span class="nf">Options</span><span class="p">(</span><span class="nx">sessions</span><span class="p">.</span><span class="nx">Options</span><span class="p">{</span>
    <span class="nx">Path</span><span class="p">:</span>   <span class="s">&#34;/&#34;</span><span class="p">,</span>
    <span class="nx">MaxAge</span><span class="p">:</span> <span class="mi">86400</span> <span class="o">*</span> <span class="mi">7</span><span class="p">,</span>
<span class="p">})</span>

<span class="c1">// using the cookie store:
</span><span class="c1"></span><span class="nx">router</span><span class="p">.</span><span class="nf">Use</span><span class="p">(</span><span class="nx">sessions</span><span class="p">.</span><span class="nf">Sessions</span><span class="p">(</span><span class="s">&#34;goquestsession&#34;</span><span class="p">,</span> <span class="nx">store</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><p>After this <code>gin.Context</code> lets us access this session store by doing <code>session := sessions.Default(c)</code>. Now, create a session variable called <code>user-id</code> like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">session</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;user-id&#34;</span><span class="p">,</span> <span class="nx">u</span><span class="p">.</span><span class="nx">Email</span><span class="p">)</span>
<span class="nx">err</span> <span class="p">=</span> <span class="nx">session</span><span class="p">.</span><span class="nf">Save</span><span class="p">()</span>
<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
    <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="nx">c</span><span class="p">.</span><span class="nf">HTML</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="s">&#34;error.tmpl&#34;</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span><span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="s">&#34;Error while saving session. Please try again.&#34;</span><span class="p">})</span>
    <span class="k">return</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Don&rsquo;t forget to <code>save</code> the session. ;) That is it. If I restart the server, the cookie won&rsquo;t be usable any longer, since it will generate a new token for the cookie store. The user will have to log in again. <strong>Note</strong>: It might be that you&rsquo;ll see something like this, from <code>session</code>: <code>[sessions] ERROR! securecookie: the value is not valid</code>. You can ignore this error.</p>
<h2 id="restricting-access-to-certain-end-points-with-the-auth-middleware">Restricting access to certain end-points with the auth Middleware™</h2>
<p>Now, that our session is alive, we can use it to restrict access to some part of the application. With Gin, it looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">authorized</span> <span class="o">:=</span> <span class="nx">router</span><span class="p">.</span><span class="nf">Group</span><span class="p">(</span><span class="s">&#34;/battle&#34;</span><span class="p">)</span>
<span class="nx">authorized</span><span class="p">.</span><span class="nf">Use</span><span class="p">(</span><span class="nx">middleware</span><span class="p">.</span><span class="nf">AuthorizeRequest</span><span class="p">())</span>
<span class="p">{</span>
    <span class="nx">authorized</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/field&#34;</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">.</span><span class="nx">FieldHandler</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This creates a grouping of end-points under <code>/battle</code>. Which means, everything under <code>/battle</code> will only be accessible if the middleware passed to the <code>Use</code> function calls the next handler in the chain. If it aborts the call chain, the end-point will not be accessible. My middleware is pretty simple, but it gets the job done:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// AuthorizeRequest is used to authorize a request for a certain end-point group.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">AuthorizeRequest</span><span class="p">()</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">HandlerFunc</span> <span class="p">{</span>
	<span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">session</span> <span class="o">:=</span> <span class="nx">sessions</span><span class="p">.</span><span class="nf">Default</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
		<span class="nx">v</span> <span class="o">:=</span> <span class="nx">session</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;user-id&#34;</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">v</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="nx">c</span><span class="p">.</span><span class="nf">HTML</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusUnauthorized</span><span class="p">,</span> <span class="s">&#34;error.tmpl&#34;</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span><span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="s">&#34;Please log in.&#34;</span><span class="p">})</span>
			<span class="nx">c</span><span class="p">.</span><span class="nf">Abort</span><span class="p">()</span>
		<span class="p">}</span>
		<span class="nx">c</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Note, that this only check if <code>user-id</code> is set or not. That&rsquo;s certainly not enough for a secure application. Its only supposed to be a simple example of the mechanics of the auth middleware. Also, the session usually contains more than one parameter. It&rsquo;s more likely that it contains several variables, which describe the user including a state for CORS protection. For CORS I&rsquo;d recommend using <a href="https://github.com/rs/cors">rs/cors</a>.</p>
<p>If you would try to access http://127.0.0.1:9090/battle/field without logging in, you&rsquo;d be redirected to an <code>error.tmpl</code> with the message: <strong>Please log in.</strong>.</p>
<h1 id="final-words">Final Words</h1>
<p>That&rsquo;s pretty much it. Important parts are:</p>
<ul>
<li>Saving the right information</li>
<li>Secure cookie store</li>
<li>CORS for sessions</li>
<li>Checks of the users details in the cookie</li>
<li>Authorised end-points</li>
<li>Session handling</li>
</ul>
<p>Any questions, remarks, ideas, are very welcomed in the comment section. There are plenty of very nice Go frameworks which do Google OAuth2 out of the box. I recommend using them, as they save you a lot of legwork.</p>
<p>Thank you for reading!
Gergely.</p>
]]></description>
    </item>
    
    <item>
      <title>How to do Google sign-in with Go</title>
      <link>https://skarlso.github.io/2016/06/12/google-signin-with-go/</link>
      <pubDate>Sun, 12 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/06/12/google-signin-with-go/</guid>
      <description><![CDATA[<p>Hi folks.</p>
<p>Today, I would like to write up a step - by - step guide with a sample web app on how to do Google Sign-In and authorization.</p>
<p>Let&rsquo;s get started.</p>
<p><strong>EDIT</strong>: A sample project of this, and <a href="http://skarlso.github.io/2016/11/02/google-signin-with-go-part2/">Part 2</a>, can be found
<a href="https://github.com/Skarlso/goquestwebapp">here</a> or <a href="https://github.com/Skarlso/google-oauth-go-sample">here</a>.</p>
<h1 id="setup">Setup</h1>
<h2 id="google-oauth-token">Google OAuth token</h2>
<p>First what you need is, to register your application with Google, so you&rsquo;ll get a Token that you can use to authorize later calls to Google services.</p>
<p>You can do that here: <a href="https://console.developers.google.com/iam-admin/projects">Google Developer Console</a>. You&rsquo;ll have to create a new project. Once it&rsquo;s done, click on <code>Credentials</code> and create an OAuth token. You should see something like this: &ldquo;To create an OAuth client ID, you must first set a product name on the consent screen.&rdquo;. Go through the questions, like, what type your application is, and once you arrive at stage where it&rsquo;s asking for your application&rsquo;s name &ndash; there is a section asking for redirect URLs; there, write the url you wish to use when authorising your user. If you don&rsquo;t know this yet, don&rsquo;t fret, you can come back and change it later. Do NOT use <code>localhost</code>. If you are running on your own, use http://127.0.0.1:port/whatever.</p>
<p>This will get you a <code>client ID</code> and a <code>client secret</code>. I&rsquo;m going to save these into a file which will sit next to my web app. It could be stored more securely, for example, in a database or a mounted secure, encrypted drive, and so and so forth.</p>
<p>Your application can now be identified through Google services.</p>
<h1 id="the-application">The Application</h1>
<h2 id="libraries">Libraries</h2>
<p>Google has a nice library to use with OAuth 2.0. The library is available here: <a href="https://github.com/golang/oauth2">Google OAth 2.0</a>. It&rsquo;s a bit cryptic at first, but not to worry. After a bit of fiddling you&rsquo;ll understand fast what it does. I&rsquo;m also using <a href="https://github.com/gin-gonic/gin">Gin</a>, and Gin&rsquo;s session handling middleware <a href="https://github.com/gin-gonic/contrib/tree/master/sessions">Gin-Session</a>.</p>
<h2 id="setup---credentials">Setup - Credentials</h2>
<p>Let&rsquo;s create a setup which configures your credentials from the file you saved earlier. This is pretty straightforward.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Credentials which stores google ids.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Credentials</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">Cid</span> <span class="kt">string</span> <span class="s">`json:&#34;cid&#34;`</span>
    <span class="nx">Csecret</span> <span class="kt">string</span> <span class="s">`json:&#34;csecret&#34;`</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">c</span> <span class="nx">Credentials</span>
    <span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadFile</span><span class="p">(</span><span class="s">&#34;./creds.json&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;File error: %v\n&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
        <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">json</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">c</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Once you have the creds loaded, you can now go on to construct the OAuth client.</p>
<h2 id="setup---oauth-client">Setup - OAuth client</h2>
<p>Construct the OAuth config like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">conf</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">oauth2</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
  <span class="nx">ClientID</span><span class="p">:</span>     <span class="nx">c</span><span class="p">.</span><span class="nx">Cid</span><span class="p">,</span>
  <span class="nx">ClientSecret</span><span class="p">:</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Csecret</span><span class="p">,</span>
  <span class="nx">RedirectURL</span><span class="p">:</span>  <span class="s">&#34;http://localhost:9090/auth&#34;</span><span class="p">,</span>
  <span class="nx">Scopes</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
    <span class="s">&#34;https://www.googleapis.com/auth/userinfo.email&#34;</span><span class="p">,</span> <span class="c1">// You have to select your own scope from here -&gt; https://developers.google.com/identity/protocols/googlescopes#google_sign-in
</span><span class="c1"></span>  <span class="p">},</span>
  <span class="nx">Endpoint</span><span class="p">:</span> <span class="nx">google</span><span class="p">.</span><span class="nx">Endpoint</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>It will give you a struct which you can then use to Authorize the user in the google domain. Next, all you need to do is call <code>AuthCodeURL</code> on this config. It will give you a URL which redirects to a Google Sign-In form. Once the user fills that out and clicks &lsquo;Allow&rsquo;, you&rsquo;ll get back a TOKEN in the <code>code</code> query parameter and a <code>state</code> which helps protect against CSRF attacks. Always check if the provided state is the same which you provided with AuthCodeURL. This will look something like this <code>http://127.0.0.1:9090/auth?code=4FLKFskdjflf3343d4f&amp;state=lhfu3f983j;asdf</code>. Small function for this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">getLoginURL</span><span class="p">(</span><span class="nx">state</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
    <span class="c1">// State can be some kind of random generated hash string.
</span><span class="c1"></span>    <span class="c1">// See relevant RFC: http://tools.ietf.org/html/rfc6749#section-10.12
</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">conf</span><span class="p">.</span><span class="nf">AuthCodeURL</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Construct a button which the user can click and be redirected to the Google Sign-In form. When constructing the url, we must do one more thing. Create a secure state token and save it in the form of a cookie for the current user.</p>
<h2 id="random-state-and-button-construction">Random State and Button construction</h2>
<p>Small piece of code random token:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">randToken</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="nx">b</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
	<span class="nx">rand</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
	<span class="k">return</span> <span class="nx">base64</span><span class="p">.</span><span class="nx">StdEncoding</span><span class="p">.</span><span class="nf">EncodeToString</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Storing it in a session and constructing the button:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">loginHandler</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">state</span> <span class="p">=</span> <span class="nf">randToken</span><span class="p">()</span>
    <span class="nx">session</span> <span class="o">:=</span> <span class="nx">sessions</span><span class="p">.</span><span class="nf">Default</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
    <span class="nx">session</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;state&#34;</span><span class="p">,</span> <span class="nx">state</span><span class="p">)</span>
    <span class="nx">session</span><span class="p">.</span><span class="nf">Save</span><span class="p">()</span>
    <span class="nx">c</span><span class="p">.</span><span class="nx">Writer</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;&lt;html&gt;&lt;title&gt;Golang Google&lt;/title&gt; &lt;body&gt; &lt;a href=&#39;&#34;</span> <span class="o">+</span> <span class="nf">getLoginURL</span><span class="p">()</span> <span class="o">+</span> <span class="s">&#34;&#39;&gt;&lt;button&gt;Login with Google!&lt;/button&gt; &lt;/a&gt; &lt;/body&gt;&lt;/html&gt;&#34;</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>It&rsquo;s not the nicest button I ever come up with, but it will have to do.</p>
<h1 id="user-information">User Information</h1>
<p>After you got the token, you can construct an authorised Google HTTP Client, which let&rsquo;s you call Google related services and retrieve information about the user.</p>
<h2 id="getting-the-client">Getting the Client</h2>
<p>Before we construct a client, we must check if the retrieved state is still the same compared to the one we provided. I&rsquo;m doing this before constructing the client. Together this looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">authHandler</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Check state validity.
</span><span class="c1"></span>    <span class="nx">session</span> <span class="o">:=</span> <span class="nx">sessions</span><span class="p">.</span><span class="nf">Default</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
    <span class="nx">retrievedState</span> <span class="o">:=</span> <span class="nx">session</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;state&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">retrievedState</span> <span class="o">!=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="s">&#34;state&#34;</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">c</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusUnauthorized</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Invalid session state: %s&#34;</span><span class="p">,</span> <span class="nx">retrievedState</span><span class="p">))</span>
        <span class="k">return</span>
    <span class="p">}</span>
    <span class="c1">// Handle the exchange code to initiate a transport.
</span><span class="c1"></span>  	<span class="nx">tok</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">conf</span><span class="p">.</span><span class="nf">Exchange</span><span class="p">(</span><span class="nx">oauth2</span><span class="p">.</span><span class="nx">NoContext</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="s">&#34;code&#34;</span><span class="p">))</span>
  	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
  		<span class="nx">c</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
          <span class="k">return</span>
  	<span class="p">}</span>
    <span class="c1">// Construct the client.
</span><span class="c1"></span>    <span class="nx">client</span> <span class="o">:=</span> <span class="nx">conf</span><span class="p">.</span><span class="nf">Client</span><span class="p">(</span><span class="nx">oauth2</span><span class="p">.</span><span class="nx">NoContext</span><span class="p">,</span> <span class="nx">tok</span><span class="p">)</span>
    <span class="o">...</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="obtaining-information">Obtaining information</h2>
<p>Our next step is to retrieve information about the user. To achieve this, call Google&rsquo;s API with the authorised client. The code for that is:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="o">...</span>
<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;https://www.googleapis.com/oauth2/v3/userinfo&#34;</span><span class="p">)</span>
<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
    <span class="nx">c</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
    <span class="k">return</span>
<span class="p">}</span>
<span class="k">defer</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
<span class="nx">data</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Resp body: &#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
<span class="o">...</span>
</code></pre></td></tr></table>
</div>
</div><p>And this will yield a body like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;sub&#34;</span><span class="p">:</span> <span class="s2">&#34;1111111111111111111111&#34;</span><span class="p">,</span>
  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Your Name&#34;</span><span class="p">,</span>
  <span class="nt">&#34;given_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Your&#34;</span><span class="p">,</span>
  <span class="nt">&#34;family_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Name&#34;</span><span class="p">,</span>
  <span class="nt">&#34;profile&#34;</span><span class="p">:</span> <span class="s2">&#34;https://plus.google.com/1111111111111111111111&#34;</span><span class="p">,</span>
  <span class="nt">&#34;picture&#34;</span><span class="p">:</span> <span class="s2">&#34;https://lh3.googleusercontent.com/asdfadsf/AAAAAAAAAAI/Aasdfads/Xasdfasdfs/photo.jpg&#34;</span><span class="p">,</span>
  <span class="nt">&#34;email&#34;</span><span class="p">:</span> <span class="s2">&#34;your@gmail.com&#34;</span><span class="p">,</span>
  <span class="nt">&#34;email_verified&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="nt">&#34;gender&#34;</span><span class="p">:</span> <span class="s2">&#34;male&#34;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Parse it, and you&rsquo;ve got an email which you can store somewhere for registration purposes. At this point, your user is not yet Authenticated. For that, I&rsquo;m going to post a second post, which describes how to go on. Retrieving the stored email address, and user session handling with Gin and MongoDB.</p>
<h1 id="putting-it-all-together">Putting it all together</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;crypto/rand&#34;</span>
    <span class="s">&#34;encoding/base64&#34;</span>
    <span class="s">&#34;encoding/json&#34;</span>
    <span class="s">&#34;io/ioutil&#34;</span>
    <span class="s">&#34;fmt&#34;</span>
    <span class="s">&#34;log&#34;</span>
    <span class="s">&#34;os&#34;</span>
    <span class="s">&#34;net/http&#34;</span>

    <span class="s">&#34;github.com/gin-gonic/contrib/sessions&#34;</span>
    <span class="s">&#34;github.com/gin-gonic/gin&#34;</span>
    <span class="s">&#34;golang.org/x/oauth2&#34;</span>
    <span class="s">&#34;golang.org/x/oauth2/google&#34;</span>
<span class="p">)</span>

<span class="c1">// Credentials which stores google ids.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Credentials</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">Cid</span>     <span class="kt">string</span> <span class="s">`json:&#34;cid&#34;`</span>
    <span class="nx">Csecret</span> <span class="kt">string</span> <span class="s">`json:&#34;csecret&#34;`</span>
<span class="p">}</span>

<span class="c1">// User is a retrieved and authentiacted user.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">User</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">Sub</span> <span class="kt">string</span> <span class="s">`json:&#34;sub&#34;`</span>
    <span class="nx">Name</span> <span class="kt">string</span> <span class="s">`json:&#34;name&#34;`</span>
    <span class="nx">GivenName</span> <span class="kt">string</span> <span class="s">`json:&#34;given_name&#34;`</span>
    <span class="nx">FamilyName</span> <span class="kt">string</span> <span class="s">`json:&#34;family_name&#34;`</span>
    <span class="nx">Profile</span> <span class="kt">string</span> <span class="s">`json:&#34;profile&#34;`</span>
    <span class="nx">Picture</span> <span class="kt">string</span> <span class="s">`json:&#34;picture&#34;`</span>
    <span class="nx">Email</span> <span class="kt">string</span> <span class="s">`json:&#34;email&#34;`</span>
    <span class="nx">EmailVerified</span> <span class="kt">string</span> <span class="s">`json:&#34;email_verified&#34;`</span>
    <span class="nx">Gender</span> <span class="kt">string</span> <span class="s">`json:&#34;gender&#34;`</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">cred</span> <span class="nx">Credentials</span>
<span class="kd">var</span> <span class="nx">conf</span> <span class="o">*</span><span class="nx">oauth2</span><span class="p">.</span><span class="nx">Config</span>
<span class="kd">var</span> <span class="nx">state</span> <span class="kt">string</span>
<span class="kd">var</span> <span class="nx">store</span> <span class="p">=</span> <span class="nx">sessions</span><span class="p">.</span><span class="nf">NewCookieStore</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;secret&#34;</span><span class="p">))</span>

<span class="kd">func</span> <span class="nf">randToken</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="nx">b</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
	<span class="nx">rand</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
	<span class="k">return</span> <span class="nx">base64</span><span class="p">.</span><span class="nx">StdEncoding</span><span class="p">.</span><span class="nf">EncodeToString</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadFile</span><span class="p">(</span><span class="s">&#34;./creds.json&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;File error: %v\n&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
        <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">json</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">cred</span><span class="p">)</span>

    <span class="nx">conf</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">oauth2</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
        <span class="nx">ClientID</span><span class="p">:</span>     <span class="nx">cred</span><span class="p">.</span><span class="nx">Cid</span><span class="p">,</span>
        <span class="nx">ClientSecret</span><span class="p">:</span> <span class="nx">cred</span><span class="p">.</span><span class="nx">Csecret</span><span class="p">,</span>
        <span class="nx">RedirectURL</span><span class="p">:</span>  <span class="s">&#34;http://127.0.0.1:9090/auth&#34;</span><span class="p">,</span>
        <span class="nx">Scopes</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
            <span class="s">&#34;https://www.googleapis.com/auth/userinfo.email&#34;</span><span class="p">,</span> <span class="c1">// You have to select your own scope from here -&gt; https://developers.google.com/identity/protocols/googlescopes#google_sign-in
</span><span class="c1"></span>        <span class="p">},</span>
        <span class="nx">Endpoint</span><span class="p">:</span> <span class="nx">google</span><span class="p">.</span><span class="nx">Endpoint</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">indexHandler</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">c</span><span class="p">.</span><span class="nf">HTML</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;index.tmpl&#34;</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{})</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">getLoginURL</span><span class="p">(</span><span class="nx">state</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">conf</span><span class="p">.</span><span class="nf">AuthCodeURL</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">authHandler</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Handle the exchange code to initiate a transport.
</span><span class="c1"></span>    <span class="nx">session</span> <span class="o">:=</span> <span class="nx">sessions</span><span class="p">.</span><span class="nf">Default</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
    <span class="nx">retrievedState</span> <span class="o">:=</span> <span class="nx">session</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;state&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">retrievedState</span> <span class="o">!=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="s">&#34;state&#34;</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">c</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusUnauthorized</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Invalid session state: %s&#34;</span><span class="p">,</span> <span class="nx">retrievedState</span><span class="p">))</span>
        <span class="k">return</span>
    <span class="p">}</span>

	<span class="nx">tok</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">conf</span><span class="p">.</span><span class="nf">Exchange</span><span class="p">(</span><span class="nx">oauth2</span><span class="p">.</span><span class="nx">NoContext</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="s">&#34;code&#34;</span><span class="p">))</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">c</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
        <span class="k">return</span>
	<span class="p">}</span>

	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">conf</span><span class="p">.</span><span class="nf">Client</span><span class="p">(</span><span class="nx">oauth2</span><span class="p">.</span><span class="nx">NoContext</span><span class="p">,</span> <span class="nx">tok</span><span class="p">)</span>
	<span class="nx">email</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;https://www.googleapis.com/oauth2/v3/userinfo&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">c</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
        <span class="k">return</span>
	<span class="p">}</span>
    <span class="k">defer</span> <span class="nx">email</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
    <span class="nx">data</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">email</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
    <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Email body: &#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
    <span class="nx">c</span><span class="p">.</span><span class="nf">Status</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">loginHandler</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">state</span> <span class="p">=</span> <span class="nf">randToken</span><span class="p">()</span>
    <span class="nx">session</span> <span class="o">:=</span> <span class="nx">sessions</span><span class="p">.</span><span class="nf">Default</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
    <span class="nx">session</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;state&#34;</span><span class="p">,</span> <span class="nx">state</span><span class="p">)</span>
    <span class="nx">session</span><span class="p">.</span><span class="nf">Save</span><span class="p">()</span>
    <span class="nx">c</span><span class="p">.</span><span class="nx">Writer</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;&lt;html&gt;&lt;title&gt;Golang Google&lt;/title&gt; &lt;body&gt; &lt;a href=&#39;&#34;</span> <span class="o">+</span> <span class="nf">getLoginURL</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#34;&#39;&gt;&lt;button&gt;Login with Google!&lt;/button&gt; &lt;/a&gt; &lt;/body&gt;&lt;/html&gt;&#34;</span><span class="p">))</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">router</span> <span class="o">:=</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">Default</span><span class="p">()</span>
    <span class="nx">router</span><span class="p">.</span><span class="nf">Use</span><span class="p">(</span><span class="nx">sessions</span><span class="p">.</span><span class="nf">Sessions</span><span class="p">(</span><span class="s">&#34;goquestsession&#34;</span><span class="p">,</span> <span class="nx">store</span><span class="p">))</span>
    <span class="nx">router</span><span class="p">.</span><span class="nf">Static</span><span class="p">(</span><span class="s">&#34;/css&#34;</span><span class="p">,</span> <span class="s">&#34;./static/css&#34;</span><span class="p">)</span>
    <span class="nx">router</span><span class="p">.</span><span class="nf">Static</span><span class="p">(</span><span class="s">&#34;/img&#34;</span><span class="p">,</span> <span class="s">&#34;./static/img&#34;</span><span class="p">)</span>
    <span class="nx">router</span><span class="p">.</span><span class="nf">LoadHTMLGlob</span><span class="p">(</span><span class="s">&#34;templates/*&#34;</span><span class="p">)</span>

    <span class="nx">router</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">indexHandler</span><span class="p">)</span>
    <span class="nx">router</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/login&#34;</span><span class="p">,</span> <span class="nx">loginHandler</span><span class="p">)</span>
    <span class="nx">router</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/auth&#34;</span><span class="p">,</span> <span class="nx">authHandler</span><span class="p">)</span>

    <span class="nx">router</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="s">&#34;127.0.0.1:9090&#34;</span><span class="p">)</span>
<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This is it folks. I hope this helped. Any comments or advices are welcomed.</p>
<h1 id="google-api-documentation">Google API Documentation</h1>
<p>The documentation to this whole process, and MUCH more information can be found here: <a href="https://developers.google.com/identity/protocols/OAuth2">Google API Docs</a>.</p>
<p>Thanks for reading,
Gergely.</p>]]></description>
    </item>
    
  </channel>
</rss>