<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/golang/</link>
    <description>Recent content in golang on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 29 Oct 2018 07:01:00 +0100</lastBuildDate>
    
	<atom:link href="https://skarlso.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Extensive tutorial on go-plugin.</title>
      <link>https://skarlso.github.io/2018/10/29/go-plugin-tutorial/</link>
      <pubDate>Mon, 29 Oct 2018 07:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/10/29/go-plugin-tutorial/</guid>
      <description>Intro If you don&amp;rsquo;t know what go-plugin is, don&amp;rsquo;t worry, here is a small introduction on the subject matter:
Back in the old days when Go didn&amp;rsquo;t have the plugin package, HashiCorp was desperately looking for a way to use plugins.
In the old days, Lua plus Go wasn&amp;rsquo;t really a thing yet, and to be honest, nobody wants to write Lua ( joking!).
And thus Mitchell had this brilliant idea of using RPC over the local network to serve a local interface as something that could easily be implemented with any other language that supported RPC.</description>
    </item>
    
    <item>
      <title>Furnace with a new Plugin System</title>
      <link>https://skarlso.github.io/2018/09/17/furnace-plugin-update/</link>
      <pubDate>Mon, 17 Sep 2018 07:01:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2018/09/17/furnace-plugin-update/</guid>
      <description>Hi.
A quick update, but a very important and interesting one hopefully. Furnace just got a massive boost to its plugin system.
I&amp;rsquo;m using HashiCorp&amp;rsquo;s Go-Plugins system now to handle plugins. This means one of two things that are interesting to the plugin author.
One, plugins can be written in any language which is supported by Furnace and supports GRPC. Currently this means that plugins can be written in the following languages:</description>
    </item>
    
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 4</title>
      <link>https://skarlso.github.io/2017/04/16/building-furnace-part-4/</link>
      <pubDate>Sun, 16 Apr 2017 09:23:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/04/16/building-furnace-part-4/</guid>
      <description>Intro Hi folks.
Previously on this blog: Part 1. Part 2. Part 3.
In this part we are going to talk about Unit Testing Furnace and how to work some magic with AWS and Go.
Mock Stub Fake Dummy Canned  Unit testing in Go usually follows the Dependency Injection model of dealing with Mocks and Stubs.
## DI
Dependency Inject in short is one object supplying the dependencies of another object.</description>
    </item>
    
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 4</title>
      <link>https://skarlso.github.io/2017/04/16/building-furnace-part-4/</link>
      <pubDate>Sun, 16 Apr 2017 09:23:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/04/16/building-furnace-part-4/</guid>
      <description>Intro Hi folks.
Previously on this blog: Part 1. Part 2. Part 3.
In this part we are going to talk about Unit Testing Furnace and how to work some magic with AWS and Go.
Mock Stub Fake Dummy Canned  Unit testing in Go usually follows the Dependency Injection model of dealing with Mocks and Stubs.
## DI
Dependency Inject in short is one object supplying the dependencies of another object.</description>
    </item>
    
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 3</title>
      <link>https://skarlso.github.io/2017/03/22/building-furnace-part-3/</link>
      <pubDate>Wed, 22 Mar 2017 12:03:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/03/22/building-furnace-part-3/</guid>
      <description>Intro Hi folks.
Previously on this blog: Part 1. Part 2. Part 4.
In this part, I&amp;rsquo;m going to talk about the experimental plugin system of Furnace.
Go Experimental Plugins Since Go 1.8 was released, an exciting and new feature was introduced called a Plug-in system. This system works with dynamic libraries built with a special switch to go build. These libraries, .so or .dylib (later), are than loaded and once that succeeds, specific functions can be called from them (symbol resolution).</description>
    </item>
    
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 3</title>
      <link>https://skarlso.github.io/2017/03/22/building-furnace-part-3/</link>
      <pubDate>Wed, 22 Mar 2017 12:03:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/03/22/building-furnace-part-3/</guid>
      <description>Intro Hi folks.
Previously on this blog: Part 1. Part 2. Part 4.
In this part, I&amp;rsquo;m going to talk about the experimental plugin system of Furnace.
Go Experimental Plugins Since Go 1.8 was released, an exciting and new feature was introduced called a Plug-in system. This system works with dynamic libraries built with a special switch to go build. These libraries, .so or .dylib (later), are than loaded and once that succeeds, specific functions can be called from them (symbol resolution).</description>
    </item>
    
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 2</title>
      <link>https://skarlso.github.io/2017/03/19/building-furnace-part-2/</link>
      <pubDate>Sun, 19 Mar 2017 12:03:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/03/19/building-furnace-part-2/</guid>
      <description>Intro Hi folks.
Previously on this blog: Part 1, Part 3, Part 4
In this part, I&amp;rsquo;m going to talk about the AWS Go SDK and begin do dissect the intricacies of Furnace.
AWS SDK Fortunately, the Go SDK for AWS is quiet verbose and littered with examples of all sorts. But that doesn&amp;rsquo;t make it less complex and less cryptic at times. I&amp;rsquo;m here to lift some of the early confusions, in hopes that I can help someone to avoid wasting time.</description>
    </item>
    
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 2</title>
      <link>https://skarlso.github.io/2017/03/19/building-furnace-part-2/</link>
      <pubDate>Sun, 19 Mar 2017 12:03:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/03/19/building-furnace-part-2/</guid>
      <description>Intro Hi folks.
Previously on this blog: Part 1, Part 3, Part 4
In this part, I&amp;rsquo;m going to talk about the AWS Go SDK and begin do dissect the intricacies of Furnace.
AWS SDK Fortunately, the Go SDK for AWS is quiet verbose and littered with examples of all sorts. But that doesn&amp;rsquo;t make it less complex and less cryptic at times. I&amp;rsquo;m here to lift some of the early confusions, in hopes that I can help someone to avoid wasting time.</description>
    </item>
    
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 1</title>
      <link>https://skarlso.github.io/2017/03/16/building-furnace-part-1/</link>
      <pubDate>Thu, 16 Mar 2017 21:49:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/03/16/building-furnace-part-1/</guid>
      <description>Other posts: Part 2, Part 3, Part 4.
Building Furnace: Part 1 Intro Hi folks.
This is the first part of a 4 part series which talks about the process of building a middlish sized project in Go, with AWS. Including Unit testing and a experimental plugin feature.
The first part will talk about the AWS services used in brief and will contain a basic description for those who are not familiar with them.</description>
    </item>
    
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 1</title>
      <link>https://skarlso.github.io/2017/03/16/building-furnace-part-1/</link>
      <pubDate>Thu, 16 Mar 2017 21:49:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/03/16/building-furnace-part-1/</guid>
      <description>Other posts: Part 2, Part 3, Part 4.
Building Furnace: Part 1 Intro Hi folks.
This is the first part of a 4 part series which talks about the process of building a middlish sized project in Go, with AWS. Including Unit testing and a experimental plugin feature.
The first part will talk about the AWS services used in brief and will contain a basic description for those who are not familiar with them.</description>
    </item>
    
    <item>
      <title>How to do Google Sign-In with Go - Part 2</title>
      <link>https://skarlso.github.io/2016/11/02/google-signin-with-go-part2/</link>
      <pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/11/02/google-signin-with-go-part2/</guid>
      <description>Intro Hi Folks.
This is a follow up on my previous post about Google Sign-In. In this post we will discover what to do with the information retrieved in the first encounter, which you can find here: Google Sign-In Part 1.
Forewords The Project Everything I did in the first post, and that I&amp;rsquo;m going to do in this example, can be found in this project: Google-OAuth-Go-Sample.
Just to recap, we left off previously on the point where we successfully obtained information about the user, with a secure token and a session initiated with them.</description>
    </item>
    
    <item>
      <title>How to do Google Sign-In with Go - Part 2</title>
      <link>https://skarlso.github.io/2016/11/02/google-signin-with-go-part2/</link>
      <pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/11/02/google-signin-with-go-part2/</guid>
      <description>Intro Hi Folks.
This is a follow up on my previous post about Google Sign-In. In this post we will discover what to do with the information retrieved in the first encounter, which you can find here: Google Sign-In Part 1.
Forewords The Project Everything I did in the first post, and that I&amp;rsquo;m going to do in this example, can be found in this project: Google-OAuth-Go-Sample.
Just to recap, we left off previously on the point where we successfully obtained information about the user, with a secure token and a session initiated with them.</description>
    </item>
    
    <item>
      <title>How to do Google sign-in with Go</title>
      <link>https://skarlso.github.io/2016/06/12/google-signin-with-go/</link>
      <pubDate>Sun, 12 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/06/12/google-signin-with-go/</guid>
      <description>&lt;p&gt;Hi folks.&lt;/p&gt;

&lt;p&gt;Today, I would like to write up a step - by - step guide with a sample web app on how to do Google Sign-In and authorization.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to do Google sign-in with Go</title>
      <link>https://skarlso.github.io/2016/06/12/google-signin-with-go/</link>
      <pubDate>Sun, 12 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/06/12/google-signin-with-go/</guid>
      <description>&lt;p&gt;Hi folks.&lt;/p&gt;

&lt;p&gt;Today, I would like to write up a step - by - step guide with a sample web app on how to do Google Sign-In and authorization.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>