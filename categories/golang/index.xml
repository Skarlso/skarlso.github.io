<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Ramblings of a build engineer</title>
    <link>https://skarlso.github.io/categories/golang/</link>
    <description>Recent content in Golang on Ramblings of a build engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 16 Mar 2017 21:49:00 +0100</lastBuildDate>
    <atom:link href="https://skarlso.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 1</title>
      <link>https://skarlso.github.io/2017/03/16/building-furnace-part-1</link>
      <pubDate>Thu, 16 Mar 2017 21:49:00 +0100</pubDate>
      
      <guid>https://skarlso.github.io/2017/03/16/building-furnace-part-1</guid>
      <description>

&lt;h1 id=&#34;building-furnace-part-1:52b375440f44edf06aa4d36a1fc3e0e4&#34;&gt;Building Furnace: Part 1&lt;/h1&gt;

&lt;h1 id=&#34;intro:52b375440f44edf06aa4d36a1fc3e0e4&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Hi folks.&lt;/p&gt;

&lt;p&gt;This is the first part of a 4 part series which talks about the process of building a middlish sized project in Go,
with AWS. Including Unit testing and a experimental plugin feature.&lt;/p&gt;

&lt;p&gt;The first part will talk about the AWS services used in brief and will contain a basic description for those who are not familiar
with them. The second part will talk about the Go SDK and the project structure itself, how it can be used, improved, and how it can
help in everyday life. The third part will talk about the experimental plugin system, and finally, we will tackle unit testing AWS
in Go.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s begin, shall we?&lt;/p&gt;

&lt;h1 id=&#34;aws:52b375440f44edf06aa4d36a1fc3e0e4&#34;&gt;AWS&lt;/h1&gt;

&lt;h2 id=&#34;cloudformation:52b375440f44edf06aa4d36a1fc3e0e4&#34;&gt;CloudFormation&lt;/h2&gt;

&lt;p&gt;If you haven&amp;rsquo;t yet read about, or know off, AWS&amp;rsquo; CloudFormation service, you can either go ahead and read the &lt;a href=&#34;https://aws.amazon.com/cloudformation/&#34;&gt;Documentation&lt;/a&gt;
or read on for a very quick summary. If you are familiar with CF, you should skip ahead to &lt;a href=&#34;##CodeDeploy&#34;&gt;CodeDeploy&lt;/a&gt; section.&lt;/p&gt;

&lt;p&gt;CF is a service which bundles together other AWS services (for example: EC2, S3, ELB, ASG, RDS) into one, easily manageable stack.
After a stack has been created, all the resources can be handled as one, located, tagged and used via CF specific console commands.
It&amp;rsquo;s also possible to define any number of parameters, so a stack can actually be very versatile. A parameter can be anything, from
SSH IP restriction to KeyPair names and list of tags to create or in what region the stack will be in.&lt;/p&gt;

&lt;p&gt;To describe how these parts fit together, one must use a CloudFormation Template file which is either in JSON or in
YAML format. A simple example looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    Parameters:
      KeyName:
        Description: The EC2 Key Pair to allow SSH access to the instance
        Type: AWS::EC2::KeyPair::KeyName
    Resources:
      Ec2Instance:
        Type: AWS::EC2::Instance
        Properties:
          SecurityGroups:
          - Ref: InstanceSecurityGroup
          - MyExistingSecurityGroup
          KeyName:
            Ref: KeyName
          ImageId: ami-7a11e213
      InstanceSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Enable SSH access via port 22
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: &#39;22&#39;
            ToPort: &#39;22&#39;
            CidrIp: 0.0.0.0/0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a myriad of these template samples &lt;a href=&#34;https://aws.amazon.com/cloudformation/aws-cloudformation-templates/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not going to explain this in too much detail. Parameters define the parameters, and resources define all the AWS services which
we would like to configure. Here we can see, that we are creating an EC2 instance with a custom Security Group plus and already
existing security group. ImageId is the AMI which will be used for the EC2 instance. The InstanceSecurityGroup is only defining
some SSH access to the instance.&lt;/p&gt;

&lt;p&gt;That is pretty much it. This can become bloated relatively quickly once, VPCs, ELBs, and ASGs come into play. And CloudFormation
templates can also contain simple logical switches, like, conditions, ref for variables, maps and other shenanigans.&lt;/p&gt;

&lt;p&gt;For example consider this part in the above example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;      KeyName:
        Ref: KeyName
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we use the &lt;code&gt;KeyName&lt;/code&gt; parameter as a Reference Value which will be interpolated to the real value, or the default one, as the
template gets processed.&lt;/p&gt;

&lt;h2 id=&#34;codedeploy:52b375440f44edf06aa4d36a1fc3e0e4&#34;&gt;CodeDeploy&lt;/h2&gt;

&lt;p&gt;If you haven&amp;rsquo;t heard about CodeDeploy yet, please browse the relevant &lt;a href=&#34;http://docs.aws.amazon.com/codedeploy/latest/userguide/welcome.html&#34;&gt;Documentation&lt;/a&gt;
or follow along for a &amp;ldquo;quick&amp;rdquo; description.&lt;/p&gt;

&lt;p&gt;CodeDeploy just does what the name says. It deploys code. Any kind of code, as long as the deployment process is described in a
file called &lt;code&gt;appspec.yml&lt;/code&gt;. It can be easy as coping a file to a specific location or incredibly complex with builds of various
kinds.&lt;/p&gt;

&lt;p&gt;For a simple example look at this configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    version: 0.0
    os: linux
    files:
      - source: /index.html
        destination: /var/www/html/
      - source: /healthy.html
        destination: /var/www/html/
    hooks:
      BeforeInstall:
        - location: scripts/install_dependencies
          timeout: 300
          runas: root
        - location: scripts/clean_up
          timeout: 300
          runas: root
        - location: scripts/start_server
          timeout: 300
          runas: root
      ApplicationStop:
        - location: scripts/stop_server
          timeout: 300
          runas: root
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CodeDeploy applications have hooks and life-cycle events which can be used to control the deployment process of an like, starting
the WebServer; making sure files are in the right location; copying files, running configuration management software like puppet,
ansible or chef; etc, etc.&lt;/p&gt;

&lt;p&gt;What can be done in an &lt;code&gt;appspec.yml&lt;/code&gt; file is described here: &lt;a href=&#34;http://docs.aws.amazon.com/codedeploy/latest/userguide/app-spec-ref.html&#34;&gt;Appspec Reference Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Deployment happens in one of two ways:&lt;/p&gt;

&lt;h3 id=&#34;github:52b375440f44edf06aa4d36a1fc3e0e4&#34;&gt;GitHub&lt;/h3&gt;

&lt;p&gt;If the preferred way to deploy the application is from GitHub a commit hash must be used to identify which &amp;ldquo;version&amp;rdquo; of the
application is to be deployed. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    rev = &amp;amp;codedeploy.RevisionLocation{
        GitHubLocation: &amp;amp;codedeploy.GitHubLocation{
            CommitId:   aws.String(&amp;quot;kajdf94j0f9k309klksjdfkj&amp;quot;),
            Repository: aws.String(&amp;quot;Skarlso/furnace-codedeploy-app&amp;quot;),
        },
        RevisionType: aws.String(&amp;quot;GitHub&amp;quot;),
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Commit Id is the hash of the latest release and repository is the full account/repository pointing to the application.&lt;/p&gt;

&lt;h3 id=&#34;s3:52b375440f44edf06aa4d36a1fc3e0e4&#34;&gt;S3&lt;/h3&gt;

&lt;p&gt;The second way is to use an S3 bucket. The bucket will contain an archived version of the application with a given extension. I&amp;rsquo;m
saying given extension, because it has to be specified like this (and can be either &amp;lsquo;zip&amp;rsquo;, or &amp;lsquo;tar&amp;rsquo; or &amp;lsquo;tgz&amp;rsquo;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    rev = &amp;amp;codedeploy.RevisionLocation{
        S3Location: &amp;amp;codedeploy.S3Location{
            Bucket:     aws.String(&amp;quot;my_codedeploy_bucket&amp;quot;),
            BundleType: aws.String(&amp;quot;zip&amp;quot;),
            Key:        aws.String(&amp;quot;my_awesome_app&amp;quot;),
            Version:    aws.String(&amp;quot;VersionId&amp;quot;),
        },
        RevisionType: aws.String(&amp;quot;S3&amp;quot;),
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we specify the bucket name, the extension, the name of the file and an optional version id, which can be ignored.&lt;/p&gt;

&lt;h3 id=&#34;deploying:52b375440f44edf06aa4d36a1fc3e0e4&#34;&gt;Deploying&lt;/h3&gt;

&lt;p&gt;So how does code deploy get either of the applications to our EC2 instances? It uses an agent which is running on all of the
instances that we create. In order to do this, the agent needs to be present on our instance. For linux this can be achieved with
the following UserData (UserData in CF is the equivalent of a bootsrap script):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    &amp;quot;UserData&amp;quot; : {
        &amp;quot;Fn::Base64&amp;quot; : { &amp;quot;Fn::Join&amp;quot; : [ &amp;quot;\n&amp;quot;, [
            &amp;quot;#!/bin/bash -v&amp;quot;,
            &amp;quot;sudo yum -y update&amp;quot;,
            &amp;quot;sudo yum -y install ruby wget&amp;quot;,
            &amp;quot;cd /home/ec2-user/&amp;quot;,
            &amp;quot;wget https://aws-codedeploy-eu-central-1.s3.amazonaws.com/latest/install&amp;quot;,
            &amp;quot;chmod +x ./install&amp;quot;,
            &amp;quot;sudo ./install auto&amp;quot;,
            &amp;quot;sudo service codedeploy-agent start&amp;quot;,
        ] ] }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A simple user data configuration in the CloudFormation template will make sure that every instance that we create will have the
CodeDeploy agent running and waiting for instructions. This agent is self updating. Which can cause some trouble if AWS releases a
broken agent. However unlikely, it can happen. Never the less, once installed, it&amp;rsquo;s no longer a concern to be bothered with.&lt;/p&gt;

&lt;p&gt;It communications on HTTPS port 443.&lt;/p&gt;

&lt;p&gt;CodeDeploy identifies instances which need to be updated according to our preferences, by tagging the EC2 and Auto Scaling groups.
Tagging happens in the CloudFormation template through the AutoScalingGroup settings like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;    &amp;quot;Tags&amp;quot; : [
        {
            &amp;quot;Key&amp;quot; : &amp;quot;fu_stage&amp;quot;,
            &amp;quot;Value&amp;quot; : { &amp;quot;Ref&amp;quot;: &amp;quot;AWS::StackName&amp;quot; },
            &amp;quot;PropagateAtLaunch&amp;quot; : true
        }
    ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will give the EC2 instance a tag called &lt;code&gt;fu_stage&lt;/code&gt; with value equaling to the name of the stack. Once this is done, CodeDeploy
looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    params := &amp;amp;codedeploy.CreateDeploymentInput{
        ApplicationName:               aws.String(appName),
        IgnoreApplicationStopFailures: aws.Bool(true),
        DeploymentGroupName:           aws.String(appName + &amp;quot;DeploymentGroup&amp;quot;),
        Revision:                      revisionLocation(),
        TargetInstances: &amp;amp;codedeploy.TargetInstances{
            AutoScalingGroups: []*string{
                aws.String(&amp;quot;AutoScalingGroupPhysicalID&amp;quot;),
            },
            TagFilters: []*codedeploy.EC2TagFilter{
                {
                    Key:   aws.String(&amp;quot;fu_stage&amp;quot;),
                    Type:  aws.String(&amp;quot;KEY_AND_VALUE&amp;quot;),
                    Value: aws.String(config.STACKNAME),
                },
            },
        },
        UpdateOutdatedInstancesOnly: aws.Bool(false),
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CreateDeploymentInput is the entire parameter list that is needed in order to identify instances to deploy code to. We can see
here that it looks for an AutoScalingGroup by Physical Id and the tag labeled &lt;code&gt;fu_stage&lt;/code&gt;. Once found, it will use
&lt;code&gt;UpdateOutdatedInstancesOnly&lt;/code&gt; to determine if an instance needs to be updated or not. Set to false means, it always updates.&lt;/p&gt;

&lt;h1 id=&#34;furnace:52b375440f44edf06aa4d36a1fc3e0e4&#34;&gt;Furnace&lt;/h1&gt;

&lt;p&gt;Where does &lt;a href=&#34;https://github.com/Skarlso/go-furnace&#34;&gt;Furnace&lt;/a&gt; fit in, in all of this? Furnace provides a very easy mechanism to create,
delete and push code to a CloudFormation stack using CodeDeploy, and a couple of environment properties. Furnace &lt;code&gt;create&lt;/code&gt; will
create a CloudFormation stack according to the provided template, all the while asking for the parameters defined in it for
flexibility. &lt;code&gt;delete&lt;/code&gt; will remove the stack and all affiliated resources except for the created CodeDeploy application. For that,
there is &lt;code&gt;delete-application&lt;/code&gt;. &lt;code&gt;status&lt;/code&gt; will display information about the stack: Outputs, Parameters, Id, Name, and status.
Something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    2017/03/16 21:14:37 Stack state is:  {
      Capabilities: [&amp;quot;CAPABILITY_IAM&amp;quot;],
      CreationTime: 2017-03-16 20:09:38.036 +0000 UTC,
      DisableRollback: false,
      Outputs: [{
          Description: &amp;quot;URL of the website&amp;quot;,
          OutputKey: &amp;quot;URL&amp;quot;,
          OutputValue: &amp;quot;http://FurnaceSt-ElasticL-ID.eu-central-1.elb.amazonaws.com&amp;quot;
        }],
      Parameters: [
        {
          ParameterKey: &amp;quot;KeyName&amp;quot;,
          ParameterValue: &amp;quot;UserKeyPair&amp;quot;
        },
        {
          ParameterKey: &amp;quot;SSHLocation&amp;quot;,
          ParameterValue: &amp;quot;0.0.0.0/0&amp;quot;
        },
        {
          ParameterKey: &amp;quot;CodeDeployBucket&amp;quot;,
          ParameterValue: &amp;quot;None&amp;quot;
        },
        {
          ParameterKey: &amp;quot;InstanceType&amp;quot;,
          ParameterValue: &amp;quot;t2.nano&amp;quot;
        }
      ],
      StackId: &amp;quot;arn:aws:cloudformation:eu-central-1:9999999999999:stack/FurnaceStack/asdfadsf-adsfa3-432d-a-fdasdf&amp;quot;,
      StackName: &amp;quot;FurnaceStack&amp;quot;,
      StackStatus: &amp;quot;CREATE_COMPLETE&amp;quot;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;( This will later be improved to include created resources as well. )&lt;/p&gt;

&lt;p&gt;Once the stack is &lt;code&gt;CREATE_COMPLETE&lt;/code&gt; a simple &lt;code&gt;push&lt;/code&gt; will deliver our application on each instance in the stack. We will get into
more detail about how these commands are working in Part 2 of this series.&lt;/p&gt;

&lt;h1 id=&#34;final-words:52b375440f44edf06aa4d36a1fc3e0e4&#34;&gt;Final Words&lt;/h1&gt;

&lt;p&gt;This is it for now.&lt;/p&gt;

&lt;p&gt;Join me next time when I will talk about the AWS Go SDK and its intricacies and we will start to look at the basics of Furnace.&lt;/p&gt;

&lt;p&gt;As always,
Thanks for reading!
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to do Google Sign-In with Go - Part 2</title>
      <link>https://skarlso.github.io/2016/11/02/google-signin-with-go-part2</link>
      <pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/11/02/google-signin-with-go-part2</guid>
      <description>

&lt;h1 id=&#34;intro:7e8bd68702abc21a05d48f308da8e649&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Hi Folks.&lt;/p&gt;

&lt;p&gt;This is a follow up on my previous post about Google Sign-In. In this post we will discover what to do with the information retrieved in the first encounter, which you can find here: &lt;a href=&#34;http://skarlso.github.io/2016/06/12/google-signin-with-go/&#34;&gt;Google Sign-In Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;forewords:7e8bd68702abc21a05d48f308da8e649&#34;&gt;Forewords&lt;/h1&gt;

&lt;h2 id=&#34;the-project:7e8bd68702abc21a05d48f308da8e649&#34;&gt;The Project&lt;/h2&gt;

&lt;p&gt;Everything I did in the first post, and that I&amp;rsquo;m going to do in this example, can be found in this project: &lt;a href=&#34;https://github.com/Skarlso/google-oauth-go-sample&#34;&gt;Google-OAuth-Go-Sample&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just to recap, we left off previously on the point where we successfully obtained information about the user, with a secure token and a session initiated with them. Google nicely enough provided us with some details which we can use. This information was in JSON format and looked something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;sub&amp;quot;: &amp;quot;1111111111111111111111&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;Your Name&amp;quot;,
  &amp;quot;given_name&amp;quot;: &amp;quot;Your&amp;quot;,
  &amp;quot;family_name&amp;quot;: &amp;quot;Name&amp;quot;,
  &amp;quot;profile&amp;quot;: &amp;quot;https://plus.google.com/1111111111111111111111&amp;quot;,
  &amp;quot;picture&amp;quot;: &amp;quot;https://lh3.googleusercontent.com/asdfadsf/AAAAAAAAAAI/Aasdfads/Xasdfasdfs/photo.jpg&amp;quot;,
  &amp;quot;email&amp;quot;: &amp;quot;your@gmail.com&amp;quot;,
  &amp;quot;email_verified&amp;quot;: true,
  &amp;quot;gender&amp;quot;: &amp;quot;male&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my example, to keep things simple, I will use the email address since that has to be unique in the land of Google. You could assign an ID to the user, and you could complicate things even further, but my goal is not to write an academic paper about cryptography here.&lt;/p&gt;

&lt;h1 id=&#34;implementation:7e8bd68702abc21a05d48f308da8e649&#34;&gt;Implementation&lt;/h1&gt;

&lt;h2 id=&#34;making-something-useful-out-of-the-data:7e8bd68702abc21a05d48f308da8e649&#34;&gt;Making something useful out of the data&lt;/h2&gt;

&lt;p&gt;In order for the app to recognise a user it must save some data about the user. I&amp;rsquo;m doing that in MongoDB right now, but that could be any form of persistence layer, like, SQLite3, BoltDB, PostgresDB, etc.&lt;/p&gt;

&lt;h3 id=&#34;after-successful-user-authorization:7e8bd68702abc21a05d48f308da8e649&#34;&gt;After successful user authorization&lt;/h3&gt;

&lt;p&gt;Once the user used google to provide us with sufficient information about him/herself, we can retrieve data about that user from our records. The data could be anything that is linked to our unique identifier like: Character Profile, Player Information, Status, Last Logged-In, etcetc. For this, there are two things that need to happen after authorization: Save/Load user information and initiate a session.&lt;/p&gt;

&lt;p&gt;The session can be in the form of a cookie, or a Redis storage, or URL re-writing. I&amp;rsquo;m choosing a cookie here.&lt;/p&gt;

&lt;h3 id=&#34;save-load-user-information:7e8bd68702abc21a05d48f308da8e649&#34;&gt;Save / Load user information&lt;/h3&gt;

&lt;p&gt;All I&amp;rsquo;m doing is a simple, &lt;em&gt;returning / new&lt;/em&gt; user handling. The concept is simple. If the email isn&amp;rsquo;t saved, we save it. If it&amp;rsquo;s saved, we set a logic to our page render to greet the returning user.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;AuthHandler&lt;/code&gt; I&amp;rsquo;m doing the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;...
seen := false
db := database.MongoDBConnection{}
if _, mongoErr := db.LoadUser(u.Email); mongoErr == nil {
    seen = true
} else {
    err = db.SaveUser(&amp;amp;u)
    if err != nil {
        log.Println(err)
        c.HTML(http.StatusBadRequest, &amp;quot;error.tmpl&amp;quot;, gin.H{&amp;quot;message&amp;quot;: &amp;quot;Error while saving user. Please try again.&amp;quot;})
        return
    }
}
c.HTML(http.StatusOK, &amp;quot;battle.tmpl&amp;quot;, gin.H{&amp;quot;email&amp;quot;: u.Email, &amp;quot;seen&amp;quot;: seen})
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s break this down a bit. There is a db connection here, which calls a function that either returns an error, or it doesn&amp;rsquo;t. If it doesn&amp;rsquo;t, that means we have our user. If it does, it means we have to save the user. This is a very simple case (disregard for now, that the error could be something else as well (If you can&amp;rsquo;t get passed that, you could type check the error or check if the returned record contains the requested user information instead of checking for an error.)).&lt;/p&gt;

&lt;p&gt;The template is than rendered depending on the &lt;code&gt;seen&lt;/code&gt; boolean like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;link rel=&amp;quot;icon&amp;quot;
      type=&amp;quot;image/png&amp;quot;
      href=&amp;quot;/img/favicon.ico&amp;quot; /&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/main.css&amp;quot;&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    {{if .seen}}
        &amp;lt;h1&amp;gt;Welcome back to the battlefield &#39;{{ .email }}&#39;.&amp;lt;/h1&amp;gt;
    {{else}}
        &amp;lt;h1&amp;gt;Welcome to the battlefield &#39;{{ .email }}&#39;.&amp;lt;/h1&amp;gt;
    {{end}}
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see here, that if &lt;code&gt;seen&lt;/code&gt; is &lt;em&gt;true&lt;/em&gt; the header message will say: &amp;ldquo;Welcome &lt;em&gt;back&lt;/em&gt;&amp;hellip;&amp;ldquo;.&lt;/p&gt;

&lt;h3 id=&#34;initiating-a-session:7e8bd68702abc21a05d48f308da8e649&#34;&gt;Initiating a session&lt;/h3&gt;

&lt;p&gt;When the user is successfully authenticated, we activate a session so that the user can access pages that require authorization. Here, I have to mention that I&amp;rsquo;m using &lt;a href=&#34;https://github.com/gin-gonic/gin&#34;&gt;Gin&lt;/a&gt;, so restricted end-points are made with groups which require a middleware.&lt;/p&gt;

&lt;p&gt;As I mentioned earlier, I&amp;rsquo;m using cookies as session handlers. For this, a new session store has to be created with some secure token. This is achieved with the following code fragments ( note that I&amp;rsquo;m using a Gin session middleware which uses gorilla&amp;rsquo;s session handler located here: &lt;a href=&#34;https://github.com/gin-gonic/contrib&#34;&gt;Gin-Gonic(Sessions)&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// RandToken in handlers.go:
// RandToken generates a random @l length token.
func RandToken(l int) string {
	b := make([]byte, l)
	rand.Read(b)
	return base64.StdEncoding.EncodeToString(b)
}

// quest.go:
// Create the cookie store in main.go.
store := sessions.NewCookieStore([]byte(handlers.RandToken(64)))
store.Options(sessions.Options{
    Path:   &amp;quot;/&amp;quot;,
    MaxAge: 86400 * 7,
})

// using the cookie store:
router.Use(sessions.Sessions(&amp;quot;goquestsession&amp;quot;, store))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this &lt;code&gt;gin.Context&lt;/code&gt; lets us access this session store by doing &lt;code&gt;session := sessions.Default(c)&lt;/code&gt;. Now, create a session variable called &lt;code&gt;user-id&lt;/code&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;session.Set(&amp;quot;user-id&amp;quot;, u.Email)
err = session.Save()
if err != nil {
    log.Println(err)
    c.HTML(http.StatusBadRequest, &amp;quot;error.tmpl&amp;quot;, gin.H{&amp;quot;message&amp;quot;: &amp;quot;Error while saving session. Please try again.&amp;quot;})
    return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;rsquo;t forget to &lt;code&gt;save&lt;/code&gt; the session. ;) That is it. If I restart the server, the cookie won&amp;rsquo;t be usable any longer, since it will generate a new token for the cookie store. The user will have to log in again. &lt;strong&gt;Note&lt;/strong&gt;: It might be that you&amp;rsquo;ll see something like this, from &lt;code&gt;session&lt;/code&gt;: &lt;code&gt;[sessions] ERROR! securecookie: the value is not valid&lt;/code&gt;. You can ignore this error.&lt;/p&gt;

&lt;h2 id=&#34;restricting-access-to-certain-end-points-with-the-auth-middleware:7e8bd68702abc21a05d48f308da8e649&#34;&gt;Restricting access to certain end-points with the auth Middleware™&lt;/h2&gt;

&lt;p&gt;Now, that our session is alive, we can use it to restrict access to some part of the application. With Gin, it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;authorized := router.Group(&amp;quot;/battle&amp;quot;)
authorized.Use(middleware.AuthorizeRequest())
{
    authorized.GET(&amp;quot;/field&amp;quot;, handlers.FieldHandler)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a grouping of end-points under &lt;code&gt;/battle&lt;/code&gt;. Which means, everything under &lt;code&gt;/battle&lt;/code&gt; will only be accessible if the middleware passed to the &lt;code&gt;Use&lt;/code&gt; function calls the next handler in the chain. If it aborts the call chain, the end-point will not be accessible. My middleware is pretty simple, but it gets the job done:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// AuthorizeRequest is used to authorize a request for a certain end-point group.
func AuthorizeRequest() gin.HandlerFunc {
	return func(c *gin.Context) {
		session := sessions.Default(c)
		v := session.Get(&amp;quot;user-id&amp;quot;)
		if v == nil {
			c.HTML(http.StatusUnauthorized, &amp;quot;error.tmpl&amp;quot;, gin.H{&amp;quot;message&amp;quot;: &amp;quot;Please log in.&amp;quot;})
			c.Abort()
		}
		c.Next()
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note, that this only check if &lt;code&gt;user-id&lt;/code&gt; is set or not. That&amp;rsquo;s certainly not enough for a secure application. Its only supposed to be a simple example of the mechanics of the auth middleware. Also, the session usually contains more than one parameter. It&amp;rsquo;s more likely that it contains several variables, which describe the user including a state for CORS protection. For CORS I&amp;rsquo;d recommend using &lt;a href=&#34;https://github.com/rs/cors&#34;&gt;rs/cors&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you would try to access &lt;a href=&#34;http://127.0.0.1:9090/battle/field&#34;&gt;http://127.0.0.1:9090/battle/field&lt;/a&gt; without logging in, you&amp;rsquo;d be redirected to an &lt;code&gt;error.tmpl&lt;/code&gt; with the message: &lt;strong&gt;Please log in.&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&#34;final-words:7e8bd68702abc21a05d48f308da8e649&#34;&gt;Final Words&lt;/h1&gt;

&lt;p&gt;That&amp;rsquo;s pretty much it. Important parts are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Saving the right information&lt;/li&gt;
&lt;li&gt;Secure cookie store&lt;/li&gt;
&lt;li&gt;CORS for sessions&lt;/li&gt;
&lt;li&gt;Checks of the users details in the cookie&lt;/li&gt;
&lt;li&gt;Authorised end-points&lt;/li&gt;
&lt;li&gt;Session handling&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any questions, remarks, ideas, are very welcomed in the comment section. There are plenty of very nice Go frameworks which do Google OAuth2 out of the box. I recommend using them, as they save you a lot of legwork.&lt;/p&gt;

&lt;p&gt;Thank you for reading!
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to do Google sign-in with Go</title>
      <link>https://skarlso.github.io/2016/06/12/google-signin-with-go</link>
      <pubDate>Sun, 12 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2016/06/12/google-signin-with-go</guid>
      <description>

&lt;p&gt;Hi folks.&lt;/p&gt;

&lt;p&gt;Today, I would like to write up a step - by - step guide with a sample web app on how to do Google Sign-In and authorization.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get started.&lt;/p&gt;

&lt;h1 id=&#34;setup:6f9705630beead3fa159d01f76fa355d&#34;&gt;Setup&lt;/h1&gt;

&lt;h2 id=&#34;google-oauth-token:6f9705630beead3fa159d01f76fa355d&#34;&gt;Google OAuth token&lt;/h2&gt;

&lt;p&gt;First what you need is, to register your application with Google, so you&amp;rsquo;ll get a Token that you can use to authorize later calls to Google services.&lt;/p&gt;

&lt;p&gt;You can do that here: &lt;a href=&#34;https://console.developers.google.com/iam-admin/projects&#34;&gt;Google Developer Console&lt;/a&gt;. You&amp;rsquo;ll have to create a new project. Once it&amp;rsquo;s done, click on &lt;code&gt;Credentials&lt;/code&gt; and create an OAuth token. You should see something like this: &amp;ldquo;To create an OAuth client ID, you must first set a product name on the consent screen.&amp;rdquo;. Go through the questions, like, what type your application is, and once you arrive at stage where it&amp;rsquo;s asking for your application&amp;rsquo;s name &amp;ndash; there is a section asking for redirect URLs; there, write the url you wish to use when authorising your user. If you don&amp;rsquo;t know this yet, don&amp;rsquo;t fret, you can come back and change it later. Do NOT use &lt;code&gt;localhost&lt;/code&gt;. If you are running on your own, use &lt;a href=&#34;http://127.0.0.1:port/whatever&#34;&gt;http://127.0.0.1:port/whatever&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This will get you a &lt;code&gt;client ID&lt;/code&gt; and a &lt;code&gt;client secret&lt;/code&gt;. I&amp;rsquo;m going to save these into a file which will sit next to my web app. It could be stored more securely, for example, in a database or a mounted secure, encrypted drive, and so and so forth.&lt;/p&gt;

&lt;p&gt;Your application can now be identified through Google services.&lt;/p&gt;

&lt;h1 id=&#34;the-application:6f9705630beead3fa159d01f76fa355d&#34;&gt;The Application&lt;/h1&gt;

&lt;h2 id=&#34;libraries:6f9705630beead3fa159d01f76fa355d&#34;&gt;Libraries&lt;/h2&gt;

&lt;p&gt;Google has a nice library to use with OAuth 2.0. The library is available here: &lt;a href=&#34;https://github.com/golang/oauth2&#34;&gt;Google OAth 2.0&lt;/a&gt;. It&amp;rsquo;s a bit cryptic at first, but not to worry. After a bit of fiddling you&amp;rsquo;ll understand fast what it does. I&amp;rsquo;m also using &lt;a href=&#34;https://github.com/gin-gonic/gin&#34;&gt;Gin&lt;/a&gt;, and Gin&amp;rsquo;s session handling middleware &lt;a href=&#34;https://github.com/gin-gonic/contrib/tree/master/sessions&#34;&gt;Gin-Session&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;setup-credentials:6f9705630beead3fa159d01f76fa355d&#34;&gt;Setup - Credentials&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s create a setup which configures your credentials from the file you saved earlier. This is pretty straightforward.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Credentials which stores google ids.
type Credentials struct {
    Cid string `json:&amp;quot;cid&amp;quot;`
    Csecret string `json:&amp;quot;csecret&amp;quot;`
}

func init() {
    var c Credentials
    file, err := ioutil.ReadFile(&amp;quot;./creds.json&amp;quot;)
    if err != nil {
        fmt.Printf(&amp;quot;File error: %v\n&amp;quot;, err)
        os.Exit(1)
    }
    json.Unmarshal(file, &amp;amp;c)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have the creds loaded, you can now go on to construct the OAuth client.&lt;/p&gt;

&lt;h2 id=&#34;setup-oauth-client:6f9705630beead3fa159d01f76fa355d&#34;&gt;Setup - OAuth client&lt;/h2&gt;

&lt;p&gt;Construct the OAuth config like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;conf := &amp;amp;oauth2.Config{
  ClientID:     c.Cid,
  ClientSecret: c.Csecret,
  RedirectURL:  &amp;quot;http://localhost:9090/auth&amp;quot;,
  Scopes: []string{
    &amp;quot;https://www.googleapis.com/auth/userinfo.email&amp;quot;, // You have to select your own scope from here -&amp;gt; https://developers.google.com/identity/protocols/googlescopes#google_sign-in
  },
  Endpoint: google.Endpoint,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will give you a struct which you can then use to Authorize the user in the google domain. Next, all you need to do is call &lt;code&gt;AuthCodeURL&lt;/code&gt; on this config. It will give you a URL which redirects to a Google Sign-In form. Once the user fills that out and clicks &amp;lsquo;Allow&amp;rsquo;, you&amp;rsquo;ll get back a TOKEN in the &lt;code&gt;code&lt;/code&gt; query parameter and a &lt;code&gt;state&lt;/code&gt; which helps protect against CSRF attacks. Always check if the provided state is the same which you provided with AuthCodeURL. This will look something like this &lt;code&gt;http://127.0.0.1:9090/auth?code=4FLKFskdjflf3343d4f&amp;amp;state=lhfu3f983j;asdf&lt;/code&gt;. Small function for this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func getLoginURL(state string) string {
    // State can be some kind of random generated hash string.
    // See relevant RFC: http://tools.ietf.org/html/rfc6749#section-10.12
    return conf.AuthCodeURL(state)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Construct a button which the user can click and be redirected to the Google Sign-In form. When constructing the url, we must do one more thing. Create a secure state token and save it in the form of a cookie for the current user.&lt;/p&gt;

&lt;h2 id=&#34;random-state-and-button-construction:6f9705630beead3fa159d01f76fa355d&#34;&gt;Random State and Button construction&lt;/h2&gt;

&lt;p&gt;Small piece of code random token:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func randToken() string {
	b := make([]byte, 32)
	rand.Read(b)
	return base64.StdEncoding.EncodeToString(b)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Storing it in a session and constructing the button:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func loginHandler(c *gin.Context) {
    state = randToken()
    session := sessions.Default(c)
    session.Set(&amp;quot;state&amp;quot;, state)
    session.Save()
    c.Writer.Write([]byte(&amp;quot;&amp;lt;html&amp;gt;&amp;lt;title&amp;gt;Golang Google&amp;lt;/title&amp;gt; &amp;lt;body&amp;gt; &amp;lt;a href=&#39;&amp;quot; + getLoginURL() + &amp;quot;&#39;&amp;gt;&amp;lt;button&amp;gt;Login with Google!&amp;lt;/button&amp;gt; &amp;lt;/a&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s not the nicest button I ever come up with, but it will have to do.&lt;/p&gt;

&lt;h1 id=&#34;user-information:6f9705630beead3fa159d01f76fa355d&#34;&gt;User Information&lt;/h1&gt;

&lt;p&gt;After you got the token, you can construct an authorised Google HTTP Client, which let&amp;rsquo;s you call Google related services and retrieve information about the user.&lt;/p&gt;

&lt;h2 id=&#34;getting-the-client:6f9705630beead3fa159d01f76fa355d&#34;&gt;Getting the Client&lt;/h2&gt;

&lt;p&gt;Before we construct a client, we must check if the retrieved state is still the same compared to the one we provided. I&amp;rsquo;m doing this before constructing the client. Together this looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func authHandler(c *gin.Context) {
    // Check state validity.
    session := sessions.Default(c)
    retrievedState := session.Get(&amp;quot;state&amp;quot;)
    if retrievedState != c.Query(&amp;quot;state&amp;quot;) {
        c.AbortWithError(http.StatusUnauthorized, fmt.Errorf(&amp;quot;Invalid session state: %s&amp;quot;, retrievedState))
        return
    }
    // Handle the exchange code to initiate a transport.
  	tok, err := conf.Exchange(oauth2.NoContext, c.Query(&amp;quot;code&amp;quot;))
  	if err != nil {
  		c.AbortWithError(http.StatusBadRequest, err)
          return
  	}
    // Construct the client.
    client := conf.Client(oauth2.NoContext, tok)
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;obtaining-information:6f9705630beead3fa159d01f76fa355d&#34;&gt;Obtaining information&lt;/h2&gt;

&lt;p&gt;Our next step is to retrieve information about the user. To achieve this, call Google&amp;rsquo;s API with the authorised client. The code for that is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;...
resp, err := client.Get(&amp;quot;https://www.googleapis.com/oauth2/v3/userinfo&amp;quot;)
if err != nil {
    c.AbortWithError(http.StatusBadRequest, err)
    return
}
defer resp.Body.Close()
data, _ := ioutil.ReadAll(resp.Body)
log.Println(&amp;quot;Resp body: &amp;quot;, string(data))
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this will yield a body like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;sub&amp;quot;: &amp;quot;1111111111111111111111&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;Your Name&amp;quot;,
  &amp;quot;given_name&amp;quot;: &amp;quot;Your&amp;quot;,
  &amp;quot;family_name&amp;quot;: &amp;quot;Name&amp;quot;,
  &amp;quot;profile&amp;quot;: &amp;quot;https://plus.google.com/1111111111111111111111&amp;quot;,
  &amp;quot;picture&amp;quot;: &amp;quot;https://lh3.googleusercontent.com/asdfadsf/AAAAAAAAAAI/Aasdfads/Xasdfasdfs/photo.jpg&amp;quot;,
  &amp;quot;email&amp;quot;: &amp;quot;your@gmail.com&amp;quot;,
  &amp;quot;email_verified&amp;quot;: true,
  &amp;quot;gender&amp;quot;: &amp;quot;male&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Parse it, and you&amp;rsquo;ve got an email which you can store somewhere for registration purposes. At this point, your user is not yet Authenticated. For that, I&amp;rsquo;m going to post a second post, which describes how to go on. Retrieving the stored email address, and user session handling with Gin and MongoDB.&lt;/p&gt;

&lt;h1 id=&#34;putting-it-all-together:6f9705630beead3fa159d01f76fa355d&#34;&gt;Putting it all together&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;crypto/rand&amp;quot;
    &amp;quot;encoding/base64&amp;quot;
    &amp;quot;encoding/json&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;os&amp;quot;
    &amp;quot;net/http&amp;quot;

    &amp;quot;github.com/gin-gonic/contrib/sessions&amp;quot;
    &amp;quot;github.com/gin-gonic/gin&amp;quot;
    &amp;quot;golang.org/x/oauth2&amp;quot;
    &amp;quot;golang.org/x/oauth2/google&amp;quot;
)

// Credentials which stores google ids.
type Credentials struct {
    Cid     string `json:&amp;quot;cid&amp;quot;`
    Csecret string `json:&amp;quot;csecret&amp;quot;`
}

// User is a retrieved and authentiacted user.
type User struct {
    Sub string `json:&amp;quot;sub&amp;quot;`
    Name string `json:&amp;quot;name&amp;quot;`
    GivenName string `json:&amp;quot;given_name&amp;quot;`
    FamilyName string `json:&amp;quot;family_name&amp;quot;`
    Profile string `json:&amp;quot;profile&amp;quot;`
    Picture string `json:&amp;quot;picture&amp;quot;`
    Email string `json:&amp;quot;email&amp;quot;`
    EmailVerified string `json:&amp;quot;email_verified&amp;quot;`
    Gender string `json:&amp;quot;gender&amp;quot;`
}

var cred Credentials
var conf *oauth2.Config
var state string
var store = sessions.NewCookieStore([]byte(&amp;quot;secret&amp;quot;))

func randToken() string {
	b := make([]byte, 32)
	rand.Read(b)
	return base64.StdEncoding.EncodeToString(b)
}

func init() {
    file, err := ioutil.ReadFile(&amp;quot;./creds.json&amp;quot;)
    if err != nil {
        log.Printf(&amp;quot;File error: %v\n&amp;quot;, err)
        os.Exit(1)
    }
    json.Unmarshal(file, &amp;amp;cred)

    conf = &amp;amp;oauth2.Config{
        ClientID:     cred.Cid,
        ClientSecret: cred.Csecret,
        RedirectURL:  &amp;quot;http://127.0.0.1:9090/auth&amp;quot;,
        Scopes: []string{
            &amp;quot;https://www.googleapis.com/auth/userinfo.email&amp;quot;, // You have to select your own scope from here -&amp;gt; https://developers.google.com/identity/protocols/googlescopes#google_sign-in
        },
        Endpoint: google.Endpoint,
    }
}

func indexHandler(c *gin.Context) {
    c.HTML(http.StatusOK, &amp;quot;index.tmpl&amp;quot;, gin.H{})
}

func getLoginURL(state string) string {
    return conf.AuthCodeURL(state)
}

func authHandler(c *gin.Context) {
    // Handle the exchange code to initiate a transport.
    session := sessions.Default(c)
    retrievedState := session.Get(&amp;quot;state&amp;quot;)
    if retrievedState != c.Query(&amp;quot;state&amp;quot;) {
        c.AbortWithError(http.StatusUnauthorized, fmt.Errorf(&amp;quot;Invalid session state: %s&amp;quot;, retrievedState))
        return
    }

	tok, err := conf.Exchange(oauth2.NoContext, c.Query(&amp;quot;code&amp;quot;))
	if err != nil {
		c.AbortWithError(http.StatusBadRequest, err)
        return
	}

	client := conf.Client(oauth2.NoContext, tok)
	email, err := client.Get(&amp;quot;https://www.googleapis.com/oauth2/v3/userinfo&amp;quot;)
    if err != nil {
		c.AbortWithError(http.StatusBadRequest, err)
        return
	}
    defer email.Body.Close()
    data, _ := ioutil.ReadAll(email.Body)
    log.Println(&amp;quot;Email body: &amp;quot;, string(data))
    c.Status(http.StatusOK)
}

func loginHandler(c *gin.Context) {
    state = randToken()
    session := sessions.Default(c)
    session.Set(&amp;quot;state&amp;quot;, state)
    session.Save()
    c.Writer.Write([]byte(&amp;quot;&amp;lt;html&amp;gt;&amp;lt;title&amp;gt;Golang Google&amp;lt;/title&amp;gt; &amp;lt;body&amp;gt; &amp;lt;a href=&#39;&amp;quot; + getLoginURL(state) + &amp;quot;&#39;&amp;gt;&amp;lt;button&amp;gt;Login with Google!&amp;lt;/button&amp;gt; &amp;lt;/a&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;))
}

func main() {
    router := gin.Default()
    router.Use(sessions.Sessions(&amp;quot;goquestsession&amp;quot;, store))
    router.Static(&amp;quot;/css&amp;quot;, &amp;quot;./static/css&amp;quot;)
    router.Static(&amp;quot;/img&amp;quot;, &amp;quot;./static/img&amp;quot;)
    router.LoadHTMLGlob(&amp;quot;templates/*&amp;quot;)

    router.GET(&amp;quot;/&amp;quot;, indexHandler)
    router.GET(&amp;quot;/login&amp;quot;, loginHandler)
    router.GET(&amp;quot;/auth&amp;quot;, authHandler)

    router.Run(&amp;quot;127.0.0.1:9090&amp;quot;)
}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is it folks. I hope this helped. Any comments or advices are welcomed.&lt;/p&gt;

&lt;h1 id=&#34;google-api-documentation:6f9705630beead3fa159d01f76fa355d&#34;&gt;Google API Documentation&lt;/h1&gt;

&lt;p&gt;The documentation to this whole process, and MUCH more information can be found here: &lt;a href=&#34;https://developers.google.com/identity/protocols/OAuth2&#34;&gt;Google API Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading,
Gergely.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>