<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/javascript/</link>
    <description>Recent content in JavaScript on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 01 Feb 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://skarlso.github.io/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building an RPG App with Meteor – Part One – The struggle</title>
      <link>https://skarlso.github.io/2015/02/01/building-an-rpg-app-with-meteor-part-one-the-struggle/</link>
      <pubDate>Sun, 01 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/02/01/building-an-rpg-app-with-meteor-part-one-the-struggle/</guid>
      <description>&lt;p&gt;In my previous post, I was getting ready to enjoy some time with the JavaScript web framework Meteor.&lt;/p&gt;
&lt;p&gt;This time I would like to bring it to a bit of overdrive. See, how re-factoring works on a larger scale model with multiple pages. And how it can organize assets, such as, images, multiple CSS, some plugins, you know, ordinary web stuff.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s dive in.&lt;/p&gt;</description>
      <content type="html"><![CDATA[<p>In my previous post, I was getting ready to enjoy some time with the JavaScript web framework Meteor.</p>
<p>This time I would like to bring it to a bit of overdrive. See, how re-factoring works on a larger scale model with multiple pages. And how it can organize assets, such as, images, multiple CSS, some plugins, you know, ordinary web stuff.</p>
<p>Let&rsquo;s dive in.</p>
<p>I&rsquo;m planning this to be a series of posts as I&rsquo;m going along building up my RPG app. Let&rsquo;s define the rules.</p>
<h1 id="in-the-beginning">In the beginning</h1>
<h3 id="heading"></h3>
<h3 id="rules">Rules</h3>
<p> </p>
<h4 id="inventory">Inventory</h4>
<p> </p>
<p>Our main character will have a basic inventory. He will have space to carry stuff around and a body to put stuff on. One ring on each hand, one weapon in each hand, helmet, armour, legs, and a necklace. That&rsquo;s it. For simplicities sake. The game mechanics will be like those old books which you could play, Fighting RPG Books, like the one Ian Livingstone was writing. This is one of my favourites; Robot commando:</p>
<h4 id="stats">Stats</h4>
<p>A very basic stat system.</p>
<ul>
<li>Strength</li>
<li>Agility</li>
<li>Constitution</li>
<li>Intelligence</li>
<li>Magic</li>
</ul>
<p> </p>
<h4 id="fighting">Fighting</h4>
<p> </p>
<p>A very basic fighting system with the possibility of casting magic which, for simplicity, will count as attacks and can be dodged based on agility.</p>
<p>Let&rsquo;s say we have dice throwing with a couple of 6 sided ones. So X * 6 sided dice. Dodging will require agility, HP is defined by constitution, Intelligence will help in puzzles which require a throw against intelligence, Magic will define Mana Points.</p>
<p>Simple, right?</p>
<h3 id="design">Design</h3>
<p>I&rsquo;m not much of a front-end developer, so I don&rsquo;t really care about how it will look like. I&rsquo;ll try to squeeze in some very basic stuff, like ordering, but that&rsquo;s it.</p>
<h3 id="game-play">Game Play</h3>
<p> </p>
<p>Basically there will be a story which can be loaded threw a JSON structured file. The file will hold information about what a current page has. The probable things a page can contain at any given time:</p>
<ul>
<li>Current location description</li>
<li>Selectable proceed location ( page number )</li>
<li>Enemy -&gt; Fight ( Might contain an option to not to attack the beast )</li>
<li>Riddle -&gt; Solving it is determined by a throw against intelligence</li>
<li>Trap -&gt; Springing it is determined by a throw against agility</li>
<li>Lootable items</li>
<li>Death</li>
</ul>
<p>All of the above define an action that a player can, or HAS to take. If there is no ability to choose the player has to proceed as the page requests it. That might be easier to do if I just say if there is only one possible choose it&rsquo;s choosen automatically for you.</p>
<h1 id="implementation">Implementation</h1>
<p> </p>
<p>I&rsquo;ll be using Meteor which is based on Node and MongoDB. Hence, my stuff will be in mongoDB. I have a fair knowledge of how mongodb works, I&rsquo;ll write down my progress as I go along.</p>
<p>Everything I&rsquo;ll do is of course under version control and can be followed here:</p>
<p><a href="https://github.com/Skarlso/coolrpgapp" target="_blank"><a href="https://github.com/Skarlso/coolrpgapp">https://github.com/Skarlso/coolrpgapp</a></a></p>
<h4 id="character">Character</h4>
<p> </p>
<p>I need to be able to create a character with a name. Meaning, I need to figure out how meteor handles input. I already know that it uses templates and <a href="https://github.com/meteor/meteor/blob/devel/packages/spacebars/README.md" target="_blank">Spacebars Compiler</a>. So what I want at this point is to enter a username and then click a button which will direct me to the story page. Simple, right.?</p>
<p>For data handling we will use Meteor&rsquo;s <a href="https://www.meteor.com/try/3" target="_blank">Collections</a>.</p>
<p>Using a form to submit the username looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript">
<span class="nx">Usernames</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Mongo</span><span class="p">.</span><span class="nx">Collection</span><span class="p">(</span><span class="s2">&#34;usernames&#34;</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">Meteor</span><span class="p">.</span><span class="nx">isClient</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">Template</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">events</span><span class="p">({</span>
    <span class="s2">&#34;submit .new-user&#34;</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// This function is called when the new task form is submitted
</span><span class="c1"></span>
      <span class="kd">var</span> <span class="nx">username</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">username</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>

      <span class="nx">Usernames</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span>
        <span class="nx">username</span><span class="o">:</span> <span class="nx">username</span><span class="p">,</span>
        <span class="nx">createdAt</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span> <span class="c1">// current time
</span><span class="c1"></span>      <span class="p">});</span>

      <span class="c1">// Clear form
</span><span class="c1"></span>      <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">username</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="p">;</span>

      <span class="c1">// Prevent default form submit
</span><span class="c1"></span>      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">Meteor</span><span class="p">.</span><span class="nx">isServer</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">Meteor</span><span class="p">.</span><span class="nx">startup</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// code to run on server at startup
</span><span class="c1"></span>  <span class="p">});</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Of course there is no way to know if that actually succeeded so far unless I get a look at the DB. Navigate to the folder of your app and type in:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">meteor mongo
</code></pre></td></tr></table>
</div>
</div><p>This will open a console to your database where you can query it like you would normally do with a mongodb console. Hence for me it&rsquo;s:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">
db.usernames.find<span class="o">()</span> <span class="c1"># which return this -&gt;</span>
meteor:PRIMARY&gt;<span class="p">;</span> db.usernames.find<span class="o">()</span>
<span class="o">{</span> <span class="s2">&#34;username&#34;</span> : <span class="s2">&#34;olaf&#34;</span>, <span class="s2">&#34;createdAt&#34;</span> : ISODate<span class="o">(</span><span class="s2">&#34;2015-02-01T16:58:24.100Z&#34;</span><span class="o">)</span>, <span class="s2">&#34;_id&#34;</span> : <span class="s2">&#34;MS67d95ShFkc3yHiX&#34;</span> <span class="o">}</span>
<span class="o">{</span> <span class="s2">&#34;username&#34;</span> : <span class="s2">&#34;skarlso&#34;</span>, <span class="s2">&#34;createdAt&#34;</span> : ISODate<span class="o">(</span><span class="s2">&#34;2015-02-01T16:59:18.792Z&#34;</span><span class="o">)</span>, <span class="s2">&#34;_id&#34;</span> : <span class="s2">&#34;ig8DJngmGKLca2dqS&#34;</span> <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>As you can see, I already have two characters in the system. This is so far very easy but it does not redirect me to a new page displaying the beginning of my journey. Let&rsquo;s try a redirect.</p>
<h1 id="complications">Complications</h1>
<p>Turns out it&rsquo;s not that easy to get a redirect going. If I would be a beginner at this, I would give up right now and move on. The guide, or the tutorial does not contain any HINTS at least that I have to use a different method if I want a multi-layered multi-paged app. Of course Meteor provides a built in, easy to use, easy to add, answer-to-everything-you-ever-would-want-to-do, Login feature. But guys, it&rsquo;s not useful. I would go as far as say it&rsquo;s completely useless. Do you actually know someone who uses it? I would never use a built in something which is completely hidden from me and have no idea what it does. The ability to control what&rsquo;s happening is THE most important thing in every developers life.</p>
<p>So after I did a bit of digging and StackOverflowing ( which replaces the tutorial AND the user guide (and is a trademarked expression)), I found out that you can add <a href="https://atmospherejs.com/cmather/iron-router" target="_blank">Iron-Router</a> which was built specifically for this purpose.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">meteor add iron:router
</code></pre></td></tr></table>
</div>
</div><p>So all of a sudden my Page is completely screwed up with Iron Router information. Again, there is no information on this on Meteors page or in the guide nor in the COMPLETE guide so, I&rsquo;m left Googling.</p>
<p>A very helpful StackOverflow ( again, and I&rsquo;m wondering why people don&rsquo;t bother with the guide in the first place just go to stackoverflow straight ) answer explains to me the following:</p>
<p>&ldquo;<em>You have to define a subscription handle (an object returned by Meteor.subscribe) in order to use it&rsquo;s reactive ready method : we&rsquo;ll reference it in the myDataIsReady helper to track data availability, and the helper will automatically rerun when the state of ready changes.</em>&rdquo;</p>
<p>Okay, so subscriptions are mentioned in the SECURITY section of the guide regarding detecting specific users and private data and so on and so forth. All right so that&rsquo;s used by iron routing as well which means I have to build that in, and not to mention first of all understanding how Iron Router works.</p>
<p>I&rsquo;m going to stop here now. After spending a couple of hours I can determine that this stuff is not intuitive and &ldquo;easy&rdquo;. I don&rsquo;t know enough about JavaScript and redirecting and Iron Router to be able to use Meteor out of the box. Which means I have to educate myself a bit before returning to this stuff.</p>
<p>Stay tuned for more.</p>
<p>And as always,
Thanks for reading!</p>]]></content>
    </item>
    
    <item>
      <title>JavaScript Web Framework – Meteor</title>
      <link>https://skarlso.github.io/2015/01/29/javascript-web-framework-meteor/</link>
      <pubDate>Thu, 29 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/01/29/javascript-web-framework-meteor/</guid>
      <description>Hi,
This time I would like to write about something that interests me. I wanted to try out a pure JavaScript web framework.
My choice is: Meteor. Looks interesting enough and it was recommended by a friend of mine. So, let&amp;rsquo;s dive in.
Installation As always, one starts with installation. The page tells us to follow this simple step:
1  curl https://install.meteor.com/ | sh   Easy enough, when you are on Linux.</description>
      <content type="html"><![CDATA[<p>Hi,</p>
<p>This time I would like to write about something that interests me. I wanted to try out a pure JavaScript web framework.</p>
<p>My choice is: <a href="https://www.meteor.com/" target="_blank">Meteor</a>. Looks interesting enough and it was recommended by a friend of mine. So, let&rsquo;s dive in.</p>
<h4 id="installation"><strong>Installation</strong></h4>
<p>As always, one starts with installation. The page tells us to follow this simple step:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">curl https://install.meteor.com/ | sh
</code></pre></td></tr></table>
</div>
</div><p>Easy enough, when you are on Linux. Turns out, that there is no official release yet for Windows. I&rsquo;m in luck then. After running the command though, I saw this popping up into my face:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">curl: (60) Peer certificate cannot be authenticated with known CA certificates
More details here: http://curl.haxx.se/docs/sslcerts.html
</code></pre></td></tr></table>
</div>
</div><p>There is always something. in that case a more accurate command to use would be the following:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">curl -k https://install.meteor.com/ | sh
</code></pre></td></tr></table>
</div>
</div><p>This will force an insecure download. You might not face this issue, but just in case you do, use this command instead.</p>
<p>Branching off here. For those of you whom the curl didn&rsquo;t work because you are sitting behind a proxy you can specify a -proxy  protocol//username:password@proxy:port after your curl. Of course if that doesn&rsquo;t work then the script won&rsquo;t work either.</p>
<p>So open the script in one of your favourite editors, for me it&rsquo;s Sublime text, and find this line: &ldquo;<em>Downloading Meteor distribution</em>&rdquo;. Lo, and behold; it uses curl. This is the only one in the script, so just edit it by adding in your -proxy setting as before and you should be right on track.</p>
<p>If that still gives you problems, try this:</p>
<p>Assuming that your browser is set up correctly with the proxy and just command line commands aren&rsquo;t working, you can go to this URL defined by the variable TARBALL_URL:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">TARBALL_URL=&#34;https://d3sqy0vbqsdhku.cloudfront.net/packages-bootstrap/${RELEASE}/meteor-bootstrap-${PLATFORM}.tar.gz&#34;
</code></pre></td></tr></table>
</div>
</div><p>Note that there are two variables in there. For me these are:</p>
<p>RELEASE: 1.0.3.1</p>
<p>PLATFORM: os.linux.x86_64</p>
<p>The full URL is:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">https://d3sqy0vbqsdhku.cloudfront.net/packages-bootstrap/1.0.3.1/meteor-bootstrap-os.linux.x86_64.tar.gz
</code></pre></td></tr></table>
</div>
</div><p>Download the latest tarball and delete the CURL AND TAR command on the following line. After that, you just have to extract the tarball and move the directory to ~/.meteor.</p>
<p>Now you can run your sh again and you should be on the road, for sure this time.</p>
<p>Just to make sure, these are the line which you need to comment out:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">
<span class="c1"># If you already have a tropohouse/warehouse, we do a clean install here:</span>
<span class="k">if</span> <span class="o">[</span> -e <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.meteor&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
<span class="nb">echo</span> <span class="s2">&#34;Removing your existing Meteor installation.&#34;</span>
rm -rf <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.meteor&#34;</span>
<span class="k">fi</span>

<span class="nv">TARBALL_URL</span><span class="o">=</span><span class="s2">&#34;https://d3sqy0vbqsdhku.cloudfront.net/packages-bootstrap/</span><span class="si">${</span><span class="nv">RELEASE</span><span class="si">}</span><span class="s2">/meteor-bootstrap-</span><span class="si">${</span><span class="nv">PLATFORM</span><span class="si">}</span><span class="s2">.tar.gz&#34;</span>

<span class="nv">INSTALL_TMPDIR</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.meteor-install-tmp&#34;</span>
rm -rf <span class="s2">&#34;</span><span class="nv">$INSTALL_TMPDIR</span><span class="s2">&#34;</span>
mkdir <span class="s2">&#34;</span><span class="nv">$INSTALL_TMPDIR</span><span class="s2">&#34;</span>
<span class="nb">echo</span> <span class="s2">&#34;Downloading Meteor distribution&#34;</span>
curl --proxy https://ggbrau:Daleks37@10.120.28.130:80--progress-bar --fail <span class="s2">&#34;</span><span class="nv">$TARBALL_URL</span><span class="s2">&#34;</span> <span class="p">|</span> tar -xzf - -C <span class="s2">&#34;</span><span class="nv">$INSTALL_TMPDIR</span><span class="s2">&#34;</span> -o
<span class="c1"># bomb out if it didn&#39;t work, eg no net</span>
<span class="nb">test</span> -x <span class="s2">&#34;</span><span class="si">${</span><span class="nv">INSTALL_TMPDIR</span><span class="si">}</span><span class="s2">/.meteor/meteor&#34;</span>
mv <span class="s2">&#34;</span><span class="si">${</span><span class="nv">INSTALL_TMPDIR</span><span class="si">}</span><span class="s2">/.meteor&#34;</span> <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">&#34;</span>
rm -rf <span class="s2">&#34;</span><span class="si">${</span><span class="nv">INSTALL_TMPDIR</span><span class="si">}</span><span class="s2">&#34;</span>
<span class="c1"># just double-checking :)</span>
<span class="nb">test</span> -x <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.meteor/meteor&#34;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="getting-started">Getting started</h4>
<p>After a nice installation process we can continue to the getting started phase.</p>
<p>So, the documentation tells us that we have to simply execute a command.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">meteor create simple-todos
</code></pre></td></tr></table>
</div>
</div><p>At this point we should get a directory structure which is written in the manual. And, behold, that&rsquo;s exactly what happened. As usually, creating a skeleton is easy. Lets run the app. For that, the command is:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">meteor
</code></pre></td></tr></table>
</div>
</div><p>I can do that, I think.</p>
<p>And sure enough, I&rsquo;ve got this little message, which I actually expected to see:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Can&#39;t listen on port 3000. Perhaps another Meteor is running?
</code></pre></td></tr></table>
</div>
</div><p>In this world, where there are tons of applications running on your dev environment at any given time, it&rsquo;s possible to have something already running on the port 3000. Luckily this is something that&rsquo;s anticipated by now, and we are presented with an option to add in a proxy setting of our choice with -port <port>.</p>
<p>After I did that, I&rsquo;ve got a nice confirm message that meteor is up and running. A quick check on the presented URL provided me with the confidence that my app is indeed reachable.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">App running at: http://localhost:9999/
</code></pre></td></tr></table>
</div>
</div><h4 id="after-getting-started">After Getting Started.</h4>
<p>Now that we know that it&rsquo;s up and running we can continue with the tutorial. Up comes next a simple Todo list application with Templates. It&rsquo;s telling us to replace the code in the default starter app. At this point I&rsquo;m wondering if it can hotswap. It should, since javascript and HTML is dynamic so there should be no problems there, right?</p>
<p>And sure enough, the moment I replaced the code and checked on my server status, I could see this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Client modified -- refreshing
Meteor server restarted
</code></pre></td></tr></table>
</div>
</div><p>With a brief flash of &ldquo;Rebuilding.&rdquo;. So it does sort of work. It did, however, restart the server it just did it without your manual intervention. Which is nice, but on a larger scale application it might prove to be a tad bit annoying. For example, I add another item to the list, and suddenly, the server is restarted.</p>
<p>Since, I am a tester, let&rsquo;s see how it handles some problems.</p>
<p>I modified the JavaScript so that it has a syntax error.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript">
<span class="c1">// simple-todos.js
</span><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="nx">Meteor</span><span class="p">.</span><span class="nx">isClient</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// This code only runs on the client
</span><span class="c1"></span>  <span class="nx">Template</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">helpers</span><span class="p">({</span>
    <span class="nx">tasks</span><span class="o">:</span> <span class="p">[</span>
      <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&#34;This is task 1&#34;</span> <span class="p">},</span>
      <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&#34;This is task 2&#34;</span> <span class="p">},</span>
      <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&#34;This is task 3&#34;</span> <span class="p">}</span>
      <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&#34;This is task 4&#34;</span> <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Note the missing &ldquo;,&rdquo;. And, nicely enough I&rsquo;m getting an error message telling me that I messed something up:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Errors prevented startup:

While building the application:
my_cool_app.js:10:7: Unexpected token {

Your application has errors. Waiting for file change.
</code></pre></td></tr></table>
</div>
</div><p>It even tells you where the error is and it&rsquo;s waiting for you to fix it. After I&rsquo;ve corrected my error it compiled fine and the application is up and running. Deleting the files did little difference as did corrupting the HTML pages or the CSS file. Nothing to see here, moving on.</p>
<h4 id="android-device">Android Device</h4>
<p>I&rsquo;m sure everybody can read a manual and continue with collections, forms, events and such. What I&rsquo;m more interested in is that Meteor promises it can run on Android devices. Now that perked my curiosity. With the rise of mobile devices, the desktop platform is slowly pushed back into a dark corner where even a <a href="http://mistborn.wikia.com/wiki/Tineye" target="_blank">Tineye </a>would have problems seeing it.</p>
<p>Hence, I want to see how easy it really is.</p>
<p>Meteor gives you a set of commands to install the android sdk and droid support for your application, which is nice. You just need to run this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">
meteor install-sdk android
meteor add-platform android # Perform this step in the app&#39;s folder and agree to terms and conditions.
</code></pre></td></tr></table>
</div>
</div><p>Now, if you are like me, someone who has experience with the android SDK and its emulator, you&rsquo;ll know that running that thing requires more time and processing power than simulating the chances of Leonardo DiCaprio winning an Oscar. I&rsquo;ll use a real device instead. For that, it appears I only have to run a simple command again.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">meteor run android-device
</code></pre></td></tr></table>
</div>
</div><p>And sure enough the app appeared on my device.</p>
<p>This is actually quite awesome. I only plugged in my device, enabled developer options and USB debugging and that&rsquo;s it. I&rsquo;m quite impressed so far with Meteor and the Power of JavaScript. The app is on my phone and the static JavaScript parts are still working even though I shut the server down.</p>
<p>So my next burning question is. Will it Blend? I mean, Perform?</p>
<h4 id="benchmarking">Benchmarking</h4>
<p>So, now that I know that using, installing and getting started is pretty simple, what I also would like to know is how well it performs.</p>
<p>I have a quad core i7 16GB RAM Samsung SSD running Linux. Let&rsquo;s see 100 threads 10 second interval 10 times loop for a start. Look at how gorgeous this is.</p>
<p>40ms on average. Now let&rsquo;s crank it up and I&rsquo;m performing the test on a separate machine but still on the same network. 1000 threads.</p>
<p>This time I&rsquo;ve got a bit more churn and my pc started to fan like there is no tomorrow. But the server stayed stable. Latency did not waver for a bit. Next, 10.000 for as long as my machine can handle it.. Better save my work. Hah, my JMeter died. But it clocked at an average of 1000ms response time and the server stayed absolutely stable with no package lost, or errors.</p>
<h4 id="conclusion">Conclusion</h4>
<p>I can say with a full heart that I&rsquo;m impressed by Meteor and I very much like it. It&rsquo;s easy to use, even more easy to install and definitely can handle itself given that it&rsquo;s rather lightweight. The hot swapping / server re-starting can&rsquo;t be avoided, but that&rsquo;s only a minor inconvenience and we got used to that already.</p>
<p>I recommend Meteor and I&rsquo;ll be playing around with it a bit more for sure.</p>
<p>Thanks for reading!
Gergely.</p>
]]></content>
    </item>
    
  </channel>
</rss>