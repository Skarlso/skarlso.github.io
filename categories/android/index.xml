<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>android on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/android/</link>
    <description>Recent content in android on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Mon, 02 Mar 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://skarlso.github.io/categories/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sphere Judge Online – Python Kivy Android app – Part 2</title>
      <link>https://skarlso.github.io/2015/03/02/sphere-judge-online-python-kivy-android-app-part-2/</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2015/03/02/sphere-judge-online-python-kivy-android-app-part-2/</guid>
      <description>&lt;p&gt;Here we are again. I will attempt to further this little journey of mine into the land of Android and Python.&lt;/p&gt;
&lt;p&gt;This is the second part of the advanture you can read the first one a little bit back.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;We left off at a point where I successfully configured my environment and compiled my first hello world APK. At that point it took a little bit fiddling to get it to work on my phone.&lt;/p&gt;
&lt;p&gt;Now, I have progressed a little bit into spoj’s page parsing. The code so far is as follows:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This is pretty straight forward so far. It gets the problems page, loads in all of the links and prints it out.&lt;/p&gt;
&lt;p&gt;My goal is an application which looks something like this:&lt;/p&gt;
&lt;p&gt;_&lt;strong&gt;_&lt;/strong&gt;_&lt;strong&gt;_&lt;/strong&gt;_&lt;strong&gt;_&lt;/strong&gt;_&lt;strong&gt;_&lt;/strong&gt;_&lt;strong&gt;_&lt;/strong&gt;_&lt;strong&gt;_&lt;/strong&gt;_&lt;strong&gt;_&lt;/strong&gt;___&lt;/p&gt;
&lt;p&gt;|   _&lt;strong&gt;_&lt;/strong&gt;_&lt;strong&gt;_&lt;/strong&gt;_&lt;strong&gt;_&lt;/strong&gt;_&lt;strong&gt;_&lt;/strong&gt;_&lt;strong&gt;_&lt;/strong&gt;_&lt;strong&gt;_&lt;/strong&gt;_&lt;strong&gt;_&lt;/strong&gt;  |&lt;/p&gt;
&lt;p&gt;|  |                                                                           | |&lt;/p&gt;
&lt;p&gt;|  |                                                                           | |&lt;/p&gt;
&lt;p&gt;|  |                    Display Problem Description               | |&lt;/p&gt;
&lt;p&gt;|  |                                                                           | |&lt;/p&gt;
&lt;p&gt;|  |                                                                           | |&lt;/p&gt;
&lt;p&gt;|  |                                                                           | |&lt;/p&gt;
&lt;p&gt;|  |_&lt;strong&gt;_&lt;/strong&gt;_&lt;strong&gt;_&lt;/strong&gt;_&lt;strong&gt;_&lt;/strong&gt;_&lt;strong&gt;_&lt;/strong&gt;_&lt;strong&gt;_&lt;/strong&gt;_&lt;strong&gt;_&lt;/strong&gt;_____ | |&lt;/p&gt;
&lt;p&gt;|                                                                                 |&lt;/p&gt;
&lt;p&gt;|                                                                                 |&lt;/p&gt;
&lt;p&gt;|                         Button:Finish Problem                        |&lt;/p&gt;
&lt;p&gt;|                                                                                 |&lt;/p&gt;
&lt;p&gt;|                         Button:Next Problem                          |&lt;/p&gt;
&lt;p&gt;|_&lt;strong&gt;_&lt;/strong&gt;_&lt;strong&gt;_&lt;/strong&gt;_&lt;strong&gt;_&lt;/strong&gt;_&lt;strong&gt;_&lt;/strong&gt;_&lt;strong&gt;_&lt;/strong&gt;_&lt;strong&gt;_&lt;/strong&gt;________ |&lt;/p&gt;
&lt;p&gt;It’s very basic. When it loads up, it will gather and display a new problem. You have two options, either get a new one, or save / finish this item, saying you never want to see it again.&lt;/p&gt;
&lt;p&gt;Let’s put the first part into an android app. Just gather data, and get it disaplyed.&lt;/p&gt;
&lt;p&gt;*Queue a days worth of hacking and frustrated cussing.*&lt;/p&gt;
&lt;p&gt;So, turns out it’s not as easy as I would have liked it to be. I ran into some pretty nasty problems. Some of them I’ll write down below for the record, and an attempted solution as well.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;#1:&lt;/strong&gt; &lt;strong&gt;Problem:&lt;/strong&gt; Libraries. I’m using lxml and requests. Requests is a pure python library, but lxml is partially C. Which apparently is not very well supported yet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution (Partial):&lt;/strong&gt; I could optain request by two ways, but the most simple one, was basically just building my distribution with the optional requests module like this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Attempting to do the same with LXML resulted in a compile issue which I tracked down to something like: “sorry, but we don’t support OSX”. But it’s okay. There are other ways to parse an html page, I just really like the xpath filter. So I soldiered on with trying to get something to work at least.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;#3: Problem:&lt;/strong&gt; &lt;em&gt;Bogus compile time exception.&lt;/em&gt; There were some exceptions on the way when I was trying to compile with buildozer. &lt;strong&gt;Solution:&lt;/strong&gt; It’s interesting because previously my solution to another compile time issue was to use a specific version of Cython. But this time the solution was to actually remove that version and install the latest one. Which is 0.22 as of the time of this writing. So:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;#2: Problem:&lt;/strong&gt; Connection. So now, I’m down to the bare bone. At this point, I just want to see a page source in a label. My code looks like this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;However, running this results in a connection error in adb logcat:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; I tried simply putting out a random number at some point, which actullay worked, so I know it’s the connection. I’m guessing I need permission to access the network. Which would be this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;And yes! Building and installing it with this additional permission got me so far as I can display the web page’s content in a label.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;There is a saying that you should end on a high note, so that is what I’m going to do here right now. Join me next time, when I’ll try to replace lxml with something else…&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sphere Judge Online – Python Kivy Android app</title>
      <link>https://skarlso.github.io/2015/02/26/sphere-judge-online-python-kivy-android-app/</link>
      <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2015/02/26/sphere-judge-online-python-kivy-android-app/</guid>
      <description>&lt;p&gt;Hello folks.&lt;/p&gt;
&lt;p&gt;Today I would like to take you on a journey I fought myself through in order to write a python android app, which gets you a random problem from &lt;!-- raw HTML omitted --&gt;Sphere Judge Online&lt;!-- raw HTML omitted --&gt;. Then you can mark it as solved and it will be stored as such, and you can move on to the next problem. With the words of Neil deGrasse Tyson, Come with Me!&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;When I first embarked on this endeavour I ran into numerous errors, many amongst them being compilation issues when I was trying to install libraries.&lt;/p&gt;
&lt;p&gt;I started to write down all of these, and then started fresh on a new machine. I realised that ALL of my problems where only because of **ONE **thing. One thing, which I wanted to do, but it ended up being the death of me. And that is…. *Drummrolls* **Python 3. **I tried doing all the things that I started to do, with Python 3. Turns out, that neither libraries are supporting it very well yet. And that’s including Cython as well, which I thought would be up to speed by now. But sadly, it’s not.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;In order to go any further we need a few things first. For this to work, you’ll have to perform these things in order as I found out later. And certain versions of certain libraries are required instead of the latest ones.&lt;/p&gt;
&lt;p&gt;Depending on the environment you are using, you need to install python-dev and some other graphic libraries. I followed this and that was fine. Latest packages are working alright.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Only install these if you are absolutely certain you need them.&lt;/p&gt;
&lt;p&gt;Clone python-android from git into a nice and cosy directory.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;While this is underway, for python-android you also need &lt;!-- raw HTML omitted --&gt;android-sdk&lt;!-- raw HTML omitted --&gt; and &lt;!-- raw HTML omitted --&gt;android-ndk&lt;!-- raw HTML omitted --&gt;. Select the ones which are for your environment. The NDK is needed in order to build the APK out of our python code later on.&lt;/p&gt;
&lt;p&gt;After you are done, run ./android and install tools, APIs and other things you want. Make sure you have these set up:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;The API version needs to be the one which you installed on your machine.&lt;/p&gt;
&lt;p&gt;Now, we have to get a specific version of Cython. In order to do that, execute the following command:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Source your new .bash_profile file if you haven’t done so already.&lt;/p&gt;
&lt;p&gt;At this point we are ready to install Kivy. Please follow the instructions for your environment on the respective page from Kivy’s documentation:&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;http://kivy.org/docs/installation/installation.html&#34;&gt;http://kivy.org/docs/installation/installation.html&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: For Mac users. In addition, before doing the kivy stuff, and if you would like to execute kivy applications on your mac, you need to install pygame.&lt;/p&gt;
&lt;p&gt;It’s a bit of a hassle but you only need to perform these commands:&lt;/p&gt;
&lt;p&gt;Install Quartz =&amp;gt; &lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;http://xquartz.macosforge.org/landing/&#34;&gt;http://xquartz.macosforge.org/landing/&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Install Homebrew =&amp;gt; &lt;!-- raw HTML omitted --&gt;ruby -e “$(curl -fsSL &lt;a href=&#34;https://raw.github.com/Homebrew/homebrew/go/install)&amp;amp;#8221;&#34;&gt;https://raw.github.com/Homebrew/homebrew/go/install)&amp;amp;#8221;&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Install some other packages =&amp;gt; &lt;!-- raw HTML omitted --&gt;brew install hg sdl sdl_image sdl_mixer sdl_ttf portmidi&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Install pygame =&amp;gt; &lt;!-- raw HTML omitted --&gt;pip install hg+http://bitbucket.org/pygame/pygame&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Once this finishes, you should be good to go for the final command in the prerequisites. Go to your cloned python-android folder and run this (make sure you have ANT installed):&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Now we are ready for some coding.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;So, finally after our environment is all setup, we can move on to write some python code. Let’s start with a simple hello world application:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This is a simple Hello World python-android app. Save this into a file called &lt;!-- raw HTML omitted --&gt;main.py&lt;!-- raw HTML omitted --&gt;. Main.py is used to execute the app on your phone. It’s your entry point. Whatever app you are writing, this has to be where it will begin.&lt;/p&gt;
&lt;p&gt;In order to get this installed on our device, we will use python-android’s distribution.sh. The command to run after you changed directory into python-android is this (make sure that you have a compatible android device plugged in and in developer mode):&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Upon success, you should see it on your device. This is how the hello world app looks like:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This has been quite the ride so far. We will continue our journey when I’ll start writing my own app for SPOJ.&lt;/p&gt;
&lt;p&gt;Thanks for reading!
Gergely.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaScript Web Framework – Meteor</title>
      <link>https://skarlso.github.io/2015/01/29/javascript-web-framework-meteor/</link>
      <pubDate>Thu, 29 Jan 2015 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2015/01/29/javascript-web-framework-meteor/</guid>
      <description>&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;This time I would like to write about something that interests me. I wanted to try out a pure JavaScript web framework.&lt;/p&gt;
&lt;p&gt;My choice is: &lt;!-- raw HTML omitted --&gt;Meteor&lt;!-- raw HTML omitted --&gt;. Looks interesting enough and it was recommended by a friend of mine. So, let’s dive in.&lt;/p&gt;
&lt;h4 id=&#34;installation&#34;&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;As always, one starts with installation. The page tells us to follow this simple step:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Easy enough, when you are on Linux. Turns out, that there is no official release yet for Windows. I’m in luck then. After running the command though, I saw this popping up into my face:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;There is always something… in that case a more accurate command to use would be the following:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This will force an insecure download. You might not face this issue, but just in case you do, use this command instead.&lt;/p&gt;
&lt;p&gt;Branching off here. For those of you whom the curl didn’t work because you are sitting behind a proxy you can specify a –proxy  protocol//username:password@proxy:port after your curl. Of course if that doesn’t work then the script won’t work either.&lt;/p&gt;
&lt;p&gt;So open the script in one of your favourite editors, for me it’s Sublime text, and find this line: “&lt;em&gt;Downloading Meteor distribution&lt;/em&gt;“. Lo, and behold; it uses curl. This is the only one in the script, so just edit it by adding in your –proxy setting as before and you should be right on track.&lt;/p&gt;
&lt;p&gt;If that still gives you problems, try this:&lt;/p&gt;
&lt;p&gt;Assuming that your browser is set up correctly with the proxy and just command line commands aren’t working, you can go to this URL defined by the variable TARBALL_URL:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Note that there are two variables in there. For me these are:&lt;/p&gt;
&lt;p&gt;RELEASE: 1.0.3.1&lt;/p&gt;
&lt;p&gt;PLATFORM: os.linux.x86_64&lt;/p&gt;
&lt;p&gt;The full URL is:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Download the latest tarball and delete the CURL AND TAR command on the following line. After that, you just have to extract the tarball and move the directory to ~/.meteor.&lt;/p&gt;
&lt;p&gt;Now you can run your sh again and you should be on the road, for sure this time.&lt;/p&gt;
&lt;p&gt;Just to make sure, these are the line which you need to comment out:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h4 id=&#34;heading&#34;&gt;&lt;/h4&gt;
&lt;h4 id=&#34;getting-started&#34;&gt;Getting started&lt;/h4&gt;
&lt;p&gt;After a nice installation process we can continue to the getting started phase.&lt;/p&gt;
&lt;p&gt;So, the documentation tells us that we have to simply execute a command.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;At this point we should get a directory structure which is written in the manual. And, behold, that’s exactly what happened. As usually, creating a skeleton is easy. Lets run the app. For that, the command is:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;I can do that, I think.&lt;/p&gt;
&lt;p&gt;And sure enough, I’ve got this little message, which I actually expected to see:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;In this world, where there are tons of applications running on your dev environment at any given time, it’s possible to have something already running on the port 3000. Luckily this is something that’s anticipated by now, and we are presented with an option to add in a proxy setting of our choice with –port &lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;p&gt;After I did that, I’ve got a nice confirm message that meteor is up and running. A quick check on the presented URL provided me with the confidence that my app is indeed reachable.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h4 id=&#34;after-getting-started8230&#34;&gt;After Getting Started…&lt;/h4&gt;
&lt;p&gt;Now that we know that it’s up and running we can continue with the tutorial. Up comes next a simple Todo list application with Templates. It’s telling us to replace the code in the default starter app. At this point I’m wondering if it can hotswap. It should, since javascript and HTML is dynamic so there should be no problems there, right?&lt;/p&gt;
&lt;p&gt;And sure enough, the moment I replaced the code and checked on my server status, I could see this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;With a brief flash of “Rebuilding…”. So it does sort of work. It did, however, restart the server it just did it without your manual intervention. Which is nice, but on a larger scale application it might prove to be a tad bit annoying. For example, I add another item to the list, and suddenly, the server is restarted.&lt;/p&gt;
&lt;p&gt;Since, I am a tester, let’s see how it handles some problems.&lt;/p&gt;
&lt;p&gt;I modified the JavaScript so that it has a syntax error.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Note the missing “,”. And, nicely enough I’m getting an error message telling me that I messed something up:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;It even tells you where the error is and it’s waiting for you to fix it. After I’ve corrected my error it compiled fine and the application is up and running. Deleting the files did little difference as did corrupting the HTML pages or the CSS file. Nothing to see here, moving on…&lt;/p&gt;
&lt;h4 id=&#34;android-device&#34;&gt;Android Device&lt;/h4&gt;
&lt;p&gt;I’m sure everybody can read a manual and continue with collections, forms, events and such. What I’m more interested in is that Meteor promises it can run on Android devices. Now that perked my curiosity. With the rise of mobile devices, the desktop platform is slowly pushed back into a dark corner where even a &lt;!-- raw HTML omitted --&gt;Tineye &lt;!-- raw HTML omitted --&gt;would have problems seeing it.&lt;/p&gt;
&lt;p&gt;Hence, I want to see how easy it really is.&lt;/p&gt;
&lt;p&gt;Meteor gives you a set of commands to install the android sdk and droid support for your application, which is nice. You just need to run this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Now, if you are like me, someone who has experience with the android SDK and its emulator, you’ll know that running that thing requires more time and processing power than simulating the chances of Leonardo DiCaprio winning an Oscar. I’ll use a real device instead. For that, it appears I only have to run a simple command again.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;And sure enough the app appeared on my device.&lt;/p&gt;
&lt;p&gt;This is actually quite awesome. I only plugged in my device, enabled developer options and USB debugging and that’s it. I’m quite impressed so far with Meteor and the Power of JavaScript. The app is on my phone and the static JavaScript parts are still working even though I shut the server down.&lt;/p&gt;
&lt;p&gt;So my next burning question is… Will it Blend? I mean, Perform?&lt;/p&gt;
&lt;h4 id=&#34;benchmarking&#34;&gt;Benchmarking&lt;/h4&gt;
&lt;p&gt;So, now that I know that using, installing and getting started is pretty simple, what I also would like to know is how well it performs.&lt;/p&gt;
&lt;p&gt;I have a quad core i7 16GB RAM Samsung SSD running Linux. Let’s see 100 threads 10 second interval 10 times loop for a start. Look at how gorgeous this is.&lt;/p&gt;
&lt;p&gt;40ms on average. Now let’s crank it up and I’m performing the test on a separate machine but still on the same network. 1000 threads.&lt;/p&gt;
&lt;p&gt;This time I’ve got a bit more churn and my pc started to fan like there is no tomorrow. But the server stayed stable. Latency did not waver for a bit. Next, 10.000 for as long as my machine can handle it…. Better save my work. Hah, my JMeter died. But it clocked at an average of 1000ms response time and the server stayed absolutely stable with no package lost, or errors.&lt;/p&gt;
&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;I can say with a full heart that I’m impressed by Meteor and I very much like it. It’s easy to use, even more easy to install and definitely can handle itself given that it’s rather lightweight. The hot swapping / server re-starting can’t be avoided, but that’s only a minor inconvenience and we got used to that already.&lt;/p&gt;
&lt;p&gt;I recommend Meteor and I’ll be playing around with it a bit more for sure.&lt;/p&gt;
&lt;p&gt;Thanks for reading!
Gergely.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
