<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/aws/</link>
    <description>Recent content in AWS on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Sat, 13 Jan 2018 22:34:00 +0100</lastBuildDate>
    <atom:link href="https://skarlso.github.io/categories/aws/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Huge Furnace Update</title>
      <link>https://skarlso.github.io/2018/01/13/furnace-massive-update/</link>
      <pubDate>Sat, 13 Jan 2018 22:34:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2018/01/13/furnace-massive-update/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;In the past couple of months I&amp;rsquo;ve been slowly updating &lt;a href=&#34;https://github.com/Skarlso/go-furnace&#34;&gt;Furnace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are three major changes that happened. Let&amp;rsquo;s take a look at them, shall we?&lt;/p&gt;
&lt;h2 id=&#34;google-cloud-platform&#34;&gt;Google Cloud Platform&lt;/h2&gt;
&lt;p&gt;Furnace now supports &lt;a href=&#34;https://cloud.google.com&#34;&gt;Google Cloud Platform (GCP)&lt;/a&gt;. It provides the same API to handle GCP resource as with AWS. Namely, &lt;code&gt;create&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;. I opted to leave out &lt;code&gt;push&lt;/code&gt; because Google mostly works with git based repositories, meaning a push is literary just a push, than Google handles distributing the new code by itself.&lt;/p&gt;
&lt;p&gt;All the rest of the commands should work the same way as AWS.&lt;/p&gt;
&lt;h3 id=&#34;deployment-manager&#34;&gt;Deployment Manager&lt;/h3&gt;
&lt;p&gt;GCP has a similar service to AWS CloudFormations called &lt;a href=&#34;https://cloud.google.com/deployment-manager/docs/&#34;&gt;Deployment Manager&lt;/a&gt;. The documentation is fairly detailed with a Bookshelf example app to deploy. Code and Templates can be found in their Git repositroy here: &lt;a href=&#34;https://github.com/GoogleCloudPlatform/deploymentmanager-samples&#34;&gt;Deployment Manager Git Repository&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;setting-up-gcp&#34;&gt;Setting up GCP&lt;/h3&gt;
&lt;p&gt;As the README of Furnace outlines&amp;hellip;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Please carefully read and follow the instruction outlined in this document: &lt;a href=&#34;https://cloud.google.com/sdk/#Quick_Start&#34;&gt;Google Cloud Getting Started&lt;/a&gt;. It will describe how to download and install the SDK and initialize cloud to a Project ID.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Take special attention to these documents:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/sdk/docs/initializing&#34;&gt;Initializing GCloud Tools&lt;/a&gt;
&lt;a href=&#34;https://cloud.google.com/sdk/docs/authorizing&#34;&gt;Authorizing Tools&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Furnace uses a Google Key-File to authenticate with your Google Cloud Account and Project.
In the future, Furnace assumes these things are properly set up and in working order.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To initialize the client, it uses the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Background&lt;/span&gt;()
  &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;google&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;DefaultClient&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;dm&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NdevCloudmanScope&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The DefaultClient in turn, does the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// FindDefaultCredentials searches for &amp;#34;Application Default Credentials&amp;#34;.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// It looks for credentials in the following places,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// preferring the first location found:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//   1. A JSON file whose path is specified by the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//      GOOGLE_APPLICATION_CREDENTIALS environment variable.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//   2. A JSON file in a location known to the gcloud command-line tool.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//      On Windows, this is %APPDATA%/gcloud/application_default_credentials.json.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//      On other systems, $HOME/.config/gcloud/application_default_credentials.json.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//   3. On Google App Engine it uses the appengine.AccessToken function.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//   4. On Google Compute Engine and Google App Engine Managed VMs, it fetches
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//      credentials from the metadata server.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//      (In this final case any provided scopes are ignored.)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FindDefaultCredentials&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;scope&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DefaultCredentials&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Take note on the order. This is how Google will authenticate your requests.&lt;/p&gt;
&lt;h3 id=&#34;running-gcp&#34;&gt;Running GCP&lt;/h3&gt;
&lt;p&gt;Running gcp is largely similar to AWS. First, you create the necessary templates to your infrastructure. This is done via the Deployment Manager and it&amp;rsquo;s templating engine. The GCP templates are Python &lt;a href=&#34;http://jinja.pocoo.org/&#34;&gt;JINJA&lt;/a&gt; files. Examples are provided in the &lt;code&gt;template&lt;/code&gt; directory. It&amp;rsquo;s a bit more complicated than the CloudFormation templates in that it uses outside templates plus schema files to configure dynamic details.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s all explained in these documents: &lt;a href=&#34;https://cloud.google.com/deployment-manager/docs/step-by-step-guide/create-a-template&#34;&gt;Creating a Template Step-by-step&lt;/a&gt; and &lt;a href=&#34;https://cloud.google.com/deployment-manager/docs/configuration/templates/create-basic-template&#34;&gt;Creating a Basic Template&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s not trivial however. And using the API can also be confusing. The Google Code is just a generated Go code file using gRPC. But studying it may provide valuable insigth into how the API is structured. I&amp;rsquo;m also providing some basic samples that I gathered together and the readme does a bit more explaining on how to use them.&lt;/p&gt;
&lt;h3 id=&#34;your-first-stack&#34;&gt;Your First Stack&lt;/h3&gt;
&lt;p&gt;Once you have everything set-up you&amp;rsquo;ll need a configuration file for Furnace. The usage is outlined more here &lt;a href=&#34;#YAML-Configuration&#34;&gt;YAML Configuration&lt;/a&gt;. The configuration file for GCP looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;main&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;project_name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;testplatform-1234&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;spinner&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;gcp&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;template_name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;google_template.yaml&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;stack_name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;test-stack&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where &lt;code&gt;project_name&lt;/code&gt; is the name you generate for your first billable Google Cloud Platform project. Template lives next to this yaml file and stack name must be DNS complient.&lt;/p&gt;
&lt;p&gt;Once you have a project and a template setup, it&amp;rsquo;s as simple as calling &lt;code&gt;./furnace-gcp create&lt;/code&gt; or &lt;code&gt;./furnace-gcp create mycustomstack&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;deleting&#34;&gt;Deleting&lt;/h3&gt;
&lt;p&gt;Deleting happens with &lt;code&gt;./furnace-gcp delete&lt;/code&gt; or &lt;code&gt;./furnace-gcp delete mycustomstack&lt;/code&gt;. Luckily, as with AWS, this means that every resource created with the DeploymentManager will be deleted leaving no need for search and cleanup.&lt;/p&gt;
&lt;h3 id=&#34;project-name-vs-project-id&#34;&gt;Project Name vs. Project ID&lt;/h3&gt;
&lt;p&gt;Unlike with AWS Google requires your stack name and project id to be DNS complient. This is most likely because all API calls and such contain that information.&lt;/p&gt;
&lt;h2 id=&#34;separate-binaries&#34;&gt;Separate Binaries&lt;/h2&gt;
&lt;p&gt;In order to mitigate some of Furnace&amp;rsquo;s size, I&amp;rsquo;m providing separate binaries for each service it supports.&lt;/p&gt;
&lt;p&gt;The AWS binaries can be found in &lt;code&gt;aws&lt;/code&gt; folder, and respectively, the Google Cloud Platform is located in &lt;code&gt;gcp&lt;/code&gt;. Both are build-able by running &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you would like to run both with a single command, a top level make file is provided for your convinience. Just run &lt;code&gt;make&lt;/code&gt; from the root. That will build all binaries. Later on, Digital Oceans will join the ranks.&lt;/p&gt;
&lt;h2 id=&#34;yaml-configuration&#34;&gt;YAML Configuration&lt;/h2&gt;
&lt;p&gt;Last but not least, Furnace now employs YAML files for configuration. However, it isn&amp;rsquo;t JUST using YAML files. It also employs a smart configuration pattern which works as follows.&lt;/p&gt;
&lt;p&gt;Since Furnace is a distributed binary file which could be running from any given location at any time. Because of that, at first I opted for a global configuration directory.&lt;/p&gt;
&lt;p&gt;Now, however, furnace uses a furnace configuration file named with the following pattern: &lt;code&gt;.stackalias.furnace&lt;/code&gt;. Where stackname, or stack is the name of a custom stack you would like to create for a project. The content of this file is a single entry, which is the location, relative to this file, of the YAML configuration files for the given stack. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;stacks/mydatabasestack.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This means, that in the directory called &lt;code&gt;stacks&lt;/code&gt; there will a yaml configuration file for your database stack. The AWS config file looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;main&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;stackname&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;FurnaceStack&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;spinner&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;aws&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;code_deploy_role&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;CodeDeployServiceRole&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;region&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;us-east-1&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;enable_plugin_system&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;template_name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;cloud_formation.template&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;app_name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;furnace_app&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;code_deploy&lt;/span&gt;:
    &lt;span style=&#34;color:#75715e&#34;&gt;# Only needed in case S3 is used for code deployment&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;code_deploy_s3_bucket&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;furnace_code_bucket&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# The name of the zip file in case it&amp;#39;s on a bucket&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;code_deploy_s3_key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;furnace_deploy_app&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# In case a Git Repository is used for the application, define these two settings&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;git_account&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Skarlso/furnace-codedeploy-app&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;git_revision&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;b89451234...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The important part is the &lt;code&gt;template_name&lt;/code&gt;. The template has to be next to this yaml file. To use this file, you simply call any of the AWS or GCP commands with an extra, optional parameter like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./furnace-aws create mydatabase
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that mydatabase will translate to &lt;code&gt;.mydatabase.furnace&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The intelligent part is, that this file could be placed anywhere in the project folder structure; because furnace, when looking for a config file, traverses backwards from the current execution directory up until &lt;code&gt;/&lt;/code&gt;. Where root is not included in the search.&lt;/p&gt;
&lt;p&gt;Consider the following directory tree:&lt;/p&gt;
&lt;p&gt;├── docs
│   ├── &lt;code&gt;furnace-aws status mydatabase&lt;/code&gt;
├── stacks
│   ├── mystack.template
│   └── mystack.yaml
└── .mydatabase.furnace&lt;/p&gt;
&lt;p&gt;You are currently in your &lt;code&gt;docs&lt;/code&gt; directory and would like to ask for the status of your database. You don&amp;rsquo;t have to move to the location of the setting file, just simply run the command from where you are. This only works if you are above the location of the file. If you would be below, furnace would say it can&amp;rsquo;t find the file. Because it only traverses upwards.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.mydatabase.furnace&lt;/code&gt; here contains only a single entry &lt;code&gt;stacks/mystack.yaml&lt;/code&gt;. And that&amp;rsquo;s it. This way, you could have multiple furnace files, for example a &lt;code&gt;.database.furnace&lt;/code&gt;, &lt;code&gt;.front-end.furnace&lt;/code&gt; and a &lt;code&gt;.backend.furnace&lt;/code&gt;. All three would work in unison, and if want needs updating, simply run &lt;code&gt;./furnace-aws update backend&lt;/code&gt;. And done!&lt;/p&gt;
&lt;h1 id=&#34;closing-words&#34;&gt;Closing words&lt;/h1&gt;
&lt;p&gt;As always, contributions are welcomed in the form of issues or pull requests. Questions anything, I tend to answer as soon as I can.&lt;/p&gt;
&lt;p&gt;Always run the tests before submitting.&lt;/p&gt;
&lt;p&gt;Thank you for reading.
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Commit-Build-Deploy With AWS CodeBuild and Lambda</title>
      <link>https://skarlso.github.io/2017/12/04/commit-build-deploy/</link>
      <pubDate>Mon, 04 Dec 2017 22:34:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2017/12/04/commit-build-deploy/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi All.&lt;/p&gt;
&lt;p&gt;Today I would like to write about an AWS finger practice.&lt;/p&gt;
&lt;p&gt;Previously, I wrote about how I build and deploy my blog with &lt;a href=&#34;www.wercker.com&#34;&gt;Wercker&lt;/a&gt;. Since, I&amp;rsquo;m a cloud engineer and I dislike Oracle and it&amp;rsquo;s ever expending tenctacles into the abyss, I wanted to switch to use something else.&lt;/p&gt;
&lt;p&gt;My build and deploy cycle is simple.&lt;/p&gt;
&lt;p&gt;Commit to Blogsource Repo -&amp;gt; Wercker WebHook -&amp;gt; Builds my blog using Hugo -&amp;gt; Pushed to a Different Repository which my Github Blog.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s quiet possible to reproduce this on AWS without infering costs. Unless you publish like&amp;hellip; a couple 100 posts / week.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m going to use the following services: &lt;a href=&#34;https://aws.amazon.com/cloudformation/&#34;&gt;CloudFormation&lt;/a&gt;, &lt;a href=&#34;https://aws.amazon.com/lambda/details/&#34;&gt;AWS Lambda&lt;/a&gt;, &lt;a href=&#34;https://aws.amazon.com/codebuild/&#34;&gt;CodeBuild&lt;/a&gt;, &lt;a href=&#34;https://aws.amazon.com/s3/&#34;&gt;S3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To deploy the below describe architecture in your account in us-east-1 region simply click this button:
&lt;a href=&#34;https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?stackName=blogbuilder&amp;amp;templateURL=https://s3.amazonaws.com/blog-builder-template-bucket/template.yaml&#34;&gt;&lt;img src=&#34;https://skarlso.github.io/img/cloudformation-launch-stack.png&#34; alt=&#34;Launch Stack&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;BEFORE doing that though you need the following created:&lt;/p&gt;
&lt;p&gt;Have a bucket for your lambda function. The lambda function can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Skarlso/aws-lambda-code-pusher&#34;&gt;Lambda Repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Zip up the lambda folder contents by doing this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cd lambda
zip -r gitpusher.zip *
aws s3 cp gitpusher.zip s3://your-lambda-bucket
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s it.&lt;/p&gt;
&lt;p&gt;To read a description of the stack, please continue.&lt;/p&gt;
&lt;h1 id=&#34;tldr&#34;&gt;TL;DR;&lt;/h1&gt;
&lt;p&gt;The architecture I&amp;rsquo;m about to lay out is simple in its use and design. I tried not to complicate things, because I think the simpler something is, the less prone to failure it will be.&lt;/p&gt;
&lt;p&gt;In its most basic form the flow is as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/blog_builder_flow.png&#34; alt=&#34;Flow&#34;&gt;.&lt;/p&gt;
&lt;p&gt;You push something into a repository you provide. CodeBuild has a webhook to this repository so on each commit it starts to build the blog. The build will use a so called &lt;code&gt;buildspec.yaml&lt;/code&gt; file which describes how your blog should be built. Mine looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;phases&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;install&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;commands&lt;/span&gt;:
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;echo Installing required packages and Hugo&lt;/span&gt;
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;apt-get update&lt;/span&gt;
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;apt-get install -y git golang wget&lt;/span&gt;
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;wget -q https://github.com/gohugoio/hugo/releases/download/v0.31/hugo_0.31_Linux-64bit.deb -O /tmp/hugo.dep&lt;/span&gt;
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;dpkg -i /tmp/hugo.dep&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;pre_build&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;commands&lt;/span&gt;:
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;echo Downloading source code&lt;/span&gt;
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;git clone https://github.com/Skarlso/blogsource.git /opt/app&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;build&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;commands&lt;/span&gt;:
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;echo Build started on `date`&lt;/span&gt;
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;cd /opt/app &amp;amp;&amp;amp; hugo --theme purehugo&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;post_build&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;commands&lt;/span&gt;:
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;echo Build completed on `date`&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;artifacts&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;files&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;/opt/app/public/**/*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When it&amp;rsquo;s finished, CodeBuild will upload everything in the public folder as a zip to a bucket. The bucket has a lambda attached which triggers on putObject event with the extension &lt;code&gt;.zip&lt;/code&gt;. It downloads the archive, extracts it and pushes it to another repository, which is the repository for the blog.&lt;/p&gt;
&lt;p&gt;And done! That&amp;rsquo;s it. For an architecture overview, please read on.&lt;/p&gt;
&lt;h1 id=&#34;architecture&#34;&gt;Architecture&lt;/h1&gt;
&lt;p&gt;Now, we are going to use CloudFormation stack to deploy these resources. Because we aren&amp;rsquo;t animals to create them by hand, yes?&lt;/p&gt;
&lt;p&gt;An overview of my current architecture is best shown by this image:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skarlso.github.io/img/blog_builder_cf_template.png&#34; alt=&#34;AWS Stack&#34;&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s go over these components one - by - one.&lt;/p&gt;
&lt;h2 id=&#34;lambda-role&#34;&gt;Lambda Role&lt;/h2&gt;
&lt;p&gt;This is the &lt;a href=&#34;http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html&#34;&gt;Role&lt;/a&gt; which allows the Lambda to access things in your account. It needs the following service access: s3, logs, lambda; and the following permissions: logs:Create*, logs:PutLogEvents, s3:GetObject, s3:ListBucket.&lt;/p&gt;
&lt;h2 id=&#34;code-build-role&#34;&gt;Code Build Role&lt;/h2&gt;
&lt;p&gt;This is the role which allows CodeBuild to have access to services it needs. These services are the following: s3, logs, ssm, codebuild. CodeBuild also needs the following actions allowed: logs:Create*, logs:PutLogEvents, s3:GetObject, s3:PutObject, ssm:GetParameters.&lt;/p&gt;
&lt;h2 id=&#34;build-bucket&#34;&gt;Build Bucket&lt;/h2&gt;
&lt;p&gt;This is the bucket in which CodeBuild will push the generated build artifact.&lt;/p&gt;
&lt;h2 id=&#34;blog-pusher-function&#34;&gt;Blog Pusher Function&lt;/h2&gt;
&lt;p&gt;This is the heart of this project. It contains the logic to download the zipped artifact, extract it, create a hollow repository from the extracted archive and push the changes to the repository. And just the changes.&lt;/p&gt;
&lt;p&gt;This is achieve by a short Python 3.6 script which can be found in the linked repository.&lt;/p&gt;
&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;
&lt;p&gt;The stack requires you to provide a couple of parameters which are described in the template. Like, bucket name, github repository, git token and such. Please refer to the template for a full description of each.&lt;/p&gt;
&lt;h2 id=&#34;charges&#34;&gt;Charges&lt;/h2&gt;
&lt;p&gt;I recently push a couple of builds to test this configuration and I inferred 0.2 USD in charges. But that was like 10-15 builds a day.&lt;/p&gt;
&lt;h1 id=&#34;deploying&#34;&gt;Deploying&lt;/h1&gt;
&lt;p&gt;In order to deploy this you can use &lt;a href=&#34;https://github.com/Skarlso/go-furnace&#34;&gt;Furnace&lt;/a&gt; to easily manage the template and it&amp;rsquo;s parameters. Once you copy the template to the target directory, simply run &lt;code&gt;furnace aws create&lt;/code&gt; and provide the necessary parameters.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;And that is all. A nice little stack which does the same as Wercker without costs but the leisure of simply pushing up some change to a repository of your choosing.&lt;/p&gt;
&lt;p&gt;I hope you enjoyed this little write up as much as I enjoyed creating it.&lt;/p&gt;
&lt;p&gt;As always,
Thanks for reading!
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 4</title>
      <link>https://skarlso.github.io/2017/04/16/building-furnace-part-4/</link>
      <pubDate>Sun, 16 Apr 2017 09:23:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2017/04/16/building-furnace-part-4/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Previously on this blog: &lt;a href=&#34;https://skarlso.github.io/2017/03/16/building-furnace-part-1/&#34;&gt;Part 1&lt;/a&gt;. &lt;a href=&#34;https://skarlso.github.io/2017/03/19/building-furnace-part-2/&#34;&gt;Part 2&lt;/a&gt;. &lt;a href=&#34;https://skarlso.github.io/2017/03/22/building-furnace-part-3/&#34;&gt;Part 3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this part we are going to talk about Unit Testing Furnace and how to work some magic with AWS and Go.&lt;/p&gt;
&lt;h1 id=&#34;mock-stub-fake-dummy-canned-insert-name-here&#34;&gt;Mock Stub Fake Dummy Canned &lt;!-- raw HTML omitted --&gt;&lt;/h1&gt;
&lt;p&gt;Unit testing in Go usually follows the Dependency Injection model of dealing with Mocks and Stubs.&lt;/p&gt;
&lt;p&gt;## DI&lt;/p&gt;
&lt;p&gt;Dependency Inject in short is one object supplying the dependencies of another object. In a longer description, it&amp;rsquo;s ideal to be used
for removing the lock on a third party library, like the AWS client. Imaging having code which solely depends on the AWS client. How
would you unit test that code without having to ACTUALLY connect to AWS? You couldn&amp;rsquo;t. Every time you try to test the code it would run
the live code and it would try and connect to AWS and perform the operations it&amp;rsquo;s design to do. The Ruby library with it&amp;rsquo;s metaprogramming
allows you to set the client globally to stub responses, but, alas, this is not the world of Ruby.&lt;/p&gt;
&lt;p&gt;Here is where DI comes to the rescue. If you have control over the AWS client on a very high level, and would pass it around as a function
parameter, or create that client in an &lt;code&gt;init()&lt;/code&gt; function and have it globally defined; you would be able to implement your own client, and
have your code use that with stubbed responses which your tests need. For example, you would like a CreateApplication call to fail, or you
would like a DescribeStack which returns an aws.Error(&amp;ldquo;StackAlreadyExists&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;For this, however, you need the API of the AWS client. Which is provided by AWS.&lt;/p&gt;
&lt;h2 id=&#34;aws-client-api&#34;&gt;AWS Client API&lt;/h2&gt;
&lt;p&gt;In order for DI to work, the injected object needs to be of a certain type for us to inject our own. Luckily, AWS provides an Interface for
all of it&amp;rsquo;s clients. Meaning, we can implement our own version for all of the clients, like S3, CloudFormation, CodeDeploy etc.&lt;/p&gt;
&lt;p&gt;For each client you want to mock out, an &lt;em&gt;*iface&lt;/em&gt; package should be present like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/aws/aws-sdk-go/service/cloudformation/cloudformationiface&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this package you find and use the interface like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fakeCloudFormationClient&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cloudformationiface&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CloudFormationAPI&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And with this, we have our own CloudFormation client. The real code uses the real clients as function parameters, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Execute defines what this command does.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Create&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Execute&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;opts&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commander&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CommandHelper&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Creating cloud formation session.&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sess&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Region&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;REGION&lt;/span&gt;)})
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cfClient&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cloudformation&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sess&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CFClient&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;cfClient&lt;/span&gt;}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;createExecute&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;opts&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can&amp;rsquo;t test Execute itself, as it&amp;rsquo;s using the real client here (or you could have a global from some library, thus allowing you to tests
even &lt;code&gt;Execute&lt;/code&gt; here) but there is very little logic in this function for this very reason. All the logic is in small functions for which
the main starting point and our testing opportunity is, &lt;code&gt;createExecute&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;stubbing-calls&#34;&gt;Stubbing Calls&lt;/h2&gt;
&lt;p&gt;Now, that we have our own client, and with the power of Go&amp;rsquo;s interface embedding as seen above with CloudFormationAPI, we have to only stub
the functions which we are actually using, instead of every function of the given interface. This looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;cfClient&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; new(&lt;span style=&#34;color:#a6e22e&#34;&gt;CFClient&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cfClient&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fakeCloudFormationClient&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where cfClient is a struct like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// CFClient abstraction for cloudFormation client.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CFClient&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cloudformationiface&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CloudFormationAPI&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And a stubbed call can than be written as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;fc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fakeCreateCFClient&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;WaitUntilStackCreateComplete&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cloudformation&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;DescribeStacksInput&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This can range from a very trivial example, like the one above, to intricate ones as well, like this gem:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;fc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fakePushCFClient&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;ListStackResources&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cloudformation&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ListStackResourcesInput&lt;/span&gt;) (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cloudformation&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ListStackResourcesOutput&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NoASG&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StackName&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cloudformation&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ListStackResourcesOutput&lt;/span&gt;{
			&lt;span style=&#34;color:#a6e22e&#34;&gt;StackResourceSummaries&lt;/span&gt;: []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cloudformation&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StackResourceSummary&lt;/span&gt;{
				{
					&lt;span style=&#34;color:#a6e22e&#34;&gt;ResourceType&lt;/span&gt;:       &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NoASG&amp;#34;&lt;/span&gt;),
					&lt;span style=&#34;color:#a6e22e&#34;&gt;PhysicalResourceId&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;arn::whatever&amp;#34;&lt;/span&gt;),
				},
			},
		}, &lt;span style=&#34;color:#a6e22e&#34;&gt;fc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cloudformation&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ListStackResourcesOutput&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;StackResourceSummaries&lt;/span&gt;: []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cloudformation&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StackResourceSummary&lt;/span&gt;{
			{
				&lt;span style=&#34;color:#a6e22e&#34;&gt;ResourceType&lt;/span&gt;:       &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AWS::AutoScaling::AutoScalingGroup&amp;#34;&lt;/span&gt;),
				&lt;span style=&#34;color:#a6e22e&#34;&gt;PhysicalResourceId&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;arn::whatever&amp;#34;&lt;/span&gt;),
			},
		},
	}, &lt;span style=&#34;color:#a6e22e&#34;&gt;fc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This ListStackResources stub lets us test two scenarios based on the stackname. If the test stackname is &amp;lsquo;NoASG&amp;rsquo; it will return a result
which equals to a result containing no AutoScaling Group. Otherwise, it will return the correct ResourceType for an ASG.&lt;/p&gt;
&lt;p&gt;It is a common practice to line up several scenario based stubbed responses in order to test the robustness of your code.&lt;/p&gt;
&lt;p&gt;Unfortunately, this also means that your tests will be a bit cluttered with stubs and mock structs and whatnots. For that, I&amp;rsquo;m partially
using a package available struct file in which I&amp;rsquo;m defining most of the mock structs at least. And from there on, the tests will only contain
specific stubs for that particular file. This can be further fine grained by having defaults and than only override in case you need something
else.&lt;/p&gt;
&lt;h1 id=&#34;testing-fatals&#34;&gt;Testing fatals&lt;/h1&gt;
&lt;p&gt;Now, the other point which is not really AWS related, but still comes to mind when dealing with Furnace, is testing error scenarios.&lt;/p&gt;
&lt;p&gt;Because Furnace is a CLI application it uses Fatals to signal if something is wrong and it doesn&amp;rsquo;t want to continue or recover because, frankly
it can&amp;rsquo;t. If AWS throws an error, that&amp;rsquo;s it. You can retry, but in 90% of the cases, it&amp;rsquo;s usually something that you messed up.&lt;/p&gt;
&lt;p&gt;So, how do we test for a fatal or an &lt;code&gt;os.Exit&lt;/code&gt;? There are a number of points on that if you do a quick search. You may end up on this talk:
&lt;a href=&#34;https://talks.golang.org/2014/testing.slide#23&#34;&gt;GoTalk 2014 Testing Slide #23&lt;/a&gt;. Which does an interesting thing. It calls the test binary in a
separate process and tests the exit code.&lt;/p&gt;
&lt;p&gt;Others, and me as well, will say that you have to have your own logger implemented and use a different logger / os.Exit in your test environment.&lt;/p&gt;
&lt;p&gt;Others others will tell you to not to have tests around os.Exit and fatal things, rather return an error and only the main should pop a world
ending event. I leave it up to you which you want to use. Either is fine.&lt;/p&gt;
&lt;p&gt;In Furnace, I&amp;rsquo;m using a global logger in my error handling util like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// HandleFatal handler fatal errors in Furnace.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HandleFatal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;LogFatalf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And &lt;code&gt;LogFatalf&lt;/code&gt; is an exported variable &lt;code&gt;var LogFatalf = log.Fatalf&lt;/code&gt;. Than in a test, I just override this variable with a local anonymous
function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestCreateExecuteEmptyStack&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;testing&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;failed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;utils&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;LogFatalf&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}) {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;failed&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WAITFREQUENCY&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; new(&lt;span style=&#34;color:#a6e22e&#34;&gt;CFClient&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;stackname&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EmptyStack&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fakeCreateCFClient&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;stackname&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;stackname&lt;/span&gt;}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;opts&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commander&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CommandHelper&lt;/span&gt;{}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;createExecute&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;opts&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;failed&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;expected outcome to fail during create&amp;#34;&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It can get even more granular by testing for the error message to make sure that it actually fails at the point we think we are
testing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestCreateStackReturnsWithError&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;testing&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;failed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;expectedMessage&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed to create stack&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;utils&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;LogFatalf&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}) {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;failed&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].(&lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;()
		}
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WAITFREQUENCY&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; new(&lt;span style=&#34;color:#a6e22e&#34;&gt;CFClient&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;stackname&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NotEmptyStack&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fakeCreateCFClient&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;expectedMessage&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;stackname&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;stackname&lt;/span&gt;}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []byte(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;stackname&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;failed&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;expected outcome to fail&amp;#34;&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expectedMessage&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message did not equal expected message of &amp;#39;%s&amp;#39;, was:%s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;expectedMessage&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This is it. That&amp;rsquo;s all it took to write Furnace. I hope you enjoyed reading it as much as I enjoyed writing all these thoughts down.&lt;/p&gt;
&lt;p&gt;I hope somebody might learn from my journey and also improve upon it.&lt;/p&gt;
&lt;p&gt;Any comments are much appreciated and welcomed. Also, PRs and Issues can be submitted on the GitHub page of &lt;a href=&#34;https://github.com/Skarlso/go-furnace&#34;&gt;Furnace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thank you for reading!
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 3</title>
      <link>https://skarlso.github.io/2017/03/22/building-furnace-part-3/</link>
      <pubDate>Wed, 22 Mar 2017 12:03:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2017/03/22/building-furnace-part-3/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Previously on this blog: &lt;a href=&#34;http://skarlso.github.io/2017/03/16/building-furnace-part-1/&#34;&gt;Part 1&lt;/a&gt;. &lt;a href=&#34;https://skarlso.github.io/2017/03/19/building-furnace-part-2/&#34;&gt;Part 2&lt;/a&gt;. &lt;a href=&#34;https://skarlso.github.io/2017/04/16/building-furnace-part-4/&#34;&gt;Part 4&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this part, I&amp;rsquo;m going to talk about the experimental plugin system of Furnace.&lt;/p&gt;
&lt;h1 id=&#34;go-experimental-plugins&#34;&gt;Go Experimental Plugins&lt;/h1&gt;
&lt;p&gt;Since Go 1.8 was released, an exciting and new feature was introduced called a Plug-in system. This system works with dynamic
libraries built with a special switch to &lt;code&gt;go build&lt;/code&gt;. These libraries, &lt;code&gt;.so&lt;/code&gt; or &lt;code&gt;.dylib&lt;/code&gt; (later), are than loaded and once that
succeeds, specific functions can be called from them (symbol resolution).&lt;/p&gt;
&lt;p&gt;We will see how this works. For package information, visit the plugin packages Go doc page
&lt;a href=&#34;https://tip.golang.org/pkg/plugin/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;furnace-plugins&#34;&gt;Furnace Plugins&lt;/h1&gt;
&lt;p&gt;So, what does furnace use plugins for? Furnace uses plugins to execute arbitery code in, currently, four given locations / events.&lt;/p&gt;
&lt;p&gt;These are: &lt;code&gt;pre_create, post_create, pre_delete, post_delete&lt;/code&gt;. These events are called, as their name suggests, before and after
the creation and deletion of the CloudFormation stack. It allows the user to execute some code without having to rebuild the whole
project. It does that by defining a single entry point for the custom code called &lt;code&gt;RunPlugin&lt;/code&gt;. Any number of functions can be
implemented, but the plugin MUST provide this single, exported function. Otherwise it will fail and ignore that plugin.&lt;/p&gt;
&lt;h2 id=&#34;using-plugins&#34;&gt;Using Plugins&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s really easy to implement, and use these plugins. I&amp;rsquo;m not going into the detail of how to load them, because that is done by
Furnace, but only how to write and use them.&lt;/p&gt;
&lt;p&gt;To use a plugin, create a go file called: &lt;code&gt;0001_mailer.go&lt;/code&gt;. The &lt;code&gt;0001&lt;/code&gt; before it will define WHEN it&amp;rsquo;s executed.
Having multiple plugins is completely okay. Execution of order however, depends on the names of the files.&lt;/p&gt;
&lt;p&gt;Now, in 0001_mailer.post_create we would have something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// RunPlugin runs the plugin.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RunPlugin&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My Awesome Pre Create Plugin.&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next step is the build this file to be a plugin library. Note: Right now, this only works on Linux!&lt;/p&gt;
&lt;p&gt;To build this file run the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go build -buildmode=plugin -o 0001_mailer.pre_create 0001_mailer.go
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The important part here is the extension of the file specified with &lt;code&gt;-o&lt;/code&gt;. It&amp;rsquo;s important because that&amp;rsquo;s how Furnace identifies
what plugins it has to run.&lt;/p&gt;
&lt;p&gt;Finally, copy this file to &lt;code&gt;~/.config/go-furnace/plugins&lt;/code&gt; and you are all set.&lt;/p&gt;
&lt;h2 id=&#34;slack-notification-plugin&#34;&gt;Slack notification Plugin&lt;/h2&gt;
&lt;p&gt;To demonstrate how a plugin could be used is if you need some kind of notification once a Stack is completed. For example, you
might want to send a message to a Slack room. To do this, your plugin would look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/nlopes/slack&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RunPlugin&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;stackname&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FURNACE_STACKNAME&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;api&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YOUR_TOKEN_HERE&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PostMessageParameters&lt;/span&gt;{}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;channelID&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;timestamp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;api&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PostMessage&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#general&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Stack with name &amp;#39;%s&amp;#39; is Done.&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;stackname&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Message successfully sent to channel %s at %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;channelID&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;timestamp&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Currently, Furnace has no ability to share information of the stack with an outside plugin. Thus &amp;lsquo;Done&amp;rsquo; could be anything from
Rollback to Failed to CreateComplete.&lt;/p&gt;
&lt;h1 id=&#34;closing-words&#34;&gt;Closing Words&lt;/h1&gt;
&lt;p&gt;That&amp;rsquo;s it for plugins. Thanks very much for reading!
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 2</title>
      <link>https://skarlso.github.io/2017/03/19/building-furnace-part-2/</link>
      <pubDate>Sun, 19 Mar 2017 12:03:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2017/03/19/building-furnace-part-2/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Previously on this blog: &lt;a href=&#34;https://skarlso.github.io/2017/03/16/building-furnace-part-1/&#34;&gt;Part 1&lt;/a&gt;, &lt;a href=&#34;https://skarlso.github.io/2017/03/22/building-furnace-part-3/&#34;&gt;Part 3&lt;/a&gt;, &lt;a href=&#34;https://skarlso.github.io/2017/04/16/building-furnace-part-4/&#34;&gt;Part 4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this part, I&amp;rsquo;m going to talk about the AWS Go SDK and begin do dissect the intricacies of Furnace.&lt;/p&gt;
&lt;h1 id=&#34;aws-sdk&#34;&gt;AWS SDK&lt;/h1&gt;
&lt;p&gt;Fortunately, the Go SDK for AWS is quiet verbose and littered with examples of all sorts. But that doesn&amp;rsquo;t make it less complex
and less cryptic at times. I&amp;rsquo;m here to lift some of the early confusions, in hopes that I can help someone to avoid wasting time.&lt;/p&gt;
&lt;h2 id=&#34;getting-started-and-developers-guide&#34;&gt;Getting Started and Developers Guide&lt;/h2&gt;
&lt;p&gt;As always, and common from AWS, the documentation is top notch. There is a 141 pages long developer&amp;rsquo;s guide on the SDK containing
a getting started section and an API reference. Go check it out. I&amp;rsquo;ll wait. &lt;a href=&#34;http://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/aws-sdk-go-dg.pdf&#34;&gt;AWS Go SDK DG PDF&lt;/a&gt;. I will only talk about some gotchas and things I encountered, not the basics of the SDK.&lt;/p&gt;
&lt;h2 id=&#34;awsstring-and-other-types&#34;&gt;aws.String and other types&lt;/h2&gt;
&lt;p&gt;Something which is immediately visible once we take a look at the API is that everything is a pointer. Now, there are a
tremendous amount of discussions about this, but I&amp;rsquo;m with Amazon. There are various reasons for it, but to list the most prominent
ones:
- Type completion and compile time type safety.
- Values for AWS API calls have valid zero values, in addition to being optional, i.e. not being provided at all.
- Other option, like, empty interfaces with maps, or using zero values, or struct wrappers around every type, made life much
harder rather than easier or not possible at all.
- The AWS API is volatile. You never know when something gets to be optional, or required. Pointers made that decision easy.&lt;/p&gt;
&lt;p&gt;There are good number of other discussions around this topic, for example: &lt;a href=&#34;https://github.com/aws/aws-sdk-go/issues/363&#34;&gt;AWS Go GitHub #363&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to use primitives, AWS has helper functions like &lt;code&gt;aws.String&lt;/code&gt;. Because &amp;amp;&amp;ldquo;asdf&amp;rdquo; is not allowed, you would have to create a
variable and use its address in situations where a string pointer is needed, for example, name of the stack. These primitive helpers will
make in-lining possible. We&amp;rsquo;ll see later that they are used to a great extent. Pointers, however, make life a bit difficult when
constructing Input structs and make for poor aesthetics.&lt;/p&gt;
&lt;p&gt;This is something I&amp;rsquo;m returning in a test for stubbing a client call:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cloudformation&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ListStackResourcesOutput&lt;/span&gt;{
			&lt;span style=&#34;color:#a6e22e&#34;&gt;StackResourceSummaries&lt;/span&gt;: []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cloudformation&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StackResourceSummary&lt;/span&gt;{
				{
					&lt;span style=&#34;color:#a6e22e&#34;&gt;ResourceType&lt;/span&gt;:       &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NoASG&amp;#34;&lt;/span&gt;),
					&lt;span style=&#34;color:#a6e22e&#34;&gt;PhysicalResourceId&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;arn::whatever&amp;#34;&lt;/span&gt;),
				},
			},
		}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This doesn&amp;rsquo;t look so appealing, but one gets used to it quickly.&lt;/p&gt;
&lt;h2 id=&#34;error-handling&#34;&gt;Error handling&lt;/h2&gt;
&lt;p&gt;Errors also have their own types. An AWS error looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;awsErr&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;.(&lt;span style=&#34;color:#a6e22e&#34;&gt;awserr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First, we check if error is nil, than we type check if the error is an AWS error or something different. In the wild, this will
look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;awsErr&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;.(&lt;span style=&#34;color:#a6e22e&#34;&gt;awserr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;awsErr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Code&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;codedeploy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ErrCodeDeploymentGroupAlreadyExistsException&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;awsErr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Code&lt;/span&gt;())
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
			}
			&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DeploymentGroup already exists. Nothing to do.&amp;#34;&lt;/span&gt;)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If it&amp;rsquo;s an AWS error, we can check further for the error code that it returns in order to identify what to handle, or what to throw
on to the caller to a potential fatal. Here, I&amp;rsquo;m ignoring the AlreadyExistsException because, if it does, we just go on to a next
action.&lt;/p&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;p&gt;Luckily the API doc is very mature. In most of the cases, they provide an example to an API call. These examples, however, from
time to time provide more confusion than clarity. Take CloudFormation. For me, when I first glanced upon the
description of the API it wasn&amp;rsquo;t immediately clear that the &lt;code&gt;TemplateBody&lt;/code&gt; was supposed to be the whole template, and that
the rest of the fields were almost all optional settings. Or provided overrides in special cases.&lt;/p&gt;
&lt;p&gt;And since the template is not an ordinary JAML or JSON file, I was looking for something that parses it into that the Struct I
was going to use. After some time, and digging, I realized that I didn&amp;rsquo;t need that, and that I just need to read in the template,
define some extra parameters, and give the TemplateBody the whole of the template. The parameters defined by the CloudFormation
template where extracted for me by &lt;code&gt;ValidateTemplate&lt;/code&gt; API call which returned all of them in a convenient
&lt;code&gt;[]*cloudformation.Parameter&lt;/code&gt; slice. These things are not described in the document or visible from the examples. I mainly found
them through playing with the API and focused experimentation.&lt;/p&gt;
&lt;h2 id=&#34;waiters&#34;&gt;Waiters&lt;/h2&gt;
&lt;p&gt;From other SDK implementations, we got used to Waiters. These handy methods wait for a service to become available or for certain
situations to take in effect, like a Stage being &lt;code&gt;CREATE_COMPLETE&lt;/code&gt;. The Go waiters, however, don&amp;rsquo;t allow for callback to be fired,
or for running blocks, like the ruby SDK does. For this, I wrote a handy little waiter for myself, which outputs a spinner to see
that we are currently waiting for something and not frozen in time. This waiter looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// WaitForFunctionWithStatusOutput waits for a function to complete its action.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WaitForFunctionWithStatusOutput&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;freq&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;()) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wg&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sync&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WaitGroup&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;wg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Done&lt;/span&gt;()
		&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;()
		&lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	}()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;counter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;counter&lt;/span&gt; = (&lt;span style=&#34;color:#a6e22e&#34;&gt;counter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;Spinners&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SPINNER&lt;/span&gt;])
			&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\r[%s] Waiting for state: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;yellow&lt;/span&gt;(string(&lt;span style=&#34;color:#a6e22e&#34;&gt;Spinners&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SPINNER&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;counter&lt;/span&gt;])), &lt;span style=&#34;color:#a6e22e&#34;&gt;red&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt;))
			&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Duration&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;freq&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;:
				&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;()
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:
			}
		}
	}()

	&lt;span style=&#34;color:#a6e22e&#34;&gt;wg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Wait&lt;/span&gt;()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And I&amp;rsquo;m calling it with the following method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;utils&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WaitForFunctionWithStatusOutput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DELETE_COMPLETE&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WAITFREQUENCY&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;cfClient&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WaitUntilStackDeleteComplete&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;describeStackInput&lt;/span&gt;)
	})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This would output these lines to the console:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\]&lt;/span&gt; Waiting &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; state: DELETE_COMPLETE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The spinner can be configured to be one of the following types:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Spinners&lt;/span&gt; = []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;`←↖↑↗→↘↓↙`&lt;/span&gt;,
	&lt;span style=&#34;color:#e6db74&#34;&gt;`▁▃▄▅▆▇█▇▆▅▄▃`&lt;/span&gt;,
	&lt;span style=&#34;color:#e6db74&#34;&gt;`┤┘┴└├┌┬┐`&lt;/span&gt;,
	&lt;span style=&#34;color:#e6db74&#34;&gt;`◰◳◲◱`&lt;/span&gt;,
	&lt;span style=&#34;color:#e6db74&#34;&gt;`◴◷◶◵`&lt;/span&gt;,
	&lt;span style=&#34;color:#e6db74&#34;&gt;`◐◓◑◒`&lt;/span&gt;,
	&lt;span style=&#34;color:#e6db74&#34;&gt;`⣾⣽⣻⢿⡿⣟⣯⣷`&lt;/span&gt;,
	&lt;span style=&#34;color:#e6db74&#34;&gt;`|/-\`&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Handy.&lt;/p&gt;
&lt;p&gt;And with that, let&amp;rsquo;s dive into the basics of Furnace.&lt;/p&gt;
&lt;h1 id=&#34;furnace&#34;&gt;Furnace&lt;/h1&gt;
&lt;h2 id=&#34;directory-structure-and-packages&#34;&gt;Directory Structure and Packages&lt;/h2&gt;
&lt;p&gt;Furnace is divided into three main packages.&lt;/p&gt;
&lt;h3 id=&#34;commands&#34;&gt;commands&lt;/h3&gt;
&lt;p&gt;Commands package is where the gist of Furnace lies. These commands represent the commands which are used through the CLI. Each
file has the implementation for one command. The structure is devised by this library: &lt;a href=&#34;https://github.com/Yitsushi/go-commander&#34;&gt;Yitsushi&amp;rsquo;s Command Library&lt;/a&gt;.
As of the writing of this post, the following commands are available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create - Creates a stack using the CloudFormation template file under ~/.config/go-furnace&lt;/li&gt;
&lt;li&gt;delete - Deletes the created Stack. Doesn&amp;rsquo;t do anything if the stack doesn&amp;rsquo;t exist&lt;/li&gt;
&lt;li&gt;push - Pushes an application to a stack&lt;/li&gt;
&lt;li&gt;status - Displays information about the stack&lt;/li&gt;
&lt;li&gt;delete-application - Deletes the CodeDeploy application and deployment group created by &lt;code&gt;push&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These commands represent the heart of furnace. I would like to keep these to a minimum, but I do plan on adding more, like
&lt;code&gt;update&lt;/code&gt; and &lt;code&gt;rollout&lt;/code&gt;. Further details and help messages on these commands can be obtained by running: &lt;code&gt;./furnace help&lt;/code&gt; or
&lt;code&gt;./furnace help create&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;❯ ./furnace help push
Usage: furnace push appName &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-s3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

Push a version of the application to a stack

Examples:
  furnace push
  furnace push appName
  furnace push appName -s3
  furnace push -s3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;config&#34;&gt;config&lt;/h3&gt;
&lt;p&gt;Contains the configuration loader and some project wide defaults which are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Events for the plugin system - &lt;code&gt;pre-create&lt;/code&gt;, &lt;code&gt;post-create&lt;/code&gt;, &lt;code&gt;pre-delete&lt;/code&gt;, &lt;code&gt;post-delete&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;CodeDeploy role name - &lt;code&gt;CodeDeployServiceRole&lt;/code&gt;. This is used if none is provided to locate the CodeDeploy IAM role.&lt;/li&gt;
&lt;li&gt;Wait frequency - Is the setting which controls how long the waiter should sleep in between status updates. Default is &lt;code&gt;1s&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Spinner - Is just the number of the spinner to use.&lt;/li&gt;
&lt;li&gt;Plugin registry - Is a map of functions to run for the above events.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Further more, config loads the CloudFormation template and checks if some necessary settings are present in the environment, exp:
the configuration folder under &lt;code&gt;~/.config/go-furnace&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;utils&#34;&gt;utils&lt;/h3&gt;
&lt;p&gt;These are some helper functions which are used throughout the project. To list them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;error_handler - Is a simple error handler. I&amp;rsquo;m thinking of refactoring this one to some saner version.&lt;/li&gt;
&lt;li&gt;spinner - Sets up which spinner to use in the waiter function.&lt;/li&gt;
&lt;li&gt;waiter - Contains the verbose waiter introduced above under &lt;a href=&#34;##Waiters&#34;&gt;Waiters&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;configuration-and-environment-variables&#34;&gt;Configuration and Environment variables&lt;/h2&gt;
&lt;p&gt;Furnace is a Go application, thus it doesn&amp;rsquo;t have the luxury of Ruby or Python where the configuration files are usually bundled
with the app. But, it does have a standard for it. Usually, configurations reside in either of these two locations. Environment
Properties or|and configuration files under a fixed location ( i.e. HOME/.config/app-name ). Furnace employs both.&lt;/p&gt;
&lt;p&gt;Settings like, region, stack name, enable plugin system, are under environment properties ( though this can change ), while the
CloudFormation template lives under &lt;code&gt;~/.config/go-furnace/&lt;/code&gt;. Lastly it assumes some things, like the Deployment IAM role just
exists under the used AWS account. All these are loaded and handled by the config package described above.&lt;/p&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;p&gt;A typical scenario for Furnace would be the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setup your CloudFormation template or use the one provided. The one provided sets up a highly available and self healing setting
using Auto-Scaling and Load-Balancing with a single application instance. Edit this template to your liking than copy it to
&lt;code&gt;~/.config/go-furnace&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create the configured stack with &lt;code&gt;./furnace create&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create will ask for the parameters defined in the template. If defaults are setup, simply hitting enter will use these defaults.
Take note, that the provided template sets up SSH access via a provided key. If that key is not present in CF, you won&amp;rsquo;t be able
to SSH into the created instance.&lt;/li&gt;
&lt;li&gt;Once the stack is completed, the application is ready to be pushed. To do this, run: &lt;code&gt;./furnace push&lt;/code&gt;. This will locate the
appropriate version of the app from S3 or GitHub and push that version to the instances in the Auto-Scaling group. To all of
them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;general-practices-applied-to-the-project&#34;&gt;General Practices Applied to the Project&lt;/h2&gt;
&lt;h3 id=&#34;commands-1&#34;&gt;Commands&lt;/h3&gt;
&lt;p&gt;For each command the main entry point is the &lt;code&gt;execute&lt;/code&gt; function. These functions are usually calling out the small chunks of
distributed methods. Logic was kept to a bare minimum ( probably could be simplified even further ) in the execute functions
mostly for testability and the likes. We will see that in a followup post.&lt;/p&gt;
&lt;h3 id=&#34;errors&#34;&gt;Errors&lt;/h3&gt;
&lt;p&gt;Errors are handled immediately and usually through a fatal. If any error occurs than the application is halted. In followup
versions this might become more granular. I.e. don&amp;rsquo;t immediately stop the world, maybe try to recover, or create a Poller or
Re-Tryer, which tries a call again for a configured amount of times.&lt;/p&gt;
&lt;h3 id=&#34;output-colors&#34;&gt;Output colors&lt;/h3&gt;
&lt;p&gt;Not that important, but still&amp;hellip; Aesthetics. Displaying data to the console in a nice way gives it some extra flare.&lt;/p&gt;
&lt;h3 id=&#34;makefile&#34;&gt;Makefile&lt;/h3&gt;
&lt;p&gt;This project works with a Makefile for various reasons. Later on, once the project might become more complex, a Makefile makes it
really easy to handle different ways of packaging the application. Currently, for example, it provides a &lt;code&gt;linux&lt;/code&gt; target which will
make Go build the project for Linux architecture on any other Architecture i.e. cross-compiling.&lt;/p&gt;
&lt;p&gt;It also provides an easy way to run unit tests with &lt;code&gt;make test&lt;/code&gt; and installing with &lt;code&gt;make &amp;amp;&amp;amp; make install&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;closing-words&#34;&gt;Closing Words&lt;/h1&gt;
&lt;p&gt;That is all for Part 2. Join me in Part 3 where I will talk about the experimental Plugin system that Furnace employs.&lt;/p&gt;
&lt;p&gt;Thank you for reading!
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 1</title>
      <link>https://skarlso.github.io/2017/03/16/building-furnace-part-1/</link>
      <pubDate>Thu, 16 Mar 2017 21:49:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2017/03/16/building-furnace-part-1/</guid>
      <description>&lt;h1 id=&#34;other-posts&#34;&gt;Other posts:&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://skarlso.github.io/2017/03/19/building-furnace-part-2/&#34;&gt;Part 2&lt;/a&gt;, &lt;a href=&#34;https://skarlso.github.io/2017/03/22/building-furnace-part-3/&#34;&gt;Part 3&lt;/a&gt;, &lt;a href=&#34;https://skarlso.github.io/2017/04/16/building-furnace-part-4/&#34;&gt;Part 4&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;building-furnace-part-1&#34;&gt;Building Furnace: Part 1&lt;/h1&gt;
&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;This is the first part of a 4 part series which talks about the process of building a middlish sized project in Go,
with AWS. Including Unit testing and a experimental plugin feature.&lt;/p&gt;
&lt;p&gt;The first part will talk about the AWS services used in brief and will contain a basic description for those who are not familiar
with them. The second part will talk about the Go SDK and the project structure itself, how it can be used, improved, and how it can
help in everyday life. The third part will talk about the experimental plugin system, and finally, we will tackle unit testing AWS
in Go.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s begin, shall we?&lt;/p&gt;
&lt;h1 id=&#34;aws&#34;&gt;AWS&lt;/h1&gt;
&lt;h2 id=&#34;cloudformation&#34;&gt;CloudFormation&lt;/h2&gt;
&lt;p&gt;If you haven&amp;rsquo;t yet read about, or know off, AWS&#39; CloudFormation service, you can either go ahead and read the &lt;a href=&#34;https://aws.amazon.com/cloudformation/&#34;&gt;Documentation&lt;/a&gt;
or read on for a very quick summary. If you are familiar with CF, you should skip ahead to &lt;a href=&#34;##CodeDeploy&#34;&gt;CodeDeploy&lt;/a&gt; section.&lt;/p&gt;
&lt;p&gt;CF is a service which bundles together other AWS services (for example: EC2, S3, ELB, ASG, RDS) into one, easily manageable stack.
After a stack has been created, all the resources can be handled as one, located, tagged and used via CF specific console commands.
It&amp;rsquo;s also possible to define any number of parameters, so a stack can actually be very versatile. A parameter can be anything, from
SSH IP restriction to KeyPair names and list of tags to create or in what region the stack will be in.&lt;/p&gt;
&lt;p&gt;To describe how these parts fit together, one must use a CloudFormation Template file which is either in JSON or in
YAML format. A simple example looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;Parameters&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;KeyName&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;Description&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;The EC2 Key Pair to allow SSH access to the instance&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;Type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;AWS::EC2::KeyPair::KeyName&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;Resources&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;Ec2Instance&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;Type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;AWS::EC2::Instance&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;Properties&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;SecurityGroups&lt;/span&gt;:
          - &lt;span style=&#34;color:#f92672&#34;&gt;Ref&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;InstanceSecurityGroup&lt;/span&gt;
          - &lt;span style=&#34;color:#ae81ff&#34;&gt;MyExistingSecurityGroup&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;KeyName&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;Ref&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;KeyName&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;ImageId&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ami-7a11e213&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;InstanceSecurityGroup&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;Type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;AWS::EC2::SecurityGroup&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;Properties&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;GroupDescription&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Enable SSH access via port 22&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;SecurityGroupIngress&lt;/span&gt;:
          - &lt;span style=&#34;color:#f92672&#34;&gt;IpProtocol&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;tcp&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;FromPort&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;22&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;ToPort&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;22&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;CidrIp&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0.0.0&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;/0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are a myriad of these template samples &lt;a href=&#34;https://aws.amazon.com/cloudformation/aws-cloudformation-templates/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not going to explain this in too much detail. Parameters define the parameters, and resources define all the AWS services which
we would like to configure. Here we can see, that we are creating an EC2 instance with a custom Security Group plus and already
existing security group. ImageId is the AMI which will be used for the EC2 instance. The InstanceSecurityGroup is only defining
some SSH access to the instance.&lt;/p&gt;
&lt;p&gt;That is pretty much it. This can become bloated relatively quickly once, VPCs, ELBs, and ASGs come into play. And CloudFormation
templates can also contain simple logical switches, like, conditions, ref for variables, maps and other shenanigans.&lt;/p&gt;
&lt;p&gt;For example consider this part in the above example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;KeyName&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;Ref&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;KeyName&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, we use the &lt;code&gt;KeyName&lt;/code&gt; parameter as a Reference Value which will be interpolated to the real value, or the default one, as the
template gets processed.&lt;/p&gt;
&lt;h2 id=&#34;codedeploy&#34;&gt;CodeDeploy&lt;/h2&gt;
&lt;p&gt;If you haven&amp;rsquo;t heard about CodeDeploy yet, please browse the relevant &lt;a href=&#34;http://docs.aws.amazon.com/codedeploy/latest/userguide/welcome.html&#34;&gt;Documentation&lt;/a&gt;
or follow along for a &amp;ldquo;quick&amp;rdquo; description.&lt;/p&gt;
&lt;p&gt;CodeDeploy just does what the name says. It deploys code. Any kind of code, as long as the deployment process is described in a
file called &lt;code&gt;appspec.yml&lt;/code&gt;. It can be easy as coping a file to a specific location or incredibly complex with builds of various
kinds.&lt;/p&gt;
&lt;p&gt;For a simple example look at this configuration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;os&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;linux&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;files&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;source&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/index.html&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;destination&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/var/www/html/&lt;/span&gt;
      - &lt;span style=&#34;color:#f92672&#34;&gt;source&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/healthy.html&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;destination&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/var/www/html/&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;hooks&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;BeforeInstall&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;scripts/install_dependencies&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;timeout&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;runas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;root&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;scripts/clean_up&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;timeout&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;runas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;root&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;scripts/start_server&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;timeout&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;runas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;root&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;ApplicationStop&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;scripts/stop_server&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;timeout&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;runas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;root&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CodeDeploy applications have hooks and life-cycle events which can be used to control the deployment process of an like, starting
the WebServer; making sure files are in the right location; copying files, running configuration management software like puppet,
ansible or chef; etc, etc.&lt;/p&gt;
&lt;p&gt;What can be done in an &lt;code&gt;appspec.yml&lt;/code&gt; file is described here: &lt;a href=&#34;http://docs.aws.amazon.com/codedeploy/latest/userguide/app-spec-ref.html&#34;&gt;Appspec Reference Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Deployment happens in one of two ways:&lt;/p&gt;
&lt;h3 id=&#34;github&#34;&gt;GitHub&lt;/h3&gt;
&lt;p&gt;If the preferred way to deploy the application is from GitHub a commit hash must be used to identify which &amp;ldquo;version&amp;rdquo; of the
application is to be deployed. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;rev&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;codedeploy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RevisionLocation&lt;/span&gt;{
        &lt;span style=&#34;color:#a6e22e&#34;&gt;GitHubLocation&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;codedeploy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GitHubLocation&lt;/span&gt;{
            &lt;span style=&#34;color:#a6e22e&#34;&gt;CommitId&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kajdf94j0f9k309klksjdfkj&amp;#34;&lt;/span&gt;),
            &lt;span style=&#34;color:#a6e22e&#34;&gt;Repository&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Skarlso/furnace-codedeploy-app&amp;#34;&lt;/span&gt;),
        },
        &lt;span style=&#34;color:#a6e22e&#34;&gt;RevisionType&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GitHub&amp;#34;&lt;/span&gt;),
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Commit Id is the hash of the latest release and repository is the full account/repository pointing to the application.&lt;/p&gt;
&lt;h3 id=&#34;s3&#34;&gt;S3&lt;/h3&gt;
&lt;p&gt;The second way is to use an S3 bucket. The bucket will contain an archived version of the application with a given extension. I&amp;rsquo;m
saying given extension, because it has to be specified like this (and can be either &amp;lsquo;zip&amp;rsquo;, or &amp;lsquo;tar&amp;rsquo; or &amp;lsquo;tgz&amp;rsquo;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;rev&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;codedeploy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RevisionLocation&lt;/span&gt;{
        &lt;span style=&#34;color:#a6e22e&#34;&gt;S3Location&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;codedeploy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;S3Location&lt;/span&gt;{
            &lt;span style=&#34;color:#a6e22e&#34;&gt;Bucket&lt;/span&gt;:     &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my_codedeploy_bucket&amp;#34;&lt;/span&gt;),
            &lt;span style=&#34;color:#a6e22e&#34;&gt;BundleType&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zip&amp;#34;&lt;/span&gt;),
            &lt;span style=&#34;color:#a6e22e&#34;&gt;Key&lt;/span&gt;:        &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my_awesome_app&amp;#34;&lt;/span&gt;),
            &lt;span style=&#34;color:#a6e22e&#34;&gt;Version&lt;/span&gt;:    &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;VersionId&amp;#34;&lt;/span&gt;),
        },
        &lt;span style=&#34;color:#a6e22e&#34;&gt;RevisionType&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S3&amp;#34;&lt;/span&gt;),
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, we specify the bucket name, the extension, the name of the file and an optional version id, which can be ignored.&lt;/p&gt;
&lt;h3 id=&#34;deploying&#34;&gt;Deploying&lt;/h3&gt;
&lt;p&gt;So how does code deploy get either of the applications to our EC2 instances? It uses an agent which is running on all of the
instances that we create. In order to do this, the agent needs to be present on our instance. For linux this can be achieved with
the following UserData (UserData in CF is the equivalent of a bootsrap script):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UserData&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fn::Base64&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fn::Join&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#!/bin/bash -v&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sudo yum -y update&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sudo yum -y install ruby wget&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cd /home/ec2-user/&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wget https://aws-codedeploy-eu-central-1.s3.amazonaws.com/latest/install&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chmod +x ./install&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sudo ./install auto&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sudo service codedeploy-agent start&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A simple user data configuration in the CloudFormation template will make sure that every instance that we create will have the
CodeDeploy agent running and waiting for instructions. This agent is self updating. Which can cause some trouble if AWS releases a
broken agent. However unlikely, it can happen. Never the less, once installed, it&amp;rsquo;s no longer a concern to be bothered with.&lt;/p&gt;
&lt;p&gt;It communications on HTTPS port 443.&lt;/p&gt;
&lt;p&gt;CodeDeploy identifies instances which need to be updated according to our preferences, by tagging the EC2 and Auto Scaling groups.
Tagging happens in the CloudFormation template through the AutoScalingGroup settings like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tags&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; [
        {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Key&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fu_stage&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Value&amp;#34;&lt;/span&gt; : { &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Ref&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AWS::StackName&amp;#34;&lt;/span&gt; },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;PropagateAtLaunch&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
        }
    ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will give the EC2 instance a tag called &lt;code&gt;fu_stage&lt;/code&gt; with value equaling to the name of the stack. Once this is done, CodeDeploy
looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;codedeploy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CreateDeploymentInput&lt;/span&gt;{
        &lt;span style=&#34;color:#a6e22e&#34;&gt;ApplicationName&lt;/span&gt;:               &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;appName&lt;/span&gt;),
        &lt;span style=&#34;color:#a6e22e&#34;&gt;IgnoreApplicationStopFailures&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Bool&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;),
        &lt;span style=&#34;color:#a6e22e&#34;&gt;DeploymentGroupName&lt;/span&gt;:           &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;appName&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DeploymentGroup&amp;#34;&lt;/span&gt;),
        &lt;span style=&#34;color:#a6e22e&#34;&gt;Revision&lt;/span&gt;:                      &lt;span style=&#34;color:#a6e22e&#34;&gt;revisionLocation&lt;/span&gt;(),
        &lt;span style=&#34;color:#a6e22e&#34;&gt;TargetInstances&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;codedeploy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TargetInstances&lt;/span&gt;{
            &lt;span style=&#34;color:#a6e22e&#34;&gt;AutoScalingGroups&lt;/span&gt;: []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{
                &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AutoScalingGroupPhysicalID&amp;#34;&lt;/span&gt;),
            },
            &lt;span style=&#34;color:#a6e22e&#34;&gt;TagFilters&lt;/span&gt;: []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;codedeploy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;EC2TagFilter&lt;/span&gt;{
                {
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;Key&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fu_stage&amp;#34;&lt;/span&gt;),
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt;:  &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;KEY_AND_VALUE&amp;#34;&lt;/span&gt;),
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;STACKNAME&lt;/span&gt;),
                },
            },
        },
        &lt;span style=&#34;color:#a6e22e&#34;&gt;UpdateOutdatedInstancesOnly&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Bool&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;),
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CreateDeploymentInput is the entire parameter list that is needed in order to identify instances to deploy code to. We can see
here that it looks for an AutoScalingGroup by Physical Id and the tag labeled &lt;code&gt;fu_stage&lt;/code&gt;. Once found, it will use
&lt;code&gt;UpdateOutdatedInstancesOnly&lt;/code&gt; to determine if an instance needs to be updated or not. Set to false means, it always updates.&lt;/p&gt;
&lt;h1 id=&#34;furnace&#34;&gt;Furnace&lt;/h1&gt;
&lt;p&gt;Where does &lt;a href=&#34;https://github.com/Skarlso/go-furnace&#34;&gt;Furnace&lt;/a&gt; fit in, in all of this? Furnace provides a very easy mechanism to create,
delete and push code to a CloudFormation stack using CodeDeploy, and a couple of environment properties. Furnace &lt;code&gt;create&lt;/code&gt; will
create a CloudFormation stack according to the provided template, all the while asking for the parameters defined in it for
flexibility. &lt;code&gt;delete&lt;/code&gt; will remove the stack and all affiliated resources except for the created CodeDeploy application. For that,
there is &lt;code&gt;delete-application&lt;/code&gt;. &lt;code&gt;status&lt;/code&gt; will display information about the stack: Outputs, Parameters, Id, Name, and status.
Something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    2017/03/16 21:14:37 Stack state is:  &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      Capabilities: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CAPABILITY_IAM&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
      CreationTime: 2017-03-16 20:09:38.036 +0000 UTC,
      DisableRollback: false,
      Outputs: &lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;
          Description: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;URL of the website&amp;#34;&lt;/span&gt;,
          OutputKey: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;URL&amp;#34;&lt;/span&gt;,
          OutputValue: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://FurnaceSt-ElasticL-ID.eu-central-1.elb.amazonaws.com&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}]&lt;/span&gt;,
      Parameters: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
          ParameterKey: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;KeyName&amp;#34;&lt;/span&gt;,
          ParameterValue: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UserKeyPair&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
          ParameterKey: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SSHLocation&amp;#34;&lt;/span&gt;,
          ParameterValue: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.0.0.0/0&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
          ParameterKey: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CodeDeployBucket&amp;#34;&lt;/span&gt;,
          ParameterValue: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;None&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
          ParameterKey: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;InstanceType&amp;#34;&lt;/span&gt;,
          ParameterValue: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t2.nano&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
      StackId: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;arn:aws:cloudformation:eu-central-1:9999999999999:stack/FurnaceStack/asdfadsf-adsfa3-432d-a-fdasdf&amp;#34;&lt;/span&gt;,
      StackName: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FurnaceStack&amp;#34;&lt;/span&gt;,
      StackStatus: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CREATE_COMPLETE&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;( This will later be improved to include created resources as well. )&lt;/p&gt;
&lt;p&gt;Once the stack is &lt;code&gt;CREATE_COMPLETE&lt;/code&gt; a simple &lt;code&gt;push&lt;/code&gt; will deliver our application on each instance in the stack. We will get into
more detail about how these commands are working in Part 2 of this series.&lt;/p&gt;
&lt;h1 id=&#34;final-words&#34;&gt;Final Words&lt;/h1&gt;
&lt;p&gt;This is it for now.&lt;/p&gt;
&lt;p&gt;Join me next time when I will talk about the AWS Go SDK and its intricacies and we will start to look at the basics of Furnace.&lt;/p&gt;
&lt;p&gt;As always,
Thanks for reading!
Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Minecraft world automatic backup to AWS S3 bucket - Part 2 (Custom functions)</title>
      <link>https://skarlso.github.io/2016/04/17/minecraft-server-aws-s3-backup-part2/</link>
      <pubDate>Sun, 17 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2016/04/17/minecraft-server-aws-s3-backup-part2/</guid>
      <description>&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Got an update for the backup script. This time, you&amp;rsquo;ll have the ability to implement your own upload capabilities. I provide a mock implementation for the required functions.&lt;/p&gt;
&lt;p&gt;Here is the script again, now modified and a bit cleaned up. I hope it&amp;rsquo;s helpful.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -t &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    colors&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;tput colors&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; $colors &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        RED&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\033[0;31m&amp;#39;&lt;/span&gt;
        LIGHT_GREEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\033[1;32m&amp;#39;&lt;/span&gt;
        NC&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\033[0m&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MINECRAFT_BUCKET&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please set the env variable %bMINECRAFT_BUCKET%b to the s3 archive bucket name.\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RED&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NC&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MINECRAFT_ARCHIVE_LIMIT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please set the env variable %bMINECRAFT_ARCHIVE_LIMIT%b to limit the number of archives to keep.\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RED&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NC&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MINECRAFT_WORLD&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please set the env variable %bMINECRAFT_WORLD%b to specify what world to back-up.\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RED&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NC&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

backup_world&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MINECRAFT_WORLD&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
backup_bucket&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MINECRAFT_BUCKET&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
backup_limit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MINECRAFT_ARCHIVE_LIMIT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
archive_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;backup_world&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;date +&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%H-%M-%S-%m-%d-%Y&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.zip&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; create_archive &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Creating archive of %b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;backup_world&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%b\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RED&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NC&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    zip -r $archive_name $backup_world
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; amazon_bak &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    create_archive

    printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Checking if bucket has more than %b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;backup_limit&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%b files already.\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RED&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NC&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    content&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;aws s3 ls s3://$backup_bucket | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print $4}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${#&lt;/span&gt;content[@]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; -eq $backup_limit &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${#&lt;/span&gt;content[@]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; -gt $backup_limit  &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;There are too many archives. Deleting oldest one.&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# We can assume here that the list is in cronological order&lt;/span&gt;
    	printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%bs3://&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;backup_bucket&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;content[0]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\n%b&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RED&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NC&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
        aws s3 rm s3://$backup_bucket/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;content[0]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

    printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Uploading %b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;archive_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%b to s3 archive bucket.\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RED&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NC&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;aws s3 cp $archive_name s3://$backup_bucket&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$state&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;~ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;upload:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;File upload %bsuccessful%b.\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;LIGHT_GREEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NC&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%bError%b occured while uploading archive. Please investigate.\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RED&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NC&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; custom &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -e custom.sh &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        source ./custom.sh
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;custom.sh script not found. Please implement the apropriate functions.&amp;#34;&lt;/span&gt;
        exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Checking for the number of files. Limit is: &lt;/span&gt;$backup_limit&lt;span style=&#34;color:#e6db74&#34;&gt;.&amp;#34;&lt;/span&gt;
    files&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;list&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${#&lt;/span&gt;files[@]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; -eq $backup_limit &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${#&lt;/span&gt;files[@]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; -gt $backup_limit &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Deleting extra file.&amp;#34;&lt;/span&gt;
        delete &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;files[0]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; $? !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
            printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%bFailed%b to delete file. Please investigate failure.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RED&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NC&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
            exit $?
        &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Zipping world.&amp;#34;&lt;/span&gt;
    create_archive

    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Uploading world.&amp;#34;&lt;/span&gt;
    upload $archive_name

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; $? !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%bFailed%b to upload archive. Please investigate the error.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RED&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NC&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
        exit $?
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

    printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Upload %bsuccessful%b&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;LIGHT_GREEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NC&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; help &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage:&amp;#34;&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./backup_world [METHOD]&amp;#34;&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Exp.: ./backup_world aws|./backup_world custom|./backup_world dropbox&amp;#34;&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Each method has it&amp;#39;s own environment properties that it requires.&amp;#34;&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Global: MINECRAFT_WORLD|MINECRAFT_BUCKET|MINECRAFT_ARCHIVE_LIMIT&amp;#34;&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Custom: Have a file, called &amp;#39;custom.sh&amp;#39; which is sourced.&amp;#34;&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Implement these three functions: upload | list | delete.&amp;#34;&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;upload -&amp;gt; should return exit code 0 on success, should return exit code 1 on failure.&amp;#34;&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;list -&amp;gt; should return a list of cronologically ordered items.&amp;#34;&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;delete -&amp;gt; should return exit code 0 on success, should return exit code 1 on failure.&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; $1 in
    aws &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        amazon_bak
        ;;
    custom &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        custom
        ;;
    * &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        help
        ;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here is the sample implementation for the custom upload functionality.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; upload &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uploading&amp;#34;&lt;/span&gt;
    local result&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $result
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; delete &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deleting &lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    local result&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $result
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; list &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    local arr&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;arr[@]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Minecraft world automatic backup to AWS S3 bucket</title>
      <link>https://skarlso.github.io/2016/04/16/minecraft-server-aws-s3-backup/</link>
      <pubDate>Sat, 16 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2016/04/16/minecraft-server-aws-s3-backup/</guid>
      <description>&lt;p&gt;Hi Folks.&lt;/p&gt;
&lt;p&gt;Previously we created a Minecraft server using Docker. After my server got popular in the family, and a lot of stuff started to pile up on it, as a good IT person, I&amp;rsquo;m backing up the world once in a while.&lt;/p&gt;
&lt;p&gt;For that, I&amp;rsquo;m using AWS S3 with the CLI and a little bash script which runs once a week.&lt;/p&gt;
&lt;p&gt;The script is really straightforward. I&amp;rsquo;m doing manual versioning, although S3 does provide one out of the box. However, amazon&amp;rsquo;s S3 versioning doesn&amp;rsquo;t allow limiting the number of versions being kept. And since I&amp;rsquo;m doing that anyways, might as well take care of the rest.&lt;/p&gt;
&lt;p&gt;Without further ado, here is the script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -t &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    colors&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;tput colors&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; $colors &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        RED&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\033[0;31m&amp;#39;&lt;/span&gt;
        LIGHT_GREEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\033[1;32m&amp;#39;&lt;/span&gt;
        NC&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\033[0m&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MINECRAFT_BUCKET&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
	printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please set the env variable &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RED&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;MINECRAFT_BUCKET&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NC&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; to the s3 archive bucket name.\n&amp;#34;&lt;/span&gt;
	exit &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MINECRAFT_ARCHIVE_LIMIT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
	printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please set the env variable &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RED&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;MINECRAFT_ARCHIVE_LIMIT&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NC&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; to limit the number of archives to keep.\n&amp;#34;&lt;/span&gt;
	exit &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

backup_bucket&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MINECRAFT_BUCKET&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
backup_limit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MINECRAFT_ARCHIVE_LIMIT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
world&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$1
printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Creating archive of &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RED&lt;span style=&#34;color:#e6db74&#34;&gt;}${&lt;/span&gt;world&lt;span style=&#34;color:#e6db74&#34;&gt;}${&lt;/span&gt;NC&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\n&amp;#34;&lt;/span&gt;
archive_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;world&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;date +&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%H-%M-%S-%m-%d-%Y&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.zip&amp;#34;&lt;/span&gt;
zip -r $archive_name $world

printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Checking if bucket has more than &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RED&lt;span style=&#34;color:#e6db74&#34;&gt;}${&lt;/span&gt;backup_limit&lt;span style=&#34;color:#e6db74&#34;&gt;}${&lt;/span&gt;NC&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; files already.\n&amp;#34;&lt;/span&gt;
content&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;aws s3 ls s3://$backup_bucket | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print $4}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${#&lt;/span&gt;content[@]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; -eq $backup_limit &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${#&lt;/span&gt;content[@]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; -gt $backup_limit  &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;There are too many archives. Deleting oldest one.&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# We can assume here that the list is in cronological order&lt;/span&gt;
	printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RED&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;s3://&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;backup_bucket&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;content[0]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\n&amp;#34;&lt;/span&gt;
    aws s3 rm s3://$backup_bucket/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;content[0]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Uploading &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RED&lt;span style=&#34;color:#e6db74&#34;&gt;}${&lt;/span&gt;archive_name&lt;span style=&#34;color:#e6db74&#34;&gt;}${&lt;/span&gt;NC&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; to s3 archive bucket.\n&amp;#34;&lt;/span&gt;
state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;aws s3 cp $archive_name s3://$backup_bucket&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$state&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;~ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;upload:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;File upload &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;LIGHT_GREEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;successful&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NC&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.\n&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RED&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NC&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; occured while uploading archive. Please investigate.\n&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It uses environment properties to define where to upload the given world and how many versions to keep.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m calling this from a cron job, and it&amp;rsquo;s sitting next to where the Minecraft world is.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it folks.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll start expanding on this idea and implement various services, like your own server address, or dropbox, or what have you.&lt;/p&gt;
&lt;p&gt;Happy backing up.&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
