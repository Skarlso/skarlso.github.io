<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>AWS on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/aws/</link>
    <description>Recent content in AWS on Ramblings of a cloud engineer</description>
    <generator>Hugo -- 0.136.0</generator>
    <language>en</language>
    <lastBuildDate>Sat, 13 Jan 2018 22:34:00 +0100</lastBuildDate>
    <atom:link href="https://skarlso.github.io/categories/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Huge Furnace Update</title>
      <link>https://skarlso.github.io/2018/01/13/furnace-massive-update/</link>
      <pubDate>Sat, 13 Jan 2018 22:34:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2018/01/13/furnace-massive-update/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;In the past couple of months I&amp;rsquo;ve been slowly updating &lt;a href=&#34;https://github.com/Skarlso/go-furnace&#34;&gt;Furnace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are three major changes that happened. Let&amp;rsquo;s take a look at them, shall we?&lt;/p&gt;
&lt;h2 id=&#34;google-cloud-platform&#34;&gt;Google Cloud Platform&lt;/h2&gt;
&lt;p&gt;Furnace now supports &lt;a href=&#34;https://cloud.google.com&#34;&gt;Google Cloud Platform (GCP)&lt;/a&gt;. It provides the same API to handle GCP resource as with AWS. Namely, &lt;code&gt;create&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;. I opted to leave out &lt;code&gt;push&lt;/code&gt; because Google mostly works with git based repositories, meaning a push is literary just a push, than Google handles distributing the new code by itself.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Commit-Build-Deploy With AWS CodeBuild and Lambda</title>
      <link>https://skarlso.github.io/2017/12/04/commit-build-deploy/</link>
      <pubDate>Mon, 04 Dec 2017 22:34:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2017/12/04/commit-build-deploy/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi All.&lt;/p&gt;
&lt;p&gt;Today I would like to write about an AWS finger practice.&lt;/p&gt;
&lt;p&gt;Previously, I wrote about how I build and deploy my blog with &lt;a href=&#34;www.wercker.com&#34;&gt;Wercker&lt;/a&gt;. Since, I&amp;rsquo;m a cloud engineer and I dislike Oracle and it&amp;rsquo;s ever expending tenctacles into the abyss, I wanted to switch to use something else.&lt;/p&gt;
&lt;p&gt;My build and deploy cycle is simple.&lt;/p&gt;
&lt;p&gt;Commit to Blogsource Repo -&amp;gt; Wercker WebHook -&amp;gt; Builds my blog using Hugo -&amp;gt; Pushed to a Different Repository which my Github Blog.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 4</title>
      <link>https://skarlso.github.io/2017/04/16/building-furnace-part-4/</link>
      <pubDate>Sun, 16 Apr 2017 09:23:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2017/04/16/building-furnace-part-4/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Previously on this blog: &lt;a href=&#34;https://skarlso.github.io/2017/03/16/building-furnace-part-1/&#34;&gt;Part 1&lt;/a&gt;. &lt;a href=&#34;https://skarlso.github.io/2017/03/19/building-furnace-part-2/&#34;&gt;Part 2&lt;/a&gt;. &lt;a href=&#34;https://skarlso.github.io/2017/03/22/building-furnace-part-3/&#34;&gt;Part 3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this part we are going to talk about Unit Testing Furnace and how to work some magic with AWS and Go.&lt;/p&gt;
&lt;h1 id=&#34;mock-stub-fake-dummy-canned-insert-name-here&#34;&gt;Mock Stub Fake Dummy Canned &lt;Insert Name Here&gt;&lt;/h1&gt;
&lt;p&gt;Unit testing in Go usually follows the Dependency Injection model of dealing with Mocks and Stubs.&lt;/p&gt;
&lt;p&gt;##Â DI&lt;/p&gt;
&lt;p&gt;Dependency Inject in short is one object supplying the dependencies of another object. In a longer description, it&amp;rsquo;s ideal to be used
for removing the lock on a third party library, like the AWS client. Imaging having code which solely depends on the AWS client. How
would you unit test that code without having to ACTUALLY connect to AWS? You couldn&amp;rsquo;t. Every time you try to test the code it would run
the live code and it would try and connect to AWS and perform the operations it&amp;rsquo;s design to do. The Ruby library with it&amp;rsquo;s metaprogramming
allows you to set the client globally to stub responses, but, alas, this is not the world of Ruby.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 3</title>
      <link>https://skarlso.github.io/2017/03/22/building-furnace-part-3/</link>
      <pubDate>Wed, 22 Mar 2017 12:03:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2017/03/22/building-furnace-part-3/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Previously on this blog: &lt;a href=&#34;http://skarlso.github.io/2017/03/16/building-furnace-part-1/&#34;&gt;Part 1&lt;/a&gt;. &lt;a href=&#34;https://skarlso.github.io/2017/03/19/building-furnace-part-2/&#34;&gt;Part 2&lt;/a&gt;. &lt;a href=&#34;https://skarlso.github.io/2017/04/16/building-furnace-part-4/&#34;&gt;Part 4&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this part, I&amp;rsquo;m going to talk about the experimental plugin system of Furnace.&lt;/p&gt;
&lt;h1 id=&#34;go-experimental-plugins&#34;&gt;Go Experimental Plugins&lt;/h1&gt;
&lt;p&gt;Since Go 1.8 was released, an exciting and new feature was introduced called a Plug-in system. This system works with dynamic
libraries built with a special switch to &lt;code&gt;go build&lt;/code&gt;. These libraries, &lt;code&gt;.so&lt;/code&gt; or &lt;code&gt;.dylib&lt;/code&gt; (later), are than loaded and once that
succeeds, specific functions can be called from them (symbol resolution).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 2</title>
      <link>https://skarlso.github.io/2017/03/19/building-furnace-part-2/</link>
      <pubDate>Sun, 19 Mar 2017 12:03:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2017/03/19/building-furnace-part-2/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Previously on this blog: &lt;a href=&#34;https://skarlso.github.io/2017/03/16/building-furnace-part-1/&#34;&gt;Part 1&lt;/a&gt;, &lt;a href=&#34;https://skarlso.github.io/2017/03/22/building-furnace-part-3/&#34;&gt;Part 3&lt;/a&gt;, &lt;a href=&#34;https://skarlso.github.io/2017/04/16/building-furnace-part-4/&#34;&gt;Part 4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this part, I&amp;rsquo;m going to talk about the AWS Go SDK and begin do dissect the intricacies of Furnace.&lt;/p&gt;
&lt;h1 id=&#34;aws-sdk&#34;&gt;AWS SDK&lt;/h1&gt;
&lt;p&gt;Fortunately, the Go SDK for AWS is quiet verbose and littered with examples of all sorts. But that doesn&amp;rsquo;t make it less complex
and less cryptic at times. I&amp;rsquo;m here to lift some of the early confusions, in hopes that I can help someone to avoid wasting time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Furnace - The building of an AWS CLI Tool for CloudFormation and CodeDeploy - Part 1</title>
      <link>https://skarlso.github.io/2017/03/16/building-furnace-part-1/</link>
      <pubDate>Thu, 16 Mar 2017 21:49:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2017/03/16/building-furnace-part-1/</guid>
      <description>&lt;h1 id=&#34;other-posts&#34;&gt;Other posts:&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://skarlso.github.io/2017/03/19/building-furnace-part-2/&#34;&gt;Part 2&lt;/a&gt;, &lt;a href=&#34;https://skarlso.github.io/2017/03/22/building-furnace-part-3/&#34;&gt;Part 3&lt;/a&gt;, &lt;a href=&#34;https://skarlso.github.io/2017/04/16/building-furnace-part-4/&#34;&gt;Part 4&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;building-furnace-part-1&#34;&gt;Building Furnace: Part 1&lt;/h1&gt;
&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;This is the first part of a 4 part series which talks about the process of building a middlish sized project in Go,
with AWS. Including Unit testing and a experimental plugin feature.&lt;/p&gt;
&lt;p&gt;The first part will talk about the AWS services used in brief and will contain a basic description for those who are not familiar
with them. The second part will talk about the Go SDK and the project structure itself, how it can be used, improved, and how it can
help in everyday life. The third part will talk about the experimental plugin system, and finally, we will tackle unit testing AWS
in Go.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Minecraft world automatic backup to AWS S3 bucket - Part 2 (Custom functions)</title>
      <link>https://skarlso.github.io/2016/04/17/minecraft-server-aws-s3-backup-part2/</link>
      <pubDate>Sun, 17 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2016/04/17/minecraft-server-aws-s3-backup-part2/</guid>
      <description>&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Got an update for the backup script. This time, you&amp;rsquo;ll have the ability to implement your own upload capabilities. I provide a mock implementation for the required functions.&lt;/p&gt;
&lt;p&gt;Here is the script again, now modified and a bit cleaned up. I hope it&amp;rsquo;s helpful.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Minecraft world automatic backup to AWS S3 bucket</title>
      <link>https://skarlso.github.io/2016/04/16/minecraft-server-aws-s3-backup/</link>
      <pubDate>Sat, 16 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2016/04/16/minecraft-server-aws-s3-backup/</guid>
      <description>&lt;p&gt;Hi Folks.&lt;/p&gt;
&lt;p&gt;Previously we created a Minecraft server using Docker. After my server got popular in the family, and a lot of stuff started to pile up on it, as a good IT person, I&amp;rsquo;m backing up the world once in a while.&lt;/p&gt;
&lt;p&gt;For that, I&amp;rsquo;m using AWS S3 with the CLI and a little bash script which runs once a week.&lt;/p&gt;
&lt;p&gt;The script is really straightforward. I&amp;rsquo;m doing manual versioning, although S3 does provide one out of the box. However, amazon&amp;rsquo;s S3 versioning doesn&amp;rsquo;t allow limiting the number of versions being kept. And since I&amp;rsquo;m doing that anyways, might as well take care of the rest.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
