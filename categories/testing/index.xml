<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on Ramblings of a build engineer</title>
    <link>https://skarlso.github.io/categories/testing/</link>
    <description>Recent content in Testing on Ramblings of a build engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 08 Feb 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://skarlso.github.io/categories/testing/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Why Lock Picking is like Testing</title>
      <link>https://skarlso.github.io/2015/02/08/why-lock-picking-is-like-testing/</link>
      <pubDate>Sun, 08 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/02/08/why-lock-picking-is-like-testing/</guid>
      <description>

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Not a great many people know that I&amp;#8217;m actually into Lock Picking as a hobby. This will not be a tutorial on how to do it, or I won&amp;#8217;t really talk about how I do it; I would like to write about something completely different. So if you came here for that, here are a few very good resources:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.lockpicking101.com/%20&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.lockpicking101.com/&#34;&gt;http://www.lockpicking101.com/&lt;/a&gt; &lt;/a&gt;&amp;#8211; Tutorials&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ukbumpkeys.com/collections/lock-picking&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.ukbumpkeys.com/collections/lock-picking&#34;&gt;http://www.ukbumpkeys.com/collections/lock-picking&lt;/a&gt;&lt;/a&gt; &amp;#8211; Tools ( UK )&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.reddit.com/r/lockpicking/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.reddit.com/r/lockpicking/&#34;&gt;http://www.reddit.com/r/lockpicking/&lt;/a&gt;&lt;/a&gt; &amp;#8211; Reddit&lt;/p&gt;

&lt;p&gt;For my post, click on&amp;#8230;&lt;/p&gt;

&lt;p&gt;So, why is lock picking like testing? I saw a great many posts which where trying to compare software testing to some activity. I even knew somebody who compared it to dancing. Because&amp;#8230;? I don&amp;#8217;t know, maybe he was trying out a talk material maybe? And he said &amp;#8211; &amp;#8220;I was in this club and watched a couple dance, and I was thinking, wow, this is like software testing.&amp;#8221; &amp;#8211; I couldn&amp;#8217;t really react to that. But hey, kudos for out of the box thinking I guess.&lt;/p&gt;

&lt;p&gt;But let&amp;#8217;s see some of the similarities in picking and testing:&lt;/p&gt;

&lt;h4 id=&#34;thinking:6511026dbafeb039d1c895bd844bde2a&#34;&gt;Thinking&lt;/h4&gt;

&lt;p&gt;It requires logical, critical thinking. It&amp;#8217;s a puzzle that you have to solve. A puzzle which you basically solve by testing out solutions and see if they work. You can achieve this by trial and error, something testers face on a daily basis. After awhile you acquire something called finesse. Which will help you identify breaking points more easily. Since you have experience with a certain lock type, you already have a wast knowledge to rely on when you are trying to solve a new lock with the same build. You did your research you know its weaknesses hence you immediately have an attack vector on your hand.&lt;/p&gt;

&lt;h4 id=&#34;tools:6511026dbafeb039d1c895bd844bde2a&#34;&gt;Tools&lt;/h4&gt;

&lt;p&gt;Lock picking has a wast number of tools. Each tool is design for a specific purpose. You can reuse tools but they are rarely a fit for other locks. Unless it&amp;#8217;s a similar one. There are delicate tools and then there are brute force tools, which are very hard to use at first but after you get used to it and know how to handle it, it becomes massively helpful. You can build your own tools or use tools that are built for you by tool experts.&lt;/p&gt;

&lt;h4 id=&#34;solving-process:6511026dbafeb039d1c895bd844bde2a&#34;&gt;Solving Process&lt;/h4&gt;

&lt;p&gt;When can you test an application to its fullest extend and capabilities? How can you achieve the most and best testing ever possible? You have to know how the application works. You have to know its components, its abilities, its capabilities and &lt;strong&gt;limits. &lt;/strong&gt;For Lock Picking to be the best at what you do and to be able to move to a completely new lock and try to pick it, you have to know its flaws. You have to know when, and how it was built. You have to know what makes it tick, how it works, what it uses, how the inside mechanics look like in order to try to exploit them.&lt;/p&gt;

&lt;p&gt;After you acquire this knowledge you will be able to build, or purchase a tool which will help you in solving the puzzle. But you were only able to do that because after you researched its manufacturing procedure you know that the last pin is hard to get to and that it has an anti drilling shield, so drilling is out of the question, and that it has a safety spring which locks the lock permanently upon tampering. If you would not be in the possession of this information you could have made a fatal error and could have made the client lost money ( since at that point they pretty much need to break down the door, unless the key is found again ( assuming the picking took place because the key was lost ) ).&lt;/p&gt;

&lt;h4 id=&#34;last-words:6511026dbafeb039d1c895bd844bde2a&#34;&gt;Last Words&lt;/h4&gt;

&lt;p&gt;There you have it folks. That&amp;#8217;s why Lock Picking is like software testing. Knowing structure, inside workings and the proper tools will help to achieve your goal. Just like in testing when you know your field, you know what to use, when, and how. &lt;strong&gt;Knowledge&lt;/strong&gt; makes you the Best.&lt;/p&gt;

&lt;p&gt;Good luck,&lt;/p&gt;

&lt;p&gt;Happy Picking,&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>When cucumber goes wrong</title>
      <link>https://skarlso.github.io/2015/01/28/when-cucumber-goes-wrong/</link>
      <pubDate>Wed, 28 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/01/28/when-cucumber-goes-wrong/</guid>
      <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s face the horrible truth:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It&amp;#8217;s rare / never happens that a manager / scrum master / product owner actually reads your cucumber test cases.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Back in the old days, this was one of the selling points of human readable tests and DSLs. It sounds nice and I&amp;#8217;m sure in a utopia it also works.&lt;/p&gt;

&lt;p&gt;BDD is a very nice approach to write tests if used in a correct way. And I can relate that at some point, a manager or the product owner, actually writes up a draft of the tests. But that enthusiasm very rarely stays for the rest of the project.&lt;/p&gt;

&lt;p&gt;Especially when you get to the point where your Cucumber test cases start to look something like this:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;&lt;span class=&#34;typ&#34;&gt;Scenario&lt;/span&gt;&lt;span class=&#34;pun&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;typ&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt; list
  &lt;/span&gt;&lt;span class=&#34;typ&#34;&gt;Given&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt; I post to &lt;/span&gt;&lt;span class=&#34;str&#34;&gt;&#34;/users.json&#34;&lt;/span&gt; &lt;span class=&#34;kwd&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;pun&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt;
    &lt;/span&gt;&lt;span class=&#34;str&#34;&gt;&#34;&#34;&#34;
    {
      &#34;&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt;first_name&lt;/span&gt;&lt;span class=&#34;str&#34;&gt;&#34;: &#34;&lt;/span&gt;&lt;span class=&#34;typ&#34;&gt;Steve&lt;/span&gt;&lt;span class=&#34;str&#34;&gt;&#34;,
      &#34;&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt;last_name&lt;/span&gt;&lt;span class=&#34;str&#34;&gt;&#34;: &#34;&lt;/span&gt;&lt;span class=&#34;typ&#34;&gt;Richert&lt;/span&gt;&lt;span class=&#34;str&#34;&gt;&#34;
    }
    &#34;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt;
  &lt;/span&gt;&lt;span class=&#34;typ&#34;&gt;And&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt; I keep the JSON response at &lt;/span&gt;&lt;span class=&#34;str&#34;&gt;&#34;id&#34;&lt;/span&gt; &lt;span class=&#34;kwd&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;str&#34;&gt;&#34;USER_ID&#34;&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt;
  &lt;/span&gt;&lt;span class=&#34;typ&#34;&gt;When&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt; I &lt;/span&gt;&lt;span class=&#34;kwd&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;str&#34;&gt;&#34;/users.json&#34;&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt;
  &lt;/span&gt;&lt;span class=&#34;typ&#34;&gt;Then&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt; the JSON response should have &lt;/span&gt;&lt;span class=&#34;lit&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt; user
  &lt;/span&gt;&lt;span class=&#34;typ&#34;&gt;And&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt; the JSON response at &lt;/span&gt;&lt;span class=&#34;str&#34;&gt;&#34;0&#34;&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt; should be&lt;/span&gt;&lt;span class=&#34;pun&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt;
    &lt;/span&gt;&lt;span class=&#34;str&#34;&gt;&#34;&#34;&#34;
    {
      &#34;&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;str&#34;&gt;&#34;: %{USER_ID},
      &#34;&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt;first_name&lt;/span&gt;&lt;span class=&#34;str&#34;&gt;&#34;: &#34;&lt;/span&gt;&lt;span class=&#34;typ&#34;&gt;Steve&lt;/span&gt;&lt;span class=&#34;str&#34;&gt;&#34;,
      &#34;&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt;last_name&lt;/span&gt;&lt;span class=&#34;str&#34;&gt;&#34;: &#34;&lt;/span&gt;&lt;span class=&#34;typ&#34;&gt;Richert&lt;/span&gt;&lt;span class=&#34;str&#34;&gt;&#34;
    }
    &#34;&#34;&#34;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;If a product owner reads this, his reaction will be like: &amp;#8220;What the hell is this? What&amp;#8217;s users.json? Why is it there? Why should I even care? What&amp;#8217;s a JSON response? Why should it match with the request? And what, if I keep the id at USER_ID? Huh?&amp;#8221;&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s easy to get overwhelmed by things like this scenario when you start introducing actors into your tests and payloads to your public API. And suddenly you&amp;#8217;ll end up with cucumber features which no other will be able to understand but the person who wrote it.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m a little bit skeptic that it ever worked as intended. Sure, for a little while. But the dynamic nature of tests will surface soon enough. You can&amp;#8217;t hide it forever.&lt;/p&gt;

&lt;p&gt;The above example, if the payload and user would be hidden in a reusable code fragment behind the implementation, would look a bit more readable:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;&lt;span class=&#34;typ&#34;&gt;Scenario&lt;/span&gt;&lt;span class=&#34;pun&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;typ&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt; list
  &lt;/span&gt;&lt;span class=&#34;typ&#34;&gt;Given&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt; I post to user list&lt;/span&gt; &lt;span class=&#34;kwd&#34;&gt;with data
&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt;  | firstname | Steve |
  | lastname  | Richert |
&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;typ&#34;&gt;When&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt; I &lt;/span&gt;&lt;span class=&#34;kwd&#34;&gt;get&lt;/span&gt; a response from the SUT&lt;span class=&#34;pln&#34;&gt;
  &lt;/span&gt;&lt;span class=&#34;typ&#34;&gt;Then&lt;/span&gt;&lt;span class=&#34;pln&#34;&gt; the response should have the same user&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;See? Easier to understand. I don&amp;#8217;t care about the payload. I don&amp;#8217;t care about the user ID, in fact, I would rather see this test as a unit test somewhere deep down in the bowls of the system. Although I can understand that you want a set of automated UATs.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m sure Cucumber has a couple of success stories behind his back, I just didn&amp;#8217;t happen to come across them as of late. But please, if you have one, share it with me so I can rest easily.&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why Testers are, like scientists</title>
      <link>https://skarlso.github.io/2015/01/26/why-testers-are-like-scientists/</link>
      <pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/01/26/why-testers-are-like-scientists/</guid>
      <description>

&lt;p&gt;Hello everybody.&lt;/p&gt;

&lt;p&gt;Today, I would like to write about little observation I made along the way of being a tester.&lt;/p&gt;

&lt;p&gt;The title says it all. I think Testers, are like scientists. I would go even further, and say: Testers, are scientists.&lt;/p&gt;

&lt;p&gt;Let us see how the two compare.&lt;/p&gt;

&lt;h3 id=&#34;asking-questions:a30741080da27b93f2334c201ec06de9&#34;&gt;Asking Questions&lt;/h3&gt;

&lt;p&gt;A scientist is all about asking the right question to the right person, or the right subject matter. They are using the same 5 Ws as we are. Who, Why, What, When, Where. It&amp;#8217;s simple, really. Asking the right question is sometimes the most difficult task of them all. Ideas come from these questions. They can also help in flushing out early design problems with the experiment / product.&lt;/p&gt;

&lt;h4 id=&#34;identify-the-subject-matter:a30741080da27b93f2334c201ec06de9&#34;&gt;Identify the subject matter&lt;/h4&gt;

&lt;p&gt;This one is all about getting to know your environment and taking notes while you are doing so. Become familiar with what you are working with, and what tools you are using in your research. Which standards are you following, and why? It&amp;#8217;s the same, when a Tester finds herself/himself in a new environment and tries to get her(is) bearing what the task is and how to perform it.&lt;/p&gt;

&lt;h4 id=&#34;first-impression-outline-of-an-idea:a30741080da27b93f2334c201ec06de9&#34;&gt;First impression, outline of an idea&lt;/h4&gt;

&lt;p&gt;The first impression will result in a vague idea of what the problem is about. This is the stage where the first thoughts emerge and the first draft of a possible solution is crafted into existence. This is the part where a person will draw information, power, and knowledge from her(is) past resulting in a solution that can get close to a real one; but rarely is this solution the one which will be chosen in the end.&lt;/p&gt;

&lt;h4 id=&#34;testing:a30741080da27b93f2334c201ec06de9&#34;&gt;Testing&lt;/h4&gt;

&lt;p&gt;Indeed in the life of a scientist it is imperative that ideas, solutions and vague drafts of brainstormed possibilities are &lt;strong&gt;tested all the way through. &lt;/strong&gt;For a tester it&amp;#8217;s just as important that all the cases are verified and &amp;#8216;approved&amp;#8217; by either common sense, the requirements, or any other kind of verification that they can come up in certain environments. Fact is, that if a solution / test case is a valid one, depends on several different options based on any given circumstance. That is why it&amp;#8217;s difficult to decide if something is acceptable or not. What is a good solution in one case, might be entirely wrong in another.&lt;/p&gt;

&lt;h4 id=&#34;results:a30741080da27b93f2334c201ec06de9&#34;&gt;Results&lt;/h4&gt;

&lt;p&gt;If the tests / variables / cases / solutions are satisfying, then we can come to think about producing an actual result. The result could be anything of value to the observer. A failing test could be a good result, if we actually were waiting for that test to fail. In that case the result is a success. So bare in mind that a failing test, a failed solution to an experiment, is &lt;strong&gt;always &lt;/strong&gt;also information which &lt;strong&gt;tells you something important. &lt;/strong&gt;Never dismiss a failing test, a failed experiment, a failed solution. It gives you a &lt;strong&gt;hint &lt;/strong&gt;for a passing one.&lt;/p&gt;

&lt;h4 id=&#34;community-and-sharing:a30741080da27b93f2334c201ec06de9&#34;&gt;Community and Sharing&lt;/h4&gt;

&lt;p&gt;Scientists have a large community where they are sharing experiments and discoveries. I think I don&amp;#8217;t have to draw a parallel here. We all know several testing pages, forums, events, gatherings where there are people talking about the subject matter. I&amp;#8217;m proud that it such a long way.&lt;/p&gt;

&lt;h4 id=&#34;practice-practice-practice:a30741080da27b93f2334c201ec06de9&#34;&gt;Practice, practice, practice&lt;/h4&gt;

&lt;p&gt;I think this one is self explanatory. In order to become good at something, we have to continuously do it. There is no magic formula, no pill you can take, no matrix to download Kung Fu, you have to do it to learn it. You have to practice it, gather experience and share / write them down in order to strengthen your knowledge and understanding about it. Writing it out, and sharing information, &lt;strong&gt;explaining it to somebody else, &lt;/strong&gt;will make it stick better and increase your knowledge in return. So start a blog now, even if you will have only a few readers it will be worth it. Just by writing a couple of lines about something will make you remember it better, and your understanding of it deeper.&lt;/p&gt;

&lt;p&gt;So, there you have it. I think these are pretty good points that let&amp;#8217;s us identify ourselves. It&amp;#8217;s called Computer &lt;strong&gt;science&lt;/strong&gt; for a reason.&lt;/p&gt;

&lt;p&gt;As always,&lt;/p&gt;

&lt;p&gt;Thanks for reading,&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why the expressiveness of your Tests is important – Part One</title>
      <link>https://skarlso.github.io/2014/11/15/why-the-expressiveness-of-your-tests-is-important-part-one/</link>
      <pubDate>Sat, 15 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/11/15/why-the-expressiveness-of-your-tests-is-important-part-one/</guid>
      <description>&lt;p&gt;Hello Everybody.&lt;/p&gt;

&lt;p&gt;This time I&amp;#8217;d like to write about the expressiveness of a Test. I think that it&amp;#8217;s very important to write understandable and expressive tests. In older times I was studying novel writing. There is a rule which a novel needs to follow. It goes something like this: &amp;#8220;A novel needs to lead its reader and make him understand in the simplest way what&amp;#8217;s going on, with whom and why?&amp;#8221;. In other words, it&amp;#8217;s not a puzzle. It should be obvious what the test is trying to do and it should not require the reader to try and solve it in order to understand it.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m planning this as a series since there are multiple problems with a test I can talk about here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Geb Tests&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&#34;wp_syntax&#34;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&#34;code&#34;&gt;
        &lt;pre class=&#34;groovy&#34; style=&#34;font-family:monospace;&#34;&gt;    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;login to the home page&#34;&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#123;&lt;/span&gt;
        given: &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;I am at homepages&#34;&lt;/span&gt;
            go &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;http://localhost:8080/home&#34;&lt;/span&gt;
            at HomePage
&amp;nbsp;
        when: &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;I entir my credential&#34;&lt;/span&gt;
            filloutLoginForm&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;username&#34;&lt;/span&gt;, &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;password&#34;&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#41;&lt;/span&gt;
            at MyAccountPage
&amp;nbsp;
        then: &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;I can accass my wallet&#34;&lt;/span&gt;
            openWallet&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#41;&lt;/span&gt;
            waitFor &lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span style=&#34;color: #CC0099;&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;Balance&#34;&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#125;&lt;/span&gt;
    &lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Now, read this test. It doesn&amp;#8217;t really make any sense at the first read, right? You need to actually think what is going on there. Of course if you read it slow enough you&amp;#8217;ll get what it&amp;#8217;s trying to do. But you don&amp;#8217;t know what fillform does. Apparently it also submits the form because after fillform you are suddenly at MyAccountPage.&lt;/p&gt;

&lt;p&gt;There are several things wrong with this one, let&amp;#8217;s start with the pageobject.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PageObjects&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At and toAt return page objects. We can use that to actually make the calling explicit and make it more readable and identify where a function comes from.&lt;/p&gt;

&lt;div class=&#34;wp_syntax&#34;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&#34;code&#34;&gt;
        &lt;pre class=&#34;groovy&#34; style=&#34;font-family:monospace;&#34;&gt;    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;login to the home page&#34;&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#123;&lt;/span&gt;
        given: &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;I am at homepages&#34;&lt;/span&gt;
            go &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;http://localhost:8080/home&#34;&lt;/span&gt;
            HomePage homePage &lt;span style=&#34;color: #66cc66;&#34;&gt;=&lt;/span&gt; at HomePage
&amp;nbsp;
        when: &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;I entir my credential&#34;&lt;/span&gt;
            homePage.&lt;span style=&#34;color: #006600;&#34;&gt;filloutLoginForm&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;username&#34;&lt;/span&gt;, &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;password&#34;&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#41;&lt;/span&gt;
            MyAccountPage myAccountPage &lt;span style=&#34;color: #66cc66;&#34;&gt;=&lt;/span&gt; at MyAccountPage
&amp;nbsp;
        then: &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;I can accass my wallet&#34;&lt;/span&gt;
            myAccountPage.&lt;span style=&#34;color: #006600;&#34;&gt;openWallet&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#41;&lt;/span&gt;
            waitFor &lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span style=&#34;color: #CC0099;&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;Balance&#34;&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#125;&lt;/span&gt;
    &lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This reads much better now. You know where the function is coming from and your IDE will not go nuts from things it can&amp;#8217;t find. And you have autocompletion so there is no fear that you simply mistype something.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Side effects&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next step, let&amp;#8217;s remove some of the side effects.&lt;/p&gt;

&lt;div class=&#34;wp_syntax&#34;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&#34;code&#34;&gt;
        &lt;pre class=&#34;groovy&#34; style=&#34;font-family:monospace;&#34;&gt;    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;login to the home page&#34;&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#123;&lt;/span&gt;
        given: &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;I am at homepages&#34;&lt;/span&gt;
            go &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;http://localhost:8080/home&#34;&lt;/span&gt;
            HomePage homePage &lt;span style=&#34;color: #66cc66;&#34;&gt;=&lt;/span&gt; at HomePage
&amp;nbsp;
        when: &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;I entir my credential&#34;&lt;/span&gt;
            homePage.&lt;span style=&#34;color: #006600;&#34;&gt;filloutLoginForm&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;username&#34;&lt;/span&gt;, &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;password&#34;&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#41;&lt;/span&gt;
            homePage.&lt;span style=&#34;color: #006600;&#34;&gt;submitLoginForm&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#41;&lt;/span&gt;
            MyAccountPage myAccountPage &lt;span style=&#34;color: #66cc66;&#34;&gt;=&lt;/span&gt; at MyAccountPage
&amp;nbsp;
        then: &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;I can accass my wallet&#34;&lt;/span&gt;
            myAccountPage.&lt;span style=&#34;color: #006600;&#34;&gt;openWallet&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#41;&lt;/span&gt;
            waitFor &lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#123;&lt;/span&gt; myAccountPage.&lt;span style=&#34;color: #006600;&#34;&gt;accountIsDisplayed&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#125;&lt;/span&gt;
    &lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Now this is again much better. There are no steps left out. And you can test now the FillForm and the submit independently. Like, submitting the form without filling it out! Or filling it out and not submiting it. Reads better, is explicit, more easy to understand.&lt;/p&gt;

&lt;p&gt;And the last one for today:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Grammar&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I wonder if you noticed it&amp;#8230; The grammar is a little bit off in the tests. A small mistake here and there. You might think that, who cares? That&amp;#8217;s a very bad thought. I think the correct grammar reflects caring. It reflects that we thought about this test and that we thought about the quality of it. Because it means that after you wrote it, you actually re-read the test to make sure it&amp;#8217;s understandable and readable.&lt;/p&gt;

&lt;p&gt;So let us correct that:&lt;/p&gt;

&lt;div class=&#34;wp_syntax&#34;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&#34;code&#34;&gt;
        &lt;pre class=&#34;groovy&#34; style=&#34;font-family:monospace;&#34;&gt;    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;As a player I can log in to check my account.&#34;&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#123;&lt;/span&gt;
        given: &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;I am at the homepage&#34;&lt;/span&gt;
            go &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;http://localhost:8080/home&#34;&lt;/span&gt;
            HomePage homePage &lt;span style=&#34;color: #66cc66;&#34;&gt;=&lt;/span&gt; at HomePage
&amp;nbsp;
        when: &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;I enter my log in credentials.&#34;&lt;/span&gt;
            homePage.&lt;span style=&#34;color: #006600;&#34;&gt;filloutLoginForm&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;username&#34;&lt;/span&gt;, &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;password&#34;&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#41;&lt;/span&gt;
            homePage.&lt;span style=&#34;color: #006600;&#34;&gt;submitLoginForm&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#41;&lt;/span&gt;
            MyAccountPage myAccountPage &lt;span style=&#34;color: #66cc66;&#34;&gt;=&lt;/span&gt; at MyAccountPage
&amp;nbsp;
        then: &lt;span style=&#34;color: #ff0000;&#34;&gt;&#34;I&#39;m directed to my account page.&#34;&lt;/span&gt;
            myAccountPage.&lt;span style=&#34;color: #006600;&#34;&gt;openWallet&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#41;&lt;/span&gt;
            waitFor &lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#123;&lt;/span&gt; myAccountPage.&lt;span style=&#34;color: #006600;&#34;&gt;accountIsDisplayed&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#125;&lt;/span&gt;
    &lt;span style=&#34;color: #66cc66;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;I also took the liberty of re-phrasing some of the text so that it shows what the test is about and what the user really would like to achieve here. Now try reading that last one. Does it make more sense? Did you understand it at first go? Did it read like a good story?&lt;/p&gt;

&lt;p&gt;There is a coding practice which goes something like this: &amp;#8220;Good code is code which doesn&amp;#8217;t surprise you as you read it.&amp;#8221; Which means the exact thing happens which you thought of would happen. I think that applies to tests as well. The steps of the test shouldn&amp;#8217;t come to you as a surprise. Especially if you know what the application is supposed to do.&lt;/p&gt;

&lt;p&gt;So that&amp;#8217;s all for today folks. Thank you for reading! If you have a nasty test which you would like me to dissect and make it better and human readable, please share it in the comment section and I will do my best to come up with a good solution for it.&lt;/p&gt;

&lt;p&gt;And as always,&lt;/p&gt;

&lt;p&gt;Have a nice day!&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The seven Principles of Context Driven Testing – Mind Map</title>
      <link>https://skarlso.github.io/2014/10/23/the-seven-guidelines-of-context-driven-testing/</link>
      <pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/10/23/the-seven-guidelines-of-context-driven-testing/</guid>
      <description>&lt;p&gt;Hi Folks!&lt;/p&gt;

&lt;p&gt;I just wanted to share with you my mind map on the seven principles of Context Driven Testing.&lt;/p&gt;

&lt;p&gt;I used the notion of dragons since it&amp;#8217;s seven. And a dragon is usually seven headed in my mind&amp;#8230;&lt;/p&gt;

&lt;p&gt;So without further ado&amp;#8230;&lt;/p&gt;

&lt;p&gt;[&lt;img class=&#34;alignnone size-thumbnail wp-image-331&#34; src=&#34;http://ramblingsofaswtester.com/wp-content/uploads/2014/10/ContextDragon2-150x150.jpg&#34; alt=&#34;ContextDragon2&#34; width=&#34;150&#34; height=&#34;150&#34; /&gt;][1]&lt;/p&gt;

&lt;p&gt;Click for larger image.&lt;/p&gt;

&lt;p&gt;I have a hand drawn as well but I&amp;#8217;m guessing that one wouldn&amp;#8217;t be of much use since it follows my own imagination.&lt;/p&gt;

&lt;p&gt;Here are the seven principles in points which correspond to the leafs.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Value -&amp;gt; Practice -&amp;gt; Depends -&amp;gt; Context =&amp;gt; The value of any practice depends on its context.&lt;/li&gt;
&lt;li&gt;People -&amp;gt; Working -&amp;gt; Together -&amp;gt; Important =&amp;gt; People, working together, are the most important part of any project’s context. ( The mob, trying to kill the dragon by working together. )&lt;/li&gt;
&lt;li&gt;Problem -&amp;gt; Project -&amp;gt; Solution =&amp;gt; The product is a solution. If the problem isn’t solved, the product doesn’t work. ( The sword. It&amp;#8217;s a sword but if it doesn&amp;#8217;t kill the Dragon it&amp;#8217;s useless. )&lt;/li&gt;
&lt;li&gt;Good Testing -&amp;gt; Intellectual Challenge =&amp;gt; Good software testing is a challenging intellectual process. ( Well it&amp;#8217;s a dragon with glasses. That&amp;#8217;s something you rarely see. )&lt;/li&gt;
&lt;li&gt;Good Practice | Bad Practice -&amp;gt; In Context -&amp;gt; No Best Practices =&amp;gt; There are good practices in context, but there are no best practices. ( This one was a little bit tricky. But basically you want to solve the dungeon and not plow through it )&lt;/li&gt;
&lt;li&gt;Uncertainty =&amp;gt; &lt;span style=&#34;font-size: 14px; line-height: 1.8em;&#34;&gt;Projects unfold over time in ways that are often not predictable. ( For me this one word was enough. )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Exercised By All In Time -&amp;gt; Judgement | Skill | Cooperatively =&amp;gt; Only through judgment and skill, exercised cooperatively throughout the entire project, are we able to do the right things at the right times to effectively test our products. ( It&amp;#8217;s a flexing dragon&amp;#8230; Easy, right? )&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So this map helped me to remember everything. The descriptions, applications that are further described I remembered by using this mind map as a &lt;a href=&#34;http://en.wikipedia.org/wiki/Method_of_loci&#34; target=&#34;_blank&#34;&gt;loci&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope somebody found this useful.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;

&lt;p&gt;[1]: &lt;a href=&#34;http://ramblingsofaswtester.com/wp-content/uploads/2014/10/ContextDragon2.jpg&#34;&gt;http://ramblingsofaswtester.com/wp-content/uploads/2014/10/ContextDragon2.jpg&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TDD is Dead – Not really</title>
      <link>https://skarlso.github.io/2014/05/26/tdd-is-dead-not-really/</link>
      <pubDate>Mon, 26 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/05/26/tdd-is-dead-not-really/</guid>
      <description>&lt;p&gt;Is TDD dead?&lt;/p&gt;

&lt;p&gt;Not really. So let&amp;#8217;s talk about this topic for a little bit.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m sure you already read a gazillion posts about this debate but frankly I&amp;#8217;m writing this for myself, to rant a little bit, you know&amp;#8230; Because somebody is wrong on the internet and I must intervene.&lt;/p&gt;

&lt;p&gt;So first of all, the hashtag #tddisdead (and I will use it shamelessly as well). This is clearly an attempt to get as many peoples attention as you can. TDD is NOT DEAD. Obviously since it has soooo many supporters how could it be dead? It&amp;#8217;s like asking, is Design Patterns dead? Or is Functional Automation dead? Or is Oreo cookies dead?&lt;/p&gt;

&lt;p&gt;No, it&amp;#8217;s not dead. And it won&amp;#8217;t ever be dead. It will maybe change into something new, something better even, but it will never be dead. So let&amp;#8217;s skip that part.&lt;/p&gt;

&lt;p&gt;Now, about the &lt;strong&gt;debate&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I haven&amp;#8217;t hear so much bull spoken for this long since I watched the political debate of two fractions in my home country. The right wing extremists against the left wing&amp;#8230;. I don&amp;#8217;t know whats. And it was just that. A political debate. It had no merit and no value whatsoever. At all. Nothing.&lt;/p&gt;

&lt;p&gt;And right in the middle &lt;strong&gt;DHH&lt;/strong&gt; says this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8220;&amp;#8230;you&amp;#8217;re not done until you also have tests for a piece of functionality &amp;#8212; I&amp;#8217;m completely on board with that.&amp;#8221;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That made the whole conversation completely irrelevant.&lt;/p&gt;

&lt;p&gt;Every counter against TDD I heard was &lt;strong&gt;bull&lt;/strong&gt;. Not in that debate, in general. People are either too lazy to write them, just don&amp;#8217;t want to get out of their comfort zone, don&amp;#8217;t really care about tests, or don&amp;#8217;t really care about quality or under time pressure ( I get to this later. ).&lt;/p&gt;

&lt;p&gt;Which brings me to my next point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quality&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;People seem to not care about quality that much. Would they, they would understand that having a bulletproof west will save your life when you get shot in the chest with a 357 magnum. You can flush out early design flaws you can detect early bugs and do a better system design.&lt;/p&gt;

&lt;p&gt;Sure if you are the most intelligent man on the planet maybe you can come up with a perfect system on the first draft and then implement it flawlessly so that it doesn&amp;#8217;t fall apart in two months time. But most people can&amp;#8217;t. Most people make errors on the way.&lt;/p&gt;

&lt;p&gt;And yes, writing tests can be hard. But guess what? If writing a test is hard because that part of the system is complicated, than it will be that part of the system which will react the worst to change. And only change is constant. Which brings me to the next item&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time constraints&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So your manager is sitting right next to you and saying come on we are paying you to write code and not tests so do it! And you have to have a feature done today but if you write a suite of tests you&amp;#8217;ll only finish tomorrow. Sure, your estimate at that point will become a very quick one because you make a sacrifice of trust.&lt;/p&gt;

&lt;p&gt;And then the next story comes along and you say&amp;#8230; &lt;em&gt;&amp;#8220;Sure I can do that as well. No problem I know how my system works, right? Hmm&amp;#8230; why the hell did that break all of a sudden? I didn&amp;#8217;t change anything in that module&amp;#8230; Ahh damn it I said I&amp;#8217;ll be done today, so let&amp;#8217;s just fix this quickly and then move on to the next card.&amp;#8221;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And the next story comes along&amp;#8230; &lt;em&gt;&amp;#8220;Sure I can do that&amp;#8230; wait a minute&amp;#8230; Didn&amp;#8217;t that part brake already twice? Damn, better refactor. Ohh shit, why is that now breaking???? Damn it I said I&amp;#8217;ll be done tomorrow, better patch it, and then move on. Hmm let&amp;#8217;s write a test here to make sure this does not break. Ohhh damn I need PowerMock for that stuff since it&amp;#8217;s in another module. Why the hell is that there? Should it be here in the first place since it&amp;#8217;s somehow used by that other class there? Interesting. Let&amp;#8217;s refactor and put it in here so I can mock it. Ahhhh f*ck now all the rest of the system is not working. Damn, I&amp;#8217;ll just use PowerMock. Shit. Checkstyle error. PowerMock is not allowed?? What?? Who the f*ck says that?&amp;#8221;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You get my drift. And suddenly you end up with estimates of &lt;strong&gt;WEEKS&lt;/strong&gt;!!!! instead of days / hours for a simple story.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finishing it up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This a rant only. It&amp;#8217;s my personal opinion, experience and observation of a 10 year time period in Software Testing. Starting with at least a Weak Skeleton and a few upfront tests will help you in the long run. Writing at least ONE &amp;#8211; TWO acceptance tests WILL help you understand business logic better. Writing ONE or TWO unit tests will help you understand your logic better. I&amp;#8217;m not saying write a whole damn suite of tests I can understand you don&amp;#8217;t want to do that, but for quality&amp;#8217;s sake write at least a couple.&lt;/p&gt;

&lt;p&gt;You will love it, I promise you that.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Five reasons why a front-end tester should learn Javascript</title>
      <link>https://skarlso.github.io/2014/05/23/five-reasons-why-a-front-end-tester-should-learn-javascript/</link>
      <pubDate>Fri, 23 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/05/23/five-reasons-why-a-front-end-tester-should-learn-javascript/</guid>
      <description>&lt;p&gt;Hello everybody.&lt;/p&gt;

&lt;p&gt;Today I would like to write about a very interesting topic, I hope. So let&amp;#8217;s get started.&lt;/p&gt;

&lt;p&gt;As the title already suggests, I&amp;#8217;m writing about why a front-end tester should learn at least a little bit about JavaScripting and the DOM.&lt;/p&gt;

&lt;p&gt;Ohhh and contrary to the belief CSP ( Content Security Policy ) will &lt;strong&gt;not&lt;/strong&gt; be the death of such scripts. There are white-lists and workarounds and exclusions which can be implemented in order to allow local JavaScripting to continue. So don&amp;#8217;t fret&amp;#8230; Read on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reason Number 1: Injection&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Every front-ender tester has a waste amount of tools at their disposal. Various things, like Firebug and web developer Toolbar and&amp;#8230; Bookmarklets and &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/&#34; target=&#34;_blank&#34;&gt;Greasemonkey&lt;/a&gt; and &lt;a href=&#34;https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=en&#34; target=&#34;_blank&#34;&gt;Tampermonkey&lt;/a&gt;. These are the real powerful tools though. Your main objective at this point would be to inject something into your current site.&lt;/p&gt;

&lt;p&gt;Suppose a scenario where you are testing something and you have an API at your disposal for a quick edit on a customer, like closing his account or giving him money, or doing something with his appliances. Suppose you don&amp;#8217;t want to always switch away to another tab or call a service with certain parameters or go to a rest client and initiate that from there.&lt;/p&gt;

&lt;p&gt;Suppose you could have a small injected DIV right on the page you are which gathers information for you, like the customer&amp;#8217;s username, and wallet and whatnot, and with a simple press of a button, you just closed their account. Neat, isn&amp;#8217;t it? Simple, fast, very comfortable with just one press of a button.&lt;/p&gt;

&lt;p&gt;Suppose you have a DIV at the corner of a page, or even a drag and drop enabled one which you can drag around, with an arsenal of these buttons RIGHT THERE on your page. You don&amp;#8217;t have to switch context at all.&lt;/p&gt;

&lt;p&gt;These days it&amp;#8217;s especially easy with tools like jQuery at your disposal. You just inject jQuery first, if the site is not already using it, and you are good to go and do whatever you like to do&amp;#8230;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reason Number 2: Data gathering&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While we are testing these application we always create some kind of a report. That report contains many things about the customer, or it&amp;#8217;s appliances or the things he does, does not. All these could be constantly gathered by your script as it runs in the background. It gathers statistics and information which otherwise you would have to gather from some transaction history, or some kind of an action history. But no&amp;#8230; Not the JavaScript Wizard.&lt;/p&gt;

&lt;p&gt;You, would just press a button and the script would generate a report for you. It would even print it out. Create a persistent layer in which you are gathering information continuously. Create a small mySql database on your local machine and have the JavaScript enter data into that. Tadaaam&amp;#8230;. Usage statistics at the touch of a button. All there, only waiting to be extracted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reason Number 3: Tempering&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In understanding the ways of the DOM and the JavaScript you can create some very interesting test cases not to mention XSS attacks which is essentially JavaScript Injection. That&amp;#8217;s always fun and produces many very good bugs.&lt;/p&gt;

&lt;p&gt;Cookie manipulation. You want to simulate something? Like a time-out or a session loss or anything like that with a push of a button? Easy&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reason Number 4: Shortcuts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You have a massive field like registration that you need to fill out? The shortest way is to have an API which you can call via a curl script. But if that&amp;#8217;s not available and you would like to exercise the front-end any ways, then you will end up wasting hours and hours on always filling out all of those pesky fields.&lt;/p&gt;

&lt;p&gt;And suddenly I&amp;#8217;m hearing: &amp;#8220;But I&amp;#8217;m using Selenium plugin for that.&amp;#8221; &amp;#8211; you might say. Sure, use that. But I&amp;#8217;m using Chrome. &amp;#8220;But there is iMacros for that.&amp;#8221; &amp;#8211; you might say again. Sure, I know&amp;#8230; But! Let&amp;#8217;s see which takes longer&amp;#8230;&lt;/p&gt;

&lt;p&gt;Open selenium, load the script, run it, see it fail, run it again, ahh success, good. Same with iMacros. As opposed to, having a Bookmarklet right in front of you, on your bookmark, and with a click of a button, or with entering something into the browsers search bar, you suddenly fill out the form and press submit.&lt;/p&gt;

&lt;p&gt;You see the difference is that JavaScript runs faster and more accurate by it self in such short things then with a wrapper around it. And it&amp;#8217;s faster accessible as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reason Number 5: Security&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are all sorts of things that a security tester can do with a small script which gathers session information and availability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reason Number 6: Accessibility&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is of course the easiest one. There are ample of scripts and browser plugins to test accessibility which is an all time favourite for everybody in the front-end land. Make your life a little bit easier. How bout just running a bookmark like &lt;a href=&#34;http://squizlabs.github.io/HTML_CodeSniffer/&#34;&gt;HTML_CodesSniffer&lt;/a&gt; an see a very gorgeous result like this:&lt;/p&gt;

&lt;p&gt;![][2]&lt;/p&gt;

&lt;p&gt;Ain&amp;#8217;t it beautiful? What stops YOU from writing your own?&lt;/p&gt;

&lt;p&gt;So get out there and learn JavaScript. It&amp;#8217;s easy. I&amp;#8217;m not telling you to become a front-end developer, just know thy tools and you shellet receive the blessings of the IT Gods.&lt;/p&gt;

&lt;p&gt;As always,&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;

&lt;p&gt;[2]: &lt;a href=&#34;http://i1-scripts.softpedia-static.com/screenshots/HTML-CodeSniffer_1.png&#34;&gt;http://i1-scripts.softpedia-static.com/screenshots/HTML-CodeSniffer_1.png&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Note taking what when how often</title>
      <link>https://skarlso.github.io/2014/05/20/note-taking-what-when-how-often/</link>
      <pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/05/20/note-taking-what-when-how-often/</guid>
      <description>&lt;p&gt;Hello Everybody.&lt;/p&gt;

&lt;p&gt;Today I would like to tell you about a little conversation I had with my friend Adrian.&lt;/p&gt;

&lt;p&gt;The topic was about how, when and what to log during a testing session regarding a story.&lt;/p&gt;

&lt;p&gt;So let&amp;#8217;s see what came out of that talk&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Logging your work&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The question is really not whether you should log your work or not, but rather to what extend. Because we all know that you should log your work. It helps you recall and helps you organize and think out testing strategies. But the extend and methods are a big question. So here is my routine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Visually inclined&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am a very visual person. I log my work with doodles and such like &lt;a href=&#34;http://www.huibschoots.nl/wordpress/&#34;&gt;Mr. Huib Schoots&lt;/a&gt; who uses Sketchnote taking. You have seen some of my sketches if you follow my twitter feed, like this one =&amp;gt; &lt;img src=&#34;https://pbs.twimg.com/media/BAm6RSTCMAEvjas.jpg&#34; alt=&#34;&#34; /&gt;. You know I like to draw so for me colour and organizing and doodling is key to make a note more personalized and live.&lt;/p&gt;

&lt;p&gt;That comes with a drawback. The draw back are many&amp;#8230;&lt;/p&gt;

&lt;p&gt;First of, I need to do that in a notebook. I could bring my wacoom tablet to work and draw in paint, but that wouldn&amp;#8217;t be the same. And I don&amp;#8217;t particularly like drawing on a tablet actually.&lt;/p&gt;

&lt;p&gt;Second one, it&amp;#8217;s completely unsearchable. As Adrian pointed out, you can&amp;#8217;t search in a notebook, even if you are using side pointers like a sticky note or something. You won&amp;#8217;t be able to instantly find and track down something you did. And after a while it gets cluttered with doodles and the notes are lost in-between. It will be very colourful and utterly useless.&lt;/p&gt;

&lt;p&gt;Third one is, it&amp;#8217;s slow. Typing is much faster.&lt;/p&gt;

&lt;p&gt;On the bright side&amp;#8230; I love doodling. And if I can draw something up with a picture I will understand it much faster rather then reading a few lines of words chunked together.&lt;/p&gt;

&lt;p&gt;If I draw an awesome diagram I will get what&amp;#8217;s going on much much faster.&lt;/p&gt;

&lt;p&gt;And it will be more fun to actually right it down with a nice fountain pen with a beautiful tip that can create such marvels that you don&amp;#8217;t want to put it down.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s portable. I can carry my notebook everywhere. I should be able to do the same with a laptop, but since it&amp;#8217;s tied into a dock station and I don&amp;#8217;t want to carry it around with myself everywhere I won&amp;#8217;t do that. I could create notes though in my notebook and then write them down into the laptop after I&amp;#8217;m done? Sure&amp;#8230;&lt;/p&gt;

&lt;p&gt;So now let&amp;#8217;s go and see the other one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Electronic note-taking&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think I already pointed out a few positives about that. It&amp;#8217;s searchable. Definitely. It&amp;#8217;s fast. Yes. It&amp;#8217;s more convenient, more organized can be backed up and you won&amp;#8217;t run out of ink or space or somebody won&amp;#8217;t take it away to a meeting because &amp;#8220;Ohh I saw it on your desk and I needed a paper hope that&amp;#8217;s okay.&amp;#8221;.&lt;/p&gt;

&lt;p&gt;I understand the benefits of it. But it&amp;#8217;s very very rigid. It has no colour, no personalization and no feeling whatsoever. It&amp;#8217;s frigid, standardized and without life. So I need something to make it a bit better. I have a couple of tools for that.&lt;/p&gt;

&lt;p&gt;First off I need a good graphics maker to create diagrams. There is an awesome free tool pointed out by Adrian to do that called &lt;a href=&#34;http://www.yworks.com/en/products_download.php&#34;&gt;yEd&lt;/a&gt;. Download the zip and run the jar. I can live with that. Creates nice diagrams and flowcharts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/swcdn5N.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s quite powerful. Go look it up. There are a gazillion picture on Ze internet.&lt;/p&gt;

&lt;p&gt;But the notes still lack personalization. There are a couple of tools which you can use if you, like me, shy away from everything that&amp;#8217;s Microsoft, you have the opportunity to use Emacs with the org plugin which makes absolutely amazing documents.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dto.github.io/images/tutorial-11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s awesome but the problem is that it will only work with Emacs and nothing else. And from time to time I don&amp;#8217;t like the controls of Emacs. I&amp;#8217;m a sublime text person. So recently I found a little plugin for sublime text called &lt;a href=&#34;https://github.com/aziz/PlainTasks&#34;&gt;PlainTask&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example of how it can look like: ![][7]&lt;/p&gt;

&lt;p&gt;I LOVE it. You can add little notes and set a task to complete or defer it and it sort of highlights and things like that, which I like. It&amp;#8217;s still not doodling but it get&amp;#8217;s the job done and will be searchable and will be fast and available. And you can use Sublime text&amp;#8217;s awesome power of foldering. Create a root folder and open it with sublime. Then create one folder / story you are testing and put everything related to that story in that directory and then press CTRL+O and unleash the magic!&lt;/p&gt;

&lt;p&gt;Instant search and organization at the power of your fingertips. Even search IN the files themselves.&lt;/p&gt;

&lt;p&gt;This makes it a bit better and bearable. Which brings me to the final topic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note taking frequency&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So my friend argued that he create a folder for EVERY story he ever tests. Even if it&amp;#8217;s only one word he puts into it to as a memory trigger he does it. I argued that that seems to be a little too extensive. But he said in return, and I have to agree on that, that once you stop doing something because of an excuse like, ahh I don&amp;#8217;t need to do it because it&amp;#8217;s a small story, you will stop doing it completely. And this is actually true for everything in your life. And as somebody who recently started running ( 1 month ago ) I understand the weight of that sentence very well.&lt;/p&gt;

&lt;p&gt;So I would say do as much note taking as you can even if it is a little word that jogs your memory to remember some detail about the story. Even if it takes more time to create the folder and the note, it will help you at least to remember doing it and testing it if nothing else.&lt;/p&gt;

&lt;p&gt;Although I don&amp;#8217;t think I will do one for everything I will certainly try. Now with these awesome tools at my disposal I might even enjoy the rigidity of the keyboard more. 😉&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;Have a wonderful evening!&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;

&lt;p&gt;[7]: &lt;a href=&#34;http://www.nealsheeran.com/images/plaintasks.png&#34;&gt;http://www.nealsheeran.com/images/plaintasks.png&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Chrome Search Engine – Multiple Search Params</title>
      <link>https://skarlso.github.io/2014/05/18/using-chrome-search-engine-multiple-search-params/</link>
      <pubDate>Sun, 18 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2014/05/18/using-chrome-search-engine-multiple-search-params/</guid>
      <description>&lt;p&gt;Hello Everybody.&lt;/p&gt;

&lt;p&gt;Today I would like to write a few words about Chrome&amp;#8217;s Search Engines.&lt;/p&gt;

&lt;p&gt;You&amp;#8217;re probably already using it for a couple of things, like Google, or Amazon searches or YouTube or anything like that. But are you using it to access environments and testing tools faster, with queries?&lt;/p&gt;

&lt;p&gt;For example, here is a quick Jira Search made easy:&lt;/p&gt;

&lt;p&gt;Keyword: jira&lt;/p&gt;

&lt;p&gt;URL: &lt;a href=&#34;https://atlas.projectname.com/jira/browse/PROJECT-%s&#34;&gt;https://atlas.projectname.com/jira/browse/PROJECT-%s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So just type: jira|space|9999&lt;/p&gt;

&lt;p&gt;Will immediately bring you to your ticket.&lt;/p&gt;

&lt;p&gt;&amp;#8220;Bah, why would I want that?&amp;#8221; &amp;#8211; you ask.&lt;/p&gt;

&lt;p&gt;Well, it&amp;#8217;s easy, and quick access, but wait. There is more. How about you want to access a test environment that changes only a number?&lt;/p&gt;

&lt;p&gt;Keyword: testenv&lt;/p&gt;

&lt;p&gt;URL: &lt;a href=&#34;https://qa%s.projectname.com/testenv&#34;&gt;https://qa%s.projectname.com/testenv&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just type: testenv|space|14&lt;/p&gt;

&lt;p&gt;&amp;#8220;Humbug!&amp;#8221; &amp;#8211; you might say. &amp;#8220;What if I have a different URL for an admin site and my main web site AND the number, hmmm? Also I have that stuff bookmarked anyways&amp;#8230;&amp;#8221; &amp;#8211; you might add in.&lt;/p&gt;

&lt;p&gt;Well, don&amp;#8217;t fret. By default, Chrome, does not provide this. I know FF does, but I don&amp;#8217;t like FF. That&amp;#8217;s that. So I have to make due with what I have. And indeed there is a solution for using multiple search parameters. It&amp;#8217;s is a JavaScript you can add in into the URL part and Chrome will interpret that. You can find that JavaScript in a few posts but you will find that THAT script is actually Wrong. Here is the &lt;strong&gt;fixed&lt;/strong&gt; Script, courtesy of yours truly:&lt;/p&gt;

&lt;div class=&#34;wp_syntax&#34;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&#34;line_numbers&#34;&gt;
        &lt;pre&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;
      &lt;/td&gt;
      
      &lt;td class=&#34;code&#34;&gt;
        &lt;pre class=&#34;javascript&#34; style=&#34;font-family:monospace;&#34;&gt;javascript&lt;span style=&#34;color: #339933;&#34;&gt;:&lt;/span&gt;
&lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;var&lt;/span&gt; s&lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #3366CC;&#34;&gt;&#39;%s&#39;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
url&lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #3366CC;&#34;&gt;&#39;https://%s.test%s.projectname.com/&#39;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
query&lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #3366CC;&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
urlchunks&lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt;url.&lt;span style=&#34;color: #660066;&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #3366CC;&#34;&gt;&#39;%s&#39;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
schunks&lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt;s.&lt;span style=&#34;color: #660066;&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #3366CC;&#34;&gt;&#39;;&#39;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;i&lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC0000;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color: #339933;&#34;&gt;&amp;&lt;/span&gt;lt&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;urlchunks.&lt;span style=&#34;color: #660066;&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color: #339933;&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;
    query&lt;span style=&#34;color: #339933;&#34;&gt;+=&lt;/span&gt;urlchunks&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#91;&lt;/span&gt;i&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#93;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;typeof&lt;/span&gt; schunks&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#91;&lt;/span&gt;i&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#93;&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #3366CC;&#34;&gt;&#39;undefined&#39;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;
        query&lt;span style=&#34;color: #339933;&#34;&gt;+=&lt;/span&gt;schunks&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#91;&lt;/span&gt;i&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#93;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;
&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;
location.&lt;span style=&#34;color: #660066;&#34;&gt;replace&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;query&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;So no you will have an entry like this:&lt;/p&gt;

&lt;p&gt;Keyword: testenv&lt;/p&gt;

&lt;p&gt;URL: paste in the upper script&lt;/p&gt;

&lt;p&gt;And try&amp;#8230; testenv|space|admin;14 =&amp;gt; which should result in: &lt;a href=&#34;https://admin.test14.projectname.com/&#34;&gt;https://admin.test14.projectname.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The location.replace at the end will bring you to the web page. It&amp;#8217;s interesting to note the s will be replaced by admin;14 which is a nice magic by JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This only works on a page like google.co.uk. For chrome pages, like the new tab, omnibox has this ability disabled unfortunately. &lt;img src=&#34;http://ramblingsofaswtester.com/wp-includes/images/smilies/frownie.png&#34; alt=&#34;:(&#34; class=&#34;wp-smiley&#34; style=&#34;height: 1em; max-height: 1em;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8220;Well then it&amp;#8217;s completely useless, isn&amp;#8217;t it?&amp;#8221; &amp;#8211; you might say. Well, it&amp;#8217;s usage is limited in power, that&amp;#8217;s true. But it&amp;#8217;s still useful as I&amp;#8217;m sure you have a couple of pages open anyways which you don&amp;#8217;t mind using up&amp;#8230;? And you have to remember less keywords only a few powerful ones.&lt;/p&gt;

&lt;p&gt;Credit for telling about Chrome Search Engines power in the first place goes to&amp;#8230; *drumrolls* =&amp;gt; &lt;a href=&#34;http://www.testfeed.co.uk/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.testfeed.co.uk/&#34;&gt;http://www.testfeed.co.uk/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anyhow&amp;#8230;&lt;/p&gt;

&lt;p&gt;As always, thanks for reading.&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why you should care about the quality of your test code</title>
      <link>https://skarlso.github.io/2013/11/02/why-you-should-care-about-the-quality-of-your-test-code/</link>
      <pubDate>Sat, 02 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/11/02/why-you-should-care-about-the-quality-of-your-test-code/</guid>
      <description>&lt;p&gt;Hello folks.&lt;/p&gt;

&lt;p&gt;Today I would like to talk to you about something interesting I was talking about with a developer friend.&lt;/p&gt;

&lt;p&gt;We talked about the quality of test code.&lt;/p&gt;

&lt;p&gt;He said&amp;#8230; And I will quote this&amp;#8230;&amp;#8221;Why should we care? It&amp;#8217;s not production code. We aren&amp;#8217;t giving it to the customer.&amp;#8221;&lt;/p&gt;

&lt;p&gt;There are a few reasons why you are going to get a slap in the face for a sentence like this. And let&amp;#8217;s clarify here that we are talking about unit and functional tests as well. It shouldn&amp;#8217;t matter what tests you are thinking about.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reason for a Slap #1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If a new comer comes to the company ( and don&amp;#8217;t tell me that&amp;#8217;s not happening so frequently ) then there are a few very good ways how he can learn to work with the new system. The first and almost best way to do so is&amp;#8230; to look at the tests. Because the tests are representing your system. And how will it look like if the tests are in a bad shape? What will his or her thoughts be?&lt;/p&gt;

&lt;p&gt;a. Wow what nice people what nice code. This looks fantastic. I&amp;#8217;m sure they are a bunch of people who care very much about code and practices and the quality of the product.&lt;/p&gt;

&lt;p&gt;b. Wow this is amazing. I&amp;#8217;m sure I will learn a lot about good coding practices here and I will have fun with a bunch of very clever people.&lt;/p&gt;

&lt;p&gt;c. Wow what the hell is this piece of cr*p? How the hell did I end up here? What are these people? A bunch of neanderthals? What does this even do? Where did it come from and why?&lt;/p&gt;

&lt;p&gt;I think we can agree on what his thoughts will be. And on top of that he will have a very hard time learning the code and what it does.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reason for a Slap #2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another reason is because you think that you write it down once and then you can forget about it&amp;#8230; Well guess again. That&amp;#8217;s not how things work in the software development word. You WILL have to go back to it eventually and then you will curse all hell for begin such an idiot about it not to factor out that one method that would have made your life, and everybody elses, a bit easier.&lt;/p&gt;

&lt;p&gt;Even after a week or two you won&amp;#8217;t remember how and why you wrote what you wrote and then you will be in a whole new world of hurt. You will have a very hard time finiding out the things you did and then trying to backtrack your steps to a place where you have some recollections.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reason for a Slap #3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s like grammar. You think it doesn&amp;#8217;t matter that you misspelled a word or two in an error message. Or that you have a bad name for a method or a really really critical grammatical error in a catch sentence? You think it doesn&amp;#8217;t matter since it&amp;#8217;s not affecting the logic of your code? Well think again. You are right in that it doesn&amp;#8217;t affect the logic of your code ( as long as you constantly make the same grammatical error in a sentence ) but it will affect how YOU personally look like.&lt;/p&gt;

&lt;p&gt;It will affect your profession. The way people think and talk about you. They won&amp;#8217;t think that you are a professional even though your logic is solid. They will think that you are sloppy and careless. And the same goes for the quality of your tests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reason for a Slap #4&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Quality can determine the solidness of the logic in the test. If your quality is bad you might actually test the bad thing. Your test might actually not do what you think since you can&amp;#8217;t even figure it out. Your test might be doing something entirely different and you wouldn&amp;#8217;t even notice.&lt;/p&gt;

&lt;p&gt;And a fautly test leaves you with a false positive and a potential very serious bug on your hand which you thought you had covered.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final Slap ( I mean thought )&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So&amp;#8230; the quality of your tests, even if you won&amp;#8217;t give them to your customer, matter for you. They matter for your company, your image and your fellow developers, testers. They will determine their view of you who wrote them and of your abilities in ways you didn&amp;#8217;t even think of.&lt;/p&gt;

&lt;p&gt;Please care. Save a test or two. Donate to the Test Trust Fund&amp;trade;, TTF today. Call 555-12234-Slap and be the one who cares.&lt;/p&gt;

&lt;p&gt;As always, thanks for reading,&lt;/p&gt;

&lt;p&gt;Have a nice day!&lt;/p&gt;

&lt;p&gt;Gergely&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why not to automate everything…</title>
      <link>https://skarlso.github.io/2013/07/31/why-not-to-automate-everything/</link>
      <pubDate>Wed, 31 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/07/31/why-not-to-automate-everything/</guid>
      <description>&lt;p&gt;Hello. I created a tale of why not to automate everything&amp;#8230; With legos&amp;#8230; Enjoy.&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/7604030/lego/picture1.jpg&#34; alt=&#34;Picture 1&#34; /&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/7604030/lego/picture2.jpg&#34; alt=&#34;Picture 2&#34; /&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/7604030/lego/picture3.jpg&#34; alt=&#34;Picture 3&#34; /&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/7604030/lego/picture4.jpg&#34; alt=&#34;Picture 4&#34; /&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/7604030/lego/picture5.jpg&#34; alt=&#34;Picture 5&#34; /&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/7604030/lego/picture6.jpg&#34; alt=&#34;Picture 6&#34; /&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/7604030/lego/picture7fixed.jpg&#34; alt=&#34;Picture 7&#34; /&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/7604030/lego/picture8.jpg&#34; alt=&#34;Picture 8&#34; /&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/7604030/lego/picture9.jpg&#34; alt=&#34;Picture 9&#34; /&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/7604030/lego/picture10.jpg&#34; alt=&#34;Picture 10&#34; /&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/7604030/lego/picture11.jpg&#34; alt=&#34;Picture 11&#34; /&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/7604030/lego/picture12.jpg&#34; alt=&#34;Picture 12&#34; /&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/7604030/lego/picture13.jpg&#34; alt=&#34;Picture 13&#34; /&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/7604030/lego/picture14.jpg&#34; alt=&#34;Picture 14&#34; /&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/7604030/lego/picture15.jpg&#34; alt=&#34;Picture 15&#34; /&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/7604030/lego/picture16.jpg&#34; alt=&#34;Picture 16&#34; /&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/7604030/lego/picture17.jpg&#34; alt=&#34;Picture 17&#34; /&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/7604030/lego/picture18.jpg&#34; alt=&#34;Picture 18&#34; /&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;![Picture 19][19]&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;[19]: &lt;a href=&#34;https://dl.dropboxusercontent.com/u/7604030/lego/picture19.jpg&#34;&gt;https://dl.dropboxusercontent.com/u/7604030/lego/picture19.jpg&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cucumber-Jvm And @AfterAll</title>
      <link>https://skarlso.github.io/2013/04/18/cucumber-jvm-and-afterall/</link>
      <pubDate>Thu, 18 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/04/18/cucumber-jvm-and-afterall/</guid>
      <description>&lt;p&gt;Hey folks.&lt;/p&gt;

&lt;p&gt;I find out something new about cucumber-jvm every day.&lt;/p&gt;

&lt;p&gt;If you want something that is executed after all of the tests have finished you must use the Java shutdownHook. It&amp;#8217;s simple really you add in a block of code that can run right before the JVM quits. I know I know&amp;#8230; It sounds awful but I found out that this is the actual way of doing this with java / cucumber.&lt;/p&gt;

&lt;p&gt;Anyways&amp;#8230;&lt;/p&gt;

&lt;p&gt;Here is something to do when all of your test quit-&amp;gt;&lt;/p&gt;

&lt;div class=&#34;wp_syntax&#34;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&#34;code&#34;&gt;
        &lt;pre class=&#34;java&#34; style=&#34;font-family:monospace;&#34;&gt;    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;void&lt;/span&gt; attachShutDownHook&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;
        &lt;span style=&#34;color: #003399;&#34;&gt;Runtime&lt;/span&gt;.&lt;span style=&#34;color: #006633;&#34;&gt;getRuntime&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&#34;color: #006633;&#34;&gt;addShutdownHook&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #003399;&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;
            @Override
            &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;void&lt;/span&gt; run&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;
                &lt;span style=&#34;color: #003399;&#34;&gt;Properties&lt;/span&gt; properties &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #003399;&#34;&gt;System&lt;/span&gt;.&lt;span style=&#34;color: #006633;&#34;&gt;getProperties&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color: #003399;&#34;&gt;String&lt;/span&gt; filename &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; properties.&lt;span style=&#34;color: #006633;&#34;&gt;getProperty&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&#34;filename&#34;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color: #003399;&#34;&gt;String&lt;/span&gt; path &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; properties.&lt;span style=&#34;color: #006633;&#34;&gt;getProperty&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&#34;path&#34;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
                List&lt;span style=&#34;color: #339933;&#34;&gt;&amp;lt;&lt;/span&gt;Story&lt;span style=&#34;color: #339933;&#34;&gt;&amp;gt;&lt;/span&gt; stories &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color: #339933;&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
&amp;nbsp;
                Path file &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; Paths.&lt;span style=&#34;color: #006633;&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;path &lt;span style=&#34;color: #339933;&#34;&gt;+&lt;/span&gt; filename&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;
                    &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;Files.&lt;span style=&#34;color: #006633;&#34;&gt;exists&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;file&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;
                        List&lt;span style=&#34;color: #339933;&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #339933;&#34;&gt;&amp;gt;&lt;/span&gt; lines &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; Files.&lt;span style=&#34;color: #006633;&#34;&gt;readAllLines&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;file, Charset.&lt;span style=&#34;color: #006633;&#34;&gt;defaultCharset&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
                        &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #003399;&#34;&gt;String&lt;/span&gt; line &lt;span style=&#34;color: #339933;&#34;&gt;:&lt;/span&gt; lines&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;
                            &lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//add file lines to a report here&lt;/span&gt;
                        &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;
                    &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;
                &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #003399;&#34;&gt;IOException&lt;/span&gt; e&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;
                    logger.&lt;span style=&#34;color: #006633;&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&#34;Exception occurred: &#34;&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;+&lt;/span&gt; e.&lt;span style=&#34;color: #006633;&#34;&gt;getLocalizedMessage&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;
                    &lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//send report to a remote location here&lt;/span&gt;
                    &lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//since this is a shutdown hook this should take only a few seconds.&lt;/span&gt;
            &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;
        &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
        logger.&lt;span style=&#34;color: #006633;&#34;&gt;infor&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&#34;Shut Down Hook Attached.&#34;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;So there you go. You would need to call this in a @BeforeClass to have it attached. This is a small hook attached after each test has run which would submit a report built up from a file. Why not use a listener or a custom report generator or whatever? Because maybe you have the report done in a remote place where you need to place a csv file which will be available to everybody to look at. And you want the report to be sent and generated dynamically. Or you have some clean up to do after your suit is done.&lt;/p&gt;

&lt;p&gt;In ruby the @AfterAll is actually equivalent to this which in ruby land would be at_exit.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;div class=&#34;wp_syntax&#34;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&#34;code&#34;&gt;
        &lt;pre class=&#34;ruby&#34; style=&#34;font-family:monospace;&#34;&gt;  &lt;span style=&#34;color:#CC0066; font-weight:bold;&#34;&gt;at_exit&lt;/span&gt; &lt;span style=&#34;color:#9966CC; font-weight:bold;&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#008000; font-style:italic;&#34;&gt;# Global teardown&lt;/span&gt;
    TempFileManager.&lt;span style=&#34;color:#9900CC;&#34;&gt;clean_up&lt;/span&gt;
  &lt;span style=&#34;color:#9966CC; font-weight:bold;&#34;&gt;end&lt;/span&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;So there it is. Hope this helped.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;And as always,&lt;/p&gt;

&lt;p&gt;Have a nice day!&lt;/p&gt;

&lt;p&gt;G.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cucumber Test Name and Tags on Feature</title>
      <link>https://skarlso.github.io/2013/04/15/cucumber-test-name-and-tags-on-feature/</link>
      <pubDate>Mon, 15 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/04/15/cucumber-test-name-and-tags-on-feature/</guid>
      <description>&lt;p&gt;Hello everybody.&lt;/p&gt;

&lt;p&gt;I would like to show you a gem today that I found out.&lt;/p&gt;

&lt;p&gt;Apparently there is no easy way to get to the name of an executing cucumber scenario in cucumber-jvm&lt;/p&gt;

&lt;p&gt;You can try something like that:&lt;/p&gt;

&lt;div class=&#34;wp_syntax&#34;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&#34;code&#34;&gt;
        &lt;pre class=&#34;java&#34; style=&#34;font-family:monospace;&#34;&gt;@After &lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;//this is cucumbers @Afters&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;void&lt;/span&gt; afterExecution&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;Scenario scenario&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;
    logger.&lt;span style=&#34;color: #006633;&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&#34;The status of the test is: &#34;&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;+&lt;/span&gt; scenario.&lt;span style=&#34;color: #006633;&#34;&gt;getStatus&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;But that isn&amp;#8217;t giving you too much now is it? And the API of scenario is as small as it can get. It offers you four options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ember&lt;/li&gt;
&lt;li&gt;getStatus&lt;/li&gt;
&lt;li&gt;isFailed&lt;/li&gt;
&lt;li&gt;write&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That doesn&amp;#8217;t help me. I wanted to get the name of the executed feature and the tags on that particular feature. I thought that&amp;#8217;s got to be as easy as just getting a scenario accessing the feature and get the tags. Hooooowww boy I was wrong.&lt;/p&gt;

&lt;p&gt;I ended up with this&amp;#8230;.&lt;/p&gt;

&lt;div class=&#34;wp_syntax&#34;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&#34;code&#34;&gt;
        &lt;pre class=&#34;java&#34; style=&#34;font-family:monospace;&#34;&gt;            &lt;span style=&#34;color: #003399;&#34;&gt;Field&lt;/span&gt; f &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; scenario.&lt;span style=&#34;color: #006633;&#34;&gt;getClass&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&#34;color: #006633;&#34;&gt;getDeclaredField&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&#34;reporter&#34;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
            f.&lt;span style=&#34;color: #006633;&#34;&gt;setAccessible&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
            JUnitReporter reporter &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;JUnitReporter&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt; f.&lt;span style=&#34;color: #006633;&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;scenario&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
&amp;nbsp;
            &lt;span style=&#34;color: #003399;&#34;&gt;Field&lt;/span&gt; executionRunnerField &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; reporter.&lt;span style=&#34;color: #006633;&#34;&gt;getClass&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&#34;color: #006633;&#34;&gt;getDeclaredField&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&#34;executionUnitRunner&#34;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
            executionRunnerField.&lt;span style=&#34;color: #006633;&#34;&gt;setAccessible&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
            ExecutionUnitRunner executionUnitRunner &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;ExecutionUnitRunner&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt; executionRunnerField.&lt;span style=&#34;color: #006633;&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;reporter&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
&amp;nbsp;
            &lt;span style=&#34;color: #003399;&#34;&gt;Field&lt;/span&gt; cucumberScenarioField &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; executionUnitRunner.&lt;span style=&#34;color: #006633;&#34;&gt;getClass&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&#34;color: #006633;&#34;&gt;getDeclaredField&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&#34;cucumberScenario&#34;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
            cucumberScenarioField.&lt;span style=&#34;color: #006633;&#34;&gt;setAccessible&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
            CucumberScenario cucumberScenario &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;CucumberScenario&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt; cucumberScenarioField.&lt;span style=&#34;color: #006633;&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;executionUnitRunner&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
&amp;nbsp;
            &lt;span style=&#34;color: #003399;&#34;&gt;Field&lt;/span&gt; cucumberBackgroundField &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; cucumberScenario.&lt;span style=&#34;color: #006633;&#34;&gt;getClass&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&#34;color: #006633;&#34;&gt;getDeclaredField&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&#34;cucumberBackground&#34;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
            cucumberBackgroundField.&lt;span style=&#34;color: #006633;&#34;&gt;setAccessible&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
            CucumberBackground cucumberBackground &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;CucumberBackground&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt; cucumberBackgroundField.&lt;span style=&#34;color: #006633;&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;cucumberScenario&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
&amp;nbsp;
            &lt;span style=&#34;color: #003399;&#34;&gt;Field&lt;/span&gt; cucumberFeatureField &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; cucumberBackground.&lt;span style=&#34;color: #006633;&#34;&gt;getClass&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&#34;color: #006633;&#34;&gt;getSuperclass&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&#34;color: #006633;&#34;&gt;getDeclaredField&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&#34;cucumberFeature&#34;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
            cucumberFeatureField.&lt;span style=&#34;color: #006633;&#34;&gt;setAccessible&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;
            CucumberFeature cucumberFeature &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;CucumberFeature&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt; cucumberFeatureField.&lt;span style=&#34;color: #006633;&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;cucumberBackground&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Ohhhhh yes! The fields which I wanted were all private and not accessible. I&amp;#8217;m sure there was a reason behind this decision but if it was sensible it eludes me. But in the world of programming nothing is impossible they say so there.&lt;/p&gt;

&lt;p&gt;In cucumberFeature there will be everything what you need. Tags, Names, Tests, Execution time. Everything.&lt;/p&gt;

&lt;p&gt;I know that cucumber runs with jUnit so if there is a better way to do this please for the love of my sanity share it with me.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

&lt;p&gt;And as always,&lt;/p&gt;

&lt;p&gt;Have a nice day.&lt;/p&gt;

&lt;p&gt;G.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My history in testing</title>
      <link>https://skarlso.github.io/2013/04/11/my-history-in-testing/</link>
      <pubDate>Thu, 11 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/04/11/my-history-in-testing/</guid>
      <description>&lt;p&gt;Hello folks.&lt;/p&gt;

&lt;p&gt;Today I&amp;#8217;d like to share with you some of the experiences I had as a beginner tester. I hope it sets you off on a path to enlightenment and leaves you off with a good appetite for testing. Shall we begin then?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The early days&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It was 2004 when I finished school and started working at my first company. I finished as a software developer which is kind of an exaggeration since I only finished a 2 years course of it. I wasn&amp;#8217;t really one for school. I was more of a home learner. That&amp;#8217;s how you learn programming these days anyways.&lt;/p&gt;

&lt;p&gt;The company didn&amp;#8217;t hire developers at that moment. At least not junior ones&amp;#8230; But! They were kind enough to offer a position as a tester. As the saying goes, Don&amp;#8217;t look a gift horse in the mouth, I accepted the position although my intention was to go over to development as soon as possible.&lt;/p&gt;

&lt;p&gt;Years went by. I was still a tester. I foamed and fumed about it I wanted to be a dev guy. I was furious. I was angry. I was inpatient. I was an idiot. Instead of crying and instead of the light going on after 2-3 years or more I should have realised the potential of my position sooner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Revelation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So there I was. I was sitting at my desk clicking away at stuff and writing up dull documentations about why I&amp;#8217;m clicking at that stuff and how I&amp;#8217;m clicking it. My document infect was so pretty and well formatted that I was fairly proud of it.&lt;/p&gt;

&lt;p&gt;I ignored calls of my sanity and went on producing test cases and documents for many many more months / years. I was bad at my job. And I tell you why. I missed bugs I missed the little things that made the difference. I was following documentation by the letter I was leaving out things I wasn&amp;#8217;t paying attention I wanted to be a developer damn it!&lt;/p&gt;

&lt;p&gt;But fortunately because of various people in my life, like my brother, my resource manager, my friends and this guy :: James Marcus Bach ( &lt;a href=&#34;http://www.satisfice.com/&#34; title=&#34;http://www.satisfice.com/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.satisfice.com/&#34;&gt;http://www.satisfice.com/&lt;/a&gt;&lt;/a&gt; ) :: I soon begun to realise that this job is about so much more! I read Jame&amp;#8217;s book &lt;a href=&#34;http://www.buccaneerscholar.com/&#34; title=&#34;The buccaneer scholar&#34; target=&#34;_blank&#34;&gt;The buccaneer scholar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It opened my eyes in so many ways. I knew that there is somebody else out there how is like me. Passionet and keen on learning new things. Exploring technology and going where nobody else went before. I was beginning to understand that I could be much more in this position. In my country at that time Testers weren&amp;#8217;t regarded for too much. We were the enemy that needed defeating. We were in the way. We were somebody who had to be hated. Fortunately it changed much since then and lucky for us The Company had great support for Testers.&lt;/p&gt;

&lt;p&gt;I learned that I can use my passion. I learned that testing can be / IS, indeed, the best thing that could have happened to me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ascension&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With these new thoughts in my mind I begun to evolve. I realised that I can incorporate my dev skills into testing and later my testing skill into development. I was no longer following test cases blindly. I was no longer writing up pretty documentations ( I was writing other kind of documentations.. 😉 ). I was following instinct, skills, knowledge I hoarded from people. I was talking to the Devs, I was talking to the deployment team, I was talking to the managers AND the product owners. I hoarded knowledge as much as possible. I wrote everything down into my Mind Maps and was determined to become the single most knowledgable entity on the projects I was working on.&lt;/p&gt;

&lt;p&gt;I created small tools that helped in my tedious, boring, unimaginative tasks of repetitive clicking. It didn&amp;#8217;t took so long I was sharing my tools between other testers. Small javascripts which filled in forms. Tools, perl scripts to format docs and test results and so and so forth.&lt;/p&gt;

&lt;p&gt;I embraced testing. It become my way of Life. It wasn&amp;#8217;t a simple job anymore. It was embedded into my brain processes and synapses. And that&amp;#8217;s when I got into automation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The later years&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So I got into automation. I loved it. The thought that I can bend the computers will to do my bidding / job was absolutely mind blowing. I&amp;#8217;ve done development at that point already of course that wasn&amp;#8217;t new to me. And I also was shown some way of automation but that wasn&amp;#8217;t so great so I dismissed this possibility for a long time. After a while I came back to it with the thought that, hey I could do this better. Selenium came out at that time around, Watir was also there and a couple of other tools in Perl.&lt;/p&gt;

&lt;p&gt;I started developing with / in / for those tools and noted that despite the believe that it&amp;#8217;s only automation it actually took quite some thinking to come up with a framework that was adaptable, concise, manageable, fast and so on and so fort. It was an effort that most people didn&amp;#8217;t realise or care to know about.&lt;/p&gt;

&lt;p&gt;So for the better part of those years I was trying to convince people that building a testing framework requires actual development work. And is not something that should be taken lightly. I sort of succeeded with it&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After various circumstances in my life I moved to UK and took a job as an SET(Software Developer in Test). It sounds fancy but is rather just an automation guy who from time to time looks at production code. It was a spring board for me. And now days it seems I&amp;#8217;m simply just a developer. But!!! And here comes the twist.&lt;/p&gt;

&lt;p&gt;Because of my years of background in Test I feel I&amp;#8217;m so much more. I know to write testable code. I know many ways how my code could fail. I know many ways of writing something and then coding up a script for testing or do extensive unit testing. I don&amp;#8217;t love my code blindly so that when it&amp;#8217;s done I only test the &amp;#8220;happy path&amp;#8221; because I don&amp;#8217;t have the time to code up more.&lt;/p&gt;

&lt;p&gt;I will always have time for testing. I will &lt;strong&gt;begin&lt;/strong&gt; with testing. Because people need to understand that the only way to go fast is to go slow. If you go fast it will bite you in the behind and you will suffer more then you would have suffered if you would have written up that one last little test for that one last little corner for the world that is your boiling, brooding, breathing pile of code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The future&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Honestly I don&amp;#8217;t know were I&amp;#8217;m going from here. Being a full pledged developed is a new territory for me even though I was an automation dev before. But I&amp;#8217;m looking forward to this exciting new life. And I will NEVER ditch my Testing carrier. In fact I&amp;#8217;m aiming to complete the BBST course next month. Because once you&amp;#8217;ve been a tester you will never go back being anything else. It becomes a part of you. And stays with you forever.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

&lt;p&gt;And as always,&lt;/p&gt;

&lt;p&gt;Have a nice day!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What you really need to know to become a Testing Expert</title>
      <link>https://skarlso.github.io/2013/01/21/what-you-really-need-to-become-a-testing-expert/</link>
      <pubDate>Mon, 21 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2013/01/21/what-you-really-need-to-become-a-testing-expert/</guid>
      <description>&lt;p&gt;Hello Everybody.&lt;/p&gt;

&lt;p&gt;Today I would like to show you what you need to become a Testing expert.&lt;/p&gt;

&lt;p&gt;If you had noticed I deliberately left out the word Software. Why? Because becoming and expert in Testing Anything has the same root as becoming an expert to test software. And for that let me take you back to a Galaxy Far Far Away in Time AND Space.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The beginnings&amp;#8230;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I went to school in Oroszlany, my home town in Hungary. My official Technical title would be Mechanical Testing Engineer. I had the luck that most things which were thought at that school and I liked were thought by people I liked too and were clever in their respective fields. Like Pneumatics, Metallurgy, Mechanics, Chemistry these were all really awesome fields. To this day I don&amp;#8217;t know why I haven&amp;#8217;t ended up in some lab testing the breaking point of metals and the capacity of various chemicals.&lt;/p&gt;

&lt;p&gt;But ahh well.. I still remember some of the ISO standards we had to memorize. Like in Metallurgy the Charpy pendulum impact test which we loved so very much to perform. The ISO standard for that is ISO 148-1:2009. Now let me see if I still remember that correctly&amp;#8230; Yes! I&amp;#8217;ve still got it. So where am I going with this?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Moving on&amp;#8230;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Back then we performed a lot of operations on various metals and a lot of chemical testings and the like. The most important part of every performed test was always to have insight. Insight in the structure of the metal. How it was made, how it was moulded and then shaped and heated and cooled and so on and so forth. We had to know EVERYTHING about the creation of this element that we had to test. Without that knowledge you could of corse still perform the test but you didn&amp;#8217;t had any additional information why that test was useful or what it proved. Sure, you could have looked at the specification of the metal but that didn&amp;#8217;t give you anything about the inner structure of it.&lt;/p&gt;

&lt;p&gt;That was provided to you by the knowledge of the procedure that created it.&lt;/p&gt;

&lt;p&gt;You get where I&amp;#8217;m going with this&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Insight&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So back to software testing&amp;#8230; What is the single most important thing that gives you insight, that gives you the edge to be a professional? Knowing the development process. Knowing architecture. Knowing programming. Knowing the language and its capabilities and limitations.&lt;/p&gt;

&lt;p&gt;Sure you can be a good manual Tester. Of course you can be an excellent Exploratory Tester. But look at the others. James Marcus Bach. Alan Richardson. Michael Bolton and I could go on&amp;#8230; They all know programming. They all know it by heart and they could be exceptional programmers if they wanted to. They already know that in order to get very good at testing something you must have an insight on the subject matter. You can&amp;#8217;t test it thoughtfully without knowing its limitations its rules that it obeys its exploits that you can use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Last words&amp;#8230;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So in order to excel at your craft of test you have to have insight of the subject of the test. You can still become good but you always have to aim high don&amp;#8217;t you? A friend of mine reply to one of my tweets with a really good sentence:&amp;#8221;&amp;#8230;and then you realize that being the best in one implies being excellent in the other.&amp;#8221;. Exactly. Because the two are interconnected. They aren&amp;#8217;t actually two. It&amp;#8217;s one. It&amp;#8217;s called Engineering.&lt;/p&gt;

&lt;p&gt;Have a nice day and as always,&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>