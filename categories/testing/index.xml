<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Testing on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/testing/</link>
    <description>Recent content in Testing on Ramblings of a cloud engineer</description>
    <generator>Hugo -- 0.136.0</generator>
    <language>en</language>
    <lastBuildDate>Sun, 08 Feb 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://skarlso.github.io/categories/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why Lock Picking is like Testing</title>
      <link>https://skarlso.github.io/2015/02/08/why-lock-picking-is-like-testing/</link>
      <pubDate>Sun, 08 Feb 2015 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2015/02/08/why-lock-picking-is-like-testing/</guid>
      <description>&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Not a great many people know that I&amp;rsquo;m actually into Lock Picking as a hobby. This will not be a tutorial on how to do it, or I won&amp;rsquo;t really talk about how I do it; I would like to write about something completely different. So if you came here for that, here are a few very good resources:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.lockpicking101.com/%20&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.lockpicking101.com/&#34;&gt;http://www.lockpicking101.com/&lt;/a&gt; &lt;/a&gt;- Tutorials&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ukbumpkeys.com/collections/lock-picking&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.ukbumpkeys.com/collections/lock-picking&#34;&gt;http://www.ukbumpkeys.com/collections/lock-picking&lt;/a&gt;&lt;/a&gt; - Tools ( UK )&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.reddit.com/r/lockpicking/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.reddit.com/r/lockpicking/&#34;&gt;http://www.reddit.com/r/lockpicking/&lt;/a&gt;&lt;/a&gt; - Reddit&lt;/p&gt;
&lt;p&gt;For my post, click on.&lt;/p&gt;</description>
    </item>
    <item>
      <title>When cucumber goes wrong</title>
      <link>https://skarlso.github.io/2015/01/28/when-cucumber-goes-wrong/</link>
      <pubDate>Wed, 28 Jan 2015 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2015/01/28/when-cucumber-goes-wrong/</guid>
      <description>&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s face the horrible truth:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It&amp;rsquo;s rare / never happens that a manager / scrum master / product owner actually reads your cucumber test cases.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Back in the old days, this was one of the selling points of human readable tests and DSLs. It sounds nice and I&amp;rsquo;m sure in a utopia it also works.&lt;/p&gt;
&lt;p&gt;BDD is a very nice approach to write tests if used in a correct way. And I can relate that at some point, a manager or the product owner, actually writes up a draft of the tests. But that enthusiasm very rarely stays for the rest of the project.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why Testers are, like scientists</title>
      <link>https://skarlso.github.io/2015/01/26/why-testers-are-like-scientists/</link>
      <pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2015/01/26/why-testers-are-like-scientists/</guid>
      <description>&lt;p&gt;Hello everybody.&lt;/p&gt;
&lt;p&gt;Today, I would like to write about little observation I made along the way of being a tester.&lt;/p&gt;
&lt;p&gt;The title says it all. I think Testers, are like scientists. I would go even further, and say: Testers, are scientists.&lt;/p&gt;
&lt;p&gt;Let us see how the two compare.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why the expressiveness of your Tests is important – Part One</title>
      <link>https://skarlso.github.io/2014/11/15/why-the-expressiveness-of-your-tests-is-important-part-one/</link>
      <pubDate>Sat, 15 Nov 2014 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2014/11/15/why-the-expressiveness-of-your-tests-is-important-part-one/</guid>
      <description>&lt;p&gt;Hello Everybody.&lt;/p&gt;
&lt;p&gt;This time I&amp;rsquo;d like to write about the expressiveness of a Test. I think that it&amp;rsquo;s very important to write understandable and expressive tests. In older times I was studying novel writing. There is a rule which a novel needs to follow. It goes something like this: &amp;ldquo;A novel needs to lead its reader and make him understand in the simplest way what&amp;rsquo;s going on, with whom and why?&amp;rdquo;. In other words, it&amp;rsquo;s not a puzzle. It should be obvious what the test is trying to do and it should not require the reader to try and solve it in order to understand it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The seven Principles of Context Driven Testing – Mind Map</title>
      <link>https://skarlso.github.io/2014/10/23/the-seven-guidelines-of-context-driven-testing/</link>
      <pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2014/10/23/the-seven-guidelines-of-context-driven-testing/</guid>
      <description>&lt;p&gt;Hi Folks!&lt;/p&gt;
&lt;p&gt;I just wanted to share with you my mind map on the seven principles of Context Driven Testing.&lt;/p&gt;
&lt;p&gt;I used the notion of dragons since it&amp;rsquo;s seven. And a dragon is usually seven headed in my mind.&lt;/p&gt;
&lt;p&gt;So without further ado.&lt;/p&gt;
&lt;p&gt;Click for larger image.&lt;/p&gt;
&lt;p&gt;I have a hand drawn as well but I&amp;rsquo;m guessing that one wouldn&amp;rsquo;t be of much use since it follows my own imagination.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TDD is Dead – Not really</title>
      <link>https://skarlso.github.io/2014/05/26/tdd-is-dead-not-really/</link>
      <pubDate>Mon, 26 May 2014 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2014/05/26/tdd-is-dead-not-really/</guid>
      <description>&lt;p&gt;Is TDD dead?&lt;/p&gt;
&lt;p&gt;Not really. So let&amp;rsquo;s talk about this topic for a little bit.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m sure you already read a gazillion posts about this debate but frankly I&amp;rsquo;m writing this for myself, to rant a little bit, you know. Because somebody is wrong on the internet and I must intervene.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Five reasons why a front-end tester should learn Javascript</title>
      <link>https://skarlso.github.io/2014/05/23/five-reasons-why-a-front-end-tester-should-learn-javascript/</link>
      <pubDate>Fri, 23 May 2014 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2014/05/23/five-reasons-why-a-front-end-tester-should-learn-javascript/</guid>
      <description>&lt;p&gt;Hello everybody.&lt;/p&gt;
&lt;p&gt;Today I would like to write about a very interesting topic, I hope. So let&amp;rsquo;s get started.&lt;/p&gt;
&lt;p&gt;As the title already suggests, I&amp;rsquo;m writing about why a front-end tester should learn at least a little bit about JavaScripting and the DOM.&lt;/p&gt;
&lt;p&gt;Ohhh and contrary to the belief CSP ( Content Security Policy ) will &lt;strong&gt;not&lt;/strong&gt; be the death of such scripts. There are white-lists and workarounds and exclusions which can be implemented in order to allow local JavaScripting to continue. So don&amp;rsquo;t fret. Read on.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Note taking what when how often</title>
      <link>https://skarlso.github.io/2014/05/20/note-taking-what-when-how-often/</link>
      <pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2014/05/20/note-taking-what-when-how-often/</guid>
      <description>&lt;p&gt;Hello Everybody.&lt;/p&gt;
&lt;p&gt;Today I would like to tell you about a little conversation I had with my friend Adrian.&lt;/p&gt;
&lt;p&gt;The topic was about how, when and what to log during a testing session regarding a story.&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s see what came out of that talk.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Logging your work&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The question is really not whether you should log your work or not, but rather to what extend. Because we all know that you should log your work. It helps you recall and helps you organize and think out testing strategies. But the extend and methods are a big question. So here is my routine.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Chrome Search Engine – Multiple Search Params</title>
      <link>https://skarlso.github.io/2014/05/18/using-chrome-search-engine-multiple-search-params/</link>
      <pubDate>Sun, 18 May 2014 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2014/05/18/using-chrome-search-engine-multiple-search-params/</guid>
      <description>&lt;p&gt;Hello Everybody.&lt;/p&gt;
&lt;p&gt;Today I would like to write a few words about Chrome&amp;rsquo;s Search Engines.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;re probably already using it for a couple of things, like Google, or Amazon searches or YouTube or anything like that. But are you using it to access environments and testing tools faster, with queries?&lt;/p&gt;
&lt;p&gt;For example, here is a quick Jira Search made easy:&lt;/p&gt;
&lt;p&gt;Keyword: jira&lt;/p&gt;
&lt;p&gt;URL: &lt;code&gt;https://atlas.projectname.com/jira/browse/PROJECT-%s&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So just type: jira|space|9999&lt;/p&gt;
&lt;p&gt;Will immediately bring you to your ticket.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why you should care about the quality of your test code</title>
      <link>https://skarlso.github.io/2013/11/02/why-you-should-care-about-the-quality-of-your-test-code/</link>
      <pubDate>Sat, 02 Nov 2013 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2013/11/02/why-you-should-care-about-the-quality-of-your-test-code/</guid>
      <description>&lt;p&gt;Hello folks.&lt;/p&gt;
&lt;p&gt;Today I would like to talk to you about something interesting I was talking about with a developer friend.&lt;/p&gt;
&lt;p&gt;We talked about the quality of test code.&lt;/p&gt;
&lt;p&gt;He said. And I will quote this.&amp;ldquo;Why should we care? It&amp;rsquo;s not production code. We aren&amp;rsquo;t giving it to the customer.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;There are a few reasons why you are going to get a slap in the face for a sentence like this. And let&amp;rsquo;s clarify here that we are talking about unit and functional tests as well. It shouldn&amp;rsquo;t matter what tests you are thinking about.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why not to automate everything…</title>
      <link>https://skarlso.github.io/2013/07/31/why-not-to-automate-everything/</link>
      <pubDate>Wed, 31 Jul 2013 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2013/07/31/why-not-to-automate-everything/</guid>
      <description>&lt;p&gt;Hello. I created a tale of why not to automate everything. With legos. Enjoy.&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Picture 1&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/2013/07/31/picture1.jpg&#34;&gt;&lt;/br&gt;
&lt;img alt=&#34;Picture 2&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/2013/07/31/picture2.jpg&#34;&gt;&lt;/br&gt;
&lt;img alt=&#34;Picture 3&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/2013/07/31/picture3.jpg&#34;&gt;&lt;/br&gt;
&lt;img alt=&#34;Picture 4&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/2013/07/31/picture4.jpg&#34;&gt;&lt;/br&gt;
&lt;img alt=&#34;Picture 5&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/2013/07/31/picture5.jpg&#34;&gt;&lt;/br&gt;
&lt;img alt=&#34;Picture 6&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/2013/07/31/picture6.jpg&#34;&gt;&lt;/br&gt;
&lt;img alt=&#34;Picture 7&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/2013/07/31/picture7.jpg&#34;&gt;&lt;/br&gt;
&lt;img alt=&#34;Picture 8&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/2013/07/31/picture8.jpg&#34;&gt;&lt;/br&gt;
&lt;img alt=&#34;Picture 9&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/2013/07/31/picture9.jpg&#34;&gt;&lt;/br&gt;
&lt;img alt=&#34;Picture 10&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/2013/07/31/picture10.jpg&#34;&gt;&lt;/br&gt;
&lt;img alt=&#34;Picture 11&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/2013/07/31/picture11.jpg&#34;&gt;&lt;/br&gt;
&lt;img alt=&#34;Picture 12&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/2013/07/31/picture12.jpg&#34;&gt;&lt;/br&gt;
&lt;img alt=&#34;Picture 13&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/2013/07/31/picture13.jpg&#34;&gt;&lt;/br&gt;
&lt;img alt=&#34;Picture 14&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/2013/07/31/picture14.jpg&#34;&gt;&lt;/br&gt;
&lt;img alt=&#34;Picture 15&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/2013/07/31/picture15.jpg&#34;&gt;&lt;/br&gt;
&lt;img alt=&#34;Picture 16&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/2013/07/31/picture16.jpg&#34;&gt;&lt;/br&gt;
&lt;img alt=&#34;Picture 17&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/2013/07/31/picture17.jpg&#34;&gt;&lt;/br&gt;
&lt;img alt=&#34;Picture 18&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/2013/07/31/picture18.jpg&#34;&gt;&lt;/br&gt;
&lt;img alt=&#34;Picture 19&#34; loading=&#34;lazy&#34; src=&#34;https://skarlso.github.io/img/2013/07/31/picture19.jpg&#34;&gt;&lt;/br&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cucumber-Jvm And @AfterAll</title>
      <link>https://skarlso.github.io/2013/04/18/cucumber-jvm-and-afterall/</link>
      <pubDate>Thu, 18 Apr 2013 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2013/04/18/cucumber-jvm-and-afterall/</guid>
      <description>&lt;p&gt;Hey folks.&lt;/p&gt;
&lt;p&gt;I find out something new about cucumber-jvm every day.&lt;/p&gt;
&lt;p&gt;If you want something that is executed after all of the tests have finished you must use the Java shutdownHook. It&amp;rsquo;s simple really you add in a block of code that can run right before the JVM quits. I know I know. It sounds awful but I found out that this is the actual way of doing this with java / cucumber.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cucumber Test Name and Tags on Feature</title>
      <link>https://skarlso.github.io/2013/04/15/cucumber-test-name-and-tags-on-feature/</link>
      <pubDate>Mon, 15 Apr 2013 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2013/04/15/cucumber-test-name-and-tags-on-feature/</guid>
      <description>&lt;p&gt;Hello everybody.&lt;/p&gt;
&lt;p&gt;I would like to show you a gem today that I found out.&lt;/p&gt;
&lt;p&gt;Apparently there is no easy way to get to the name of an executing cucumber scenario in cucumber-jvm&lt;/p&gt;
&lt;p&gt;You can try something like that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@After&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//this is cucumbers @Afters&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;afterExecution&lt;/span&gt;(Scenario scenario) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    logger.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The status of the test is: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; scenario.&lt;span style=&#34;color:#a6e22e&#34;&gt;getStatus&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But that isn&amp;rsquo;t giving you too much now is it? And the API of scenario is as small as it can get. It offers you four options:&lt;/p&gt;</description>
    </item>
    <item>
      <title>My history in testing</title>
      <link>https://skarlso.github.io/2013/04/11/my-history-in-testing/</link>
      <pubDate>Thu, 11 Apr 2013 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2013/04/11/my-history-in-testing/</guid>
      <description>&lt;p&gt;Hello folks.&lt;/p&gt;
&lt;p&gt;Today I&amp;rsquo;d like to share with you some of the experiences I had as a beginner tester. I hope it sets you off on a path to enlightenment and leaves you off with a good appetite for testing. Shall we begin then?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The early days&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It was 2004 when I finished school and started working at my first company. I finished as a software developer which is kind of an exaggeration since I only finished a 2 years course of it. I wasn&amp;rsquo;t really one for school. I was more of a home learner. That&amp;rsquo;s how you learn programming these days anyways.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What you really need to know to become a Testing Expert</title>
      <link>https://skarlso.github.io/2013/01/21/what-you-really-need-to-become-a-testing-expert/</link>
      <pubDate>Mon, 21 Jan 2013 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2013/01/21/what-you-really-need-to-become-a-testing-expert/</guid>
      <description>&lt;p&gt;Hello Everybody.&lt;/p&gt;
&lt;p&gt;Today I would like to show you what you need to become a Testing expert.&lt;/p&gt;
&lt;p&gt;If you had noticed I deliberately left out the word Software. Why? Because becoming and expert in Testing Anything has the same root as becoming an expert to test software. And for that let me take you back to a Galaxy Far Far Away in Time AND Space.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The beginnings.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I went to school in Oroszlany, my home town in Hungary. My official Technical title would be Mechanical Testing Engineer. I had the luck that most things which were thought at that school and I liked were thought by people I liked too and were clever in their respective fields. Like Pneumatics, Metallurgy, Mechanics, Chemistry these were all really awesome fields. To this day I don&amp;rsquo;t know why I haven&amp;rsquo;t ended up in some lab testing the breaking point of metals and the capacity of various chemicals.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TEAS: Testing Exploration Adventure Session</title>
      <link>https://skarlso.github.io/2012/12/01/teas-testing-exploration-adventure-session/</link>
      <pubDate>Sat, 01 Dec 2012 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2012/12/01/teas-testing-exploration-adventure-session/</guid>
      <description>&lt;p&gt;Hello Everybody.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d like to introduce T.E.A.S. to you. This is something I came up with yesterday which requires a lot of fantasy some good thinking planning and enthusiastic people. So, let&amp;rsquo;s get started.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is it about?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Testing Exploration Adventure Session is about. Testing! There. No real surprise, eh? TEAS has it&amp;rsquo;s roots in &lt;strong&gt;RPGs&lt;/strong&gt;. Role Playing Games. If you ever heard or read about M.A.G.U.S. or the more known Dungeons &amp;amp; Dragons you will have a better understanding of the concept behind this phenomena.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JMS Connection setup and Framework</title>
      <link>https://skarlso.github.io/2012/03/04/jms-connection-setup-and-framework/</link>
      <pubDate>Sun, 04 Mar 2012 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2012/03/04/jms-connection-setup-and-framework/</guid>
      <description>&lt;p&gt;Hello chumps.&lt;/p&gt;
&lt;p&gt;Today I want to write about jms connection testing with a small framework. I wrote a small thing using a factory object model. It&amp;rsquo;s a lead, a proof of concept. You can use this to go onward.&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s begin with the JMS connection it self.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JMS Connection&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First rule of thumb is: &amp;ldquo;Don&amp;rsquo;t wait for a response when dealing with JMS queues.&amp;rdquo; How so? Because, a JMS queue is asynchronous so you wont get back anything. There are however two ways of checking if it was a success or not.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
