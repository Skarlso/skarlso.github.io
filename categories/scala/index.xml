<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scala on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/scala/</link>
    <description>Recent content in scala on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 27 Jan 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://skarlso.github.io/categories/scala/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>From Zero to Hundred in Four seconds</title>
      <link>https://skarlso.github.io/2015/01/27/from-zero-to-hundred-in-four-seconds/</link>
      <pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2015/01/27/from-zero-to-hundred-in-four-seconds/</guid>
      <description type="html"><![CDATA[<p>I thought I throw my grudge out of the window against Scala and try something with it.</p>
<p>I also got my hands on a fairly new book, called: &ldquo;<a href="http://www.amazon.co.uk/Learning-Scala-Practical-Functional-Programming/dp/1449367933/ref=sr_1_1?ie=UTF8&qid=1422340157&sr=8-1&keywords=learning+scala+a+practical" target="_blank">Learning Scala: Practical Functional Programming for the JVM</a>&rdquo;. Turns out to be a rather fun book to read. And Jason Swartz has a nice way of writing. So I wanted to play around with <a href="https://www.playframework.com/" target="_blank">Play 2 Framework</a>. ItÂ now comes packaged inÂ <a href="https://typesafe.com/get-started" target="_blank">Activator</a>.</p>
<p>So, I started the long path from almost zero to handle all that. I&rsquo;m running the latest Ubuntu ( 14 ) and latest Java ( 8 ). The list:Â Scala, SBT, IntelliJ, Play ( through activator ).</p>
<p>I was pleased that, considering a network which allowed me a download speed of ~1.5MB/s ( that&rsquo;s byte, not bit ), I was up and running in about 4 minutes. That&rsquo;s Play running, with a test application created through activator and then imported into an IntelliJ Scala project.</p>
<p>I&rsquo;m impressed.</p>
<p>I added SBT through the package managerÂ like this:</p>
<pre><code>echo &quot;deb http://dl.bintray.com/sbt/debian /&quot; | sudo tee -a /etc/apt/sources.list.d/sbt.list
sudo apt-get update
sudo apt-get install sbt
</code></pre>
<p>It&rsquo;s really simple.</p>
<p>After that, I did an apt-get on the latest Scala.</p>
<p>I already had IntelliJ.</p>
<p>Activator download took me ~1 minute; then I executed the command to create a test app:</p>
<pre class="prettyprint prettyprinted"><code class="language-bash">&lt;span class="pln">$ activator new my&lt;/span>&lt;span class="pun">-&lt;/span>&lt;span class="pln">first&lt;/span>&lt;span class="pun">-&lt;/span>&lt;span class="pln">app play&lt;/span>&lt;span class="pun">-&lt;/span>&lt;span class="pln">scala&lt;/span></code></pre>
<p>Simple. Activator downloaded everything my system was still missing.</p>
<p>Then run the start command:</p>
<pre class="prettyprint prettyprinted"><code class="language-bash">&lt;span class="pln">$ cd my&lt;/span>&lt;span class="pun">-&lt;/span>&lt;span class="pln">first&lt;/span>&lt;span class="pun">-&lt;/span>&lt;span class="pln">app
$ activator&lt;/span></code></pre>
<p>And you are ready to rock &amp; roll. Importing it in IntelliJ was a blink of an eye.</p>
<p>I&rsquo;m really impressed with how easy getting started became with these projects and frameworks. I remember a time where I had to configure everything, get tomcat and the whole JVM or Jetty or whatnot, and try to get up and running took half a day at least. Would my internet be faster, I think this would have been even less.</p>
<p>I&rsquo;ll post more as I go forward.</p>
<p>As always,</p>
<p>Thanks for reading.</p>
]]></description>
    </item>
    
    <item>
      <title>Learning programming with a visual mind</title>
      <link>https://skarlso.github.io/2012/09/09/learning-programming-with-a-visual-mind/</link>
      <pubDate>Sun, 09 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://skarlso.github.io/2012/09/09/learning-programming-with-a-visual-mind/</guid>
      <description type="html"><![CDATA[<p>Hi folks.</p>
<p>Today I want to write to you about <strong>learning</strong> something with a <strong>visual mind</strong>. There are a gazillion posts out there that tell you how to learn something with a visual mind. However, there are only a few <strong>actually describing</strong> how to learn something as complicated and logical as programming. How do you draw up a function? How do you draw up a cycle or a structure?</p>
<p>Actually these are really <strong>easy</strong>. A <strong>cycle</strong>? No problem. What&rsquo;s a <strong>circle</strong> if not a cycle? <strong>Structure</strong>? This should be an easy one. You can draw a whole <strong>building</strong> and then place <strong>building blocks</strong> into it.</p>
<p>I have a very <strong>strong visual mind</strong>. I don&rsquo;t remember names good for example however I remember every and each <strong>face very distinct</strong>. So if you come up to me, don&rsquo;t be surprised if I don&rsquo;t remember your name. So as I grew older and I took learning into my own hand I realised that there are <strong>techniques</strong> out there that I could have used to <strong>boost my learning</strong> in the early stages of my life too.</p>
<p>But there is no such thing as to be late for something. <strong>Life is constant learning</strong>. So don&rsquo;t hesitate to start learning something.</p>
<p>I <strong>started</strong> to learn <strong>Scala</strong> for example and I was <strong>brainstorming</strong> as how to <strong>draw</strong> up a good map for some programming practices. <strong>Brainstorming</strong> can help you coming up with something that can <strong>display your idea</strong>. Try to brainstorm <strong>in words only</strong> rather then sentences.</p>
<p>And I came up with these two for now, with the <strong>play framework</strong> in the middle.</p>
<p>![Structure]<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>![Route]<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>Now some of you <strong>might say</strong> this <strong>took long</strong> and is <strong>unnecessary</strong>. The information displayed can be <strong>remembered easily</strong> and that these drawings took longer then writing up two or three words. Now let&rsquo;s see.</p>
<p>These drawing, which are really <strong>rough</strong> actually, took me about <strong>10 minutes</strong> while reading and learning and what not. Yes they take longer. But if I write down <strong>two words</strong> how long will I remember them? I already <strong>forgot after I wrote it down</strong>!</p>
<p>This drawing with the griffon legs? <strong>Stuck there forever</strong>. ( Don&rsquo;t ask about the legs.. don&rsquo;t know where they came from. )</p>
<p>So visualisation goes a long way in your brain if you are wired that way. Remember that there is NOTHING that you can&rsquo;t display with a little bit of creativity and graphics.</p>
<p>Ohh and btw. Chances are that you only read the words in <strong>BOLD</strong> because your mind draws your attention to parts that stand out. And also you want to get over reading this article fast and you appreciate if key elements are taken out for you without the unimportant gibberish in between. ðŸ˜‰</p>
<p>Thanks for reading!</p>
<p>Gergely.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="http://dl.dropbox.com/u/7604030/structure.png">http://dl.dropbox.com/u/7604030/structure.png</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><a href="http://dl.dropbox.com/u/7604030/route.jpg">http://dl.dropbox.com/u/7604030/route.jpg</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></description>
    </item>
    
  </channel>
</rss>