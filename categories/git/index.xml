<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Ramblings of a cloud engineer</title>
    <link>https://skarlso.github.io/categories/git/</link>
    <description>Recent content in Git on Ramblings of a cloud engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Fri, 08 Jun 2018 08:01:00 +0100</lastBuildDate>
    <atom:link href="https://skarlso.github.io/categories/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Keep your git forks updated all the time</title>
      <link>https://skarlso.github.io/2018/06/08/fork-updater/</link>
      <pubDate>Fri, 08 Jun 2018 08:01:00 +0100</pubDate>
      <guid>https://skarlso.github.io/2018/06/08/fork-updater/</guid>
      <description>&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;Today&amp;rsquo;s is a quick tip for keeping your forks updated.&lt;/p&gt;
&lt;p&gt;If you are like me, and have at least a 100 forks in your repository because:
* You would like to contribute at some point
* Save it for yourself because you are afraid that it disappears
* Would like to make modifications for your own benefit
* Whatever the reason&lt;/p&gt;
&lt;p&gt;&amp;hellip;then you probably have a lot of trouble keeping them updated and making sure you always see the latest change.&lt;/p&gt;
&lt;p&gt;Upstream can change a lot especially if it&amp;rsquo;s a busy repository.&lt;/p&gt;
&lt;p&gt;Fret not. Help is here. This little ruby script will solve your troubles:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env ruby&lt;/span&gt;

require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;octokit&amp;#39;&lt;/span&gt;
require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;logger&amp;#39;&lt;/span&gt;

@logger &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Logger&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output.log&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update_fork&lt;/span&gt;(repo)
  repo_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; repo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name
  &lt;span style=&#34;color:#75715e&#34;&gt;# clone the repository -- octokit doesn&amp;#39;t provide this feature as it&amp;#39;s a github api library&lt;/span&gt;
  @logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cloning into &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;repo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ssh_url&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
  system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git clone &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;repo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ssh_url&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;repo_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#75715e&#34;&gt;# setup upstream for updating&lt;/span&gt;
  @logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;setup upstream to &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;repo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ssh_url&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
  system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cd &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;repo_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;amp;&amp;amp; git remote add upstream &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;repo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ssh_url&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#75715e&#34;&gt;# do the update&lt;/span&gt;
  @logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doing the update with push&amp;#34;&lt;/span&gt;)
  system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cd &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;repo_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;amp;&amp;amp; git fetch upstream &amp;amp;&amp;amp; git rebase upstream/master &amp;amp;&amp;amp; git push origin&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;ensure&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# ensure that the folder is cleaned up&lt;/span&gt;
  @logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cleanup: removing the repository folder&amp;#34;&lt;/span&gt;)
  system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rm -fr &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;repo_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Octokit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Client&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;:access_token&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ENV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GIT_TOKEN&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;per_page&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
repos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;repos({}, &lt;span style=&#34;color:#e6db74&#34;&gt;query&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;owner&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;sort&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;asc&amp;#39;&lt;/span&gt;})

&lt;span style=&#34;color:#75715e&#34;&gt;# Go through all the pages and add them to the list of repositories.&lt;/span&gt;
repos&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat(client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last_response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rels&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:next&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;get&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data)

repos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; repos&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;select{ &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fork }

@logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;going to update &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;repos&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; repositories&amp;#34;&lt;/span&gt;)

repos&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;repo&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# get the repositories information&lt;/span&gt;
  @logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;updating &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;repo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
  r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;repository(repo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;id)
  update_fork(r)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This script is also available as a Gist located &lt;a href=&#34;https://gist.github.com/Skarlso/fd5bd5971a78a5fa9760b31683de690e&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Put this into a cron job, or a Jenkins job on a schedule and you should be good to go.&lt;/p&gt;
&lt;p&gt;Note two things:
First: &lt;code&gt;ENV[&#39;GIT_TOKEN&#39;]&lt;/code&gt; this should be set to a token which you can acquire by navigating to
&lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;tokens&lt;/a&gt;. Add a token which has &lt;code&gt;repo&lt;/code&gt; access.&lt;/p&gt;
&lt;p&gt;Second: Obviously this script will push to your local repository. So wherever you run this, make sure git is set-up and can push
to your repository via SSH. This script is using &lt;code&gt;ssh_url&lt;/code&gt; for the repositories. It won&amp;rsquo;t ask for a username or a password.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it. Enjoy and keep updating.&lt;/p&gt;
&lt;p&gt;Thanks for reading&lt;/p&gt;
&lt;p&gt;Gergely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple hook to rid of trouble</title>
      <link>https://skarlso.github.io/2016/07/12/simple-hook-to-rid-of-trouble/</link>
      <pubDate>Tue, 12 Jul 2016 00:00:00 +0000</pubDate>
      <guid>https://skarlso.github.io/2016/07/12/simple-hook-to-rid-of-trouble/</guid>
      <description>&lt;p&gt;Hi folks.&lt;/p&gt;
&lt;p&gt;This is but a simple git hook to run a test in order to ensure you can push. It also ignores the vendor folder if you happen to have on in your directory.&lt;/p&gt;
&lt;p&gt;Edit the file under &lt;code&gt;.git/hooks/pre-push.sample&lt;/code&gt; and add this at the end before the &lt;code&gt;exit 0&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go test &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;go list ./... |grep -v vendor&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
RESULT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$?
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $RESULT -ne &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed test run. Disallowing push.&amp;#34;&lt;/span&gt;
    exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After this, rename the file to &lt;code&gt;pre-push&lt;/code&gt; removing the .sample from it.&lt;/p&gt;
&lt;p&gt;If you now, mess something up, you should see something like this before your push:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# github.com/Skarlso/goprogressquest&lt;/span&gt;
./create.go:40: undefined: sha1 in sha1.Sum
./create.go:41: undefined: fmt in fmt.Sprintf
./create.go:115: undefined: json in json.Unmarshal
./create.go:130: undefined: json in json.Unmarshal
FAIL	github.com/Skarlso/goprogressquest &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;build failed&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Failed test run. Disallowing push.
error: failed to push some refs to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;git@github.com:Skarlso/goprogressquest.git&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That is all.&lt;/p&gt;
&lt;p&gt;Cheers,
Gergely.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
